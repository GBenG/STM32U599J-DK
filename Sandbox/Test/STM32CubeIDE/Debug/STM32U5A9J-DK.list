
STM32U5A9J-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029170  0800026c  0800026c  0001026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fcc  080293dc  080293dc  000393dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0802c3a8  0802c3a8  0003c3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000001c  0802c3c0  0802c3c0  0003c3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0802c3dc  0802c3dc  0003c3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000012c  20000000  0802c3e4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TouchGFX_Framebuffer 00151800  2000012c  0802c510  0004012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00046d34  20151930  0817dd10  00191930  2**3
                  ALLOC
  9 ._user_heap_stack 00001804  20198664  0817dd10  00198664  2**0
                  ALLOC
 10 .ARM.attributes 00000036  00000000  00000000  001a01b8  2**0
                  CONTENTS, READONLY
 11 FontFlashSection 000001a8  90000000  90000000  001a0000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 TextFlashSection 00000010  900001a8  900001a8  001a01a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 ExtFlashSection 00000000  900001b8  900001b8  001a01ee  2**0
                  CONTENTS
 14 .debug_info   000aad68  00000000  00000000  001a01ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00015109  00000000  00000000  0024af56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000035d8  00000000  00000000  00260060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000038b8  00000000  00000000  00263638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00051647  00000000  00000000  00266ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00058ea8  00000000  00000000  002b8537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001ae19e  00000000  00000000  003113df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000cf  00000000  00000000  004bf57d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c878  00000000  00000000  004bf64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000057aa  00000000  00000000  004cbec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	; (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <__do_global_dtors_aux+0x20>)
 800027a:	e000      	b.n	800027e <__do_global_dtors_aux+0x12>
 800027c:	bf00      	nop
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	20151930 	.word	0x20151930
 8000288:	00000000 	.word	0x00000000
 800028c:	080293c4 	.word	0x080293c4

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	; (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	; (80002a8 <frame_dummy+0x18>)
 800029a:	e000      	b.n	800029e <frame_dummy+0xe>
 800029c:	bf00      	nop
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	20151934 	.word	0x20151934
 80002a8:	080293c4 	.word	0x080293c4

080002ac <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 80002ac:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ae:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002b2:	4917      	ldr	r1, [pc, #92]	; (8000310 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 80002b4:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002b8:	4816      	ldr	r0, [pc, #88]	; (8000314 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 80002ba:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 80002bc:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002c0:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002c2:	4815      	ldr	r0, [pc, #84]	; (8000318 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002c4:	4912      	ldr	r1, [pc, #72]	; (8000310 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002c6:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002c8:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ca:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ce:	4913      	ldr	r1, [pc, #76]	; (800031c <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002d0:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002d2:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002d6:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002d8:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002dc:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002e0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002e4:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	490d      	ldr	r1, [pc, #52]	; (8000320 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ea:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ee:	4770      	bx	lr

080002f0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002f0:	f7ff bffe 	b.w	80002f0 <__tx_BadHandler>

080002f4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002f4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002f6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002fa:	4770      	bx	lr

080002fc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002fc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002fe:	f000 f89f 	bl	8000440 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 8000302:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 8000306:	4770      	bx	lr

08000308 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000308:	f7ff bffe 	b.w	8000308 <__tx_NMIHandler>

0800030c <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 800030c:	f7ff bffe 	b.w	800030c <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000310:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000314:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 8000318:	20197b40 	.word	0x20197b40
    LDR     r1, =SYSTICK_CYCLES
 800031c:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000320:	40ff0000 	.word	0x40ff0000

08000324 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000324:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000328:	4a31      	ldr	r2, [pc, #196]	; (80003f0 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800032a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800032c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000330:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000334:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000338:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800033a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800033e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000342:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000346:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800034a:	f3bf 8f6f 	isb	sy

0800034e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800034e:	e7fe      	b.n	800034e <__tx_wait_here>

08000350 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000350:	4828      	ldr	r0, [pc, #160]	; (80003f4 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000352:	4a29      	ldr	r2, [pc, #164]	; (80003f8 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000354:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000358:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800035a:	b191      	cbz	r1, 8000382 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800035c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800035e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000362:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000366:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800036a:	d101      	bne.n	8000370 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 800036c:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000370 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000370:	4c22      	ldr	r4, [pc, #136]	; (80003fc <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000372:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000376:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800037a:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 800037c:	b10d      	cbz	r5, 8000382 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800037e:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000380:	6023      	str	r3, [r4, #0]

08000382 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000382:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000384:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000386:	b1d1      	cbz	r1, 80003be <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000388:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800038a:	b662      	cpsie	i

0800038c <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800038c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800038e:	4c1b      	ldr	r4, [pc, #108]	; (80003fc <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000390:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000392:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000396:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000398:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800039a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800039e:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003a2:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003a6:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003aa:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003ae:	d101      	bne.n	80003b4 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003b0:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003b4 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003b4:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003b8:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 80003bc:	4770      	bx	lr

080003be <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003c0:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003c2:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003c4:	b949      	cbnz	r1, 80003da <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 80003c6:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 80003c8:	f001 feca 	bl	8002160 <tx_low_power_enter>
    POP     {r0-r3}
 80003cc:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 80003ce:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 80003d0:	f001 fed0 	bl	8002174 <tx_low_power_exit>
    POP     {r0-r3}
 80003d4:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003d6:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003d8:	e7f1      	b.n	80003be <__tx_ts_wait>

080003da <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003da:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003de:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003e2:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003e6:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003e8:	e7d0      	b.n	800038c <__tx_ts_restore>
 80003ea:	bf00      	nop

080003ec <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003ec:	4770      	bx	lr
 80003ee:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003f0:	20197bdc 	.word	0x20197bdc
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003f4:	20197b44 	.word	0x20197b44
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003f8:	20197b48 	.word	0x20197b48
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003fc:	20198148 	.word	0x20198148

08000400 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000400:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000402:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000406:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 800040a:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 800040e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000410:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000414:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000416:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000418:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800041a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800041c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800041e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000420:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000422:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000424:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000426:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000428:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800042c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800042e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000432:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000434:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000436:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800043a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800043c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800043e:	4770      	bx	lr

08000440 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000440:	4922      	ldr	r1, [pc, #136]	; (80004cc <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000442:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000444:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000448:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800044a:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800044c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800044e:	b13a      	cbz	r2, 8000460 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000450:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000454:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000456:	b91a      	cbnz	r2, 8000460 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000458:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800045a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800045e:	6018      	str	r0, [r3, #0]

08000460 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000460:	491d      	ldr	r1, [pc, #116]	; (80004d8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000462:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000464:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000466:	b122      	cbz	r2, 8000472 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000468:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800046a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800046e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000470:	e008      	b.n	8000484 <__tx_timer_done>

08000472 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000472:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000476:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000478:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800047a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800047c:	d101      	bne.n	8000482 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800047e:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000480:	6818      	ldr	r0, [r3, #0]

08000482 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000482:	6008      	str	r0, [r1, #0]

08000484 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000486:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000488:	b912      	cbnz	r2, 8000490 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800048a:	4914      	ldr	r1, [pc, #80]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800048c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800048e:	b1c8      	cbz	r0, 80004c4 <__tx_timer_nothing_expired>

08000490 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000490:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000492:	4912      	ldr	r1, [pc, #72]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000494:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000496:	b108      	cbz	r0, 800049c <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000498:	f014 fa0a 	bl	80148b0 <_tx_timer_expiration_process>

0800049c <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800049c:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800049e:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004a0:	b172      	cbz	r2, 80004c0 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004a2:	f014 f977 	bl	8014794 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a6:	4810      	ldr	r0, [pc, #64]	; (80004e8 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004a8:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004aa:	b949      	cbnz	r1, 80004c0 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ac:	480f      	ldr	r0, [pc, #60]	; (80004ec <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004ae:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004b0:	4a0f      	ldr	r2, [pc, #60]	; (80004f0 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004b2:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004b4:	480f      	ldr	r0, [pc, #60]	; (80004f4 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004ba:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004bc:	d000      	beq.n	80004c0 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004be:	6002      	str	r2, [r0, #0]

080004c0 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 80004c0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004c4 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004c4:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004c8:	4770      	bx	lr
 80004ca:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004cc:	20197be8 	.word	0x20197be8
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004d0:	20198148 	.word	0x20198148
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004d4:	20197bec 	.word	0x20197bec
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004d8:	20197c78 	.word	0x20197c78
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004dc:	20197c7c 	.word	0x20197c7c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004e0:	20197c74 	.word	0x20197c74
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004e4:	20197c70 	.word	0x20197c70
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004e8:	20197bdc 	.word	0x20197bdc
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ec:	20197b44 	.word	0x20197b44
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004f0:	20197b48 	.word	0x20197b48
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004f4:	e000ed04 	.word	0xe000ed04

080004f8 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af02      	add	r7, sp, #8
 80004fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000504:	2334      	movs	r3, #52	; 0x34
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800050c:	4a13      	ldr	r2, [pc, #76]	; (800055c <tx_application_define+0x64>)
 800050e:	4914      	ldr	r1, [pc, #80]	; (8000560 <tx_application_define+0x68>)
 8000510:	4814      	ldr	r0, [pc, #80]	; (8000564 <tx_application_define+0x6c>)
 8000512:	f014 fc77 	bl	8014e04 <_txe_byte_pool_create>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d109      	bne.n	8000530 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <tx_application_define+0x6c>)
 800051e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000520:	68b8      	ldr	r0, [r7, #8]
 8000522:	f000 f827 	bl	8000574 <App_ThreadX_Init>
 8000526:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d000      	beq.n	8000530 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800052e:	e7fe      	b.n	800052e <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&touchgfx_app_byte_pool, "TouchGFX App memory pool", touchgfx_byte_pool_buffer, TOUCHGFX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000530:	2334      	movs	r3, #52	; 0x34
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <tx_application_define+0x70>)
 800053a:	490c      	ldr	r1, [pc, #48]	; (800056c <tx_application_define+0x74>)
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <tx_application_define+0x78>)
 800053e:	f014 fc61 	bl	8014e04 <_txe_byte_pool_create>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d104      	bne.n	8000552 <tx_application_define+0x5a>
  {
    /* USER CODE BEGIN TouchGFX_Byte_Pool_Success */

    /* USER CODE END TouchGFX_Byte_Pool_Success */

    memory_ptr = (VOID *)&touchgfx_app_byte_pool;
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <tx_application_define+0x78>)
 800054a:	60bb      	str	r3, [r7, #8]
    if (MX_TouchGFX_Init(memory_ptr) != TX_SUCCESS)
 800054c:	68b8      	ldr	r0, [r7, #8]
 800054e:	f001 fb43 	bl	8001bd8 <MX_TouchGFX_Init>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2015194c 	.word	0x2015194c
 8000560:	080293dc 	.word	0x080293dc
 8000564:	20151d4c 	.word	0x20151d4c
 8000568:	20151d80 	.word	0x20151d80
 800056c:	080293f0 	.word	0x080293f0
 8000570:	20152d80 	.word	0x20152d80

08000574 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000592:	f012 ff61 	bl	8013458 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}

0800059a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f006 feab 	bl	80072f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f821 	bl	80005e8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005a6:	f000 f87e 	bl	80006a6 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005aa:	f000 f8b1 	bl	8000710 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 fe79 	bl	80012a4 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005b2:	f000 fadf 	bl	8000b74 <MX_ICACHE_Init>
  MX_CRC_Init();
 80005b6:	f000 f8b9 	bl	800072c <MX_CRC_Init>
  MX_TIM8_Init();
 80005ba:	f000 fdc3 	bl	8001144 <MX_TIM8_Init>
  MX_DMA2D_Init();
 80005be:	f000 f913 	bl	80007e8 <MX_DMA2D_Init>
  MX_GPU2D_Init();
 80005c2:	f000 fa83 	bl	8000acc <MX_GPU2D_Init>
  MX_DSIHOST_DSI_Init();
 80005c6:	f000 f933 	bl	8000830 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 80005ca:	f000 fae7 	bl	8000b9c <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 80005ce:	f000 fd71 	bl	80010b4 <MX_OCTOSPI1_Init>
  MX_HSPI1_Init();
 80005d2:	f000 fa8f 	bl	8000af4 <MX_HSPI1_Init>
  MX_DCACHE1_Init();
 80005d6:	f000 f8cb 	bl	8000770 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80005da:	f000 f8e7 	bl	80007ac <MX_DCACHE2_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 80005de:	f001 faf2 	bl	8001bc6 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80005e2:	f7ff ffd4 	bl	800058e <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <main+0x4c>

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09e      	sub	sp, #120	; 0x78
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0318 	add.w	r3, r7, #24
 80005f2:	2260      	movs	r2, #96	; 0x60
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f027 fde3 	bl	80281c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
 800060a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000610:	f00b f934 	bl	800b87c <HAL_PWREx_ControlVoltageScaling>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800061a:	f000 ff51 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
 800061e:	2311      	movs	r3, #17
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000630:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000634:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800063a:	2301      	movs	r3, #1
 800063c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000646:	2350      	movs	r3, #80	; 0x50
 8000648:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800064a:	2302      	movs	r3, #2
 800064c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000652:	2302      	movs	r3, #2
 8000654:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000656:	2300      	movs	r3, #0
 8000658:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	4618      	mov	r0, r3
 8000664:	f00b fa06 	bl	800ba74 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800066e:	f000 ff27 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	231f      	movs	r3, #31
 8000674:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2303      	movs	r3, #3
 8000678:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	2104      	movs	r1, #4
 800068e:	4618      	mov	r0, r3
 8000690:	f00c f8cc 	bl	800c82c <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800069a:	f000 ff11 	bl	80014c0 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3778      	adds	r7, #120	; 0x78
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b0b8      	sub	sp, #224	; 0xe0
 80006aa:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	22e0      	movs	r2, #224	; 0xe0
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f027 fd85 	bl	80281c2 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_DSI;
 80006b8:	f04f 0200 	mov.w	r2, #0
 80006bc:	f04f 0306 	mov.w	r3, #6
 80006c0:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_PLL3;
 80006c4:	2300      	movs	r3, #0
 80006c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 80006d0:	2303      	movs	r3, #3
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLL3.PLL3M = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLL3.PLL3N = 125;
 80006d8:	237d      	movs	r3, #125	; 0x7d
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLL3.PLL3P = 8;
 80006dc:	2308      	movs	r3, #8
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.PLL3.PLL3Q = 2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.PLL3.PLL3R = 24;
 80006e4:	2318      	movs	r3, #24
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLL3.PLL3FRACN = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVP|RCC_PLL3_DIVR;
 80006f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4618      	mov	r0, r3
 80006fa:	f00c fca5 	bl	800d048 <HAL_RCCEx_PeriphCLKConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <PeriphCommonClock_Config+0x62>
  {
    Error_Handler();
 8000704:	f000 fedc 	bl	80014c0 <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	37e0      	adds	r7, #224	; 0xe0
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000714:	f00b f99e 	bl	800ba54 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000718:	2002      	movs	r0, #2
 800071a:	f00b f93b 	bl	800b994 <HAL_PWREx_ConfigSupply>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000724:	f000 fecc 	bl	80014c0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_CRC_Init+0x3c>)
 8000732:	4a0e      	ldr	r2, [pc, #56]	; (800076c <MX_CRC_Init+0x40>)
 8000734:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_CRC_Init+0x3c>)
 8000738:	2200      	movs	r2, #0
 800073a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_CRC_Init+0x3c>)
 800073e:	2200      	movs	r2, #0
 8000740:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_CRC_Init+0x3c>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_CRC_Init+0x3c>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_CRC_Init+0x3c>)
 8000750:	2201      	movs	r2, #1
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_CRC_Init+0x3c>)
 8000756:	f006 ff21 	bl	800759c <HAL_CRC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000760:	f000 feae 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20152db4 	.word	0x20152db4
 800076c:	40023000 	.word	0x40023000

08000770 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_DCACHE1_Init+0x34>)
 8000776:	4a0c      	ldr	r2, [pc, #48]	; (80007a8 <MX_DCACHE1_Init+0x38>)
 8000778:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_INCR;
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_DCACHE1_Init+0x34>)
 800077c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000780:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <MX_DCACHE1_Init+0x34>)
 8000784:	f006 fffc 	bl	8007780 <HAL_DCACHE_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_DCACHE1_Init+0x22>
  {
    Error_Handler();
 800078e:	f000 fe97 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */
  HAL_DCACHE_Enable(&hdcache1);
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_DCACHE1_Init+0x34>)
 8000794:	f007 f846 	bl	8007824 <HAL_DCACHE_Enable>
  HAL_DCACHE_Invalidate(&hdcache1);
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <MX_DCACHE1_Init+0x34>)
 800079a:	f007 f86a 	bl	8007872 <HAL_DCACHE_Invalidate>
  /* USER CODE END DCACHE1_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20152dd8 	.word	0x20152dd8
 80007a8:	40031400 	.word	0x40031400

080007ac <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_DCACHE2_Init+0x34>)
 80007b2:	4a0c      	ldr	r2, [pc, #48]	; (80007e4 <MX_DCACHE2_Init+0x38>)
 80007b4:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_INCR;
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_DCACHE2_Init+0x34>)
 80007b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80007bc:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 80007be:	4808      	ldr	r0, [pc, #32]	; (80007e0 <MX_DCACHE2_Init+0x34>)
 80007c0:	f006 ffde 	bl	8007780 <HAL_DCACHE_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_DCACHE2_Init+0x22>
  {
    Error_Handler();
 80007ca:	f000 fe79 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */
  HAL_DCACHE_Enable(&hdcache2);
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_DCACHE2_Init+0x34>)
 80007d0:	f007 f828 	bl	8007824 <HAL_DCACHE_Enable>
  HAL_DCACHE_Invalidate(&hdcache2);
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <MX_DCACHE2_Init+0x34>)
 80007d6:	f007 f84c 	bl	8007872 <HAL_DCACHE_Invalidate>
  /* USER CODE END DCACHE2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20152e04 	.word	0x20152e04
 80007e4:	40031800 	.word	0x40031800

080007e8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_DMA2D_Init+0x40>)
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <MX_DMA2D_Init+0x44>)
 80007f0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_DMA2D_Init+0x40>)
 80007f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007f8:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_DMA2D_Init+0x40>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_DMA2D_Init+0x40>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_DMA2D_Init+0x40>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_DMA2D_Init+0x40>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_DMA2D_Init+0x40>)
 8000814:	f007 fce6 	bl	80081e4 <HAL_DMA2D_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_DMA2D_Init+0x3a>
  {
    Error_Handler();
 800081e:	f000 fe4f 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20152e30 	.word	0x20152e30
 800082c:	4002b000 	.word	0x4002b000

08000830 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b0e8      	sub	sp, #416	; 0x1a0
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	2120      	movs	r1, #32
 800083a:	48a1      	ldr	r0, [pc, #644]	; (8000ac0 <MX_DSIHOST_DSI_Init+0x290>)
 800083c:	f009 fafc 	bl	8009e38 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000840:	2005      	movs	r0, #5
 8000842:	f006 fda7 	bl	8007394 <HAL_Delay>
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	489d      	ldr	r0, [pc, #628]	; (8000ac0 <MX_DSIHOST_DSI_Init+0x290>)
 800084c:	f009 faf4 	bl	8009e38 <HAL_GPIO_WritePin>
  HAL_Delay(11);
 8000850:	200b      	movs	r0, #11
 8000852:	f006 fd9f 	bl	8007394 <HAL_Delay>
  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000856:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
 8000866:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000868:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800086c:	2224      	movs	r2, #36	; 0x24
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f027 fca6 	bl	80281c2 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000876:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
 8000886:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000888:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800088c:	226c      	movs	r2, #108	; 0x6c
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f027 fc96 	bl	80281c2 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000896:	4b8b      	ldr	r3, [pc, #556]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000898:	4a8b      	ldr	r2, [pc, #556]	; (8000ac8 <MX_DSIHOST_DSI_Init+0x298>)
 800089a:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800089c:	4b89      	ldr	r3, [pc, #548]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80008a2:	4b88      	ldr	r3, [pc, #544]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 80008a4:	2204      	movs	r2, #4
 80008a6:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80008a8:	4b86      	ldr	r3, [pc, #536]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 80008ae:	4b85      	ldr	r3, [pc, #532]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 80008b0:	2208      	movs	r2, #8
 80008b2:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 80008b4:	4b83      	ldr	r3, [pc, #524]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 80008ba:	237d      	movs	r3, #125	; 0x7d
 80008bc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 80008cc:	2301      	movs	r3, #1
 80008ce:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80008de:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80008e2:	4619      	mov	r1, r3
 80008e4:	4877      	ldr	r0, [pc, #476]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 80008e6:	f007 ff3f 	bl	8008768 <HAL_DSI_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_DSIHOST_DSI_Init+0xc4>
  {
    Error_Handler();
 80008f0:	f000 fde6 	bl	80014c0 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80008f4:	2301      	movs	r3, #1
 80008f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  HostTimeouts.LowPowerReadTimeout = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  HostTimeouts.LowPowerWriteTimeout = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  HostTimeouts.BTATimeout = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800092a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800092e:	4619      	mov	r1, r3
 8000930:	4864      	ldr	r0, [pc, #400]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000932:	f008 fbaa 	bl	800908a <HAL_DSI_ConfigHostTimeouts>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 800093c:	f000 fdc0 	bl	80014c0 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 11;
 8000940:	230b      	movs	r3, #11
 8000942:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  PhyTimings.ClockLaneLP2HSTime = 40;
 8000946:	2328      	movs	r3, #40	; 0x28
 8000948:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  PhyTimings.DataLaneHS2LPTime = 12;
 800094c:	230c      	movs	r3, #12
 800094e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  PhyTimings.DataLaneLP2HSTime = 23;
 8000952:	2317      	movs	r3, #23
 8000954:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  PhyTimings.DataLaneMaxReadTime = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  PhyTimings.StopWaitTime = 7;
 800095e:	2307      	movs	r3, #7
 8000960:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000964:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000968:	4619      	mov	r1, r3
 800096a:	4856      	ldr	r0, [pc, #344]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 800096c:	f008 faf7 	bl	8008f5e <HAL_DSI_ConfigPhyTimer>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_DSIHOST_DSI_Init+0x14a>
  {
    Error_Handler();
 8000976:	f000 fda3 	bl	80014c0 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800097a:	2104      	movs	r1, #4
 800097c:	4851      	ldr	r0, [pc, #324]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 800097e:	f008 fac6 	bl	8008f0e <HAL_DSI_ConfigFlowControl>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_DSIHOST_DSI_Init+0x15c>
  {
    Error_Handler();
 8000988:	f000 fd9a 	bl	80014c0 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800098c:	2100      	movs	r1, #0
 800098e:	484d      	ldr	r0, [pc, #308]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000990:	f007 ffbe 	bl	8008910 <HAL_DSI_ConfigErrorMonitor>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_DSIHOST_DSI_Init+0x16e>
  {
    Error_Handler();
 800099a:	f000 fd91 	bl	80014c0 <Error_Handler>
  }
  VidCfg.ColorCoding = DSI_RGB888;
 800099e:	2305      	movs	r3, #5
 80009a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  VidCfg.Mode = DSI_VID_MODE_BURST;
 80009aa:	2302      	movs	r3, #2
 80009ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  VidCfg.PacketSize = 480;
 80009b0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80009b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  VidCfg.NumberOfChunks = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  VidCfg.NullPacketSize = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80009ca:	2300      	movs	r3, #0
 80009cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80009d0:	2300      	movs	r3, #0
 80009d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  VidCfg.HorizontalSyncActive = 6;
 80009d6:	2306      	movs	r3, #6
 80009d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  VidCfg.HorizontalBackPorch = 3;
 80009dc:	2303      	movs	r3, #3
 80009de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  VidCfg.HorizontalLine = 1452;
 80009e2:	f240 53ac 	movw	r3, #1452	; 0x5ac
 80009e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  VidCfg.VerticalSyncActive = 20;
 80009ea:	2314      	movs	r3, #20
 80009ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  VidCfg.VerticalBackPorch = 12;
 80009f0:	230c      	movs	r3, #12
 80009f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  VidCfg.VerticalFrontPorch = 200;
 80009f6:	23c8      	movs	r3, #200	; 0xc8
 80009f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  VidCfg.VerticalActive = 481;
 80009fc:	f240 13e1 	movw	r3, #481	; 0x1e1
 8000a00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  VidCfg.LPLargestPacketSize = 64;
 8000a0c:	2340      	movs	r3, #64	; 0x40
 8000a0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  VidCfg.LPVACTLargestPacketSize = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000a28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a2c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a34:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a44:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_ENABLE;
 8000a48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a4c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000a50:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000a54:	4619      	mov	r1, r3
 8000a56:	481b      	ldr	r0, [pc, #108]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000a58:	f008 f851 	bl	8008afe <HAL_DSI_ConfigVideoMode>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_DSIHOST_DSI_Init+0x236>
  {
    Error_Handler();
 8000a62:	f000 fd2d 	bl	80014c0 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000a66:	2100      	movs	r1, #0
 8000a68:	4816      	ldr	r0, [pc, #88]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000a6a:	f008 f81d 	bl	8008aa8 <HAL_DSI_SetGenericVCID>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_DSIHOST_DSI_Init+0x248>
  {
    Error_Handler();
 8000a74:	f000 fd24 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  // Start DSI
  if (HAL_DSI_Start(&hdsi) != HAL_OK)
 8000a78:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000a7a:	f008 fbcc 	bl	8009216 <HAL_DSI_Start>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_DSIHOST_DSI_Init+0x258>
  {
    Error_Handler();
 8000a84:	f000 fd1c 	bl	80014c0 <Error_Handler>
  }

  /* Switch to DSI PHY PLL clock */
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000a88:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000a8c:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8000a90:	f04f 0200 	mov.w	r2, #0
 8000a94:	f04f 0304 	mov.w	r3, #4
 8000a98:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.DsiClockSelection    = RCC_DSICLKSOURCE_DSIPHY;
 8000a9c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000aa0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000aa4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000aa8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000aac:	463b      	mov	r3, r7
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f00c faca 	bl	800d048 <HAL_RCCEx_PeriphCLKConfig>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	42022000 	.word	0x42022000
 8000ac4:	20152e90 	.word	0x20152e90
 8000ac8:	40016c00 	.word	0x40016c00

08000acc <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_GPU2D_Init+0x20>)
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <MX_GPU2D_Init+0x24>)
 8000ad4:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_GPU2D_Init+0x20>)
 8000ad8:	f009 fa6b 	bl	8009fb2 <HAL_GPU2D_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 8000ae2:	f000 fced 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20152eb4 	.word	0x20152eb4
 8000af0:	4002f000 	.word	0x4002f000

08000af4 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN HSPI1_Init 2 */
#endif
  BSP_HSPI_RAM_Cfg_t sHSPI_Init;

  sHSPI_Init.LatencyType      = BSP_HSPI_RAM_FIXED_LATENCY;
 8000afa:	2320      	movs	r3, #32
 8000afc:	703b      	strb	r3, [r7, #0]
  sHSPI_Init.BurstType        = BSP_HSPI_RAM_LINEAR_BURST;
 8000afe:	2300      	movs	r3, #0
 8000b00:	70fb      	strb	r3, [r7, #3]
  sHSPI_Init.BurstLength      = BSP_HSPI_RAM_BURST_16_BYTES;
 8000b02:	2300      	movs	r3, #0
 8000b04:	713b      	strb	r3, [r7, #4]
  sHSPI_Init.ReadLatencyCode  = BSP_HSPI_RAM_READ_LATENCY_6;
 8000b06:	230c      	movs	r3, #12
 8000b08:	707b      	strb	r3, [r7, #1]
  sHSPI_Init.WriteLatencyCode = BSP_HSPI_RAM_WRITE_LATENCY_6;
 8000b0a:	23c0      	movs	r3, #192	; 0xc0
 8000b0c:	70bb      	strb	r3, [r7, #2]
  sHSPI_Init.IOMode           = BSP_HSPI_RAM_IO_X16_MODE;
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	717b      	strb	r3, [r7, #5]

  if (BSP_HSPI_RAM_Init(0, &sHSPI_Init) != BSP_ERROR_NONE)
 8000b12:	463b      	mov	r3, r7
 8000b14:	4619      	mov	r1, r3
 8000b16:	2000      	movs	r0, #0
 8000b18:	f004 fb7e 	bl	8005218 <BSP_HSPI_RAM_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d00a      	beq.n	8000b38 <MX_HSPI1_Init+0x44>
  {
    printf("\r\nHSPI RAM Initialization : Failed");
 8000b22:	4810      	ldr	r0, [pc, #64]	; (8000b64 <MX_HSPI1_Init+0x70>)
 8000b24:	f027 ff26 	bl	8028974 <iprintf>
    printf("\r\nHSPI RAM Test Aborted");
 8000b28:	480f      	ldr	r0, [pc, #60]	; (8000b68 <MX_HSPI1_Init+0x74>)
 8000b2a:	f027 ff23 	bl	8028974 <iprintf>
    printf("\r\n");
 8000b2e:	480f      	ldr	r0, [pc, #60]	; (8000b6c <MX_HSPI1_Init+0x78>)
 8000b30:	f027 ffa6 	bl	8028a80 <puts>
    Error_Handler();
 8000b34:	f000 fcc4 	bl	80014c0 <Error_Handler>
  }

  if(BSP_HSPI_RAM_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f004 fc71 	bl	8005420 <BSP_HSPI_RAM_EnableMemoryMappedMode>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d00a      	beq.n	8000b5a <MX_HSPI1_Init+0x66>
  {
    printf("\r\nHSPI RAM Mem-Mapped Cfg : Failed");
 8000b44:	480a      	ldr	r0, [pc, #40]	; (8000b70 <MX_HSPI1_Init+0x7c>)
 8000b46:	f027 ff15 	bl	8028974 <iprintf>
    printf("\r\nHSPI RAM Test Aborted");
 8000b4a:	4807      	ldr	r0, [pc, #28]	; (8000b68 <MX_HSPI1_Init+0x74>)
 8000b4c:	f027 ff12 	bl	8028974 <iprintf>
    printf("\r\n");
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <MX_HSPI1_Init+0x78>)
 8000b52:	f027 ff95 	bl	8028a80 <puts>
    Error_Handler();
 8000b56:	f000 fcb3 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE END HSPI1_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	0802940c 	.word	0x0802940c
 8000b68:	08029430 	.word	0x08029430
 8000b6c:	08029448 	.word	0x08029448
 8000b70:	0802944c 	.word	0x0802944c

08000b74 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f00a fa83 	bl	800b084 <HAL_ICACHE_ConfigAssociativityMode>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000b84:	f000 fc9c 	bl	80014c0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000b88:	f00a fa9c 	bl	800b0c4 <HAL_ICACHE_Enable>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000b92:	f000 fc95 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b9c:	b5b0      	push	{r4, r5, r7, lr}
 8000b9e:	b0e4      	sub	sp, #400	; 0x190
 8000ba0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ba2:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000ba6:	2234      	movs	r2, #52	; 0x34
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f027 fb09 	bl	80281c2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000bb0:	4bc1      	ldr	r3, [pc, #772]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bb2:	4ac2      	ldr	r2, [pc, #776]	; (8000ebc <MX_LTDC_Init+0x320>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000bb6:	4bc0      	ldr	r3, [pc, #768]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bb8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000bbc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000bbe:	4bbe      	ldr	r3, [pc, #760]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bc6:	4bbc      	ldr	r3, [pc, #752]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bcc:	4bba      	ldr	r3, [pc, #744]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8000bd2:	4bb9      	ldr	r3, [pc, #740]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 19;
 8000bd8:	4bb7      	ldr	r3, [pc, #732]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bda:	2213      	movs	r2, #19
 8000bdc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 2;
 8000bde:	4bb6      	ldr	r3, [pc, #728]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000be0:	2202      	movs	r2, #2
 8000be2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 31;
 8000be4:	4bb4      	ldr	r3, [pc, #720]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000be6:	221f      	movs	r2, #31
 8000be8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 482;
 8000bea:	4bb3      	ldr	r3, [pc, #716]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bec:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 512;
 8000bf2:	4bb1      	ldr	r3, [pc, #708]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 483;
 8000bfa:	4baf      	ldr	r3, [pc, #700]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bfc:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000c00:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 712;
 8000c02:	4bad      	ldr	r3, [pc, #692]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000c04:	f44f 7232 	mov.w	r2, #712	; 0x2c8
 8000c08:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c0a:	4bab      	ldr	r3, [pc, #684]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c12:	4ba9      	ldr	r3, [pc, #676]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c1a:	4ba7      	ldr	r3, [pc, #668]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c22:	48a5      	ldr	r0, [pc, #660]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000c24:	f00a fa5e 	bl	800b0e4 <HAL_LTDC_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_LTDC_Init+0x96>
  {
    Error_Handler();
 8000c2e:	f000 fc47 	bl	80014c0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  pLayerCfg.WindowX1 = 480;
 8000c38:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c3c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  pLayerCfg.WindowY0 = 1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  pLayerCfg.WindowY1 = 481;
 8000c46:	f240 13e1 	movw	r3, #481	; 0x1e1
 8000c4a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  pLayerCfg.Alpha = 255;
 8000c54:	23ff      	movs	r3, #255	; 0xff
 8000c56:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  pLayerCfg.Alpha0 = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c60:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c64:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c68:	2307      	movs	r3, #7
 8000c6a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  pLayerCfg.FBStartAdress = 0x0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  pLayerCfg.ImageWidth = 480;
 8000c74:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c78:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  pLayerCfg.ImageHeight = 480;
 8000c7c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c80:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  pLayerCfg.Backcolor.Blue = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
  pLayerCfg.Backcolor.Green = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
  pLayerCfg.Backcolor.Red = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c96:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4886      	ldr	r0, [pc, #536]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000ca0:	f00a fba8 	bl	800b3f4 <HAL_LTDC_ConfigLayer>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_LTDC_Init+0x112>
  {
    Error_Handler();
 8000caa:	f000 fc09 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  HAL_Delay(10);
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f006 fb70 	bl	8007394 <HAL_Delay>
  HAL_DSI_EnterULPM(&hdsi);
 8000cb4:	4882      	ldr	r0, [pc, #520]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000cb6:	f008 fba3 	bl	8009400 <HAL_DSI_EnterULPM>
  HAL_Delay(10);
 8000cba:	200a      	movs	r0, #10
 8000cbc:	f006 fb6a 	bl	8007394 <HAL_Delay>

  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2120      	movs	r1, #32
 8000cc4:	487f      	ldr	r0, [pc, #508]	; (8000ec4 <MX_LTDC_Init+0x328>)
 8000cc6:	f009 f8b7 	bl	8009e38 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000cca:	200a      	movs	r0, #10
 8000ccc:	f006 fb62 	bl	8007394 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2120      	movs	r1, #32
 8000cd4:	487b      	ldr	r0, [pc, #492]	; (8000ec4 <MX_LTDC_Init+0x328>)
 8000cd6:	f009 f8af 	bl	8009e38 <HAL_GPIO_WritePin>
  HAL_Delay(150);
 8000cda:	2096      	movs	r0, #150	; 0x96
 8000cdc:	f006 fb5a 	bl	8007394 <HAL_Delay>

  HAL_DSI_ExitULPM(&hdsi);
 8000ce0:	4877      	ldr	r0, [pc, #476]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000ce2:	f008 fca5 	bl	8009630 <HAL_DSI_ExitULPM>
  HAL_Delay(10);
 8000ce6:	200a      	movs	r0, #10
 8000ce8:	f006 fb54 	bl	8007394 <HAL_Delay>

  // CMD Mode
  uint8_t InitParam1[3] = {0xFF ,0x83 , 0x79};
 8000cec:	4a76      	ldr	r2, [pc, #472]	; (8000ec8 <MX_LTDC_Init+0x32c>)
 8000cee:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000cf2:	6812      	ldr	r2, [r2, #0]
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	8019      	strh	r1, [r3, #0]
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	0c12      	lsrs	r2, r2, #16
 8000cfc:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB9, InitParam1) != HAL_OK)
 8000cfe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	23b9      	movs	r3, #185	; 0xb9
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2303      	movs	r3, #3
 8000d0a:	2239      	movs	r2, #57	; 0x39
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	486c      	ldr	r0, [pc, #432]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000d10:	f008 fadf 	bl	80092d2 <HAL_DSI_LongWrite>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_LTDC_Init+0x182>
  {
    Error_Handler();
 8000d1a:	f000 fbd1 	bl	80014c0 <Error_Handler>
  }

  // SETPOWER
  uint8_t InitParam3[16] = {0x44,0x1C,0x1C,0x37,0x57,0x90,0xD0,0xE2,0x58,0x80,0x38,0x38,0xF8,0x33,0x34,0x42};
 8000d1e:	4b6b      	ldr	r3, [pc, #428]	; (8000ecc <MX_LTDC_Init+0x330>)
 8000d20:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8000d24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 16, 0xB1, InitParam3) != HAL_OK)
 8000d2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	23b1      	movs	r3, #177	; 0xb1
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2310      	movs	r3, #16
 8000d36:	2239      	movs	r2, #57	; 0x39
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4861      	ldr	r0, [pc, #388]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000d3c:	f008 fac9 	bl	80092d2 <HAL_DSI_LongWrite>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_LTDC_Init+0x1ae>
  {
    Error_Handler();
 8000d46:	f000 fbbb 	bl	80014c0 <Error_Handler>
  }

  // SETDISP
  uint8_t InitParam4[9] = {0x80,0x14,0x0C,0x30,0x20,0x50,0x11,0x42,0x1D};
 8000d4a:	4a61      	ldr	r2, [pc, #388]	; (8000ed0 <MX_LTDC_Init+0x334>)
 8000d4c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000d50:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d52:	c303      	stmia	r3!, {r0, r1}
 8000d54:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xB2, InitParam4) != HAL_OK)
 8000d56:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	23b2      	movs	r3, #178	; 0xb2
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2309      	movs	r3, #9
 8000d62:	2239      	movs	r2, #57	; 0x39
 8000d64:	2100      	movs	r1, #0
 8000d66:	4856      	ldr	r0, [pc, #344]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000d68:	f008 fab3 	bl	80092d2 <HAL_DSI_LongWrite>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_LTDC_Init+0x1da>
  {
    Error_Handler();
 8000d72:	f000 fba5 	bl	80014c0 <Error_Handler>
  }

  // Set display cycle timing
  uint8_t InitParam5[10] = {0x01,0xAA,0x01,0xAF,0x01,0xAF,0x10,0xEA,0x1C,0xEA};
 8000d76:	4a57      	ldr	r2, [pc, #348]	; (8000ed4 <MX_LTDC_Init+0x338>)
 8000d78:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000d7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d7e:	c303      	stmia	r3!, {r0, r1}
 8000d80:	801a      	strh	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xB4, InitParam5) != HAL_OK)
 8000d82:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000d86:	9301      	str	r3, [sp, #4]
 8000d88:	23b4      	movs	r3, #180	; 0xb4
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	230a      	movs	r3, #10
 8000d8e:	2239      	movs	r2, #57	; 0x39
 8000d90:	2100      	movs	r1, #0
 8000d92:	484b      	ldr	r0, [pc, #300]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000d94:	f008 fa9d 	bl	80092d2 <HAL_DSI_LongWrite>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_LTDC_Init+0x206>
  {
    Error_Handler();
 8000d9e:	f000 fb8f 	bl	80014c0 <Error_Handler>
  }

  // SETVCOM
  uint8_t InitParam60[4] = {00,00,00,0xC0};
 8000da2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000da6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xC7, InitParam60) != HAL_OK)
 8000daa:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	23c7      	movs	r3, #199	; 0xc7
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2304      	movs	r3, #4
 8000db6:	2239      	movs	r2, #57	; 0x39
 8000db8:	2100      	movs	r1, #0
 8000dba:	4841      	ldr	r0, [pc, #260]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000dbc:	f008 fa89 	bl	80092d2 <HAL_DSI_LongWrite>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_LTDC_Init+0x22e>
  {
    Error_Handler();
 8000dc6:	f000 fb7b 	bl	80014c0 <Error_Handler>
  }

  // Set Panel Related Registers
  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xCC, 0x02) != HAL_OK)
 8000dca:	2302      	movs	r3, #2
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	23cc      	movs	r3, #204	; 0xcc
 8000dd0:	2215      	movs	r2, #21
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	483a      	ldr	r0, [pc, #232]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000dd6:	f008 fa5a 	bl	800928e <HAL_DSI_ShortWrite>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_LTDC_Init+0x248>
  {
    Error_Handler();
 8000de0:	f000 fb6e 	bl	80014c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xD2, 0x77) != HAL_OK)
 8000de4:	2377      	movs	r3, #119	; 0x77
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	23d2      	movs	r3, #210	; 0xd2
 8000dea:	2215      	movs	r2, #21
 8000dec:	2100      	movs	r1, #0
 8000dee:	4834      	ldr	r0, [pc, #208]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000df0:	f008 fa4d 	bl	800928e <HAL_DSI_ShortWrite>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_LTDC_Init+0x262>
  {
    Error_Handler();
 8000dfa:	f000 fb61 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam50[37] = {
 8000dfe:	4b36      	ldr	r3, [pc, #216]	; (8000ed8 <MX_LTDC_Init+0x33c>)
 8000e00:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8000e04:	461d      	mov	r5, r3
 8000e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e12:	6020      	str	r0, [r4, #0]
 8000e14:	3404      	adds	r4, #4
 8000e16:	7021      	strb	r1, [r4, #0]
    0x00,0x07,0x00,0x00,0x00,0x08,0x08,0x32,0x10,0x01,0x00,0x01,0x03,0x72,0x03,0x72,0x00,0x08,0x00,
    0x08,0x33,0x33,0x05,0x05,0x37,0x05,0x05,0x37,0x0A,0x00,0x00,0x00,0x0A,0x00,0x01,0x00,0x0E
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 37, 0xD3, InitParam50) != HAL_OK)
 8000e18:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	23d3      	movs	r3, #211	; 0xd3
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2325      	movs	r3, #37	; 0x25
 8000e24:	2239      	movs	r2, #57	; 0x39
 8000e26:	2100      	movs	r1, #0
 8000e28:	4825      	ldr	r0, [pc, #148]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000e2a:	f008 fa52 	bl	80092d2 <HAL_DSI_LongWrite>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_LTDC_Init+0x29c>
  {
    Error_Handler();
 8000e34:	f000 fb44 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam51[34] = {
 8000e38:	4b28      	ldr	r3, [pc, #160]	; (8000edc <MX_LTDC_Init+0x340>)
 8000e3a:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8000e3e:	461d      	mov	r5, r3
 8000e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e48:	682b      	ldr	r3, [r5, #0]
 8000e4a:	8023      	strh	r3, [r4, #0]
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x19,0x19,0x18,0x18,0x18,0x18,0x19,0x19,0x01,0x00,
    0x03,0x02,0x05,0x04,0x07,0x06,0x23,0x22,0x21,0x20,0x18,0x18,0x18,0x18,0x00,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 34, 0xD5, InitParam51) != HAL_OK)
 8000e4c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	23d5      	movs	r3, #213	; 0xd5
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2322      	movs	r3, #34	; 0x22
 8000e58:	2239      	movs	r2, #57	; 0x39
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4818      	ldr	r0, [pc, #96]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000e5e:	f008 fa38 	bl	80092d2 <HAL_DSI_LongWrite>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_LTDC_Init+0x2d0>
  {
    Error_Handler();
 8000e68:	f000 fb2a 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam52[35] = {
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <MX_LTDC_Init+0x344>)
 8000e6e:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000e72:	461d      	mov	r5, r3
 8000e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7c:	682b      	ldr	r3, [r5, #0]
 8000e7e:	7023      	strb	r3, [r4, #0]
 8000e80:	f107 03d5 	add.w	r3, r7, #213	; 0xd5
 8000e84:	2200      	movs	r2, #0
 8000e86:	801a      	strh	r2, [r3, #0]
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x19,0x19,0x18,0x18,0x19,0x19,0x18,0x18,0x06,0x07,
    0x04,0x05,0x02,0x03,0x00,0x01,0x20,0x21,0x22,0x23,0x18,0x18,0x18,0x18
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 35, 0xD6, InitParam52) != HAL_OK)
 8000e88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	23d6      	movs	r3, #214	; 0xd6
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2323      	movs	r3, #35	; 0x23
 8000e94:	2239      	movs	r2, #57	; 0x39
 8000e96:	2100      	movs	r1, #0
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000e9a:	f008 fa1a 	bl	80092d2 <HAL_DSI_LongWrite>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_LTDC_Init+0x30c>
  {
    Error_Handler();
 8000ea4:	f000 fb0c 	bl	80014c0 <Error_Handler>
  }

  // SET GAMMA
  uint8_t InitParam8[42] = {
 8000ea8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000eac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <MX_LTDC_Init+0x348>)
 8000eb2:	461c      	mov	r4, r3
 8000eb4:	4615      	mov	r5, r2
 8000eb6:	e017      	b.n	8000ee8 <MX_LTDC_Init+0x34c>
 8000eb8:	20152ec0 	.word	0x20152ec0
 8000ebc:	40016800 	.word	0x40016800
 8000ec0:	20152e90 	.word	0x20152e90
 8000ec4:	42020c00 	.word	0x42020c00
 8000ec8:	08029470 	.word	0x08029470
 8000ecc:	08029474 	.word	0x08029474
 8000ed0:	08029484 	.word	0x08029484
 8000ed4:	08029490 	.word	0x08029490
 8000ed8:	0802949c 	.word	0x0802949c
 8000edc:	080294c4 	.word	0x080294c4
 8000ee0:	080294e8 	.word	0x080294e8
 8000ee4:	0802950c 	.word	0x0802950c
 8000ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef4:	c403      	stmia	r4!, {r0, r1}
 8000ef6:	8022      	strh	r2, [r4, #0]
    0x00,0x16,0x1B,0x30,0x36,0x3F,0x24,0x40,0x09,0x0D,0x0F,0x18,0x0E,0x11,0x12,0x11,0x14,0x07,
    0x12,0x13,0x18,0x00,0x17,0x1C,0x30,0x36,0x3F,0x24,0x40,0x09,0x0C,0x0F,0x18,0x0E,0x11,0x14,
    0x11,0x12,0x07,0x12,0x14,0x18
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xE0, InitParam8) != HAL_OK)
 8000ef8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	23e0      	movs	r3, #224	; 0xe0
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	232a      	movs	r3, #42	; 0x2a
 8000f04:	2239      	movs	r2, #57	; 0x39
 8000f06:	2100      	movs	r1, #0
 8000f08:	4865      	ldr	r0, [pc, #404]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000f0a:	f008 f9e2 	bl	80092d2 <HAL_DSI_LongWrite>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_LTDC_Init+0x37c>
  {
    Error_Handler();
 8000f14:	f000 fad4 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam44[3] = {0x2C,0x2C,00};
 8000f18:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000f1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f20:	4a60      	ldr	r2, [pc, #384]	; (80010a4 <MX_LTDC_Init+0x508>)
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	4611      	mov	r1, r2
 8000f26:	8019      	strh	r1, [r3, #0]
 8000f28:	3302      	adds	r3, #2
 8000f2a:	0c12      	lsrs	r2, r2, #16
 8000f2c:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, InitParam44) != HAL_OK)
 8000f2e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	23b6      	movs	r3, #182	; 0xb6
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2303      	movs	r3, #3
 8000f3a:	2239      	movs	r2, #57	; 0x39
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4858      	ldr	r0, [pc, #352]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000f40:	f008 f9c7 	bl	80092d2 <HAL_DSI_LongWrite>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_LTDC_Init+0x3b2>
  {
    Error_Handler();
 8000f4a:	f000 fab9 	bl	80014c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x00) != HAL_OK)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	23bd      	movs	r3, #189	; 0xbd
 8000f54:	2215      	movs	r2, #21
 8000f56:	2100      	movs	r1, #0
 8000f58:	4851      	ldr	r0, [pc, #324]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000f5a:	f008 f998 	bl	800928e <HAL_DSI_ShortWrite>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_LTDC_Init+0x3cc>
  {
    Error_Handler();
 8000f64:	f000 faac 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam14[] = {
 8000f68:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000f6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f70:	4a4d      	ldr	r2, [pc, #308]	; (80010a8 <MX_LTDC_Init+0x50c>)
 8000f72:	461c      	mov	r4, r3
 8000f74:	4615      	mov	r5, r2
 8000f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f82:	c403      	stmia	r4!, {r0, r1}
 8000f84:	8022      	strh	r2, [r4, #0]
 8000f86:	3402      	adds	r4, #2
 8000f88:	0c13      	lsrs	r3, r2, #16
 8000f8a:	7023      	strb	r3, [r4, #0]
    0x01,0x00,0x07,0x0F,0x16,0x1F,0x27,0x30,0x38,0x40,0x47,0x4E,0x56,0x5D,0x65,0x6D,0x74,0x7D,
    0x84,0x8A,0x90,0x99,0xA1,0xA9,0xB0,0xB6,0xBD,0xC4,0xCD,0xD4,0xDD,0xE5,0xEC,0xF3,0x36,0x07,
    0x1C,0xC0,0x1B,0x01,0xF1,0x34,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam14) != HAL_OK)
 8000f8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	23c1      	movs	r3, #193	; 0xc1
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	232a      	movs	r3, #42	; 0x2a
 8000f98:	2239      	movs	r2, #57	; 0x39
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4840      	ldr	r0, [pc, #256]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000f9e:	f008 f998 	bl	80092d2 <HAL_DSI_LongWrite>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_LTDC_Init+0x410>
  {
    Error_Handler();
 8000fa8:	f000 fa8a 	bl	80014c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x01) != HAL_OK)
 8000fac:	2301      	movs	r3, #1
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	23bd      	movs	r3, #189	; 0xbd
 8000fb2:	2215      	movs	r2, #21
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	483a      	ldr	r0, [pc, #232]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000fb8:	f008 f969 	bl	800928e <HAL_DSI_ShortWrite>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_LTDC_Init+0x42a>
  {
    Error_Handler();
 8000fc2:	f000 fa7d 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam15[] = {
 8000fc6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000fca:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000fce:	4a37      	ldr	r2, [pc, #220]	; (80010ac <MX_LTDC_Init+0x510>)
 8000fd0:	461c      	mov	r4, r3
 8000fd2:	4615      	mov	r5, r2
 8000fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fe0:	c403      	stmia	r4!, {r0, r1}
 8000fe2:	8022      	strh	r2, [r4, #0]
    0x00,0x08,0x0F,0x16,0x1F,0x28,0x31,0x39,0x41,0x48,0x51,0x59,0x60,0x68,0x70,0x78,0x7F,0x87,
    0x8D,0x94,0x9C,0xA3,0xAB,0xB3,0xB9,0xC1,0xC8,0xD0,0xD8,0xE0,0xE8,0xEE,0xF5,0x3B,0x1A,0xB6,
    0xA0,0x07,0x45,0xC5,0x37,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam15) != HAL_OK)
 8000fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	23c1      	movs	r3, #193	; 0xc1
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	232a      	movs	r3, #42	; 0x2a
 8000ff0:	2239      	movs	r2, #57	; 0x39
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	482a      	ldr	r0, [pc, #168]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000ff6:	f008 f96c 	bl	80092d2 <HAL_DSI_LongWrite>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_LTDC_Init+0x468>
  {
    Error_Handler();
 8001000:	f000 fa5e 	bl	80014c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x02) != HAL_OK)
 8001004:	2302      	movs	r3, #2
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	23bd      	movs	r3, #189	; 0xbd
 800100a:	2215      	movs	r2, #21
 800100c:	2100      	movs	r1, #0
 800100e:	4824      	ldr	r0, [pc, #144]	; (80010a0 <MX_LTDC_Init+0x504>)
 8001010:	f008 f93d 	bl	800928e <HAL_DSI_ShortWrite>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_LTDC_Init+0x482>
  {
    Error_Handler();
 800101a:	f000 fa51 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam20[42] = {
 800101e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001022:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001026:	4a22      	ldr	r2, [pc, #136]	; (80010b0 <MX_LTDC_Init+0x514>)
 8001028:	461c      	mov	r4, r3
 800102a:	4615      	mov	r5, r2
 800102c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001034:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001038:	c403      	stmia	r4!, {r0, r1}
 800103a:	8022      	strh	r2, [r4, #0]
    0x00,0x09,0x0F,0x18,0x21,0x2A,0x34,0x3C,0x45,0x4C,0x56,0x5E,0x66,0x6E,0x76,0x7E,0x87,0x8E,
    0x95,0x9D,0xA6,0xAF,0xB7,0xBD,0xC5,0xCE,0xD5,0xDF,0xE7,0xEE,0xF4,0xFA,0xFF,0x0C,0x31,0x83,
    0x3C,0x5B,0x56,0x1E,0x5A,0xFF
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam20) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	23c1      	movs	r3, #193	; 0xc1
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	232a      	movs	r3, #42	; 0x2a
 8001046:	2239      	movs	r2, #57	; 0x39
 8001048:	2100      	movs	r1, #0
 800104a:	4815      	ldr	r0, [pc, #84]	; (80010a0 <MX_LTDC_Init+0x504>)
 800104c:	f008 f941 	bl	80092d2 <HAL_DSI_LongWrite>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_LTDC_Init+0x4be>
  {
    Error_Handler();
 8001056:	f000 fa33 	bl	80014c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x00) != HAL_OK)
 800105a:	2300      	movs	r3, #0
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	23bd      	movs	r3, #189	; 0xbd
 8001060:	2215      	movs	r2, #21
 8001062:	2100      	movs	r1, #0
 8001064:	480e      	ldr	r0, [pc, #56]	; (80010a0 <MX_LTDC_Init+0x504>)
 8001066:	f008 f912 	bl	800928e <HAL_DSI_ShortWrite>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_LTDC_Init+0x4d8>
  {
    Error_Handler();
 8001070:	f000 fa26 	bl	80014c0 <Error_Handler>
  }

  // Exit Sleep Mode
  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, DSI_EXIT_SLEEP_MODE, 0x00) != HAL_OK)
 8001074:	2300      	movs	r3, #0
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2311      	movs	r3, #17
 800107a:	2205      	movs	r2, #5
 800107c:	2100      	movs	r1, #0
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <MX_LTDC_Init+0x504>)
 8001080:	f008 f905 	bl	800928e <HAL_DSI_ShortWrite>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_LTDC_Init+0x4f2>
  {
    Error_Handler();
 800108a:	f000 fa19 	bl	80014c0 <Error_Handler>
  }

  HAL_Delay(120);
 800108e:	2078      	movs	r0, #120	; 0x78
 8001090:	f006 f980 	bl	8007394 <HAL_Delay>
  /* USER CODE END LTDC_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	20152e90 	.word	0x20152e90
 80010a4:	08029538 	.word	0x08029538
 80010a8:	0802953c 	.word	0x0802953c
 80010ac:	08029568 	.word	0x08029568
 80010b0:	08029594 	.word	0x08029594

080010b4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af00      	add	r7, sp, #0
  BSP_OSPI_NOR_Info_t sOSPI_NOR_Info;
  BSP_OSPI_NOR_Init_t sOSPI_NOR_Init;

  int32_t status;

  memset(&sOSPI_NOR_Info, 0, sizeof(sOSPI_NOR_Info));
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2224      	movs	r2, #36	; 0x24
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f027 f87d 	bl	80281c2 <memset>
  memset(&sOSPI_NOR_Init, 0, sizeof(sOSPI_NOR_Init));
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2202      	movs	r2, #2
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f027 f877 	bl	80281c2 <memset>

  sOSPI_NOR_Init.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	713b      	strb	r3, [r7, #4]
  sOSPI_NOR_Init.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 80010d8:	2301      	movs	r3, #1
 80010da:	717b      	strb	r3, [r7, #5]

  status = BSP_OSPI_NOR_Init(0, &sOSPI_NOR_Init);
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	2000      	movs	r0, #0
 80010e2:	f004 ffcf 	bl	8006084 <BSP_OSPI_NOR_Init>
 80010e6:	62f8      	str	r0, [r7, #44]	; 0x2c

  if (status != BSP_ERROR_NONE)
 80010e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d008      	beq.n	8001100 <MX_OCTOSPI1_Init+0x4c>
  {
    printf("\r\nOSPI NOR Initialization : Failed");
 80010ee:	4811      	ldr	r0, [pc, #68]	; (8001134 <MX_OCTOSPI1_Init+0x80>)
 80010f0:	f027 fc40 	bl	8028974 <iprintf>
    printf("\r\nOSPI NOR Test Aborted");
 80010f4:	4810      	ldr	r0, [pc, #64]	; (8001138 <MX_OCTOSPI1_Init+0x84>)
 80010f6:	f027 fc3d 	bl	8028974 <iprintf>
    printf("\r\n");
 80010fa:	4810      	ldr	r0, [pc, #64]	; (800113c <MX_OCTOSPI1_Init+0x88>)
 80010fc:	f027 fcc0 	bl	8028a80 <puts>
  }

  BSP_OSPI_NOR_GetInfo(0, &sOSPI_NOR_Info);
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4619      	mov	r1, r3
 8001106:	2000      	movs	r0, #0
 8001108:	f005 f8b2 	bl	8006270 <BSP_OSPI_NOR_GetInfo>

  if (BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 800110c:	2000      	movs	r0, #0
 800110e:	f005 f8c5 	bl	800629c <BSP_OSPI_NOR_EnableMemoryMappedMode>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d008      	beq.n	800112a <MX_OCTOSPI1_Init+0x76>
  {
    printf("\r\nOSPI NOR Mem-Mapped Cfg : Failed");
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <MX_OCTOSPI1_Init+0x8c>)
 800111a:	f027 fc2b 	bl	8028974 <iprintf>
    printf("\r\nOSPI NOR Test Aborted");
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <MX_OCTOSPI1_Init+0x84>)
 8001120:	f027 fc28 	bl	8028974 <iprintf>
    printf("\r\n");
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_OCTOSPI1_Init+0x88>)
 8001126:	f027 fcab 	bl	8028a80 <puts>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	3730      	adds	r7, #48	; 0x30
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	080295c0 	.word	0x080295c0
 8001138:	080295e4 	.word	0x080295e4
 800113c:	08029448 	.word	0x08029448
 8001140:	080295fc 	.word	0x080295fc

08001144 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b09c      	sub	sp, #112	; 0x70
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001164:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2234      	movs	r2, #52	; 0x34
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f027 f81f 	bl	80281c2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001184:	4b45      	ldr	r3, [pc, #276]	; (800129c <MX_TIM8_Init+0x158>)
 8001186:	4a46      	ldr	r2, [pc, #280]	; (80012a0 <MX_TIM8_Init+0x15c>)
 8001188:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 18;
 800118a:	4b44      	ldr	r3, [pc, #272]	; (800129c <MX_TIM8_Init+0x158>)
 800118c:	2212      	movs	r2, #18
 800118e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b42      	ldr	r3, [pc, #264]	; (800129c <MX_TIM8_Init+0x158>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 139;
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <MX_TIM8_Init+0x158>)
 8001198:	228b      	movs	r2, #139	; 0x8b
 800119a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b3f      	ldr	r3, [pc, #252]	; (800129c <MX_TIM8_Init+0x158>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011a2:	4b3e      	ldr	r3, [pc, #248]	; (800129c <MX_TIM8_Init+0x158>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a8:	4b3c      	ldr	r3, [pc, #240]	; (800129c <MX_TIM8_Init+0x158>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80011ae:	483b      	ldr	r0, [pc, #236]	; (800129c <MX_TIM8_Init+0x158>)
 80011b0:	f00e ff72 	bl	8010098 <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80011ba:	f000 f981 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011c8:	4619      	mov	r1, r3
 80011ca:	4834      	ldr	r0, [pc, #208]	; (800129c <MX_TIM8_Init+0x158>)
 80011cc:	f00f fca4 	bl	8010b18 <HAL_TIM_ConfigClockSource>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80011d6:	f000 f973 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011da:	4830      	ldr	r0, [pc, #192]	; (800129c <MX_TIM8_Init+0x158>)
 80011dc:	f00f f854 	bl	8010288 <HAL_TIM_PWM_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80011e6:	f000 f96b 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011fa:	4619      	mov	r1, r3
 80011fc:	4827      	ldr	r0, [pc, #156]	; (800129c <MX_TIM8_Init+0x158>)
 80011fe:	f010 fb47 	bl	8011890 <HAL_TIMEx_MasterConfigSynchronization>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001208:	f000 f95a 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120c:	2360      	movs	r3, #96	; 0x60
 800120e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 100;
 8001210:	2364      	movs	r3, #100	; 0x64
 8001212:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001214:	2300      	movs	r3, #0
 8001216:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001218:	2300      	movs	r3, #0
 800121a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001228:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800122c:	2204      	movs	r2, #4
 800122e:	4619      	mov	r1, r3
 8001230:	481a      	ldr	r0, [pc, #104]	; (800129c <MX_TIM8_Init+0x158>)
 8001232:	f00f fb5d 	bl	80108f0 <HAL_TIM_PWM_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 800123c:	f000 f940 	bl	80014c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001258:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001270:	2300      	movs	r3, #0
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4619      	mov	r1, r3
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM8_Init+0x158>)
 800127e:	f010 fbc9 	bl	8011a14 <HAL_TIMEx_ConfigBreakDeadTime>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001288:	f000 f91a 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <MX_TIM8_Init+0x158>)
 800128e:	f000 faa7 	bl	80017e0 <HAL_TIM_MspPostInit>

}
 8001292:	bf00      	nop
 8001294:	3770      	adds	r7, #112	; 0x70
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20152f68 	.word	0x20152f68
 80012a0:	40013400 	.word	0x40013400

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ba:	4b71      	ldr	r3, [pc, #452]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012c0:	4a6f      	ldr	r2, [pc, #444]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012c2:	f043 0310 	orr.w	r3, r3, #16
 80012c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012ca:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	4b69      	ldr	r3, [pc, #420]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012de:	4a68      	ldr	r2, [pc, #416]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012e0:	f043 0308 	orr.w	r3, r3, #8
 80012e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012e8:	4b65      	ldr	r3, [pc, #404]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	4b62      	ldr	r3, [pc, #392]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012fc:	4a60      	ldr	r2, [pc, #384]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001302:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001306:	4b5e      	ldr	r3, [pc, #376]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800130c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001314:	4b5a      	ldr	r3, [pc, #360]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800131a:	4a59      	ldr	r2, [pc, #356]	; (8001480 <MX_GPIO_Init+0x1dc>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001320:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001324:	4b56      	ldr	r3, [pc, #344]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800132a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001332:	4b53      	ldr	r3, [pc, #332]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001338:	4a51      	ldr	r2, [pc, #324]	; (8001480 <MX_GPIO_Init+0x1dc>)
 800133a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001342:	4b4f      	ldr	r3, [pc, #316]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001350:	4b4b      	ldr	r3, [pc, #300]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001356:	4a4a      	ldr	r2, [pc, #296]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001360:	4b47      	ldr	r3, [pc, #284]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136e:	4b44      	ldr	r3, [pc, #272]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001374:	4a42      	ldr	r2, [pc, #264]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001376:	f043 0320 	orr.w	r3, r3, #32
 800137a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800137e:	4b40      	ldr	r3, [pc, #256]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001384:	f003 0320 	and.w	r3, r3, #32
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2103      	movs	r1, #3
 8001390:	483c      	ldr	r0, [pc, #240]	; (8001484 <MX_GPIO_Init+0x1e0>)
 8001392:	f008 fd51 	bl	8009e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8001396:	2201      	movs	r2, #1
 8001398:	2120      	movs	r1, #32
 800139a:	483b      	ldr	r0, [pc, #236]	; (8001488 <MX_GPIO_Init+0x1e4>)
 800139c:	f008 fd4c 	bl	8009e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2120      	movs	r1, #32
 80013a4:	4839      	ldr	r0, [pc, #228]	; (800148c <MX_GPIO_Init+0x1e8>)
 80013a6:	f008 fd47 	bl	8009e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VSYNC_FREQ_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2103      	movs	r1, #3
 80013ae:	4836      	ldr	r0, [pc, #216]	; (8001488 <MX_GPIO_Init+0x1e4>)
 80013b0:	f008 fd42 	bl	8009e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MCU_ACTIVE_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80013ba:	4835      	ldr	r0, [pc, #212]	; (8001490 <MX_GPIO_Init+0x1ec>)
 80013bc:	f008 fd3c 	bl	8009e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80013c0:	2303      	movs	r3, #3
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	482b      	ldr	r0, [pc, #172]	; (8001484 <MX_GPIO_Init+0x1e0>)
 80013d8:	f008 fa60 	bl	800989c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin VSYNC_FREQ_Pin RENDER_TIME_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|VSYNC_FREQ_Pin|RENDER_TIME_Pin;
 80013dc:	2323      	movs	r3, #35	; 0x23
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e8:	2302      	movs	r3, #2
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	4825      	ldr	r0, [pc, #148]	; (8001488 <MX_GPIO_Init+0x1e4>)
 80013f4:	f008 fa52 	bl	800989c <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_PWR_ON_Pin */
  GPIO_InitStruct.Pin = DSI_PWR_ON_Pin;
 80013f8:	2320      	movs	r3, #32
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DSI_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	481f      	ldr	r0, [pc, #124]	; (800148c <MX_GPIO_Init+0x1e8>)
 8001410:	f008 fa44 	bl	800989c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	481a      	ldr	r0, [pc, #104]	; (8001494 <MX_GPIO_Init+0x1f0>)
 800142a:	f008 fa37 	bl	800989c <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = DSI_TOUCH_INT_Pin;
 800142e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <MX_GPIO_Init+0x1f4>)
 8001436:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001438:	2301      	movs	r3, #1
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DSI_TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	4810      	ldr	r0, [pc, #64]	; (8001484 <MX_GPIO_Init+0x1e0>)
 8001444:	f008 fa2a 	bl	800989c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_ACTIVE_Pin FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin|FRAME_RATE_Pin;
 8001448:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001456:	2302      	movs	r3, #2
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4619      	mov	r1, r3
 8001460:	480b      	ldr	r0, [pc, #44]	; (8001490 <MX_GPIO_Init+0x1ec>)
 8001462:	f008 fa1b 	bl	800989c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI8_IRQn, 10, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	210a      	movs	r1, #10
 800146a:	2013      	movs	r0, #19
 800146c:	f006 f86e 	bl	800754c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8001470:	2013      	movs	r0, #19
 8001472:	f006 f885 	bl	8007580 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001476:	bf00      	nop
 8001478:	3730      	adds	r7, #48	; 0x30
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	46020c00 	.word	0x46020c00
 8001484:	42021000 	.word	0x42021000
 8001488:	42020c00 	.word	0x42020c00
 800148c:	42022000 	.word	0x42022000
 8001490:	42021400 	.word	0x42021400
 8001494:	42020800 	.word	0x42020800
 8001498:	10210000 	.word	0x10210000

0800149c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014ae:	f005 ff51 	bl	8007354 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40001000 	.word	0x40001000

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <Error_Handler+0x8>
	...

080014cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_MspInit+0x30>)
 80014d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d8:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_MspInit+0x30>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_MspInit+0x30>)
 80014e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	46020c00 	.word	0x46020c00

08001500 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0b      	ldr	r2, [pc, #44]	; (800153c <HAL_CRC_MspInit+0x3c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d10e      	bne.n	8001530 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_CRC_MspInit+0x40>)
 8001514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_CRC_MspInit+0x40>)
 800151a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800151e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <HAL_CRC_MspInit+0x40>)
 8001524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40023000 	.word	0x40023000
 8001540:	46020c00 	.word	0x46020c00

08001544 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a16      	ldr	r2, [pc, #88]	; (80015ac <HAL_DCACHE_MspInit+0x68>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10f      	bne.n	8001576 <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 8001558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 800155e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001562:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 8001568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 8001574:	e013      	b.n	800159e <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <HAL_DCACHE_MspInit+0x70>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d10e      	bne.n	800159e <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 8001588:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 8001592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40031400 	.word	0x40031400
 80015b0:	46020c00 	.word	0x46020c00
 80015b4:	40031800 	.word	0x40031800

080015b8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_DMA2D_MspInit+0x48>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d116      	bne.n	80015f8 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_DMA2D_MspInit+0x4c>)
 80015cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d0:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <HAL_DMA2D_MspInit+0x4c>)
 80015d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_DMA2D_MspInit+0x4c>)
 80015dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2107      	movs	r1, #7
 80015ec:	2076      	movs	r0, #118	; 0x76
 80015ee:	f005 ffad 	bl	800754c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80015f2:	2076      	movs	r0, #118	; 0x76
 80015f4:	f005 ffc4 	bl	8007580 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	4002b000 	.word	0x4002b000
 8001604:	46020c00 	.word	0x46020c00

08001608 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <HAL_DSI_MspInit+0x3c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d10e      	bne.n	8001638 <HAL_DSI_MspInit+0x30>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_DSI_MspInit+0x40>)
 800161c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001620:	4a09      	ldr	r2, [pc, #36]	; (8001648 <HAL_DSI_MspInit+0x40>)
 8001622:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001626:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <HAL_DSI_MspInit+0x40>)
 800162c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40016c00 	.word	0x40016c00
 8001648:	46020c00 	.word	0x46020c00

0800164c <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a24      	ldr	r2, [pc, #144]	; (80016ec <HAL_GPU2D_MspInit+0xa0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d142      	bne.n	80016e4 <HAL_GPU2D_MspInit+0x98>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 800165e:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 8001660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001664:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 8001666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800166a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 8001670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 800167c:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001682:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 8001684:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 7, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2107      	movs	r1, #7
 800169e:	2084      	movs	r0, #132	; 0x84
 80016a0:	f005 ff54 	bl	800754c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 80016a4:	2084      	movs	r0, #132	; 0x84
 80016a6:	f005 ff6b 	bl	8007580 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 7, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2107      	movs	r1, #7
 80016ae:	2085      	movs	r0, #133	; 0x85
 80016b0:	f005 ff4c 	bl	800754c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 80016b4:	2085      	movs	r0, #133	; 0x85
 80016b6:	f005 ff63 	bl	8007580 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 80016bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80016c0:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 80016cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    SYSCFG->CFGR1 &= ~(1L << 28);
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_GPU2D_MspInit+0xa8>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <HAL_GPU2D_MspInit+0xa8>)
 80016de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e2:	6053      	str	r3, [r2, #4]
  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 80016e4:	bf00      	nop
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	4002f000 	.word	0x4002f000
 80016f0:	46020c00 	.word	0x46020c00
 80016f4:	46000400 	.word	0x46000400

080016f8 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0c0      	sub	sp, #256	; 0x100
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	22e0      	movs	r2, #224	; 0xe0
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f026 fd52 	bl	80281c2 <memset>
  /* USER CODE BEGIN HSPI1_MspInit 1 */
#endif
  /* USER CODE END HSPI1_MspInit 1 */
  }

}
 800171e:	bf00      	nop
 8001720:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_XSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspDeInit(XSPI_HandleTypeDef* hxspi)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HSPI1_MspDeInit 1 */
#endif
  /* USER CODE END HSPI1_MspDeInit 1 */
  }

}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a12      	ldr	r2, [pc, #72]	; (8001794 <HAL_LTDC_MspInit+0x58>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d11e      	bne.n	800178c <HAL_LTDC_MspInit+0x50>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_LTDC_MspInit+0x5c>)
 8001750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001754:	4a10      	ldr	r2, [pc, #64]	; (8001798 <HAL_LTDC_MspInit+0x5c>)
 8001756:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800175a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_LTDC_MspInit+0x5c>)
 8001760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001764:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2107      	movs	r1, #7
 8001770:	2087      	movs	r0, #135	; 0x87
 8001772:	f005 feeb 	bl	800754c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001776:	2087      	movs	r0, #135	; 0x87
 8001778:	f005 ff02 	bl	8007580 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 7, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2107      	movs	r1, #7
 8001780:	2088      	movs	r0, #136	; 0x88
 8001782:	f005 fee3 	bl	800754c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001786:	2088      	movs	r0, #136	; 0x88
 8001788:	f005 fefa 	bl	8007580 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40016800 	.word	0x40016800
 8001798:	46020c00 	.word	0x46020c00

0800179c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_TIM_Base_MspInit+0x3c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10e      	bne.n	80017cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_TIM_Base_MspInit+0x40>)
 80017b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017b4:	4a09      	ldr	r2, [pc, #36]	; (80017dc <HAL_TIM_Base_MspInit+0x40>)
 80017b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017ba:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <HAL_TIM_Base_MspInit+0x40>)
 80017c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40013400 	.word	0x40013400
 80017dc:	46020c00 	.word	0x46020c00

080017e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a12      	ldr	r2, [pc, #72]	; (8001848 <HAL_TIM_MspPostInit+0x68>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d11e      	bne.n	8001840 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_TIM_MspPostInit+0x6c>)
 8001804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001808:	4a10      	ldr	r2, [pc, #64]	; (800184c <HAL_TIM_MspPostInit+0x6c>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_TIM_MspPostInit+0x6c>)
 8001814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PI6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = DSI_BL_CTRL_Pin;
 8001820:	2340      	movs	r3, #64	; 0x40
 8001822:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182c:	2302      	movs	r3, #2
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001830:	2303      	movs	r3, #3
 8001832:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DSI_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	4619      	mov	r1, r3
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <HAL_TIM_MspPostInit+0x70>)
 800183c:	f008 f82e 	bl	800989c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001840:	bf00      	nop
 8001842:	3720      	adds	r7, #32
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40013400 	.word	0x40013400
 800184c:	46020c00 	.word	0x46020c00
 8001850:	42022000 	.word	0x42022000

08001854 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08e      	sub	sp, #56	; 0x38
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_InitTick+0xcc>)
 8001866:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_InitTick+0xcc>)
 800186c:	f043 0310 	orr.w	r3, r3, #16
 8001870:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001874:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <HAL_InitTick+0xcc>)
 8001876:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001882:	f107 0210 	add.w	r2, r7, #16
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f00b fb1d 	bl	800cecc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001892:	f00b fadf 	bl	800ce54 <HAL_RCC_GetPCLK1Freq>
 8001896:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189a:	4a22      	ldr	r2, [pc, #136]	; (8001924 <HAL_InitTick+0xd0>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	0c9b      	lsrs	r3, r3, #18
 80018a2:	3b01      	subs	r3, #1
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_InitTick+0xd4>)
 80018a8:	4a20      	ldr	r2, [pc, #128]	; (800192c <HAL_InitTick+0xd8>)
 80018aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018ac:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <HAL_InitTick+0xd4>)
 80018ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018b4:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_InitTick+0xd4>)
 80018b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <HAL_InitTick+0xd4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_InitTick+0xd4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80018c6:	4818      	ldr	r0, [pc, #96]	; (8001928 <HAL_InitTick+0xd4>)
 80018c8:	f00e fbe6 	bl	8010098 <HAL_TIM_Base_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80018d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d118      	bne.n	800190c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80018da:	4813      	ldr	r0, [pc, #76]	; (8001928 <HAL_InitTick+0xd4>)
 80018dc:	f00e fc34 	bl	8010148 <HAL_TIM_Base_Start_IT>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80018e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10e      	bne.n	800190c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b0f      	cmp	r3, #15
 80018f2:	d808      	bhi.n	8001906 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80018f4:	2200      	movs	r2, #0
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	2031      	movs	r0, #49	; 0x31
 80018fa:	f005 fe27 	bl	800754c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018fe:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <HAL_InitTick+0xdc>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	e002      	b.n	800190c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800190c:	2031      	movs	r0, #49	; 0x31
 800190e:	f005 fe37 	bl	8007580 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001912:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001916:	4618      	mov	r0, r3
 8001918:	3738      	adds	r7, #56	; 0x38
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	46020c00 	.word	0x46020c00
 8001924:	431bde83 	.word	0x431bde83
 8001928:	20152fb4 	.word	0x20152fb4
 800192c:	40001000 	.word	0x40001000
 8001930:	2000004c 	.word	0x2000004c

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <NMI_Handler+0x4>

0800193a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <HardFault_Handler+0x4>

08001940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <MemManage_Handler+0x4>

08001946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <UsageFault_Handler+0x4>

08001952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DSI_TOUCH_INT_Pin);
 8001964:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001968:	f008 faf2 	bl	8009f50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <TIM6_IRQHandler+0x10>)
 8001976:	f00e fe3b 	bl	80105f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20152fb4 	.word	0x20152fb4

08001984 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <DMA2D_IRQHandler+0x10>)
 800198a:	f006 fc8c 	bl	80082a6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20152e30 	.word	0x20152e30

08001998 <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <GPU2D_IRQHandler+0x10>)
 800199e:	f008 fb58 	bl	800a052 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20152eb4 	.word	0x20152eb4

080019ac <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <GPU2D_ER_IRQHandler+0x10>)
 80019b2:	f008 fb74 	bl	800a09e <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20152eb4 	.word	0x20152eb4

080019c0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <LTDC_IRQHandler+0x10>)
 80019c6:	f009 fc5d 	bl	800b284 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20152ec0 	.word	0x20152ec0

080019d4 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LCD-TFT Error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <LTDC_ER_IRQHandler+0x10>)
 80019da:	f009 fc53 	bl	800b284 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20152ec0 	.word	0x20152ec0

080019e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return 1;
 80019ec:	2301      	movs	r3, #1
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_kill>:

int _kill(int pid, int sig)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a02:	f026 fb85 	bl	8028110 <__errno>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2216      	movs	r2, #22
 8001a0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_exit>:

void _exit (int status)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ffe7 	bl	80019f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a2a:	e7fe      	b.n	8001a2a <_exit+0x12>

08001a2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e00a      	b.n	8001a54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a3e:	e000      	b.n	8001a42 <_read+0x16>
 8001a40:	bf00      	nop
 8001a42:	4601      	mov	r1, r0
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	60ba      	str	r2, [r7, #8]
 8001a4a:	b2ca      	uxtb	r2, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3301      	adds	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	dbf0      	blt.n	8001a3e <_read+0x12>
  }

  return len;
 8001a5c:	687b      	ldr	r3, [r7, #4]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	e009      	b.n	8001a8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	60ba      	str	r2, [r7, #8]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	e000      	b.n	8001a86 <_write+0x20>
 8001a84:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf1      	blt.n	8001a78 <_write+0x12>
  }
  return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_close>:

int _close(int file)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_isatty>:

int _isatty(int file)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <_sbrk+0x5c>)
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <_sbrk+0x60>)
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <_sbrk+0x64>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <_sbrk+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d207      	bcs.n	8001b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b38:	f026 faea 	bl	8028110 <__errno>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	220c      	movs	r2, #12
 8001b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	e009      	b.n	8001b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <_sbrk+0x64>)
 8001b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20270000 	.word	0x20270000
 8001b68:	00001000 	.word	0x00001000
 8001b6c:	20153000 	.word	0x20153000
 8001b70:	20198668 	.word	0x20198668

08001b74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bac <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b78:	f005 fb86 	bl	8007288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b7e:	e003      	b.n	8001b88 <LoopCopyDataInit>

08001b80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b86:	3104      	adds	r1, #4

08001b88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b88:	480a      	ldr	r0, [pc, #40]	; (8001bb4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b90:	d3f6      	bcc.n	8001b80 <CopyDataInit>
	ldr	r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b94:	e002      	b.n	8001b9c <LoopFillZerobss>

08001b96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b98:	f842 3b04 	str.w	r3, [r2], #4

08001b9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <LoopForever+0x16>)
	cmp	r2, r3
 8001b9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ba0:	d3f9      	bcc.n	8001b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f026 facd 	bl	8028140 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ba6:	f7fe fcf8 	bl	800059a <main>

08001baa <LoopForever>:

LoopForever:
    b LoopForever
 8001baa:	e7fe      	b.n	8001baa <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001bac:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8001bb0:	0802c3e4 	.word	0x0802c3e4
	ldr	r0, =_sdata
 8001bb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bb8:	2000012c 	.word	0x2000012c
	ldr	r2, =_sbss
 8001bbc:	20151930 	.word	0x20151930
	ldr	r3, = _ebss
 8001bc0:	20198664 	.word	0x20198664

08001bc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC1_2_IRQHandler>

08001bc6 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8001bca:	f000 fe65 	bl	8002898 <touchgfx_components_init>
  touchgfx_init();
 8001bce:	f000 fdeb 	bl	80027a8 <touchgfx_init>
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <MX_TouchGFX_Init>:

/**
 * Create TouchGFX Thread
 */
UINT MX_TouchGFX_Init(VOID *memory_ptr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	; 0x30
 8001bdc:	af08      	add	r7, sp, #32
 8001bde:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  CHAR *pointer = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]

  /* Allocate the stack for TouchGFX Thread.  */
  if (tx_byte_allocate((TX_BYTE_POOL*)memory_ptr, (VOID **) &pointer,
 8001be8:	f107 0108 	add.w	r1, r7, #8
 8001bec:	2300      	movs	r3, #0
 8001bee:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f013 f892 	bl	8014d1c <_txe_byte_allocate>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <MX_TouchGFX_Init+0x2c>
                       TOUCHGFX_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    ret = TX_POOL_ERROR;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	e019      	b.n	8001c38 <MX_TouchGFX_Init+0x60>
  }

  /* Create TouchGFX Thread */
  else if (tx_thread_create(&TouchGFXThread, (CHAR *)"TouchGFX", TouchGFX_Task, 0,
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	22b0      	movs	r2, #176	; 0xb0
 8001c08:	9206      	str	r2, [sp, #24]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	9205      	str	r2, [sp, #20]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	9204      	str	r2, [sp, #16]
 8001c12:	2205      	movs	r2, #5
 8001c14:	9203      	str	r2, [sp, #12]
 8001c16:	2205      	movs	r2, #5
 8001c18:	9202      	str	r2, [sp, #8]
 8001c1a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001c1e:	9201      	str	r2, [sp, #4]
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2300      	movs	r3, #0
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <MX_TouchGFX_Init+0x6c>)
 8001c26:	4908      	ldr	r1, [pc, #32]	; (8001c48 <MX_TouchGFX_Init+0x70>)
 8001c28:	4808      	ldr	r0, [pc, #32]	; (8001c4c <MX_TouchGFX_Init+0x74>)
 8001c2a:	f013 fbc5 	bl	80153b8 <_txe_thread_create>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TouchGFX_Init+0x60>
                       pointer, TOUCHGFX_STACK_SIZE,
                       5, 5,
                       TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
  {
    ret = TX_THREAD_ERROR;
 8001c34:	230e      	movs	r3, #14
 8001c36:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001c38:	68fb      	ldr	r3, [r7, #12]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	08001c51 	.word	0x08001c51
 8001c48:	08029620 	.word	0x08029620
 8001c4c:	20153004 	.word	0x20153004

08001c50 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(unsigned long thread_input)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001c58:	f000 fe28 	bl	80028ac <touchgfx_taskEntry>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_ZN8touchgfx7Buttons4initEv>:
    BUTTON_USER  = '5',
} JOYState_TypeDef;

void Buttons::init()
{
}
 8001c64:	4770      	bx	lr
	...

08001c68 <_ZN8touchgfx7Buttons6sampleEv>:

unsigned int Buttons::sample()
{
    unsigned int buttonValue = BUTTON_NONE;

    if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET)
 8001c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{
 8001c6c:	b508      	push	{r3, lr}
    if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET)
 8001c6e:	4804      	ldr	r0, [pc, #16]	; (8001c80 <_ZN8touchgfx7Buttons6sampleEv+0x18>)
 8001c70:	f008 f8ca 	bl	8009e08 <HAL_GPIO_ReadPin>
        buttonValue = BUTTON_USER;
    }

    if (buttonValue == BUTTON_NONE)
    {
        return 0;
 8001c74:	2801      	cmp	r0, #1
    }

    return static_cast<unsigned int>(buttonValue);
}
 8001c76:	bf0c      	ite	eq
 8001c78:	2035      	moveq	r0, #53	; 0x35
 8001c7a:	2000      	movne	r0, #0
 8001c7c:	bd08      	pop	{r3, pc}
 8001c7e:	bf00      	nop
 8001c80:	42020800 	.word	0x42020800

08001c84 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001c84:	6840      	ldr	r0, [r0, #4]
    }
 8001c86:	4770      	bx	lr

08001c88 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001c88:	6041      	str	r1, [r0, #4]
    }
 8001c8a:	4770      	bx	lr

08001c8c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001c8c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001c90:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8001c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c98:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001c9e:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001ca0:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
}
 8001cb2:	4770      	bx	lr
 8001cb4:	e0001000 	.word	0xe0001000
 8001cb8:	c5acce55 	.word	0xc5acce55

08001cbc <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001cbc:	1a51      	subs	r1, r2, r1
 8001cbe:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001cc2:	fbb1 f0f3 	udiv	r0, r1, r3
 8001cc6:	4770      	bx	lr

08001cc8 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001cc8:	4b01      	ldr	r3, [pc, #4]	; (8001cd0 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001cca:	6858      	ldr	r0, [r3, #4]
}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e0001000 	.word	0xe0001000

08001cd4 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001cd4:	4770      	bx	lr

08001cd6 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001cd6:	b510      	push	{r4, lr}
 8001cd8:	4604      	mov	r4, r0
 8001cda:	210c      	movs	r1, #12
 8001cdc:	f026 f9b9 	bl	8028052 <_ZdlPvj>
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	bd10      	pop	{r4, pc}

08001ce4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001ce4:	6803      	ldr	r3, [r0, #0]
{
 8001ce6:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001ce8:	691b      	ldr	r3, [r3, #16]
{
 8001cea:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001cec:	b131      	cbz	r1, 8001cfc <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001cee:	4798      	blx	r3
 8001cf0:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001cf2:	6863      	ldr	r3, [r4, #4]
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	4418      	add	r0, r3
 8001cf8:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001cfa:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001cfc:	4798      	blx	r3
 8001cfe:	60a0      	str	r0, [r4, #8]
}
 8001d00:	e7fb      	b.n	8001cfa <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

08001d02 <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 8001d02:	4770      	bx	lr

08001d04 <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 8001d04:	4770      	bx	lr

08001d06 <_ZN8touchgfx10KeySampler4initEv>:

using namespace touchgfx;

void KeySampler::init()
{
    previousState = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	7103      	strb	r3, [r0, #4]
    Buttons::init();
 8001d0a:	f7ff bfab 	b.w	8001c64 <_ZN8touchgfx7Buttons4initEv>
	...

08001d10 <_ZN8touchgfx10KeySampler6sampleERh>:
}

bool KeySampler::sample(uint8_t& key)
{
 8001d10:	b570      	push	{r4, r5, r6, lr}
 8001d12:	4604      	mov	r4, r0
 8001d14:	460d      	mov	r5, r1
    static uint32_t last_time = 0;

    if ((HAL_GetTick() - last_time) > 800)
 8001d16:	f005 fb31 	bl	800737c <HAL_GetTick>
 8001d1a:	4e0b      	ldr	r6, [pc, #44]	; (8001d48 <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
 8001d1c:	6833      	ldr	r3, [r6, #0]
 8001d1e:	1ac0      	subs	r0, r0, r3
 8001d20:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 8001d24:	d904      	bls.n	8001d30 <_ZN8touchgfx10KeySampler6sampleERh+0x20>
    {
        last_time = HAL_GetTick();
 8001d26:	f005 fb29 	bl	800737c <HAL_GetTick>
        previousState = 0;
 8001d2a:	2300      	movs	r3, #0
        last_time = HAL_GetTick();
 8001d2c:	6030      	str	r0, [r6, #0]
        previousState = 0;
 8001d2e:	7123      	strb	r3, [r4, #4]
    }

    key = static_cast<uint8_t>(Buttons::sample());
 8001d30:	f7ff ff9a 	bl	8001c68 <_ZN8touchgfx7Buttons6sampleEv>
 8001d34:	b2c0      	uxtb	r0, r0
 8001d36:	7028      	strb	r0, [r5, #0]

    //User key
    if (key && (key != previousState))
 8001d38:	b128      	cbz	r0, 8001d46 <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8001d3a:	7922      	ldrb	r2, [r4, #4]
 8001d3c:	4282      	cmp	r2, r0
    {
        previousState = key;
 8001d3e:	bf16      	itet	ne
 8001d40:	7120      	strbne	r0, [r4, #4]
        return true;
    }

    return false;
 8001d42:	2000      	moveq	r0, #0
        return true;
 8001d44:	2001      	movne	r0, #1
}
 8001d46:	bd70      	pop	{r4, r5, r6, pc}
 8001d48:	201530b4 	.word	0x201530b4

08001d4c <_ZN8touchgfx10KeySamplerD0Ev>:
 8001d4c:	b510      	push	{r4, lr}
 8001d4e:	4604      	mov	r4, r0
 8001d50:	2108      	movs	r1, #8
 8001d52:	f026 f97e 	bl	8028052 <_ZdlPvj>
 8001d56:	4620      	mov	r0, r4
 8001d58:	bd10      	pop	{r4, pc}

08001d5a <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001d5a:	4770      	bx	lr

08001d5c <_ZN20STM32TouchControllerD0Ev>:
 8001d5c:	b510      	push	{r4, lr}
 8001d5e:	4604      	mov	r4, r0
 8001d60:	2104      	movs	r1, #4
 8001d62:	f026 f976 	bl	8028052 <_ZdlPvj>
 8001d66:	4620      	mov	r0, r4
 8001d68:	bd10      	pop	{r4, pc}
	...

08001d6c <_ZN20STM32TouchController11sampleTouchERlS0_>:
    }
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
    if (_initialized)
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1c>)
{
 8001d6e:	b510      	push	{r4, lr}
    if (_initialized)
 8001d70:	7818      	ldrb	r0, [r3, #0]
 8001d72:	b130      	cbz	r0, 8001d82 <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
    {
        if (state.TouchDetected)
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>)
 8001d76:	681c      	ldr	r4, [r3, #0]
 8001d78:	b124      	cbz	r4, 8001d84 <_ZN20STM32TouchController11sampleTouchERlS0_+0x18>
        {
            x = state.TouchX;
 8001d7a:	685c      	ldr	r4, [r3, #4]
 8001d7c:	600c      	str	r4, [r1, #0]
            y = state.TouchY;
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	6013      	str	r3, [r2, #0]
            return true;
        }
    }

    return false;
}
 8001d82:	bd10      	pop	{r4, pc}
    return false;
 8001d84:	4620      	mov	r0, r4
 8001d86:	e7fc      	b.n	8001d82 <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
 8001d88:	201530b8 	.word	0x201530b8
 8001d8c:	201530bc 	.word	0x201530bc

08001d90 <_ZN20STM32TouchController4initEv>:
{
 8001d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (!_initialized)
 8001d92:	4c09      	ldr	r4, [pc, #36]	; (8001db8 <_ZN20STM32TouchController4initEv+0x28>)
 8001d94:	7820      	ldrb	r0, [r4, #0]
 8001d96:	b968      	cbnz	r0, 8001db4 <_ZN20STM32TouchController4initEv+0x24>
        TsInit.Width = HAL::DISPLAY_WIDTH;
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <_ZN20STM32TouchController4initEv+0x2c>)
        if (BSP_TS_Init(0, &TsInit) == BSP_ERROR_NONE)
 8001d9a:	4669      	mov	r1, sp
        TsInit.Width = HAL::DISPLAY_WIDTH;
 8001d9c:	881b      	ldrh	r3, [r3, #0]
        TsInit.Accuracy = 0;
 8001d9e:	9003      	str	r0, [sp, #12]
        TsInit.Width = HAL::DISPLAY_WIDTH;
 8001da0:	9300      	str	r3, [sp, #0]
        TsInit.Height = HAL::DISPLAY_HEIGHT;
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <_ZN20STM32TouchController4initEv+0x30>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
        TsInit.Orientation = TS_ORIENTATION_PORTRAIT;
 8001da6:	e9cd 3001 	strd	r3, r0, [sp, #4]
        if (BSP_TS_Init(0, &TsInit) == BSP_ERROR_NONE)
 8001daa:	f005 f877 	bl	8006e9c <BSP_TS_Init>
 8001dae:	b908      	cbnz	r0, 8001db4 <_ZN20STM32TouchController4initEv+0x24>
            _initialized = true;
 8001db0:	2301      	movs	r3, #1
 8001db2:	7023      	strb	r3, [r4, #0]
}
 8001db4:	b004      	add	sp, #16
 8001db6:	bd10      	pop	{r4, pc}
 8001db8:	201530b8 	.word	0x201530b8
 8001dbc:	2019814c 	.word	0x2019814c
 8001dc0:	2019814e 	.word	0x2019814e

08001dc4 <HAL_GPIO_EXTI_Falling_Callback>:
    if (GPIO_Pin == TS_INT_PIN)
 8001dc4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8001dc8:	b508      	push	{r3, lr}
    if (GPIO_Pin == TS_INT_PIN)
 8001dca:	d10d      	bne.n	8001de8 <HAL_GPIO_EXTI_Falling_Callback+0x24>
        if (_initialized)
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <HAL_GPIO_EXTI_Falling_Callback+0x28>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b153      	cbz	r3, 8001de8 <HAL_GPIO_EXTI_Falling_Callback+0x24>
            if (BSP_TS_GetState(0, &state) != BSP_ERROR_NONE)
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	4906      	ldr	r1, [pc, #24]	; (8001df0 <HAL_GPIO_EXTI_Falling_Callback+0x2c>)
 8001dd6:	f005 f8fd 	bl	8006fd4 <BSP_TS_GetState>
 8001dda:	b128      	cbz	r0, 8001de8 <HAL_GPIO_EXTI_Falling_Callback+0x24>
                assert(0 && "Failed to read TS state");
 8001ddc:	213b      	movs	r1, #59	; 0x3b
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 8001de0:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <HAL_GPIO_EXTI_Falling_Callback+0x34>)
 8001de2:	4806      	ldr	r0, [pc, #24]	; (8001dfc <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 8001de4:	f026 f962 	bl	80280ac <__assert_func>
}
 8001de8:	bd08      	pop	{r3, pc}
 8001dea:	bf00      	nop
 8001dec:	201530b8 	.word	0x201530b8
 8001df0:	201530bc 	.word	0x201530bc
 8001df4:	080297c0 	.word	0x080297c0
 8001df8:	080297df 	.word	0x080297df
 8001dfc:	0802980d 	.word	0x0802980d

08001e00 <_ZN8touchgfx4GPIO4initEv>:
 * Perform configuration of IO pins.
 */
void GPIO::init()
{

}
 8001e00:	4770      	bx	lr
	...

08001e04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001e04:	2803      	cmp	r0, #3
 8001e06:	d814      	bhi.n	8001e32 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2e>
 8001e08:	e8df f000 	tbb	[pc, r0]
 8001e0c:	0f0a0702 	.word	0x0f0a0702
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 8001e10:	2201      	movs	r2, #1
 8001e12:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 8001e14:	4807      	ldr	r0, [pc, #28]	; (8001e34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x30>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 8001e16:	f008 b80f 	b.w	8009e38 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	e7f9      	b.n	8001e14 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x10>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 8001e26:	4804      	ldr	r0, [pc, #16]	; (8001e38 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x34>)
 8001e28:	e7f5      	b.n	8001e16 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x12>
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e30:	e7f9      	b.n	8001e26 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x22>
#endif
        break;
    }
}
 8001e32:	4770      	bx	lr
 8001e34:	42020c00 	.word	0x42020c00
 8001e38:	42021400 	.word	0x42021400

08001e3c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001e3c:	2803      	cmp	r0, #3
 8001e3e:	d814      	bhi.n	8001e6a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2e>
 8001e40:	e8df f000 	tbb	[pc, r0]
 8001e44:	0f0a0702 	.word	0x0f0a0702
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001e4c:	4807      	ldr	r0, [pc, #28]	; (8001e6c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001e4e:	f007 bff3 	b.w	8009e38 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2101      	movs	r1, #1
 8001e56:	e7f9      	b.n	8001e4c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x10>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001e5e:	4804      	ldr	r0, [pc, #16]	; (8001e70 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x34>)
 8001e60:	e7f5      	b.n	8001e4e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x12>
 8001e62:	2200      	movs	r2, #0
 8001e64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e68:	e7f9      	b.n	8001e5e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x22>
#endif
        break;
    }
}
 8001e6a:	4770      	bx	lr
 8001e6c:	42020c00 	.word	0x42020c00
 8001e70:	42021400 	.word	0x42021400

08001e74 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001e74:	2803      	cmp	r0, #3
 8001e76:	d810      	bhi.n	8001e9a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x26>
 8001e78:	e8df f000 	tbb	[pc, r0]
 8001e7c:	0c080602 	.word	0x0c080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001e80:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001e82:	4806      	ldr	r0, [pc, #24]	; (8001e9c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e84:	f007 bff0 	b.w	8009e68 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001e88:	2101      	movs	r1, #1
 8001e8a:	e7fa      	b.n	8001e82 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001e8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e90:	4803      	ldr	r0, [pc, #12]	; (8001ea0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8001e92:	e7f7      	b.n	8001e84 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e98:	e7fa      	b.n	8001e90 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x1c>
#endif
        break;
    }
}
 8001e9a:	4770      	bx	lr
 8001e9c:	42020c00 	.word	0x42020c00
 8001ea0:	42021400 	.word	0x42021400

08001ea4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001ea4:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001ea6:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001eaa:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001eae:	4770      	bx	lr

08001eb0 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	4770      	bx	lr

08001eb4 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001eb4:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001eb6:	3900      	subs	r1, #0
 8001eb8:	bf18      	it	ne
 8001eba:	2101      	movne	r1, #1
 8001ebc:	4b01      	ldr	r3, [pc, #4]	; (8001ec4 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001ebe:	7019      	strb	r1, [r3, #0]
    }
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20198157 	.word	0x20198157

08001ec8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001ec8:	2000      	movs	r0, #0
 8001eca:	4770      	bx	lr

08001ecc <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001ecc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001ece:	b10b      	cbz	r3, 8001ed4 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001ed0:	4608      	mov	r0, r1
 8001ed2:	4718      	bx	r3
        }
    }
 8001ed4:	4770      	bx	lr

08001ed6 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001ed6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001eda:	4770      	bx	lr

08001edc <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001edc:	6840      	ldr	r0, [r0, #4]
 8001ede:	6803      	ldr	r3, [r0, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	4718      	bx	r3

08001ee4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 8001ee4:	4770      	bx	lr

08001ee6 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 8001ee6:	4770      	bx	lr

08001ee8 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001ee8:	4770      	bx	lr
	...

08001eec <_ZN11TouchGFXHAL10initializeEv>:
using namespace touchgfx;

KeySampler btnctrl;

void TouchGFXHAL::initialize()
{
 8001eec:	b538      	push	{r3, r4, r5, lr}
 8001eee:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001ef0:	f000 fd4e 	bl	8002990 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        buttonController = btnCtrl;
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <_ZN11TouchGFXHAL10initializeEv+0x2c>)
    setButtonController(&btnctrl);
    lockDMAToFrontPorch(false);
    GPIO::init();
    instrumentation.init();
 8001ef6:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
 8001efa:	6163      	str	r3, [r4, #20]
        lockDMAToPorch = enableLock;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
    GPIO::init();
 8001f02:	f7ff ff7d 	bl	8001e00 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8001f06:	4628      	mov	r0, r5
 8001f08:	f7ff fec0 	bl	8001c8c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001f0c:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001f0e:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001f10:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001f14:	bd38      	pop	{r3, r4, r5, pc}
 8001f16:	bf00      	nop
 8001f18:	201530cc 	.word	0x201530cc

08001f1c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001f1c:	f000 bd2a 	b.w	8002974 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001f20 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8001f22:	2500      	movs	r5, #0
 8001f24:	4c10      	ldr	r4, [pc, #64]	; (8001f68 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt+0x48>)
 8001f26:	9500      	str	r5, [sp, #0]
 8001f28:	6823      	ldr	r3, [r4, #0]
 8001f2a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001f2e:	f022 0208 	bic.w	r2, r2, #8
 8001f32:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001f36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	9b00      	ldr	r3, [sp, #0]
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001f42:	f000 fd1d 	bl	8002980 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
    __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	9501      	str	r5, [sp, #4]
 8001f4a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001f4e:	f042 0208 	orr.w	r2, r2, #8
 8001f52:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001f56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	9b01      	ldr	r3, [sp, #4]
}
 8001f62:	b003      	add	sp, #12
 8001f64:	bd30      	pop	{r4, r5, pc}
 8001f66:	bf00      	nop
 8001f68:	20152e90 	.word	0x20152e90

08001f6c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001f6c:	f000 bd38 	b.w	80029e0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001f70 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:
}

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001f70:	f000 bd38 	b.w	80029e4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08001f74 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001f74:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    TouchGFXGeneratedHAL::configureInterrupts();
 8001f76:	f000 fcd7 	bl	8002928 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	2290      	movs	r2, #144	; 0x90
 8001f7c:	4b01      	ldr	r3, [pc, #4]	; (8001f84 <_ZN11TouchGFXHAL19configureInterruptsEv+0x10>)
 8001f7e:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
    NVIC_SetPriority(DSI_IRQn, 9);
}
 8001f82:	bd08      	pop	{r3, pc}
 8001f84:	e000e100 	.word	0xe000e100

08001f88 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001f88:	f000 bcda 	b.w	8002940 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001f8c <_ZN11TouchGFXHAL10beginFrameEv>:
}

bool TouchGFXHAL::beginFrame()
{
    return TouchGFXGeneratedHAL::beginFrame();
 8001f8c:	f000 bd1c 	b.w	80029c8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>

08001f90 <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
    if (!display_on)
 8001f90:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <_ZN11TouchGFXHAL8endFrameEv+0x38>)
{
 8001f92:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!display_on)
 8001f94:	7819      	ldrb	r1, [r3, #0]
{
 8001f96:	4604      	mov	r4, r0
    if (!display_on)
 8001f98:	b979      	cbnz	r1, 8001fba <_ZN11TouchGFXHAL8endFrameEv+0x2a>
    {
        display_on = true;
 8001f9a:	2201      	movs	r2, #1
        /* Enable the LCD, Send Display on DCS command to display */
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, DSI_SET_DISPLAY_ON, 0x00);
        /* Start PWM Timer channel */
        (void)HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001f9c:	4d0b      	ldr	r5, [pc, #44]	; (8001fcc <_ZN11TouchGFXHAL8endFrameEv+0x3c>)
        display_on = true;
 8001f9e:	701a      	strb	r2, [r3, #0]
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, DSI_SET_DISPLAY_ON, 0x00);
 8001fa0:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <_ZN11TouchGFXHAL8endFrameEv+0x40>)
 8001fa2:	2329      	movs	r3, #41	; 0x29
 8001fa4:	2215      	movs	r2, #21
 8001fa6:	9100      	str	r1, [sp, #0]
 8001fa8:	f007 f971 	bl	800928e <HAL_DSI_ShortWrite>
        (void)HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001fac:	2104      	movs	r1, #4
 8001fae:	4628      	mov	r0, r5
 8001fb0:	f00e f9cc 	bl	801034c <HAL_TIM_PWM_Start>
        /* Enable Backlight by setting Brightness to 100% */
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 2U * 100);
 8001fb4:	22c8      	movs	r2, #200	; 0xc8
 8001fb6:	682b      	ldr	r3, [r5, #0]
 8001fb8:	639a      	str	r2, [r3, #56]	; 0x38
    }

    TouchGFXGeneratedHAL::endFrame();
 8001fba:	4620      	mov	r0, r4
}
 8001fbc:	b003      	add	sp, #12
 8001fbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    TouchGFXGeneratedHAL::endFrame();
 8001fc2:	f000 bd03 	b.w	80029cc <_ZN20TouchGFXGeneratedHAL8endFrameEv>
 8001fc6:	bf00      	nop
 8001fc8:	201530c8 	.word	0x201530c8
 8001fcc:	20152f68 	.word	0x20152f68
 8001fd0:	20152e90 	.word	0x20152e90

08001fd4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001fd4:	b510      	push	{r4, lr}
 8001fd6:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001fd8:	f014 fb60 	bl	801669c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	4620      	mov	r0, r4
    }
 8001fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001fe4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001fe8:	4718      	bx	r3

08001fea <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001fea:	f013 bda1 	b.w	8015b30 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001fee <_ZN11TouchGFXHALD0Ev>:
 8001fee:	b510      	push	{r4, lr}
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	21b4      	movs	r1, #180	; 0xb4
 8001ff4:	f026 f82d 	bl	8028052 <_ZdlPvj>
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	bd10      	pop	{r4, pc}

08001ffc <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001ffc:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8002000:	b11b      	cbz	r3, 800200a <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8002002:	6840      	ldr	r0, [r0, #4]
 8002004:	6803      	ldr	r3, [r0, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4718      	bx	r3
    }
 800200a:	4618      	mov	r0, r3
 800200c:	4770      	bx	lr
	...

08002010 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 8002010:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8002012:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8002016:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 800201c:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 800201e:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8002020:	d009      	beq.n	8002036 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8002022:	b93a      	cbnz	r2, 8002034 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002024:	490a      	ldr	r1, [pc, #40]	; (8002050 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002026:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002028:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800202a:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 800202c:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800202e:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002030:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 8002032:	701a      	strb	r2, [r3, #0]
    }
 8002034:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8002036:	2a00      	cmp	r2, #0
 8002038:	d0fc      	beq.n	8002034 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800203a:	4a06      	ldr	r2, [pc, #24]	; (8002054 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 800203c:	4904      	ldr	r1, [pc, #16]	; (8002050 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800203e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002040:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002042:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8002044:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8002046:	2200      	movs	r2, #0
 8002048:	e7f3      	b.n	8002032 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 800204a:	bf00      	nop
 800204c:	20198150 	.word	0x20198150
 8002050:	2019814e 	.word	0x2019814e
 8002054:	2019814c 	.word	0x2019814c

08002058 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8002058:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	428b      	cmp	r3, r1
 8002060:	d803      	bhi.n	800206a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	4293      	cmp	r3, r2
 8002068:	d905      	bls.n	8002076 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 800206a:	219e      	movs	r1, #158	; 0x9e
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 800206e:	4a07      	ldr	r2, [pc, #28]	; (800208c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8002070:	4807      	ldr	r0, [pc, #28]	; (8002090 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8002072:	f026 f81b 	bl	80280ac <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002078:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 800207c:	801a      	strh	r2, [r3, #0]
    }
 800207e:	bd08      	pop	{r3, pc}
 8002080:	2019814c 	.word	0x2019814c
 8002084:	2019814e 	.word	0x2019814e
 8002088:	08029870 	.word	0x08029870
 800208c:	080298d3 	.word	0x080298d3
 8002090:	08029916 	.word	0x08029916
 8002094:	20198152 	.word	0x20198152
 8002098:	20198154 	.word	0x20198154

0800209c <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 800209c:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 800209e:	f000 fcc3 	bl	8002a28 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <_ZN11TouchGFXHAL17disableInterruptsEv+0x1c>)
 80020a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80020b0:	f3bf 8f6f 	isb	sy
}
 80020b4:	bd08      	pop	{r3, pc}
 80020b6:	bf00      	nop
 80020b8:	e000e100 	.word	0xe000e100

080020bc <_ZN11TouchGFXHAL16enableInterruptsEv>:
{
 80020bc:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::enableInterrupts();
 80020be:	f000 fccd 	bl	8002a5c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c6:	4b01      	ldr	r3, [pc, #4]	; (80020cc <_ZN11TouchGFXHAL16enableInterruptsEv+0x10>)
 80020c8:	611a      	str	r2, [r3, #16]
}
 80020ca:	bd08      	pop	{r3, pc}
 80020cc:	e000e100 	.word	0xe000e100

080020d0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 80020d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80020d2:	460c      	mov	r4, r1
 80020d4:	b931      	cbnz	r1, 80020e4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x14>
 80020d6:	f240 21d2 	movw	r1, #722	; 0x2d2
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x78>)
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x7c>)
 80020de:	481c      	ldr	r0, [pc, #112]	; (8002150 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x80>)
 80020e0:	f025 ffe4 	bl	80280ac <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80020e4:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80020e8:	3a00      	subs	r2, #0
 80020ea:	bf18      	it	ne
 80020ec:	2201      	movne	r2, #1
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 80020ee:	2500      	movs	r5, #0
 80020f0:	4918      	ldr	r1, [pc, #96]	; (8002154 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x84>)
 80020f2:	4e19      	ldr	r6, [pc, #100]	; (8002158 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x88>)
 80020f4:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 80020f6:	6802      	ldr	r2, [r0, #0]
 80020f8:	4619      	mov	r1, r3
 80020fa:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80020fe:	4790      	blx	r2
 8002100:	6833      	ldr	r3, [r6, #0]
 8002102:	9500      	str	r5, [sp, #0]
 8002104:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 8002108:	4621      	mov	r1, r4
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 800210a:	f022 0208 	bic.w	r2, r2, #8
 800210e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002112:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 8002116:	462a      	mov	r2, r5
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	9300      	str	r3, [sp, #0]
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 800211e:	480f      	ldr	r0, [pc, #60]	; (800215c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x8c>)
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8002120:	9b00      	ldr	r3, [sp, #0]
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 8002122:	f009 f9a5 	bl	800b470 <HAL_LTDC_SetAddress>
    __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 8002126:	6833      	ldr	r3, [r6, #0]
 8002128:	9501      	str	r5, [sp, #4]
 800212a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800212e:	f042 0208 	orr.w	r2, r2, #8
 8002132:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002136:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	9b01      	ldr	r3, [sp, #4]
}
 8002142:	b002      	add	sp, #8
 8002144:	bd70      	pop	{r4, r5, r6, pc}
 8002146:	bf00      	nop
 8002148:	0802995b 	.word	0x0802995b
 800214c:	08029993 	.word	0x08029993
 8002150:	08029916 	.word	0x08029916
 8002154:	20198156 	.word	0x20198156
 8002158:	20152e90 	.word	0x20152e90
 800215c:	20152ec0 	.word	0x20152ec0

08002160 <tx_low_power_enter>:
#ifdef TX_LOW_POWER
extern "C"
{

    void tx_low_power_enter()
    {
 8002160:	b508      	push	{r3, lr}
        // tgfx task going to sleep
        touchgfx::HAL::getInstance()->setMCUActive(false);
 8002162:	4b03      	ldr	r3, [pc, #12]	; (8002170 <tx_low_power_enter+0x10>)
 8002164:	2100      	movs	r1, #0
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	f014 fab2 	bl	80166d0 <_ZN8touchgfx3HAL12setMCUActiveEb>
        __WFI();
 800216c:	bf30      	wfi
    }
 800216e:	bd08      	pop	{r3, pc}
 8002170:	20198158 	.word	0x20198158

08002174 <tx_low_power_exit>:
    void tx_low_power_exit()
    {

        // tgfx task waking up
        touchgfx::HAL::getInstance()->setMCUActive(true);
 8002174:	4b02      	ldr	r3, [pc, #8]	; (8002180 <tx_low_power_exit+0xc>)
 8002176:	2101      	movs	r1, #1
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	f014 baa9 	b.w	80166d0 <_ZN8touchgfx3HAL12setMCUActiveEb>
 800217e:	bf00      	nop
 8002180:	20198158 	.word	0x20198158

08002184 <_GLOBAL__sub_I_btnctrl>:
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <_GLOBAL__sub_I_btnctrl+0xc>)
 8002186:	4b03      	ldr	r3, [pc, #12]	; (8002194 <_GLOBAL__sub_I_btnctrl+0x10>)
 8002188:	6003      	str	r3, [r0, #0]
        init();
 800218a:	f7ff bdbc 	b.w	8001d06 <_ZN8touchgfx10KeySampler4initEv>
 800218e:	bf00      	nop
 8002190:	201530cc 	.word	0x201530cc
 8002194:	080297ac 	.word	0x080297ac

08002198 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    CHAR* pointer;

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 800219a:	2334      	movs	r3, #52	; 0x34
 800219c:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <_ZN8touchgfx10OSWrappers10initializeEv+0x70>)
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	491a      	ldr	r1, [pc, #104]	; (800220c <_ZN8touchgfx10OSWrappers10initializeEv+0x74>)
 80021a2:	2364      	movs	r3, #100	; 0x64
 80021a4:	481a      	ldr	r0, [pc, #104]	; (8002210 <_ZN8touchgfx10OSWrappers10initializeEv+0x78>)
 80021a6:	f012 fe2d 	bl	8014e04 <_txe_byte_pool_create>
 80021aa:	4603      	mov	r3, r0
 80021ac:	b128      	cbz	r0, 80021ba <_ZN8touchgfx10OSWrappers10initializeEv+0x22>
                            OSWRAPPER_BYTE_POOL_SIZE) != TX_SUCCESS)
    {
        assert(0 && "Failed to create OSWrapper Pool memory!");
 80021ae:	2138      	movs	r1, #56	; 0x38
 80021b0:	4b18      	ldr	r3, [pc, #96]	; (8002214 <_ZN8touchgfx10OSWrappers10initializeEv+0x7c>)
 80021b2:	4a19      	ldr	r2, [pc, #100]	; (8002218 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)

    /* Allocate the vsync_q.  */
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
                         OSWRAPPER_QUEUE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
    {
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 80021b4:	4819      	ldr	r0, [pc, #100]	; (800221c <_ZN8touchgfx10OSWrappers10initializeEv+0x84>)
 80021b6:	f025 ff79 	bl	80280ac <__assert_func>
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 80021ba:	2204      	movs	r2, #4
 80021bc:	4814      	ldr	r0, [pc, #80]	; (8002210 <_ZN8touchgfx10OSWrappers10initializeEv+0x78>)
 80021be:	a903      	add	r1, sp, #12
 80021c0:	f012 fdac 	bl	8014d1c <_txe_byte_allocate>
 80021c4:	b118      	cbz	r0, 80021ce <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 80021c6:	213f      	movs	r1, #63	; 0x3f
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <_ZN8touchgfx10OSWrappers10initializeEv+0x88>)
 80021ca:	4a13      	ldr	r2, [pc, #76]	; (8002218 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 80021cc:	e7f2      	b.n	80021b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }

    // Create a queue of length 1
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 80021ce:	2304      	movs	r3, #4
 80021d0:	2238      	movs	r2, #56	; 0x38
 80021d2:	4914      	ldr	r1, [pc, #80]	; (8002224 <_ZN8touchgfx10OSWrappers10initializeEv+0x8c>)
 80021d4:	e9cd 3200 	strd	r3, r2, [sp]
 80021d8:	4813      	ldr	r0, [pc, #76]	; (8002228 <_ZN8touchgfx10OSWrappers10initializeEv+0x90>)
 80021da:	2201      	movs	r2, #1
 80021dc:	9b03      	ldr	r3, [sp, #12]
 80021de:	f012 feb1 	bl	8014f44 <_txe_queue_create>
 80021e2:	b118      	cbz	r0, 80021ec <_ZN8touchgfx10OSWrappers10initializeEv+0x54>
                        pointer, OSWRAPPER_QUEUE_SIZE) != TX_SUCCESS)
    {
        assert(0 && "Failed to create Vsync Message Queue!");
 80021e4:	2146      	movs	r1, #70	; 0x46
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <_ZN8touchgfx10OSWrappers10initializeEv+0x94>)
 80021e8:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 80021ea:	e7e3      	b.n	80021b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }

    // Create the Framebuffer Semaphore (Binary)
    if (tx_semaphore_create(&frame_buffer_sem, (CHAR*) "FrameBuffer Semaphore", 1) != TX_SUCCESS)
 80021ec:	231c      	movs	r3, #28
 80021ee:	2201      	movs	r2, #1
 80021f0:	490f      	ldr	r1, [pc, #60]	; (8002230 <_ZN8touchgfx10OSWrappers10initializeEv+0x98>)
 80021f2:	4810      	ldr	r0, [pc, #64]	; (8002234 <_ZN8touchgfx10OSWrappers10initializeEv+0x9c>)
 80021f4:	f012 ffea 	bl	80151cc <_txe_semaphore_create>
 80021f8:	b118      	cbz	r0, 8002202 <_ZN8touchgfx10OSWrappers10initializeEv+0x6a>
    {
        assert(0 && "Failed to create FrameBuffer Semaphore!");
 80021fa:	214c      	movs	r1, #76	; 0x4c
 80021fc:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <_ZN8touchgfx10OSWrappers10initializeEv+0xa0>)
 80021fe:	4a06      	ldr	r2, [pc, #24]	; (8002218 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 8002200:	e7d8      	b.n	80021b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }
}
 8002202:	b005      	add	sp, #20
 8002204:	f85d fb04 	ldr.w	pc, [sp], #4
 8002208:	201530f0 	.word	0x201530f0
 800220c:	08029abc 	.word	0x08029abc
 8002210:	20153154 	.word	0x20153154
 8002214:	08029ad0 	.word	0x08029ad0
 8002218:	08029aff 	.word	0x08029aff
 800221c:	08029b2e 	.word	0x08029b2e
 8002220:	08029b79 	.word	0x08029b79
 8002224:	08029bb7 	.word	0x08029bb7
 8002228:	20153188 	.word	0x20153188
 800222c:	08029bcb 	.word	0x08029bcb
 8002230:	08029bf8 	.word	0x08029bf8
 8002234:	201530d4 	.word	0x201530d4
 8002238:	08029c0e 	.word	0x08029c0e

0800223c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800223c:	b508      	push	{r3, lr}
    if (tx_semaphore_get(&frame_buffer_sem, TX_WAIT_FOREVER) != TX_SUCCESS)
 800223e:	f04f 31ff 	mov.w	r1, #4294967295
 8002242:	4805      	ldr	r0, [pc, #20]	; (8002258 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x1c>)
 8002244:	f013 f858 	bl	80152f8 <_txe_semaphore_get>
 8002248:	b128      	cbz	r0, 8002256 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x1a>
    {
        assert(0 && "Failed to get FrameBuffer Semaphore!");
 800224a:	2157      	movs	r1, #87	; 0x57
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x20>)
 800224e:	4a04      	ldr	r2, [pc, #16]	; (8002260 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x24>)
 8002250:	4804      	ldr	r0, [pc, #16]	; (8002264 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 8002252:	f025 ff2b 	bl	80280ac <__assert_func>
    }
}
 8002256:	bd08      	pop	{r3, pc}
 8002258:	201530d4 	.word	0x201530d4
 800225c:	08029c3d 	.word	0x08029c3d
 8002260:	08029c69 	.word	0x08029c69
 8002264:	08029b2e 	.word	0x08029b2e

08002268 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    if (!frame_buffer_sem.tx_semaphore_count)
 8002268:	4806      	ldr	r0, [pc, #24]	; (8002284 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1c>)
{
 800226a:	b508      	push	{r3, lr}
    if (!frame_buffer_sem.tx_semaphore_count)
 800226c:	6883      	ldr	r3, [r0, #8]
 800226e:	b943      	cbnz	r3, 8002282 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1a>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 8002270:	f013 f884 	bl	801537c <_txe_semaphore_put>
 8002274:	b128      	cbz	r0, 8002282 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1a>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 8002276:	2164      	movs	r1, #100	; 0x64
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x20>)
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x24>)
 800227c:	4804      	ldr	r0, [pc, #16]	; (8002290 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 800227e:	f025 ff15 	bl	80280ac <__assert_func>
        }
    }
}
 8002282:	bd08      	pop	{r3, pc}
 8002284:	201530d4 	.word	0x201530d4
 8002288:	08029ca6 	.word	0x08029ca6
 800228c:	08029cd2 	.word	0x08029cd2
 8002290:	08029b2e 	.word	0x08029b2e

08002294 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    if (tx_semaphore_get(&frame_buffer_sem, TX_NO_WAIT) != TX_SUCCESS)
 8002294:	2100      	movs	r1, #0
 8002296:	4801      	ldr	r0, [pc, #4]	; (800229c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x8>)
 8002298:	f013 b82e 	b.w	80152f8 <_txe_semaphore_get>
 800229c:	201530d4 	.word	0x201530d4

080022a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80022a0:	b538      	push	{r3, r4, r5, lr}
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80022a2:	f3ef 8510 	mrs	r5, PRIMASK
    int_posture = __get_interrupt_posture();

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80022a6:	b672      	cpsid	i
    TX_INTERRUPT_SAVE_AREA
    TX_DISABLE;
    _tx_thread_preempt_disable++;
 80022a8:	4c0c      	ldr	r4, [pc, #48]	; (80022dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
    if (!frame_buffer_sem.tx_semaphore_count)
 80022aa:	480d      	ldr	r0, [pc, #52]	; (80022e0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x40>)
    _tx_thread_preempt_disable++;
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	3301      	adds	r3, #1
 80022b0:	6023      	str	r3, [r4, #0]
    if (!frame_buffer_sem.tx_semaphore_count)
 80022b2:	6883      	ldr	r3, [r0, #8]
 80022b4:	b943      	cbnz	r3, 80022c8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 80022b6:	f013 f861 	bl	801537c <_txe_semaphore_put>
 80022ba:	b128      	cbz	r0, 80022c8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 80022bc:	218a      	movs	r1, #138	; 0x8a
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x44>)
 80022c0:	4a09      	ldr	r2, [pc, #36]	; (80022e8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x48>)
 80022c2:	480a      	ldr	r0, [pc, #40]	; (80022ec <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4c>)
 80022c4:	f025 fef2 	bl	80280ac <__assert_func>
        }
    }
    _tx_thread_preempt_disable--;
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	6023      	str	r3, [r4, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80022ce:	f385 8810 	msr	PRIMASK, r5
    TX_RESTORE;
    _tx_thread_system_preempt_check();
}
 80022d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _tx_thread_system_preempt_check();
 80022d6:	f012 b80b 	b.w	80142f0 <_tx_thread_system_preempt_check>
 80022da:	bf00      	nop
 80022dc:	20197bdc 	.word	0x20197bdc
 80022e0:	201530d4 	.word	0x201530d4
 80022e4:	08029ca6 	.word	0x08029ca6
 80022e8:	08029d0f 	.word	0x08029d0f
 80022ec:	08029b2e 	.word	0x08029b2e

080022f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
    UINT ret;

    // Send the message only if the queue is empty.
    // This call is from ISR, so no need to re-send
    // the message if not yet consumed by threads
    if (vsync_q.tx_queue_enqueued == 0)
 80022f0:	4807      	ldr	r0, [pc, #28]	; (8002310 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
{
 80022f2:	b508      	push	{r3, lr}
    if (vsync_q.tx_queue_enqueued == 0)
 80022f4:	6902      	ldr	r2, [r0, #16]
 80022f6:	b94a      	cbnz	r2, 800230c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>
    {
        // This is supposed to be called from Vsync Interrupt Handler
        // So wait_option should be equal to TX_NO_WAIT
        ret = tx_queue_send(&vsync_q, &dummy_msg, TX_NO_WAIT);
 80022f8:	4906      	ldr	r1, [pc, #24]	; (8002314 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x24>)
 80022fa:	f012 ff1d 	bl	8015138 <_txe_queue_send>
        if (ret != TX_SUCCESS)
 80022fe:	b128      	cbz	r0, 800230c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>
        {
            assert(0 && "Failed to Signal Vsync!");
 8002300:	21a6      	movs	r1, #166	; 0xa6
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x28>)
 8002304:	4a05      	ldr	r2, [pc, #20]	; (800231c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>)
 8002306:	4806      	ldr	r0, [pc, #24]	; (8002320 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x30>)
 8002308:	f025 fed0 	bl	80280ac <__assert_func>
        }
    }
}
 800230c:	bd08      	pop	{r3, pc}
 800230e:	bf00      	nop
 8002310:	20153188 	.word	0x20153188
 8002314:	20000004 	.word	0x20000004
 8002318:	08029d53 	.word	0x08029d53
 800231c:	08029d72 	.word	0x08029d72
 8002320:	08029b2e 	.word	0x08029b2e

08002324 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002324:	b508      	push	{r3, lr}
    UINT ret;

    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_NO_WAIT);
 8002326:	2200      	movs	r2, #0
 8002328:	490a      	ldr	r1, [pc, #40]	; (8002354 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 800232a:	480b      	ldr	r0, [pc, #44]	; (8002358 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 800232c:	f012 feba 	bl	80150a4 <_txe_queue_receive>

    if ((ret == TX_SUCCESS) || (ret == TX_QUEUE_EMPTY))
 8002330:	b138      	cbz	r0, 8002342 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
 8002332:	280a      	cmp	r0, #10
 8002334:	d005      	beq.n	8002342 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
    }

    if (ret != TX_SUCCESS)
    {
        assert(0 && "Failed to Wait for Vsync!");
 8002336:	21c9      	movs	r1, #201	; 0xc9
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x38>)
 800233a:	4a09      	ldr	r2, [pc, #36]	; (8002360 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x3c>)
 800233c:	4809      	ldr	r0, [pc, #36]	; (8002364 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x40>)
 800233e:	f025 feb5 	bl	80280ac <__assert_func>
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
 8002342:	f04f 32ff 	mov.w	r2, #4294967295
 8002346:	4903      	ldr	r1, [pc, #12]	; (8002354 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 8002348:	4803      	ldr	r0, [pc, #12]	; (8002358 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 800234a:	f012 feab 	bl	80150a4 <_txe_queue_receive>
    if (ret != TX_SUCCESS)
 800234e:	2800      	cmp	r0, #0
 8002350:	d1f1      	bne.n	8002336 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x12>
    }
}
 8002352:	bd08      	pop	{r3, pc}
 8002354:	20000004 	.word	0x20000004
 8002358:	20153188 	.word	0x20153188
 800235c:	08029da2 	.word	0x08029da2
 8002360:	08029dc3 	.word	0x08029dc3
 8002364:	08029b2e 	.word	0x08029b2e

08002368 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8002368:	6803      	ldr	r3, [r0, #0]
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	4718      	bx	r3

0800236e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 800236e:	2001      	movs	r0, #1
 8002370:	4770      	bx	lr

08002372 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8002372:	6803      	ldr	r3, [r0, #0]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	4718      	bx	r3

08002378 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002378:	f240 30ef 	movw	r0, #1007	; 0x3ef
 800237c:	4770      	bx	lr
	...

08002380 <_ZN8STM32DMAD1Ev>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002380:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
STM32DMA::~STM32DMA()
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <_ZN8STM32DMAD1Ev+0x18>)
 8002386:	6003      	str	r3, [r0, #0]
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <_ZN8STM32DMAD1Ev+0x1c>)
 800238a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 800238e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002392:	f3bf 8f6f 	isb	sy
}
 8002396:	4770      	bx	lr
 8002398:	08029f50 	.word	0x08029f50
 800239c:	e000e100 	.word	0xe000e100

080023a0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80023a0:	b510      	push	{r4, lr}
 80023a2:	4604      	mov	r4, r0
}
 80023a4:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 80023a8:	f7ff ffea 	bl	8002380 <_ZN8STM32DMAD1Ev>
 80023ac:	4620      	mov	r0, r4
 80023ae:	f025 fe50 	bl	8028052 <_ZdlPvj>
 80023b2:	4620      	mov	r0, r4
 80023b4:	bd10      	pop	{r4, pc}
	...

080023b8 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <_ZN8STM32DMA10initializeEv+0x40>)
{
 80023ba:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80023bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023c0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80023c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80023c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023cc:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80023d0:	9201      	str	r2, [sp, #4]
 80023d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80023d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80023da:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80023dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <_ZN8STM32DMA10initializeEv+0x44>)
 80023e6:	4a06      	ldr	r2, [pc, #24]	; (8002400 <_ZN8STM32DMA10initializeEv+0x48>)
 80023e8:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <_ZN8STM32DMA10initializeEv+0x4c>)
 80023f0:	60da      	str	r2, [r3, #12]
}
 80023f2:	b002      	add	sp, #8
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	46020c00 	.word	0x46020c00
 80023fc:	20152e30 	.word	0x20152e30
 8002400:	08002409 	.word	0x08002409
 8002404:	e000e100 	.word	0xe000e100

08002408 <DMA2D_XferCpltCallback>:
        return instance;
 8002408:	4b02      	ldr	r3, [pc, #8]	; (8002414 <DMA2D_XferCpltCallback+0xc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 800240e:	6803      	ldr	r3, [r0, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	4718      	bx	r3
 8002414:	20198158 	.word	0x20198158

08002418 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800241c:	2600      	movs	r6, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800241e:	4625      	mov	r5, r4
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <_ZN8STM32DMAC1Ev+0x30>)
 8002422:	300c      	adds	r0, #12
 8002424:	6060      	str	r0, [r4, #4]
 8002426:	7226      	strb	r6, [r4, #8]
 8002428:	7266      	strb	r6, [r4, #9]
 800242a:	f845 3b20 	str.w	r3, [r5], #32
 800242e:	2260      	movs	r2, #96	; 0x60
 8002430:	4629      	mov	r1, r5
 8002432:	f014 fa8b 	bl	801694c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002436:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 800243a:	60ee      	str	r6, [r5, #12]
 800243c:	3524      	adds	r5, #36	; 0x24
 800243e:	42ab      	cmp	r3, r5
 8002440:	d1fb      	bne.n	800243a <_ZN8STM32DMAC1Ev+0x22>
}
 8002442:	4620      	mov	r0, r4
 8002444:	bd70      	pop	{r4, r5, r6, pc}
 8002446:	bf00      	nop
 8002448:	08029f50 	.word	0x08029f50

0800244c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 800244c:	b508      	push	{r3, lr}
    switch (format)
 800244e:	290b      	cmp	r1, #11
 8002450:	d80b      	bhi.n	800246a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8002452:	e8df f001 	tbb	[pc, r1]
 8002456:	0612      	.short	0x0612
 8002458:	0a0a0a10 	.word	0x0a0a0a10
 800245c:	0808080a 	.word	0x0808080a
 8002460:	0808      	.short	0x0808
 8002462:	2001      	movs	r0, #1
}
 8002464:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002466:	2005      	movs	r0, #5
        break;
 8002468:	e7fc      	b.n	8002464 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 800246a:	2166      	movs	r1, #102	; 0x66
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002470:	4805      	ldr	r0, [pc, #20]	; (8002488 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8002472:	f025 fe1b 	bl	80280ac <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002476:	2000      	movs	r0, #0
 8002478:	e7f4      	b.n	8002464 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800247a:	2002      	movs	r0, #2
    return dma2dColorMode;
 800247c:	e7f2      	b.n	8002464 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800247e:	bf00      	nop
 8002480:	08029df4 	.word	0x08029df4
 8002484:	08029e0f 	.word	0x08029e0f
 8002488:	08029e59 	.word	0x08029e59

0800248c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 800248c:	b508      	push	{r3, lr}
    switch (format)
 800248e:	290a      	cmp	r1, #10
 8002490:	d809      	bhi.n	80024a6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8002492:	e8df f001 	tbb	[pc, r1]
 8002496:	0610      	.short	0x0610
 8002498:	0808080e 	.word	0x0808080e
 800249c:	06060608 	.word	0x06060608
 80024a0:	06          	.byte	0x06
 80024a1:	00          	.byte	0x00
 80024a2:	2001      	movs	r0, #1
}
 80024a4:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 80024a6:	2187      	movs	r1, #135	; 0x87
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 80024ac:	4805      	ldr	r0, [pc, #20]	; (80024c4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 80024ae:	f025 fdfd 	bl	80280ac <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80024b2:	2000      	movs	r0, #0
 80024b4:	e7f6      	b.n	80024a4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80024b6:	2002      	movs	r0, #2
    return dma2dColorMode;
 80024b8:	e7f4      	b.n	80024a4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 80024ba:	bf00      	nop
 80024bc:	08029df4 	.word	0x08029df4
 80024c0:	08029ea2 	.word	0x08029ea2
 80024c4:	08029e59 	.word	0x08029e59

080024c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80024c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80024cc:	7f4f      	ldrb	r7, [r1, #29]
{
 80024ce:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80024d0:	4639      	mov	r1, r7
{
 80024d2:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80024d4:	f7ff ffba 	bl	800244c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024d8:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80024dc:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024de:	4641      	mov	r1, r8
 80024e0:	4648      	mov	r0, r9
 80024e2:	f7ff ffb3 	bl	800244c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024e6:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024e8:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024ea:	4648      	mov	r0, r9
 80024ec:	f7ff ffce 	bl	800248c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024f0:	8aa1      	ldrh	r1, [r4, #20]
 80024f2:	8b62      	ldrh	r2, [r4, #26]
 80024f4:	4b42      	ldr	r3, [pc, #264]	; (8002600 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80024f6:	1a52      	subs	r2, r2, r1
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024fa:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80024fc:	8b22      	ldrh	r2, [r4, #24]
 80024fe:	1a52      	subs	r2, r2, r1
 8002500:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002502:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002504:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002506:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800250a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800250c:	6920      	ldr	r0, [r4, #16]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800250e:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002510:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002512:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002514:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002516:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 800251a:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800251c:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 8002520:	d026      	beq.n	8002570 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8002522:	d810      	bhi.n	8002546 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 8002524:	2920      	cmp	r1, #32
 8002526:	ea45 0402 	orr.w	r4, r5, r2
 800252a:	d061      	beq.n	80025f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 800252c:	2940      	cmp	r1, #64	; 0x40
 800252e:	d05f      	beq.n	80025f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8002530:	2904      	cmp	r1, #4
 8002532:	d05d      	beq.n	80025f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002534:	4b32      	ldr	r3, [pc, #200]	; (8002600 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002536:	432a      	orrs	r2, r5
 8002538:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800253c:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800253e:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002540:	d05a      	beq.n	80025f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002542:	4a30      	ldr	r2, [pc, #192]	; (8002604 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8002544:	e040      	b.n	80025c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002546:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800254a:	d007      	beq.n	800255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 800254c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002550:	d1f0      	bne.n	8002534 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002552:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002556:	f042 0209 	orr.w	r2, r2, #9
 800255a:	e003      	b.n	8002564 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800255c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002560:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002564:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8002566:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002568:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800256a:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800256c:	6158      	str	r0, [r3, #20]
 800256e:	e02a      	b.n	80025c6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002570:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002572:	432a      	orrs	r2, r5
 8002574:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002578:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800257a:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800257c:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800257e:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002582:	7822      	ldrb	r2, [r4, #0]
 8002584:	b142      	cbz	r2, 8002598 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002586:	2a01      	cmp	r2, #1
 8002588:	d021      	beq.n	80025ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800258a:	f240 1101 	movw	r1, #257	; 0x101
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8002590:	4a1e      	ldr	r2, [pc, #120]	; (800260c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002592:	481f      	ldr	r0, [pc, #124]	; (8002610 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002594:	f025 fd8a 	bl	80280ac <__assert_func>
            bool blend = true;
 8002598:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800259a:	69da      	ldr	r2, [r3, #28]
 800259c:	8861      	ldrh	r1, [r4, #2]
 800259e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80025a2:	3901      	subs	r1, #1
 80025a4:	f022 0210 	bic.w	r2, r2, #16
 80025a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025ac:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80025b0:	69da      	ldr	r2, [r3, #28]
 80025b2:	f042 0220 	orr.w	r2, r2, #32
 80025b6:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	0692      	lsls	r2, r2, #26
 80025bc:	d4fc      	bmi.n	80025b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80025be:	2210      	movs	r2, #16
 80025c0:	609a      	str	r2, [r3, #8]
            if (blend)
 80025c2:	2800      	cmp	r0, #0
 80025c4:	d0bd      	beq.n	8002542 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80025c6:	4a13      	ldr	r2, [pc, #76]	; (8002614 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80025c8:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 80025ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80025ce:	8862      	ldrh	r2, [r4, #2]
 80025d0:	69d9      	ldr	r1, [r3, #28]
 80025d2:	1e54      	subs	r4, r2, #1
 80025d4:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 80025d8:	f022 0210 	bic.w	r2, r2, #16
 80025dc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
                if (blitOp.alpha == 255)
 80025e0:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80025e4:	f042 0210 	orr.w	r2, r2, #16
                if (blitOp.alpha == 255)
 80025e8:	bf18      	it	ne
 80025ea:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80025ec:	61da      	str	r2, [r3, #28]
                break;
 80025ee:	e7de      	b.n	80025ae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80025f0:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 80025f4:	61dc      	str	r4, [r3, #28]
 80025f6:	e7b8      	b.n	800256a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80025f8:	f240 2201 	movw	r2, #513	; 0x201
 80025fc:	e7e4      	b.n	80025c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80025fe:	bf00      	nop
 8002600:	4002b000 	.word	0x4002b000
 8002604:	00010201 	.word	0x00010201
 8002608:	08029eed 	.word	0x08029eed
 800260c:	08029f07 	.word	0x08029f07
 8002610:	08029e59 	.word	0x08029e59
 8002614:	00020201 	.word	0x00020201

08002618 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002618:	b570      	push	{r4, r5, r6, lr}
 800261a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800261c:	7f89      	ldrb	r1, [r1, #30]
 800261e:	f7ff ff35 	bl	800248c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002622:	8aa5      	ldrh	r5, [r4, #20]
 8002624:	8ae1      	ldrh	r1, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002628:	ea41 4105 	orr.w	r1, r1, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800262c:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800262e:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002630:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002632:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002634:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002636:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002638:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800263a:	6826      	ldr	r6, [r4, #0]
 800263c:	68e5      	ldr	r5, [r4, #12]
 800263e:	2e08      	cmp	r6, #8
 8002640:	d10d      	bne.n	800265e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002642:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002644:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002646:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002648:	7f20      	ldrb	r0, [r4, #28]
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 800264c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002650:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002652:	4a08      	ldr	r2, [pc, #32]	; (8002674 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002654:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002656:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002658:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800265a:	601a      	str	r2, [r3, #0]
    }
}
 800265c:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800265e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002660:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002662:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002664:	4a04      	ldr	r2, [pc, #16]	; (8002678 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002666:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002668:	e7f7      	b.n	800265a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 800266a:	bf00      	nop
 800266c:	4002b000 	.word	0x4002b000
 8002670:	00010009 	.word	0x00010009
 8002674:	00020201 	.word	0x00020201
 8002678:	00030201 	.word	0x00030201

0800267c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 800267c:	2001      	movs	r0, #1
 800267e:	4770      	bx	lr

08002680 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002680:	200c      	movs	r0, #12
 8002682:	4770      	bx	lr

08002684 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002684:	230c      	movs	r3, #12
 8002686:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800268a:	3008      	adds	r0, #8
 800268c:	4770      	bx	lr

0800268e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800268e:	230c      	movs	r3, #12
 8002690:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002694:	3008      	adds	r0, #8
 8002696:	4770      	bx	lr

08002698 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002698:	2001      	movs	r0, #1
 800269a:	4770      	bx	lr

0800269c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800269c:	f246 3098 	movw	r0, #25496	; 0x6398
 80026a0:	4770      	bx	lr

080026a2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80026a2:	f246 3398 	movw	r3, #25496	; 0x6398
 80026a6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80026aa:	3008      	adds	r0, #8
 80026ac:	4770      	bx	lr

080026ae <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80026ae:	f246 3398 	movw	r3, #25496	; 0x6398
 80026b2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80026b6:	3008      	adds	r0, #8
 80026b8:	4770      	bx	lr

080026ba <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80026ba:	2001      	movs	r0, #1
 80026bc:	4770      	bx	lr

080026be <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80026be:	2010      	movs	r0, #16
 80026c0:	4770      	bx	lr

080026c2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80026c2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80026c6:	3008      	adds	r0, #8
 80026c8:	4770      	bx	lr

080026ca <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80026ca:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80026ce:	3008      	adds	r0, #8
 80026d0:	4770      	bx	lr

080026d2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 80026d2:	4608      	mov	r0, r1
 80026d4:	f000 bce0 	b.w	8003098 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

080026d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80026d8:	b510      	push	{r4, lr}
 80026da:	4604      	mov	r4, r0
 80026dc:	4b02      	ldr	r3, [pc, #8]	; (80026e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80026de:	6003      	str	r3, [r0, #0]
 80026e0:	f012 ff7f 	bl	80155e2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80026e4:	4620      	mov	r0, r4
 80026e6:	bd10      	pop	{r4, pc}
 80026e8:	0802a008 	.word	0x0802a008

080026ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80026ec:	b510      	push	{r4, lr}
 80026ee:	4604      	mov	r4, r0
 80026f0:	f7ff fff2 	bl	80026d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80026f4:	4620      	mov	r0, r4
 80026f6:	2114      	movs	r1, #20
 80026f8:	f025 fcab 	bl	8028052 <_ZdlPvj>
 80026fc:	4620      	mov	r0, r4
 80026fe:	bd10      	pop	{r4, pc}

08002700 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002700:	b510      	push	{r4, lr}
 8002702:	4604      	mov	r4, r0
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002706:	6003      	str	r3, [r0, #0]
 8002708:	f012 ff6b 	bl	80155e2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800270c:	4620      	mov	r0, r4
 800270e:	bd10      	pop	{r4, pc}
 8002710:	08029fd4 	.word	0x08029fd4

08002714 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002714:	b510      	push	{r4, lr}
 8002716:	4604      	mov	r4, r0
 8002718:	f7ff fff2 	bl	8002700 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800271c:	4620      	mov	r0, r4
 800271e:	f246 31a0 	movw	r1, #25504	; 0x63a0
 8002722:	f025 fc96 	bl	8028052 <_ZdlPvj>
 8002726:	4620      	mov	r0, r4
 8002728:	bd10      	pop	{r4, pc}
	...

0800272c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800272c:	b510      	push	{r4, lr}
 800272e:	4604      	mov	r4, r0
 8002730:	4b02      	ldr	r3, [pc, #8]	; (800273c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002732:	6003      	str	r3, [r0, #0]
 8002734:	f012 ff55 	bl	80155e2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002738:	4620      	mov	r0, r4
 800273a:	bd10      	pop	{r4, pc}
 800273c:	08029fa0 	.word	0x08029fa0

08002740 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002740:	b510      	push	{r4, lr}
 8002742:	4604      	mov	r4, r0
 8002744:	f7ff fff2 	bl	800272c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002748:	4620      	mov	r0, r4
 800274a:	2118      	movs	r1, #24
 800274c:	f025 fc81 	bl	8028052 <_ZdlPvj>
 8002750:	4620      	mov	r0, r4
 8002752:	bd10      	pop	{r4, pc}

08002754 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002754:	b510      	push	{r4, lr}
 8002756:	4604      	mov	r4, r0
 8002758:	4b08      	ldr	r3, [pc, #32]	; (800277c <_ZN12FrontendHeapD1Ev+0x28>)
 800275a:	6003      	str	r3, [r0, #0]
 800275c:	f500 40c7 	add.w	r0, r0, #25472	; 0x6380
 8002760:	304c      	adds	r0, #76	; 0x4c
 8002762:	f7ff ffb9 	bl	80026d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002766:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800276a:	f7ff ffc9 	bl	8002700 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800276e:	f104 0014 	add.w	r0, r4, #20
 8002772:	f7ff ffdb 	bl	800272c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002776:	4620      	mov	r0, r4
 8002778:	bd10      	pop	{r4, pc}
 800277a:	bf00      	nop
 800277c:	0802a03c 	.word	0x0802a03c

08002780 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002780:	b508      	push	{r3, lr}
 8002782:	4802      	ldr	r0, [pc, #8]	; (800278c <__tcf_0+0xc>)
 8002784:	f7ff ffe6 	bl	8002754 <_ZN12FrontendHeapD1Ev>
 8002788:	bd08      	pop	{r3, pc}
 800278a:	bf00      	nop
 800278c:	201531c4 	.word	0x201531c4

08002790 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002790:	b510      	push	{r4, lr}
 8002792:	4604      	mov	r4, r0
 8002794:	f7ff ffde 	bl	8002754 <_ZN12FrontendHeapD1Ev>
 8002798:	4620      	mov	r0, r4
 800279a:	f246 5140 	movw	r1, #25920	; 0x6540
 800279e:	f025 fc58 	bl	8028052 <_ZdlPvj>
 80027a2:	4620      	mov	r0, r4
 80027a4:	bd10      	pop	{r4, pc}
	...

080027a8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 480);

void touchgfx_init()
{
 80027a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80027ac:	f000 fb14 	bl	8002dd8 <_ZN14BitmapDatabase11getInstanceEv>
 80027b0:	2400      	movs	r4, #0
 80027b2:	4605      	mov	r5, r0
 80027b4:	f000 fb14 	bl	8002de0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80027b8:	4623      	mov	r3, r4
 80027ba:	4601      	mov	r1, r0
 80027bc:	4622      	mov	r2, r4
 80027be:	4628      	mov	r0, r5
 80027c0:	9400      	str	r4, [sp, #0]
 80027c2:	f017 fd5f 	bl	801a284 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80027c6:	4b27      	ldr	r3, [pc, #156]	; (8002864 <touchgfx_init+0xbc>)
 80027c8:	4a27      	ldr	r2, [pc, #156]	; (8002868 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80027ca:	4620      	mov	r0, r4
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	f000 fe61 	bl	8003494 <_ZN8touchgfx5Texts11setLanguageEt>

    display.setFrameBufferFormat(Bitmap::RGB888);
 80027d2:	2101      	movs	r1, #1
 80027d4:	4825      	ldr	r0, [pc, #148]	; (800286c <touchgfx_init+0xc4>)
 80027d6:	f01e fcd1 	bl	802117c <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE>

    FontManager::setFontProvider(&fontProvider);
 80027da:	4825      	ldr	r0, [pc, #148]	; (8002870 <touchgfx_init+0xc8>)
 80027dc:	f017 fcba 	bl	801a154 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 80027e0:	4d24      	ldr	r5, [pc, #144]	; (8002874 <touchgfx_init+0xcc>)
 80027e2:	e8d5 3f8f 	ldab	r3, [r5]
 80027e6:	07db      	lsls	r3, r3, #31
 80027e8:	d436      	bmi.n	8002858 <touchgfx_init+0xb0>
 80027ea:	4628      	mov	r0, r5
 80027ec:	f025 fc33 	bl	8028056 <__cxa_guard_acquire>
 80027f0:	b390      	cbz	r0, 8002858 <touchgfx_init+0xb0>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80027f2:	4c21      	ldr	r4, [pc, #132]	; (8002878 <touchgfx_init+0xd0>)
 80027f4:	4f21      	ldr	r7, [pc, #132]	; (800287c <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80027f6:	4b22      	ldr	r3, [pc, #136]	; (8002880 <touchgfx_init+0xd8>)
 80027f8:	f107 0618 	add.w	r6, r7, #24
 80027fc:	f104 0014 	add.w	r0, r4, #20
 8002800:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002804:	6023      	str	r3, [r4, #0]
 8002806:	6060      	str	r0, [r4, #4]
 8002808:	f8c4 8008 	str.w	r8, [r4, #8]
 800280c:	60e7      	str	r7, [r4, #12]
 800280e:	6126      	str	r6, [r4, #16]
 8002810:	f012 fee8 	bl	80155e4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <touchgfx_init+0xdc>)
 8002816:	4640      	mov	r0, r8
 8002818:	6163      	str	r3, [r4, #20]
 800281a:	f012 fee3 	bl	80155e4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <touchgfx_init+0xe0>)
 8002820:	4638      	mov	r0, r7
 8002822:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002824:	f012 fede 	bl	80155e4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002828:	4a18      	ldr	r2, [pc, #96]	; (800288c <touchgfx_init+0xe4>)
 800282a:	f504 43c0 	add.w	r3, r4, #24576	; 0x6000
 800282e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8002832:	f503 7078 	add.w	r0, r3, #992	; 0x3e0
 8002836:	f000 fe9b 	bl	8003570 <_ZN5ModelC1Ev>
 800283a:	4622      	mov	r2, r4
 800283c:	f107 0114 	add.w	r1, r7, #20
 8002840:	4630      	mov	r0, r6
 8002842:	f000 fe8b 	bl	800355c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002846:	4630      	mov	r0, r6
 8002848:	f000 fc26 	bl	8003098 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800284c:	4810      	ldr	r0, [pc, #64]	; (8002890 <touchgfx_init+0xe8>)
 800284e:	f025 fc4b 	bl	80280e8 <atexit>
 8002852:	4628      	mov	r0, r5
 8002854:	f025 fc0b 	bl	802806e <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002858:	480e      	ldr	r0, [pc, #56]	; (8002894 <touchgfx_init+0xec>)
}
 800285a:	b002      	add	sp, #8
 800285c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002860:	f7ff bb44 	b.w	8001eec <_ZN11TouchGFXHAL10initializeEv>
 8002864:	201981b4 	.word	0x201981b4
 8002868:	2015a55c 	.word	0x2015a55c
 800286c:	2015a560 	.word	0x2015a560
 8002870:	20000008 	.word	0x20000008
 8002874:	201531c0 	.word	0x201531c0
 8002878:	201531c4 	.word	0x201531c4
 800287c:	20159590 	.word	0x20159590
 8002880:	0802a03c 	.word	0x0802a03c
 8002884:	08029fa0 	.word	0x08029fa0
 8002888:	08029fd4 	.word	0x08029fd4
 800288c:	0802a008 	.word	0x0802a008
 8002890:	08002781 	.word	0x08002781
 8002894:	2015a4a8 	.word	0x2015a4a8

08002898 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8002898:	b508      	push	{r3, lr}
    nema_init();
 800289a:	f018 f96d 	bl	801ab78 <nema_init>
    nema_vg_init(480, 480);
}
 800289e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nema_vg_init(480, 480);
 80028a2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80028a6:	4608      	mov	r0, r1
 80028a8:	f019 ba28 	b.w	801bcfc <nema_vg_init>

080028ac <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80028ac:	4801      	ldr	r0, [pc, #4]	; (80028b4 <touchgfx_taskEntry+0x8>)
 80028ae:	f013 b9a8 	b.w	8015c02 <_ZN8touchgfx3HAL9taskEntryEv>
 80028b2:	bf00      	nop
 80028b4:	2015a4a8 	.word	0x2015a4a8

080028b8 <_GLOBAL__sub_I_touchgfx_init>:
}
 80028b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
static STM32DMA dma;
 80028ba:	4911      	ldr	r1, [pc, #68]	; (8002900 <_GLOBAL__sub_I_touchgfx_init+0x48>)
{
public:

    STM32TouchController() {}
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80028be:	4d12      	ldr	r5, [pc, #72]	; (8002908 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 80028c0:	4608      	mov	r0, r1
 80028c2:	602b      	str	r3, [r5, #0]
 80028c4:	f7ff fda8 	bl	8002418 <_ZN8STM32DMAC1Ev>
static LCDGPU2D display;
 80028c8:	4a10      	ldr	r2, [pc, #64]	; (800290c <_GLOBAL__sub_I_touchgfx_init+0x54>)
        touchgfx::HALGPU2D(dma, display, tc, width, height)
 80028ca:	4c11      	ldr	r4, [pc, #68]	; (8002910 <_GLOBAL__sub_I_touchgfx_init+0x58>)
 80028cc:	4610      	mov	r0, r2
 80028ce:	f01e fc49 	bl	8021164 <_ZN8touchgfx8LCDGPU2DC1Ev>
 80028d2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80028d6:	4620      	mov	r0, r4
 80028d8:	e9cd 3300 	strd	r3, r3, [sp]
 80028dc:	4a0b      	ldr	r2, [pc, #44]	; (800290c <_GLOBAL__sub_I_touchgfx_init+0x54>)
 80028de:	462b      	mov	r3, r5
 80028e0:	4907      	ldr	r1, [pc, #28]	; (8002900 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80028e2:	f01a fbfd 	bl	801d0e0 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <_GLOBAL__sub_I_touchgfx_init+0x5c>)
 80028e8:	6023      	str	r3, [r4, #0]
          cc_in(0)
 80028ea:	2300      	movs	r3, #0
 80028ec:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80028f0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <_GLOBAL__sub_I_touchgfx_init+0x60>)
 80028f6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
 80028fa:	b003      	add	sp, #12
 80028fc:	bd30      	pop	{r4, r5, pc}
 80028fe:	bf00      	nop
 8002900:	20159708 	.word	0x20159708
 8002904:	08029860 	.word	0x08029860
 8002908:	20159704 	.word	0x20159704
 800290c:	2015a560 	.word	0x2015a560
 8002910:	2015a4a8 	.word	0x2015a4a8
 8002914:	080299ec 	.word	0x080299ec
 8002918:	08029784 	.word	0x08029784

0800291c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800291c:	4801      	ldr	r0, [pc, #4]	; (8002924 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800291e:	f7ff bd2f 	b.w	8002380 <_ZN8STM32DMAD1Ev>
 8002922:	bf00      	nop
 8002924:	20159708 	.word	0x20159708

08002928 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002928:	2290      	movs	r2, #144	; 0x90
 800292a:	4b04      	ldr	r3, [pc, #16]	; (800293c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x14>)
 800292c:	f883 2376 	strb.w	r2, [r3, #886]	; 0x376
 8002930:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
 8002934:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
    NVIC_SetPriority(GPU2D_IRQn, 9);
}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000e100 	.word	0xe000e100

08002940 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(GPU2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002940:	4a09      	ldr	r2, [pc, #36]	; (8002968 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002942:	490a      	ldr	r1, [pc, #40]	; (800296c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002944:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002946:	480a      	ldr	r0, [pc, #40]	; (8002970 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002948:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800294c:	3b01      	subs	r3, #1
 800294e:	b29b      	uxth	r3, r3
 8002950:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002952:	6911      	ldr	r1, [r2, #16]
 8002954:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002958:	3901      	subs	r1, #1
 800295a:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800295e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002966:	4770      	bx	lr
 8002968:	40016800 	.word	0x40016800
 800296c:	2015a570 	.word	0x2015a570
 8002970:	2015a56e 	.word	0x2015a56e

08002974 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HALGPU2D::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002974:	4b01      	ldr	r3, [pc, #4]	; (800297c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002976:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 800297a:	4770      	bx	lr
 800297c:	40016800 	.word	0x40016800

08002980 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002980:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002982:	4b02      	ldr	r3, [pc, #8]	; (800298c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 8002984:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002988:	625a      	str	r2, [r3, #36]	; 0x24
}
 800298a:	4770      	bx	lr
 800298c:	40016800 	.word	0x40016800

08002990 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002990:	b570      	push	{r4, r5, r6, lr}
 8002992:	4604      	mov	r4, r0
    HALGPU2D::initialize(8192);
 8002994:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002998:	f01a fc0a 	bl	801d1b0 <_ZN8touchgfx8HALGPU2D10initializeEi>
    registerEventListener(*(Application::getInstance()));
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80029a0:	f015 f83c 	bl	8017a1c <_ZN8touchgfx11Application11getInstanceEv>
 80029a4:	4601      	mov	r1, r0
 80029a6:	4620      	mov	r0, r4
 80029a8:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	4620      	mov	r0, r4
 80029ae:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80029b2:	4a03      	ldr	r2, [pc, #12]	; (80029c0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 80029b4:	46ac      	mov	ip, r5
}
 80029b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80029ba:	2300      	movs	r3, #0
 80029bc:	4901      	ldr	r1, [pc, #4]	; (80029c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x34>)
 80029be:	4760      	bx	ip
 80029c0:	200a8d2c 	.word	0x200a8d2c
 80029c4:	2000012c 	.word	0x2000012c

080029c8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HALGPU2D::beginFrame();
 80029c8:	f01a bb3a 	b.w	801d040 <_ZN8touchgfx8HALGPU2D10beginFrameEv>

080029cc <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 80029cc:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 80029d0:	b113      	cbz	r3, 80029d8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 80029d2:	2201      	movs	r2, #1
 80029d4:	4b01      	ldr	r3, [pc, #4]	; (80029dc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 80029d6:	701a      	strb	r2, [r3, #0]
    HALGPU2D::endFrame();
 80029d8:	f01a bb44 	b.w	801d064 <_ZN8touchgfx8HALGPU2D8endFrameEv>
 80029dc:	2015a56c 	.word	0x2015a56c

080029e0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HALGPU2D::flushFrameBuffer(rect);
 80029e0:	f013 b8ac 	b.w	8015b3c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080029e4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HALGPU2D::blockCopy(dest, src, numBytes);
 80029e4:	f013 ba15 	b.w	8015e12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080029e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80029e8:	b570      	push	{r4, r5, r6, lr}
 80029ea:	460d      	mov	r5, r1
 80029ec:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80029ee:	b935      	cbnz	r5, 80029fe <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 80029f0:	f240 21d2 	movw	r1, #722	; 0x2d2
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80029f6:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80029f8:	4809      	ldr	r0, [pc, #36]	; (8002a20 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80029fa:	f025 fb57 	bl	80280ac <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80029fe:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
    }
 8002a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8002a06:	3a00      	subs	r2, #0
 8002a08:	bf18      	it	ne
 8002a0a:	2201      	movne	r2, #1
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8002a0e:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8002a10:	6803      	ldr	r3, [r0, #0]
 8002a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a16:	4718      	bx	r3
 8002a18:	0802995b 	.word	0x0802995b
 8002a1c:	08029993 	.word	0x08029993
 8002a20:	08029916 	.word	0x08029916
 8002a24:	20198156 	.word	0x20198156

08002a28 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x30>)
 8002a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 8002a32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	2280      	movs	r2, #128	; 0x80
 8002a3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __ASM volatile ("dsb 0xF":::"memory");
 8002a40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	2210      	movs	r2, #16
 8002a4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __ASM volatile ("dsb 0xF":::"memory");
 8002a4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a52:	f3bf 8f6f 	isb	sy
}
 8002a56:	4770      	bx	lr
 8002a58:	e000e100 	.word	0xe000e100

08002a5c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x14>)
 8002a62:	60da      	str	r2, [r3, #12]
 8002a64:	2280      	movs	r2, #128	; 0x80
 8002a66:	611a      	str	r2, [r3, #16]
 8002a68:	2210      	movs	r2, #16
 8002a6a:	611a      	str	r2, [r3, #16]
}
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000e100 	.word	0xe000e100

08002a74 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8002a74:	b510      	push	{r4, lr}
        return instance;
 8002a76:	4c14      	ldr	r4, [pc, #80]	; (8002ac8 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	b323      	cbz	r3, 8002ac6 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <HAL_LTDC_LineEventCallback+0x58>)
 8002a7e:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <HAL_LTDC_LineEventCallback+0x5c>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	8811      	ldrh	r1, [r2, #0]
 8002a84:	428b      	cmp	r3, r1
 8002a86:	d113      	bne.n	8002ab0 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_LTDC_LineEventCallback+0x60>)
 8002a8a:	8819      	ldrh	r1, [r3, #0]
 8002a8c:	f008 fd26 	bl	800b4dc <HAL_LTDC_ProgramLineEvent>
 8002a90:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8002a92:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8002a96:	3301      	adds	r3, #1
 8002a98:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8002a9c:	f7ff fc28 	bl	80022f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8002aa0:	6820      	ldr	r0, [r4, #0]
 8002aa2:	f013 fdfb 	bl	801669c <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8002aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7ff b9aa 	b.w	8001e04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002ab0:	f008 fd14 	bl	800b4dc <HAL_LTDC_ProgramLineEvent>
        return instance;
 8002ab4:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8002ab6:	6803      	ldr	r3, [r0, #0]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	4798      	blx	r3
    }
 8002abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7ff b9bb 	b.w	8001e3c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 8002ac6:	bd10      	pop	{r4, pc}
 8002ac8:	20198158 	.word	0x20198158
 8002acc:	40016800 	.word	0x40016800
 8002ad0:	2015a570 	.word	0x2015a570
 8002ad4:	2015a56e 	.word	0x2015a56e

08002ad8 <HAL_GPU2D_CommandListCpltCallback>:
#if (USE_HAL_GPU2D_REGISTER_CALLBACKS == 1)
static void GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hgpu2d);

    last_cl_id = CmdListID;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <HAL_GPU2D_CommandListCpltCallback+0x20>)
 8002ae6:	6013      	str	r3, [r2, #0]

    /* Return a token back to a semaphore */
    tx_semaphore_put(&nema_irq_sem);
 8002ae8:	4804      	ldr	r0, [pc, #16]	; (8002afc <HAL_GPU2D_CommandListCpltCallback+0x24>)
 8002aea:	f012 fc47 	bl	801537c <_txe_semaphore_put>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	2000000c 	.word	0x2000000c
 8002afc:	20196490 	.word	0x20196490

08002b00 <nema_sys_init>:

int32_t nema_sys_init(void)
{
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af02      	add	r7, sp, #8
    int error_code = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
    /* Register Command List Comlete Callback */
    HAL_GPU2D_RegisterCommandListCpltCallback(&hgpu2d, GPU2D_CommandListCpltCallback);
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Create IRQ semaphore */
    error_code = tx_semaphore_create(&nema_irq_sem, "nema sema irq", 0);
 8002b0a:	231c      	movs	r3, #28
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4924      	ldr	r1, [pc, #144]	; (8002ba0 <nema_sys_init+0xa0>)
 8002b10:	4824      	ldr	r0, [pc, #144]	; (8002ba4 <nema_sys_init+0xa4>)
 8002b12:	f012 fb5b 	bl	80151cc <_txe_semaphore_create>
 8002b16:	4603      	mov	r3, r0
 8002b18:	617b      	str	r3, [r7, #20]
    assert(error_code == TX_SUCCESS);
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <nema_sys_init+0x2c>
 8002b20:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <nema_sys_init+0xa8>)
 8002b22:	4a22      	ldr	r2, [pc, #136]	; (8002bac <nema_sys_init+0xac>)
 8002b24:	2150      	movs	r1, #80	; 0x50
 8002b26:	4822      	ldr	r0, [pc, #136]	; (8002bb0 <nema_sys_init+0xb0>)
 8002b28:	f025 fac0 	bl	80280ac <__assert_func>

    /* Initialise Mem Space */
    error_code = tsi_malloc_init_pool(0, (void*)nemagfx_pool_mem, (uintptr_t)nemagfx_pool_mem, NEMAGFX_BYTE_POOL_SIZE, 1);
 8002b2c:	4a21      	ldr	r2, [pc, #132]	; (8002bb4 <nema_sys_init+0xb4>)
 8002b2e:	2301      	movs	r3, #1
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <nema_sys_init+0xb8>)
 8002b34:	491f      	ldr	r1, [pc, #124]	; (8002bb4 <nema_sys_init+0xb4>)
 8002b36:	2000      	movs	r0, #0
 8002b38:	f019 fa66 	bl	801c008 <tsi_malloc_init_pool>
 8002b3c:	6178      	str	r0, [r7, #20]
    assert(error_code == 0);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <nema_sys_init+0x50>
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <nema_sys_init+0xbc>)
 8002b46:	4a19      	ldr	r2, [pc, #100]	; (8002bac <nema_sys_init+0xac>)
 8002b48:	2154      	movs	r1, #84	; 0x54
 8002b4a:	4819      	ldr	r0, [pc, #100]	; (8002bb0 <nema_sys_init+0xb0>)
 8002b4c:	f025 faae 	bl	80280ac <__assert_func>

    /* Allocate ring_buffer memory */
    ring_buffer_str.bo = nema_buffer_create(RING_SIZE);
 8002b50:	4c1b      	ldr	r4, [pc, #108]	; (8002bc0 <nema_sys_init+0xc0>)
 8002b52:	463b      	mov	r3, r7
 8002b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 f891 	bl	8002c80 <nema_buffer_create>
 8002b5e:	463b      	mov	r3, r7
 8002b60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    assert(ring_buffer_str.bo.base_virt);
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <nema_sys_init+0xc0>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d105      	bne.n	8002b7a <nema_sys_init+0x7a>
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <nema_sys_init+0xc4>)
 8002b70:	4a0e      	ldr	r2, [pc, #56]	; (8002bac <nema_sys_init+0xac>)
 8002b72:	2158      	movs	r1, #88	; 0x58
 8002b74:	480e      	ldr	r0, [pc, #56]	; (8002bb0 <nema_sys_init+0xb0>)
 8002b76:	f025 fa99 	bl	80280ac <__assert_func>

    /* Initialize Ring Buffer */
    error_code = nema_rb_init(&ring_buffer_str, 1);
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4810      	ldr	r0, [pc, #64]	; (8002bc0 <nema_sys_init+0xc0>)
 8002b7e:	f017 fdbd 	bl	801a6fc <nema_rb_init>
 8002b82:	6178      	str	r0, [r7, #20]
    if (error_code < 0)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	da01      	bge.n	8002b8e <nema_sys_init+0x8e>
    {
        return error_code;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	e003      	b.n	8002b96 <nema_sys_init+0x96>
    }

    /* Reset last_cl_id counter */
    last_cl_id = 0;
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <nema_sys_init+0xc8>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

    return error_code;
 8002b94:	697b      	ldr	r3, [r7, #20]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	0802962c 	.word	0x0802962c
 8002ba4:	20196490 	.word	0x20196490
 8002ba8:	0802963c 	.word	0x0802963c
 8002bac:	0802a048 	.word	0x0802a048
 8002bb0:	08029658 	.word	0x08029658
 8002bb4:	2015a578 	.word	0x2015a578
 8002bb8:	0003bf00 	.word	0x0003bf00
 8002bbc:	080296a0 	.word	0x080296a0
 8002bc0:	20196478 	.word	0x20196478
 8002bc4:	080296b0 	.word	0x080296b0
 8002bc8:	2000000c 	.word	0x2000000c

08002bcc <nema_reg_read>:

uint32_t nema_reg_read(uint32_t reg)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
    return HAL_GPU2D_ReadRegister(&hgpu2d, reg);
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4804      	ldr	r0, [pc, #16]	; (8002be8 <nema_reg_read+0x1c>)
 8002bd8:	f007 fa15 	bl	800a006 <HAL_GPU2D_ReadRegister>
 8002bdc:	4603      	mov	r3, r0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20152eb4 	.word	0x20152eb4

08002bec <nema_reg_write>:

void nema_reg_write(uint32_t reg, uint32_t value)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
    HAL_GPU2D_WriteRegister(&hgpu2d, reg, value);
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4803      	ldr	r0, [pc, #12]	; (8002c08 <nema_reg_write+0x1c>)
 8002bfc:	f007 fa15 	bl	800a02a <HAL_GPU2D_WriteRegister>
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20152eb4 	.word	0x20152eb4

08002c0c <nema_wait_irq>:

int nema_wait_irq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
    /* Wait indefinitely for a free semaphore */
    tx_semaphore_get(&nema_irq_sem, TX_WAIT_FOREVER);
 8002c10:	f04f 31ff 	mov.w	r1, #4294967295
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <nema_wait_irq+0x14>)
 8002c16:	f012 fb6f 	bl	80152f8 <_txe_semaphore_get>

    return 0;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20196490 	.word	0x20196490

08002c24 <nema_wait_irq_cl>:

int nema_wait_irq_cl(int cl_id)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
    while (last_cl_id < cl_id)
 8002c2c:	e001      	b.n	8002c32 <nema_wait_irq_cl+0xe>
    {
        (void)nema_wait_irq();
 8002c2e:	f7ff ffed 	bl	8002c0c <nema_wait_irq>
    while (last_cl_id < cl_id)
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <nema_wait_irq_cl+0x24>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	dcf8      	bgt.n	8002c2e <nema_wait_irq_cl+0xa>
    }

    return 0;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	2000000c 	.word	0x2000000c

08002c4c <nema_host_free>:

    return 0;
}

void nema_host_free(void *ptr)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
    tsi_free(ptr);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f019 fa3f 	bl	801c0d8 <tsi_free>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <nema_host_malloc>:

void *nema_host_malloc(unsigned size)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
    return tsi_malloc(size);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f019 f9f2 	bl	801c058 <tsi_malloc_pool>
 8002c74:	4603      	mov	r3, r0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <nema_buffer_create>:

nema_buffer_t nema_buffer_create(int size)
{
 8002c80:	b590      	push	{r4, r7, lr}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
    nema_buffer_t bo;
    memset(&bo, 0, sizeof(bo));
 8002c8a:	f107 0308 	add.w	r3, r7, #8
 8002c8e:	2210      	movs	r2, #16
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f025 fa95 	bl	80281c2 <memset>
    bo.base_virt = tsi_malloc(size);
 8002c98:	6839      	ldr	r1, [r7, #0]
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f019 f9dc 	bl	801c058 <tsi_malloc_pool>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	613b      	str	r3, [r7, #16]
    bo.base_phys = (uint32_t)bo.base_virt;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	617b      	str	r3, [r7, #20]
    bo.size      = size;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	60bb      	str	r3, [r7, #8]
    assert(bo.base_virt != 0 && "Unable to allocate memory in nema_buffer_create");
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <nema_buffer_create+0x3e>
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <nema_buffer_create+0x54>)
 8002cb4:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <nema_buffer_create+0x58>)
 8002cb6:	219e      	movs	r1, #158	; 0x9e
 8002cb8:	4808      	ldr	r0, [pc, #32]	; (8002cdc <nema_buffer_create+0x5c>)
 8002cba:	f025 f9f7 	bl	80280ac <__assert_func>

    return bo;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	461c      	mov	r4, r3
 8002cc2:	f107 0308 	add.w	r3, r7, #8
 8002cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd90      	pop	{r4, r7, pc}
 8002cd4:	080296d0 	.word	0x080296d0
 8002cd8:	0802a058 	.word	0x0802a058
 8002cdc:	08029658 	.word	0x08029658

08002ce0 <nema_buffer_create_pool>:

nema_buffer_t nema_buffer_create_pool(int pool, int size)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(pool);

    return nema_buffer_create(size);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ffc5 	bl	8002c80 <nema_buffer_create>
}
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <nema_buffer_map>:

void *nema_buffer_map(nema_buffer_t *bo)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
    return bo->base_virt;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <nema_buffer_destroy>:
    /* Prevent unused argument(s) compilation warning */
    UNUSED(bo);
}

void nema_buffer_destroy(nema_buffer_t *bo)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
    if (bo->fd == -1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d26:	d012      	beq.n	8002d4e <nema_buffer_destroy+0x38>
    {
        return; /* Buffer weren't allocated! */
    }

    tsi_free(bo->base_virt);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f019 f9d3 	bl	801c0d8 <tsi_free>

    bo->base_virt = (void *)0;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
    bo->base_phys = 0;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
    bo->size      = 0;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
    bo->fd        = -1; /* Buffer not allocated */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4a:	605a      	str	r2, [r3, #4]
 8002d4c:	e000      	b.n	8002d50 <nema_buffer_destroy+0x3a>
        return; /* Buffer weren't allocated! */
 8002d4e:	bf00      	nop
}
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <nema_buffer_flush>:
{
    return bo->base_phys;
}

void nema_buffer_flush(nema_buffer_t * bo)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(bo);
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <nema_mutex_lock>:

int nema_mutex_lock(int mutex_id)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
    int retval = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
/* USER CODE BEGIN nema_mutex_lock */
    /* Prevent unused argument(s) compilation warning */
    UNUSED(mutex_id);
/* USER CODE END nema_mutex_lock */

    return retval;
 8002d76:	68fb      	ldr	r3, [r7, #12]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <nema_mutex_unlock>:

int nema_mutex_unlock(int mutex_id)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
    int retval = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
/* USER CODE BEGIN nema_mutex_unlock */
    /* Prevent unused argument(s) compilation warning */
    UNUSED(mutex_id);
/* USER CODE END nema_mutex_unlock */

    return retval;
 8002d90:	68fb      	ldr	r3, [r7, #12]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002d9e:	4770      	bx	lr

08002da0 <_ZN23ApplicationFontProviderD0Ev>:
 8002da0:	b510      	push	{r4, lr}
 8002da2:	4604      	mov	r4, r0
 8002da4:	2104      	movs	r1, #4
 8002da6:	f025 f954 	bl	8028052 <_ZdlPvj>
 8002daa:	4620      	mov	r0, r4
 8002dac:	bd10      	pop	{r4, pc}

08002dae <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8002dae:	2901      	cmp	r1, #1
{
 8002db0:	b508      	push	{r3, lr}
    switch (typography)
 8002db2:	d006      	beq.n	8002dc2 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8002db4:	2902      	cmp	r1, #2
 8002db6:	d008      	beq.n	8002dca <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8002db8:	b959      	cbnz	r1, 8002dd2 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002dba:	f000 fba9 	bl	8003510 <_ZN17TypedTextDatabase8getFontsEv>
 8002dbe:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8002dc0:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002dc2:	f000 fba5 	bl	8003510 <_ZN17TypedTextDatabase8getFontsEv>
 8002dc6:	6840      	ldr	r0, [r0, #4]
 8002dc8:	e7fa      	b.n	8002dc0 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002dca:	f000 fba1 	bl	8003510 <_ZN17TypedTextDatabase8getFontsEv>
 8002dce:	6880      	ldr	r0, [r0, #8]
 8002dd0:	e7f6      	b.n	8002dc0 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	e7f4      	b.n	8002dc0 <_ZN23ApplicationFontProvider7getFontEt+0x12>
	...

08002dd8 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002dd8:	4800      	ldr	r0, [pc, #0]	; (8002ddc <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002dda:	4770      	bx	lr
 8002ddc:	0802a080 	.word	0x0802a080

08002de0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002de0:	2001      	movs	r0, #1
 8002de2:	4770      	bx	lr

08002de4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002de4:	b513      	push	{r0, r1, r4, lr}
 8002de6:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8002de8:	b151      	cbz	r1, 8002e00 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002dea:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 8002dec:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002dee:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002df2:	aa01      	add	r2, sp, #4
 8002df4:	689c      	ldr	r4, [r3, #8]
 8002df6:	f10d 0303 	add.w	r3, sp, #3
 8002dfa:	47a0      	blx	r4
        return glyph;
    }
 8002dfc:	b002      	add	sp, #8
 8002dfe:	bd10      	pop	{r4, pc}
            return 0;
 8002e00:	4608      	mov	r0, r1
 8002e02:	e7fb      	b.n	8002dfc <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002e04 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002e04:	89c0      	ldrh	r0, [r0, #14]
 8002e06:	4770      	bx	lr

08002e08 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002e08:	8a00      	ldrh	r0, [r0, #16]
 8002e0a:	4770      	bx	lr

08002e0c <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8002e0c:	88c0      	ldrh	r0, [r0, #6]
 8002e0e:	4770      	bx	lr

08002e10 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8002e10:	8880      	ldrh	r0, [r0, #4]
 8002e12:	4770      	bx	lr

08002e14 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002e14:	7a80      	ldrb	r0, [r0, #10]
    }
 8002e16:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002e1a:	4770      	bx	lr

08002e1c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002e1c:	7a80      	ldrb	r0, [r0, #10]
    }
 8002e1e:	09c0      	lsrs	r0, r0, #7
 8002e20:	4770      	bx	lr

08002e22 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8002e22:	4770      	bx	lr

08002e24 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8002e24:	4770      	bx	lr

08002e26 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8002e26:	f500 7398 	add.w	r3, r0, #304	; 0x130
 8002e2a:	6808      	ldr	r0, [r1, #0]
 8002e2c:	6849      	ldr	r1, [r1, #4]
 8002e2e:	c303      	stmia	r3!, {r0, r1}
    }
 8002e30:	4770      	bx	lr

08002e32 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002e32:	4770      	bx	lr

08002e34 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002e34:	4770      	bx	lr

08002e36 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002e36:	6041      	str	r1, [r0, #4]
    }
 8002e38:	4770      	bx	lr

08002e3a <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002e3a:	4770      	bx	lr

08002e3c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8002e3e:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8002e42:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8002e46:	2300      	movs	r3, #0
 8002e48:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002e4c:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8002e50:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	08002efd 	.word	0x08002efd

08002e5c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	7203      	strb	r3, [r0, #8]
    }
 8002e60:	4770      	bx	lr

08002e62 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8002e62:	4770      	bx	lr

08002e64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8002e64:	4770      	bx	lr

08002e66 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8002e66:	4603      	mov	r3, r0
 8002e68:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8002e6a:	6841      	ldr	r1, [r0, #4]
 8002e6c:	68c2      	ldr	r2, [r0, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	1054      	asrs	r4, r2, #1
 8002e72:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8002e76:	07d2      	lsls	r2, r2, #31
 8002e78:	bf48      	it	mi
 8002e7a:	590a      	ldrmi	r2, [r1, r4]
    }
 8002e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8002e80:	bf48      	it	mi
 8002e82:	58d3      	ldrmi	r3, [r2, r3]
 8002e84:	4718      	bx	r3

08002e86 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8002e86:	6843      	ldr	r3, [r0, #4]
 8002e88:	b12b      	cbz	r3, 8002e96 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8002e8a:	6883      	ldr	r3, [r0, #8]
 8002e8c:	b92b      	cbnz	r3, 8002e9a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002e8e:	68c0      	ldr	r0, [r0, #12]
 8002e90:	f000 0001 	and.w	r0, r0, #1
 8002e94:	4770      	bx	lr
 8002e96:	4618      	mov	r0, r3
 8002e98:	4770      	bx	lr
 8002e9a:	2001      	movs	r0, #1
    }
 8002e9c:	4770      	bx	lr

08002e9e <_ZN8touchgfx12NoTransitionD0Ev>:
 8002e9e:	b510      	push	{r4, lr}
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	210c      	movs	r1, #12
 8002ea4:	f025 f8d5 	bl	8028052 <_ZdlPvj>
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	bd10      	pop	{r4, pc}

08002eac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002eac:	b510      	push	{r4, lr}
 8002eae:	4604      	mov	r4, r0
 8002eb0:	2110      	movs	r1, #16
 8002eb2:	f025 f8ce 	bl	8028052 <_ZdlPvj>
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	bd10      	pop	{r4, pc}

08002eba <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8002eba:	b510      	push	{r4, lr}
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002ec2:	f025 f8c6 	bl	8028052 <_ZdlPvj>
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	bd10      	pop	{r4, pc}

08002eca <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8002eca:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8002ecc:	f014 fda6 	bl	8017a1c <_ZN8touchgfx11Application11getInstanceEv>
    }
 8002ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8002ed4:	f015 b9ea 	b.w	80182ac <_ZN8touchgfx11Application10invalidateEv>

08002ed8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002ed8:	b510      	push	{r4, lr}
 8002eda:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002edc:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8002ee0:	b158      	cbz	r0, 8002efa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002ee2:	6803      	ldr	r3, [r0, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	4798      	blx	r3
 8002ee8:	b138      	cbz	r0, 8002efa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8002eea:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8002eee:	6803      	ldr	r3, [r0, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 8002efa:	bd10      	pop	{r4, pc}

08002efc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8002efc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002f00:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8002f04:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002f06:	68a8      	ldr	r0, [r5, #8]
 8002f08:	6803      	ldr	r3, [r0, #0]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4798      	blx	r3
 8002f0e:	f246 3397 	movw	r3, #25495	; 0x6397
 8002f12:	4298      	cmp	r0, r3
 8002f14:	d805      	bhi.n	8002f22 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 8002f16:	21a3      	movs	r1, #163	; 0xa3
 8002f18:	4b45      	ldr	r3, [pc, #276]	; (8003030 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8002f1a:	4a46      	ldr	r2, [pc, #280]	; (8003034 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002f1c:	4846      	ldr	r0, [pc, #280]	; (8003038 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8002f1e:	f025 f8c5 	bl	80280ac <__assert_func>
 8002f22:	6868      	ldr	r0, [r5, #4]
 8002f24:	6803      	ldr	r3, [r0, #0]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4798      	blx	r3
 8002f2a:	280f      	cmp	r0, #15
 8002f2c:	d803      	bhi.n	8002f36 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 8002f2e:	21a4      	movs	r1, #164	; 0xa4
 8002f30:	4b42      	ldr	r3, [pc, #264]	; (800303c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8002f32:	4a40      	ldr	r2, [pc, #256]	; (8003034 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002f34:	e7f2      	b.n	8002f1c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002f36:	68e8      	ldr	r0, [r5, #12]
 8002f38:	6803      	ldr	r3, [r0, #0]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	4798      	blx	r3
 8002f3e:	280b      	cmp	r0, #11
 8002f40:	d803      	bhi.n	8002f4a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 8002f42:	21a5      	movs	r1, #165	; 0xa5
 8002f44:	4b3e      	ldr	r3, [pc, #248]	; (8003040 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 8002f46:	4a3b      	ldr	r2, [pc, #236]	; (8003034 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002f48:	e7e8      	b.n	8002f1c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 8002f4a:	f014 fd67 	bl	8017a1c <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002f4e:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8003048 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8002f52:	3004      	adds	r0, #4
 8002f54:	f014 fd87 	bl	8017a66 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002f58:	f8d9 0000 	ldr.w	r0, [r9]
 8002f5c:	b110      	cbz	r0, 8002f64 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8002f5e:	6803      	ldr	r3, [r0, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	4798      	blx	r3
    if (*currentTrans)
 8002f64:	f8d9 0000 	ldr.w	r0, [r9]
 8002f68:	b110      	cbz	r0, 8002f70 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8002f6a:	6803      	ldr	r3, [r0, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4798      	blx	r3
    if (*currentScreen)
 8002f70:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800304c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x150>
 8002f74:	f8d8 0000 	ldr.w	r0, [r8]
 8002f78:	b110      	cbz	r0, 8002f80 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8002f7a:	6803      	ldr	r3, [r0, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	4798      	blx	r3
    if (*currentPresenter)
 8002f80:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8002f84:	b110      	cbz	r0, 8002f8c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8002f86:	6803      	ldr	r3, [r0, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4798      	blx	r3
    if (*currentScreen)
 8002f8c:	f8d8 0000 	ldr.w	r0, [r8]
 8002f90:	b110      	cbz	r0, 8002f98 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8002f92:	6803      	ldr	r3, [r0, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4798      	blx	r3
    if (*currentPresenter)
 8002f98:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8002f9c:	b110      	cbz	r0, 8002fa4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8002f9e:	6803      	ldr	r3, [r0, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002fa4:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
 8002faa:	f04f 0b00 	mov.w	fp, #0
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	4798      	blx	r3
 8002fb2:	4b24      	ldr	r3, [pc, #144]	; (8003044 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>)
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	6003      	str	r3, [r0, #0]
 8002fb8:	f8c0 b004 	str.w	fp, [r0, #4]
 8002fbc:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002fc0:	68a8      	ldr	r0, [r5, #8]
 8002fc2:	4659      	mov	r1, fp
 8002fc4:	6803      	ldr	r3, [r0, #0]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	4798      	blx	r3
 8002fca:	4606      	mov	r6, r0
 8002fcc:	f000 fbf0 	bl	80037b0 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002fd0:	6868      	ldr	r0, [r5, #4]
 8002fd2:	4659      	mov	r1, fp
 8002fd4:	6803      	ldr	r3, [r0, #0]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	4798      	blx	r3
 8002fda:	4605      	mov	r5, r0
 8002fdc:	4631      	mov	r1, r6
 8002fde:	f000 fad9 	bl	8003594 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8002fe2:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8002fe6:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 8002fea:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8002fee:	b1e5      	cbz	r5, 800302a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
 8002ff0:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002ff2:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8002ff6:	6833      	ldr	r3, [r6, #0]
 8002ff8:	4630      	mov	r0, r6
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002ffa:	f8c5 a008 	str.w	sl, [r5, #8]
 8002ffe:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003000:	63f5      	str	r5, [r6, #60]	; 0x3c
 8003002:	4798      	blx	r3
    newPresenter->activate();
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	4628      	mov	r0, r5
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800300c:	4621      	mov	r1, r4
 800300e:	4630      	mov	r0, r6
 8003010:	f016 f99c 	bl	801934c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	4620      	mov	r0, r4
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	4798      	blx	r3
    newTransition->invalidate();
 800301c:	4620      	mov	r0, r4
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
}
 8003022:	b001      	add	sp, #4
 8003024:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003028:	4718      	bx	r3
    model->bind(newPresenter);
 800302a:	462b      	mov	r3, r5
 800302c:	e7e1      	b.n	8002ff2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf6>
 800302e:	bf00      	nop
 8003030:	0802a094 	.word	0x0802a094
 8003034:	0802a122 	.word	0x0802a122
 8003038:	0802a226 	.word	0x0802a226
 800303c:	0802a26d 	.word	0x0802a26d
 8003040:	0802a310 	.word	0x0802a310
 8003044:	0802a420 	.word	0x0802a420
 8003048:	20198198 	.word	0x20198198
 800304c:	20198194 	.word	0x20198194

08003050 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	4604      	mov	r4, r0
 8003054:	460d      	mov	r5, r1
 8003056:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 8003058:	f014 fda2 	bl	8017ba0 <_ZN8touchgfx11ApplicationC1Ev>
 800305c:	2100      	movs	r1, #0
        instance = this;
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x38>)
        : pobject(0), pmemfun(0)
 8003060:	e9c4 1153 	strd	r1, r1, [r4, #332]	; 0x14c
 8003064:	601c      	str	r4, [r3, #0]
      model(m)
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x3c>)
          pendingScreenTransitionCallback(0)
 8003068:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
 800306c:	6023      	str	r3, [r4, #0]
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x40>)
 8003070:	e9c4 6555 	strd	r6, r5, [r4, #340]	; 0x154
 8003074:	e9c4 3151 	strd	r3, r1, [r4, #324]	; 0x144
        return instance;
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x44>)
 800307a:	6818      	ldr	r0, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800307c:	6803      	ldr	r3, [r0, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4798      	blx	r3
}
 8003082:	4620      	mov	r0, r4
 8003084:	bd70      	pop	{r4, r5, r6, pc}
 8003086:	bf00      	nop
 8003088:	201981a4 	.word	0x201981a4
 800308c:	0802a3d4 	.word	0x0802a3d4
 8003090:	0802a3bc 	.word	0x0802a3bc
 8003094:	20198158 	.word	0x20198158

08003098 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 800309a:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 800309e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 80030a2:	2300      	movs	r3, #0
 80030a4:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80030a8:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 80030ac:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	08002efd 	.word	0x08002efd

080030b8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80030b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80030ba:	4770      	bx	lr

080030bc <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80030bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80030be:	4770      	bx	lr

080030c0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80030c0:	4770      	bx	lr

080030c2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80030c2:	888b      	ldrh	r3, [r1, #4]
 80030c4:	69c0      	ldr	r0, [r0, #28]
 80030c6:	0adb      	lsrs	r3, r3, #11
 80030c8:	680a      	ldr	r2, [r1, #0]
 80030ca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80030ce:	4410      	add	r0, r2
 80030d0:	4770      	bx	lr

080030d2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80030d2:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 80030d4:	b1c2      	cbz	r2, 8003108 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80030d6:	7b13      	ldrb	r3, [r2, #12]
 80030d8:	b1b3      	cbz	r3, 8003108 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80030da:	7b54      	ldrb	r4, [r2, #13]
 80030dc:	7ad2      	ldrb	r2, [r2, #11]
 80030de:	0224      	lsls	r4, r4, #8
 80030e0:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80030e4:	4314      	orrs	r4, r2
 80030e6:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80030e8:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80030ea:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 80030ee:	8813      	ldrh	r3, [r2, #0]
 80030f0:	428b      	cmp	r3, r1
 80030f2:	d102      	bne.n	80030fa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80030f4:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 80030f8:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80030fa:	d805      	bhi.n	8003108 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80030fc:	3801      	subs	r0, #1
 80030fe:	b280      	uxth	r0, r0
 8003100:	3204      	adds	r2, #4
 8003102:	2800      	cmp	r0, #0
 8003104:	d1f3      	bne.n	80030ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003106:	e7f7      	b.n	80030f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003108:	2000      	movs	r0, #0
 800310a:	e7f5      	b.n	80030f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

0800310c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800310c:	b510      	push	{r4, lr}
 800310e:	4604      	mov	r4, r0
 8003110:	212c      	movs	r1, #44	; 0x2c
 8003112:	f024 ff9e 	bl	8028052 <_ZdlPvj>
 8003116:	4620      	mov	r0, r4
 8003118:	bd10      	pop	{r4, pc}
	...

0800311c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800311c:	b530      	push	{r4, r5, lr}
 800311e:	4604      	mov	r4, r0
 8003120:	b08b      	sub	sp, #44	; 0x2c
      arabicTable(formsTable)
 8003122:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 8003126:	9508      	str	r5, [sp, #32]
 8003128:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 800312c:	9507      	str	r5, [sp, #28]
 800312e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8003132:	9506      	str	r5, [sp, #24]
 8003134:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8003138:	9505      	str	r5, [sp, #20]
 800313a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800313e:	9504      	str	r5, [sp, #16]
 8003140:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8003144:	9503      	str	r5, [sp, #12]
 8003146:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 800314a:	9502      	str	r5, [sp, #8]
 800314c:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003150:	9501      	str	r5, [sp, #4]
 8003152:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8003156:	9500      	str	r5, [sp, #0]
 8003158:	f015 fd52 	bl	8018c00 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
}
 800315c:	4620      	mov	r0, r4
      arabicTable(formsTable)
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 8003160:	6023      	str	r3, [r4, #0]
 8003162:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003164:	61e3      	str	r3, [r4, #28]
 8003166:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003168:	6223      	str	r3, [r4, #32]
 800316a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800316c:	6263      	str	r3, [r4, #36]	; 0x24
 800316e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003170:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003172:	b00b      	add	sp, #44	; 0x2c
 8003174:	bd30      	pop	{r4, r5, pc}
 8003176:	bf00      	nop
 8003178:	0802a444 	.word	0x0802a444

0800317c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 800317c:	2000      	movs	r0, #0
 800317e:	4770      	bx	lr

08003180 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003180:	8081      	strh	r1, [r0, #4]
    }
 8003182:	4770      	bx	lr

08003184 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003184:	80c1      	strh	r1, [r0, #6]
    }
 8003186:	4770      	bx	lr

08003188 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003188:	8101      	strh	r1, [r0, #8]
    }
 800318a:	4770      	bx	lr

0800318c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 800318c:	8141      	strh	r1, [r0, #10]
    }
 800318e:	4770      	bx	lr

08003190 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003190:	4770      	bx	lr

08003192 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8003192:	4770      	bx	lr

08003194 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003194:	4770      	bx	lr

08003196 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003196:	4770      	bx	lr

08003198 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003198:	4770      	bx	lr

0800319a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800319a:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 800319c:	88c4      	ldrh	r4, [r0, #6]
 800319e:	6803      	ldr	r3, [r0, #0]
 80031a0:	1b12      	subs	r2, r2, r4
 80031a2:	8884      	ldrh	r4, [r0, #4]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a6:	1b09      	subs	r1, r1, r4
 80031a8:	b212      	sxth	r2, r2
    }
 80031aa:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80031ae:	b209      	sxth	r1, r1
 80031b0:	4718      	bx	r3

080031b2 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80031b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031b6:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80031b8:	f04f 33ff 	mov.w	r3, #4294967295
 80031bc:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80031be:	6813      	ldr	r3, [r2, #0]
 80031c0:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80031c2:	6010      	str	r0, [r2, #0]
    }
 80031c4:	4770      	bx	lr

080031c6 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80031c6:	4770      	bx	lr

080031c8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80031c8:	4770      	bx	lr

080031ca <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80031ca:	4770      	bx	lr

080031cc <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80031cc:	4770      	bx	lr

080031ce <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80031ce:	4770      	bx	lr

080031d0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80031d0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80031d4:	b11a      	cbz	r2, 80031de <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80031d6:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80031da:	b102      	cbz	r2, 80031de <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80031dc:	6018      	str	r0, [r3, #0]
        }
    }
 80031de:	4770      	bx	lr

080031e0 <_ZN15Screen1ViewBase9tick_funcEv>:
     * Virtual Action Handlers
     */
    virtual void tick_func()
    {
        // Override and implement this function in Screen1
    }
 80031e0:	4770      	bx	lr

080031e2 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 80031e2:	4770      	bx	lr

080031e4 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 80031e4:	4770      	bx	lr

080031e6 <_ZN15Screen1ViewBase15handleTickEventEv>:
void Screen1ViewBase::handleTickEvent()
{
    //tick_func
    //When every N tick call virtual function
    //Call tick_func
    tick_func();
 80031e6:	6803      	ldr	r3, [r0, #0]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	4718      	bx	r3

080031ec <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80031ec:	b510      	push	{r4, lr}
 80031ee:	4604      	mov	r4, r0
}
 80031f0:	216c      	movs	r1, #108	; 0x6c
 80031f2:	f024 ff2e 	bl	8028052 <_ZdlPvj>
 80031f6:	4620      	mov	r0, r4
 80031f8:	bd10      	pop	{r4, pc}

080031fa <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80031fa:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80031fe:	b112      	cbz	r2, 8003206 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8003200:	6803      	ldr	r3, [r0, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	4718      	bx	r3
    }
 8003206:	4770      	bx	lr

08003208 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8003208:	b538      	push	{r3, r4, r5, lr}
 800320a:	4604      	mov	r4, r0
        : presenter(0)
 800320c:	f015 fef2 	bl	8018ff4 <_ZN8touchgfx6ScreenC1Ev>
 8003210:	4625      	mov	r5, r4
 8003212:	2300      	movs	r3, #0
 8003214:	4a14      	ldr	r2, [pc, #80]	; (8003268 <_ZN15Screen1ViewBaseC1Ev+0x60>)
 8003216:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003218:	f845 2b40 	str.w	r2, [r5], #64
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 800321c:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8003220:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
          visible(true)
 8003224:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8003228:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
        : color(col)
 800322c:	66a3      	str	r3, [r4, #104]	; 0x68
 800322e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003232:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003236:	23ff      	movs	r3, #255	; 0xff
 8003238:	4a0c      	ldr	r2, [pc, #48]	; (800326c <_ZN15Screen1ViewBaseC1Ev+0x64>)
 800323a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 800323e:	6422      	str	r2, [r4, #64]	; 0x40
        setWidth(width);
 8003240:	4628      	mov	r0, r5
 8003242:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003246:	f7ff ff9f 	bl	8003188 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 800324a:	4628      	mov	r0, r5
 800324c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003250:	f7ff ff9c 	bl	800318c <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003254:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003258:	1d20      	adds	r0, r4, #4
 800325a:	4629      	mov	r1, r5
 800325c:	66a3      	str	r3, [r4, #104]	; 0x68
 800325e:	f012 f9d5 	bl	801560c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003262:	4620      	mov	r0, r4
 8003264:	bd38      	pop	{r3, r4, r5, pc}
 8003266:	bf00      	nop
 8003268:	0802a4a4 	.word	0x0802a4a4
 800326c:	0802a9b8 	.word	0x0802a9b8

08003270 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003270:	4770      	bx	lr
	...

08003274 <_Z23getFont_verdana_10_4bppv>:
{
 8003274:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003276:	4d15      	ldr	r5, [pc, #84]	; (80032cc <_Z23getFont_verdana_10_4bppv+0x58>)
{
 8003278:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800327a:	e8d5 4f8f 	ldab	r4, [r5]
 800327e:	f014 0401 	ands.w	r4, r4, #1
 8003282:	d120      	bne.n	80032c6 <_Z23getFont_verdana_10_4bppv+0x52>
 8003284:	4628      	mov	r0, r5
 8003286:	f024 fee6 	bl	8028056 <__cxa_guard_acquire>
 800328a:	b1e0      	cbz	r0, 80032c6 <_Z23getFont_verdana_10_4bppv+0x52>
 800328c:	233f      	movs	r3, #63	; 0x3f
 800328e:	9309      	str	r3, [sp, #36]	; 0x24
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8003292:	2201      	movs	r2, #1
 8003294:	9308      	str	r3, [sp, #32]
 8003296:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003298:	490f      	ldr	r1, [pc, #60]	; (80032d8 <_Z23getFont_verdana_10_4bppv+0x64>)
 800329a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800329e:	2304      	movs	r3, #4
 80032a0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80032a4:	230a      	movs	r3, #10
 80032a6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80032b0:	480a      	ldr	r0, [pc, #40]	; (80032dc <_Z23getFont_verdana_10_4bppv+0x68>)
 80032b2:	940a      	str	r4, [sp, #40]	; 0x28
 80032b4:	9405      	str	r4, [sp, #20]
 80032b6:	f7ff ff31 	bl	800311c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80032ba:	4809      	ldr	r0, [pc, #36]	; (80032e0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80032bc:	f024 ff14 	bl	80280e8 <atexit>
 80032c0:	4628      	mov	r0, r5
 80032c2:	f024 fed4 	bl	802806e <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80032c6:	4805      	ldr	r0, [pc, #20]	; (80032dc <_Z23getFont_verdana_10_4bppv+0x68>)
 80032c8:	b00f      	add	sp, #60	; 0x3c
 80032ca:	bd30      	pop	{r4, r5, pc}
 80032cc:	201964ac 	.word	0x201964ac
 80032d0:	0802c3a8 	.word	0x0802c3a8
 80032d4:	0802c3b4 	.word	0x0802c3b4
 80032d8:	90000178 	.word	0x90000178
 80032dc:	201964b0 	.word	0x201964b0
 80032e0:	08003271 	.word	0x08003271

080032e4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80032e4:	4770      	bx	lr
	...

080032e8 <_Z23getFont_verdana_20_4bppv>:
{
 80032e8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80032ea:	4d15      	ldr	r5, [pc, #84]	; (8003340 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 80032ec:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80032ee:	e8d5 4f8f 	ldab	r4, [r5]
 80032f2:	f014 0401 	ands.w	r4, r4, #1
 80032f6:	d120      	bne.n	800333a <_Z23getFont_verdana_20_4bppv+0x52>
 80032f8:	4628      	mov	r0, r5
 80032fa:	f024 feac 	bl	8028056 <__cxa_guard_acquire>
 80032fe:	b1e0      	cbz	r0, 800333a <_Z23getFont_verdana_20_4bppv+0x52>
 8003300:	233f      	movs	r3, #63	; 0x3f
 8003302:	9309      	str	r3, [sp, #36]	; 0x24
 8003304:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8003306:	2201      	movs	r2, #1
 8003308:	9308      	str	r3, [sp, #32]
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <_Z23getFont_verdana_20_4bppv+0x60>)
 800330c:	490f      	ldr	r1, [pc, #60]	; (800334c <_Z23getFont_verdana_20_4bppv+0x64>)
 800330e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003312:	2304      	movs	r3, #4
 8003314:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003318:	2314      	movs	r3, #20
 800331a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003324:	480a      	ldr	r0, [pc, #40]	; (8003350 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003326:	940a      	str	r4, [sp, #40]	; 0x28
 8003328:	9405      	str	r4, [sp, #20]
 800332a:	f7ff fef7 	bl	800311c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800332e:	4809      	ldr	r0, [pc, #36]	; (8003354 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003330:	f024 feda 	bl	80280e8 <atexit>
 8003334:	4628      	mov	r0, r5
 8003336:	f024 fe9a 	bl	802806e <__cxa_guard_release>
    return verdana_20_4bpp;
}
 800333a:	4805      	ldr	r0, [pc, #20]	; (8003350 <_Z23getFont_verdana_20_4bppv+0x68>)
 800333c:	b00f      	add	sp, #60	; 0x3c
 800333e:	bd30      	pop	{r4, r5, pc}
 8003340:	201964dc 	.word	0x201964dc
 8003344:	0802c3ac 	.word	0x0802c3ac
 8003348:	0802c3b8 	.word	0x0802c3b8
 800334c:	90000188 	.word	0x90000188
 8003350:	201964e0 	.word	0x201964e0
 8003354:	080032e5 	.word	0x080032e5

08003358 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003358:	4770      	bx	lr
	...

0800335c <_Z23getFont_verdana_40_4bppv>:
{
 800335c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800335e:	4d15      	ldr	r5, [pc, #84]	; (80033b4 <_Z23getFont_verdana_40_4bppv+0x58>)
{
 8003360:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003362:	e8d5 4f8f 	ldab	r4, [r5]
 8003366:	f014 0401 	ands.w	r4, r4, #1
 800336a:	d120      	bne.n	80033ae <_Z23getFont_verdana_40_4bppv+0x52>
 800336c:	4628      	mov	r0, r5
 800336e:	f024 fe72 	bl	8028056 <__cxa_guard_acquire>
 8003372:	b1e0      	cbz	r0, 80033ae <_Z23getFont_verdana_40_4bppv+0x52>
 8003374:	233f      	movs	r3, #63	; 0x3f
 8003376:	9309      	str	r3, [sp, #36]	; 0x24
 8003378:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800337a:	2201      	movs	r2, #1
 800337c:	9308      	str	r3, [sp, #32]
 800337e:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <_Z23getFont_verdana_40_4bppv+0x60>)
 8003380:	490f      	ldr	r1, [pc, #60]	; (80033c0 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003382:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003386:	2304      	movs	r3, #4
 8003388:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800338c:	2328      	movs	r3, #40	; 0x28
 800338e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003398:	480a      	ldr	r0, [pc, #40]	; (80033c4 <_Z23getFont_verdana_40_4bppv+0x68>)
 800339a:	940a      	str	r4, [sp, #40]	; 0x28
 800339c:	9405      	str	r4, [sp, #20]
 800339e:	f7ff febd 	bl	800311c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80033a2:	4809      	ldr	r0, [pc, #36]	; (80033c8 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80033a4:	f024 fea0 	bl	80280e8 <atexit>
 80033a8:	4628      	mov	r0, r5
 80033aa:	f024 fe60 	bl	802806e <__cxa_guard_release>
    return verdana_40_4bpp;
}
 80033ae:	4805      	ldr	r0, [pc, #20]	; (80033c4 <_Z23getFont_verdana_40_4bppv+0x68>)
 80033b0:	b00f      	add	sp, #60	; 0x3c
 80033b2:	bd30      	pop	{r4, r5, pc}
 80033b4:	2019650c 	.word	0x2019650c
 80033b8:	0802c3b0 	.word	0x0802c3b0
 80033bc:	0802c3bc 	.word	0x0802c3bc
 80033c0:	90000198 	.word	0x90000198
 80033c4:	20196510 	.word	0x20196510
 80033c8:	08003359 	.word	0x08003359

080033cc <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80033cc:	2000      	movs	r0, #0
 80033ce:	4770      	bx	lr

080033d0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80033d0:	2000      	movs	r0, #0
 80033d2:	4770      	bx	lr

080033d4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80033d4:	b40e      	push	{r1, r2, r3}
 80033d6:	b503      	push	{r0, r1, lr}
 80033d8:	ab03      	add	r3, sp, #12
 80033da:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80033de:	2100      	movs	r1, #0
    va_start(pArg, text);
 80033e0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80033e2:	f015 fa35 	bl	8018850 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80033e6:	b002      	add	sp, #8
 80033e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80033ec:	b003      	add	sp, #12
 80033ee:	4770      	bx	lr

080033f0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80033f0:	b40c      	push	{r2, r3}
 80033f2:	b507      	push	{r0, r1, r2, lr}
 80033f4:	ab04      	add	r3, sp, #16
 80033f6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80033fa:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80033fc:	f015 fa28 	bl	8018850 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003400:	b003      	add	sp, #12
 8003402:	f85d eb04 	ldr.w	lr, [sp], #4
 8003406:	b002      	add	sp, #8
 8003408:	4770      	bx	lr
	...

0800340c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 800340c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800340e:	b510      	push	{r4, lr}
 8003410:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003412:	b373      	cbz	r3, 8003472 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003414:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003416:	b92b      	cbnz	r3, 8003424 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003418:	21c5      	movs	r1, #197	; 0xc5
 800341a:	4b18      	ldr	r3, [pc, #96]	; (800347c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800341c:	4a18      	ldr	r2, [pc, #96]	; (8003480 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800341e:	4819      	ldr	r0, [pc, #100]	; (8003484 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003420:	f024 fe44 	bl	80280ac <__assert_func>
            return buffer[pos];
 8003424:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003426:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800342a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800342c:	b30b      	cbz	r3, 8003472 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800342e:	f016 fc54 	bl	8019cda <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003432:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003434:	2b01      	cmp	r3, #1
 8003436:	d803      	bhi.n	8003440 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003438:	21cb      	movs	r1, #203	; 0xcb
 800343a:	4b13      	ldr	r3, [pc, #76]	; (8003488 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800343c:	4a13      	ldr	r2, [pc, #76]	; (800348c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800343e:	e7ee      	b.n	800341e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003440:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003442:	f640 103f 	movw	r0, #2367	; 0x93f
 8003446:	1c53      	adds	r3, r2, #1
 8003448:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800344a:	4619      	mov	r1, r3
 800344c:	2b09      	cmp	r3, #9
 800344e:	bf88      	it	hi
 8003450:	f1a3 010a 	subhi.w	r1, r3, #10
 8003454:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003458:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 800345a:	4281      	cmp	r1, r0
 800345c:	d109      	bne.n	8003472 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800345e:	2b0a      	cmp	r3, #10
 8003460:	bf28      	it	cs
 8003462:	2300      	movcs	r3, #0
 8003464:	eb04 0242 	add.w	r2, r4, r2, lsl #1
            return buffer[pos];
 8003468:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800346a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800346e:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8003470:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003472:	4620      	mov	r0, r4
}
 8003474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003478:	f016 bb32 	b.w	8019ae0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800347c:	0802a4d4 	.word	0x0802a4d4
 8003480:	0802a4dd 	.word	0x0802a4dd
 8003484:	0802a588 	.word	0x0802a588
 8003488:	0802a5d2 	.word	0x0802a5d2
 800348c:	0802a5e0 	.word	0x0802a5e0

08003490 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003490:	f016 baed 	b.w	8019a6e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003494 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003494:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003496:	bb18      	cbnz	r0, 80034e0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800349a:	4813      	ldr	r0, [pc, #76]	; (80034e8 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4913      	ldr	r1, [pc, #76]	; (80034ec <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80034a0:	b1b3      	cbz	r3, 80034d0 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80034a2:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80034a4:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80034a6:	441a      	add	r2, r3
 80034a8:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80034aa:	685a      	ldr	r2, [r3, #4]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80034ac:	441c      	add	r4, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80034ae:	441a      	add	r2, r3
 80034b0:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80034b2:	2200      	movs	r2, #0
 80034b4:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80034b6:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80034b8:	f000 f82a 	bl	8003510 <_ZN17TypedTextDatabase8getFontsEv>
 80034bc:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80034be:	f000 f825 	bl	800350c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80034c2:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80034c4:	601c      	str	r4, [r3, #0]
        fonts = f;
 80034c6:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80034c8:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80034ca:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80034cc:	8018      	strh	r0, [r3, #0]
    }
}
 80034ce:	e007      	b.n	80034e0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80034d2:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80034d6:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80034da:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80034dc:	2c00      	cmp	r4, #0
 80034de:	d1e8      	bne.n	80034b2 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80034e0:	bd38      	pop	{r3, r4, r5, pc}
 80034e2:	bf00      	nop
 80034e4:	2019653c 	.word	0x2019653c
 80034e8:	20196540 	.word	0x20196540
 80034ec:	20196544 	.word	0x20196544
 80034f0:	20196548 	.word	0x20196548
 80034f4:	201981a8 	.word	0x201981a8
 80034f8:	201981b0 	.word	0x201981b0
 80034fc:	201981ac 	.word	0x201981ac
 8003500:	900001ac 	.word	0x900001ac
 8003504:	900001a8 	.word	0x900001a8
 8003508:	900001b4 	.word	0x900001b4

0800350c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 800350c:	2000      	movs	r0, #0
 800350e:	4770      	bx	lr

08003510 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003510:	4800      	ldr	r0, [pc, #0]	; (8003514 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003512:	4770      	bx	lr
 8003514:	2019654c 	.word	0x2019654c

08003518 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003518:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 800351a:	f7ff fee5 	bl	80032e8 <_Z23getFont_verdana_20_4bppv>
};
 800351e:	4c04      	ldr	r4, [pc, #16]	; (8003530 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
 8003520:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003522:	f7ff ff1b 	bl	800335c <_Z23getFont_verdana_40_4bppv>
};
 8003526:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003528:	f7ff fea4 	bl	8003274 <_Z23getFont_verdana_10_4bppv>
};
 800352c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 800352e:	bd10      	pop	{r4, pc}
 8003530:	2019654c 	.word	0x2019654c

08003534 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003534:	4770      	bx	lr

08003536 <_ZN19FrontendApplicationD0Ev>:
 8003536:	b510      	push	{r4, lr}
 8003538:	4604      	mov	r4, r0
 800353a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800353e:	f024 fd88 	bl	8028052 <_ZdlPvj>
 8003542:	4620      	mov	r0, r4
 8003544:	bd10      	pop	{r4, pc}

08003546 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003546:	b510      	push	{r4, lr}
 8003548:	4604      	mov	r4, r0
    {
        model.tick();
 800354a:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 800354e:	f000 f812 	bl	8003576 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003552:	4620      	mov	r0, r4
    }
 8003554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003558:	f014 bae2 	b.w	8017b20 <_ZN8touchgfx11Application15handleTickEventEv>

0800355c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800355c:	b510      	push	{r4, lr}
 800355e:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003560:	f7ff fd76 	bl	8003050 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003564:	4b01      	ldr	r3, [pc, #4]	; (800356c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8003566:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8003568:	6023      	str	r3, [r4, #0]
}
 800356a:	bd10      	pop	{r4, pc}
 800356c:	0802a6bc 	.word	0x0802a6bc

08003570 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8003570:	2200      	movs	r2, #0
 8003572:	6002      	str	r2, [r0, #0]
{

}
 8003574:	4770      	bx	lr

08003576 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8003576:	4770      	bx	lr

08003578 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8003578:	4770      	bx	lr

0800357a <_ZThn4_N16Screen1PresenterD1Ev>:
 800357a:	3804      	subs	r0, #4
 800357c:	4770      	bx	lr

0800357e <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 800357e:	4770      	bx	lr

08003580 <_ZN16Screen1PresenterD0Ev>:
 8003580:	b510      	push	{r4, lr}
 8003582:	4604      	mov	r4, r0
 8003584:	2110      	movs	r1, #16
 8003586:	f024 fd64 	bl	8028052 <_ZdlPvj>
 800358a:	4620      	mov	r0, r4
 800358c:	bd10      	pop	{r4, pc}

0800358e <_ZThn4_N16Screen1PresenterD0Ev>:
 800358e:	f1a0 0004 	sub.w	r0, r0, #4
 8003592:	e7f5      	b.n	8003580 <_ZN16Screen1PresenterD0Ev>

08003594 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003594:	2200      	movs	r2, #0
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8003596:	b510      	push	{r4, lr}
 8003598:	6082      	str	r2, [r0, #8]
    : view(v)
 800359a:	4a04      	ldr	r2, [pc, #16]	; (80035ac <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
 800359c:	60c1      	str	r1, [r0, #12]
 800359e:	f102 0408 	add.w	r4, r2, #8
 80035a2:	3220      	adds	r2, #32
 80035a4:	6004      	str	r4, [r0, #0]
 80035a6:	6042      	str	r2, [r0, #4]
}
 80035a8:	bd10      	pop	{r4, pc}
 80035aa:	bf00      	nop
 80035ac:	0802a700 	.word	0x0802a700

080035b0 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80035b0:	4770      	bx	lr
	...

080035b4 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80035b4:	b538      	push	{r3, r4, r5, lr}
 80035b6:	4604      	mov	r4, r0
 80035b8:	f246 356c 	movw	r5, #25452	; 0x636c
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <_ZN11Screen1ViewD1Ev+0x24>)
 80035be:	6003      	str	r3, [r0, #0]
 80035c0:	5963      	ldr	r3, [r4, r5]
 80035c2:	1960      	adds	r0, r4, r5
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3d2c      	subs	r5, #44	; 0x2c
 80035c8:	4798      	blx	r3
 80035ca:	2d6c      	cmp	r5, #108	; 0x6c
 80035cc:	d1f8      	bne.n	80035c0 <_ZN11Screen1ViewD1Ev+0xc>
 80035ce:	4620      	mov	r0, r4
 80035d0:	f7ff fe07 	bl	80031e2 <_ZN15Screen1ViewBaseD1Ev>
 80035d4:	4620      	mov	r0, r4
 80035d6:	bd38      	pop	{r3, r4, r5, pc}
 80035d8:	0802a730 	.word	0x0802a730

080035dc <_ZN11Screen1ViewD0Ev>:
 80035dc:	b510      	push	{r4, lr}
 80035de:	4604      	mov	r4, r0
 80035e0:	f7ff ffe8 	bl	80035b4 <_ZN11Screen1ViewD1Ev>
 80035e4:	4620      	mov	r0, r4
 80035e6:	f246 3198 	movw	r1, #25496	; 0x6398
 80035ea:	f024 fd32 	bl	8028052 <_ZdlPvj>
 80035ee:	4620      	mov	r0, r4
 80035f0:	bd10      	pop	{r4, pc}
	...

080035f4 <_ZN8touchgfx3BoxC1Ev>:
          visible(true)
 80035f4:	f44f 7180 	mov.w	r1, #256	; 0x100
        : Widget(), alpha(255), color(0)
 80035f8:	4a08      	ldr	r2, [pc, #32]	; (800361c <_ZN8touchgfx3BoxC1Ev+0x28>)
 80035fa:	8481      	strh	r1, [r0, #36]	; 0x24
 80035fc:	6002      	str	r2, [r0, #0]
 80035fe:	21ff      	movs	r1, #255	; 0xff
        : x(0), y(0), width(0), height(0)
 8003600:	2200      	movs	r2, #0
 8003602:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8003606:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800360a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800360e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003612:	e9c0 2207 	strd	r2, r2, [r0, #28]
        : color(col)
 8003616:	6282      	str	r2, [r0, #40]	; 0x28
    }
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	0802a9b8 	.word	0x0802a9b8

08003620 <_Z10updateGridPA24_i>:
void updateGrid(int grid[ROWS][COLS]) {
 8003620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003624:	f6ad 1d14 	subw	sp, sp, #2324	; 0x914
 8003628:	af04      	add	r7, sp, #16
    for (int i = 0; i < ROWS; i++) {
 800362a:	2200      	movs	r2, #0
 800362c:	ee07 7a90 	vmov	s15, r7
 8003630:	f04f 0960 	mov.w	r9, #96	; 0x60
                    int newI = (i + ni + ROWS) % ROWS;
 8003634:	f04f 0c18 	mov.w	ip, #24
    for (int i = 0; i < ROWS; i++) {
 8003638:	46be      	mov	lr, r7
        for (int j = 0; j < COLS; j++) {
 800363a:	2400      	movs	r4, #0
 800363c:	fb09 0a02 	mla	sl, r9, r2, r0
                    int newI = (i + ni + ROWS) % ROWS;
 8003640:	f102 0318 	add.w	r3, r2, #24
 8003644:	9302      	str	r3, [sp, #8]
            for (int ni = -1; ni <= 1; ni++) {
 8003646:	f04f 35ff 	mov.w	r5, #4294967295
            int liveNeighbors = 0;
 800364a:	2300      	movs	r3, #0
                    int newJ = (j + nj + COLS) % COLS;
 800364c:	f104 0618 	add.w	r6, r4, #24
 8003650:	9603      	str	r6, [sp, #12]
                    int newI = (i + ni + ROWS) % ROWS;
 8003652:	9e02      	ldr	r6, [sp, #8]
 8003654:	442e      	add	r6, r5
 8003656:	fbb6 f8fc 	udiv	r8, r6, ip
 800365a:	fb0c 6618 	mls	r6, ip, r8, r6
                    liveNeighbors += grid[newI][newJ];
 800365e:	fb09 0606 	mla	r6, r9, r6, r0
 8003662:	9601      	str	r6, [sp, #4]
                for (int nj = -1; nj <= 1; nj++) {
 8003664:	f04f 36ff 	mov.w	r6, #4294967295
                    if (ni == 0 && nj == 0) continue; // Skip the center cell
 8003668:	ea55 0106 	orrs.w	r1, r5, r6
 800366c:	d00a      	beq.n	8003684 <_Z10updateGridPA24_i+0x64>
                    int newJ = (j + nj + COLS) % COLS;
 800366e:	9903      	ldr	r1, [sp, #12]
 8003670:	eb01 0806 	add.w	r8, r1, r6
 8003674:	fbb8 fbfc 	udiv	fp, r8, ip
 8003678:	fb0c 881b 	mls	r8, ip, fp, r8
                    liveNeighbors += grid[newI][newJ];
 800367c:	9901      	ldr	r1, [sp, #4]
 800367e:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8003682:	4443      	add	r3, r8
                for (int nj = -1; nj <= 1; nj++) {
 8003684:	3601      	adds	r6, #1
 8003686:	2e02      	cmp	r6, #2
 8003688:	d1ee      	bne.n	8003668 <_Z10updateGridPA24_i+0x48>
            for (int ni = -1; ni <= 1; ni++) {
 800368a:	3501      	adds	r5, #1
 800368c:	2d02      	cmp	r5, #2
 800368e:	d1e0      	bne.n	8003652 <_Z10updateGridPA24_i+0x32>
            if (grid[i][j] == 1) {
 8003690:	f85a 5024 	ldr.w	r5, [sl, r4, lsl #2]
 8003694:	2d01      	cmp	r5, #1
 8003696:	d11a      	bne.n	80036ce <_Z10updateGridPA24_i+0xae>
                newGrid[i][j] = (liveNeighbors == 2 || liveNeighbors == 3) ? 1 : 0;
 8003698:	3b02      	subs	r3, #2
 800369a:	2b01      	cmp	r3, #1
 800369c:	bf8c      	ite	hi
 800369e:	2300      	movhi	r3, #0
 80036a0:	2301      	movls	r3, #1
        for (int j = 0; j < COLS; j++) {
 80036a2:	3401      	adds	r4, #1
 80036a4:	2c18      	cmp	r4, #24
                newGrid[i][j] = (liveNeighbors == 3) ? 1 : 0;
 80036a6:	f8ce 3000 	str.w	r3, [lr]
        for (int j = 0; j < COLS; j++) {
 80036aa:	f10e 0e04 	add.w	lr, lr, #4
 80036ae:	d1ca      	bne.n	8003646 <_Z10updateGridPA24_i+0x26>
    for (int i = 0; i < ROWS; i++) {
 80036b0:	3201      	adds	r2, #1
 80036b2:	2a18      	cmp	r2, #24
 80036b4:	f107 0760 	add.w	r7, r7, #96	; 0x60
 80036b8:	d1be      	bne.n	8003638 <_Z10updateGridPA24_i+0x18>
            grid[i][j] = newGrid[i][j];
 80036ba:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80036be:	ee17 1a90 	vmov	r1, s15
 80036c2:	f024 fd71 	bl	80281a8 <memcpy>
}
 80036c6:	f60d 1d14 	addw	sp, sp, #2324	; 0x914
 80036ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                newGrid[i][j] = (liveNeighbors == 3) ? 1 : 0;
 80036ce:	1ed9      	subs	r1, r3, #3
 80036d0:	424b      	negs	r3, r1
 80036d2:	414b      	adcs	r3, r1
 80036d4:	e7e5      	b.n	80036a2 <_Z10updateGridPA24_i+0x82>
	...

080036d8 <_ZN11Screen1View9tick_funcEv>:
void Screen1View::tick_func(){
 80036d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036dc:	4e32      	ldr	r6, [pc, #200]	; (80037a8 <_ZN11Screen1View9tick_funcEv+0xd0>)
 80036de:	4682      	mov	sl, r0
 80036e0:	46b1      	mov	r9, r6
	int index = 0;
 80036e2:	2700      	movs	r7, #0
 80036e4:	4634      	mov	r4, r6
 80036e6:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
        color = newColor;
 80036ea:	4b30      	ldr	r3, [pc, #192]	; (80037ac <_ZN11Screen1View9tick_funcEv+0xd4>)
 80036ec:	f04f 0800 	mov.w	r8, #0
 80036f0:	fb0b a507 	mla	r5, fp, r7, sl
			if(grid[c][r] != 0){
 80036f4:	f859 2028 	ldr.w	r2, [r9, r8, lsl #2]
			box[index].invalidate();
 80036f8:	f105 0098 	add.w	r0, r5, #152	; 0x98
 80036fc:	2a00      	cmp	r2, #0
 80036fe:	bf14      	ite	ne
 8003700:	461a      	movne	r2, r3
 8003702:	f04f 427f 	moveq.w	r2, #4278190080	; 0xff000000
 8003706:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
 800370a:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
		for(int c = 0; c < COLS; c ++ ){
 800370e:	f108 0818 	add.w	r8, r8, #24
			box[index].invalidate();
 8003712:	6952      	ldr	r2, [r2, #20]
 8003714:	4790      	blx	r2
		for(int c = 0; c < COLS; c ++ ){
 8003716:	f5b8 7f10 	cmp.w	r8, #576	; 0x240
 800371a:	4b24      	ldr	r3, [pc, #144]	; (80037ac <_ZN11Screen1View9tick_funcEv+0xd4>)
 800371c:	f105 052c 	add.w	r5, r5, #44	; 0x2c
 8003720:	d1e8      	bne.n	80036f4 <_ZN11Screen1View9tick_funcEv+0x1c>
			index++;
 8003722:	3718      	adds	r7, #24
	for(int r = 0; r < ROWS; r ++ ){
 8003724:	f5b7 7f10 	cmp.w	r7, #576	; 0x240
 8003728:	f109 0904 	add.w	r9, r9, #4
 800372c:	d1de      	bne.n	80036ec <_ZN11Screen1View9tick_funcEv+0x14>
	updateGrid(grid);
 800372e:	481e      	ldr	r0, [pc, #120]	; (80037a8 <_ZN11Screen1View9tick_funcEv+0xd0>)
 8003730:	f7ff ff76 	bl	8003620 <_Z10updateGridPA24_i>
	for(int r = 0; r < ROWS; r ++ ){
 8003734:	2300      	movs	r3, #0
	int sum = 0;
 8003736:	461d      	mov	r5, r3
	updateGrid(grid);
 8003738:	491b      	ldr	r1, [pc, #108]	; (80037a8 <_ZN11Screen1View9tick_funcEv+0xd0>)
	int sum = 0;
 800373a:	2200      	movs	r2, #0
			sum += grid[c][r];
 800373c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		for(int c = 0; c < COLS; c ++ ){
 8003740:	3218      	adds	r2, #24
 8003742:	f5b2 7f10 	cmp.w	r2, #576	; 0x240
			sum += grid[c][r];
 8003746:	4405      	add	r5, r0
		for(int c = 0; c < COLS; c ++ ){
 8003748:	d1f8      	bne.n	800373c <_ZN11Screen1View9tick_funcEv+0x64>
	for(int r = 0; r < ROWS; r ++ ){
 800374a:	3301      	adds	r3, #1
 800374c:	2b18      	cmp	r3, #24
 800374e:	f101 0104 	add.w	r1, r1, #4
 8003752:	d1f2      	bne.n	800373a <_ZN11Screen1View9tick_funcEv+0x62>
	if( sum == 0 ){
 8003754:	b995      	cbnz	r5, 800377c <_ZN11Screen1View9tick_funcEv+0xa4>
	int sum = 0;
 8003756:	2700      	movs	r7, #0
				grid[c][r] = rand()%2;
 8003758:	f025 f99a 	bl	8028a90 <rand>
 800375c:	2800      	cmp	r0, #0
 800375e:	f000 0001 	and.w	r0, r0, #1
 8003762:	bfb8      	it	lt
 8003764:	4240      	neglt	r0, r0
 8003766:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
			for(int c = 0; c < COLS; c ++ ){
 800376a:	3718      	adds	r7, #24
 800376c:	f5b7 7f10 	cmp.w	r7, #576	; 0x240
 8003770:	d1f2      	bne.n	8003758 <_ZN11Screen1View9tick_funcEv+0x80>
		for(int r = 0; r < ROWS; r ++ ){
 8003772:	3501      	adds	r5, #1
 8003774:	2d18      	cmp	r5, #24
 8003776:	f106 0604 	add.w	r6, r6, #4
 800377a:	d1ec      	bne.n	8003756 <_ZN11Screen1View9tick_funcEv+0x7e>
	grid[rand()%ROWS][rand()%COLS] = 1;
 800377c:	f025 f988 	bl	8028a90 <rand>
 8003780:	4605      	mov	r5, r0
 8003782:	f025 f985 	bl	8028a90 <rand>
 8003786:	2318      	movs	r3, #24
 8003788:	fb95 f2f3 	sdiv	r2, r5, r3
 800378c:	fb03 5512 	mls	r5, r3, r2, r5
 8003790:	fb90 f2f3 	sdiv	r2, r0, r3
 8003794:	fb02 0013 	mls	r0, r2, r3, r0
 8003798:	fb03 0005 	mla	r0, r3, r5, r0
 800379c:	2301      	movs	r3, #1
 800379e:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
}
 80037a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a6:	bf00      	nop
 80037a8:	20196558 	.word	0x20196558
 80037ac:	ff0077b2 	.word	0xff0077b2

080037b0 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80037b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b4:	4604      	mov	r4, r0
 80037b6:	f7ff fd27 	bl	8003208 <_ZN15Screen1ViewBaseC1Ev>
 80037ba:	4620      	mov	r0, r4
 80037bc:	4b37      	ldr	r3, [pc, #220]	; (800389c <_ZN11Screen1ViewC1Ev+0xec>)
 80037be:	f504 46c7 	add.w	r6, r4, #25472	; 0x6380
 80037c2:	f840 3b6c 	str.w	r3, [r0], #108
 80037c6:	f7ff ff15 	bl	80035f4 <_ZN8touchgfx3BoxC1Ev>
 80037ca:	f104 0598 	add.w	r5, r4, #152	; 0x98
 80037ce:	3618      	adds	r6, #24
 80037d0:	4628      	mov	r0, r5
 80037d2:	352c      	adds	r5, #44	; 0x2c
 80037d4:	f7ff ff0e 	bl	80035f4 <_ZN8touchgfx3BoxC1Ev>
 80037d8:	42b5      	cmp	r5, r6
 80037da:	d1f9      	bne.n	80037d0 <_ZN11Screen1ViewC1Ev+0x20>
 80037dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80038a4 <_ZN11Screen1ViewC1Ev+0xf4>
	for(int r = 0; r < ROWS; r ++ ){
 80037e0:	2600      	movs	r6, #0
Screen1View::Screen1View()
 80037e2:	4657      	mov	r7, sl
	for(int r = 0; r < ROWS; r ++ ){
 80037e4:	2500      	movs	r5, #0
			grid[c][r] = rand()%2;
 80037e6:	f025 f953 	bl	8028a90 <rand>
 80037ea:	2800      	cmp	r0, #0
 80037ec:	f000 0001 	and.w	r0, r0, #1
 80037f0:	bfb8      	it	lt
 80037f2:	4240      	neglt	r0, r0
 80037f4:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
		for(int c = 0; c < COLS; c ++ ){
 80037f8:	3518      	adds	r5, #24
 80037fa:	f5b5 7f10 	cmp.w	r5, #576	; 0x240
 80037fe:	d1f2      	bne.n	80037e6 <_ZN11Screen1ViewC1Ev+0x36>
	for(int r = 0; r < ROWS; r ++ ){
 8003800:	3601      	adds	r6, #1
 8003802:	2e18      	cmp	r6, #24
 8003804:	f107 0704 	add.w	r7, r7, #4
 8003808:	d1ec      	bne.n	80037e4 <_ZN11Screen1ViewC1Ev+0x34>
	for(int r = 0; r < ROWS; r ++ ){
 800380a:	2600      	movs	r6, #0
		for(int c = 0; c < COLS; c ++ ){
 800380c:	f44f 6384 	mov.w	r3, #1056	; 0x420
			box[index].setPosition(0+c*20, 0+r*20, 20, 20);
 8003810:	46d1      	mov	r9, sl
 8003812:	2700      	movs	r7, #0
 8003814:	fb03 4506 	mla	r5, r3, r6, r4
 8003818:	eb06 0886 	add.w	r8, r6, r6, lsl #2
 800381c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8003820:	fa0f f888 	sxth.w	r8, r8
 8003824:	f104 0b04 	add.w	fp, r4, #4
        setX(x);
 8003828:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 800382c:	f105 0098 	add.w	r0, r5, #152	; 0x98
 8003830:	b239      	sxth	r1, r7
 8003832:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003834:	9001      	str	r0, [sp, #4]
 8003836:	4790      	blx	r2
        setY(y);
 8003838:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 800383c:	4641      	mov	r1, r8
 800383e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003840:	9801      	ldr	r0, [sp, #4]
 8003842:	4790      	blx	r2
        setWidth(width);
 8003844:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003848:	2114      	movs	r1, #20
 800384a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800384c:	9801      	ldr	r0, [sp, #4]
 800384e:	4790      	blx	r2
        setHeight(height);
 8003850:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003854:	2114      	movs	r1, #20
 8003856:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003858:	9801      	ldr	r0, [sp, #4]
 800385a:	4790      	blx	r2
			if(grid[c][r] != 0){
 800385c:	f859 2b60 	ldr.w	r2, [r9], #96
 8003860:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <_ZN11Screen1ViewC1Ev+0xf0>)
 8003862:	2a00      	cmp	r2, #0
 8003864:	bf14      	ite	ne
 8003866:	461a      	movne	r2, r3
 8003868:	f04f 427f 	moveq.w	r2, #4278190080	; 0xff000000
 800386c:	9801      	ldr	r0, [sp, #4]
		for(int c = 0; c < COLS; c ++ ){
 800386e:	3714      	adds	r7, #20
 8003870:	4601      	mov	r1, r0
 8003872:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
 8003876:	4658      	mov	r0, fp
 8003878:	b2bf      	uxth	r7, r7
 800387a:	f011 fec7 	bl	801560c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800387e:	f5b7 7ff0 	cmp.w	r7, #480	; 0x1e0
 8003882:	f105 052c 	add.w	r5, r5, #44	; 0x2c
 8003886:	d1cf      	bne.n	8003828 <_ZN11Screen1ViewC1Ev+0x78>
	for(int r = 0; r < ROWS; r ++ ){
 8003888:	3601      	adds	r6, #1
 800388a:	2e18      	cmp	r6, #24
 800388c:	f10a 0a04 	add.w	sl, sl, #4
 8003890:	d1bc      	bne.n	800380c <_ZN11Screen1ViewC1Ev+0x5c>
}
 8003892:	4620      	mov	r0, r4
 8003894:	b003      	add	sp, #12
 8003896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800389a:	bf00      	nop
 800389c:	0802a730 	.word	0x0802a730
 80038a0:	ff0077b2 	.word	0xff0077b2
 80038a4:	20196558 	.word	0x20196558

080038a8 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80038a8:	f7ff bc9c 	b.w	80031e4 <_ZN15Screen1ViewBase11setupScreenEv>

080038ac <APS512XX_EnableMemoryMappedMode>:
  * @param  BurstType Type of burst used for the access
  * @retval Memory status
  */
int32_t APS512XX_EnableMemoryMappedMode(XSPI_HandleTypeDef *Ctx, uint32_t ReadLatencyCode, uint32_t WriteLatencyCode,
                                        uint32_t IOMode, uint32_t BurstType)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b09a      	sub	sp, #104	; 0x68
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
  XSPI_RegularCmdTypeDef   sCommand = {0};
 80038ba:	f107 0318 	add.w	r3, r7, #24
 80038be:	2250      	movs	r2, #80	; 0x50
 80038c0:	2100      	movs	r1, #0
 80038c2:	4618      	mov	r0, r3
 80038c4:	f024 fc7d 	bl	80281c2 <memset>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 80038c8:	f107 0310 	add.w	r3, r7, #16
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]

  /* Initialize the write command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_WRITE_CFG;
 80038d2:	2302      	movs	r3, #2
 80038d4:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 80038d6:	2304      	movs	r3, #4
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 80038da:	2300      	movs	r3, #0
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80038de:	2300      	movs	r3, #0
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction         = ((BurstType == 0U) ? APS512XX_WRITE_LINEAR_BURST_CMD : APS512XX_WRITE_CMD);
 80038e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <APS512XX_EnableMemoryMappedMode+0x40>
 80038e8:	23a0      	movs	r3, #160	; 0xa0
 80038ea:	e000      	b.n	80038ee <APS512XX_EnableMemoryMappedMode+0x42>
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 80038f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 80038f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80038fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 80038fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003900:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 8003902:	2300      	movs	r3, #0
 8003904:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode            = ((IOMode == 0U) ? HAL_XSPI_DATA_8_LINES : HAL_XSPI_DATA_16_LINES);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <APS512XX_EnableMemoryMappedMode+0x66>
 800390c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003910:	e001      	b.n	8003916 <APS512XX_EnableMemoryMappedMode+0x6a>
 8003912:	f04f 63a0 	mov.w	r3, #83886080	; 0x5000000
 8003916:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 8003918:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800391c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3b01      	subs	r3, #1
 8003922:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
 8003924:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003928:	663b      	str	r3, [r7, #96]	; 0x60
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 800392a:	2300      	movs	r3, #0
 800392c:	667b      	str	r3, [r7, #100]	; 0x64
#endif

  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800392e:	f107 0318 	add.w	r3, r7, #24
 8003932:	f241 3288 	movw	r2, #5000	; 0x1388
 8003936:	4619      	mov	r1, r3
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f00e fb07 	bl	8011f4c <HAL_XSPI_Command>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <APS512XX_EnableMemoryMappedMode+0x9e>
  {
    return APS512XX_ERROR;
 8003944:	f04f 33ff 	mov.w	r3, #4294967295
 8003948:	e028      	b.n	800399c <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  /* Initialize the read command */
  sCommand.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
 800394a:	2301      	movs	r3, #1
 800394c:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction   = ((BurstType == 0U) ? APS512XX_READ_LINEAR_BURST_CMD : APS512XX_READ_CMD);
 800394e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <APS512XX_EnableMemoryMappedMode+0xac>
 8003954:	2320      	movs	r3, #32
 8003956:	e000      	b.n	800395a <APS512XX_EnableMemoryMappedMode+0xae>
 8003958:	2300      	movs	r3, #0
 800395a:	623b      	str	r3, [r7, #32]
  sCommand.DummyCycles   = (ReadLatencyCode - 1U);
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	3b01      	subs	r3, #1
 8003960:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003962:	f107 0318 	add.w	r3, r7, #24
 8003966:	f241 3288 	movw	r2, #5000	; 0x1388
 800396a:	4619      	mov	r1, r3
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f00e faed 	bl	8011f4c <HAL_XSPI_Command>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <APS512XX_EnableMemoryMappedMode+0xd2>
  {
    return APS512XX_ERROR;
 8003978:	f04f 33ff 	mov.w	r3, #4294967295
 800397c:	e00e      	b.n	800399c <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  /* Activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]

  if (HAL_XSPI_MemoryMapped(Ctx, &sMemMappedCfg) != HAL_OK)
 8003982:	f107 0310 	add.w	r3, r7, #16
 8003986:	4619      	mov	r1, r3
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f00e fd6b 	bl	8012464 <HAL_XSPI_MemoryMapped>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <APS512XX_EnableMemoryMappedMode+0xee>
  {
    return APS512XX_ERROR;
 8003994:	f04f 33ff 	mov.w	r3, #4294967295
 8003998:	e000      	b.n	800399c <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  return APS512XX_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3768      	adds	r7, #104	; 0x68
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <APS512XX_ReadReg>:
  * @param  Value Register value pointer
  * @param  LatencyCode Latency used for the access
  * @retval error status
  */
int32_t APS512XX_ReadReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t *Value, uint32_t LatencyCode)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b098      	sub	sp, #96	; 0x60
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
  XSPI_RegularCmdTypeDef sCommand = {0};
 80039b2:	f107 0310 	add.w	r3, r7, #16
 80039b6:	2250      	movs	r2, #80	; 0x50
 80039b8:	2100      	movs	r1, #0
 80039ba:	4618      	mov	r0, r3
 80039bc:	f024 fc01 	bl	80281c2 <memset>

  /* Initialize the read register command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_COMMON_CFG;
 80039c0:	2300      	movs	r3, #0
 80039c2:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 80039c4:	2304      	movs	r3, #4
 80039c6:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 80039c8:	2300      	movs	r3, #0
 80039ca:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80039cc:	2300      	movs	r3, #0
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction         = APS512XX_READ_REG_CMD;
 80039d0:	2340      	movs	r3, #64	; 0x40
 80039d2:	61bb      	str	r3, [r7, #24]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 80039d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 80039da:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80039de:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 80039e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039e4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.Address             = Address;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
 80039ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80039f2:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 80039f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039f8:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataLength          = 2;
 80039fa:	2302      	movs	r3, #2
 80039fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DummyCycles         = (LatencyCode - 1U);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
 8003a04:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003a08:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a0e:	f107 0310 	add.w	r3, r7, #16
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4619      	mov	r1, r3
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f00e fa97 	bl	8011f4c <HAL_XSPI_Command>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <APS512XX_ReadReg+0x86>
  {
    return APS512XX_ERROR;
 8003a24:	f04f 33ff 	mov.w	r3, #4294967295
 8003a28:	e00c      	b.n	8003a44 <APS512XX_ReadReg+0xa0>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, (uint8_t *)Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f00e fbea 	bl	801220a <HAL_XSPI_Receive>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <APS512XX_ReadReg+0x9e>
  {
    return APS512XX_ERROR;
 8003a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a40:	e000      	b.n	8003a44 <APS512XX_ReadReg+0xa0>
  }

  return APS512XX_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3760      	adds	r7, #96	; 0x60
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <APS512XX_WriteReg>:
  * @param  Address Register address
  * @param  Value Value to write to register
  * @retval error status
  */
int32_t APS512XX_WriteReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t Value)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b098      	sub	sp, #96	; 0x60
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	4613      	mov	r3, r2
 8003a58:	71fb      	strb	r3, [r7, #7]
  XSPI_RegularCmdTypeDef sCommand = {0};
 8003a5a:	f107 0310 	add.w	r3, r7, #16
 8003a5e:	2250      	movs	r2, #80	; 0x50
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f024 fbad 	bl	80281c2 <memset>

  /* Initialize the write register command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_COMMON_CFG;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 8003a70:	2300      	movs	r3, #0
 8003a72:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction         = APS512XX_WRITE_REG_CMD;
 8003a78:	23c0      	movs	r3, #192	; 0xc0
 8003a7a:	61bb      	str	r3, [r7, #24]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 8003a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 8003a82:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003a86:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8003a88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a8c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.Address             = Address;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 8003a92:	2300      	movs	r3, #0
 8003a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
 8003a96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003a9a:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 8003a9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003aa0:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataLength          = 2;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DummyCycles         = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode             = HAL_XSPI_DQS_DISABLE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ab2:	f107 0310 	add.w	r3, r7, #16
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4619      	mov	r1, r3
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f00e fa45 	bl	8011f4c <HAL_XSPI_Command>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <APS512XX_WriteReg+0x82>
  {
    return APS512XX_ERROR;
 8003ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8003acc:	e00d      	b.n	8003aea <APS512XX_WriteReg+0x9e>
  }

  /* Transmission of the data */
  if (HAL_XSPI_Transmit(Ctx, (uint8_t *)(&Value), HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ace:	1dfb      	adds	r3, r7, #7
 8003ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f00e fb24 	bl	8012124 <HAL_XSPI_Transmit>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <APS512XX_WriteReg+0x9c>
  {
    return APS512XX_ERROR;
 8003ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae6:	e000      	b.n	8003aea <APS512XX_WriteReg+0x9e>
  }

  return APS512XX_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3760      	adds	r7, #96	; 0x60
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <APS512XX_Reset>:
  * @brief  Reset the memory
  * @param  Ctx Component object pointer
  * @retval error status
  */
int32_t APS512XX_Reset(XSPI_HandleTypeDef *Ctx)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b096      	sub	sp, #88	; 0x58
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  XSPI_RegularCmdTypeDef sCommand = {0};
 8003afa:	f107 0308 	add.w	r3, r7, #8
 8003afe:	2250      	movs	r2, #80	; 0x50
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f024 fb5d 	bl	80281c2 <memset>

  /* Initialize the command */
  sCommand.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60bb      	str	r3, [r7, #8]
  sCommand.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 8003b0c:	2304      	movs	r3, #4
 8003b0e:	617b      	str	r3, [r7, #20]
  sCommand.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61fb      	str	r3, [r7, #28]
  sCommand.Instruction        = APS512XX_RESET_CMD;
 8003b18:	23ff      	movs	r3, #255	; 0xff
 8003b1a:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8003b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressWidth       = HAL_XSPI_ADDRESS_24_BITS;
 8003b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Address            = 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_XSPI_DATA_NONE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataLength         = 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles        = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	653b      	str	r3, [r7, #80]	; 0x50
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003b44:	2300      	movs	r3, #0
 8003b46:	657b      	str	r3, [r7, #84]	; 0x54
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b48:	f107 0308 	add.w	r3, r7, #8
 8003b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f00e f9fa 	bl	8011f4c <HAL_XSPI_Command>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <APS512XX_Reset+0x72>
  {
    return APS512XX_ERROR;
 8003b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b62:	e003      	b.n	8003b6c <APS512XX_Reset+0x7a>
  }

  /* Need to wait tRST */
  HAL_Delay(1);
 8003b64:	2001      	movs	r0, #1
 8003b66:	f003 fc15 	bl	8007394 <HAL_Delay>
  return 0/*APS512XX_OK*/;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3758      	adds	r7, #88	; 0x58
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <MX25UM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25UM51245G_GetFlashInfo(MX25UM51245G_Info_t *pInfo)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25UM51245G_FLASH_SIZE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b82:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25UM51245G_SECTOR_64K;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b8a:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SECTOR_64K);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b92:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25UM51245G_SUBSECTOR_4K;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b9a:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ba2:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003baa:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bb2:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25UM51245G_PAGE_SIZE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bba:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003bc2:	621a      	str	r2, [r3, #32]

  return MX25UM51245G_OK;
 8003bc4:	2300      	movs	r3, #0
};
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <MX25UM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25UM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                         MX25UM51245G_Transfer_t Rate)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b09c      	sub	sp, #112	; 0x70
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	70fb      	strb	r3, [r7, #3]
 8003bde:	4613      	mov	r3, r2
 8003be0:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef  s_command = {0};
 8003be2:	f107 0320 	add.w	r3, r7, #32
 8003be6:	2250      	movs	r2, #80	; 0x50
 8003be8:	2100      	movs	r1, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	f024 fae9 	bl	80281c2 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
 8003bf0:	f107 030c 	add.w	r3, r7, #12
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d105      	bne.n	8003c12 <MX25UM51245G_AutoPollingMemReady+0x40>
 8003c06:	78bb      	ldrb	r3, [r7, #2]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d102      	bne.n	8003c12 <MX25UM51245G_AutoPollingMemReady+0x40>
  {
    return MX25UM51245G_ERROR;
 8003c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c10:	e08d      	b.n	8003d2e <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8003c12:	2300      	movs	r3, #0
 8003c14:	623b      	str	r3, [r7, #32]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <MX25UM51245G_AutoPollingMemReady+0x52>
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <MX25UM51245G_AutoPollingMemReady+0x54>
 8003c24:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003c28:	78bb      	ldrb	r3, [r7, #2]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <MX25UM51245G_AutoPollingMemReady+0x60>
 8003c2e:	2308      	movs	r3, #8
 8003c30:	e000      	b.n	8003c34 <MX25UM51245G_AutoPollingMemReady+0x62>
 8003c32:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8003c34:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <MX25UM51245G_AutoPollingMemReady+0x6e>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	e000      	b.n	8003c42 <MX25UM51245G_AutoPollingMemReady+0x70>
 8003c40:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8003c42:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_STATUS_REG_CMD
                                 : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <MX25UM51245G_AutoPollingMemReady+0x7c>
 8003c4a:	2305      	movs	r3, #5
 8003c4c:	e001      	b.n	8003c52 <MX25UM51245G_AutoPollingMemReady+0x80>
 8003c4e:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <MX25UM51245G_AutoPollingMemReady+0x8c>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e001      	b.n	8003c62 <MX25UM51245G_AutoPollingMemReady+0x90>
 8003c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 8003c64:	78bb      	ldrb	r3, [r7, #2]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d102      	bne.n	8003c70 <MX25UM51245G_AutoPollingMemReady+0x9e>
 8003c6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c6e:	e000      	b.n	8003c72 <MX25UM51245G_AutoPollingMemReady+0xa0>
 8003c70:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 8003c72:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8003c74:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003c78:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <MX25UM51245G_AutoPollingMemReady+0xbc>
 8003c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c8c:	e001      	b.n	8003c92 <MX25UM51245G_AutoPollingMemReady+0xc0>
 8003c8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003c92:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 8003c94:	78bb      	ldrb	r3, [r7, #2]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d102      	bne.n	8003ca0 <MX25UM51245G_AutoPollingMemReady+0xce>
 8003c9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c9e:	e000      	b.n	8003ca2 <MX25UM51245G_AutoPollingMemReady+0xd0>
 8003ca0:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 8003ca2:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d006      	beq.n	8003cb8 <MX25UM51245G_AutoPollingMemReady+0xe6>
 8003caa:	78bb      	ldrb	r3, [r7, #2]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <MX25UM51245G_AutoPollingMemReady+0xe2>
 8003cb0:	2305      	movs	r3, #5
 8003cb2:	e002      	b.n	8003cba <MX25UM51245G_AutoPollingMemReady+0xe8>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	e000      	b.n	8003cba <MX25UM51245G_AutoPollingMemReady+0xe8>
 8003cb8:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
 8003cba:	667b      	str	r3, [r7, #100]	; 0x64
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003cbc:	78bb      	ldrb	r3, [r7, #2]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <MX25UM51245G_AutoPollingMemReady+0xf4>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e000      	b.n	8003cc8 <MX25UM51245G_AutoPollingMemReady+0xf6>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 8003cca:	78bb      	ldrb	r3, [r7, #2]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d102      	bne.n	8003cd6 <MX25UM51245G_AutoPollingMemReady+0x104>
 8003cd0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003cd4:	e000      	b.n	8003cd8 <MX25UM51245G_AutoPollingMemReady+0x106>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.MatchValue    = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_XSPI_MATCH_MODE_AND;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
  s_config.IntervalTime  = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
 8003cea:	2310      	movs	r3, #16
 8003cec:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 8003cee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cf2:	61bb      	str	r3, [r7, #24]

  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cf4:	f107 0320 	add.w	r3, r7, #32
 8003cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f00e f924 	bl	8011f4c <HAL_XSPI_Command>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <MX25UM51245G_AutoPollingMemReady+0x13e>
  {
    return MX25UM51245G_ERROR;
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0e:	e00e      	b.n	8003d2e <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d10:	f107 030c 	add.w	r3, r7, #12
 8003d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d18:	4619      	mov	r1, r3
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f00e fb18 	bl	8012350 <HAL_XSPI_AutoPolling>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <MX25UM51245G_AutoPollingMemReady+0x15a>
  {
    return MX25UM51245G_ERROR;
 8003d26:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2a:	e000      	b.n	8003d2e <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  return MX25UM51245G_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3770      	adds	r7, #112	; 0x70
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <MX25UM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                               MX25UM51245G_AddressSize_t AddressSize)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b098      	sub	sp, #96	; 0x60
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	70fb      	strb	r3, [r7, #3]
 8003d42:	4613      	mov	r3, r2
 8003d44:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef      s_command = {0};
 8003d46:	f107 0310 	add.w	r3, r7, #16
 8003d4a:	2250      	movs	r2, #80	; 0x50
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f024 fa37 	bl	80281c2 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003d54:	f107 0308 	add.w	r3, r7, #8
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d105      	bne.n	8003d70 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3a>
 8003d64:	78bb      	ldrb	r3, [r7, #2]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3a>
  {
    return MX25UM51245G_ERROR;
 8003d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6e:	e088      	b.n	8003e82 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
 8003d70:	2301      	movs	r3, #1
 8003d72:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <MX25UM51245G_EnableSTRMemoryMappedMode+0x4c>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <MX25UM51245G_EnableSTRMemoryMappedMode+0x4e>
 8003d82:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8003d84:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8003d8a:	78fb      	ldrb	r3, [r7, #3]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <MX25UM51245G_EnableSTRMemoryMappedMode+0x5e>
 8003d90:	2300      	movs	r3, #0
 8003d92:	e000      	b.n	8003d96 <MX25UM51245G_EnableSTRMemoryMappedMode+0x60>
 8003d94:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8003d96:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_FAST_READ_CMD
                                    : MX25UM51245G_4_BYTE_ADDR_FAST_READ_CMD)
                                 : MX25UM51245G_OCTA_READ_CMD;
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <MX25UM51245G_EnableSTRMemoryMappedMode+0x76>
 8003d9e:	78bb      	ldrb	r3, [r7, #2]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <MX25UM51245G_EnableSTRMemoryMappedMode+0x72>
 8003da4:	230b      	movs	r3, #11
 8003da6:	e003      	b.n	8003db0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7a>
 8003da8:	230c      	movs	r3, #12
 8003daa:	e001      	b.n	8003db0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7a>
 8003dac:	f64e 4313 	movw	r3, #60435	; 0xec13
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8003db0:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <MX25UM51245G_EnableSTRMemoryMappedMode+0x88>
 8003db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dbc:	e001      	b.n	8003dc2 <MX25UM51245G_EnableSTRMemoryMappedMode+0x8c>
 8003dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
                                 ? HAL_XSPI_ADDRESS_24_BITS
                                 : HAL_XSPI_ADDRESS_32_BITS;
 8003dc8:	78bb      	ldrb	r3, [r7, #2]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d102      	bne.n	8003dd4 <MX25UM51245G_EnableSTRMemoryMappedMode+0x9e>
 8003dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dd2:	e001      	b.n	8003dd8 <MX25UM51245G_EnableSTRMemoryMappedMode+0xa2>
 8003dd4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
 8003dd8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <MX25UM51245G_EnableSTRMemoryMappedMode+0xb4>
 8003de4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003de8:	e001      	b.n	8003dee <MX25UM51245G_EnableSTRMemoryMappedMode+0xb8>
 8003dea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003dee:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
 8003df0:	2300      	movs	r3, #0
 8003df2:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <MX25UM51245G_EnableSTRMemoryMappedMode+0xc8>
 8003dfa:	2308      	movs	r3, #8
 8003dfc:	e000      	b.n	8003e00 <MX25UM51245G_EnableSTRMemoryMappedMode+0xca>
 8003dfe:	2306      	movs	r3, #6
 8003e00:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003e06:	2300      	movs	r3, #0
 8003e08:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e0a:	f107 0310 	add.w	r3, r7, #16
 8003e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e12:	4619      	mov	r1, r3
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f00e f899 	bl	8011f4c <HAL_XSPI_Command>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <MX25UM51245G_EnableSTRMemoryMappedMode+0xf0>
  {
    return MX25UM51245G_ERROR;
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	e02d      	b.n	8003e82 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
 8003e26:	2302      	movs	r3, #2
 8003e28:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_PAGE_PROG_CMD
                                    : MX25UM51245G_4_BYTE_PAGE_PROG_CMD)
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
 8003e2a:	78fb      	ldrb	r3, [r7, #3]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <MX25UM51245G_EnableSTRMemoryMappedMode+0x108>
 8003e30:	78bb      	ldrb	r3, [r7, #2]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <MX25UM51245G_EnableSTRMemoryMappedMode+0x104>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e003      	b.n	8003e42 <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
 8003e3a:	2312      	movs	r3, #18
 8003e3c:	e001      	b.n	8003e42 <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
 8003e3e:	f241 23ed 	movw	r3, #4845	; 0x12ed
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8003e42:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e48:	f107 0310 	add.w	r3, r7, #16
 8003e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e50:	4619      	mov	r1, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f00e f87a 	bl	8011f4c <HAL_XSPI_Command>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <MX25UM51245G_EnableSTRMemoryMappedMode+0x12e>
  {
    return MX25UM51245G_ERROR;
 8003e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e62:	e00e      	b.n	8003e82 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60bb      	str	r3, [r7, #8]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8003e68:	f107 0308 	add.w	r3, r7, #8
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f00e faf8 	bl	8012464 <HAL_XSPI_MemoryMapped>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14a>
  {
    return MX25UM51245G_ERROR;
 8003e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7e:	e000      	b.n	8003e82 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  return MX25UM51245G_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3760      	adds	r7, #96	; 0x60
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <MX25UM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b098      	sub	sp, #96	; 0x60
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	460b      	mov	r3, r1
 8003e94:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef      s_command = {0};
 8003e96:	f107 0310 	add.w	r3, r7, #16
 8003e9a:	2250      	movs	r2, #80	; 0x50
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f024 f98f 	bl	80281c2 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003ea4:	f107 0308 	add.w	r3, r7, #8
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 8003eb6:	2304      	movs	r3, #4
 8003eb8:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 8003eba:	2308      	movs	r3, #8
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = HAL_XSPI_INSTRUCTION_16_BITS;
 8003ebe:	2310      	movs	r3, #16
 8003ec0:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25UM51245G_OCTA_READ_DTR_CMD;
 8003ec2:	f64e 6311 	movw	r3, #60945	; 0xee11
 8003ec6:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8003ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8003ece:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ed2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8003ed4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003ed8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
 8003ede:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 8003ee4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ee8:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8003eea:	2306      	movs	r3, #6
 8003eec:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
 8003eee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003ef2:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ef8:	f107 0310 	add.w	r3, r7, #16
 8003efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f00:	4619      	mov	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f00e f822 	bl	8011f4c <HAL_XSPI_Command>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <MX25UM51245G_EnableDTRMemoryMappedMode+0x8a>
  {
    return MX25UM51245G_ERROR;
 8003f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f12:	e025      	b.n	8003f60 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
 8003f14:	2302      	movs	r3, #2
 8003f16:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
 8003f18:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8003f1c:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_XSPI_DQS_DISABLE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f26:	f107 0310 	add.w	r3, r7, #16
 8003f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f00e f80b 	bl	8011f4c <HAL_XSPI_Command>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <MX25UM51245G_EnableDTRMemoryMappedMode+0xb8>
  {
    return MX25UM51245G_ERROR;
 8003f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f40:	e00e      	b.n	8003f60 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60bb      	str	r3, [r7, #8]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8003f46:	f107 0308 	add.w	r3, r7, #8
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f00e fa89 	bl	8012464 <HAL_XSPI_MemoryMapped>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <MX25UM51245G_EnableDTRMemoryMappedMode+0xd4>
  {
    return MX25UM51245G_ERROR;
 8003f58:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5c:	e000      	b.n	8003f60 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  return MX25UM51245G_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3760      	adds	r7, #96	; 0x60
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <MX25UM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b09c      	sub	sp, #112	; 0x70
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	70fb      	strb	r3, [r7, #3]
 8003f74:	4613      	mov	r3, r2
 8003f76:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef     s_command = {0};
 8003f78:	f107 0320 	add.w	r3, r7, #32
 8003f7c:	2250      	movs	r2, #80	; 0x50
 8003f7e:	2100      	movs	r1, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f024 f91e 	bl	80281c2 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
 8003f86:	f107 030c 	add.w	r3, r7, #12
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	605a      	str	r2, [r3, #4]
 8003f90:	609a      	str	r2, [r3, #8]
 8003f92:	60da      	str	r2, [r3, #12]
 8003f94:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d105      	bne.n	8003fa8 <MX25UM51245G_WriteEnable+0x40>
 8003f9c:	78bb      	ldrb	r3, [r7, #2]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d102      	bne.n	8003fa8 <MX25UM51245G_WriteEnable+0x40>
  {
    return MX25UM51245G_ERROR;
 8003fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa6:	e0ab      	b.n	8004100 <MX25UM51245G_WriteEnable+0x198>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	623b      	str	r3, [r7, #32]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <MX25UM51245G_WriteEnable+0x52>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <MX25UM51245G_WriteEnable+0x54>
 8003fba:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003fbe:	78bb      	ldrb	r3, [r7, #2]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <MX25UM51245G_WriteEnable+0x60>
 8003fc4:	2308      	movs	r3, #8
 8003fc6:	e000      	b.n	8003fca <MX25UM51245G_WriteEnable+0x62>
 8003fc8:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8003fca:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <MX25UM51245G_WriteEnable+0x6e>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <MX25UM51245G_WriteEnable+0x70>
 8003fd6:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8003fd8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_ENABLE_CMD
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <MX25UM51245G_WriteEnable+0x7c>
 8003fe0:	2306      	movs	r3, #6
 8003fe2:	e001      	b.n	8003fe8 <MX25UM51245G_WriteEnable+0x80>
 8003fe4:	f240 63f9 	movw	r3, #1785	; 0x6f9
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003ffe:	2300      	movs	r3, #0
 8004000:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004002:	f107 0320 	add.w	r3, r7, #32
 8004006:	f241 3288 	movw	r2, #5000	; 0x1388
 800400a:	4619      	mov	r1, r3
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f00d ff9d 	bl	8011f4c <HAL_XSPI_Command>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <MX25UM51245G_WriteEnable+0xb6>
  {
    return MX25UM51245G_ERROR;
 8004018:	f04f 33ff 	mov.w	r3, #4294967295
 800401c:	e070      	b.n	8004100 <MX25UM51245G_WriteEnable+0x198>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
                             ? MX25UM51245G_READ_STATUS_REG_CMD
                             : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <MX25UM51245G_WriteEnable+0xc0>
 8004024:	2305      	movs	r3, #5
 8004026:	e001      	b.n	800402c <MX25UM51245G_WriteEnable+0xc4>
 8004028:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
 800402e:	78fb      	ldrb	r3, [r7, #3]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <MX25UM51245G_WriteEnable+0xd0>
 8004034:	2300      	movs	r3, #0
 8004036:	e001      	b.n	800403c <MX25UM51245G_WriteEnable+0xd4>
 8004038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800403c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                             ? HAL_XSPI_ADDRESS_DTR_ENABLE
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
 800403e:	78bb      	ldrb	r3, [r7, #2]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d102      	bne.n	800404a <MX25UM51245G_WriteEnable+0xe2>
 8004044:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004048:	e000      	b.n	800404c <MX25UM51245G_WriteEnable+0xe4>
 800404a:	2300      	movs	r3, #0
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 800404c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
 800404e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004052:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <MX25UM51245G_WriteEnable+0xfc>
 800405e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004062:	e001      	b.n	8004068 <MX25UM51245G_WriteEnable+0x100>
 8004064:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004068:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDTRMode    = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
 800406a:	78bb      	ldrb	r3, [r7, #2]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d102      	bne.n	8004076 <MX25UM51245G_WriteEnable+0x10e>
 8004070:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004074:	e000      	b.n	8004078 <MX25UM51245G_WriteEnable+0x110>
 8004076:	2300      	movs	r3, #0
 8004078:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
                             ? 0U
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d006      	beq.n	800408e <MX25UM51245G_WriteEnable+0x126>
 8004080:	78bb      	ldrb	r3, [r7, #2]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <MX25UM51245G_WriteEnable+0x122>
 8004086:	2305      	movs	r3, #5
 8004088:	e002      	b.n	8004090 <MX25UM51245G_WriteEnable+0x128>
 800408a:	2304      	movs	r3, #4
 800408c:	e000      	b.n	8004090 <MX25UM51245G_WriteEnable+0x128>
 800408e:	2300      	movs	r3, #0
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
 8004090:	667b      	str	r3, [r7, #100]	; 0x64
                                ? DUMMY_CYCLES_REG_OCTAL_DTR
                                : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 8004092:	78bb      	ldrb	r3, [r7, #2]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <MX25UM51245G_WriteEnable+0x134>
 8004098:	2302      	movs	r3, #2
 800409a:	e000      	b.n	800409e <MX25UM51245G_WriteEnable+0x136>
 800409c:	2301      	movs	r3, #1
 800409e:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 80040a0:	78bb      	ldrb	r3, [r7, #2]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d102      	bne.n	80040ac <MX25UM51245G_WriteEnable+0x144>
 80040a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80040aa:	e000      	b.n	80040ae <MX25UM51245G_WriteEnable+0x146>
 80040ac:	2300      	movs	r3, #0
 80040ae:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040b0:	f107 0320 	add.w	r3, r7, #32
 80040b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b8:	4619      	mov	r1, r3
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f00d ff46 	bl	8011f4c <HAL_XSPI_Command>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <MX25UM51245G_WriteEnable+0x164>
  {
    return MX25UM51245G_ERROR;
 80040c6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ca:	e019      	b.n	8004100 <MX25UM51245G_WriteEnable+0x198>
  }

  s_config.MatchValue      = 2U;
 80040cc:	2302      	movs	r3, #2
 80040ce:	60fb      	str	r3, [r7, #12]
  s_config.MatchMask       = 2U;
 80040d0:	2302      	movs	r3, #2
 80040d2:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]
  s_config.IntervalTime    = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
 80040d8:	2310      	movs	r3, #16
 80040da:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 80040dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040e0:	61bb      	str	r3, [r7, #24]

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040e2:	f107 030c 	add.w	r3, r7, #12
 80040e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ea:	4619      	mov	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f00e f92f 	bl	8012350 <HAL_XSPI_AutoPolling>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <MX25UM51245G_WriteEnable+0x196>
  {
    return MX25UM51245G_ERROR;
 80040f8:	f04f 33ff 	mov.w	r3, #4294967295
 80040fc:	e000      	b.n	8004100 <MX25UM51245G_WriteEnable+0x198>
  }

  return MX25UM51245G_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3770      	adds	r7, #112	; 0x70
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <MX25UM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25UM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                       MX25UM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b098      	sub	sp, #96	; 0x60
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	607b      	str	r3, [r7, #4]
 8004112:	460b      	mov	r3, r1
 8004114:	72fb      	strb	r3, [r7, #11]
 8004116:	4613      	mov	r3, r2
 8004118:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 800411a:	f107 0310 	add.w	r3, r7, #16
 800411e:	2250      	movs	r2, #80	; 0x50
 8004120:	2100      	movs	r1, #0
 8004122:	4618      	mov	r0, r3
 8004124:	f024 f84d 	bl	80281c2 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8004128:	7afb      	ldrb	r3, [r7, #11]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d105      	bne.n	800413a <MX25UM51245G_WriteCfg2Register+0x32>
 800412e:	7abb      	ldrb	r3, [r7, #10]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d102      	bne.n	800413a <MX25UM51245G_WriteCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
 8004134:	f04f 33ff 	mov.w	r3, #4294967295
 8004138:	e077      	b.n	800422a <MX25UM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 800413a:	2300      	movs	r3, #0
 800413c:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004142:	7afb      	ldrb	r3, [r7, #11]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <MX25UM51245G_WriteCfg2Register+0x44>
 8004148:	2301      	movs	r3, #1
 800414a:	e000      	b.n	800414e <MX25UM51245G_WriteCfg2Register+0x46>
 800414c:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 800414e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8004150:	7abb      	ldrb	r3, [r7, #10]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <MX25UM51245G_WriteCfg2Register+0x52>
 8004156:	2308      	movs	r3, #8
 8004158:	e000      	b.n	800415c <MX25UM51245G_WriteCfg2Register+0x54>
 800415a:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 800415e:	7afb      	ldrb	r3, [r7, #11]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <MX25UM51245G_WriteCfg2Register+0x60>
 8004164:	2300      	movs	r3, #0
 8004166:	e000      	b.n	800416a <MX25UM51245G_WriteCfg2Register+0x62>
 8004168:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 800416a:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_WRITE_CFG_REG2_CMD;
 800416c:	7afb      	ldrb	r3, [r7, #11]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <MX25UM51245G_WriteCfg2Register+0x6e>
 8004172:	2372      	movs	r3, #114	; 0x72
 8004174:	e001      	b.n	800417a <MX25UM51245G_WriteCfg2Register+0x72>
 8004176:	f247 238d 	movw	r3, #29325	; 0x728d
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 800417a:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 800417c:	7afb      	ldrb	r3, [r7, #11]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <MX25UM51245G_WriteCfg2Register+0x80>
 8004182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004186:	e001      	b.n	800418c <MX25UM51245G_WriteCfg2Register+0x84>
 8004188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800418c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 800418e:	7abb      	ldrb	r3, [r7, #10]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d102      	bne.n	800419a <MX25UM51245G_WriteCfg2Register+0x92>
 8004194:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004198:	e000      	b.n	800419c <MX25UM51245G_WriteCfg2Register+0x94>
 800419a:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 800419c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 800419e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80041a2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 80041ac:	7afb      	ldrb	r3, [r7, #11]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d102      	bne.n	80041b8 <MX25UM51245G_WriteCfg2Register+0xb0>
 80041b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041b6:	e001      	b.n	80041bc <MX25UM51245G_WriteCfg2Register+0xb4>
 80041b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80041bc:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 80041be:	7abb      	ldrb	r3, [r7, #10]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d102      	bne.n	80041ca <MX25UM51245G_WriteCfg2Register+0xc2>
 80041c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041c8:	e000      	b.n	80041cc <MX25UM51245G_WriteCfg2Register+0xc4>
 80041ca:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 80041cc:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
 80041d2:	7afb      	ldrb	r3, [r7, #11]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d006      	beq.n	80041e6 <MX25UM51245G_WriteCfg2Register+0xde>
 80041d8:	7abb      	ldrb	r3, [r7, #10]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <MX25UM51245G_WriteCfg2Register+0xda>
 80041de:	2302      	movs	r3, #2
 80041e0:	e002      	b.n	80041e8 <MX25UM51245G_WriteCfg2Register+0xe0>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <MX25UM51245G_WriteCfg2Register+0xe0>
 80041e6:	2301      	movs	r3, #1
 80041e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80041ee:	2300      	movs	r3, #0
 80041f0:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041f2:	f107 0310 	add.w	r3, r7, #16
 80041f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fa:	4619      	mov	r1, r3
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f00d fea5 	bl	8011f4c <HAL_XSPI_Command>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <MX25UM51245G_WriteCfg2Register+0x106>
  {
    return MX25UM51245G_ERROR;
 8004208:	f04f 33ff 	mov.w	r3, #4294967295
 800420c:	e00d      	b.n	800422a <MX25UM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800420e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004212:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f00d ff84 	bl	8012124 <HAL_XSPI_Transmit>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <MX25UM51245G_WriteCfg2Register+0x120>
  {
    return MX25UM51245G_ERROR;
 8004222:	f04f 33ff 	mov.w	r3, #4294967295
 8004226:	e000      	b.n	800422a <MX25UM51245G_WriteCfg2Register+0x122>
  }

  return MX25UM51245G_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3760      	adds	r7, #96	; 0x60
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <MX25UM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25UM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                      MX25UM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b098      	sub	sp, #96	; 0x60
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	72fb      	strb	r3, [r7, #11]
 8004240:	4613      	mov	r3, r2
 8004242:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 8004244:	f107 0310 	add.w	r3, r7, #16
 8004248:	2250      	movs	r2, #80	; 0x50
 800424a:	2100      	movs	r1, #0
 800424c:	4618      	mov	r0, r3
 800424e:	f023 ffb8 	bl	80281c2 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8004252:	7afb      	ldrb	r3, [r7, #11]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d105      	bne.n	8004264 <MX25UM51245G_ReadCfg2Register+0x32>
 8004258:	7abb      	ldrb	r3, [r7, #10]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d102      	bne.n	8004264 <MX25UM51245G_ReadCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
 800425e:	f04f 33ff 	mov.w	r3, #4294967295
 8004262:	e081      	b.n	8004368 <MX25UM51245G_ReadCfg2Register+0x136>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004264:	2300      	movs	r3, #0
 8004266:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 800426c:	7afb      	ldrb	r3, [r7, #11]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <MX25UM51245G_ReadCfg2Register+0x44>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <MX25UM51245G_ReadCfg2Register+0x46>
 8004276:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8004278:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800427a:	7abb      	ldrb	r3, [r7, #10]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <MX25UM51245G_ReadCfg2Register+0x52>
 8004280:	2308      	movs	r3, #8
 8004282:	e000      	b.n	8004286 <MX25UM51245G_ReadCfg2Register+0x54>
 8004284:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8004288:	7afb      	ldrb	r3, [r7, #11]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <MX25UM51245G_ReadCfg2Register+0x60>
 800428e:	2300      	movs	r3, #0
 8004290:	e000      	b.n	8004294 <MX25UM51245G_ReadCfg2Register+0x62>
 8004292:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004294:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_READ_CFG_REG2_CMD;
 8004296:	7afb      	ldrb	r3, [r7, #11]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <MX25UM51245G_ReadCfg2Register+0x6e>
 800429c:	2371      	movs	r3, #113	; 0x71
 800429e:	e001      	b.n	80042a4 <MX25UM51245G_ReadCfg2Register+0x72>
 80042a0:	f247 138e 	movw	r3, #29070	; 0x718e
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 80042a4:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 80042a6:	7afb      	ldrb	r3, [r7, #11]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d102      	bne.n	80042b2 <MX25UM51245G_ReadCfg2Register+0x80>
 80042ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042b0:	e001      	b.n	80042b6 <MX25UM51245G_ReadCfg2Register+0x84>
 80042b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 80042b8:	7abb      	ldrb	r3, [r7, #10]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d102      	bne.n	80042c4 <MX25UM51245G_ReadCfg2Register+0x92>
 80042be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042c2:	e000      	b.n	80042c6 <MX25UM51245G_ReadCfg2Register+0x94>
 80042c4:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 80042c6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 80042c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80042cc:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 80042d6:	7afb      	ldrb	r3, [r7, #11]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d102      	bne.n	80042e2 <MX25UM51245G_ReadCfg2Register+0xb0>
 80042dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042e0:	e001      	b.n	80042e6 <MX25UM51245G_ReadCfg2Register+0xb4>
 80042e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80042e6:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 80042e8:	7abb      	ldrb	r3, [r7, #10]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d102      	bne.n	80042f4 <MX25UM51245G_ReadCfg2Register+0xc2>
 80042ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042f2:	e000      	b.n	80042f6 <MX25UM51245G_ReadCfg2Register+0xc4>
 80042f4:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 80042f6:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
 80042f8:	7afb      	ldrb	r3, [r7, #11]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d006      	beq.n	800430c <MX25UM51245G_ReadCfg2Register+0xda>
 80042fe:	7abb      	ldrb	r3, [r7, #10]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <MX25UM51245G_ReadCfg2Register+0xd6>
 8004304:	2305      	movs	r3, #5
 8004306:	e002      	b.n	800430e <MX25UM51245G_ReadCfg2Register+0xdc>
 8004308:	2304      	movs	r3, #4
 800430a:	e000      	b.n	800430e <MX25UM51245G_ReadCfg2Register+0xdc>
 800430c:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
 800430e:	657b      	str	r3, [r7, #84]	; 0x54
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 8004310:	7abb      	ldrb	r3, [r7, #10]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <MX25UM51245G_ReadCfg2Register+0xe8>
 8004316:	2302      	movs	r3, #2
 8004318:	e000      	b.n	800431c <MX25UM51245G_ReadCfg2Register+0xea>
 800431a:	2301      	movs	r3, #1
 800431c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 800431e:	7abb      	ldrb	r3, [r7, #10]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d102      	bne.n	800432a <MX25UM51245G_ReadCfg2Register+0xf8>
 8004324:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004328:	e000      	b.n	800432c <MX25UM51245G_ReadCfg2Register+0xfa>
 800432a:	2300      	movs	r3, #0
 800432c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 800432e:	2300      	movs	r3, #0
 8004330:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004332:	f107 0310 	add.w	r3, r7, #16
 8004336:	f241 3288 	movw	r2, #5000	; 0x1388
 800433a:	4619      	mov	r1, r3
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f00d fe05 	bl	8011f4c <HAL_XSPI_Command>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <MX25UM51245G_ReadCfg2Register+0x11c>
  {
    return MX25UM51245G_ERROR;
 8004348:	f04f 33ff 	mov.w	r3, #4294967295
 800434c:	e00c      	b.n	8004368 <MX25UM51245G_ReadCfg2Register+0x136>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800434e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004352:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f00d ff58 	bl	801220a <HAL_XSPI_Receive>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <MX25UM51245G_ReadCfg2Register+0x134>
  {
    return MX25UM51245G_ERROR;
 8004360:	f04f 33ff 	mov.w	r3, #4294967295
 8004364:	e000      	b.n	8004368 <MX25UM51245G_ReadCfg2Register+0x136>
  }

  return MX25UM51245G_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3760      	adds	r7, #96	; 0x60
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <MX25UM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b096      	sub	sp, #88	; 0x58
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	70fb      	strb	r3, [r7, #3]
 800437c:	4613      	mov	r3, r2
 800437e:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
 8004380:	f107 0308 	add.w	r3, r7, #8
 8004384:	2250      	movs	r2, #80	; 0x50
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f023 ff1a 	bl	80281c2 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <MX25UM51245G_ResetEnable+0x30>
 8004394:	78bb      	ldrb	r3, [r7, #2]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d102      	bne.n	80043a0 <MX25UM51245G_ResetEnable+0x30>
  {
    return MX25UM51245G_ERROR;
 800439a:	f04f 33ff 	mov.w	r3, #4294967295
 800439e:	e03b      	b.n	8004418 <MX25UM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <MX25UM51245G_ResetEnable+0x42>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <MX25UM51245G_ResetEnable+0x44>
 80043b2:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 80043b4:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80043b6:	78bb      	ldrb	r3, [r7, #2]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <MX25UM51245G_ResetEnable+0x50>
 80043bc:	2308      	movs	r3, #8
 80043be:	e000      	b.n	80043c2 <MX25UM51245G_ResetEnable+0x52>
 80043c0:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 80043c2:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <MX25UM51245G_ResetEnable+0x5e>
 80043ca:	2300      	movs	r3, #0
 80043cc:	e000      	b.n	80043d0 <MX25UM51245G_ResetEnable+0x60>
 80043ce:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 80043d0:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_ENABLE_CMD
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <MX25UM51245G_ResetEnable+0x6c>
 80043d8:	2366      	movs	r3, #102	; 0x66
 80043da:	e001      	b.n	80043e0 <MX25UM51245G_ResetEnable+0x70>
 80043dc:	f246 6399 	movw	r3, #26265	; 0x6699
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 80043e0:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80043e6:	2300      	movs	r3, #0
 80043e8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 80043ea:	2300      	movs	r3, #0
 80043ec:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80043f6:	2300      	movs	r3, #0
 80043f8:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043fa:	f107 0308 	add.w	r3, r7, #8
 80043fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004402:	4619      	mov	r1, r3
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f00d fda1 	bl	8011f4c <HAL_XSPI_Command>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <MX25UM51245G_ResetEnable+0xa6>
  {
    return MX25UM51245G_ERROR;
 8004410:	f04f 33ff 	mov.w	r3, #4294967295
 8004414:	e000      	b.n	8004418 <MX25UM51245G_ResetEnable+0xa8>
  }

  return MX25UM51245G_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3758      	adds	r7, #88	; 0x58
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <MX25UM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b096      	sub	sp, #88	; 0x58
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
 800442c:	4613      	mov	r3, r2
 800442e:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
 8004430:	f107 0308 	add.w	r3, r7, #8
 8004434:	2250      	movs	r2, #80	; 0x50
 8004436:	2100      	movs	r1, #0
 8004438:	4618      	mov	r0, r3
 800443a:	f023 fec2 	bl	80281c2 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d105      	bne.n	8004450 <MX25UM51245G_ResetMemory+0x30>
 8004444:	78bb      	ldrb	r3, [r7, #2]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d102      	bne.n	8004450 <MX25UM51245G_ResetMemory+0x30>
  {
    return MX25UM51245G_ERROR;
 800444a:	f04f 33ff 	mov.w	r3, #4294967295
 800444e:	e03b      	b.n	80044c8 <MX25UM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004450:	2300      	movs	r3, #0
 8004452:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <MX25UM51245G_ResetMemory+0x42>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <MX25UM51245G_ResetMemory+0x44>
 8004462:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8004464:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8004466:	78bb      	ldrb	r3, [r7, #2]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <MX25UM51245G_ResetMemory+0x50>
 800446c:	2308      	movs	r3, #8
 800446e:	e000      	b.n	8004472 <MX25UM51245G_ResetMemory+0x52>
 8004470:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004472:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <MX25UM51245G_ResetMemory+0x5e>
 800447a:	2300      	movs	r3, #0
 800447c:	e000      	b.n	8004480 <MX25UM51245G_ResetMemory+0x60>
 800447e:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004480:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_MEMORY_CMD
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <MX25UM51245G_ResetMemory+0x6c>
 8004488:	2399      	movs	r3, #153	; 0x99
 800448a:	e001      	b.n	8004490 <MX25UM51245G_ResetMemory+0x70>
 800448c:	f649 1366 	movw	r3, #39270	; 0x9966
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004490:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8004492:	2300      	movs	r3, #0
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8004496:	2300      	movs	r3, #0
 8004498:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 800449a:	2300      	movs	r3, #0
 800449c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80044a6:	2300      	movs	r3, #0
 80044a8:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044aa:	f107 0308 	add.w	r3, r7, #8
 80044ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b2:	4619      	mov	r1, r3
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f00d fd49 	bl	8011f4c <HAL_XSPI_Command>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <MX25UM51245G_ResetMemory+0xa6>
  {
    return MX25UM51245G_ERROR;
 80044c0:	f04f 33ff 	mov.w	r3, #4294967295
 80044c4:	e000      	b.n	80044c8 <MX25UM51245G_ResetMemory+0xa8>
  }

  return MX25UM51245G_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3758      	adds	r7, #88	; 0x58
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <SITRONIX_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t SITRONIX_RegisterBusIO(SITRONIX_Object_t *pObj, SITRONIX_IO_t *pIO)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d103      	bne.n	80044e8 <SITRONIX_RegisterBusIO+0x18>
  {
    ret = SITRONIX_ERROR;
 80044e0:	f04f 33ff 	mov.w	r3, #4294967295
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	e033      	b.n	8004550 <SITRONIX_RegisterBusIO+0x80>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	891a      	ldrh	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadData  = pIO->ReadData;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	699a      	ldr	r2, [r3, #24]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a0e      	ldr	r2, [pc, #56]	; (800455c <SITRONIX_RegisterBusIO+0x8c>)
 8004524:	621a      	str	r2, [r3, #32]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a0d      	ldr	r2, [pc, #52]	; (8004560 <SITRONIX_RegisterBusIO+0x90>)
 800452a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.ReadData = ReadDataWrap;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a0d      	ldr	r2, [pc, #52]	; (8004564 <SITRONIX_RegisterBusIO+0x94>)
 8004530:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.handle   = pObj;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	629a      	str	r2, [r3, #40]	; 0x28

    if (pObj->IO.Init != NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d004      	beq.n	800454a <SITRONIX_RegisterBusIO+0x7a>
    {
      ret = pObj->IO.Init();
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4798      	blx	r3
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	e002      	b.n	8004550 <SITRONIX_RegisterBusIO+0x80>
    }
    else
    {
      ret = SITRONIX_ERROR;
 800454a:	f04f 33ff 	mov.w	r3, #4294967295
 800454e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004550:	68fb      	ldr	r3, [r7, #12]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	0800480b 	.word	0x0800480b
 8004560:	0800483f 	.word	0x0800483f
 8004564:	08004873 	.word	0x08004873

08004568 <SITRONIX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to SITRONIX sensor capabilities
  * @retval Component status
  */
int32_t SITRONIX_GetCapabilities(SITRONIX_Object_t *pObj, SITRONIX_Capabilities_t *Capabilities)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2201      	movs	r2, #1
 8004576:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2200      	movs	r2, #0
 800457c:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = SITRONIX_MAX_DETECTABLE_TOUCH;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	220a      	movs	r2, #10
 8004582:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = SITRONIX_MAX_X_LENGTH;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800458a:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = SITRONIX_MAX_Y_LENGTH;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004592:	609a      	str	r2, [r3, #8]

  return SITRONIX_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <SITRONIX_Init>:
  *         from MCU to SITRONIX : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_Init(SITRONIX_Object_t *pObj)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b08a      	sub	sp, #40	; 0x28
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]

  int32_t ret = SITRONIX_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t data[28U];

  if (pObj->IsInitialized == 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d114      	bne.n	80045e2 <SITRONIX_Init+0x40>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4798      	blx	r3

    if (sitronix_read_data(&pObj->Ctx, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	331c      	adds	r3, #28
 80045c2:	f107 0108 	add.w	r1, r7, #8
 80045c6:	221c      	movs	r2, #28
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 f97e 	bl	80048ca <sitronix_read_data>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <SITRONIX_Init+0x38>
    {
      ret = SITRONIX_ERROR;
 80045d4:	f04f 33ff 	mov.w	r3, #4294967295
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    pObj->IsInitialized = 1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  if (ret != SITRONIX_OK)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <SITRONIX_Init+0x4c>
  {
    ret = SITRONIX_ERROR;
 80045e8:	f04f 33ff 	mov.w	r3, #4294967295
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3728      	adds	r7, #40	; 0x28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <SITRONIX_DeInit>:
  *         from MCU to SITRONIX : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_DeInit(SITRONIX_Object_t *pObj)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004606:	2b01      	cmp	r3, #1
 8004608:	d103      	bne.n	8004612 <SITRONIX_DeInit+0x1a>
  {
    pObj->IsInitialized = 0;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  return SITRONIX_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <SITRONIX_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval Component status
  */
int32_t SITRONIX_GestureConfig(SITRONIX_Object_t *pObj, SITRONIX_Gesture_Init_t *GestureInit)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  return SITRONIX_ERROR;
 800462a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800462e:	4618      	mov	r0, r3
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <SITRONIX_ReadID>:
  * @param  pObj Component object pointer
  * @param  Id Pointer to component's ID
  * @retval Component status
  */
int32_t SITRONIX_ReadID(SITRONIX_Object_t *pObj, uint32_t *Id)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b08c      	sub	sp, #48	; 0x30
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t data[28];
  uint8_t trial = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  for (trial = 0; trial < 10; trial++)
 800464e:	2300      	movs	r3, #0
 8004650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004654:	e01c      	b.n	8004690 <SITRONIX_ReadID+0x56>
  {
    if (sitronix_read_data(&pObj->Ctx, data, 28) != SITRONIX_OK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	331c      	adds	r3, #28
 800465a:	f107 010c 	add.w	r1, r7, #12
 800465e:	221c      	movs	r2, #28
 8004660:	4618      	mov	r0, r3
 8004662:	f000 f932 	bl	80048ca <sitronix_read_data>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <SITRONIX_ReadID+0x3a>
    {
      ret = SITRONIX_ERROR;
 800466c:	f04f 33ff 	mov.w	r3, #4294967295
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004672:	e008      	b.n	8004686 <SITRONIX_ReadID+0x4c>
    }
    else
    {
      if ((uint32_t)data[0] == SITRONIX_ID)
 8004674:	7b3b      	ldrb	r3, [r7, #12]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d105      	bne.n	8004686 <SITRONIX_ReadID+0x4c>
      {
        *Id = (uint32_t)data[0];
 800467a:	7b3b      	ldrb	r3, [r7, #12]
 800467c:	461a      	mov	r2, r3
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	601a      	str	r2, [r3, #0]
        return ret;
 8004682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004684:	e009      	b.n	800469a <SITRONIX_ReadID+0x60>
  for (trial = 0; trial < 10; trial++)
 8004686:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800468a:	3301      	adds	r3, #1
 800468c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004690:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004694:	2b09      	cmp	r3, #9
 8004696:	d9de      	bls.n	8004656 <SITRONIX_ReadID+0x1c>
      }
    }
  }
  return ret;
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800469a:	4618      	mov	r0, r3
 800469c:	3730      	adds	r7, #48	; 0x30
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <SITRONIX_GetState>:
  * @param  pObj Component object pointer
  * @param  State Single Touch structure pointer
  * @retval Component status.
  */
int32_t SITRONIX_GetState(SITRONIX_Object_t *pObj, SITRONIX_State_t *State)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b086      	sub	sp, #24
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]
  uint8_t data[5];

  if (sitronix_read_data(&pObj->Ctx, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	331c      	adds	r3, #28
 80046b4:	f107 010c 	add.w	r1, r7, #12
 80046b8:	2205      	movs	r2, #5
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 f905 	bl	80048ca <sitronix_read_data>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <SITRONIX_GetState+0x2c>
  {
    ret = SITRONIX_ERROR;
 80046c6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	e017      	b.n	80046fe <SITRONIX_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = ((((uint32_t)data[2] & SITRONIX_TOUCH_POS_LSB_MASK) << 4) | ((uint32_t)data[3]));
 80046ce:	7bbb      	ldrb	r3, [r7, #14]
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046d6:	7bfa      	ldrb	r2, [r7, #15]
 80046d8:	431a      	orrs	r2, r3
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & SITRONIX_TOUCH_POS_MSB_MASK) << 8) | ((uint32_t)data[4]);
 80046de:	7bbb      	ldrb	r3, [r7, #14]
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046e6:	7c3a      	ldrb	r2, [r7, #16]
 80046e8:	431a      	orrs	r2, r3
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	609a      	str	r2, [r3, #8]
	
    State->TouchDetected = ((data[2] & 0x80) == 0x80 ? 1 : 0);
 80046ee:	7bbb      	ldrb	r3, [r7, #14]
 80046f0:	b25b      	sxtb	r3, r3
 80046f2:	11db      	asrs	r3, r3, #7
 80046f4:	b25b      	sxtb	r3, r3
 80046f6:	f003 0201 	and.w	r2, r3, #1
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80046fe:	697b      	ldr	r3, [r7, #20]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <SITRONIX_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval Component status.
  */
int32_t SITRONIX_GetMultiTouchState(SITRONIX_Object_t *pObj, SITRONIX_MultiTouch_State_t *State)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	; 0x28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t  data[28];

  State->TouchDetected = (uint32_t)SITRONIX_DetectTouch(pObj);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f855 	bl	80047c6 <SITRONIX_DetectTouch>
 800471c:	4603      	mov	r3, r0
 800471e:	461a      	mov	r2, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	601a      	str	r2, [r3, #0]

  if (sitronix_read_reg(&pObj->Ctx, SITRONIX_P1_XH_REG, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f103 001c 	add.w	r0, r3, #28
 800472a:	f107 0208 	add.w	r2, r7, #8
 800472e:	231c      	movs	r3, #28
 8004730:	2109      	movs	r1, #9
 8004732:	f000 f8b3 	bl	800489c <sitronix_read_reg>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <SITRONIX_GetMultiTouchState+0x3a>
  {
    ret = SITRONIX_ERROR;
 800473c:	f04f 33ff 	mov.w	r3, #4294967295
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
  else
  {
    /* To be implemented */
  }

  return ret;
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004744:	4618      	mov	r0, r3
 8004746:	3728      	adds	r7, #40	; 0x28
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <SITRONIX_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId gesture ID
  * @retval Component status
  */
int32_t SITRONIX_GetGesture(SITRONIX_Object_t *pObj, uint8_t *GestureId)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004756:	f04f 33ff 	mov.w	r3, #4294967295
}
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <SITRONIX_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_EnableIT(SITRONIX_Object_t *pObj)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 800476e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <SITRONIX_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_DisableIT(SITRONIX_Object_t *pObj)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004786:	f04f 33ff 	mov.w	r3, #4294967295
}
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <SITRONIX_ITStatus>:
  *         @note : This feature is not supported by SITRONIX.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_ITStatus(SITRONIX_Object_t *pObj)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 800479e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <SITRONIX_ClearIT>:
  *         @note : This feature is not supported by SITRONIX.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_ClearIT(SITRONIX_Object_t *pObj)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 80047b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <SITRONIX_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be between 0 and10) or SITRONIX_ERROR
  *         in case of error
  */
static int32_t SITRONIX_DetectTouch(SITRONIX_Object_t *pObj)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b08c      	sub	sp, #48	; 0x30
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t data[28];

  if (sitronix_read_data(&pObj->Ctx, (uint8_t *)&data, 28) != SITRONIX_OK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	331c      	adds	r3, #28
 80047d8:	f107 010c 	add.w	r1, r7, #12
 80047dc:	221c      	movs	r2, #28
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 f873 	bl	80048ca <sitronix_read_data>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <SITRONIX_DetectTouch+0x2c>
  {
    ret = SITRONIX_ERROR;
 80047ea:	f04f 33ff 	mov.w	r3, #4294967295
 80047ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f0:	e006      	b.n	8004800 <SITRONIX_DetectTouch+0x3a>
  }
  else
  {
    nb_touch = ((data[2] & 0x80) == 0x80 ? 1 : 0);
 80047f2:	7bbb      	ldrb	r3, [r7, #14]
 80047f4:	09db      	lsrs	r3, r3, #7
 80047f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    ret = (int32_t)nb_touch;
 80047fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  return ret;
 8004800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004802:	4618      	mov	r0, r3
 8004804:	3730      	adds	r7, #48	; 0x30
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800480a:	b590      	push	{r4, r7, lr}
 800480c:	b087      	sub	sp, #28
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	461a      	mov	r2, r3
 8004816:	460b      	mov	r3, r1
 8004818:	72fb      	strb	r3, [r7, #11]
 800481a:	4613      	mov	r3, r2
 800481c:	813b      	strh	r3, [r7, #8]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	691c      	ldr	r4, [r3, #16]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	8918      	ldrh	r0, [r3, #8]
 800482a:	7afb      	ldrb	r3, [r7, #11]
 800482c:	b299      	uxth	r1, r3
 800482e:	893b      	ldrh	r3, [r7, #8]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	47a0      	blx	r4
 8004834:	4603      	mov	r3, r0
}
 8004836:	4618      	mov	r0, r3
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	bd90      	pop	{r4, r7, pc}

0800483e <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800483e:	b590      	push	{r4, r7, lr}
 8004840:	b087      	sub	sp, #28
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	461a      	mov	r2, r3
 800484a:	460b      	mov	r3, r1
 800484c:	72fb      	strb	r3, [r7, #11]
 800484e:	4613      	mov	r3, r2
 8004850:	813b      	strh	r3, [r7, #8]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	68dc      	ldr	r4, [r3, #12]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	8918      	ldrh	r0, [r3, #8]
 800485e:	7afb      	ldrb	r3, [r7, #11]
 8004860:	b299      	uxth	r1, r3
 8004862:	893b      	ldrh	r3, [r7, #8]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	47a0      	blx	r4
 8004868:	4603      	mov	r3, r0
}
 800486a:	4618      	mov	r0, r3
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	bd90      	pop	{r4, r7, pc}

08004872 <ReadDataWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadDataWrap(void *handle, uint8_t *pData, uint16_t Length)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b086      	sub	sp, #24
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	4613      	mov	r3, r2
 800487e:	80fb      	strh	r3, [r7, #6]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadData(pObj->IO.Address, pData, Length);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	8910      	ldrh	r0, [r2, #8]
 800488c:	88fa      	ldrh	r2, [r7, #6]
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	4798      	blx	r3
 8004892:	4603      	mov	r3, r0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <sitronix_read_reg>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : pdata Read
  *******************************************************************************/
int32_t sitronix_read_reg(sitronix_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800489c:	b590      	push	{r4, r7, lr}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	607a      	str	r2, [r7, #4]
 80048a6:	461a      	mov	r2, r3
 80048a8:	460b      	mov	r3, r1
 80048aa:	72fb      	strb	r3, [r7, #11]
 80048ac:	4613      	mov	r3, r2
 80048ae:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685c      	ldr	r4, [r3, #4]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68d8      	ldr	r0, [r3, #12]
 80048b8:	893b      	ldrh	r3, [r7, #8]
 80048ba:	7af9      	ldrb	r1, [r7, #11]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	47a0      	blx	r4
 80048c0:	4603      	mov	r3, r0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd90      	pop	{r4, r7, pc}

080048ca <sitronix_read_data>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : pdata Read
  *******************************************************************************/
int32_t sitronix_read_data(sitronix_ctx_t *ctx, uint8_t *pdata, uint16_t length)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	4613      	mov	r3, r2
 80048d6:	80fb      	strh	r3, [r7, #6]
  return ctx->ReadData(ctx->handle, pdata, length);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	68d0      	ldr	r0, [r2, #12]
 80048e0:	88fa      	ldrh	r2, [r7, #6]
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	4798      	blx	r3
 80048e6:	4603      	mov	r3, r0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <BSP_I2C5_Init>:
/**
  * @brief  Initializes I2C5 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C5_Init(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80048f6:	2300      	movs	r3, #0
 80048f8:	607b      	str	r3, [r7, #4]

  hbus_i2c5.Instance = BUS_I2C5;
 80048fa:	4b16      	ldr	r3, [pc, #88]	; (8004954 <BSP_I2C5_Init+0x64>)
 80048fc:	4a16      	ldr	r2, [pc, #88]	; (8004958 <BSP_I2C5_Init+0x68>)
 80048fe:	601a      	str	r2, [r3, #0]

  if (I2c5InitCounter == 0U)
 8004900:	4b16      	ldr	r3, [pc, #88]	; (800495c <BSP_I2C5_Init+0x6c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d11f      	bne.n	8004948 <BSP_I2C5_Init+0x58>
  {
    I2c5InitCounter++;
 8004908:	4b14      	ldr	r3, [pc, #80]	; (800495c <BSP_I2C5_Init+0x6c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3301      	adds	r3, #1
 800490e:	4a13      	ldr	r2, [pc, #76]	; (800495c <BSP_I2C5_Init+0x6c>)
 8004910:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c5) == HAL_I2C_STATE_RESET)
 8004912:	4810      	ldr	r0, [pc, #64]	; (8004954 <BSP_I2C5_Init+0x64>)
 8004914:	f005 ffca 	bl	800a8ac <HAL_I2C_GetState>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d114      	bne.n	8004948 <BSP_I2C5_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C5 Msp */
      I2C5_MspInit(&hbus_i2c5);
 800491e:	480d      	ldr	r0, [pc, #52]	; (8004954 <BSP_I2C5_Init+0x64>)
 8004920:	f000 fb88 	bl	8005034 <I2C5_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */
      if (MX_I2C5_Init(&hbus_i2c5, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C5_FREQUENCY)) != HAL_OK)
 8004924:	f008 fa96 	bl	800ce54 <HAL_RCC_GetPCLK1Freq>
 8004928:	4603      	mov	r3, r0
 800492a:	490d      	ldr	r1, [pc, #52]	; (8004960 <BSP_I2C5_Init+0x70>)
 800492c:	4618      	mov	r0, r3
 800492e:	f000 f90b 	bl	8004b48 <I2C_GetTiming>
 8004932:	4603      	mov	r3, r0
 8004934:	4619      	mov	r1, r3
 8004936:	4807      	ldr	r0, [pc, #28]	; (8004954 <BSP_I2C5_Init+0x64>)
 8004938:	f000 f838 	bl	80049ac <MX_I2C5_Init>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <BSP_I2C5_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8004942:	f06f 0307 	mvn.w	r3, #7
 8004946:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS > 0) */
  }
}
return ret;
 8004948:	687b      	ldr	r3, [r7, #4]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20197860 	.word	0x20197860
 8004958:	40009800 	.word	0x40009800
 800495c:	20196e58 	.word	0x20196e58
 8004960:	00061a80 	.word	0x00061a80

08004964 <BSP_I2C5_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C5_DeInit(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800496a:	2300      	movs	r3, #0
 800496c:	607b      	str	r3, [r7, #4]

  I2c5InitCounter--;
 800496e:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <BSP_I2C5_DeInit+0x40>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3b01      	subs	r3, #1
 8004974:	4a0b      	ldr	r2, [pc, #44]	; (80049a4 <BSP_I2C5_DeInit+0x40>)
 8004976:	6013      	str	r3, [r2, #0]

  if (I2c5InitCounter == 0U)
 8004978:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <BSP_I2C5_DeInit+0x40>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10b      	bne.n	8004998 <BSP_I2C5_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C5_MspDeInit(&hbus_i2c5);
 8004980:	4809      	ldr	r0, [pc, #36]	; (80049a8 <BSP_I2C5_DeInit+0x44>)
 8004982:	f000 fbbd 	bl	8005100 <I2C5_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c5) != HAL_OK)
 8004986:	4808      	ldr	r0, [pc, #32]	; (80049a8 <BSP_I2C5_DeInit+0x44>)
 8004988:	f005 fc28 	bl	800a1dc <HAL_I2C_DeInit>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <BSP_I2C5_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004992:	f06f 0307 	mvn.w	r3, #7
 8004996:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8004998:	687b      	ldr	r3, [r7, #4]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20196e58 	.word	0x20196e58
 80049a8:	20197860 	.word	0x20197860

080049ac <MX_I2C5_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C5_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f005 fb67 	bl	800a0be <HAL_I2C_Init>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <MX_I2C5_Init+0x50>
  {
    status = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	73fb      	strb	r3, [r7, #15]
 80049fa:	e014      	b.n	8004a26 <MX_I2C5_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f006 faa6 	bl	800af54 <HAL_I2CEx_ConfigAnalogFilter>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <MX_I2C5_Init+0x68>
    {
      status = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	73fb      	strb	r3, [r7, #15]
 8004a12:	e008      	b.n	8004a26 <MX_I2C5_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8004a14:	2100      	movs	r1, #0
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f006 fae7 	bl	800afea <HAL_I2CEx_ConfigDigitalFilter>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <MX_I2C5_Init+0x7a>
      {
        status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <BSP_I2C5_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C5_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60ba      	str	r2, [r7, #8]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	81fb      	strh	r3, [r7, #14]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	81bb      	strh	r3, [r7, #12]
 8004a42:	4613      	mov	r3, r2
 8004a44:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8004a46:	89b9      	ldrh	r1, [r7, #12]
 8004a48:	89f8      	ldrh	r0, [r7, #14]
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f000 fb77 	bl	8005144 <I2C5_WriteReg>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d102      	bne.n	8004a62 <BSP_I2C5_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	e00c      	b.n	8004a7c <BSP_I2C5_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 8004a62:	4809      	ldr	r0, [pc, #36]	; (8004a88 <BSP_I2C5_WriteReg+0x58>)
 8004a64:	f005 ff30 	bl	800a8c8 <HAL_I2C_GetError>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d103      	bne.n	8004a76 <BSP_I2C5_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004a6e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	e002      	b.n	8004a7c <BSP_I2C5_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004a76:	f06f 0303 	mvn.w	r3, #3
 8004a7a:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8004a7c:	697b      	ldr	r3, [r7, #20]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20197860 	.word	0x20197860

08004a8c <BSP_I2C5_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C5_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60ba      	str	r2, [r7, #8]
 8004a94:	461a      	mov	r2, r3
 8004a96:	4603      	mov	r3, r0
 8004a98:	81fb      	strh	r3, [r7, #14]
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	81bb      	strh	r3, [r7, #12]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8004aa2:	89b9      	ldrh	r1, [r7, #12]
 8004aa4:	89f8      	ldrh	r0, [r7, #14]
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f000 fb6f 	bl	8005190 <I2C5_ReadReg>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d102      	bne.n	8004abe <BSP_I2C5_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	e00c      	b.n	8004ad8 <BSP_I2C5_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 8004abe:	4809      	ldr	r0, [pc, #36]	; (8004ae4 <BSP_I2C5_ReadReg+0x58>)
 8004ac0:	f005 ff02 	bl	800a8c8 <HAL_I2C_GetError>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d103      	bne.n	8004ad2 <BSP_I2C5_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004aca:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	e002      	b.n	8004ad8 <BSP_I2C5_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004ad2:	f06f 0303 	mvn.w	r3, #3
 8004ad6:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8004ad8:	697b      	ldr	r3, [r7, #20]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20197860 	.word	0x20197860

08004ae8 <BSP_I2C5_Recv>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C5_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	6039      	str	r1, [r7, #0]
 8004af2:	80fb      	strh	r3, [r7, #6]
 8004af4:	4613      	mov	r3, r2
 8004af6:	80bb      	strh	r3, [r7, #4]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_Recv(DevAddr, pData, Length) == 0)
 8004af8:	88ba      	ldrh	r2, [r7, #4]
 8004afa:	88fb      	ldrh	r3, [r7, #6]
 8004afc:	6839      	ldr	r1, [r7, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fb6c 	bl	80051dc <I2C5_Recv>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d102      	bne.n	8004b10 <BSP_I2C5_Recv+0x28>
  {
    ret = BSP_ERROR_NONE;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	e00c      	b.n	8004b2a <BSP_I2C5_Recv+0x42>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 8004b10:	4808      	ldr	r0, [pc, #32]	; (8004b34 <BSP_I2C5_Recv+0x4c>)
 8004b12:	f005 fed9 	bl	800a8c8 <HAL_I2C_GetError>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d103      	bne.n	8004b24 <BSP_I2C5_Recv+0x3c>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004b1c:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	e002      	b.n	8004b2a <BSP_I2C5_Recv+0x42>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004b24:	f06f 0303 	mvn.w	r3, #3
 8004b28:	60fb      	str	r3, [r7, #12]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	20197860 	.word	0x20197860

08004b38 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8004b3c:	f002 fc1e 	bl	800737c <HAL_GetTick>
 8004b40:	4603      	mov	r3, r0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d06b      	beq.n	8004c34 <I2C_GetTiming+0xec>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d068      	beq.n	8004c34 <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	e060      	b.n	8004c2a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8004b68:	4a35      	ldr	r2, [pc, #212]	; (8004c40 <I2C_GetTiming+0xf8>)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	212c      	movs	r1, #44	; 0x2c
 8004b6e:	fb01 f303 	mul.w	r3, r1, r3
 8004b72:	4413      	add	r3, r2
 8004b74:	3304      	adds	r3, #4
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d352      	bcc.n	8004c24 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8004b7e:	4a30      	ldr	r2, [pc, #192]	; (8004c40 <I2C_GetTiming+0xf8>)
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	212c      	movs	r1, #44	; 0x2c
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	4413      	add	r3, r2
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d847      	bhi.n	8004c24 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8004b94:	6939      	ldr	r1, [r7, #16]
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f856 	bl	8004c48 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8004b9c:	6939      	ldr	r1, [r7, #16]
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f940 	bl	8004e24 <I2C_Compute_SCLL_SCLH>
 8004ba4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b7f      	cmp	r3, #127	; 0x7f
 8004baa:	d842      	bhi.n	8004c32 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8004bac:	4925      	ldr	r1, [pc, #148]	; (8004c44 <I2C_GetTiming+0xfc>)
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8004bbe:	4821      	ldr	r0, [pc, #132]	; (8004c44 <I2C_GetTiming+0xfc>)
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4403      	add	r3, r0
 8004bcc:	3304      	adds	r3, #4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	051b      	lsls	r3, r3, #20
 8004bd2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8004bd6:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8004bd8:	481a      	ldr	r0, [pc, #104]	; (8004c44 <I2C_GetTiming+0xfc>)
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4403      	add	r3, r0
 8004be6:	3308      	adds	r3, #8
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	041b      	lsls	r3, r3, #16
 8004bec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8004bf0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 8004bf2:	4814      	ldr	r0, [pc, #80]	; (8004c44 <I2C_GetTiming+0xfc>)
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4403      	add	r3, r0
 8004c00:	330c      	adds	r3, #12
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8004c08:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8004c0a:	480e      	ldr	r0, [pc, #56]	; (8004c44 <I2C_GetTiming+0xfc>)
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4403      	add	r3, r0
 8004c18:	3310      	adds	r3, #16
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8004c1e:	430b      	orrs	r3, r1
 8004c20:	617b      	str	r3, [r7, #20]
        }
        break;
 8004c22:	e006      	b.n	8004c32 <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	3301      	adds	r3, #1
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d99b      	bls.n	8004b68 <I2C_GetTiming+0x20>
 8004c30:	e000      	b.n	8004c34 <I2C_GetTiming+0xec>
        break;
 8004c32:	bf00      	nop
      }
    }
  }

  return ret;
 8004c34:	697b      	ldr	r3, [r7, #20]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	0802a760 	.word	0x0802a760
 8004c44:	20196e5c 	.word	0x20196e5c

08004c48 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b08f      	sub	sp, #60	; 0x3c
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8004c52:	2310      	movs	r3, #16
 8004c54:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t presc;
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	085a      	lsrs	r2, r3, #1
 8004c5a:	4b6e      	ldr	r3, [pc, #440]	; (8004e14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8004c5c:	4413      	add	r3, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c64:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8004c66:	2332      	movs	r3, #50	; 0x32
 8004c68:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8004c6a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004c6e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004c70:	4a69      	ldr	r2, [pc, #420]	; (8004e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	212c      	movs	r1, #44	; 0x2c
 8004c76:	fb01 f303 	mul.w	r3, r1, r3
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3324      	adds	r3, #36	; 0x24
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	4a65      	ldr	r2, [pc, #404]	; (8004e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	212c      	movs	r1, #44	; 0x2c
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	330c      	adds	r3, #12
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004c94:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004c96:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004c98:	495f      	ldr	r1, [pc, #380]	; (8004e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	202c      	movs	r0, #44	; 0x2c
 8004c9e:	fb00 f303 	mul.w	r3, r0, r3
 8004ca2:	440b      	add	r3, r1
 8004ca4:	3328      	adds	r3, #40	; 0x28
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3303      	adds	r3, #3
 8004caa:	69f9      	ldr	r1, [r7, #28]
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004cb4:	4a58      	ldr	r2, [pc, #352]	; (8004e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	212c      	movs	r1, #44	; 0x2c
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3310      	adds	r3, #16
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	4a54      	ldr	r2, [pc, #336]	; (8004e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	212c      	movs	r1, #44	; 0x2c
 8004ccc:	fb01 f303 	mul.w	r3, r1, r3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3320      	adds	r3, #32
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8004cd8:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004cda:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8004cdc:	494e      	ldr	r1, [pc, #312]	; (8004e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	202c      	movs	r0, #44	; 0x2c
 8004ce2:	fb00 f303 	mul.w	r3, r0, r3
 8004ce6:	440b      	add	r3, r1
 8004ce8:	3328      	adds	r3, #40	; 0x28
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3304      	adds	r3, #4
 8004cee:	69f9      	ldr	r1, [r7, #28]
 8004cf0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8004cf8:	4a47      	ldr	r2, [pc, #284]	; (8004e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	212c      	movs	r1, #44	; 0x2c
 8004cfe:	fb01 f303 	mul.w	r3, r1, r3
 8004d02:	4413      	add	r3, r2
 8004d04:	3320      	adds	r3, #32
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	4a43      	ldr	r2, [pc, #268]	; (8004e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	212c      	movs	r1, #44	; 0x2c
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	3314      	adds	r3, #20
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4403      	add	r3, r0
 8004d1c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	dc01      	bgt.n	8004d28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8004d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	dc01      	bgt.n	8004d32 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8004d32:	2300      	movs	r3, #0
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d36:	e062      	b.n	8004dfe <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004d38:	2300      	movs	r3, #0
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3c:	e059      	b.n	8004df2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	3301      	adds	r3, #1
 8004d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d44:	3201      	adds	r2, #1
 8004d46:	fb03 f202 	mul.w	r2, r3, r2
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	fb02 f303 	mul.w	r3, r2, r3
 8004d50:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d348      	bcc.n	8004dec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	623b      	str	r3, [r7, #32]
 8004d5e:	e042      	b.n	8004de6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	3301      	adds	r3, #1
 8004d64:	6a3a      	ldr	r2, [r7, #32]
 8004d66:	fb03 f202 	mul.w	r2, r3, r2
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	fb02 f303 	mul.w	r3, r2, r3
 8004d70:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d332      	bcc.n	8004de0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d82e      	bhi.n	8004de0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 8004d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d02a      	beq.n	8004de0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004d8a:	4b24      	ldr	r3, [pc, #144]	; (8004e1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	4924      	ldr	r1, [pc, #144]	; (8004e20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d9c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8004d9e:	4b1f      	ldr	r3, [pc, #124]	; (8004e1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	491f      	ldr	r1, [pc, #124]	; (8004e20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	3304      	adds	r3, #4
 8004db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db2:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8004db4:	4b19      	ldr	r3, [pc, #100]	; (8004e1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	4919      	ldr	r1, [pc, #100]	; (8004e20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	6a3a      	ldr	r2, [r7, #32]
 8004dc8:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8004dce:	4b13      	ldr	r3, [pc, #76]	; (8004e1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	4a11      	ldr	r2, [pc, #68]	; (8004e1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004dd6:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8004dd8:	4b10      	ldr	r3, [pc, #64]	; (8004e1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8004dde:	d812      	bhi.n	8004e06 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	3301      	adds	r3, #1
 8004de4:	623b      	str	r3, [r7, #32]
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	2b0f      	cmp	r3, #15
 8004dea:	d9b9      	bls.n	8004d60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	3301      	adds	r3, #1
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	2b0f      	cmp	r3, #15
 8004df6:	d9a2      	bls.n	8004d3e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e00:	2b0f      	cmp	r3, #15
 8004e02:	d999      	bls.n	8004d38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8004e04:	e000      	b.n	8004e08 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8004e06:	bf00      	nop
          }
        }
      }
    }
  }
}
 8004e08:	373c      	adds	r7, #60	; 0x3c
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	3b9aca00 	.word	0x3b9aca00
 8004e18:	0802a760 	.word	0x0802a760
 8004e1c:	2019785c 	.word	0x2019785c
 8004e20:	20196e5c 	.word	0x20196e5c

08004e24 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b093      	sub	sp, #76	; 0x4c
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 8004e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e32:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	085a      	lsrs	r2, r3, #1
 8004e38:	4b7a      	ldr	r3, [pc, #488]	; (8005024 <I2C_Compute_SCLL_SCLH+0x200>)
 8004e3a:	4413      	add	r3, r2
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 8004e44:	4a78      	ldr	r2, [pc, #480]	; (8005028 <I2C_Compute_SCLL_SCLH+0x204>)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	212c      	movs	r1, #44	; 0x2c
 8004e4a:	fb01 f303 	mul.w	r3, r1, r3
 8004e4e:	4413      	add	r3, r2
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	085a      	lsrs	r2, r3, #1
 8004e54:	4b73      	ldr	r3, [pc, #460]	; (8005024 <I2C_Compute_SCLL_SCLH+0x200>)
 8004e56:	4413      	add	r3, r2
 8004e58:	4973      	ldr	r1, [pc, #460]	; (8005028 <I2C_Compute_SCLL_SCLH+0x204>)
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	202c      	movs	r0, #44	; 0x2c
 8004e5e:	fb00 f202 	mul.w	r2, r0, r2
 8004e62:	440a      	add	r2, r1
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e6a:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8004e6c:	2332      	movs	r3, #50	; 0x32
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8004e70:	4a6d      	ldr	r2, [pc, #436]	; (8005028 <I2C_Compute_SCLL_SCLH+0x204>)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	212c      	movs	r1, #44	; 0x2c
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	3328      	adds	r3, #40	; 0x28
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e82:	fb02 f303 	mul.w	r3, r2, r3
 8004e86:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8004e88:	4a67      	ldr	r2, [pc, #412]	; (8005028 <I2C_Compute_SCLL_SCLH+0x204>)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	212c      	movs	r1, #44	; 0x2c
 8004e8e:	fb01 f303 	mul.w	r3, r1, r3
 8004e92:	4413      	add	r3, r2
 8004e94:	3304      	adds	r3, #4
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a62      	ldr	r2, [pc, #392]	; (8005024 <I2C_Compute_SCLL_SCLH+0x200>)
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8004ea0:	4a61      	ldr	r2, [pc, #388]	; (8005028 <I2C_Compute_SCLL_SCLH+0x204>)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	212c      	movs	r1, #44	; 0x2c
 8004ea6:	fb01 f303 	mul.w	r3, r1, r3
 8004eaa:	4413      	add	r3, r2
 8004eac:	3308      	adds	r3, #8
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a5c      	ldr	r2, [pc, #368]	; (8005024 <I2C_Compute_SCLL_SCLH+0x200>)
 8004eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb6:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec0:	e0a3      	b.n	800500a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8004ec2:	495a      	ldr	r1, [pc, #360]	; (800502c <I2C_Compute_SCLL_SCLH+0x208>)
 8004ec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed6:	fb02 f303 	mul.w	r3, r2, r3
 8004eda:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004edc:	2300      	movs	r3, #0
 8004ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ee0:	e08c      	b.n	8004ffc <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8004ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	441a      	add	r2, r3
 8004ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eea:	3301      	adds	r3, #1
 8004eec:	6979      	ldr	r1, [r7, #20]
 8004eee:	fb03 f101 	mul.w	r1, r3, r1
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	440b      	add	r3, r1
 8004ef8:	4413      	add	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8004efc:	4a4a      	ldr	r2, [pc, #296]	; (8005028 <I2C_Compute_SCLL_SCLH+0x204>)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	212c      	movs	r1, #44	; 0x2c
 8004f02:	fb01 f303 	mul.w	r3, r1, r3
 8004f06:	4413      	add	r3, r2
 8004f08:	3318      	adds	r3, #24
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d971      	bls.n	8004ff6 <I2C_Compute_SCLL_SCLH+0x1d2>
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	1ad2      	subs	r2, r2, r3
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	089b      	lsrs	r3, r3, #2
 8004f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d268      	bcs.n	8004ff6 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8004f24:	2300      	movs	r3, #0
 8004f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f28:	e062      	b.n	8004ff0 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8004f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	441a      	add	r2, r3
 8004f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f32:	3301      	adds	r3, #1
 8004f34:	6979      	ldr	r1, [r7, #20]
 8004f36:	fb03 f101 	mul.w	r1, r3, r1
 8004f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	440b      	add	r3, r1
 8004f40:	4413      	add	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	441a      	add	r2, r3
 8004f4a:	4937      	ldr	r1, [pc, #220]	; (8005028 <I2C_Compute_SCLL_SCLH+0x204>)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	202c      	movs	r0, #44	; 0x2c
 8004f50:	fb00 f303 	mul.w	r3, r0, r3
 8004f54:	440b      	add	r3, r1
 8004f56:	3320      	adds	r3, #32
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	441a      	add	r2, r3
 8004f5c:	4932      	ldr	r1, [pc, #200]	; (8005028 <I2C_Compute_SCLL_SCLH+0x204>)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	202c      	movs	r0, #44	; 0x2c
 8004f62:	fb00 f303 	mul.w	r3, r0, r3
 8004f66:	440b      	add	r3, r1
 8004f68:	3324      	adds	r3, #36	; 0x24
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && \
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d338      	bcc.n	8004fea <I2C_Compute_SCLL_SCLH+0x1c6>
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d834      	bhi.n	8004fea <I2C_Compute_SCLL_SCLH+0x1c6>
 8004f80:	4a29      	ldr	r2, [pc, #164]	; (8005028 <I2C_Compute_SCLL_SCLH+0x204>)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	212c      	movs	r1, #44	; 0x2c
 8004f86:	fb01 f303 	mul.w	r3, r1, r3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	331c      	adds	r3, #28
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d329      	bcc.n	8004fea <I2C_Compute_SCLL_SCLH+0x1c6>
 8004f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d225      	bcs.n	8004fea <I2C_Compute_SCLL_SCLH+0x1c6>
              (ti2cclk < tscl_h))
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	da02      	bge.n	8004fb2 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	425b      	negs	r3, r3
 8004fb0:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d917      	bls.n	8004fea <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8004fbe:	491b      	ldr	r1, [pc, #108]	; (800502c <I2C_Compute_SCLL_SCLH+0x208>)
 8004fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	3310      	adds	r3, #16
 8004fce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fd0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8004fd2:	4916      	ldr	r1, [pc, #88]	; (800502c <I2C_Compute_SCLL_SCLH+0x208>)
 8004fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	440b      	add	r3, r1
 8004fe0:	330c      	adds	r3, #12
 8004fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fe4:	601a      	str	r2, [r3, #0]
              ret = count;
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe8:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8004fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fec:	3301      	adds	r3, #1
 8004fee:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	2bff      	cmp	r3, #255	; 0xff
 8004ff4:	d999      	bls.n	8004f2a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ffe:	2bff      	cmp	r3, #255	; 0xff
 8005000:	f67f af6f 	bls.w	8004ee2 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005006:	3301      	adds	r3, #1
 8005008:	637b      	str	r3, [r7, #52]	; 0x34
 800500a:	4b09      	ldr	r3, [pc, #36]	; (8005030 <I2C_Compute_SCLL_SCLH+0x20c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005010:	429a      	cmp	r2, r3
 8005012:	f4ff af56 	bcc.w	8004ec2 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8005016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005018:	4618      	mov	r0, r3
 800501a:	374c      	adds	r7, #76	; 0x4c
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	3b9aca00 	.word	0x3b9aca00
 8005028:	0802a760 	.word	0x0802a760
 800502c:	20196e5c 	.word	0x20196e5c
 8005030:	2019785c 	.word	0x2019785c

08005034 <I2C5_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C5_MspInit(I2C_HandleTypeDef *hI2c)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	; 0x28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C5_SCL_GPIO_CLK_ENABLE();
 800503c:	4b2e      	ldr	r3, [pc, #184]	; (80050f8 <I2C5_MspInit+0xc4>)
 800503e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005042:	4a2d      	ldr	r2, [pc, #180]	; (80050f8 <I2C5_MspInit+0xc4>)
 8005044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005048:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800504c:	4b2a      	ldr	r3, [pc, #168]	; (80050f8 <I2C5_MspInit+0xc4>)
 800504e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C5_SDA_GPIO_CLK_ENABLE();
 800505a:	4b27      	ldr	r3, [pc, #156]	; (80050f8 <I2C5_MspInit+0xc4>)
 800505c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005060:	4a25      	ldr	r2, [pc, #148]	; (80050f8 <I2C5_MspInit+0xc4>)
 8005062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005066:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800506a:	4b23      	ldr	r3, [pc, #140]	; (80050f8 <I2C5_MspInit+0xc4>)
 800506c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C5_SCL_PIN;
 8005078:	2320      	movs	r3, #32
 800507a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 800507c:	2312      	movs	r3, #18
 800507e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8005080:	2301      	movs	r3, #1
 8005082:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8005084:	2302      	movs	r3, #2
 8005086:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C5_SCL_AF;
 8005088:	2302      	movs	r3, #2
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C5_SCL_GPIO_PORT, &gpio_init_structure);
 800508c:	f107 0314 	add.w	r3, r7, #20
 8005090:	4619      	mov	r1, r3
 8005092:	481a      	ldr	r0, [pc, #104]	; (80050fc <I2C5_MspInit+0xc8>)
 8005094:	f004 fc02 	bl	800989c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C5_SDA_PIN;
 8005098:	2310      	movs	r3, #16
 800509a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 800509c:	2312      	movs	r3, #18
 800509e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 80050a0:	2301      	movs	r3, #1
 80050a2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 80050a4:	2302      	movs	r3, #2
 80050a6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C5_SDA_AF;
 80050a8:	2302      	movs	r3, #2
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C5_SDA_GPIO_PORT, &gpio_init_structure);
 80050ac:	f107 0314 	add.w	r3, r7, #20
 80050b0:	4619      	mov	r1, r3
 80050b2:	4812      	ldr	r0, [pc, #72]	; (80050fc <I2C5_MspInit+0xc8>)
 80050b4:	f004 fbf2 	bl	800989c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C5_CLK_ENABLE();
 80050b8:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <I2C5_MspInit+0xc4>)
 80050ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050be:	4a0e      	ldr	r2, [pc, #56]	; (80050f8 <I2C5_MspInit+0xc4>)
 80050c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050c4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80050c8:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <I2C5_MspInit+0xc4>)
 80050ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d2:	60bb      	str	r3, [r7, #8]
 80050d4:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C5_FORCE_RESET();
 80050d6:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <I2C5_MspInit+0xc4>)
 80050d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050da:	4a07      	ldr	r2, [pc, #28]	; (80050f8 <I2C5_MspInit+0xc4>)
 80050dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050e0:	6793      	str	r3, [r2, #120]	; 0x78

  /* Release the I2C peripheral clock reset */
  BUS_I2C5_RELEASE_RESET();
 80050e2:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <I2C5_MspInit+0xc4>)
 80050e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050e6:	4a04      	ldr	r2, [pc, #16]	; (80050f8 <I2C5_MspInit+0xc4>)
 80050e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ec:	6793      	str	r3, [r2, #120]	; 0x78
}
 80050ee:	bf00      	nop
 80050f0:	3728      	adds	r7, #40	; 0x28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	46020c00 	.word	0x46020c00
 80050fc:	42021c00 	.word	0x42021c00

08005100 <I2C5_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C5_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C5_SCL_PIN;
 8005108:	2320      	movs	r3, #32
 800510a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C5_SCL_GPIO_PORT, gpio_init_structure.Pin);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4619      	mov	r1, r3
 8005110:	480a      	ldr	r0, [pc, #40]	; (800513c <I2C5_MspDeInit+0x3c>)
 8005112:	f004 fd9b 	bl	8009c4c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C5_SDA_PIN;
 8005116:	2310      	movs	r3, #16
 8005118:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C5_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4619      	mov	r1, r3
 800511e:	4807      	ldr	r0, [pc, #28]	; (800513c <I2C5_MspDeInit+0x3c>)
 8005120:	f004 fd94 	bl	8009c4c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C5_CLK_DISABLE();
 8005124:	4b06      	ldr	r3, [pc, #24]	; (8005140 <I2C5_MspDeInit+0x40>)
 8005126:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800512a:	4a05      	ldr	r2, [pc, #20]	; (8005140 <I2C5_MspDeInit+0x40>)
 800512c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005130:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
}
 8005134:	bf00      	nop
 8005136:	3720      	adds	r7, #32
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	42021c00 	.word	0x42021c00
 8005140:	46020c00 	.word	0x46020c00

08005144 <I2C5_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af04      	add	r7, sp, #16
 800514a:	607b      	str	r3, [r7, #4]
 800514c:	4603      	mov	r3, r0
 800514e:	81fb      	strh	r3, [r7, #14]
 8005150:	460b      	mov	r3, r1
 8005152:	81bb      	strh	r3, [r7, #12]
 8005154:	4613      	mov	r3, r2
 8005156:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c5, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8005158:	8978      	ldrh	r0, [r7, #10]
 800515a:	89ba      	ldrh	r2, [r7, #12]
 800515c:	89f9      	ldrh	r1, [r7, #14]
 800515e:	f242 7310 	movw	r3, #10000	; 0x2710
 8005162:	9302      	str	r3, [sp, #8]
 8005164:	8b3b      	ldrh	r3, [r7, #24]
 8005166:	9301      	str	r3, [sp, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	4603      	mov	r3, r0
 800516e:	4807      	ldr	r0, [pc, #28]	; (800518c <I2C5_WriteReg+0x48>)
 8005170:	f005 f96e 	bl	800a450 <HAL_I2C_Mem_Write>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <I2C5_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800517a:	2300      	movs	r3, #0
 800517c:	e001      	b.n	8005182 <I2C5_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800517e:	f06f 0307 	mvn.w	r3, #7
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20197860 	.word	0x20197860

08005190 <I2C5_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af04      	add	r7, sp, #16
 8005196:	607b      	str	r3, [r7, #4]
 8005198:	4603      	mov	r3, r0
 800519a:	81fb      	strh	r3, [r7, #14]
 800519c:	460b      	mov	r3, r1
 800519e:	81bb      	strh	r3, [r7, #12]
 80051a0:	4613      	mov	r3, r2
 80051a2:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c5, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80051a4:	8978      	ldrh	r0, [r7, #10]
 80051a6:	89ba      	ldrh	r2, [r7, #12]
 80051a8:	89f9      	ldrh	r1, [r7, #14]
 80051aa:	f242 7310 	movw	r3, #10000	; 0x2710
 80051ae:	9302      	str	r3, [sp, #8]
 80051b0:	8b3b      	ldrh	r3, [r7, #24]
 80051b2:	9301      	str	r3, [sp, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	4603      	mov	r3, r0
 80051ba:	4807      	ldr	r0, [pc, #28]	; (80051d8 <I2C5_ReadReg+0x48>)
 80051bc:	f005 fa5c 	bl	800a678 <HAL_I2C_Mem_Read>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <I2C5_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	e001      	b.n	80051ce <I2C5_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80051ca:	f06f 0307 	mvn.w	r3, #7
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20197860 	.word	0x20197860

080051dc <I2C5_Recv>:
  * @param  pData      The target register value to be received
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af02      	add	r7, sp, #8
 80051e2:	4603      	mov	r3, r0
 80051e4:	6039      	str	r1, [r7, #0]
 80051e6:	80fb      	strh	r3, [r7, #6]
 80051e8:	4613      	mov	r3, r2
 80051ea:	80bb      	strh	r3, [r7, #4]
  if (HAL_I2C_Master_Receive(&hbus_i2c5, DevAddr, pData, Length, 10000) == HAL_OK)
 80051ec:	88bb      	ldrh	r3, [r7, #4]
 80051ee:	88f9      	ldrh	r1, [r7, #6]
 80051f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80051f4:	9200      	str	r2, [sp, #0]
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	4806      	ldr	r0, [pc, #24]	; (8005214 <I2C5_Recv+0x38>)
 80051fa:	f005 f833 	bl	800a264 <HAL_I2C_Master_Receive>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <I2C5_Recv+0x2c>
  {
    return BSP_ERROR_NONE;
 8005204:	2300      	movs	r3, #0
 8005206:	e001      	b.n	800520c <I2C5_Recv+0x30>
  }

  return BSP_ERROR_BUS_FAILURE;
 8005208:	f06f 0307 	mvn.w	r3, #7
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20197860 	.word	0x20197860

08005218 <BSP_HSPI_RAM_Init>:
  * @param  Instance   HSPI Instance
  * @param  Init       HSPI Init structure
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_Init(uint32_t Instance, BSP_HSPI_RAM_Cfg_t *Init)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  int32_t ret;
  MX_HSPI_InitTypeDef hspi_init;

  /* Check if the instance is supported */
  if (Instance >= HSPI_RAM_INSTANCES_NUMBER)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <BSP_HSPI_RAM_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005228:	f06f 0301 	mvn.w	r3, #1
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
 800522e:	e066      	b.n	80052fe <BSP_HSPI_RAM_Init+0xe6>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)
 8005230:	4935      	ldr	r1, [pc, #212]	; (8005308 <BSP_HSPI_RAM_Init+0xf0>)
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	1a9b      	subs	r3, r3, r2
 800523a:	440b      	add	r3, r1
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d15b      	bne.n	80052fa <BSP_HSPI_RAM_Init+0xe2>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp HSPI initialization */
      HSPI_RAM_MspInit(&hhspi_ram[Instance]);
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	4613      	mov	r3, r2
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	4413      	add	r3, r2
 800524a:	015b      	lsls	r3, r3, #5
 800524c:	4a2f      	ldr	r2, [pc, #188]	; (800530c <BSP_HSPI_RAM_Init+0xf4>)
 800524e:	4413      	add	r3, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fbab 	bl	80059ac <HSPI_RAM_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Fill config structure */
      hspi_init.ClockPrescaler = 0; /* HSPI clock = 160MHz / ClockPrescaler = 160MHz */
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800525e:	61fb      	str	r3, [r7, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	fa93 f3a3 	rbit	r3, r3
 8005266:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	623b      	str	r3, [r7, #32]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <BSP_HSPI_RAM_Init+0x5e>
  {
    return 32U;
 8005272:	2320      	movs	r3, #32
 8005274:	e003      	b.n	800527e <BSP_HSPI_RAM_Init+0x66>
  }
  return __builtin_clz(value);
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	fab3 f383 	clz	r3, r3
 800527c:	b2db      	uxtb	r3, r3
      hspi_init.MemorySize     = (uint32_t)POSITION_VAL(APS512XX_RAM_SIZE);
 800527e:	60bb      	str	r3, [r7, #8]
      hspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8005280:	2300      	movs	r3, #0
 8005282:	613b      	str	r3, [r7, #16]

      /* STM32 HSPI interface initialization */
      if (MX_HSPI_RAM_Init(&hhspi_ram[Instance], &hspi_init) != HAL_OK)
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	4413      	add	r3, r2
 800528c:	015b      	lsls	r3, r3, #5
 800528e:	4a1f      	ldr	r2, [pc, #124]	; (800530c <BSP_HSPI_RAM_Init+0xf4>)
 8005290:	4413      	add	r3, r2
 8005292:	f107 0208 	add.w	r2, r7, #8
 8005296:	4611      	mov	r1, r2
 8005298:	4618      	mov	r0, r3
 800529a:	f000 f867 	bl	800536c <MX_HSPI_RAM_Init>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <BSP_HSPI_RAM_Init+0x94>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80052a4:	f06f 0303 	mvn.w	r3, #3
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
 80052aa:	e028      	b.n	80052fe <BSP_HSPI_RAM_Init+0xe6>
      }
      /* Reset the memory */
      else if (APS512XX_Reset(&hhspi_ram[Instance]) != 0)/*APS512XX_OK*/
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	4413      	add	r3, r2
 80052b4:	015b      	lsls	r3, r3, #5
 80052b6:	4a15      	ldr	r2, [pc, #84]	; (800530c <BSP_HSPI_RAM_Init+0xf4>)
 80052b8:	4413      	add	r3, r2
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fe fc19 	bl	8003af2 <APS512XX_Reset>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <BSP_HSPI_RAM_Init+0xb6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80052c6:	f06f 0304 	mvn.w	r3, #4
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
 80052cc:	e017      	b.n	80052fe <BSP_HSPI_RAM_Init+0xe6>
      }
      /* Configure the memory */
      else if (BSP_HSPI_RAM_Config16BitsOctalRAM(Instance, Init) != BSP_ERROR_NONE)
 80052ce:	6839      	ldr	r1, [r7, #0]
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f957 	bl	8005584 <BSP_HSPI_RAM_Config16BitsOctalRAM>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <BSP_HSPI_RAM_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80052dc:	f06f 0304 	mvn.w	r3, #4
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
 80052e2:	e00c      	b.n	80052fe <BSP_HSPI_RAM_Init+0xe6>
      }
      else
      {
        Hspi_Ram_Ctx[Instance].IsInitialized = HSPI_ACCESS_INDIRECT;
 80052e4:	4908      	ldr	r1, [pc, #32]	; (8005308 <BSP_HSPI_RAM_Init+0xf0>)
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	1a9b      	subs	r3, r3, r2
 80052ee:	440b      	add	r3, r1
 80052f0:	2201      	movs	r2, #1
 80052f2:	701a      	strb	r2, [r3, #0]
        ret = BSP_ERROR_NONE;
 80052f4:	2300      	movs	r3, #0
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
 80052f8:	e001      	b.n	80052fe <BSP_HSPI_RAM_Init+0xe6>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80052fa:	2300      	movs	r3, #0
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  /* Return BSP status */
  return ret;
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005300:	4618      	mov	r0, r3
 8005302:	3728      	adds	r7, #40	; 0x28
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	20000040 	.word	0x20000040
 800530c:	201978b4 	.word	0x201978b4

08005310 <Tuning_HSPI_Write>:
  * @brief  Tuning the HSPI write.
  * @param  hhspi          HSPI handle
  * @retval BSP status
  */
static int32_t Tuning_HSPI_Write(XSPI_HandleTypeDef *hhspi)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005318:	2300      	movs	r3, #0
 800531a:	61fb      	str	r3, [r7, #28]
  XSPI_HSCalTypeDef sCfg;

  hhspi->Instance = HSPI1;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a12      	ldr	r2, [pc, #72]	; (8005368 <Tuning_HSPI_Write+0x58>)
 8005320:	601a      	str	r2, [r3, #0]
  hhspi->State    = HAL_XSPI_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2202      	movs	r2, #2
 8005326:	655a      	str	r2, [r3, #84]	; 0x54

  sCfg.DelayValueType        = HAL_XSPI_CAL_DATA_OUTPUT_DELAY;
 8005328:	2302      	movs	r3, #2
 800532a:	60fb      	str	r3, [r7, #12]
  sCfg.FineCalibrationUnit   = 0x11;
 800532c:	2311      	movs	r3, #17
 800532e:	613b      	str	r3, [r7, #16]
  sCfg.CoarseCalibrationUnit = 0x05;
 8005330:	2305      	movs	r3, #5
 8005332:	617b      	str	r3, [r7, #20]
  sCfg.MaxCalibration        = HAL_XSPI_MAXCAL_REACHED;
 8005334:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005338:	61bb      	str	r3, [r7, #24]
  if (HAL_XSPI_SetDelayValue(hhspi, &sCfg) != HAL_OK)
 800533a:	f107 030c 	add.w	r3, r7, #12
 800533e:	4619      	mov	r1, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f00d fa47 	bl	80127d4 <HAL_XSPI_SetDelayValue>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d007      	beq.n	800535c <Tuning_HSPI_Write+0x4c>
  {
    if (hhspi->Instance == HSPI1)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a05      	ldr	r2, [pc, #20]	; (8005368 <Tuning_HSPI_Write+0x58>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d102      	bne.n	800535c <Tuning_HSPI_Write+0x4c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005356:	f06f 0303 	mvn.w	r3, #3
 800535a:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return BSP status */
  return ret;
 800535c:	69fb      	ldr	r3, [r7, #28]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3720      	adds	r7, #32
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	420d3400 	.word	0x420d3400

0800536c <MX_HSPI_RAM_Init>:
  * @param  hhspi          HSPI handle
  * @param  Init           HSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_HSPI_RAM_Init(XSPI_HandleTypeDef *hhspi, MX_HSPI_InitTypeDef *Init)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t hspi_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_HSPI);
 8005376:	f04f 0000 	mov.w	r0, #0
 800537a:	f04f 0101 	mov.w	r1, #1
 800537e:	f009 f9d3 	bl	800e728 <HAL_RCCEx_GetPeriphCLKFreq>
 8005382:	60f8      	str	r0, [r7, #12]

  /* HSPI initialization */
  hhspi->Instance = HSPI1;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a24      	ldr	r2, [pc, #144]	; (8005418 <MX_HSPI_RAM_Init+0xac>)
 8005388:	601a      	str	r2, [r3, #0]

  hhspi->Init.FifoThresholdByte       = 2U;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2202      	movs	r2, #2
 800538e:	605a      	str	r2, [r3, #4]
  hhspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	609a      	str	r2, [r3, #8]
  hhspi->Init.MemoryType              = HAL_XSPI_MEMTYPE_APMEM_16BITS;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800539c:	60da      	str	r2, [r3, #12]
  hhspi->Init.MemorySize              = Init->MemorySize;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	611a      	str	r2, [r3, #16]
  hhspi->Init.ChipSelectHighTimeCycle = 1U;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	615a      	str	r2, [r3, #20]
  hhspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	619a      	str	r2, [r3, #24]
  hhspi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	61da      	str	r2, [r3, #28]
  hhspi->Init.WrapSize                = HAL_XSPI_WRAP_32_BYTES;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80053be:	621a      	str	r2, [r3, #32]
  hhspi->Init.ClockPrescaler          = Init->ClockPrescaler;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	625a      	str	r2, [r3, #36]	; 0x24
  hhspi->Init.SampleShifting          = Init->SampleShifting;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	629a      	str	r2, [r3, #40]	; 0x28
  hhspi->Init.DelayHoldQuarterCycle   = HAL_XSPI_DHQC_DISABLE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hhspi->Init.ChipSelectBoundary      = 11U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	220b      	movs	r2, #11
 80053da:	631a      	str	r2, [r3, #48]	; 0x30
  hhspi->Init.DelayBlockBypass        = HAL_XSPI_DELAY_BLOCK_ON;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	635a      	str	r2, [r3, #52]	; 0x34
  /* tCEM = 2 us max => REFRESH+4 clock cycles for read */
  hhspi->Init.Refresh                 = ((2U * (hspi_clk / (Init->ClockPrescaler + 1))) / 1000000U) - 4U;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	3301      	adds	r3, #1
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	4a0a      	ldr	r2, [pc, #40]	; (800541c <MX_HSPI_RAM_Init+0xb0>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	0c9b      	lsrs	r3, r3, #18
 80053f8:	1f1a      	subs	r2, r3, #4
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hhspi->Init.MaxTran                 = 0U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	639a      	str	r2, [r3, #56]	; 0x38

  status = HAL_XSPI_Init(hhspi);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f00c fc2d 	bl	8011c64 <HAL_XSPI_Init>
 800540a:	4603      	mov	r3, r0
 800540c:	72fb      	strb	r3, [r7, #11]

  return status;
 800540e:	7afb      	ldrb	r3, [r7, #11]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	420d3400 	.word	0x420d3400
 800541c:	431bde83 	.word	0x431bde83

08005420 <BSP_HSPI_RAM_EnableMemoryMappedMode>:
  * @brief  Configure the HSPI in memory-mapped mode
  * @param  Instance  HSPI instance
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_EnableMemoryMappedMode(uint32_t Instance)
{
 8005420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005422:	b087      	sub	sp, #28
 8005424:	af02      	add	r7, sp, #8
 8005426:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= HSPI_RAM_INSTANCES_NUMBER)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <BSP_HSPI_RAM_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005432:	f06f 0301 	mvn.w	r3, #1
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	e09a      	b.n	8005570 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
  }
  else
  {
    if (Tuning_HSPI_Write(&hhspi_ram[Instance]) != 0UL)
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	4613      	mov	r3, r2
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	4413      	add	r3, r2
 8005442:	015b      	lsls	r3, r3, #5
 8005444:	4a4d      	ldr	r2, [pc, #308]	; (800557c <BSP_HSPI_RAM_EnableMemoryMappedMode+0x15c>)
 8005446:	4413      	add	r3, r2
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff ff61 	bl	8005310 <Tuning_HSPI_Write>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <BSP_HSPI_RAM_EnableMemoryMappedMode+0x3c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005454:	f06f 0303 	mvn.w	r3, #3
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	e089      	b.n	8005570 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
    }
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	4413      	add	r3, r2
 8005464:	015b      	lsls	r3, r3, #5
 8005466:	4a45      	ldr	r2, [pc, #276]	; (800557c <BSP_HSPI_RAM_EnableMemoryMappedMode+0x15c>)
 8005468:	189c      	adds	r4, r3, r2
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 800546a:	4945      	ldr	r1, [pc, #276]	; (8005580 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	4613      	mov	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	440b      	add	r3, r1
 8005476:	3301      	adds	r3, #1
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	f003 0320 	and.w	r3, r3, #32
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10c      	bne.n	800549c <BSP_HSPI_RAM_EnableMemoryMappedMode+0x7c>
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 8005482:	493f      	ldr	r1, [pc, #252]	; (8005580 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	4613      	mov	r3, r2
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	1a9b      	subs	r3, r3, r2
 800548c:	440b      	add	r3, r1
 800548e:	3302      	adds	r3, #2
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	089b      	lsrs	r3, r3, #2
 8005494:	f003 0307 	and.w	r3, r3, #7
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005498:	1cd9      	adds	r1, r3, #3
 800549a:	e00c      	b.n	80054b6 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x96>
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 800549c:	4938      	ldr	r1, [pc, #224]	; (8005580 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4613      	mov	r3, r2
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	440b      	add	r3, r1
 80054a8:	3302      	adds	r3, #2
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	089b      	lsrs	r3, r3, #2
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	3303      	adds	r3, #3
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 80054b4:	0059      	lsls	r1, r3, #1
                                                                             (uint32_t)(Hspi_Ram_Ctx[Instance].LatencyType)),
                                             APS512XX_WRITE_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].WriteLatencyCode)),
 80054b6:	4832      	ldr	r0, [pc, #200]	; (8005580 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	4613      	mov	r3, r2
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	1a9b      	subs	r3, r3, r2
 80054c0:	4403      	add	r3, r0
 80054c2:	3303      	adds	r3, #3
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d02a      	beq.n	8005524 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x104>
                                             APS512XX_WRITE_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].WriteLatencyCode)),
 80054ce:	482c      	ldr	r0, [pc, #176]	; (8005580 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	1a9b      	subs	r3, r3, r2
 80054d8:	4403      	add	r3, r0
 80054da:	3303      	adds	r3, #3
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d11c      	bne.n	8005520 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x100>
 80054e6:	4826      	ldr	r0, [pc, #152]	; (8005580 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	4403      	add	r3, r0
 80054f2:	3303      	adds	r3, #3
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00e      	beq.n	800551c <BSP_HSPI_RAM_EnableMemoryMappedMode+0xfc>
 80054fe:	4820      	ldr	r0, [pc, #128]	; (8005580 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	1a9b      	subs	r3, r3, r2
 8005508:	4403      	add	r3, r0
 800550a:	3303      	adds	r3, #3
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	b25b      	sxtb	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	db01      	blt.n	8005518 <BSP_HSPI_RAM_EnableMemoryMappedMode+0xf8>
 8005514:	2205      	movs	r2, #5
 8005516:	e006      	b.n	8005526 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 8005518:	2206      	movs	r2, #6
 800551a:	e004      	b.n	8005526 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 800551c:	2204      	movs	r2, #4
 800551e:	e002      	b.n	8005526 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 8005520:	2207      	movs	r2, #7
 8005522:	e000      	b.n	8005526 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005524:	2203      	movs	r2, #3
                                             (uint32_t)(Hspi_Ram_Ctx[Instance].IOMode),
 8005526:	4d16      	ldr	r5, [pc, #88]	; (8005580 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4603      	mov	r3, r0
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	1a1b      	subs	r3, r3, r0
 8005530:	442b      	add	r3, r5
 8005532:	3306      	adds	r3, #6
 8005534:	781b      	ldrb	r3, [r3, #0]
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005536:	461e      	mov	r6, r3
                                             (uint32_t)(Hspi_Ram_Ctx[Instance].BurstType)) != (int32_t)APS512XX_OK)
 8005538:	4d11      	ldr	r5, [pc, #68]	; (8005580 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	4603      	mov	r3, r0
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	1a1b      	subs	r3, r3, r0
 8005542:	442b      	add	r3, r5
 8005544:	3304      	adds	r3, #4
 8005546:	781b      	ldrb	r3, [r3, #0]
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	4633      	mov	r3, r6
 800554c:	4620      	mov	r0, r4
 800554e:	f7fe f9ad 	bl	80038ac <APS512XX_EnableMemoryMappedMode>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x140>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005558:	f06f 0304 	mvn.w	r3, #4
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	e007      	b.n	8005570 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
    }
    else /* Update HSPI context if all operations are well done */
    {
      Hspi_Ram_Ctx[Instance].IsInitialized = HSPI_ACCESS_MMP;
 8005560:	4907      	ldr	r1, [pc, #28]	; (8005580 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	4613      	mov	r3, r2
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	440b      	add	r3, r1
 800556c:	2202      	movs	r2, #2
 800556e:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return BSP status */
  return ret;
 8005570:	68fb      	ldr	r3, [r7, #12]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800557a:	bf00      	nop
 800557c:	201978b4 	.word	0x201978b4
 8005580:	20000040 	.word	0x20000040

08005584 <BSP_HSPI_RAM_Config16BitsOctalRAM>:
  * @param  Instance    HSPI instance
  * @param  Cfg         pointer to the RAM config
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_Config16BitsOctalRAM(uint32_t Instance, BSP_HSPI_RAM_Cfg_t *Cfg)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if ((Instance >= HSPI_RAM_INSTANCES_NUMBER)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d103      	bne.n	80055a0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1c>
      || (Cfg->BurstLength == (BSP_HSPI_RAM_BurstLength_t)APS512XX_MR8_BL_2K_BYTES))
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	791b      	ldrb	r3, [r3, #4]
 800559c:	2b03      	cmp	r3, #3
 800559e:	d103      	bne.n	80055a8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80055a0:	f06f 0301 	mvn.w	r3, #1
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	e1f7      	b.n	8005998 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
  }
  else
  {
    /* Check if MMP mode locked ***********************************************/
    if (Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_MMP)
 80055a8:	49a9      	ldr	r1, [pc, #676]	; (8005850 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	4613      	mov	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	440b      	add	r3, r1
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d103      	bne.n	80055c2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x3e>
    {
      ret = BSP_ERROR_HSPI_MMP_LOCK_FAILURE;
 80055ba:	f06f 031f 	mvn.w	r3, #31
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	e1ea      	b.n	8005998 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
    }
    else
    {
      if ((Hspi_Ram_Ctx[Instance].IsInitialized  == HSPI_ACCESS_NONE) ||
 80055c2:	49a3      	ldr	r1, [pc, #652]	; (8005850 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	4613      	mov	r3, r2
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	1a9b      	subs	r3, r3, r2
 80055cc:	440b      	add	r3, r1
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d017      	beq.n	8005604 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x80>
          (Hspi_Ram_Ctx[Instance].LatencyType     != Cfg->LatencyType)  ||
 80055d4:	499e      	ldr	r1, [pc, #632]	; (8005850 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	4613      	mov	r3, r2
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	1a9b      	subs	r3, r3, r2
 80055de:	440b      	add	r3, r1
 80055e0:	3301      	adds	r3, #1
 80055e2:	781a      	ldrb	r2, [r3, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
      if ((Hspi_Ram_Ctx[Instance].IsInitialized  == HSPI_ACCESS_NONE) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d10b      	bne.n	8005604 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x80>
          (Hspi_Ram_Ctx[Instance].ReadLatencyCode != Cfg->ReadLatencyCode))
 80055ec:	4998      	ldr	r1, [pc, #608]	; (8005850 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	1a9b      	subs	r3, r3, r2
 80055f6:	440b      	add	r3, r1
 80055f8:	3302      	adds	r3, #2
 80055fa:	781a      	ldrb	r2, [r3, #0]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	785b      	ldrb	r3, [r3, #1]
          (Hspi_Ram_Ctx[Instance].LatencyType     != Cfg->LatencyType)  ||
 8005600:	429a      	cmp	r2, r3
 8005602:	d040      	beq.n	8005686 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
      {
        /* Reading the configuration of Mode Register 0 ***********************/
        if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg,
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	4413      	add	r3, r2
 800560c:	015b      	lsls	r3, r3, #5
 800560e:	4a91      	ldr	r2, [pc, #580]	; (8005854 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005610:	1898      	adds	r0, r3, r2
                             (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != \
 8005612:	498f      	ldr	r1, [pc, #572]	; (8005850 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	4613      	mov	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	1a9b      	subs	r3, r3, r2
 800561c:	440b      	add	r3, r1
 800561e:	3302      	adds	r3, #2
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	089b      	lsrs	r3, r3, #2
 8005624:	f003 0307 	and.w	r3, r3, #7
        if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg,
 8005628:	3303      	adds	r3, #3
 800562a:	f107 0208 	add.w	r2, r7, #8
 800562e:	2100      	movs	r1, #0
 8005630:	f7fe f9b8 	bl	80039a4 <APS512XX_ReadReg>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <BSP_HSPI_RAM_Config16BitsOctalRAM+0xbe>
            (int32_t)APS512XX_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800563a:	f06f 0304 	mvn.w	r3, #4
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	e021      	b.n	8005686 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
        }
        else
        {
          /* Configure the 16-bits Octal RAM memory ***************************/
          MODIFY_REG(reg[0], ((uint32_t)APS512XX_MR0_LATENCY_TYPE | (uint32_t)APS512XX_MR0_READ_LATENCY_CODE |
 8005642:	7a3b      	ldrb	r3, [r7, #8]
 8005644:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005648:	b2da      	uxtb	r2, r3
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	7819      	ldrb	r1, [r3, #0]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	785b      	ldrb	r3, [r3, #1]
 8005652:	430b      	orrs	r3, r1
 8005654:	b2db      	uxtb	r3, r3
 8005656:	4313      	orrs	r3, r2
 8005658:	b2db      	uxtb	r3, r3
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	b2db      	uxtb	r3, r3
 8005660:	723b      	strb	r3, [r7, #8]
                              (uint32_t)APS512XX_MR0_DRIVE_STRENGTH),
                     ((uint32_t)(Cfg->LatencyType) | (uint32_t)(Cfg->ReadLatencyCode) | (uint32_t)CONF_HSPI_DS));

          if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg[0]) != APS512XX_OK)
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	4613      	mov	r3, r2
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	4413      	add	r3, r2
 800566a:	015b      	lsls	r3, r3, #5
 800566c:	4a79      	ldr	r2, [pc, #484]	; (8005854 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 800566e:	4413      	add	r3, r2
 8005670:	7a3a      	ldrb	r2, [r7, #8]
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f7fe f9e9 	bl	8003a4c <APS512XX_WriteReg>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005680:	f06f 0304 	mvn.w	r3, #4
 8005684:	60fb      	str	r3, [r7, #12]
          }
          /* Configure the peripheral *****************************************/
        }
      }

      if (ret == BSP_ERROR_NONE)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d148      	bne.n	800571e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
      {
        if ((Hspi_Ram_Ctx[Instance].IsInitialized   == HSPI_ACCESS_NONE) ||
 800568c:	4970      	ldr	r1, [pc, #448]	; (8005850 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	440b      	add	r3, r1
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00b      	beq.n	80056b6 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x132>
            (Hspi_Ram_Ctx[Instance].WriteLatencyCode != Cfg->WriteLatencyCode))
 800569e:	496c      	ldr	r1, [pc, #432]	; (8005850 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	4613      	mov	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	1a9b      	subs	r3, r3, r2
 80056a8:	440b      	add	r3, r1
 80056aa:	3303      	adds	r3, #3
 80056ac:	781a      	ldrb	r2, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	789b      	ldrb	r3, [r3, #2]
        if ((Hspi_Ram_Ctx[Instance].IsInitialized   == HSPI_ACCESS_NONE) ||
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d033      	beq.n	800571e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
        {
          /* Reading the configuration of Mode Register 4 ***********************/
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg,
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	4613      	mov	r3, r2
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	4413      	add	r3, r2
 80056be:	015b      	lsls	r3, r3, #5
 80056c0:	4a64      	ldr	r2, [pc, #400]	; (8005854 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 80056c2:	1898      	adds	r0, r3, r2
                               (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != (int32_t)APS512XX_OK)
 80056c4:	4962      	ldr	r1, [pc, #392]	; (8005850 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	4613      	mov	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	1a9b      	subs	r3, r3, r2
 80056ce:	440b      	add	r3, r1
 80056d0:	3302      	adds	r3, #2
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	089b      	lsrs	r3, r3, #2
 80056d6:	f003 0307 	and.w	r3, r3, #7
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg,
 80056da:	3303      	adds	r3, #3
 80056dc:	f107 0208 	add.w	r2, r7, #8
 80056e0:	2104      	movs	r1, #4
 80056e2:	f7fe f95f 	bl	80039a4 <APS512XX_ReadReg>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x170>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80056ec:	f06f 0304 	mvn.w	r3, #4
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	e014      	b.n	800571e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
          }
          else
          {
            /* Configure the 16-bits Octal RAM memory ***************************/
            MODIFY_REG(reg[0], (APS512XX_MR4_WRITE_LATENCY_CODE | APS512XX_MR4_RF_RATE | APS512XX_MR4_PASR),
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	789b      	ldrb	r3, [r3, #2]
 80056f8:	723b      	strb	r3, [r7, #8]
                       (Cfg->WriteLatencyCode | CONF_HSPI_RF | CONF_HSPI_PASR));

            if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg[0]) != APS512XX_OK)
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	4413      	add	r3, r2
 8005702:	015b      	lsls	r3, r3, #5
 8005704:	4a53      	ldr	r2, [pc, #332]	; (8005854 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005706:	4413      	add	r3, r2
 8005708:	7a3a      	ldrb	r2, [r7, #8]
 800570a:	2104      	movs	r1, #4
 800570c:	4618      	mov	r0, r3
 800570e:	f7fe f99d 	bl	8003a4c <APS512XX_WriteReg>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005718:	f06f 0304 	mvn.w	r3, #4
 800571c:	60fb      	str	r3, [r7, #12]
            }
          }
        }
      }

      if (ret == BSP_ERROR_NONE)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	f040 80ec 	bne.w	80058fe <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
      {
        if ((Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)  ||
 8005726:	494a      	ldr	r1, [pc, #296]	; (8005850 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	1a9b      	subs	r3, r3, r2
 8005730:	440b      	add	r3, r1
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d024      	beq.n	8005782 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].BurstType      != Cfg->BurstType)   ||
 8005738:	4945      	ldr	r1, [pc, #276]	; (8005850 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	4613      	mov	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	440b      	add	r3, r1
 8005744:	3304      	adds	r3, #4
 8005746:	781a      	ldrb	r2, [r3, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	78db      	ldrb	r3, [r3, #3]
        if ((Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)  ||
 800574c:	429a      	cmp	r2, r3
 800574e:	d118      	bne.n	8005782 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].BurstLength    != Cfg->BurstLength) ||
 8005750:	493f      	ldr	r1, [pc, #252]	; (8005850 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	4613      	mov	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	440b      	add	r3, r1
 800575c:	3305      	adds	r3, #5
 800575e:	781a      	ldrb	r2, [r3, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	791b      	ldrb	r3, [r3, #4]
            (Hspi_Ram_Ctx[Instance].BurstType      != Cfg->BurstType)   ||
 8005764:	429a      	cmp	r2, r3
 8005766:	d10c      	bne.n	8005782 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].IOMode         != Cfg->IOMode))
 8005768:	4939      	ldr	r1, [pc, #228]	; (8005850 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	440b      	add	r3, r1
 8005774:	3306      	adds	r3, #6
 8005776:	781a      	ldrb	r2, [r3, #0]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	795b      	ldrb	r3, [r3, #5]
            (Hspi_Ram_Ctx[Instance].BurstLength    != Cfg->BurstLength) ||
 800577c:	429a      	cmp	r2, r3
 800577e:	f000 80be 	beq.w	80058fe <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
        {
          /* Reading the configuration of Mode Register 8 ***********************/
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg,
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	4413      	add	r3, r2
 800578a:	015b      	lsls	r3, r3, #5
 800578c:	4a31      	ldr	r2, [pc, #196]	; (8005854 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 800578e:	1898      	adds	r0, r3, r2
                               (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != (int32_t)APS512XX_OK)
 8005790:	492f      	ldr	r1, [pc, #188]	; (8005850 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	4613      	mov	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	440b      	add	r3, r1
 800579c:	3302      	adds	r3, #2
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	089b      	lsrs	r3, r3, #2
 80057a2:	f003 0307 	and.w	r3, r3, #7
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg,
 80057a6:	3303      	adds	r3, #3
 80057a8:	f107 0208 	add.w	r2, r7, #8
 80057ac:	2108      	movs	r1, #8
 80057ae:	f7fe f8f9 	bl	80039a4 <APS512XX_ReadReg>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x23c>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80057b8:	f06f 0304 	mvn.w	r3, #4
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	e09e      	b.n	80058fe <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
          }
          else
          {
            /* Configure the 16-bits Octal RAM memory ***************************/
            MODIFY_REG(reg[0], ((uint32_t)APS512XX_MR8_X8_X16 | (uint32_t)APS512XX_MR8_BL),
 80057c0:	7a3b      	ldrb	r3, [r7, #8]
 80057c2:	f023 0343 	bic.w	r3, r3, #67	; 0x43
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	7959      	ldrb	r1, [r3, #5]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	791b      	ldrb	r3, [r3, #4]
 80057d0:	430b      	orrs	r3, r1
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	4313      	orrs	r3, r2
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	723b      	strb	r3, [r7, #8]
                       ((uint32_t)(Cfg->IOMode) | (uint32_t)(Cfg->BurstLength)));

            if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg[0]) != APS512XX_OK)
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	4613      	mov	r3, r2
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	4413      	add	r3, r2
 80057e2:	015b      	lsls	r3, r3, #5
 80057e4:	4a1b      	ldr	r2, [pc, #108]	; (8005854 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 80057e6:	4413      	add	r3, r2
 80057e8:	7a3a      	ldrb	r2, [r7, #8]
 80057ea:	2108      	movs	r1, #8
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fe f92d 	bl	8003a4c <APS512XX_WriteReg>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x27c>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80057f8:	f06f 0304 	mvn.w	r3, #4
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	e07e      	b.n	80058fe <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
            }
            else
            {
              /* Configure the peripheral *****************************************/
              if (Cfg->BurstType == BSP_HSPI_RAM_HYBRID_BURST)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	78db      	ldrb	r3, [r3, #3]
 8005804:	2b04      	cmp	r3, #4
 8005806:	d133      	bne.n	8005870 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2ec>
              {
                switch (Cfg->BurstLength)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	791b      	ldrb	r3, [r3, #4]
 800580c:	2b02      	cmp	r3, #2
 800580e:	d023      	beq.n	8005858 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d4>
 8005810:	2b02      	cmp	r3, #2
 8005812:	dc38      	bgt.n	8005886 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x302>
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x29a>
 8005818:	2b01      	cmp	r3, #1
 800581a:	d00c      	beq.n	8005836 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2b2>
                    break;
                  case APS512XX_MR8_BL_64_BYTES :
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_64_BYTES;
                    break;
                  default :
                    break;
 800581c:	e033      	b.n	8005886 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x302>
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_16_BYTES;
 800581e:	490d      	ldr	r1, [pc, #52]	; (8005854 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	4613      	mov	r3, r2
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	4413      	add	r3, r2
 8005828:	015b      	lsls	r3, r3, #5
 800582a:	440b      	add	r3, r1
 800582c:	3320      	adds	r3, #32
 800582e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005832:	601a      	str	r2, [r3, #0]
                    break;
 8005834:	e028      	b.n	8005888 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_32_BYTES;
 8005836:	4907      	ldr	r1, [pc, #28]	; (8005854 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	4413      	add	r3, r2
 8005840:	015b      	lsls	r3, r3, #5
 8005842:	440b      	add	r3, r1
 8005844:	3320      	adds	r3, #32
 8005846:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800584a:	601a      	str	r2, [r3, #0]
                    break;
 800584c:	e01c      	b.n	8005888 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
 800584e:	bf00      	nop
 8005850:	20000040 	.word	0x20000040
 8005854:	201978b4 	.word	0x201978b4
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_64_BYTES;
 8005858:	4952      	ldr	r1, [pc, #328]	; (80059a4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	4613      	mov	r3, r2
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	4413      	add	r3, r2
 8005862:	015b      	lsls	r3, r3, #5
 8005864:	440b      	add	r3, r1
 8005866:	3320      	adds	r3, #32
 8005868:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800586c:	601a      	str	r2, [r3, #0]
                    break;
 800586e:	e00b      	b.n	8005888 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                }
              }
              else
              {
                hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8005870:	494c      	ldr	r1, [pc, #304]	; (80059a4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	4613      	mov	r3, r2
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	4413      	add	r3, r2
 800587a:	015b      	lsls	r3, r3, #5
 800587c:	440b      	add	r3, r1
 800587e:	3320      	adds	r3, #32
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e000      	b.n	8005888 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                    break;
 8005886:	bf00      	nop
              }

              if (Cfg->IOMode == BSP_HSPI_RAM_IO_X16_MODE)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	795b      	ldrb	r3, [r3, #5]
 800588c:	2b40      	cmp	r3, #64	; 0x40
 800588e:	d10b      	bne.n	80058a8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x324>
              {
                hhspi_ram[Instance].Init.MemoryType = HAL_XSPI_MEMTYPE_APMEM_16BITS;
 8005890:	4944      	ldr	r1, [pc, #272]	; (80059a4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	4613      	mov	r3, r2
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	4413      	add	r3, r2
 800589a:	015b      	lsls	r3, r3, #5
 800589c:	440b      	add	r3, r1
 800589e:	330c      	adds	r3, #12
 80058a0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	e00a      	b.n	80058be <BSP_HSPI_RAM_Config16BitsOctalRAM+0x33a>
              }
              else
              {
                hhspi_ram[Instance].Init.MemoryType = HAL_XSPI_MEMTYPE_APMEM;
 80058a8:	493e      	ldr	r1, [pc, #248]	; (80059a4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	4613      	mov	r3, r2
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	4413      	add	r3, r2
 80058b2:	015b      	lsls	r3, r3, #5
 80058b4:	440b      	add	r3, r1
 80058b6:	330c      	adds	r3, #12
 80058b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058bc:	601a      	str	r2, [r3, #0]
              }

              if (HAL_XSPI_DeInit(&hhspi_ram[Instance]) != HAL_OK)
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	4613      	mov	r3, r2
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	4413      	add	r3, r2
 80058c6:	015b      	lsls	r3, r3, #5
 80058c8:	4a36      	ldr	r2, [pc, #216]	; (80059a4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 80058ca:	4413      	add	r3, r2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f00c fb15 	bl	8011efc <HAL_XSPI_DeInit>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <BSP_HSPI_RAM_Config16BitsOctalRAM+0x35a>
              {
                ret = BSP_ERROR_PERIPH_FAILURE;
 80058d8:	f06f 0303 	mvn.w	r3, #3
 80058dc:	60fb      	str	r3, [r7, #12]
              }

              if (HAL_XSPI_Init(&hhspi_ram[Instance]) != HAL_OK)
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	4613      	mov	r3, r2
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	4413      	add	r3, r2
 80058e6:	015b      	lsls	r3, r3, #5
 80058e8:	4a2e      	ldr	r2, [pc, #184]	; (80059a4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 80058ea:	4413      	add	r3, r2
 80058ec:	4618      	mov	r0, r3
 80058ee:	f00c f9b9 	bl	8011c64 <HAL_XSPI_Init>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
              {
                ret = BSP_ERROR_PERIPH_FAILURE;
 80058f8:	f06f 0303 	mvn.w	r3, #3
 80058fc:	60fb      	str	r3, [r7, #12]
          }
        }
      }

      /* Update HSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d149      	bne.n	8005998 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
      {
        /* Update current status parameter *****************************************/
        Hspi_Ram_Ctx[Instance].IsInitialized    = HSPI_ACCESS_INDIRECT;
 8005904:	4928      	ldr	r1, [pc, #160]	; (80059a8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	4613      	mov	r3, r2
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	1a9b      	subs	r3, r3, r2
 800590e:	440b      	add	r3, r1
 8005910:	2201      	movs	r2, #1
 8005912:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].LatencyType      = Cfg->LatencyType;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	7818      	ldrb	r0, [r3, #0]
 8005918:	4923      	ldr	r1, [pc, #140]	; (80059a8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	4613      	mov	r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	1a9b      	subs	r3, r3, r2
 8005922:	440b      	add	r3, r1
 8005924:	3301      	adds	r3, #1
 8005926:	4602      	mov	r2, r0
 8005928:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].ReadLatencyCode  = Cfg->ReadLatencyCode;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	7858      	ldrb	r0, [r3, #1]
 800592e:	491e      	ldr	r1, [pc, #120]	; (80059a8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	4613      	mov	r3, r2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	1a9b      	subs	r3, r3, r2
 8005938:	440b      	add	r3, r1
 800593a:	3302      	adds	r3, #2
 800593c:	4602      	mov	r2, r0
 800593e:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].WriteLatencyCode = Cfg->WriteLatencyCode;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	7898      	ldrb	r0, [r3, #2]
 8005944:	4918      	ldr	r1, [pc, #96]	; (80059a8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	4613      	mov	r3, r2
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	440b      	add	r3, r1
 8005950:	3303      	adds	r3, #3
 8005952:	4602      	mov	r2, r0
 8005954:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].BurstType        = Cfg->BurstType;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	78d8      	ldrb	r0, [r3, #3]
 800595a:	4913      	ldr	r1, [pc, #76]	; (80059a8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	1a9b      	subs	r3, r3, r2
 8005964:	440b      	add	r3, r1
 8005966:	3304      	adds	r3, #4
 8005968:	4602      	mov	r2, r0
 800596a:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].BurstLength      = Cfg->BurstLength;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	7918      	ldrb	r0, [r3, #4]
 8005970:	490d      	ldr	r1, [pc, #52]	; (80059a8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	4613      	mov	r3, r2
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	1a9b      	subs	r3, r3, r2
 800597a:	440b      	add	r3, r1
 800597c:	3305      	adds	r3, #5
 800597e:	4602      	mov	r2, r0
 8005980:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].IOMode           = Cfg->IOMode;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	7958      	ldrb	r0, [r3, #5]
 8005986:	4908      	ldr	r1, [pc, #32]	; (80059a8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	440b      	add	r3, r1
 8005992:	3306      	adds	r3, #6
 8005994:	4602      	mov	r2, r0
 8005996:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8005998:	68fb      	ldr	r3, [r7, #12]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	201978b4 	.word	0x201978b4
 80059a8:	20000040 	.word	0x20000040

080059ac <HSPI_RAM_MspInit>:
  * @brief  Initializes the HSPI MSP.
  * @param  hhspi HSPI handle
  * @retval None
  */
static void HSPI_RAM_MspInit(XSPI_HandleTypeDef *hhspi)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b0a0      	sub	sp, #128	; 0x80
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdmatx, hdmarx;
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80059b4:	4bbe      	ldr	r3, [pc, #760]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 80059b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ba:	4abd      	ldr	r2, [pc, #756]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 80059bc:	f043 0304 	orr.w	r3, r3, #4
 80059c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80059c4:	4bba      	ldr	r3, [pc, #744]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 80059c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80059d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80059d2:	4bb8      	ldr	r3, [pc, #736]	; (8005cb4 <HSPI_RAM_MspInit+0x308>)
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	4ab7      	ldr	r2, [pc, #732]	; (8005cb4 <HSPI_RAM_MspInit+0x308>)
 80059d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059dc:	6113      	str	r3, [r2, #16]

  /* Enable the HSPI memory interface, DMA and GPIO clocks */
  HSPI_CLK_ENABLE();
 80059de:	4bb4      	ldr	r3, [pc, #720]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 80059e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e4:	4ab2      	ldr	r2, [pc, #712]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 80059e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059ee:	4bb0      	ldr	r3, [pc, #704]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 80059f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059f8:	667b      	str	r3, [r7, #100]	; 0x64
 80059fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  HSPI_RAM_DMAx_CLK_ENABLE();
 80059fc:	4bac      	ldr	r3, [pc, #688]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a02:	4aab      	ldr	r2, [pc, #684]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005a0c:	4ba8      	ldr	r3, [pc, #672]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	663b      	str	r3, [r7, #96]	; 0x60
 8005a18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  HSPI_CLK_GPIO_CLK_ENABLE();
 8005a1a:	4ba5      	ldr	r3, [pc, #660]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a20:	4aa3      	ldr	r2, [pc, #652]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a2a:	4ba1      	ldr	r3, [pc, #644]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  HSPI_DQS0_GPIO_CLK_ENABLE();
 8005a38:	4b9d      	ldr	r3, [pc, #628]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a3e:	4a9c      	ldr	r2, [pc, #624]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a44:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a48:	4b99      	ldr	r3, [pc, #612]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a52:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  HSPI_DQS1_GPIO_CLK_ENABLE();
 8005a56:	4b96      	ldr	r3, [pc, #600]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a5c:	4a94      	ldr	r2, [pc, #592]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a66:	4b92      	ldr	r3, [pc, #584]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a70:	657b      	str	r3, [r7, #84]	; 0x54
 8005a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  HSPI_CS_GPIO_CLK_ENABLE();
 8005a74:	4b8e      	ldr	r3, [pc, #568]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a7a:	4a8d      	ldr	r2, [pc, #564]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a84:	4b8a      	ldr	r3, [pc, #552]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  HSPI_D0_GPIO_CLK_ENABLE();
 8005a92:	4b87      	ldr	r3, [pc, #540]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a98:	4a85      	ldr	r2, [pc, #532]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005aa2:	4b83      	ldr	r3, [pc, #524]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  HSPI_D1_GPIO_CLK_ENABLE();
 8005ab0:	4b7f      	ldr	r3, [pc, #508]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ab6:	4a7e      	ldr	r2, [pc, #504]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005abc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ac0:	4b7b      	ldr	r3, [pc, #492]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  HSPI_D2_GPIO_CLK_ENABLE();
 8005ace:	4b78      	ldr	r3, [pc, #480]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ad4:	4a76      	ldr	r2, [pc, #472]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ada:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ade:	4b74      	ldr	r3, [pc, #464]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8005aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  HSPI_D3_GPIO_CLK_ENABLE();
 8005aec:	4b70      	ldr	r3, [pc, #448]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005af2:	4a6f      	ldr	r2, [pc, #444]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005afc:	4b6c      	ldr	r3, [pc, #432]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b06:	643b      	str	r3, [r7, #64]	; 0x40
 8005b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  HSPI_D4_GPIO_CLK_ENABLE();
 8005b0a:	4b69      	ldr	r3, [pc, #420]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b10:	4a67      	ldr	r2, [pc, #412]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b1a:	4b65      	ldr	r3, [pc, #404]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  HSPI_D5_GPIO_CLK_ENABLE();
 8005b28:	4b61      	ldr	r3, [pc, #388]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b2e:	4a60      	ldr	r2, [pc, #384]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b34:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b38:	4b5d      	ldr	r3, [pc, #372]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  HSPI_D6_GPIO_CLK_ENABLE();
 8005b46:	4b5a      	ldr	r3, [pc, #360]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b4c:	4a58      	ldr	r2, [pc, #352]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b56:	4b56      	ldr	r3, [pc, #344]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b60:	637b      	str	r3, [r7, #52]	; 0x34
 8005b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  HSPI_D7_GPIO_CLK_ENABLE();
 8005b64:	4b52      	ldr	r3, [pc, #328]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b6a:	4a51      	ldr	r2, [pc, #324]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b70:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b74:	4b4e      	ldr	r3, [pc, #312]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  HSPI_D8_GPIO_CLK_ENABLE();
 8005b82:	4b4b      	ldr	r3, [pc, #300]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b88:	4a49      	ldr	r2, [pc, #292]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b92:	4b47      	ldr	r3, [pc, #284]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  HSPI_D9_GPIO_CLK_ENABLE();
 8005ba0:	4b43      	ldr	r3, [pc, #268]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba6:	4a42      	ldr	r2, [pc, #264]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005bb0:	4b3f      	ldr	r3, [pc, #252]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  HSPI_D10_GPIO_CLK_ENABLE();
 8005bbe:	4b3c      	ldr	r3, [pc, #240]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc4:	4a3a      	ldr	r2, [pc, #232]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005bce:	4b38      	ldr	r3, [pc, #224]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  HSPI_D11_GPIO_CLK_ENABLE();
 8005bdc:	4b34      	ldr	r3, [pc, #208]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be2:	4a33      	ldr	r2, [pc, #204]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005bec:	4b30      	ldr	r3, [pc, #192]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf6:	623b      	str	r3, [r7, #32]
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
  HSPI_D12_GPIO_CLK_ENABLE();
 8005bfa:	4b2d      	ldr	r3, [pc, #180]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c00:	4a2b      	ldr	r2, [pc, #172]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005c0a:	4b29      	ldr	r3, [pc, #164]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c14:	61fb      	str	r3, [r7, #28]
 8005c16:	69fb      	ldr	r3, [r7, #28]
  HSPI_D13_GPIO_CLK_ENABLE();
 8005c18:	4b25      	ldr	r3, [pc, #148]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c1e:	4a24      	ldr	r2, [pc, #144]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c24:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005c28:	4b21      	ldr	r3, [pc, #132]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c32:	61bb      	str	r3, [r7, #24]
 8005c34:	69bb      	ldr	r3, [r7, #24]
  HSPI_D14_GPIO_CLK_ENABLE();
 8005c36:	4b1e      	ldr	r3, [pc, #120]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c3c:	4a1c      	ldr	r2, [pc, #112]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005c46:	4b1a      	ldr	r3, [pc, #104]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	697b      	ldr	r3, [r7, #20]
  HSPI_D15_GPIO_CLK_ENABLE();
 8005c54:	4b16      	ldr	r3, [pc, #88]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c5a:	4a15      	ldr	r2, [pc, #84]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005c5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c60:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005c64:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <HSPI_RAM_MspInit+0x304>)
 8005c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c6e:	613b      	str	r3, [r7, #16]
 8005c70:	693b      	ldr	r3, [r7, #16]

  /*  Activate HSLV  */
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_CS_GPIO_PORT, HSPI_CS_PIN);
 8005c72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c76:	4810      	ldr	r0, [pc, #64]	; (8005cb8 <HSPI_RAM_MspInit+0x30c>)
 8005c78:	f004 f910 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_DQS0_GPIO_PORT, HSPI_DQS0_PIN);
 8005c7c:	2104      	movs	r1, #4
 8005c7e:	480f      	ldr	r0, [pc, #60]	; (8005cbc <HSPI_RAM_MspInit+0x310>)
 8005c80:	f004 f90c 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_DQS1_GPIO_PORT, HSPI_DQS1_PIN);
 8005c84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c88:	480c      	ldr	r0, [pc, #48]	; (8005cbc <HSPI_RAM_MspInit+0x310>)
 8005c8a:	f004 f907 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_CLK_GPIO_PORT, HSPI_CLK_PIN);
 8005c8e:	2108      	movs	r1, #8
 8005c90:	480a      	ldr	r0, [pc, #40]	; (8005cbc <HSPI_RAM_MspInit+0x310>)
 8005c92:	f004 f903 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_NCLK_GPIO_PORT, HSPI_NCLK_PIN);
 8005c96:	2110      	movs	r1, #16
 8005c98:	4808      	ldr	r0, [pc, #32]	; (8005cbc <HSPI_RAM_MspInit+0x310>)
 8005c9a:	f004 f8ff 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>

  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D0_GPIO_PORT, HSPI_D0_PIN);
 8005c9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ca2:	4805      	ldr	r0, [pc, #20]	; (8005cb8 <HSPI_RAM_MspInit+0x30c>)
 8005ca4:	f004 f8fa 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D1_GPIO_PORT, HSPI_D1_PIN);
 8005ca8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005cac:	e008      	b.n	8005cc0 <HSPI_RAM_MspInit+0x314>
 8005cae:	bf00      	nop
 8005cb0:	46020c00 	.word	0x46020c00
 8005cb4:	46020800 	.word	0x46020800
 8005cb8:	42021c00 	.word	0x42021c00
 8005cbc:	42022000 	.word	0x42022000
 8005cc0:	48bf      	ldr	r0, [pc, #764]	; (8005fc0 <HSPI_RAM_MspInit+0x614>)
 8005cc2:	f004 f8eb 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D2_GPIO_PORT, HSPI_D2_PIN);
 8005cc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005cca:	48bd      	ldr	r0, [pc, #756]	; (8005fc0 <HSPI_RAM_MspInit+0x614>)
 8005ccc:	f004 f8e6 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D3_GPIO_PORT, HSPI_D3_PIN);
 8005cd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cd4:	48ba      	ldr	r0, [pc, #744]	; (8005fc0 <HSPI_RAM_MspInit+0x614>)
 8005cd6:	f004 f8e1 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D4_GPIO_PORT, HSPI_D4_PIN);
 8005cda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005cde:	48b8      	ldr	r0, [pc, #736]	; (8005fc0 <HSPI_RAM_MspInit+0x614>)
 8005ce0:	f004 f8dc 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D5_GPIO_PORT, HSPI_D5_PIN);
 8005ce4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ce8:	48b5      	ldr	r0, [pc, #724]	; (8005fc0 <HSPI_RAM_MspInit+0x614>)
 8005cea:	f004 f8d7 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D6_GPIO_PORT, HSPI_D6_PIN);
 8005cee:	2101      	movs	r1, #1
 8005cf0:	48b4      	ldr	r0, [pc, #720]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005cf2:	f004 f8d3 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D7_GPIO_PORT, HSPI_D7_PIN);
 8005cf6:	2102      	movs	r1, #2
 8005cf8:	48b2      	ldr	r0, [pc, #712]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005cfa:	f004 f8cf 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>

  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D8_GPIO_PORT, HSPI_D8_PIN);
 8005cfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d02:	48b0      	ldr	r0, [pc, #704]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005d04:	f004 f8ca 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D9_GPIO_PORT, HSPI_D9_PIN);
 8005d08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d0c:	48ad      	ldr	r0, [pc, #692]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005d0e:	f004 f8c5 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D10_GPIO_PORT, HSPI_D10_PIN);
 8005d12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d16:	48ab      	ldr	r0, [pc, #684]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005d18:	f004 f8c0 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D11_GPIO_PORT, HSPI_D11_PIN);
 8005d1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d20:	48a8      	ldr	r0, [pc, #672]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005d22:	f004 f8bb 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D12_GPIO_PORT, HSPI_D12_PIN);
 8005d26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d2a:	48a6      	ldr	r0, [pc, #664]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005d2c:	f004 f8b6 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D13_GPIO_PORT, HSPI_D13_PIN);
 8005d30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d34:	48a3      	ldr	r0, [pc, #652]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005d36:	f004 f8b1 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D14_GPIO_PORT, HSPI_D14_PIN);
 8005d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d3e:	48a1      	ldr	r0, [pc, #644]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005d40:	f004 f8ac 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D15_GPIO_PORT, HSPI_D15_PIN);
 8005d44:	2101      	movs	r1, #1
 8005d46:	48a0      	ldr	r0, [pc, #640]	; (8005fc8 <HSPI_RAM_MspInit+0x61c>)
 8005d48:	f004 f8a8 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>

  /* Reset the HSPI memory interface */
  HSPI_FORCE_RESET();
 8005d4c:	4b9f      	ldr	r3, [pc, #636]	; (8005fcc <HSPI_RAM_MspInit+0x620>)
 8005d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d50:	4a9e      	ldr	r2, [pc, #632]	; (8005fcc <HSPI_RAM_MspInit+0x620>)
 8005d52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d56:	6693      	str	r3, [r2, #104]	; 0x68
  HSPI_RELEASE_RESET();
 8005d58:	4b9c      	ldr	r3, [pc, #624]	; (8005fcc <HSPI_RAM_MspInit+0x620>)
 8005d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d5c:	4a9b      	ldr	r2, [pc, #620]	; (8005fcc <HSPI_RAM_MspInit+0x620>)
 8005d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d62:	6693      	str	r3, [r2, #104]	; 0x68

  /* HSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_CS_PIN;
 8005d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d68:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	673b      	str	r3, [r7, #112]	; 0x70
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	677b      	str	r3, [r7, #116]	; 0x74
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005d72:	2302      	movs	r3, #2
 8005d74:	67bb      	str	r3, [r7, #120]	; 0x78
  GPIO_InitStruct.Alternate = HSPI_CS_PIN_AF;
 8005d76:	2308      	movs	r3, #8
 8005d78:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8005d7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005d7e:	4619      	mov	r1, r3
 8005d80:	488f      	ldr	r0, [pc, #572]	; (8005fc0 <HSPI_RAM_MspInit+0x614>)
 8005d82:	f003 fd8b 	bl	800989c <HAL_GPIO_Init>

  /* HSPI DQS0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_DQS0_PIN;
 8005d86:	2304      	movs	r3, #4
 8005d88:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_DQS0_PIN_AF;
 8005d8a:	2308      	movs	r3, #8
 8005d8c:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_DQS0_GPIO_PORT, &GPIO_InitStruct);
 8005d8e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005d92:	4619      	mov	r1, r3
 8005d94:	488b      	ldr	r0, [pc, #556]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005d96:	f003 fd81 	bl	800989c <HAL_GPIO_Init>

  /* HSPI DQS1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_DQS1_PIN;
 8005d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_DQS1_PIN_AF;
 8005da0:	2308      	movs	r3, #8
 8005da2:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_DQS1_GPIO_PORT, &GPIO_InitStruct);
 8005da4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005da8:	4619      	mov	r1, r3
 8005daa:	4886      	ldr	r0, [pc, #536]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005dac:	f003 fd76 	bl	800989c <HAL_GPIO_Init>

  /* HSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_CLK_PIN;
 8005db0:	2308      	movs	r3, #8
 8005db2:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_CLK_PIN_AF;
 8005db4:	2308      	movs	r3, #8
 8005db6:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8005db8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4881      	ldr	r0, [pc, #516]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005dc0:	f003 fd6c 	bl	800989c <HAL_GPIO_Init>

  /* HSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D0_PIN;
 8005dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D0_PIN_AF;
 8005dca:	2308      	movs	r3, #8
 8005dcc:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8005dce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	487a      	ldr	r0, [pc, #488]	; (8005fc0 <HSPI_RAM_MspInit+0x614>)
 8005dd6:	f003 fd61 	bl	800989c <HAL_GPIO_Init>

  /* HSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D1_PIN;
 8005dda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005dde:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D1_PIN_AF;
 8005de0:	2308      	movs	r3, #8
 8005de2:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8005de4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005de8:	4619      	mov	r1, r3
 8005dea:	4875      	ldr	r0, [pc, #468]	; (8005fc0 <HSPI_RAM_MspInit+0x614>)
 8005dec:	f003 fd56 	bl	800989c <HAL_GPIO_Init>

  /* HSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D2_PIN;
 8005df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005df4:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D2_PIN_AF;
 8005df6:	2308      	movs	r3, #8
 8005df8:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8005dfa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005dfe:	4619      	mov	r1, r3
 8005e00:	486f      	ldr	r0, [pc, #444]	; (8005fc0 <HSPI_RAM_MspInit+0x614>)
 8005e02:	f003 fd4b 	bl	800989c <HAL_GPIO_Init>

  /* HSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D3_PIN;
 8005e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D3_PIN_AF;
 8005e0c:	2308      	movs	r3, #8
 8005e0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8005e10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e14:	4619      	mov	r1, r3
 8005e16:	486a      	ldr	r0, [pc, #424]	; (8005fc0 <HSPI_RAM_MspInit+0x614>)
 8005e18:	f003 fd40 	bl	800989c <HAL_GPIO_Init>

  /* HSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D4_PIN;
 8005e1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e20:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D4_PIN_AF;
 8005e22:	2308      	movs	r3, #8
 8005e24:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8005e26:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4864      	ldr	r0, [pc, #400]	; (8005fc0 <HSPI_RAM_MspInit+0x614>)
 8005e2e:	f003 fd35 	bl	800989c <HAL_GPIO_Init>

  /* HSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D5_PIN;
 8005e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e36:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D5_PIN_AF;
 8005e38:	2308      	movs	r3, #8
 8005e3a:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 8005e3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e40:	4619      	mov	r1, r3
 8005e42:	485f      	ldr	r0, [pc, #380]	; (8005fc0 <HSPI_RAM_MspInit+0x614>)
 8005e44:	f003 fd2a 	bl	800989c <HAL_GPIO_Init>

  /* HSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D6_PIN;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D6_PIN_AF;
 8005e4c:	2308      	movs	r3, #8
 8005e4e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8005e50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e54:	4619      	mov	r1, r3
 8005e56:	485b      	ldr	r0, [pc, #364]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005e58:	f003 fd20 	bl	800989c <HAL_GPIO_Init>

  /* HSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D7_PIN;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D7_PIN_AF;
 8005e60:	2308      	movs	r3, #8
 8005e62:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8005e64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4856      	ldr	r0, [pc, #344]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005e6c:	f003 fd16 	bl	800989c <HAL_GPIO_Init>

  /* HSPI D8 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D8_PIN;
 8005e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e74:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D8_PIN_AF;
 8005e76:	2308      	movs	r3, #8
 8005e78:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D8_GPIO_PORT, &GPIO_InitStruct);
 8005e7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4850      	ldr	r0, [pc, #320]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005e82:	f003 fd0b 	bl	800989c <HAL_GPIO_Init>

  /* HSPI D9 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D9_PIN;
 8005e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D9_PIN_AF;
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D9_GPIO_PORT, &GPIO_InitStruct);
 8005e90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e94:	4619      	mov	r1, r3
 8005e96:	484b      	ldr	r0, [pc, #300]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005e98:	f003 fd00 	bl	800989c <HAL_GPIO_Init>

  /* HSPI D10 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D10_PIN;
 8005e9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D10_PIN_AF;
 8005ea2:	2308      	movs	r3, #8
 8005ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D10_GPIO_PORT, &GPIO_InitStruct);
 8005ea6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4845      	ldr	r0, [pc, #276]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005eae:	f003 fcf5 	bl	800989c <HAL_GPIO_Init>

  /* HSPI D11 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D11_PIN;
 8005eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D11_PIN_AF;
 8005eb8:	2308      	movs	r3, #8
 8005eba:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D11_GPIO_PORT, &GPIO_InitStruct);
 8005ebc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4840      	ldr	r0, [pc, #256]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005ec4:	f003 fcea 	bl	800989c <HAL_GPIO_Init>

  /* HSPI D12 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D12_PIN;
 8005ec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ecc:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D12_PIN_AF;
 8005ece:	2308      	movs	r3, #8
 8005ed0:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D12_GPIO_PORT, &GPIO_InitStruct);
 8005ed2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	483a      	ldr	r0, [pc, #232]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005eda:	f003 fcdf 	bl	800989c <HAL_GPIO_Init>

  /* HSPI D13 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D13_PIN;
 8005ede:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D13_PIN_AF;
 8005ee4:	2308      	movs	r3, #8
 8005ee6:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D13_GPIO_PORT, &GPIO_InitStruct);
 8005ee8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005eec:	4619      	mov	r1, r3
 8005eee:	4835      	ldr	r0, [pc, #212]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005ef0:	f003 fcd4 	bl	800989c <HAL_GPIO_Init>

  /* HSPI D14 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D14_PIN;
 8005ef4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D14_PIN_AF;
 8005efa:	2308      	movs	r3, #8
 8005efc:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D14_GPIO_PORT, &GPIO_InitStruct);
 8005efe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f02:	4619      	mov	r1, r3
 8005f04:	482f      	ldr	r0, [pc, #188]	; (8005fc4 <HSPI_RAM_MspInit+0x618>)
 8005f06:	f003 fcc9 	bl	800989c <HAL_GPIO_Init>

  /* HSPI D15 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D15_PIN;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D15_PIN_AF;
 8005f0e:	2308      	movs	r3, #8
 8005f10:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D15_GPIO_PORT, &GPIO_InitStruct);
 8005f12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f16:	4619      	mov	r1, r3
 8005f18:	482b      	ldr	r0, [pc, #172]	; (8005fc8 <HSPI_RAM_MspInit+0x61c>)
 8005f1a:	f003 fcbf 	bl	800989c <HAL_GPIO_Init>

  hdmatx.Init.Request = GPDMA1_REQUEST_HSPI1;
 8005f1e:	4b2c      	ldr	r3, [pc, #176]	; (8005fd0 <HSPI_RAM_MspInit+0x624>)
 8005f20:	2272      	movs	r2, #114	; 0x72
 8005f22:	605a      	str	r2, [r3, #4]
  hdmatx.Instance = GPDMA1_Channel12;
 8005f24:	4b2a      	ldr	r3, [pc, #168]	; (8005fd0 <HSPI_RAM_MspInit+0x624>)
 8005f26:	4a2b      	ldr	r2, [pc, #172]	; (8005fd4 <HSPI_RAM_MspInit+0x628>)
 8005f28:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0x00, 0);
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	2054      	movs	r0, #84	; 0x54
 8005f30:	f001 fb0c 	bl	800754c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 8005f34:	2054      	movs	r0, #84	; 0x54
 8005f36:	f001 fb23 	bl	8007580 <HAL_NVIC_EnableIRQ>

  /* Configure the HSPI DMA transmit */
  hdmatx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005f3a:	4b25      	ldr	r3, [pc, #148]	; (8005fd0 <HSPI_RAM_MspInit+0x624>)
 8005f3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f40:	60da      	str	r2, [r3, #12]
  hdmatx.Init.SrcInc              = DMA_SINC_INCREMENTED;
 8005f42:	4b23      	ldr	r3, [pc, #140]	; (8005fd0 <HSPI_RAM_MspInit+0x624>)
 8005f44:	2208      	movs	r2, #8
 8005f46:	611a      	str	r2, [r3, #16]
  hdmatx.Init.DestInc             = DMA_DINC_FIXED;
 8005f48:	4b21      	ldr	r3, [pc, #132]	; (8005fd0 <HSPI_RAM_MspInit+0x624>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	615a      	str	r2, [r3, #20]
  hdmatx.Init.Priority            = DMA_HIGH_PRIORITY;
 8005f4e:	4b20      	ldr	r3, [pc, #128]	; (8005fd0 <HSPI_RAM_MspInit+0x624>)
 8005f50:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005f54:	621a      	str	r2, [r3, #32]
  hdmatx.Init.SrcBurstLength      = 1;
 8005f56:	4b1e      	ldr	r3, [pc, #120]	; (8005fd0 <HSPI_RAM_MspInit+0x624>)
 8005f58:	2201      	movs	r2, #1
 8005f5a:	625a      	str	r2, [r3, #36]	; 0x24
  hdmatx.Init.DestBurstLength     = 1;
 8005f5c:	4b1c      	ldr	r3, [pc, #112]	; (8005fd0 <HSPI_RAM_MspInit+0x624>)
 8005f5e:	2201      	movs	r2, #1
 8005f60:	629a      	str	r2, [r3, #40]	; 0x28
  hdmatx.Init.TransferEventMode   = DMA_TCEM_BLOCK_TRANSFER;
 8005f62:	4b1b      	ldr	r3, [pc, #108]	; (8005fd0 <HSPI_RAM_MspInit+0x624>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	631a      	str	r2, [r3, #48]	; 0x30
  hdmatx.Init.SrcDataWidth        = DMA_SRC_DATAWIDTH_WORD ;
 8005f68:	4b19      	ldr	r3, [pc, #100]	; (8005fd0 <HSPI_RAM_MspInit+0x624>)
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	619a      	str	r2, [r3, #24]
  hdmatx.Init.DestDataWidth       = DMA_DEST_DATAWIDTH_WORD  ;
 8005f6e:	4b18      	ldr	r3, [pc, #96]	; (8005fd0 <HSPI_RAM_MspInit+0x624>)
 8005f70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f74:	61da      	str	r2, [r3, #28]

  /* Enable the GPDMA clock */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8005f76:	4b15      	ldr	r3, [pc, #84]	; (8005fcc <HSPI_RAM_MspInit+0x620>)
 8005f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7c:	4a13      	ldr	r2, [pc, #76]	; (8005fcc <HSPI_RAM_MspInit+0x620>)
 8005f7e:	f043 0301 	orr.w	r3, r3, #1
 8005f82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005f86:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <HSPI_RAM_MspInit+0x620>)
 8005f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	68fb      	ldr	r3, [r7, #12]

  /* Initialize the DMA channel */
  __HAL_LINKDMA(hhspi, hdmatx, hdmatx);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a0e      	ldr	r2, [pc, #56]	; (8005fd0 <HSPI_RAM_MspInit+0x624>)
 8005f98:	64da      	str	r2, [r3, #76]	; 0x4c
 8005f9a:	4a0d      	ldr	r2, [pc, #52]	; (8005fd0 <HSPI_RAM_MspInit+0x624>)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_DMA_Init(&hdmatx);
 8005fa0:	480b      	ldr	r0, [pc, #44]	; (8005fd0 <HSPI_RAM_MspInit+0x624>)
 8005fa2:	f001 fcf1 	bl	8007988 <HAL_DMA_Init>

  hdmarx.Init.Request = GPDMA1_REQUEST_HSPI1;
 8005fa6:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <HSPI_RAM_MspInit+0x62c>)
 8005fa8:	2272      	movs	r2, #114	; 0x72
 8005faa:	605a      	str	r2, [r3, #4]
  hdmarx.Instance = GPDMA1_Channel7;
 8005fac:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <HSPI_RAM_MspInit+0x62c>)
 8005fae:	4a0b      	ldr	r2, [pc, #44]	; (8005fdc <HSPI_RAM_MspInit+0x630>)
 8005fb0:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(GPDMA1_Channel7_IRQn, 0x00, 0);
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	2024      	movs	r0, #36	; 0x24
 8005fb8:	f001 fac8 	bl	800754c <HAL_NVIC_SetPriority>
 8005fbc:	e010      	b.n	8005fe0 <HSPI_RAM_MspInit+0x634>
 8005fbe:	bf00      	nop
 8005fc0:	42021c00 	.word	0x42021c00
 8005fc4:	42022000 	.word	0x42022000
 8005fc8:	42022400 	.word	0x42022400
 8005fcc:	46020c00 	.word	0x46020c00
 8005fd0:	20197914 	.word	0x20197914
 8005fd4:	40020650 	.word	0x40020650
 8005fd8:	2019798c 	.word	0x2019798c
 8005fdc:	400203d0 	.word	0x400203d0
  HAL_NVIC_EnableIRQ(GPDMA1_Channel7_IRQn);
 8005fe0:	2024      	movs	r0, #36	; 0x24
 8005fe2:	f001 facd 	bl	8007580 <HAL_NVIC_EnableIRQ>

  /* Configure the HSPI DMA receive */
  hdmarx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8005fe6:	4b25      	ldr	r3, [pc, #148]	; (800607c <HSPI_RAM_MspInit+0x6d0>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	60da      	str	r2, [r3, #12]
  hdmarx.Init.SrcInc              = DMA_SINC_FIXED;
 8005fec:	4b23      	ldr	r3, [pc, #140]	; (800607c <HSPI_RAM_MspInit+0x6d0>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	611a      	str	r2, [r3, #16]
  hdmarx.Init.DestInc             = DMA_DINC_INCREMENTED;
 8005ff2:	4b22      	ldr	r3, [pc, #136]	; (800607c <HSPI_RAM_MspInit+0x6d0>)
 8005ff4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005ff8:	615a      	str	r2, [r3, #20]
  hdmarx.Init.Priority            = DMA_HIGH_PRIORITY;
 8005ffa:	4b20      	ldr	r3, [pc, #128]	; (800607c <HSPI_RAM_MspInit+0x6d0>)
 8005ffc:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006000:	621a      	str	r2, [r3, #32]
  hdmarx.Init.SrcBurstLength      = 1;
 8006002:	4b1e      	ldr	r3, [pc, #120]	; (800607c <HSPI_RAM_MspInit+0x6d0>)
 8006004:	2201      	movs	r2, #1
 8006006:	625a      	str	r2, [r3, #36]	; 0x24
  hdmarx.Init.DestBurstLength     = 1;
 8006008:	4b1c      	ldr	r3, [pc, #112]	; (800607c <HSPI_RAM_MspInit+0x6d0>)
 800600a:	2201      	movs	r2, #1
 800600c:	629a      	str	r2, [r3, #40]	; 0x28
  hdmarx.Init.TransferEventMode   = DMA_TCEM_BLOCK_TRANSFER;
 800600e:	4b1b      	ldr	r3, [pc, #108]	; (800607c <HSPI_RAM_MspInit+0x6d0>)
 8006010:	2200      	movs	r2, #0
 8006012:	631a      	str	r2, [r3, #48]	; 0x30
  hdmarx.Init.SrcDataWidth        = DMA_SRC_DATAWIDTH_WORD ;
 8006014:	4b19      	ldr	r3, [pc, #100]	; (800607c <HSPI_RAM_MspInit+0x6d0>)
 8006016:	2202      	movs	r2, #2
 8006018:	619a      	str	r2, [r3, #24]
  hdmarx.Init.DestDataWidth       = DMA_DEST_DATAWIDTH_WORD  ;
 800601a:	4b18      	ldr	r3, [pc, #96]	; (800607c <HSPI_RAM_MspInit+0x6d0>)
 800601c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006020:	61da      	str	r2, [r3, #28]

  /* Enable the GPDMA clock */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8006022:	4b17      	ldr	r3, [pc, #92]	; (8006080 <HSPI_RAM_MspInit+0x6d4>)
 8006024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006028:	4a15      	ldr	r2, [pc, #84]	; (8006080 <HSPI_RAM_MspInit+0x6d4>)
 800602a:	f043 0301 	orr.w	r3, r3, #1
 800602e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8006032:	4b13      	ldr	r3, [pc, #76]	; (8006080 <HSPI_RAM_MspInit+0x6d4>)
 8006034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	68bb      	ldr	r3, [r7, #8]

  /* Initialize the DMA channel */
  __HAL_LINKDMA(hhspi, hdmarx, hdmarx);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a0e      	ldr	r2, [pc, #56]	; (800607c <HSPI_RAM_MspInit+0x6d0>)
 8006044:	651a      	str	r2, [r3, #80]	; 0x50
 8006046:	4a0d      	ldr	r2, [pc, #52]	; (800607c <HSPI_RAM_MspInit+0x6d0>)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_DMA_Init(&hdmarx);
 800604c:	480b      	ldr	r0, [pc, #44]	; (800607c <HSPI_RAM_MspInit+0x6d0>)
 800604e:	f001 fc9b 	bl	8007988 <HAL_DMA_Init>

  /* Enable and set priority of the HSPI and DMA interrupts */
  HAL_NVIC_SetPriority(HSPI1_IRQn, BSP_HSPI_RAM_IT_PRIORITY, 0);
 8006052:	2200      	movs	r2, #0
 8006054:	210f      	movs	r1, #15
 8006056:	2083      	movs	r0, #131	; 0x83
 8006058:	f001 fa78 	bl	800754c <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(HSPI_RAM_DMAx_IRQn, BSP_HSPI_RAM_DMA_IT_PRIORITY, 0);
 800605c:	2200      	movs	r2, #0
 800605e:	210f      	movs	r1, #15
 8006060:	201f      	movs	r0, #31
 8006062:	f001 fa73 	bl	800754c <HAL_NVIC_SetPriority>

  HAL_NVIC_EnableIRQ(HSPI1_IRQn);
 8006066:	2083      	movs	r0, #131	; 0x83
 8006068:	f001 fa8a 	bl	8007580 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(HSPI_RAM_DMAx_IRQn);
 800606c:	201f      	movs	r0, #31
 800606e:	f001 fa87 	bl	8007580 <HAL_NVIC_EnableIRQ>
}
 8006072:	bf00      	nop
 8006074:	3780      	adds	r7, #128	; 0x80
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	2019798c 	.word	0x2019798c
 8006080:	46020c00 	.word	0x46020c00

08006084 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 8006084:	b590      	push	{r4, r7, lr}
 8006086:	b095      	sub	sp, #84	; 0x54
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_InitTypeDef ospi_init;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <BSP_OSPI_NOR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006094:	f06f 0301 	mvn.w	r3, #1
 8006098:	64fb      	str	r3, [r7, #76]	; 0x4c
 800609a:	e095      	b.n	80061c8 <BSP_OSPI_NOR_Init+0x144>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800609c:	494d      	ldr	r1, [pc, #308]	; (80061d4 <BSP_OSPI_NOR_Init+0x150>)
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	4613      	mov	r3, r2
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	4413      	add	r3, r2
 80060a6:	440b      	add	r3, r1
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f040 808a 	bne.w	80061c4 <BSP_OSPI_NOR_Init+0x140>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	4613      	mov	r3, r2
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	4413      	add	r3, r2
 80060b8:	015b      	lsls	r3, r3, #5
 80060ba:	4a47      	ldr	r2, [pc, #284]	; (80061d8 <BSP_OSPI_NOR_Init+0x154>)
 80060bc:	4413      	add	r3, r2
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fa26 	bl	8006510 <OSPI_NOR_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Get Flash information of one memory */
      (void)MX25UM51245G_GetFlashInfo(&pInfo);
 80060c4:	f107 031c 	add.w	r3, r7, #28
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fd fd53 	bl	8003b74 <MX25UM51245G_GetFlashInfo>

      /* Fill config structure */
      ospi_init.ClockPrescaler = 1;
 80060ce:	2301      	movs	r3, #1
 80060d0:	613b      	str	r3, [r7, #16]
      ospi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d8:	fa93 f3a3 	rbit	r3, r3
 80060dc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80060de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80060e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <BSP_OSPI_NOR_Init+0x68>
    return 32U;
 80060e8:	2320      	movs	r3, #32
 80060ea:	e003      	b.n	80060f4 <BSP_OSPI_NOR_Init+0x70>
  return __builtin_clz(value);
 80060ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060ee:	fab3 f383 	clz	r3, r3
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	60fb      	str	r3, [r7, #12]
      ospi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 80060f6:	2300      	movs	r3, #0
 80060f8:	617b      	str	r3, [r7, #20]
      ospi_init.TransferRate   = (uint32_t) Init->TransferRate;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	61bb      	str	r3, [r7, #24]

      /* STM32 OSPI interface initialization */
      if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_init) != HAL_OK)
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	4413      	add	r3, r2
 8006108:	015b      	lsls	r3, r3, #5
 800610a:	4a33      	ldr	r2, [pc, #204]	; (80061d8 <BSP_OSPI_NOR_Init+0x154>)
 800610c:	4413      	add	r3, r2
 800610e:	f107 020c 	add.w	r2, r7, #12
 8006112:	4611      	mov	r1, r2
 8006114:	4618      	mov	r0, r3
 8006116:	f000 f861 	bl	80061dc <MX_OSPI_NOR_Init>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <BSP_OSPI_NOR_Init+0xa4>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006120:	f06f 0303 	mvn.w	r3, #3
 8006124:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006126:	e04f      	b.n	80061c8 <BSP_OSPI_NOR_Init+0x144>
      }
      /* OSPI Delay Block enable */
      else if (OSPI_DLYB_Enable(&hospi_nor[Instance]) != BSP_ERROR_NONE)
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	4613      	mov	r3, r2
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	4413      	add	r3, r2
 8006130:	015b      	lsls	r3, r3, #5
 8006132:	4a29      	ldr	r2, [pc, #164]	; (80061d8 <BSP_OSPI_NOR_Init+0x154>)
 8006134:	4413      	add	r3, r2
 8006136:	4618      	mov	r0, r3
 8006138:	f000 f9a0 	bl	800647c <OSPI_DLYB_Enable>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <BSP_OSPI_NOR_Init+0xc6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006142:	f06f 0304 	mvn.w	r3, #4
 8006146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006148:	e03e      	b.n	80061c8 <BSP_OSPI_NOR_Init+0x144>
      }
      /* OSPI memory reset */
      else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fb72 	bl	8006834 <OSPI_NOR_ResetMemory>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <BSP_OSPI_NOR_Init+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006156:	f06f 0304 	mvn.w	r3, #4
 800615a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800615c:	e034      	b.n	80061c8 <BSP_OSPI_NOR_Init+0x144>
      }
      /* Check if memory is ready */
      else if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	4613      	mov	r3, r2
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	4413      	add	r3, r2
 8006166:	015b      	lsls	r3, r3, #5
 8006168:	4a1b      	ldr	r2, [pc, #108]	; (80061d8 <BSP_OSPI_NOR_Init+0x154>)
 800616a:	1898      	adds	r0, r3, r2
 800616c:	4919      	ldr	r1, [pc, #100]	; (80061d4 <BSP_OSPI_NOR_Init+0x150>)
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	4613      	mov	r3, r2
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	4413      	add	r3, r2
 8006176:	440b      	add	r3, r1
 8006178:	3301      	adds	r3, #1
 800617a:	7819      	ldrb	r1, [r3, #0]
 800617c:	4c15      	ldr	r4, [pc, #84]	; (80061d4 <BSP_OSPI_NOR_Init+0x150>)
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	4613      	mov	r3, r2
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	4413      	add	r3, r2
 8006186:	4423      	add	r3, r4
 8006188:	3302      	adds	r3, #2
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	461a      	mov	r2, r3
 800618e:	f7fd fd20 	bl	8003bd2 <MX25UM51245G_AutoPollingMemReady>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <BSP_OSPI_NOR_Init+0x11c>
                                                Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006198:	f06f 0304 	mvn.w	r3, #4
 800619c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800619e:	e013      	b.n	80061c8 <BSP_OSPI_NOR_Init+0x144>
      }
      /* Configure the memory */
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	7819      	ldrb	r1, [r3, #0]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	785b      	ldrb	r3, [r3, #1]
 80061a8:	461a      	mov	r2, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f8da 	bl	8006364 <BSP_OSPI_NOR_ConfigFlash>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <BSP_OSPI_NOR_Init+0x13a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80061b6:	f06f 0304 	mvn.w	r3, #4
 80061ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061bc:	e004      	b.n	80061c8 <BSP_OSPI_NOR_Init+0x144>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80061be:	2300      	movs	r3, #0
 80061c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061c2:	e001      	b.n	80061c8 <BSP_OSPI_NOR_Init+0x144>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  /* Return BSP status */
  return ret;
 80061c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3754      	adds	r7, #84	; 0x54
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd90      	pop	{r4, r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20197a64 	.word	0x20197a64
 80061d8:	20197a04 	.word	0x20197a04

080061dc <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Init           OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(XSPI_HandleTypeDef *hospi, MX_OSPI_InitTypeDef *Init)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a20      	ldr	r2, [pc, #128]	; (800626c <MX_OSPI_NOR_Init+0x90>)
 80061ea:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThresholdByte       = 4;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2204      	movs	r2, #4
 80061f0:	605a      	str	r2, [r3, #4]
  hospi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	609a      	str	r2, [r3, #8]
  hospi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTimeCycle = 2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler          = Init->ClockPrescaler;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting          = Init->SampleShifting;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary      = 0;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass        = HAL_XSPI_DELAY_BLOCK_ON;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	635a      	str	r2, [r3, #52]	; 0x34

  if (Init->TransferRate == (uint32_t) BSP_OSPI_NOR_DTR_TRANSFER)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d108      	bne.n	800624e <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006242:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800624a:	62da      	str	r2, [r3, #44]	; 0x2c
 800624c:	e005      	b.n	800625a <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_XSPI_Init(hospi);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f00b fd02 	bl	8011c64 <HAL_XSPI_Init>
 8006260:	4603      	mov	r3, r0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	420d1400 	.word	0x420d1400

08006270 <BSP_OSPI_NOR_GetInfo>:
  * @param  Instance  OSPI instance
  * @param  pInfo     pointer on the configuration structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_GetInfo(uint32_t Instance, BSP_OSPI_NOR_Info_t *pInfo)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <BSP_OSPI_NOR_GetInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006284:	f06f 0301 	mvn.w	r3, #1
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	e002      	b.n	8006292 <BSP_OSPI_NOR_GetInfo+0x22>
  }
  else
  {
    (void)MX25UM51245G_GetFlashInfo(pInfo);
 800628c:	6838      	ldr	r0, [r7, #0]
 800628e:	f7fd fc71 	bl	8003b74 <MX25UM51245G_GetFlashInfo>
  }

  /* Return BSP status */
  return ret;
 8006292:	68fb      	ldr	r3, [r7, #12]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80062a4:	2300      	movs	r3, #0
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80062ae:	f06f 0301 	mvn.w	r3, #1
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	e04d      	b.n	8006352 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
  }
  else
  {
    if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80062b6:	4929      	ldr	r1, [pc, #164]	; (800635c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	4613      	mov	r3, r2
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	4413      	add	r3, r2
 80062c0:	440b      	add	r3, r1
 80062c2:	3302      	adds	r3, #2
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d122      	bne.n	8006310 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x74>
    {
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	4613      	mov	r3, r2
 80062ce:	005b      	lsls	r3, r3, #1
 80062d0:	4413      	add	r3, r2
 80062d2:	015b      	lsls	r3, r3, #5
 80062d4:	4a22      	ldr	r2, [pc, #136]	; (8006360 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc4>)
 80062d6:	1898      	adds	r0, r3, r2
 80062d8:	4920      	ldr	r1, [pc, #128]	; (800635c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	4613      	mov	r3, r2
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	4413      	add	r3, r2
 80062e2:	440b      	add	r3, r1
 80062e4:	3301      	adds	r3, #1
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2201      	movs	r2, #1
 80062ea:	4619      	mov	r1, r3
 80062ec:	f7fd fd23 	bl	8003d36 <MX25UM51245G_EnableSTRMemoryMappedMode>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <BSP_OSPI_NOR_EnableMemoryMappedMode+0x62>
                                                 MX25UM51245G_4BYTES_SIZE) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80062f6:	f06f 0304 	mvn.w	r3, #4
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	e029      	b.n	8006352 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80062fe:	4917      	ldr	r1, [pc, #92]	; (800635c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	4613      	mov	r3, r2
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	4413      	add	r3, r2
 8006308:	440b      	add	r3, r1
 800630a:	2202      	movs	r2, #2
 800630c:	701a      	strb	r2, [r3, #0]
 800630e:	e020      	b.n	8006352 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
    }
    else
    {
      if (MX25UM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance],
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	4613      	mov	r3, r2
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	4413      	add	r3, r2
 8006318:	015b      	lsls	r3, r3, #5
 800631a:	4a11      	ldr	r2, [pc, #68]	; (8006360 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc4>)
 800631c:	1898      	adds	r0, r3, r2
 800631e:	490f      	ldr	r1, [pc, #60]	; (800635c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	4613      	mov	r3, r2
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	4413      	add	r3, r2
 8006328:	440b      	add	r3, r1
 800632a:	3301      	adds	r3, #1
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	4619      	mov	r1, r3
 8006330:	f7fd fdab 	bl	8003e8a <MX25UM51245G_EnableDTRMemoryMappedMode>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa6>
                                                 Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800633a:	f06f 0304 	mvn.w	r3, #4
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	e007      	b.n	8006352 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8006342:	4906      	ldr	r1, [pc, #24]	; (800635c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	4613      	mov	r3, r2
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	4413      	add	r3, r2
 800634c:	440b      	add	r3, r1
 800634e:	2202      	movs	r2, #2
 8006350:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006352:	68fb      	ldr	r3, [r7, #12]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20197a64 	.word	0x20197a64
 8006360:	20197a04 	.word	0x20197a04

08006364 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	70fb      	strb	r3, [r7, #3]
 8006370:	4613      	mov	r3, r2
 8006372:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8006374:	2300      	movs	r3, #0
 8006376:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800637e:	f06f 0301 	mvn.w	r3, #1
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	e072      	b.n	800646c <BSP_OSPI_NOR_ConfigFlash+0x108>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8006386:	493c      	ldr	r1, [pc, #240]	; (8006478 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	4613      	mov	r3, r2
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	4413      	add	r3, r2
 8006390:	440b      	add	r3, r1
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2b02      	cmp	r3, #2
 8006396:	d103      	bne.n	80063a0 <BSP_OSPI_NOR_ConfigFlash+0x3c>
    {
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8006398:	f06f 0315 	mvn.w	r3, #21
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	e065      	b.n	800646c <BSP_OSPI_NOR_ConfigFlash+0x108>
    }
    else
    {
      /* Setup Flash interface ***************************************************/
      switch (Ospi_Nor_Ctx[Instance].InterfaceMode)
 80063a0:	4935      	ldr	r1, [pc, #212]	; (8006478 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	4613      	mov	r3, r2
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	4413      	add	r3, r2
 80063aa:	440b      	add	r3, r1
 80063ac:	3301      	adds	r3, #1
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d12b      	bne.n	800640c <BSP_OSPI_NOR_ConfigFlash+0xa8>
      {
        case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
          if ((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d10a      	bne.n	80063d0 <BSP_OSPI_NOR_ConfigFlash+0x6c>
 80063ba:	492f      	ldr	r1, [pc, #188]	; (8006478 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	4613      	mov	r3, r2
 80063c0:	005b      	lsls	r3, r3, #1
 80063c2:	4413      	add	r3, r2
 80063c4:	440b      	add	r3, r1
 80063c6:	3302      	adds	r3, #2
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	78ba      	ldrb	r2, [r7, #2]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d02d      	beq.n	800642c <BSP_OSPI_NOR_ConfigFlash+0xc8>
          {
            /* Exit OPI mode */
            ret = OSPI_NOR_ExitOPIMode(Instance);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fca1 	bl	8006d18 <OSPI_NOR_ExitOPIMode>
 80063d6:	60f8      	str	r0, [r7, #12]

            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d126      	bne.n	800642c <BSP_OSPI_NOR_ConfigFlash+0xc8>
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d123      	bne.n	800642c <BSP_OSPI_NOR_ConfigFlash+0xc8>
            {

              if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80063e4:	4924      	ldr	r1, [pc, #144]	; (8006478 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	4613      	mov	r3, r2
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	4413      	add	r3, r2
 80063ee:	440b      	add	r3, r1
 80063f0:	3302      	adds	r3, #2
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d104      	bne.n	8006402 <BSP_OSPI_NOR_ConfigFlash+0x9e>
              {
                /* Enter DTR OPI mode */
                ret = OSPI_NOR_EnterDOPIMode(Instance);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fac1 	bl	8006980 <OSPI_NOR_EnterDOPIMode>
 80063fe:	60f8      	str	r0, [r7, #12]
                /* Enter STR OPI mode */
                ret = OSPI_NOR_EnterSOPIMode(Instance);
              }
            }
          }
          break;
 8006400:	e014      	b.n	800642c <BSP_OSPI_NOR_ConfigFlash+0xc8>
                ret = OSPI_NOR_EnterSOPIMode(Instance);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fbb6 	bl	8006b74 <OSPI_NOR_EnterSOPIMode>
 8006408:	60f8      	str	r0, [r7, #12]
          break;
 800640a:	e00f      	b.n	800642c <BSP_OSPI_NOR_ConfigFlash+0xc8>

        case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
        default :
          if (Mode == BSP_OSPI_NOR_OPI_MODE)
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d10e      	bne.n	8006430 <BSP_OSPI_NOR_ConfigFlash+0xcc>
          {
            if (Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8006412:	78bb      	ldrb	r3, [r7, #2]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <BSP_OSPI_NOR_ConfigFlash+0xbe>
            {
              /* Enter STR OPI mode */
              ret = OSPI_NOR_EnterSOPIMode(Instance);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fbab 	bl	8006b74 <OSPI_NOR_EnterSOPIMode>
 800641e:	60f8      	str	r0, [r7, #12]
            {
              /* Enter DTR OPI mode */
              ret = OSPI_NOR_EnterDOPIMode(Instance);
            }
          }
          break;
 8006420:	e006      	b.n	8006430 <BSP_OSPI_NOR_ConfigFlash+0xcc>
              ret = OSPI_NOR_EnterDOPIMode(Instance);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 faac 	bl	8006980 <OSPI_NOR_EnterDOPIMode>
 8006428:	60f8      	str	r0, [r7, #12]
          break;
 800642a:	e001      	b.n	8006430 <BSP_OSPI_NOR_ConfigFlash+0xcc>
          break;
 800642c:	bf00      	nop
 800642e:	e000      	b.n	8006432 <BSP_OSPI_NOR_ConfigFlash+0xce>
          break;
 8006430:	bf00      	nop
      }

      /* Update OSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d119      	bne.n	800646c <BSP_OSPI_NOR_ConfigFlash+0x108>
      {
        /* Update current status parameter *****************************************/
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8006438:	490f      	ldr	r1, [pc, #60]	; (8006478 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	4613      	mov	r3, r2
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	4413      	add	r3, r2
 8006442:	440b      	add	r3, r1
 8006444:	2201      	movs	r2, #1
 8006446:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8006448:	490b      	ldr	r1, [pc, #44]	; (8006478 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	4613      	mov	r3, r2
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	4413      	add	r3, r2
 8006452:	440b      	add	r3, r1
 8006454:	3301      	adds	r3, #1
 8006456:	78fa      	ldrb	r2, [r7, #3]
 8006458:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 800645a:	4907      	ldr	r1, [pc, #28]	; (8006478 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	4613      	mov	r3, r2
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	4413      	add	r3, r2
 8006464:	440b      	add	r3, r1
 8006466:	3302      	adds	r3, #2
 8006468:	78ba      	ldrb	r2, [r7, #2]
 800646a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800646c:	68fb      	ldr	r3, [r7, #12]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20197a64 	.word	0x20197a64

0800647c <OSPI_DLYB_Enable>:
  * @brief  This function enables delay block.
  * @param  hospi OSPI handle
  * @retval BSP status
  */
static int32_t OSPI_DLYB_Enable(XSPI_HandleTypeDef *hospi)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b088      	sub	sp, #32
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  LL_DLYB_CfgTypeDef dlyb_cfg, dlyb_cfg_test;
  int32_t ret = BSP_ERROR_NONE;
 8006484:	2300      	movs	r3, #0
 8006486:	61fb      	str	r3, [r7, #28]
  uint32_t div_value = 4;
 8006488:	2304      	movs	r3, #4
 800648a:	61bb      	str	r3, [r7, #24]

  /* Delay block configuration ------------------------------------------------ */
  if (HAL_XSPI_DLYB_GetClockPeriod(hospi, &dlyb_cfg) != HAL_OK)
 800648c:	f107 0310 	add.w	r3, r7, #16
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f00c f944 	bl	8012720 <HAL_XSPI_DLYB_GetClockPeriod>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <OSPI_DLYB_Enable+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800649e:	f06f 0303 	mvn.w	r3, #3
 80064a2:	61fb      	str	r3, [r7, #28]
  }

  /* PhaseSel is divided by 4 (emperic value)*/
  dlyb_cfg.PhaseSel /= div_value;
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ac:	617b      	str	r3, [r7, #20]

  /* save the present configuration for check*/
  dlyb_cfg_test = dlyb_cfg;
 80064ae:	f107 0308 	add.w	r3, r7, #8
 80064b2:	f107 0210 	add.w	r2, r7, #16
 80064b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064ba:	e883 0003 	stmia.w	r3, {r0, r1}

  /*set delay block configuration*/
  if (HAL_XSPI_DLYB_SetConfig(hospi, &dlyb_cfg) != HAL_OK)
 80064be:	f107 0310 	add.w	r3, r7, #16
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f00c f8ab 	bl	8012620 <HAL_XSPI_DLYB_SetConfig>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <OSPI_DLYB_Enable+0x5a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80064d0:	f06f 0303 	mvn.w	r3, #3
 80064d4:	61fb      	str	r3, [r7, #28]
  }

  /*check the set value*/
  if (HAL_XSPI_DLYB_GetConfig(hospi, &dlyb_cfg) != HAL_OK)
 80064d6:	f107 0310 	add.w	r3, r7, #16
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f00c f8ed 	bl	80126bc <HAL_XSPI_DLYB_GetConfig>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <OSPI_DLYB_Enable+0x72>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80064e8:	f06f 0303 	mvn.w	r3, #3
 80064ec:	61fb      	str	r3, [r7, #28]
  }

  if ((dlyb_cfg.PhaseSel != dlyb_cfg_test.PhaseSel) || (dlyb_cfg.Units != dlyb_cfg_test.Units))
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d103      	bne.n	80064fe <OSPI_DLYB_Enable+0x82>
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d002      	beq.n	8006504 <OSPI_DLYB_Enable+0x88>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80064fe:	f06f 0303 	mvn.w	r3, #3
 8006502:	61fb      	str	r3, [r7, #28]
  }

  /* Return BSP status */
  return ret;
 8006504:	69fb      	ldr	r3, [r7, #28]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3720      	adds	r7, #32
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(XSPI_HandleTypeDef *hospi)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b094      	sub	sp, #80	; 0x50
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 8006518:	4bc1      	ldr	r3, [pc, #772]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 800651a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651e:	4ac0      	ldr	r2, [pc, #768]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006520:	f043 0310 	orr.w	r3, r3, #16
 8006524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006528:	4bbd      	ldr	r3, [pc, #756]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 800652a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652e:	f003 0310 	and.w	r3, r3, #16
 8006532:	63bb      	str	r3, [r7, #56]	; 0x38
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  __HAL_RCC_PWR_CLK_ENABLE();
 8006536:	4bba      	ldr	r3, [pc, #744]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800653c:	4ab8      	ldr	r2, [pc, #736]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 800653e:	f043 0304 	orr.w	r3, r3, #4
 8006542:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006546:	4bb6      	ldr	r3, [pc, #728]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	637b      	str	r3, [r7, #52]	; 0x34
 8006552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  /* Enable VDDIO2 supply */
  HAL_PWREx_EnableVddIO2();
 8006554:	f005 fa6e 	bl	800ba34 <HAL_PWREx_EnableVddIO2>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8006558:	4bb1      	ldr	r3, [pc, #708]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 800655a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800655c:	4ab0      	ldr	r2, [pc, #704]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 800655e:	f043 0310 	orr.w	r3, r3, #16
 8006562:	6693      	str	r3, [r2, #104]	; 0x68
  OSPI_RELEASE_RESET();
 8006564:	4bae      	ldr	r3, [pc, #696]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006568:	4aad      	ldr	r2, [pc, #692]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 800656a:	f023 0310 	bic.w	r3, r3, #16
 800656e:	6693      	str	r3, [r2, #104]	; 0x68

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8006570:	4bab      	ldr	r3, [pc, #684]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006576:	4aaa      	ldr	r2, [pc, #680]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006578:	f043 0320 	orr.w	r3, r3, #32
 800657c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006580:	4ba7      	ldr	r3, [pc, #668]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006586:	f003 0320 	and.w	r3, r3, #32
 800658a:	633b      	str	r3, [r7, #48]	; 0x30
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_DQS_GPIO_CLK_ENABLE();
 800658e:	4ba4      	ldr	r3, [pc, #656]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006594:	4aa2      	ldr	r2, [pc, #648]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006596:	f043 0301 	orr.w	r3, r3, #1
 800659a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800659e:	4ba0      	ldr	r3, [pc, #640]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 80065a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_CS_GPIO_CLK_ENABLE();
 80065ac:	4b9c      	ldr	r3, [pc, #624]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 80065ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065b2:	4a9b      	ldr	r2, [pc, #620]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 80065b4:	f043 0301 	orr.w	r3, r3, #1
 80065b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065bc:	4b98      	ldr	r3, [pc, #608]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 80065be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D0_GPIO_CLK_ENABLE();
 80065ca:	4b95      	ldr	r3, [pc, #596]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 80065cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065d0:	4a93      	ldr	r2, [pc, #588]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 80065d2:	f043 0320 	orr.w	r3, r3, #32
 80065d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065da:	4b91      	ldr	r3, [pc, #580]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 80065dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065e0:	f003 0320 	and.w	r3, r3, #32
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D1_GPIO_CLK_ENABLE();
 80065e8:	4b8d      	ldr	r3, [pc, #564]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 80065ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ee:	4a8c      	ldr	r2, [pc, #560]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 80065f0:	f043 0320 	orr.w	r3, r3, #32
 80065f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065f8:	4b89      	ldr	r3, [pc, #548]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 80065fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065fe:	f003 0320 	and.w	r3, r3, #32
 8006602:	623b      	str	r3, [r7, #32]
 8006604:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D2_GPIO_CLK_ENABLE();
 8006606:	4b86      	ldr	r3, [pc, #536]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800660c:	4a84      	ldr	r2, [pc, #528]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 800660e:	f043 0320 	orr.w	r3, r3, #32
 8006612:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006616:	4b82      	ldr	r3, [pc, #520]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	61fb      	str	r3, [r7, #28]
 8006622:	69fb      	ldr	r3, [r7, #28]
  OSPI_D3_GPIO_CLK_ENABLE();
 8006624:	4b7e      	ldr	r3, [pc, #504]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800662a:	4a7d      	ldr	r2, [pc, #500]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 800662c:	f043 0320 	orr.w	r3, r3, #32
 8006630:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006634:	4b7a      	ldr	r3, [pc, #488]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006636:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	61bb      	str	r3, [r7, #24]
 8006640:	69bb      	ldr	r3, [r7, #24]
  OSPI_D4_GPIO_CLK_ENABLE();
 8006642:	4b77      	ldr	r3, [pc, #476]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006648:	4a75      	ldr	r2, [pc, #468]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 800664a:	f043 0304 	orr.w	r3, r3, #4
 800664e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006652:	4b73      	ldr	r3, [pc, #460]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	697b      	ldr	r3, [r7, #20]
  OSPI_D5_GPIO_CLK_ENABLE();
 8006660:	4b6f      	ldr	r3, [pc, #444]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006666:	4a6e      	ldr	r2, [pc, #440]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006668:	f043 0304 	orr.w	r3, r3, #4
 800666c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006670:	4b6b      	ldr	r3, [pc, #428]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	613b      	str	r3, [r7, #16]
 800667c:	693b      	ldr	r3, [r7, #16]
  OSPI_D6_GPIO_CLK_ENABLE();
 800667e:	4b68      	ldr	r3, [pc, #416]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006684:	4a66      	ldr	r2, [pc, #408]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006686:	f043 0304 	orr.w	r3, r3, #4
 800668a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800668e:	4b64      	ldr	r3, [pc, #400]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 8006690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	60fb      	str	r3, [r7, #12]
 800669a:	68fb      	ldr	r3, [r7, #12]
  OSPI_D7_GPIO_CLK_ENABLE();
 800669c:	4b60      	ldr	r3, [pc, #384]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 800669e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a2:	4a5f      	ldr	r2, [pc, #380]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 80066a4:	f043 0304 	orr.w	r3, r3, #4
 80066a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80066ac:	4b5c      	ldr	r3, [pc, #368]	; (8006820 <OSPI_NOR_MspInit+0x310>)
 80066ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066b2:	f003 0304 	and.w	r3, r3, #4
 80066b6:	60bb      	str	r3, [r7, #8]
 80066b8:	68bb      	ldr	r3, [r7, #8]

  /* Enable HSLV GPIOs */
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 80066ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066be:	4859      	ldr	r0, [pc, #356]	; (8006824 <OSPI_NOR_MspInit+0x314>)
 80066c0:	f003 fbec 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 80066c4:	2104      	movs	r1, #4
 80066c6:	4858      	ldr	r0, [pc, #352]	; (8006828 <OSPI_NOR_MspInit+0x318>)
 80066c8:	f003 fbe8 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 80066cc:	2102      	movs	r1, #2
 80066ce:	4856      	ldr	r0, [pc, #344]	; (8006828 <OSPI_NOR_MspInit+0x318>)
 80066d0:	f003 fbe4 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 80066d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066d8:	4852      	ldr	r0, [pc, #328]	; (8006824 <OSPI_NOR_MspInit+0x314>)
 80066da:	f003 fbdf 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 80066de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066e2:	4850      	ldr	r0, [pc, #320]	; (8006824 <OSPI_NOR_MspInit+0x314>)
 80066e4:	f003 fbda 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 80066e8:	2180      	movs	r1, #128	; 0x80
 80066ea:	484e      	ldr	r0, [pc, #312]	; (8006824 <OSPI_NOR_MspInit+0x314>)
 80066ec:	f003 fbd6 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 80066f0:	2140      	movs	r1, #64	; 0x40
 80066f2:	484c      	ldr	r0, [pc, #304]	; (8006824 <OSPI_NOR_MspInit+0x314>)
 80066f4:	f003 fbd2 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 80066f8:	2102      	movs	r1, #2
 80066fa:	484c      	ldr	r0, [pc, #304]	; (800682c <OSPI_NOR_MspInit+0x31c>)
 80066fc:	f003 fbce 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 8006700:	2104      	movs	r1, #4
 8006702:	484a      	ldr	r0, [pc, #296]	; (800682c <OSPI_NOR_MspInit+0x31c>)
 8006704:	f003 fbca 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 8006708:	2108      	movs	r1, #8
 800670a:	4848      	ldr	r0, [pc, #288]	; (800682c <OSPI_NOR_MspInit+0x31c>)
 800670c:	f003 fbc6 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8006710:	2101      	movs	r1, #1
 8006712:	4846      	ldr	r0, [pc, #280]	; (800682c <OSPI_NOR_MspInit+0x31c>)
 8006714:	f003 fbc2 	bl	8009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 8006718:	2304      	movs	r3, #4
 800671a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800671c:	2302      	movs	r3, #2
 800671e:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006720:	2301      	movs	r3, #1
 8006722:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006724:	2303      	movs	r3, #3
 8006726:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 8006728:	230a      	movs	r3, #10
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 800672c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006730:	4619      	mov	r1, r3
 8006732:	483d      	ldr	r0, [pc, #244]	; (8006828 <OSPI_NOR_MspInit+0x318>)
 8006734:	f003 f8b2 	bl	800989c <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8006738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800673c:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800673e:	2300      	movs	r3, #0
 8006740:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 8006742:	2303      	movs	r3, #3
 8006744:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8006746:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800674a:	4619      	mov	r1, r3
 800674c:	4835      	ldr	r0, [pc, #212]	; (8006824 <OSPI_NOR_MspInit+0x314>)
 800674e:	f003 f8a5 	bl	800989c <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8006752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006756:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 8006758:	230a      	movs	r3, #10
 800675a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800675c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006760:	4619      	mov	r1, r3
 8006762:	4830      	ldr	r0, [pc, #192]	; (8006824 <OSPI_NOR_MspInit+0x314>)
 8006764:	f003 f89a 	bl	800989c <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 8006768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800676c:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 800676e:	230a      	movs	r3, #10
 8006770:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8006772:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006776:	4619      	mov	r1, r3
 8006778:	482a      	ldr	r0, [pc, #168]	; (8006824 <OSPI_NOR_MspInit+0x314>)
 800677a:	f003 f88f 	bl	800989c <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 800677e:	2380      	movs	r3, #128	; 0x80
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 8006782:	230a      	movs	r3, #10
 8006784:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8006786:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800678a:	4619      	mov	r1, r3
 800678c:	4825      	ldr	r0, [pc, #148]	; (8006824 <OSPI_NOR_MspInit+0x314>)
 800678e:	f003 f885 	bl	800989c <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8006792:	2340      	movs	r3, #64	; 0x40
 8006794:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 8006796:	230a      	movs	r3, #10
 8006798:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 800679a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800679e:	4619      	mov	r1, r3
 80067a0:	4820      	ldr	r0, [pc, #128]	; (8006824 <OSPI_NOR_MspInit+0x314>)
 80067a2:	f003 f87b 	bl	800989c <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 80067a6:	2302      	movs	r3, #2
 80067a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 80067aa:	230a      	movs	r3, #10
 80067ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 80067ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067b2:	4619      	mov	r1, r3
 80067b4:	481d      	ldr	r0, [pc, #116]	; (800682c <OSPI_NOR_MspInit+0x31c>)
 80067b6:	f003 f871 	bl	800989c <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 80067ba:	2304      	movs	r3, #4
 80067bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 80067be:	230a      	movs	r3, #10
 80067c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 80067c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067c6:	4619      	mov	r1, r3
 80067c8:	4818      	ldr	r0, [pc, #96]	; (800682c <OSPI_NOR_MspInit+0x31c>)
 80067ca:	f003 f867 	bl	800989c <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 80067ce:	2308      	movs	r3, #8
 80067d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 80067d2:	230a      	movs	r3, #10
 80067d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 80067d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067da:	4619      	mov	r1, r3
 80067dc:	4813      	ldr	r0, [pc, #76]	; (800682c <OSPI_NOR_MspInit+0x31c>)
 80067de:	f003 f85d 	bl	800989c <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 80067e2:	2301      	movs	r3, #1
 80067e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 80067e6:	2303      	movs	r3, #3
 80067e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 80067ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067ee:	4619      	mov	r1, r3
 80067f0:	480e      	ldr	r0, [pc, #56]	; (800682c <OSPI_NOR_MspInit+0x31c>)
 80067f2:	f003 f853 	bl	800989c <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 80067f6:	2302      	movs	r3, #2
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 80067fa:	230a      	movs	r3, #10
 80067fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 80067fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006802:	4619      	mov	r1, r3
 8006804:	4808      	ldr	r0, [pc, #32]	; (8006828 <OSPI_NOR_MspInit+0x318>)
 8006806:	f003 f849 	bl	800989c <HAL_GPIO_Init>

  /* Configure the NVIC for OSPI */
  /* NVIC configuration for OSPI interrupt */
  HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0x0F, 0);
 800680a:	2200      	movs	r2, #0
 800680c:	210f      	movs	r1, #15
 800680e:	204c      	movs	r0, #76	; 0x4c
 8006810:	f000 fe9c 	bl	800754c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8006814:	204c      	movs	r0, #76	; 0x4c
 8006816:	f000 feb3 	bl	8007580 <HAL_NVIC_EnableIRQ>
}
 800681a:	bf00      	nop
 800681c:	3750      	adds	r7, #80	; 0x50
 800681e:	e007      	b.n	8006830 <OSPI_NOR_MspInit+0x320>
 8006820:	46020c00 	.word	0x46020c00
 8006824:	42021400 	.word	0x42021400
 8006828:	42020000 	.word	0x42020000
 800682c:	42020800 	.word	0x42020800
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory(uint32_t Instance)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800683c:	2300      	movs	r3, #0
 800683e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <OSPI_NOR_ResetMemory+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006846:	f06f 0301 	mvn.w	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e08e      	b.n	800696c <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	4613      	mov	r3, r2
 8006852:	005b      	lsls	r3, r3, #1
 8006854:	4413      	add	r3, r2
 8006856:	015b      	lsls	r3, r3, #5
 8006858:	4a47      	ldr	r2, [pc, #284]	; (8006978 <OSPI_NOR_ResetMemory+0x144>)
 800685a:	4413      	add	r3, r2
 800685c:	2200      	movs	r2, #0
 800685e:	2100      	movs	r1, #0
 8006860:	4618      	mov	r0, r3
 8006862:	f7fd fd85 	bl	8004370 <MX25UM51245G_ResetEnable>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <OSPI_NOR_ResetMemory+0x40>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800686c:	f06f 0304 	mvn.w	r3, #4
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	e07b      	b.n	800696c <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	4413      	add	r3, r2
 800687c:	015b      	lsls	r3, r3, #5
 800687e:	4a3e      	ldr	r2, [pc, #248]	; (8006978 <OSPI_NOR_ResetMemory+0x144>)
 8006880:	4413      	add	r3, r2
 8006882:	2200      	movs	r2, #0
 8006884:	2100      	movs	r1, #0
 8006886:	4618      	mov	r0, r3
 8006888:	f7fd fdca 	bl	8004420 <MX25UM51245G_ResetMemory>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <OSPI_NOR_ResetMemory+0x66>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006892:	f06f 0304 	mvn.w	r3, #4
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	e068      	b.n	800696c <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	4613      	mov	r3, r2
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	4413      	add	r3, r2
 80068a2:	015b      	lsls	r3, r3, #5
 80068a4:	4a34      	ldr	r2, [pc, #208]	; (8006978 <OSPI_NOR_ResetMemory+0x144>)
 80068a6:	4413      	add	r3, r2
 80068a8:	2200      	movs	r2, #0
 80068aa:	2101      	movs	r1, #1
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fd fd5f 	bl	8004370 <MX25UM51245G_ResetEnable>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <OSPI_NOR_ResetMemory+0x8c>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80068b8:	f06f 0304 	mvn.w	r3, #4
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	e055      	b.n	800696c <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	4413      	add	r3, r2
 80068c8:	015b      	lsls	r3, r3, #5
 80068ca:	4a2b      	ldr	r2, [pc, #172]	; (8006978 <OSPI_NOR_ResetMemory+0x144>)
 80068cc:	4413      	add	r3, r2
 80068ce:	2200      	movs	r2, #0
 80068d0:	2101      	movs	r1, #1
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fd fda4 	bl	8004420 <MX25UM51245G_ResetMemory>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <OSPI_NOR_ResetMemory+0xb2>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80068de:	f06f 0304 	mvn.w	r3, #4
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	e042      	b.n	800696c <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	4613      	mov	r3, r2
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	4413      	add	r3, r2
 80068ee:	015b      	lsls	r3, r3, #5
 80068f0:	4a21      	ldr	r2, [pc, #132]	; (8006978 <OSPI_NOR_ResetMemory+0x144>)
 80068f2:	4413      	add	r3, r2
 80068f4:	2201      	movs	r2, #1
 80068f6:	2101      	movs	r1, #1
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fd fd39 	bl	8004370 <MX25UM51245G_ResetEnable>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d003      	beq.n	800690c <OSPI_NOR_ResetMemory+0xd8>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006904:	f06f 0304 	mvn.w	r3, #4
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	e02f      	b.n	800696c <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	4613      	mov	r3, r2
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	4413      	add	r3, r2
 8006914:	015b      	lsls	r3, r3, #5
 8006916:	4a18      	ldr	r2, [pc, #96]	; (8006978 <OSPI_NOR_ResetMemory+0x144>)
 8006918:	4413      	add	r3, r2
 800691a:	2201      	movs	r2, #1
 800691c:	2101      	movs	r1, #1
 800691e:	4618      	mov	r0, r3
 8006920:	f7fd fd7e 	bl	8004420 <MX25UM51245G_ResetMemory>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <OSPI_NOR_ResetMemory+0xfe>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800692a:	f06f 0304 	mvn.w	r3, #4
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	e01c      	b.n	800696c <OSPI_NOR_ResetMemory+0x138>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access  */
 8006932:	4912      	ldr	r1, [pc, #72]	; (800697c <OSPI_NOR_ResetMemory+0x148>)
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	4613      	mov	r3, r2
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	4413      	add	r3, r2
 800693c:	440b      	add	r3, r1
 800693e:	2201      	movs	r2, #1
 8006940:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;     /* After reset H/W back to SPI mode by default */
 8006942:	490e      	ldr	r1, [pc, #56]	; (800697c <OSPI_NOR_ResetMemory+0x148>)
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	4613      	mov	r3, r2
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	4413      	add	r3, r2
 800694c:	440b      	add	r3, r1
 800694e:	3301      	adds	r3, #1
 8006950:	2200      	movs	r2, #0
 8006952:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode         */
 8006954:	4909      	ldr	r1, [pc, #36]	; (800697c <OSPI_NOR_ResetMemory+0x148>)
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	4613      	mov	r3, r2
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	4413      	add	r3, r2
 800695e:	440b      	add	r3, r1
 8006960:	3302      	adds	r3, #2
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
 8006966:	2064      	movs	r0, #100	; 0x64
 8006968:	f000 fd14 	bl	8007394 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 800696c:	68fb      	ldr	r3, [r7, #12]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20197a04 	.word	0x20197a04
 800697c:	20197a64 	.word	0x20197a64

08006980 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 8006980:	b590      	push	{r4, r7, lr}
 8006982:	b087      	sub	sp, #28
 8006984:	af02      	add	r7, sp, #8
 8006986:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <OSPI_NOR_EnterDOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800698e:	f06f 0301 	mvn.w	r3, #1
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	e0e4      	b.n	8006b60 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	4613      	mov	r3, r2
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	4413      	add	r3, r2
 800699e:	015b      	lsls	r3, r3, #5
 80069a0:	4a72      	ldr	r2, [pc, #456]	; (8006b6c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 80069a2:	1898      	adds	r0, r3, r2
 80069a4:	4972      	ldr	r1, [pc, #456]	; (8006b70 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	4613      	mov	r3, r2
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	4413      	add	r3, r2
 80069ae:	440b      	add	r3, r1
 80069b0:	3301      	adds	r3, #1
 80069b2:	7819      	ldrb	r1, [r3, #0]
 80069b4:	4c6e      	ldr	r4, [pc, #440]	; (8006b70 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	4613      	mov	r3, r2
 80069ba:	005b      	lsls	r3, r3, #1
 80069bc:	4413      	add	r3, r2
 80069be:	4423      	add	r3, r4
 80069c0:	3302      	adds	r3, #2
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	f7fd facf 	bl	8003f68 <MX25UM51245G_WriteEnable>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <OSPI_NOR_EnterDOPIMode+0x58>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80069d0:	f06f 0304 	mvn.w	r3, #4
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	e0c3      	b.n	8006b60 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	4413      	add	r3, r2
 80069e0:	015b      	lsls	r3, r3, #5
 80069e2:	4a62      	ldr	r2, [pc, #392]	; (8006b6c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 80069e4:	1898      	adds	r0, r3, r2
 80069e6:	4962      	ldr	r1, [pc, #392]	; (8006b70 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	4613      	mov	r3, r2
 80069ec:	005b      	lsls	r3, r3, #1
 80069ee:	4413      	add	r3, r2
 80069f0:	440b      	add	r3, r1
 80069f2:	3301      	adds	r3, #1
 80069f4:	7819      	ldrb	r1, [r3, #0]
 80069f6:	4c5e      	ldr	r4, [pc, #376]	; (8006b70 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	4613      	mov	r3, r2
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	4413      	add	r3, r2
 8006a00:	4423      	add	r3, r4
 8006a02:	3302      	adds	r3, #2
 8006a04:	781a      	ldrb	r2, [r3, #0]
 8006a06:	2307      	movs	r3, #7
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006a0e:	f7fd fb7b 	bl	8004108 <MX25UM51245G_WriteCfg2Register>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <OSPI_NOR_EnterDOPIMode+0xa0>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_6_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a18:	f06f 0304 	mvn.w	r3, #4
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	e09f      	b.n	8006b60 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	4613      	mov	r3, r2
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	4413      	add	r3, r2
 8006a28:	015b      	lsls	r3, r3, #5
 8006a2a:	4a50      	ldr	r2, [pc, #320]	; (8006b6c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006a2c:	1898      	adds	r0, r3, r2
 8006a2e:	4950      	ldr	r1, [pc, #320]	; (8006b70 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	4413      	add	r3, r2
 8006a38:	440b      	add	r3, r1
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	7819      	ldrb	r1, [r3, #0]
 8006a3e:	4c4c      	ldr	r4, [pc, #304]	; (8006b70 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	4613      	mov	r3, r2
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	4413      	add	r3, r2
 8006a48:	4423      	add	r3, r4
 8006a4a:	3302      	adds	r3, #2
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f7fd fa8a 	bl	8003f68 <MX25UM51245G_WriteEnable>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <OSPI_NOR_EnterDOPIMode+0xe2>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a5a:	f06f 0304 	mvn.w	r3, #4
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	e07e      	b.n	8006b60 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	4613      	mov	r3, r2
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	4413      	add	r3, r2
 8006a6a:	015b      	lsls	r3, r3, #5
 8006a6c:	4a3f      	ldr	r2, [pc, #252]	; (8006b6c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006a6e:	1898      	adds	r0, r3, r2
 8006a70:	493f      	ldr	r1, [pc, #252]	; (8006b70 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	4613      	mov	r3, r2
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	4413      	add	r3, r2
 8006a7a:	440b      	add	r3, r1
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	7819      	ldrb	r1, [r3, #0]
 8006a80:	4c3b      	ldr	r4, [pc, #236]	; (8006b70 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	4613      	mov	r3, r2
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	4413      	add	r3, r2
 8006a8a:	4423      	add	r3, r4
 8006a8c:	3302      	adds	r3, #2
 8006a8e:	781a      	ldrb	r2, [r3, #0]
 8006a90:	2302      	movs	r3, #2
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	2300      	movs	r3, #0
 8006a96:	f7fd fb37 	bl	8004108 <MX25UM51245G_WriteCfg2Register>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <OSPI_NOR_EnterDOPIMode+0x128>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_DOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006aa0:	f06f 0304 	mvn.w	r3, #4
 8006aa4:	60fb      	str	r3, [r7, #12]
 8006aa6:	e05b      	b.n	8006b60 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 8006aa8:	2028      	movs	r0, #40	; 0x28
 8006aaa:	f000 fc73 	bl	8007394 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
 8006aae:	492f      	ldr	r1, [pc, #188]	; (8006b6c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	4413      	add	r3, r2
 8006ab8:	015b      	lsls	r3, r3, #5
 8006aba:	440b      	add	r3, r1
 8006abc:	330c      	adds	r3, #12
 8006abe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ac2:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8006ac4:	4929      	ldr	r1, [pc, #164]	; (8006b6c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	005b      	lsls	r3, r3, #1
 8006acc:	4413      	add	r3, r2
 8006ace:	015b      	lsls	r3, r3, #5
 8006ad0:	440b      	add	r3, r1
 8006ad2:	332c      	adds	r3, #44	; 0x2c
 8006ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad8:	601a      	str	r2, [r3, #0]
    if (HAL_XSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	4613      	mov	r3, r2
 8006ade:	005b      	lsls	r3, r3, #1
 8006ae0:	4413      	add	r3, r2
 8006ae2:	015b      	lsls	r3, r3, #5
 8006ae4:	4a21      	ldr	r2, [pc, #132]	; (8006b6c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006ae6:	4413      	add	r3, r2
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f00b f8bb 	bl	8011c64 <HAL_XSPI_Init>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <OSPI_NOR_EnterDOPIMode+0x17c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006af4:	f06f 0303 	mvn.w	r3, #3
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	e031      	b.n	8006b60 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    /* Check Flash busy ? */
    else if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	4613      	mov	r3, r2
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	4413      	add	r3, r2
 8006b04:	015b      	lsls	r3, r3, #5
 8006b06:	4a19      	ldr	r2, [pc, #100]	; (8006b6c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006b08:	4413      	add	r3, r2
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fd f85f 	bl	8003bd2 <MX25UM51245G_AutoPollingMemReady>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <OSPI_NOR_EnterDOPIMode+0x1a2>
                                              BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b1a:	f06f 0304 	mvn.w	r3, #4
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	e01e      	b.n	8006b60 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER,
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	4613      	mov	r3, r2
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	4413      	add	r3, r2
 8006b2a:	015b      	lsls	r3, r3, #5
 8006b2c:	4a0f      	ldr	r2, [pc, #60]	; (8006b6c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006b2e:	1898      	adds	r0, r3, r2
 8006b30:	f107 0308 	add.w	r3, r7, #8
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	2300      	movs	r3, #0
 8006b38:	2201      	movs	r2, #1
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	f7fd fb79 	bl	8004232 <MX25UM51245G_ReadCfg2Register>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <OSPI_NOR_EnterDOPIMode+0x1ce>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b46:	f06f 0304 	mvn.w	r3, #4
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	e008      	b.n	8006b60 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    else if (reg[0] != MX25UM51245G_CR2_DOPI)
 8006b4e:	7a3b      	ldrb	r3, [r7, #8]
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d003      	beq.n	8006b5c <OSPI_NOR_EnterDOPIMode+0x1dc>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b54:	f06f 0304 	mvn.w	r3, #4
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	e001      	b.n	8006b60 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8006b60:	68fb      	ldr	r3, [r7, #12]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd90      	pop	{r4, r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	20197a04 	.word	0x20197a04
 8006b70:	20197a64 	.word	0x20197a64

08006b74 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 8006b74:	b590      	push	{r4, r7, lr}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af02      	add	r7, sp, #8
 8006b7a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <OSPI_NOR_EnterSOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006b82:	f06f 0301 	mvn.w	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	e0bd      	b.n	8006d06 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	4413      	add	r3, r2
 8006b92:	015b      	lsls	r3, r3, #5
 8006b94:	4a5e      	ldr	r2, [pc, #376]	; (8006d10 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006b96:	1898      	adds	r0, r3, r2
 8006b98:	495e      	ldr	r1, [pc, #376]	; (8006d14 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	4413      	add	r3, r2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	7819      	ldrb	r1, [r3, #0]
 8006ba8:	4c5a      	ldr	r4, [pc, #360]	; (8006d14 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	4613      	mov	r3, r2
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	4413      	add	r3, r2
 8006bb2:	4423      	add	r3, r4
 8006bb4:	3302      	adds	r3, #2
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	f7fd f9d5 	bl	8003f68 <MX25UM51245G_WriteEnable>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d003      	beq.n	8006bcc <OSPI_NOR_EnterSOPIMode+0x58>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006bc4:	f06f 0304 	mvn.w	r3, #4
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	e09c      	b.n	8006d06 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	4413      	add	r3, r2
 8006bd4:	015b      	lsls	r3, r3, #5
 8006bd6:	4a4e      	ldr	r2, [pc, #312]	; (8006d10 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006bd8:	1898      	adds	r0, r3, r2
 8006bda:	494e      	ldr	r1, [pc, #312]	; (8006d14 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	4613      	mov	r3, r2
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	4413      	add	r3, r2
 8006be4:	440b      	add	r3, r1
 8006be6:	3301      	adds	r3, #1
 8006be8:	7819      	ldrb	r1, [r3, #0]
 8006bea:	4c4a      	ldr	r4, [pc, #296]	; (8006d14 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	4413      	add	r3, r2
 8006bf4:	4423      	add	r3, r4
 8006bf6:	3302      	adds	r3, #2
 8006bf8:	781a      	ldrb	r2, [r3, #0]
 8006bfa:	2307      	movs	r3, #7
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006c02:	f7fd fa81 	bl	8004108 <MX25UM51245G_WriteCfg2Register>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <OSPI_NOR_EnterSOPIMode+0xa0>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_6_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c0c:	f06f 0304 	mvn.w	r3, #4
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	e078      	b.n	8006d06 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	4613      	mov	r3, r2
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	4413      	add	r3, r2
 8006c1c:	015b      	lsls	r3, r3, #5
 8006c1e:	4a3c      	ldr	r2, [pc, #240]	; (8006d10 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006c20:	1898      	adds	r0, r3, r2
 8006c22:	493c      	ldr	r1, [pc, #240]	; (8006d14 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	4613      	mov	r3, r2
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	4413      	add	r3, r2
 8006c2c:	440b      	add	r3, r1
 8006c2e:	3301      	adds	r3, #1
 8006c30:	7819      	ldrb	r1, [r3, #0]
 8006c32:	4c38      	ldr	r4, [pc, #224]	; (8006d14 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	4613      	mov	r3, r2
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	4413      	add	r3, r2
 8006c3c:	4423      	add	r3, r4
 8006c3e:	3302      	adds	r3, #2
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	f7fd f990 	bl	8003f68 <MX25UM51245G_WriteEnable>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <OSPI_NOR_EnterSOPIMode+0xe2>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c4e:	f06f 0304 	mvn.w	r3, #4
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	e057      	b.n	8006d06 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	4413      	add	r3, r2
 8006c5e:	015b      	lsls	r3, r3, #5
 8006c60:	4a2b      	ldr	r2, [pc, #172]	; (8006d10 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006c62:	1898      	adds	r0, r3, r2
 8006c64:	492b      	ldr	r1, [pc, #172]	; (8006d14 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	4413      	add	r3, r2
 8006c6e:	440b      	add	r3, r1
 8006c70:	3301      	adds	r3, #1
 8006c72:	7819      	ldrb	r1, [r3, #0]
 8006c74:	4c27      	ldr	r4, [pc, #156]	; (8006d14 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	4413      	add	r3, r2
 8006c7e:	4423      	add	r3, r4
 8006c80:	3302      	adds	r3, #2
 8006c82:	781a      	ldrb	r2, [r3, #0]
 8006c84:	2301      	movs	r3, #1
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f7fd fa3d 	bl	8004108 <MX25UM51245G_WriteCfg2Register>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <OSPI_NOR_EnterSOPIMode+0x128>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_SOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c94:	f06f 0304 	mvn.w	r3, #4
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	e034      	b.n	8006d06 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 8006c9c:	2028      	movs	r0, #40	; 0x28
 8006c9e:	f000 fb79 	bl	8007394 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	4413      	add	r3, r2
 8006caa:	015b      	lsls	r3, r3, #5
 8006cac:	4a18      	ldr	r2, [pc, #96]	; (8006d10 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006cae:	4413      	add	r3, r2
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fc ff8c 	bl	8003bd2 <MX25UM51245G_AutoPollingMemReady>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <OSPI_NOR_EnterSOPIMode+0x154>
                                         BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006cc0:	f06f 0304 	mvn.w	r3, #4
 8006cc4:	60fb      	str	r3, [r7, #12]
 8006cc6:	e01e      	b.n	8006d06 <OSPI_NOR_EnterSOPIMode+0x192>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	4413      	add	r3, r2
 8006cd0:	015b      	lsls	r3, r3, #5
 8006cd2:	4a0f      	ldr	r2, [pc, #60]	; (8006d10 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006cd4:	1898      	adds	r0, r3, r2
 8006cd6:	f107 0308 	add.w	r3, r7, #8
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	2300      	movs	r3, #0
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	f7fd faa6 	bl	8004232 <MX25UM51245G_ReadCfg2Register>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <OSPI_NOR_EnterSOPIMode+0x180>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006cec:	f06f 0304 	mvn.w	r3, #4
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	e008      	b.n	8006d06 <OSPI_NOR_EnterSOPIMode+0x192>
    }
    else if (reg[0] != MX25UM51245G_CR2_SOPI)
 8006cf4:	7a3b      	ldrb	r3, [r7, #8]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d003      	beq.n	8006d02 <OSPI_NOR_EnterSOPIMode+0x18e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006cfa:	f06f 0304 	mvn.w	r3, #4
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	e001      	b.n	8006d06 <OSPI_NOR_EnterSOPIMode+0x192>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8006d02:	2300      	movs	r3, #0
 8006d04:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8006d06:	68fb      	ldr	r3, [r7, #12]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd90      	pop	{r4, r7, pc}
 8006d10:	20197a04 	.word	0x20197a04
 8006d14:	20197a64 	.word	0x20197a64

08006d18 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode(uint32_t Instance)
{
 8006d18:	b590      	push	{r4, r7, lr}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006d20:	2300      	movs	r3, #0
 8006d22:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <OSPI_NOR_ExitOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006d2a:	f06f 0301 	mvn.w	r3, #1
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	e0aa      	b.n	8006e88 <OSPI_NOR_ExitOPIMode+0x170>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	4613      	mov	r3, r2
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	4413      	add	r3, r2
 8006d3a:	015b      	lsls	r3, r3, #5
 8006d3c:	4a55      	ldr	r2, [pc, #340]	; (8006e94 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006d3e:	1898      	adds	r0, r3, r2
 8006d40:	4955      	ldr	r1, [pc, #340]	; (8006e98 <OSPI_NOR_ExitOPIMode+0x180>)
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	4613      	mov	r3, r2
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	4413      	add	r3, r2
 8006d4a:	440b      	add	r3, r1
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	7819      	ldrb	r1, [r3, #0]
 8006d50:	4c51      	ldr	r4, [pc, #324]	; (8006e98 <OSPI_NOR_ExitOPIMode+0x180>)
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	4613      	mov	r3, r2
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	4413      	add	r3, r2
 8006d5a:	4423      	add	r3, r4
 8006d5c:	3302      	adds	r3, #2
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	461a      	mov	r2, r3
 8006d62:	f7fd f901 	bl	8003f68 <MX25UM51245G_WriteEnable>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <OSPI_NOR_ExitOPIMode+0x5c>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d6c:	f06f 0304 	mvn.w	r3, #4
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	e089      	b.n	8006e88 <OSPI_NOR_ExitOPIMode+0x170>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8006d74:	2300      	movs	r3, #0
 8006d76:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	727b      	strb	r3, [r7, #9]
    if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	4413      	add	r3, r2
 8006d84:	015b      	lsls	r3, r3, #5
 8006d86:	4a43      	ldr	r2, [pc, #268]	; (8006e94 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006d88:	1898      	adds	r0, r3, r2
 8006d8a:	4943      	ldr	r1, [pc, #268]	; (8006e98 <OSPI_NOR_ExitOPIMode+0x180>)
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	4413      	add	r3, r2
 8006d94:	440b      	add	r3, r1
 8006d96:	3301      	adds	r3, #1
 8006d98:	7819      	ldrb	r1, [r3, #0]
 8006d9a:	4c3f      	ldr	r4, [pc, #252]	; (8006e98 <OSPI_NOR_ExitOPIMode+0x180>)
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	005b      	lsls	r3, r3, #1
 8006da2:	4413      	add	r3, r2
 8006da4:	4423      	add	r3, r4
 8006da6:	3302      	adds	r3, #2
 8006da8:	781a      	ldrb	r2, [r3, #0]
 8006daa:	7a3b      	ldrb	r3, [r7, #8]
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	2300      	movs	r3, #0
 8006db0:	f7fd f9aa 	bl	8004108 <MX25UM51245G_WriteCfg2Register>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <OSPI_NOR_ExitOPIMode+0xaa>
                                       Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                       reg[0]) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006dba:	f06f 0304 	mvn.w	r3, #4
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	e062      	b.n	8006e88 <OSPI_NOR_ExitOPIMode+0x170>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 8006dc2:	2028      	movs	r0, #40	; 0x28
 8006dc4:	f000 fae6 	bl	8007394 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8006dc8:	4933      	ldr	r1, [pc, #204]	; (8006e98 <OSPI_NOR_ExitOPIMode+0x180>)
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	4413      	add	r3, r2
 8006dd2:	440b      	add	r3, r1
 8006dd4:	3302      	adds	r3, #2
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d123      	bne.n	8006e24 <OSPI_NOR_ExitOPIMode+0x10c>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
 8006ddc:	492d      	ldr	r1, [pc, #180]	; (8006e94 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	4613      	mov	r3, r2
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	4413      	add	r3, r2
 8006de6:	015b      	lsls	r3, r3, #5
 8006de8:	440b      	add	r3, r1
 8006dea:	330c      	adds	r3, #12
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8006df0:	4928      	ldr	r1, [pc, #160]	; (8006e94 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	4613      	mov	r3, r2
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	4413      	add	r3, r2
 8006dfa:	015b      	lsls	r3, r3, #5
 8006dfc:	440b      	add	r3, r1
 8006dfe:	332c      	adds	r3, #44	; 0x2c
 8006e00:	2200      	movs	r2, #0
 8006e02:	601a      	str	r2, [r3, #0]
        if (HAL_XSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	4613      	mov	r3, r2
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	4413      	add	r3, r2
 8006e0c:	015b      	lsls	r3, r3, #5
 8006e0e:	4a21      	ldr	r2, [pc, #132]	; (8006e94 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006e10:	4413      	add	r3, r2
 8006e12:	4618      	mov	r0, r3
 8006e14:	f00a ff26 	bl	8011c64 <HAL_XSPI_Init>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <OSPI_NOR_ExitOPIMode+0x10c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006e1e:	f06f 0303 	mvn.w	r3, #3
 8006e22:	60fb      	str	r3, [r7, #12]
        }
      }

      if (ret == BSP_ERROR_NONE)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d12e      	bne.n	8006e88 <OSPI_NOR_ExitOPIMode+0x170>
      {
        /* Check Flash busy ? */
        if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	4413      	add	r3, r2
 8006e32:	015b      	lsls	r3, r3, #5
 8006e34:	4a17      	ldr	r2, [pc, #92]	; (8006e94 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006e36:	4413      	add	r3, r2
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fc fec8 	bl	8003bd2 <MX25UM51245G_AutoPollingMemReady>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <OSPI_NOR_ExitOPIMode+0x138>
                                             BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e48:	f06f 0304 	mvn.w	r3, #4
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	e01b      	b.n	8006e88 <OSPI_NOR_ExitOPIMode+0x170>
        }
        /* Check the configuration has been correctly done */
        else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	4613      	mov	r3, r2
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	4413      	add	r3, r2
 8006e58:	015b      	lsls	r3, r3, #5
 8006e5a:	4a0e      	ldr	r2, [pc, #56]	; (8006e94 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006e5c:	1898      	adds	r0, r3, r2
 8006e5e:	f107 0308 	add.w	r3, r7, #8
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	2300      	movs	r3, #0
 8006e66:	2200      	movs	r2, #0
 8006e68:	2100      	movs	r1, #0
 8006e6a:	f7fd f9e2 	bl	8004232 <MX25UM51245G_ReadCfg2Register>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <OSPI_NOR_ExitOPIMode+0x164>
                                               MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e74:	f06f 0304 	mvn.w	r3, #4
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	e005      	b.n	8006e88 <OSPI_NOR_ExitOPIMode+0x170>
        }
        else if (reg[0] != 0U)
 8006e7c:	7a3b      	ldrb	r3, [r7, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <OSPI_NOR_ExitOPIMode+0x170>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e82:	f06f 0304 	mvn.w	r3, #4
 8006e86:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006e88:	68fb      	ldr	r3, [r7, #12]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd90      	pop	{r4, r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20197a04 	.word	0x20197a04
 8006e98:	20197a64 	.word	0x20197a64

08006e9c <BSP_TS_Init>:
  * @param  Instance TS Instance.
  * @param  TS_Init  Pointer to TS initialization structure.
  * @retval BSP status.
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	61fb      	str	r3, [r7, #28]

  if ((TS_Init == NULL) || (Instance >= TS_INSTANCES_NBR))
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <BSP_TS_Init+0x1a>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <BSP_TS_Init+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8006eb6:	f06f 0301 	mvn.w	r3, #1
 8006eba:	61fb      	str	r3, [r7, #28]
 8006ebc:	e07f      	b.n	8006fbe <BSP_TS_Init+0x122>
  }
  else
  {
    /* Probe the TS driver */
    if (SITRONIX_Probe(Instance) != BSP_ERROR_NONE)
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f98c 	bl	80071dc <SITRONIX_Probe>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <BSP_TS_Init+0x36>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8006eca:	f06f 0304 	mvn.w	r3, #4
 8006ece:	61fb      	str	r3, [r7, #28]
 8006ed0:	e075      	b.n	8006fbe <BSP_TS_Init+0x122>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t          i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	493c      	ldr	r1, [pc, #240]	; (8006fc8 <BSP_TS_Init+0x12c>)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2068      	movs	r0, #104	; 0x68
 8006edc:	fb00 f303 	mul.w	r3, r0, r3
 8006ee0:	440b      	add	r3, r1
 8006ee2:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	4937      	ldr	r1, [pc, #220]	; (8006fc8 <BSP_TS_Init+0x12c>)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2068      	movs	r0, #104	; 0x68
 8006eee:	fb00 f303 	mul.w	r3, r0, r3
 8006ef2:	440b      	add	r3, r1
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	4932      	ldr	r1, [pc, #200]	; (8006fc8 <BSP_TS_Init+0x12c>)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2068      	movs	r0, #104	; 0x68
 8006f02:	fb00 f303 	mul.w	r3, r0, r3
 8006f06:	440b      	add	r3, r1
 8006f08:	3308      	adds	r3, #8
 8006f0a:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	68da      	ldr	r2, [r3, #12]
 8006f10:	492d      	ldr	r1, [pc, #180]	; (8006fc8 <BSP_TS_Init+0x12c>)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2068      	movs	r0, #104	; 0x68
 8006f16:	fb00 f303 	mul.w	r3, r0, r3
 8006f1a:	440b      	add	r3, r1
 8006f1c:	330c      	adds	r3, #12
 8006f1e:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv[Instance]->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006f20:	4a2a      	ldr	r2, [pc, #168]	; (8006fcc <BSP_TS_Init+0x130>)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	4929      	ldr	r1, [pc, #164]	; (8006fd0 <BSP_TS_Init+0x134>)
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006f32:	f107 010c 	add.w	r1, r7, #12
 8006f36:	4610      	mov	r0, r2
 8006f38:	4798      	blx	r3
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	da03      	bge.n	8006f48 <BSP_TS_Init+0xac>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8006f40:	f06f 0304 	mvn.w	r3, #4
 8006f44:	61fb      	str	r3, [r7, #28]
 8006f46:	e03a      	b.n	8006fbe <BSP_TS_Init+0x122>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	491f      	ldr	r1, [pc, #124]	; (8006fc8 <BSP_TS_Init+0x12c>)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2068      	movs	r0, #104	; 0x68
 8006f50:	fb00 f303 	mul.w	r3, r0, r3
 8006f54:	440b      	add	r3, r1
 8006f56:	3310      	adds	r3, #16
 8006f58:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	491a      	ldr	r1, [pc, #104]	; (8006fc8 <BSP_TS_Init+0x12c>)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2068      	movs	r0, #104	; 0x68
 8006f62:	fb00 f303 	mul.w	r3, r0, r3
 8006f66:	440b      	add	r3, r1
 8006f68:	3314      	adds	r3, #20
 8006f6a:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for (i = 0; i < TS_TOUCH_NBR; i++)
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	61bb      	str	r3, [r7, #24]
 8006f70:	e022      	b.n	8006fb8 <BSP_TS_Init+0x11c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	4812      	ldr	r0, [pc, #72]	; (8006fc8 <BSP_TS_Init+0x12c>)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	211a      	movs	r1, #26
 8006f84:	fb03 f101 	mul.w	r1, r3, r1
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	440b      	add	r3, r1
 8006f8c:	3306      	adds	r3, #6
 8006f8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	480a      	ldr	r0, [pc, #40]	; (8006fc8 <BSP_TS_Init+0x12c>)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	211a      	movs	r1, #26
 8006fa4:	fb03 f101 	mul.w	r1, r3, r1
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	440b      	add	r3, r1
 8006fac:	3310      	adds	r3, #16
 8006fae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for (i = 0; i < TS_TOUCH_NBR; i++)
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	61bb      	str	r3, [r7, #24]
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	2b09      	cmp	r3, #9
 8006fbc:	d9d9      	bls.n	8006f72 <BSP_TS_Init+0xd6>
        }
      }
    }
  }

  return status;
 8006fbe:	69fb      	ldr	r3, [r7, #28]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3720      	adds	r7, #32
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20197a70 	.word	0x20197a70
 8006fcc:	20197a6c 	.word	0x20197a6c
 8006fd0:	20197a68 	.word	0x20197a68

08006fd4 <BSP_TS_GetState>:
  * @param  Instance TS Instance.
  * @param  TS_State Pointer to single touch structure.
  * @retval BSP status.
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08a      	sub	sp, #40	; 0x28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented;
  uint32_t y_oriented;
  uint32_t x_diff;
  uint32_t y_diff;

  if (Instance >= TS_INSTANCES_NBR)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <BSP_TS_GetState+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8006fe8:	f06f 0301 	mvn.w	r3, #1
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
 8006fee:	e0ea      	b.n	80071c6 <BSP_TS_GetState+0x1f2>
  else
  {
    SITRONIX_State_t state;

    /* Get each touch coordinates */
    if (Ts_Drv[Instance]->GetState(Ts_CompObj[Instance], &state) < 0)
 8006ff0:	4a77      	ldr	r2, [pc, #476]	; (80071d0 <BSP_TS_GetState+0x1fc>)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	4976      	ldr	r1, [pc, #472]	; (80071d4 <BSP_TS_GetState+0x200>)
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007002:	f107 0108 	add.w	r1, r7, #8
 8007006:	4610      	mov	r0, r2
 8007008:	4798      	blx	r3
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	da03      	bge.n	8007018 <BSP_TS_GetState+0x44>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8007010:	f06f 0304 	mvn.w	r3, #4
 8007014:	627b      	str	r3, [r7, #36]	; 0x24
 8007016:	e0d6      	b.n	80071c6 <BSP_TS_GetState+0x1f2>
    }/* Check and update the number of touches active detected */
    else if (state.TouchDetected != 0U)
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 80bc 	beq.w	8007198 <BSP_TS_GetState+0x1c4>
    {
      x_oriented = /*Ts_Ctx[Instance].MaxX -*/ state.TouchX;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	623b      	str	r3, [r7, #32]
      y_oriented = /*Ts_Ctx[Instance].MaxY -*/ state.TouchY;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	61fb      	str	r3, [r7, #28]

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / (Ts_Ctx[Instance].MaxX);
 8007028:	4a6b      	ldr	r2, [pc, #428]	; (80071d8 <BSP_TS_GetState+0x204>)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2168      	movs	r1, #104	; 0x68
 800702e:	fb01 f303 	mul.w	r3, r1, r3
 8007032:	4413      	add	r3, r2
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6a3a      	ldr	r2, [r7, #32]
 8007038:	fb03 f202 	mul.w	r2, r3, r2
 800703c:	4966      	ldr	r1, [pc, #408]	; (80071d8 <BSP_TS_GetState+0x204>)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2068      	movs	r0, #104	; 0x68
 8007042:	fb00 f303 	mul.w	r3, r0, r3
 8007046:	440b      	add	r3, r1
 8007048:	3310      	adds	r3, #16
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / (Ts_Ctx[Instance].MaxY);
 8007054:	4a60      	ldr	r2, [pc, #384]	; (80071d8 <BSP_TS_GetState+0x204>)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2168      	movs	r1, #104	; 0x68
 800705a:	fb01 f303 	mul.w	r3, r1, r3
 800705e:	4413      	add	r3, r2
 8007060:	3304      	adds	r3, #4
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	69fa      	ldr	r2, [r7, #28]
 8007066:	fb03 f202 	mul.w	r2, r3, r2
 800706a:	495b      	ldr	r1, [pc, #364]	; (80071d8 <BSP_TS_GetState+0x204>)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2068      	movs	r0, #104	; 0x68
 8007070:	fb00 f303 	mul.w	r3, r0, r3
 8007074:	440b      	add	r3, r1
 8007076:	3314      	adds	r3, #20
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	fbb2 f2f3 	udiv	r2, r2, r3
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0]) ?
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	4952      	ldr	r1, [pc, #328]	; (80071d8 <BSP_TS_GetState+0x204>)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2068      	movs	r0, #104	; 0x68
 8007092:	fb00 f303 	mul.w	r3, r0, r3
 8007096:	440b      	add	r3, r1
 8007098:	3318      	adds	r3, #24
 800709a:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]) :
 800709c:	429a      	cmp	r2, r3
 800709e:	d90b      	bls.n	80070b8 <BSP_TS_GetState+0xe4>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	494c      	ldr	r1, [pc, #304]	; (80071d8 <BSP_TS_GetState+0x204>)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2068      	movs	r0, #104	; 0x68
 80070aa:	fb00 f303 	mul.w	r3, r0, r3
 80070ae:	440b      	add	r3, r1
 80070b0:	3318      	adds	r3, #24
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	e00a      	b.n	80070ce <BSP_TS_GetState+0xfa>
               (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 80070b8:	4a47      	ldr	r2, [pc, #284]	; (80071d8 <BSP_TS_GetState+0x204>)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2168      	movs	r1, #104	; 0x68
 80070be:	fb01 f303 	mul.w	r3, r1, r3
 80070c2:	4413      	add	r3, r2
 80070c4:	3318      	adds	r3, #24
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]) :
 80070cc:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0]) ?
 80070ce:	61bb      	str	r3, [r7, #24]

      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0]) ?
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	4940      	ldr	r1, [pc, #256]	; (80071d8 <BSP_TS_GetState+0x204>)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2068      	movs	r0, #104	; 0x68
 80070da:	fb00 f303 	mul.w	r3, r0, r3
 80070de:	440b      	add	r3, r1
 80070e0:	3340      	adds	r3, #64	; 0x40
 80070e2:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]) :
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d90b      	bls.n	8007100 <BSP_TS_GetState+0x12c>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	493a      	ldr	r1, [pc, #232]	; (80071d8 <BSP_TS_GetState+0x204>)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2068      	movs	r0, #104	; 0x68
 80070f2:	fb00 f303 	mul.w	r3, r0, r3
 80070f6:	440b      	add	r3, r1
 80070f8:	3340      	adds	r3, #64	; 0x40
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	e00a      	b.n	8007116 <BSP_TS_GetState+0x142>
               (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8007100:	4a35      	ldr	r2, [pc, #212]	; (80071d8 <BSP_TS_GetState+0x204>)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2168      	movs	r1, #104	; 0x68
 8007106:	fb01 f303 	mul.w	r3, r1, r3
 800710a:	4413      	add	r3, r2
 800710c:	3340      	adds	r3, #64	; 0x40
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	689b      	ldr	r3, [r3, #8]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]) :
 8007114:	1ad3      	subs	r3, r2, r3
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0]) ?
 8007116:	617b      	str	r3, [r7, #20]

      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8007118:	4a2f      	ldr	r2, [pc, #188]	; (80071d8 <BSP_TS_GetState+0x204>)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2168      	movs	r1, #104	; 0x68
 800711e:	fb01 f303 	mul.w	r3, r1, r3
 8007122:	4413      	add	r3, r2
 8007124:	330c      	adds	r3, #12
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	429a      	cmp	r2, r3
 800712c:	d80a      	bhi.n	8007144 <BSP_TS_GetState+0x170>
 800712e:	4a2a      	ldr	r2, [pc, #168]	; (80071d8 <BSP_TS_GetState+0x204>)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2168      	movs	r1, #104	; 0x68
 8007134:	fb01 f303 	mul.w	r3, r1, r3
 8007138:	4413      	add	r3, r2
 800713a:	330c      	adds	r3, #12
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	429a      	cmp	r2, r3
 8007142:	d914      	bls.n	800716e <BSP_TS_GetState+0x19a>
      {
        /* New touch detected */
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	4923      	ldr	r1, [pc, #140]	; (80071d8 <BSP_TS_GetState+0x204>)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2068      	movs	r0, #104	; 0x68
 800714e:	fb00 f303 	mul.w	r3, r0, r3
 8007152:	440b      	add	r3, r1
 8007154:	3318      	adds	r3, #24
 8007156:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	491e      	ldr	r1, [pc, #120]	; (80071d8 <BSP_TS_GetState+0x204>)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2068      	movs	r0, #104	; 0x68
 8007162:	fb00 f303 	mul.w	r3, r0, r3
 8007166:	440b      	add	r3, r1
 8007168:	3340      	adds	r3, #64	; 0x40
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	e02b      	b.n	80071c6 <BSP_TS_GetState+0x1f2>
      }
      else
      {
        TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800716e:	4a1a      	ldr	r2, [pc, #104]	; (80071d8 <BSP_TS_GetState+0x204>)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2168      	movs	r1, #104	; 0x68
 8007174:	fb01 f303 	mul.w	r3, r1, r3
 8007178:	4413      	add	r3, r2
 800717a:	3318      	adds	r3, #24
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	605a      	str	r2, [r3, #4]
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8007182:	4a15      	ldr	r2, [pc, #84]	; (80071d8 <BSP_TS_GetState+0x204>)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2168      	movs	r1, #104	; 0x68
 8007188:	fb01 f303 	mul.w	r3, r1, r3
 800718c:	4413      	add	r3, r2
 800718e:	3340      	adds	r3, #64	; 0x40
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	609a      	str	r2, [r3, #8]
 8007196:	e016      	b.n	80071c6 <BSP_TS_GetState+0x1f2>
      }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2200      	movs	r2, #0
 800719c:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800719e:	4a0e      	ldr	r2, [pc, #56]	; (80071d8 <BSP_TS_GetState+0x204>)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2168      	movs	r1, #104	; 0x68
 80071a4:	fb01 f303 	mul.w	r3, r1, r3
 80071a8:	4413      	add	r3, r2
 80071aa:	3318      	adds	r3, #24
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80071b2:	4a09      	ldr	r2, [pc, #36]	; (80071d8 <BSP_TS_GetState+0x204>)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2168      	movs	r1, #104	; 0x68
 80071b8:	fb01 f303 	mul.w	r3, r1, r3
 80071bc:	4413      	add	r3, r2
 80071be:	3340      	adds	r3, #64	; 0x40
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	609a      	str	r2, [r3, #8]
    }
  }

  return status;
 80071c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3728      	adds	r7, #40	; 0x28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20197a6c 	.word	0x20197a6c
 80071d4:	20197a68 	.word	0x20197a68
 80071d8:	20197a70 	.word	0x20197a70

080071dc <SITRONIX_Probe>:
  * @brief  Probe the SITRONIX TS driver.
  * @param  Instance TS Instance.
  * @retval BSP status.
  */
static int32_t SITRONIX_Probe(uint32_t Instance)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08a      	sub	sp, #40	; 0x28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  int32_t                  status;
  SITRONIX_IO_t              IOCtx;
  static SITRONIX_Object_t SITRONIXObj;

  /* Configure the TS driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 80071e4:	23e0      	movs	r3, #224	; 0xe0
 80071e6:	823b      	strh	r3, [r7, #16]
  IOCtx.Init        = BSP_I2C5_Init;
 80071e8:	4b1d      	ldr	r3, [pc, #116]	; (8007260 <SITRONIX_Probe+0x84>)
 80071ea:	60bb      	str	r3, [r7, #8]
  IOCtx.DeInit      = BSP_I2C5_DeInit;
 80071ec:	4b1d      	ldr	r3, [pc, #116]	; (8007264 <SITRONIX_Probe+0x88>)
 80071ee:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg     = BSP_I2C5_ReadReg;
 80071f0:	4b1d      	ldr	r3, [pc, #116]	; (8007268 <SITRONIX_Probe+0x8c>)
 80071f2:	61bb      	str	r3, [r7, #24]
  IOCtx.WriteReg    = BSP_I2C5_WriteReg;
 80071f4:	4b1d      	ldr	r3, [pc, #116]	; (800726c <SITRONIX_Probe+0x90>)
 80071f6:	617b      	str	r3, [r7, #20]
  IOCtx.ReadData    = BSP_I2C5_Recv;
 80071f8:	4b1d      	ldr	r3, [pc, #116]	; (8007270 <SITRONIX_Probe+0x94>)
 80071fa:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 80071fc:	4b1d      	ldr	r3, [pc, #116]	; (8007274 <SITRONIX_Probe+0x98>)
 80071fe:	623b      	str	r3, [r7, #32]

  if (SITRONIX_RegisterBusIO(&SITRONIXObj, &IOCtx) != SITRONIX_OK)
 8007200:	f107 0308 	add.w	r3, r7, #8
 8007204:	4619      	mov	r1, r3
 8007206:	481c      	ldr	r0, [pc, #112]	; (8007278 <SITRONIX_Probe+0x9c>)
 8007208:	f7fd f962 	bl	80044d0 <SITRONIX_RegisterBusIO>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <SITRONIX_Probe+0x3e>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8007212:	f06f 0307 	mvn.w	r3, #7
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
 8007218:	e01d      	b.n	8007256 <SITRONIX_Probe+0x7a>
  }
  else
  {
    Ts_CompObj[Instance] = &SITRONIXObj;
 800721a:	4a18      	ldr	r2, [pc, #96]	; (800727c <SITRONIX_Probe+0xa0>)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4916      	ldr	r1, [pc, #88]	; (8007278 <SITRONIX_Probe+0x9c>)
 8007220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv[Instance]     = (TS_Drv_t *) &SITRONIX_TS_Driver;
 8007224:	4a16      	ldr	r2, [pc, #88]	; (8007280 <SITRONIX_Probe+0xa4>)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4916      	ldr	r1, [pc, #88]	; (8007284 <SITRONIX_Probe+0xa8>)
 800722a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (Ts_Drv[Instance]->Init(Ts_CompObj[Instance]) < 0)
 800722e:	4a14      	ldr	r2, [pc, #80]	; (8007280 <SITRONIX_Probe+0xa4>)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4910      	ldr	r1, [pc, #64]	; (800727c <SITRONIX_Probe+0xa0>)
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007240:	4610      	mov	r0, r2
 8007242:	4798      	blx	r3
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	da03      	bge.n	8007252 <SITRONIX_Probe+0x76>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800724a:	f06f 0304 	mvn.w	r3, #4
 800724e:	627b      	str	r3, [r7, #36]	; 0x24
 8007250:	e001      	b.n	8007256 <SITRONIX_Probe+0x7a>
    }
    else
    {
      status = BSP_ERROR_NONE;
 8007252:	2300      	movs	r3, #0
 8007254:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return status;
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007258:	4618      	mov	r0, r3
 800725a:	3728      	adds	r7, #40	; 0x28
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	080048f1 	.word	0x080048f1
 8007264:	08004965 	.word	0x08004965
 8007268:	08004a8d 	.word	0x08004a8d
 800726c:	08004a31 	.word	0x08004a31
 8007270:	08004ae9 	.word	0x08004ae9
 8007274:	08004b39 	.word	0x08004b39
 8007278:	20197ad8 	.word	0x20197ad8
 800727c:	20197a68 	.word	0x20197a68
 8007280:	20197a6c 	.word	0x20197a6c
 8007284:	20000010 	.word	0x20000010

08007288 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007288:	b480      	push	{r7}
 800728a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800728c:	4b18      	ldr	r3, [pc, #96]	; (80072f0 <SystemInit+0x68>)
 800728e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007292:	4a17      	ldr	r2, [pc, #92]	; (80072f0 <SystemInit+0x68>)
 8007294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800729c:	4b15      	ldr	r3, [pc, #84]	; (80072f4 <SystemInit+0x6c>)
 800729e:	2201      	movs	r2, #1
 80072a0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80072a2:	4b14      	ldr	r3, [pc, #80]	; (80072f4 <SystemInit+0x6c>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80072a8:	4b12      	ldr	r3, [pc, #72]	; (80072f4 <SystemInit+0x6c>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80072ae:	4b11      	ldr	r3, [pc, #68]	; (80072f4 <SystemInit+0x6c>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80072b4:	4b0f      	ldr	r3, [pc, #60]	; (80072f4 <SystemInit+0x6c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a0e      	ldr	r2, [pc, #56]	; (80072f4 <SystemInit+0x6c>)
 80072ba:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80072be:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80072c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80072c4:	4b0b      	ldr	r3, [pc, #44]	; (80072f4 <SystemInit+0x6c>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80072ca:	4b0a      	ldr	r3, [pc, #40]	; (80072f4 <SystemInit+0x6c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a09      	ldr	r2, [pc, #36]	; (80072f4 <SystemInit+0x6c>)
 80072d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80072d6:	4b07      	ldr	r3, [pc, #28]	; (80072f4 <SystemInit+0x6c>)
 80072d8:	2200      	movs	r2, #0
 80072da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80072dc:	4b04      	ldr	r3, [pc, #16]	; (80072f0 <SystemInit+0x68>)
 80072de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80072e2:	609a      	str	r2, [r3, #8]
  #endif
}
 80072e4:	bf00      	nop
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	e000ed00 	.word	0xe000ed00
 80072f4:	46020c00 	.word	0x46020c00

080072f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80072fc:	4b11      	ldr	r3, [pc, #68]	; (8007344 <HAL_Init+0x4c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a10      	ldr	r2, [pc, #64]	; (8007344 <HAL_Init+0x4c>)
 8007302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007308:	2003      	movs	r0, #3
 800730a:	f000 f914 	bl	8007536 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800730e:	f005 fc7f 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 8007312:	4602      	mov	r2, r0
 8007314:	4b0c      	ldr	r3, [pc, #48]	; (8007348 <HAL_Init+0x50>)
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	f003 030f 	and.w	r3, r3, #15
 800731c:	490b      	ldr	r1, [pc, #44]	; (800734c <HAL_Init+0x54>)
 800731e:	5ccb      	ldrb	r3, [r1, r3]
 8007320:	fa22 f303 	lsr.w	r3, r2, r3
 8007324:	4a0a      	ldr	r2, [pc, #40]	; (8007350 <HAL_Init+0x58>)
 8007326:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007328:	2000      	movs	r0, #0
 800732a:	f7fa fa93 	bl	8001854 <HAL_InitTick>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e002      	b.n	800733e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007338:	f7fa f8c8 	bl	80014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	40022000 	.word	0x40022000
 8007348:	46020c00 	.word	0x46020c00
 800734c:	0802a7e4 	.word	0x0802a7e4
 8007350:	20000048 	.word	0x20000048

08007354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007358:	4b06      	ldr	r3, [pc, #24]	; (8007374 <HAL_IncTick+0x20>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	4b06      	ldr	r3, [pc, #24]	; (8007378 <HAL_IncTick+0x24>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4413      	add	r3, r2
 8007364:	4a04      	ldr	r2, [pc, #16]	; (8007378 <HAL_IncTick+0x24>)
 8007366:	6013      	str	r3, [r2, #0]
}
 8007368:	bf00      	nop
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	20000050 	.word	0x20000050
 8007378:	20197b08 	.word	0x20197b08

0800737c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0
  return uwTick;
 8007380:	4b03      	ldr	r3, [pc, #12]	; (8007390 <HAL_GetTick+0x14>)
 8007382:	681b      	ldr	r3, [r3, #0]
}
 8007384:	4618      	mov	r0, r3
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	20197b08 	.word	0x20197b08

08007394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800739c:	f7ff ffee 	bl	800737c <HAL_GetTick>
 80073a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ac:	d005      	beq.n	80073ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80073ae:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <HAL_Delay+0x44>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4413      	add	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80073ba:	bf00      	nop
 80073bc:	f7ff ffde 	bl	800737c <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d8f7      	bhi.n	80073bc <HAL_Delay+0x28>
  {
  }
}
 80073cc:	bf00      	nop
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20000050 	.word	0x20000050

080073dc <__NVIC_SetPriorityGrouping>:
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80073ec:	4b0c      	ldr	r3, [pc, #48]	; (8007420 <__NVIC_SetPriorityGrouping+0x44>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80073f8:	4013      	ands	r3, r2
 80073fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800740c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800740e:	4a04      	ldr	r2, [pc, #16]	; (8007420 <__NVIC_SetPriorityGrouping+0x44>)
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	60d3      	str	r3, [r2, #12]
}
 8007414:	bf00      	nop
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	e000ed00 	.word	0xe000ed00

08007424 <__NVIC_GetPriorityGrouping>:
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007428:	4b04      	ldr	r3, [pc, #16]	; (800743c <__NVIC_GetPriorityGrouping+0x18>)
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	0a1b      	lsrs	r3, r3, #8
 800742e:	f003 0307 	and.w	r3, r3, #7
}
 8007432:	4618      	mov	r0, r3
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	e000ed00 	.word	0xe000ed00

08007440 <__NVIC_EnableIRQ>:
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800744a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800744e:	2b00      	cmp	r3, #0
 8007450:	db0b      	blt.n	800746a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007452:	88fb      	ldrh	r3, [r7, #6]
 8007454:	f003 021f 	and.w	r2, r3, #31
 8007458:	4907      	ldr	r1, [pc, #28]	; (8007478 <__NVIC_EnableIRQ+0x38>)
 800745a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800745e:	095b      	lsrs	r3, r3, #5
 8007460:	2001      	movs	r0, #1
 8007462:	fa00 f202 	lsl.w	r2, r0, r2
 8007466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	e000e100 	.word	0xe000e100

0800747c <__NVIC_SetPriority>:
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	4603      	mov	r3, r0
 8007484:	6039      	str	r1, [r7, #0]
 8007486:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800748c:	2b00      	cmp	r3, #0
 800748e:	db0a      	blt.n	80074a6 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	b2da      	uxtb	r2, r3
 8007494:	490c      	ldr	r1, [pc, #48]	; (80074c8 <__NVIC_SetPriority+0x4c>)
 8007496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800749a:	0112      	lsls	r2, r2, #4
 800749c:	b2d2      	uxtb	r2, r2
 800749e:	440b      	add	r3, r1
 80074a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80074a4:	e00a      	b.n	80074bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	4908      	ldr	r1, [pc, #32]	; (80074cc <__NVIC_SetPriority+0x50>)
 80074ac:	88fb      	ldrh	r3, [r7, #6]
 80074ae:	f003 030f 	and.w	r3, r3, #15
 80074b2:	3b04      	subs	r3, #4
 80074b4:	0112      	lsls	r2, r2, #4
 80074b6:	b2d2      	uxtb	r2, r2
 80074b8:	440b      	add	r3, r1
 80074ba:	761a      	strb	r2, [r3, #24]
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	e000e100 	.word	0xe000e100
 80074cc:	e000ed00 	.word	0xe000ed00

080074d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b089      	sub	sp, #36	; 0x24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f003 0307 	and.w	r3, r3, #7
 80074e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	f1c3 0307 	rsb	r3, r3, #7
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	bf28      	it	cs
 80074ee:	2304      	movcs	r3, #4
 80074f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	3304      	adds	r3, #4
 80074f6:	2b06      	cmp	r3, #6
 80074f8:	d902      	bls.n	8007500 <NVIC_EncodePriority+0x30>
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	3b03      	subs	r3, #3
 80074fe:	e000      	b.n	8007502 <NVIC_EncodePriority+0x32>
 8007500:	2300      	movs	r3, #0
 8007502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007504:	f04f 32ff 	mov.w	r2, #4294967295
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	fa02 f303 	lsl.w	r3, r2, r3
 800750e:	43da      	mvns	r2, r3
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	401a      	ands	r2, r3
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007518:	f04f 31ff 	mov.w	r1, #4294967295
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	fa01 f303 	lsl.w	r3, r1, r3
 8007522:	43d9      	mvns	r1, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007528:	4313      	orrs	r3, r2
         );
}
 800752a:	4618      	mov	r0, r3
 800752c:	3724      	adds	r7, #36	; 0x24
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b082      	sub	sp, #8
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7ff ff4c 	bl	80073dc <__NVIC_SetPriorityGrouping>
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	4603      	mov	r3, r0
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800755a:	f7ff ff63 	bl	8007424 <__NVIC_GetPriorityGrouping>
 800755e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	68b9      	ldr	r1, [r7, #8]
 8007564:	6978      	ldr	r0, [r7, #20]
 8007566:	f7ff ffb3 	bl	80074d0 <NVIC_EncodePriority>
 800756a:	4602      	mov	r2, r0
 800756c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007570:	4611      	mov	r1, r2
 8007572:	4618      	mov	r0, r3
 8007574:	f7ff ff82 	bl	800747c <__NVIC_SetPriority>
}
 8007578:	bf00      	nop
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	4603      	mov	r3, r0
 8007588:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800758a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800758e:	4618      	mov	r0, r3
 8007590:	f7ff ff56 	bl	8007440 <__NVIC_EnableIRQ>
}
 8007594:	bf00      	nop
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e054      	b.n	8007658 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	7f5b      	ldrb	r3, [r3, #29]
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d105      	bne.n	80075c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7f9 ff9e 	bl	8001500 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	791b      	ldrb	r3, [r3, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10c      	bne.n	80075ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a22      	ldr	r2, [pc, #136]	; (8007660 <HAL_CRC_Init+0xc4>)
 80075d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0218 	bic.w	r2, r2, #24
 80075e8:	609a      	str	r2, [r3, #8]
 80075ea:	e00c      	b.n	8007606 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6899      	ldr	r1, [r3, #8]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	461a      	mov	r2, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f834 	bl	8007664 <HAL_CRCEx_Polynomial_Set>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e028      	b.n	8007658 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	795b      	ldrb	r3, [r3, #5]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d105      	bne.n	800761a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f04f 32ff 	mov.w	r2, #4294967295
 8007616:	611a      	str	r2, [r3, #16]
 8007618:	e004      	b.n	8007624 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	6912      	ldr	r2, [r2, #16]
 8007622:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	695a      	ldr	r2, [r3, #20]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	699a      	ldr	r2, [r3, #24]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	430a      	orrs	r2, r1
 800764e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	04c11db7 	.word	0x04c11db7

08007664 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007664:	b480      	push	{r7}
 8007666:	b087      	sub	sp, #28
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007674:	231f      	movs	r3, #31
 8007676:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d102      	bne.n	8007688 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	75fb      	strb	r3, [r7, #23]
 8007686:	e063      	b.n	8007750 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007688:	bf00      	nop
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1e5a      	subs	r2, r3, #1
 800768e:	613a      	str	r2, [r7, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d009      	beq.n	80076a8 <HAL_CRCEx_Polynomial_Set+0x44>
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	f003 031f 	and.w	r3, r3, #31
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	fa22 f303 	lsr.w	r3, r2, r3
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d0f0      	beq.n	800768a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b18      	cmp	r3, #24
 80076ac:	d846      	bhi.n	800773c <HAL_CRCEx_Polynomial_Set+0xd8>
 80076ae:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	08007743 	.word	0x08007743
 80076b8:	0800773d 	.word	0x0800773d
 80076bc:	0800773d 	.word	0x0800773d
 80076c0:	0800773d 	.word	0x0800773d
 80076c4:	0800773d 	.word	0x0800773d
 80076c8:	0800773d 	.word	0x0800773d
 80076cc:	0800773d 	.word	0x0800773d
 80076d0:	0800773d 	.word	0x0800773d
 80076d4:	08007731 	.word	0x08007731
 80076d8:	0800773d 	.word	0x0800773d
 80076dc:	0800773d 	.word	0x0800773d
 80076e0:	0800773d 	.word	0x0800773d
 80076e4:	0800773d 	.word	0x0800773d
 80076e8:	0800773d 	.word	0x0800773d
 80076ec:	0800773d 	.word	0x0800773d
 80076f0:	0800773d 	.word	0x0800773d
 80076f4:	08007725 	.word	0x08007725
 80076f8:	0800773d 	.word	0x0800773d
 80076fc:	0800773d 	.word	0x0800773d
 8007700:	0800773d 	.word	0x0800773d
 8007704:	0800773d 	.word	0x0800773d
 8007708:	0800773d 	.word	0x0800773d
 800770c:	0800773d 	.word	0x0800773d
 8007710:	0800773d 	.word	0x0800773d
 8007714:	08007719 	.word	0x08007719
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	2b06      	cmp	r3, #6
 800771c:	d913      	bls.n	8007746 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007722:	e010      	b.n	8007746 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	2b07      	cmp	r3, #7
 8007728:	d90f      	bls.n	800774a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800772e:	e00c      	b.n	800774a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	2b0f      	cmp	r3, #15
 8007734:	d90b      	bls.n	800774e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800773a:	e008      	b.n	800774e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	75fb      	strb	r3, [r7, #23]
        break;
 8007740:	e006      	b.n	8007750 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007742:	bf00      	nop
 8007744:	e004      	b.n	8007750 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007746:	bf00      	nop
 8007748:	e002      	b.n	8007750 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800774a:	bf00      	nop
 800774c:	e000      	b.n	8007750 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800774e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10d      	bne.n	8007772 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f023 0118 	bic.w	r1, r3, #24
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	430a      	orrs	r2, r1
 8007770:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007772:	7dfb      	ldrb	r3, [r7, #23]
}
 8007774:	4618      	mov	r0, r3
 8007776:	371c      	adds	r7, #28
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e037      	b.n	8007802 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d119      	bne.n	80077d2 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a1a      	ldr	r2, [pc, #104]	; (800780c <HAL_DCACHE_Init+0x8c>)
 80077a2:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a1a      	ldr	r2, [pc, #104]	; (8007810 <HAL_DCACHE_Init+0x90>)
 80077a8:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a19      	ldr	r2, [pc, #100]	; (8007814 <HAL_DCACHE_Init+0x94>)
 80077ae:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a19      	ldr	r2, [pc, #100]	; (8007818 <HAL_DCACHE_Init+0x98>)
 80077b4:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a18      	ldr	r2, [pc, #96]	; (800781c <HAL_DCACHE_Init+0x9c>)
 80077ba:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d102      	bne.n	80077ca <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a16      	ldr	r2, [pc, #88]	; (8007820 <HAL_DCACHE_Init+0xa0>)
 80077c8:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f814 	bl	8007824 <HAL_DCACHE_Enable>
 80077fc:	4603      	mov	r3, r0
 80077fe:	73fb      	strb	r3, [r7, #15]

  return status;
 8007800:	7bfb      	ldrb	r3, [r7, #15]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	08007973 	.word	0x08007973
 8007810:	08007923 	.word	0x08007923
 8007814:	08007937 	.word	0x08007937
 8007818:	0800795f 	.word	0x0800795f
 800781c:	0800794b 	.word	0x0800794b
 8007820:	08001545 	.word	0x08001545

08007824 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e015      	b.n	8007866 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f003 0309 	and.w	r3, r3, #9
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8007848:	2302      	movs	r3, #2
 800784a:	73fb      	strb	r3, [r7, #15]
 800784c:	e00a      	b.n	8007864 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0201 	orr.w	r2, r2, #1
 8007862:	601a      	str	r2, [r3, #0]
  }

  return status;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <HAL_DCACHE_Invalidate>:
  *                 the configuration information for the specified DCACHEx peripheral.
  * @note   This function waits for end of full cache invalidation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Invalidate(DCACHE_HandleTypeDef *hdcache)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b084      	sub	sp, #16
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <HAL_DCACHE_Invalidate+0x16>
  {
    return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e048      	b.n	800791a <HAL_DCACHE_Invalidate+0xa8>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f003 0309 	and.w	r3, r3, #9
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <HAL_DCACHE_Invalidate+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8007896:	2302      	movs	r3, #2
 8007898:	73fb      	strb	r3, [r7, #15]
 800789a:	e03d      	b.n	8007918 <HAL_DCACHE_Invalidate+0xa6>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Change DCACHE Handle state */
    hdcache->State = HAL_DCACHE_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Make sure flags are reset */
    WRITE_REG(hdcache->Instance->FCR, (DCACHE_FCR_CBSYENDF | DCACHE_FCR_CCMDENDF));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2212      	movs	r2, #18
 80078b0:	60da      	str	r2, [r3, #12]

    /* Set no operation on address range */
    MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_CACHECMD, 0U);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078c0:	601a      	str	r2, [r3, #0]

    /* Launch cache invalidation */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_CACHEINV);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f042 0202 	orr.w	r2, r2, #2
 80078d0:	601a      	str	r2, [r3, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();
 80078d2:	f7ff fd53 	bl	800737c <HAL_GetTick>
 80078d6:	60b8      	str	r0, [r7, #8]

    /* Wait for end of cache invalidation */
    while (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 80078d8:	e017      	b.n	800790a <HAL_DCACHE_Invalidate+0x98>
    {
      if ((HAL_GetTick() - tickstart) > DCACHE_COMMAND_TIMEOUT_VALUE)
 80078da:	f7ff fd4f 	bl	800737c <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	2bc8      	cmp	r3, #200	; 0xc8
 80078e6:	d910      	bls.n	800790a <HAL_DCACHE_Invalidate+0x98>
      {
        if (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d009      	beq.n	800790a <HAL_DCACHE_Invalidate+0x98>
        {
          /* Update error code */
          hdcache->ErrorCode = HAL_DCACHE_ERROR_TIMEOUT;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2210      	movs	r2, #16
 80078fa:	629a      	str	r2, [r3, #40]	; 0x28

          /* Change the DCACHE state */
          hdcache->State = HAL_DCACHE_STATE_ERROR;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2206      	movs	r2, #6
 8007900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          /* Return error status */
          status =  HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	73fb      	strb	r3, [r7, #15]
          break;
 8007908:	e006      	b.n	8007918 <HAL_DCACHE_Invalidate+0xa6>
    while (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e0      	bne.n	80078da <HAL_DCACHE_Invalidate+0x68>
        }
      }
    }
  }

  return status;
 8007918:	7bfb      	ldrb	r3, [r7, #15]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
	...

08007988 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8007990:	f7ff fcf4 	bl	800737c <HAL_GetTick>
 8007994:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e0e0      	b.n	8007b62 <HAL_DMA_Init+0x1da>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a6f      	ldr	r2, [pc, #444]	; (8007b6c <HAL_DMA_Init+0x1e4>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	f000 809f 	beq.w	8007af2 <HAL_DMA_Init+0x16a>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a6d      	ldr	r2, [pc, #436]	; (8007b70 <HAL_DMA_Init+0x1e8>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	f000 8099 	beq.w	8007af2 <HAL_DMA_Init+0x16a>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a6b      	ldr	r2, [pc, #428]	; (8007b74 <HAL_DMA_Init+0x1ec>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	f000 8093 	beq.w	8007af2 <HAL_DMA_Init+0x16a>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a69      	ldr	r2, [pc, #420]	; (8007b78 <HAL_DMA_Init+0x1f0>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	f000 808d 	beq.w	8007af2 <HAL_DMA_Init+0x16a>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a67      	ldr	r2, [pc, #412]	; (8007b7c <HAL_DMA_Init+0x1f4>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	f000 8087 	beq.w	8007af2 <HAL_DMA_Init+0x16a>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a65      	ldr	r2, [pc, #404]	; (8007b80 <HAL_DMA_Init+0x1f8>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	f000 8081 	beq.w	8007af2 <HAL_DMA_Init+0x16a>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a63      	ldr	r2, [pc, #396]	; (8007b84 <HAL_DMA_Init+0x1fc>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d07b      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a62      	ldr	r2, [pc, #392]	; (8007b88 <HAL_DMA_Init+0x200>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d076      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a60      	ldr	r2, [pc, #384]	; (8007b8c <HAL_DMA_Init+0x204>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d071      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a5f      	ldr	r2, [pc, #380]	; (8007b90 <HAL_DMA_Init+0x208>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d06c      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a5d      	ldr	r2, [pc, #372]	; (8007b94 <HAL_DMA_Init+0x20c>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d067      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a5c      	ldr	r2, [pc, #368]	; (8007b98 <HAL_DMA_Init+0x210>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d062      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a5a      	ldr	r2, [pc, #360]	; (8007b9c <HAL_DMA_Init+0x214>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d05d      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a59      	ldr	r2, [pc, #356]	; (8007ba0 <HAL_DMA_Init+0x218>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d058      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a57      	ldr	r2, [pc, #348]	; (8007ba4 <HAL_DMA_Init+0x21c>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d053      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a56      	ldr	r2, [pc, #344]	; (8007ba8 <HAL_DMA_Init+0x220>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d04e      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a54      	ldr	r2, [pc, #336]	; (8007bac <HAL_DMA_Init+0x224>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d049      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a53      	ldr	r2, [pc, #332]	; (8007bb0 <HAL_DMA_Init+0x228>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d044      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a51      	ldr	r2, [pc, #324]	; (8007bb4 <HAL_DMA_Init+0x22c>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d03f      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a50      	ldr	r2, [pc, #320]	; (8007bb8 <HAL_DMA_Init+0x230>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d03a      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a4e      	ldr	r2, [pc, #312]	; (8007bbc <HAL_DMA_Init+0x234>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d035      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a4d      	ldr	r2, [pc, #308]	; (8007bc0 <HAL_DMA_Init+0x238>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d030      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a4b      	ldr	r2, [pc, #300]	; (8007bc4 <HAL_DMA_Init+0x23c>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d02b      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a4a      	ldr	r2, [pc, #296]	; (8007bc8 <HAL_DMA_Init+0x240>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d026      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a48      	ldr	r2, [pc, #288]	; (8007bcc <HAL_DMA_Init+0x244>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d021      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a47      	ldr	r2, [pc, #284]	; (8007bd0 <HAL_DMA_Init+0x248>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d01c      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a45      	ldr	r2, [pc, #276]	; (8007bd4 <HAL_DMA_Init+0x24c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d017      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a44      	ldr	r2, [pc, #272]	; (8007bd8 <HAL_DMA_Init+0x250>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d012      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a42      	ldr	r2, [pc, #264]	; (8007bdc <HAL_DMA_Init+0x254>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d00d      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a41      	ldr	r2, [pc, #260]	; (8007be0 <HAL_DMA_Init+0x258>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d008      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a3f      	ldr	r2, [pc, #252]	; (8007be4 <HAL_DMA_Init+0x25c>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d003      	beq.n	8007af2 <HAL_DMA_Init+0x16a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a3e      	ldr	r2, [pc, #248]	; (8007be8 <HAL_DMA_Init+0x260>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	bf00      	nop
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	695a      	ldr	r2, [r3, #20]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f042 0206 	orr.w	r2, r2, #6
 8007b12:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007b14:	e00f      	b.n	8007b36 <HAL_DMA_Init+0x1ae>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8007b16:	f7ff fc31 	bl	800737c <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	2b05      	cmp	r3, #5
 8007b22:	d908      	bls.n	8007b36 <HAL_DMA_Init+0x1ae>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2210      	movs	r2, #16
 8007b28:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2203      	movs	r2, #3
 8007b2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e015      	b.n	8007b62 <HAL_DMA_Init+0x1da>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1e8      	bne.n	8007b16 <HAL_DMA_Init+0x18e>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f8cd 	bl	8007ce4 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	40020050 	.word	0x40020050
 8007b70:	50020050 	.word	0x50020050
 8007b74:	400200d0 	.word	0x400200d0
 8007b78:	500200d0 	.word	0x500200d0
 8007b7c:	40020150 	.word	0x40020150
 8007b80:	50020150 	.word	0x50020150
 8007b84:	400201d0 	.word	0x400201d0
 8007b88:	500201d0 	.word	0x500201d0
 8007b8c:	40020250 	.word	0x40020250
 8007b90:	50020250 	.word	0x50020250
 8007b94:	400202d0 	.word	0x400202d0
 8007b98:	500202d0 	.word	0x500202d0
 8007b9c:	40020350 	.word	0x40020350
 8007ba0:	50020350 	.word	0x50020350
 8007ba4:	400203d0 	.word	0x400203d0
 8007ba8:	500203d0 	.word	0x500203d0
 8007bac:	40020450 	.word	0x40020450
 8007bb0:	50020450 	.word	0x50020450
 8007bb4:	400204d0 	.word	0x400204d0
 8007bb8:	500204d0 	.word	0x500204d0
 8007bbc:	40020550 	.word	0x40020550
 8007bc0:	50020550 	.word	0x50020550
 8007bc4:	400205d0 	.word	0x400205d0
 8007bc8:	500205d0 	.word	0x500205d0
 8007bcc:	40020650 	.word	0x40020650
 8007bd0:	50020650 	.word	0x50020650
 8007bd4:	400206d0 	.word	0x400206d0
 8007bd8:	500206d0 	.word	0x500206d0
 8007bdc:	40020750 	.word	0x40020750
 8007be0:	50020750 	.word	0x50020750
 8007be4:	400207d0 	.word	0x400207d0
 8007be8:	500207d0 	.word	0x500207d0

08007bec <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8007bf4:	f7ff fbc2 	bl	800737c <HAL_GetTick>
 8007bf8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e06b      	b.n	8007cdc <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d008      	beq.n	8007c22 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2220      	movs	r2, #32
 8007c14:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e05c      	b.n	8007cdc <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	695a      	ldr	r2, [r3, #20]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f042 0204 	orr.w	r2, r2, #4
 8007c30:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2205      	movs	r2, #5
 8007c36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8007c3a:	e020      	b.n	8007c7e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8007c3c:	f7ff fb9e 	bl	800737c <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	2b05      	cmp	r3, #5
 8007c48:	d919      	bls.n	8007c7e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c4e:	f043 0210 	orr.w	r2, r3, #16
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2203      	movs	r2, #3
 8007c5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c6e:	2201      	movs	r2, #1
 8007c70:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e02e      	b.n	8007cdc <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d0d7      	beq.n	8007c3c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	695a      	ldr	r2, [r3, #20]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f042 0202 	orr.w	r2, r2, #2
 8007c9a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2204      	movs	r2, #4
 8007ca0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8007cac:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d007      	beq.n	8007cd2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	615a      	str	r2, [r3, #20]


  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	695a      	ldr	r2, [r3, #20]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	431a      	orrs	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	431a      	orrs	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a53      	ldr	r2, [pc, #332]	; (8007e70 <DMA_Init+0x18c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	f000 80a0 	beq.w	8007e6a <DMA_Init+0x186>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a51      	ldr	r2, [pc, #324]	; (8007e74 <DMA_Init+0x190>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	f000 809a 	beq.w	8007e6a <DMA_Init+0x186>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a4f      	ldr	r2, [pc, #316]	; (8007e78 <DMA_Init+0x194>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	f000 8094 	beq.w	8007e6a <DMA_Init+0x186>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a4d      	ldr	r2, [pc, #308]	; (8007e7c <DMA_Init+0x198>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	f000 808e 	beq.w	8007e6a <DMA_Init+0x186>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a4b      	ldr	r2, [pc, #300]	; (8007e80 <DMA_Init+0x19c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	f000 8088 	beq.w	8007e6a <DMA_Init+0x186>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a49      	ldr	r2, [pc, #292]	; (8007e84 <DMA_Init+0x1a0>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	f000 8082 	beq.w	8007e6a <DMA_Init+0x186>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a47      	ldr	r2, [pc, #284]	; (8007e88 <DMA_Init+0x1a4>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d07c      	beq.n	8007e6a <DMA_Init+0x186>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a45      	ldr	r2, [pc, #276]	; (8007e8c <DMA_Init+0x1a8>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d077      	beq.n	8007e6a <DMA_Init+0x186>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a44      	ldr	r2, [pc, #272]	; (8007e90 <DMA_Init+0x1ac>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d072      	beq.n	8007e6a <DMA_Init+0x186>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a42      	ldr	r2, [pc, #264]	; (8007e94 <DMA_Init+0x1b0>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d06d      	beq.n	8007e6a <DMA_Init+0x186>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a41      	ldr	r2, [pc, #260]	; (8007e98 <DMA_Init+0x1b4>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d068      	beq.n	8007e6a <DMA_Init+0x186>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a3f      	ldr	r2, [pc, #252]	; (8007e9c <DMA_Init+0x1b8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d063      	beq.n	8007e6a <DMA_Init+0x186>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a3e      	ldr	r2, [pc, #248]	; (8007ea0 <DMA_Init+0x1bc>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d05e      	beq.n	8007e6a <DMA_Init+0x186>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a3c      	ldr	r2, [pc, #240]	; (8007ea4 <DMA_Init+0x1c0>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d059      	beq.n	8007e6a <DMA_Init+0x186>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a3b      	ldr	r2, [pc, #236]	; (8007ea8 <DMA_Init+0x1c4>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d054      	beq.n	8007e6a <DMA_Init+0x186>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a39      	ldr	r2, [pc, #228]	; (8007eac <DMA_Init+0x1c8>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d04f      	beq.n	8007e6a <DMA_Init+0x186>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a38      	ldr	r2, [pc, #224]	; (8007eb0 <DMA_Init+0x1cc>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d04a      	beq.n	8007e6a <DMA_Init+0x186>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a36      	ldr	r2, [pc, #216]	; (8007eb4 <DMA_Init+0x1d0>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d045      	beq.n	8007e6a <DMA_Init+0x186>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a35      	ldr	r2, [pc, #212]	; (8007eb8 <DMA_Init+0x1d4>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d040      	beq.n	8007e6a <DMA_Init+0x186>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a33      	ldr	r2, [pc, #204]	; (8007ebc <DMA_Init+0x1d8>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d03b      	beq.n	8007e6a <DMA_Init+0x186>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a32      	ldr	r2, [pc, #200]	; (8007ec0 <DMA_Init+0x1dc>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d036      	beq.n	8007e6a <DMA_Init+0x186>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a30      	ldr	r2, [pc, #192]	; (8007ec4 <DMA_Init+0x1e0>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d031      	beq.n	8007e6a <DMA_Init+0x186>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a2f      	ldr	r2, [pc, #188]	; (8007ec8 <DMA_Init+0x1e4>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d02c      	beq.n	8007e6a <DMA_Init+0x186>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a2d      	ldr	r2, [pc, #180]	; (8007ecc <DMA_Init+0x1e8>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d027      	beq.n	8007e6a <DMA_Init+0x186>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a2c      	ldr	r2, [pc, #176]	; (8007ed0 <DMA_Init+0x1ec>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d022      	beq.n	8007e6a <DMA_Init+0x186>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a2a      	ldr	r2, [pc, #168]	; (8007ed4 <DMA_Init+0x1f0>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d01d      	beq.n	8007e6a <DMA_Init+0x186>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a29      	ldr	r2, [pc, #164]	; (8007ed8 <DMA_Init+0x1f4>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d018      	beq.n	8007e6a <DMA_Init+0x186>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a27      	ldr	r2, [pc, #156]	; (8007edc <DMA_Init+0x1f8>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d013      	beq.n	8007e6a <DMA_Init+0x186>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a26      	ldr	r2, [pc, #152]	; (8007ee0 <DMA_Init+0x1fc>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d00e      	beq.n	8007e6a <DMA_Init+0x186>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a24      	ldr	r2, [pc, #144]	; (8007ee4 <DMA_Init+0x200>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d009      	beq.n	8007e6a <DMA_Init+0x186>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a23      	ldr	r2, [pc, #140]	; (8007ee8 <DMA_Init+0x204>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d004      	beq.n	8007e6a <DMA_Init+0x186>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a21      	ldr	r2, [pc, #132]	; (8007eec <DMA_Init+0x208>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d142      	bne.n	8007ef0 <DMA_Init+0x20c>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e041      	b.n	8007ef2 <DMA_Init+0x20e>
 8007e6e:	bf00      	nop
 8007e70:	40020050 	.word	0x40020050
 8007e74:	50020050 	.word	0x50020050
 8007e78:	400200d0 	.word	0x400200d0
 8007e7c:	500200d0 	.word	0x500200d0
 8007e80:	40020150 	.word	0x40020150
 8007e84:	50020150 	.word	0x50020150
 8007e88:	400201d0 	.word	0x400201d0
 8007e8c:	500201d0 	.word	0x500201d0
 8007e90:	40020250 	.word	0x40020250
 8007e94:	50020250 	.word	0x50020250
 8007e98:	400202d0 	.word	0x400202d0
 8007e9c:	500202d0 	.word	0x500202d0
 8007ea0:	40020350 	.word	0x40020350
 8007ea4:	50020350 	.word	0x50020350
 8007ea8:	400203d0 	.word	0x400203d0
 8007eac:	500203d0 	.word	0x500203d0
 8007eb0:	40020450 	.word	0x40020450
 8007eb4:	50020450 	.word	0x50020450
 8007eb8:	400204d0 	.word	0x400204d0
 8007ebc:	500204d0 	.word	0x500204d0
 8007ec0:	40020550 	.word	0x40020550
 8007ec4:	50020550 	.word	0x50020550
 8007ec8:	400205d0 	.word	0x400205d0
 8007ecc:	500205d0 	.word	0x500205d0
 8007ed0:	40020650 	.word	0x40020650
 8007ed4:	50020650 	.word	0x50020650
 8007ed8:	400206d0 	.word	0x400206d0
 8007edc:	500206d0 	.word	0x500206d0
 8007ee0:	40020750 	.word	0x40020750
 8007ee4:	50020750 	.word	0x50020750
 8007ee8:	400207d0 	.word	0x400207d0
 8007eec:	500207d0 	.word	0x500207d0
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d012      	beq.n	8007f1c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efe:	3b01      	subs	r3, #1
 8007f00:	051b      	lsls	r3, r3, #20
 8007f02:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8007f06:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	011b      	lsls	r3, r3, #4
 8007f10:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8007f14:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f4e:	f040 80b0 	bne.w	80080b2 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a82      	ldr	r2, [pc, #520]	; (8008160 <DMA_Init+0x47c>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	f000 80a0 	beq.w	800809e <DMA_Init+0x3ba>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a80      	ldr	r2, [pc, #512]	; (8008164 <DMA_Init+0x480>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	f000 809a 	beq.w	800809e <DMA_Init+0x3ba>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a7e      	ldr	r2, [pc, #504]	; (8008168 <DMA_Init+0x484>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	f000 8094 	beq.w	800809e <DMA_Init+0x3ba>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a7c      	ldr	r2, [pc, #496]	; (800816c <DMA_Init+0x488>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	f000 808e 	beq.w	800809e <DMA_Init+0x3ba>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a7a      	ldr	r2, [pc, #488]	; (8008170 <DMA_Init+0x48c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	f000 8088 	beq.w	800809e <DMA_Init+0x3ba>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a78      	ldr	r2, [pc, #480]	; (8008174 <DMA_Init+0x490>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	f000 8082 	beq.w	800809e <DMA_Init+0x3ba>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a76      	ldr	r2, [pc, #472]	; (8008178 <DMA_Init+0x494>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d07c      	beq.n	800809e <DMA_Init+0x3ba>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a74      	ldr	r2, [pc, #464]	; (800817c <DMA_Init+0x498>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d077      	beq.n	800809e <DMA_Init+0x3ba>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a73      	ldr	r2, [pc, #460]	; (8008180 <DMA_Init+0x49c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d072      	beq.n	800809e <DMA_Init+0x3ba>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a71      	ldr	r2, [pc, #452]	; (8008184 <DMA_Init+0x4a0>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d06d      	beq.n	800809e <DMA_Init+0x3ba>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a70      	ldr	r2, [pc, #448]	; (8008188 <DMA_Init+0x4a4>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d068      	beq.n	800809e <DMA_Init+0x3ba>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a6e      	ldr	r2, [pc, #440]	; (800818c <DMA_Init+0x4a8>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d063      	beq.n	800809e <DMA_Init+0x3ba>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a6d      	ldr	r2, [pc, #436]	; (8008190 <DMA_Init+0x4ac>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d05e      	beq.n	800809e <DMA_Init+0x3ba>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a6b      	ldr	r2, [pc, #428]	; (8008194 <DMA_Init+0x4b0>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d059      	beq.n	800809e <DMA_Init+0x3ba>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a6a      	ldr	r2, [pc, #424]	; (8008198 <DMA_Init+0x4b4>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d054      	beq.n	800809e <DMA_Init+0x3ba>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a68      	ldr	r2, [pc, #416]	; (800819c <DMA_Init+0x4b8>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d04f      	beq.n	800809e <DMA_Init+0x3ba>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a67      	ldr	r2, [pc, #412]	; (80081a0 <DMA_Init+0x4bc>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d04a      	beq.n	800809e <DMA_Init+0x3ba>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a65      	ldr	r2, [pc, #404]	; (80081a4 <DMA_Init+0x4c0>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d045      	beq.n	800809e <DMA_Init+0x3ba>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a64      	ldr	r2, [pc, #400]	; (80081a8 <DMA_Init+0x4c4>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d040      	beq.n	800809e <DMA_Init+0x3ba>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a62      	ldr	r2, [pc, #392]	; (80081ac <DMA_Init+0x4c8>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d03b      	beq.n	800809e <DMA_Init+0x3ba>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a61      	ldr	r2, [pc, #388]	; (80081b0 <DMA_Init+0x4cc>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d036      	beq.n	800809e <DMA_Init+0x3ba>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a5f      	ldr	r2, [pc, #380]	; (80081b4 <DMA_Init+0x4d0>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d031      	beq.n	800809e <DMA_Init+0x3ba>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a5e      	ldr	r2, [pc, #376]	; (80081b8 <DMA_Init+0x4d4>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d02c      	beq.n	800809e <DMA_Init+0x3ba>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a5c      	ldr	r2, [pc, #368]	; (80081bc <DMA_Init+0x4d8>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d027      	beq.n	800809e <DMA_Init+0x3ba>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a5b      	ldr	r2, [pc, #364]	; (80081c0 <DMA_Init+0x4dc>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d022      	beq.n	800809e <DMA_Init+0x3ba>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a59      	ldr	r2, [pc, #356]	; (80081c4 <DMA_Init+0x4e0>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d01d      	beq.n	800809e <DMA_Init+0x3ba>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a58      	ldr	r2, [pc, #352]	; (80081c8 <DMA_Init+0x4e4>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d018      	beq.n	800809e <DMA_Init+0x3ba>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a56      	ldr	r2, [pc, #344]	; (80081cc <DMA_Init+0x4e8>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d013      	beq.n	800809e <DMA_Init+0x3ba>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a55      	ldr	r2, [pc, #340]	; (80081d0 <DMA_Init+0x4ec>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00e      	beq.n	800809e <DMA_Init+0x3ba>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a53      	ldr	r2, [pc, #332]	; (80081d4 <DMA_Init+0x4f0>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d009      	beq.n	800809e <DMA_Init+0x3ba>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a52      	ldr	r2, [pc, #328]	; (80081d8 <DMA_Init+0x4f4>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d004      	beq.n	800809e <DMA_Init+0x3ba>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a50      	ldr	r2, [pc, #320]	; (80081dc <DMA_Init+0x4f8>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d101      	bne.n	80080a2 <DMA_Init+0x3be>
 800809e:	2301      	movs	r3, #1
 80080a0:	e000      	b.n	80080a4 <DMA_Init+0x3c0>
 80080a2:	2300      	movs	r3, #0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00d      	beq.n	80080c4 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	e008      	b.n	80080c4 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ba:	d103      	bne.n	80080c4 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080c2:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080ca:	4b45      	ldr	r3, [pc, #276]	; (80081e0 <DMA_Init+0x4fc>)
 80080cc:	4013      	ands	r3, r2
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	6812      	ldr	r2, [r2, #0]
 80080d2:	68f9      	ldr	r1, [r7, #12]
 80080d4:	430b      	orrs	r3, r1
 80080d6:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2200      	movs	r2, #0
 80080de:	649a      	str	r2, [r3, #72]	; 0x48


  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a36      	ldr	r2, [pc, #216]	; (80081c0 <DMA_Init+0x4dc>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d022      	beq.n	8008130 <DMA_Init+0x44c>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a35      	ldr	r2, [pc, #212]	; (80081c4 <DMA_Init+0x4e0>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d01d      	beq.n	8008130 <DMA_Init+0x44c>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a33      	ldr	r2, [pc, #204]	; (80081c8 <DMA_Init+0x4e4>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d018      	beq.n	8008130 <DMA_Init+0x44c>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a32      	ldr	r2, [pc, #200]	; (80081cc <DMA_Init+0x4e8>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d013      	beq.n	8008130 <DMA_Init+0x44c>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a30      	ldr	r2, [pc, #192]	; (80081d0 <DMA_Init+0x4ec>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d00e      	beq.n	8008130 <DMA_Init+0x44c>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a2f      	ldr	r2, [pc, #188]	; (80081d4 <DMA_Init+0x4f0>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d009      	beq.n	8008130 <DMA_Init+0x44c>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a2d      	ldr	r2, [pc, #180]	; (80081d8 <DMA_Init+0x4f4>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d004      	beq.n	8008130 <DMA_Init+0x44c>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a2c      	ldr	r2, [pc, #176]	; (80081dc <DMA_Init+0x4f8>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d101      	bne.n	8008134 <DMA_Init+0x450>
 8008130:	2301      	movs	r3, #1
 8008132:	e000      	b.n	8008136 <DMA_Init+0x452>
 8008134:	2300      	movs	r3, #0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d007      	beq.n	800814a <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2200      	movs	r2, #0
 8008140:	655a      	str	r2, [r3, #84]	; 0x54


    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2200      	movs	r2, #0
 8008148:	659a      	str	r2, [r3, #88]	; 0x58
  }


  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2200      	movs	r2, #0
 8008150:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008152:	bf00      	nop
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	40020050 	.word	0x40020050
 8008164:	50020050 	.word	0x50020050
 8008168:	400200d0 	.word	0x400200d0
 800816c:	500200d0 	.word	0x500200d0
 8008170:	40020150 	.word	0x40020150
 8008174:	50020150 	.word	0x50020150
 8008178:	400201d0 	.word	0x400201d0
 800817c:	500201d0 	.word	0x500201d0
 8008180:	40020250 	.word	0x40020250
 8008184:	50020250 	.word	0x50020250
 8008188:	400202d0 	.word	0x400202d0
 800818c:	500202d0 	.word	0x500202d0
 8008190:	40020350 	.word	0x40020350
 8008194:	50020350 	.word	0x50020350
 8008198:	400203d0 	.word	0x400203d0
 800819c:	500203d0 	.word	0x500203d0
 80081a0:	40020450 	.word	0x40020450
 80081a4:	50020450 	.word	0x50020450
 80081a8:	400204d0 	.word	0x400204d0
 80081ac:	500204d0 	.word	0x500204d0
 80081b0:	40020550 	.word	0x40020550
 80081b4:	50020550 	.word	0x50020550
 80081b8:	400205d0 	.word	0x400205d0
 80081bc:	500205d0 	.word	0x500205d0
 80081c0:	40020650 	.word	0x40020650
 80081c4:	50020650 	.word	0x50020650
 80081c8:	400206d0 	.word	0x400206d0
 80081cc:	500206d0 	.word	0x500206d0
 80081d0:	40020750 	.word	0x40020750
 80081d4:	50020750 	.word	0x50020750
 80081d8:	400207d0 	.word	0x400207d0
 80081dc:	500207d0 	.word	0x500207d0
 80081e0:	3cc03180 	.word	0x3cc03180

080081e4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e053      	b.n	800829e <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d106      	bne.n	8008210 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7f9 f9d4 	bl	80015b8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	6851      	ldr	r1, [r2, #4]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	69d2      	ldr	r2, [r2, #28]
 800822e:	4311      	orrs	r1, r2
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	6812      	ldr	r2, [r2, #0]
 8008234:	430b      	orrs	r3, r1
 8008236:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823e:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 8008242:	f023 0301 	bic.w	r3, r3, #1
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	6891      	ldr	r1, [r2, #8]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	6992      	ldr	r2, [r2, #24]
 800824e:	4311      	orrs	r1, r2
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	6812      	ldr	r2, [r2, #0]
 8008254:	430b      	orrs	r3, r1
 8008256:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	0c1b      	lsrs	r3, r3, #16
 8008260:	041b      	lsls	r3, r3, #16
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	68d1      	ldr	r1, [r2, #12]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	6812      	ldr	r2, [r2, #0]
 800826a:	430b      	orrs	r3, r1
 800826c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008274:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	051a      	lsls	r2, r3, #20
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	055b      	lsls	r3, r3, #21
 8008284:	431a      	orrs	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	430a      	orrs	r2, r1
 800828c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d026      	beq.n	8008316 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d021      	beq.n	8008316 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082e0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082e6:	f043 0201 	orr.w	r2, r3, #1
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2201      	movs	r2, #1
 80082f4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2204      	movs	r2, #4
 80082fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f003 0320 	and.w	r3, r3, #32
 800831c:	2b00      	cmp	r3, #0
 800831e:	d026      	beq.n	800836e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d021      	beq.n	800836e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008338:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2220      	movs	r2, #32
 8008340:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008346:	f043 0202 	orr.w	r2, r3, #2
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2204      	movs	r2, #4
 8008352:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008362:	2b00      	cmp	r3, #0
 8008364:	d003      	beq.n	800836e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f003 0308 	and.w	r3, r3, #8
 8008374:	2b00      	cmp	r3, #0
 8008376:	d026      	beq.n	80083c6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800837e:	2b00      	cmp	r3, #0
 8008380:	d021      	beq.n	80083c6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008390:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2208      	movs	r2, #8
 8008398:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800839e:	f043 0204 	orr.w	r2, r3, #4
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2204      	movs	r2, #4
 80083aa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d013      	beq.n	80083f8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00e      	beq.n	80083f8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083e8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2204      	movs	r2, #4
 80083f0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f853 	bl	800849e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f003 0302 	and.w	r3, r3, #2
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d024      	beq.n	800844c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008408:	2b00      	cmp	r3, #0
 800840a:	d01f      	beq.n	800844c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800841a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2202      	movs	r2, #2
 8008422:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferCpltCallback != NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d003      	beq.n	800844c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f003 0310 	and.w	r3, r3, #16
 8008452:	2b00      	cmp	r3, #0
 8008454:	d01f      	beq.n	8008496 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d01a      	beq.n	8008496 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800846e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2210      	movs	r2, #16
 8008476:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f80e 	bl	80084b2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8008496:	bf00      	nop
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800849e:	b480      	push	{r7}
 80084a0:	b083      	sub	sp, #12
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80084a6:	bf00      	nop
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b083      	sub	sp, #12
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80084ba:	bf00      	nop
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b085      	sub	sp, #20
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	60f8      	str	r0, [r7, #12]
 80084ce:	60b9      	str	r1, [r7, #8]
 80084d0:	607a      	str	r2, [r7, #4]
 80084d2:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	019a      	lsls	r2, r3, #6
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	431a      	orrs	r2, r3
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	021b      	lsls	r3, r3, #8
 80084e0:	431a      	orrs	r2, r3
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	041b      	lsls	r3, r3, #16
 80084e6:	431a      	orrs	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80084ec:	bf00      	nop
 80084ee:	3714      	adds	r7, #20
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
 8008504:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8008506:	f7fe ff39 	bl	800737c <HAL_GetTick>
 800850a:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800850c:	e008      	b.n	8008520 <DSI_ShortWrite+0x28>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800850e:	f7fe ff35 	bl	800737c <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	2b64      	cmp	r3, #100	; 0x64
 800851a:	d901      	bls.n	8008520 <DSI_ShortWrite+0x28>
    {
      return HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	e015      	b.n	800854c <DSI_ShortWrite+0x54>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0ef      	beq.n	800850e <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	019a      	lsls	r2, r3, #6
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	431a      	orrs	r2, r3
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	021b      	lsls	r3, r3, #8
 800853a:	ea42 0103 	orr.w	r1, r2, r3
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	041a      	lsls	r2, r3, #16
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	430a      	orrs	r2, r1
 8008548:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800856c:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	; 0xc04
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	00da      	lsls	r2, r3, #3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	220e      	movs	r2, #14
 800858e:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	; 0xc70
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f022 021f 	bic.w	r2, r2, #31
 80085a2:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	6912      	ldr	r2, [r2, #16]
 80085ae:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	220e      	movs	r2, #14
 80085b8:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	; 0xd08
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 021f 	bic.w	r2, r2, #31
 80085cc:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	6912      	ldr	r2, [r2, #16]
 80085d8:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	220e      	movs	r2, #14
 80085e2:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	; 0xc5c
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80085f6:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800860a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d007      	beq.n	8008626 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 800861a:	2b02      	cmp	r3, #2
 800861c:	d003      	beq.n	8008626 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8008622:	2b05      	cmp	r3, #5
 8008624:	d10a      	bne.n	800863c <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2200      	movs	r2, #0
 800862c:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2200      	movs	r2, #0
 8008636:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 800863a:	e02c      	b.n	8008696 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00b      	beq.n	800865c <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8008648:	2b03      	cmp	r3, #3
 800864a:	d007      	beq.n	800865c <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8008650:	2b04      	cmp	r3, #4
 8008652:	d003      	beq.n	800865c <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8008658:	2b06      	cmp	r3, #6
 800865a:	d10a      	bne.n	8008672 <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2210      	movs	r2, #16
 8008662:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2210      	movs	r2, #16
 800866c:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8008670:	e011      	b.n	8008696 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	2b07      	cmp	r3, #7
 8008678:	d003      	beq.n	8008682 <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 800867e:	2b08      	cmp	r3, #8
 8008680:	d109      	bne.n	8008696 <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2220      	movs	r2, #32
 8008688:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2220      	movs	r2, #32
 8008692:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 020f 	bic.w	r2, r2, #15
 80086a6:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	; 0xcf8
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f022 020f 	bic.w	r2, r2, #15
 80086ba:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	6952      	ldr	r2, [r2, #20]
 80086c6:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	6952      	ldr	r2, [r2, #20]
 80086d2:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

}
 80086d6:	bf00      	nop
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80086fc:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	075a      	lsls	r2, r3, #29
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	430a      	orrs	r2, r1
 8008714:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8008728:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	695b      	ldr	r3, [r3, #20]
 8008738:	031a      	lsls	r2, r3, #12
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	430a      	orrs	r2, r1
 8008740:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	021a      	lsls	r2, r3, #8
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	430a      	orrs	r2, r1
 8008758:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d101      	bne.n	800877c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e0c3      	b.n	8008904 <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	7e5b      	ldrb	r3, [r3, #25]
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d102      	bne.n	800878c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f7f8 ff3e 	bl	8001608 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2203      	movs	r2, #3
 8008790:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087a2:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 80087a6:	2002      	movs	r0, #2
 80087a8:	f7fe fdf4 	bl	8007394 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	4b54      	ldr	r3, [pc, #336]	; (800890c <HAL_DSI_Init+0x1a4>)
 80087ba:	400b      	ands	r3, r1
 80087bc:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80087d4:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80087dc:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	430a      	orrs	r2, r1
 80087e4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7ff feb3 	bl	8008554 <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f7ff ff76 	bl	80086e2 <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80087f6:	2300      	movs	r3, #0
 80087f8:	60bb      	str	r3, [r7, #8]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f042 0201 	orr.w	r2, r2, #1
 800880a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	60bb      	str	r3, [r7, #8]
 800881c:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800881e:	2001      	movs	r0, #1
 8008820:	f7fe fdb8 	bl	8007394 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8008824:	f7fe fdaa 	bl	800737c <HAL_GetTick>
 8008828:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800882a:	e008      	b.n	800883e <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800882c:	f7fe fda6 	bl	800737c <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	2b64      	cmp	r3, #100	; 0x64
 8008838:	d901      	bls.n	800883e <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e062      	b.n	8008904 <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0ee      	beq.n	800882c <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f042 0206 	orr.w	r2, r2, #6
 800885e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 0203 	bic.w	r2, r2, #3
 8008872:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	431a      	orrs	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f042 0201 	orr.w	r2, r2, #1
 800888c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f022 0203 	bic.w	r2, r2, #3
 80088a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68da      	ldr	r2, [r3, #12]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689a      	ldr	r2, [r3, #8]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80088c8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6899      	ldr	r1, [r3, #8]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	430a      	orrs	r2, r1
 80088da:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	e0000003 	.word	0xe0000003

08008910 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	7e1b      	ldrb	r3, [r3, #24]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d101      	bne.n	8008926 <HAL_DSI_ConfigErrorMonitor+0x16>
 8008922:	2302      	movs	r3, #2
 8008924:	e0ba      	b.n	8008a9c <HAL_DSI_ConfigErrorMonitor+0x18c>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2200      	movs	r2, #0
 8008932:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2200      	movs	r2, #0
 800893c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00b      	beq.n	8008968 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	6812      	ldr	r2, [r2, #0]
 800895c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8008960:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8008964:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	f003 0302 	and.w	r3, r3, #2
 800896e:	2b00      	cmp	r3, #0
 8008970:	d009      	beq.n	8008986 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8008982:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	f003 0304 	and.w	r3, r3, #4
 800898c:	2b00      	cmp	r3, #0
 800898e:	d009      	beq.n	80089a4 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f042 0201 	orr.w	r2, r2, #1
 80089a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	f003 0308 	and.w	r3, r3, #8
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d009      	beq.n	80089c2 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0202 	orr.w	r2, r2, #2
 80089be:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	f003 0310 	and.w	r3, r3, #16
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d009      	beq.n	80089e0 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f042 020c 	orr.w	r2, r2, #12
 80089dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	f003 0320 	and.w	r3, r3, #32
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d009      	beq.n	80089fe <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f042 0210 	orr.w	r2, r2, #16
 80089fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d009      	beq.n	8008a1c <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f042 0220 	orr.w	r2, r2, #32
 8008a18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d009      	beq.n	8008a3a <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a36:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d009      	beq.n	8008a58 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a54:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d009      	beq.n	8008a76 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8008a72:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d009      	beq.n	8008a94 <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008a90:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	7e1b      	ldrb	r3, [r3, #24]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d101      	bne.n	8008abe <HAL_DSI_SetGenericVCID+0x16>
 8008aba:	2302      	movs	r3, #2
 8008abc:	e019      	b.n	8008af2 <HAL_DSI_SetGenericVCID+0x4a>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 8008ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6b19      	ldr	r1, [r3, #48]	; 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	431a      	orrs	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b083      	sub	sp, #12
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	7e1b      	ldrb	r3, [r3, #24]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d101      	bne.n	8008b14 <HAL_DSI_ConfigVideoMode+0x16>
 8008b10:	2302      	movs	r3, #2
 8008b12:	e1f6      	b.n	8008f02 <HAL_DSI_ConfigVideoMode+0x404>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	761a      	strb	r2, [r3, #24]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f022 0201 	bic.w	r2, r2, #1
 8008b28:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 0201 	bic.w	r2, r2, #1
 8008b3a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f022 0203 	bic.w	r2, r2, #3
 8008b4c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	68da      	ldr	r2, [r3, #12]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	430a      	orrs	r2, r1
 8008b5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	6812      	ldr	r2, [r2, #0]
 8008b6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008b6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008b72:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	691a      	ldr	r2, [r3, #16]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	6812      	ldr	r2, [r2, #0]
 8008b90:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8008b94:	f023 031f 	bic.w	r3, r3, #31
 8008b98:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	695a      	ldr	r2, [r3, #20]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	430a      	orrs	r2, r1
 8008baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	6812      	ldr	r2, [r2, #0]
 8008bb6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8008bba:	f023 031f 	bic.w	r3, r3, #31
 8008bbe:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	699a      	ldr	r2, [r3, #24]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68da      	ldr	r2, [r3, #12]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 0203 	bic.w	r2, r2, #3
 8008be0:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68d9      	ldr	r1, [r3, #12]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	695a      	ldr	r2, [r3, #20]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f022 0207 	bic.w	r2, r2, #7
 8008c02:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6959      	ldr	r1, [r3, #20]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	431a      	orrs	r2, r3
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	69db      	ldr	r3, [r3, #28]
 8008c18:	431a      	orrs	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	430a      	orrs	r2, r1
 8008c20:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	691a      	ldr	r2, [r3, #16]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f022 020f 	bic.w	r2, r2, #15
 8008c30:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	6919      	ldr	r1, [r3, #16]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	430a      	orrs	r2, r1
 8008c42:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f022 020e 	bic.w	r2, r2, #14
 8008c54:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	005a      	lsls	r2, r3, #1
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d110      	bne.n	8008c9a <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	691a      	ldr	r2, [r3, #16]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c86:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6919      	ldr	r1, [r3, #16]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	689a      	ldr	r2, [r3, #8]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	6812      	ldr	r2, [r2, #0]
 8008ca4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008ca8:	f023 030f 	bic.w	r3, r3, #15
 8008cac:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	6812      	ldr	r2, [r2, #0]
 8008cca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008cce:	f023 030f 	bic.w	r3, r3, #15
 8008cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	430a      	orrs	r2, r1
 8008ce4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	6812      	ldr	r2, [r2, #0]
 8008cf0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008cf4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008cf8:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	6812      	ldr	r2, [r2, #0]
 8008d16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008d1a:	f023 0303 	bic.w	r3, r3, #3
 8008d1e:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	6812      	ldr	r2, [r2, #0]
 8008d3c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008d40:	f023 0303 	bic.w	r3, r3, #3
 8008d44:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	430a      	orrs	r2, r1
 8008d56:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	6812      	ldr	r2, [r2, #0]
 8008d62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008d66:	f023 0303 	bic.w	r3, r3, #3
 8008d6a:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	6812      	ldr	r2, [r2, #0]
 8008d88:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008d8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008d90:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	430a      	orrs	r2, r1
 8008da2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008db2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	430a      	orrs	r2, r1
 8008dc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	699a      	ldr	r2, [r3, #24]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8008dd4:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6999      	ldr	r1, [r3, #24]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008de0:	041a      	lsls	r2, r3, #16
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	430a      	orrs	r2, r1
 8008de8:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	699a      	ldr	r2, [r3, #24]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008df8:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6999      	ldr	r1, [r3, #24]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	430a      	orrs	r2, r1
 8008e0a:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e1a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e3c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e5e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e80:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	430a      	orrs	r2, r1
 8008e92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008ea2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ec4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008ee6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b083      	sub	sp, #12
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	7e1b      	ldrb	r3, [r3, #24]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d101      	bne.n	8008f24 <HAL_DSI_ConfigFlowControl+0x16>
 8008f20:	2302      	movs	r3, #2
 8008f22:	e016      	b.n	8008f52 <HAL_DSI_ConfigFlowControl+0x44>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008f38:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	430a      	orrs	r2, r1
 8008f48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b085      	sub	sp, #20
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	7e1b      	ldrb	r3, [r3, #24]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d101      	bne.n	8008f74 <HAL_DSI_ConfigPhyTimer+0x16>
 8008f70:	2302      	movs	r3, #2
 8008f72:	e084      	b.n	800907e <HAL_DSI_ConfigPhyTimer+0x120>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	441a      	add	r2, r3
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	6859      	ldr	r1, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	695a      	ldr	r2, [r3, #20]
 8008f90:	4613      	mov	r3, r2
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	4413      	add	r3, r2
 8008f96:	18ca      	adds	r2, r1, r3
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	68da      	ldr	r2, [r3, #12]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	695b      	ldr	r3, [r3, #20]
 8008fa4:	005b      	lsls	r3, r3, #1
 8008fa6:	441a      	add	r2, r3
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	bf38      	it	cc
 8008fb8:	4613      	movcc	r3, r2
 8008fba:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8008fcc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	041a      	lsls	r2, r3, #16
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	430a      	orrs	r2, r1
 8008fe6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8008ffa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	68da      	ldr	r2, [r3, #12]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	041b      	lsls	r3, r3, #16
 8009010:	431a      	orrs	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	430a      	orrs	r2, r1
 8009018:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	6812      	ldr	r2, [r2, #0]
 8009028:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800902c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009030:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	691a      	ldr	r2, [r3, #16]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800905a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	021a      	lsls	r2, r3, #8
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	430a      	orrs	r2, r1
 8009072:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800908a:	b480      	push	{r7}
 800908c:	b083      	sub	sp, #12
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	7e1b      	ldrb	r3, [r3, #24]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d101      	bne.n	80090a0 <HAL_DSI_ConfigHostTimeouts+0x16>
 800909c:	2302      	movs	r3, #2
 800909e:	e0b4      	b.n	800920a <HAL_DSI_ConfigHostTimeouts+0x180>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689a      	ldr	r2, [r3, #8]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80090b4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	6899      	ldr	r1, [r3, #8]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	021a      	lsls	r2, r3, #8
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	b292      	uxth	r2, r2
 80090d6:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	041a      	lsls	r2, r3, #16
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	430a      	orrs	r2, r1
 80090ea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	6812      	ldr	r2, [r2, #0]
 80090f6:	0c1b      	lsrs	r3, r3, #16
 80090f8:	041b      	lsls	r3, r3, #16
 80090fa:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	430a      	orrs	r2, r1
 800910c:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	6812      	ldr	r2, [r2, #0]
 8009118:	0c1b      	lsrs	r3, r3, #16
 800911a:	041b      	lsls	r3, r3, #16
 800911c:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	68da      	ldr	r2, [r3, #12]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	430a      	orrs	r2, r1
 800912e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	6812      	ldr	r2, [r2, #0]
 800913c:	0c1b      	lsrs	r3, r3, #16
 800913e:	041b      	lsls	r3, r3, #16
 8009140:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	691a      	ldr	r2, [r3, #16]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	430a      	orrs	r2, r1
 8009156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	6812      	ldr	r2, [r2, #0]
 8009166:	0c1b      	lsrs	r3, r3, #16
 8009168:	041b      	lsls	r3, r3, #16
 800916a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	695a      	ldr	r2, [r3, #20]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	430a      	orrs	r2, r1
 8009180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	699a      	ldr	r2, [r3, #24]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	430a      	orrs	r2, r1
 80091aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	6812      	ldr	r2, [r2, #0]
 80091ba:	0c1b      	lsrs	r3, r3, #16
 80091bc:	041b      	lsls	r3, r3, #16
 80091be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	69da      	ldr	r2, [r3, #28]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	430a      	orrs	r2, r1
 80091d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	6812      	ldr	r2, [r2, #0]
 80091e4:	0c1b      	lsrs	r3, r3, #16
 80091e6:	041b      	lsls	r3, r3, #16
 80091e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	6a1a      	ldr	r2, [r3, #32]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	430a      	orrs	r2, r1
 80091fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	370c      	adds	r7, #12
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8009216:	b480      	push	{r7}
 8009218:	b085      	sub	sp, #20
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	7e1b      	ldrb	r3, [r3, #24]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d101      	bne.n	800922a <HAL_DSI_Start+0x14>
 8009226:	2302      	movs	r3, #2
 8009228:	e02b      	b.n	8009282 <HAL_DSI_Start+0x6c>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	761a      	strb	r2, [r3, #24]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8009230:	2300      	movs	r3, #0
 8009232:	60fb      	str	r3, [r7, #12]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f042 0201 	orr.w	r2, r2, #1
 8009242:	605a      	str	r2, [r3, #4]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	60fb      	str	r3, [r7, #12]
 8009250:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8009252:	2300      	movs	r3, #0
 8009254:	60bb      	str	r3, [r7, #8]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f042 0208 	orr.w	r2, r2, #8
 8009266:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009272:	f003 0308 	and.w	r3, r3, #8
 8009276:	60bb      	str	r3, [r7, #8]
 8009278:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b088      	sub	sp, #32
 8009292:	af02      	add	r7, sp, #8
 8009294:	60f8      	str	r0, [r7, #12]
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]
 800929a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	7e1b      	ldrb	r3, [r3, #24]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d101      	bne.n	80092a8 <HAL_DSI_ShortWrite+0x1a>
 80092a4:	2302      	movs	r3, #2
 80092a6:	e010      	b.n	80092ca <HAL_DSI_ShortWrite+0x3c>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2201      	movs	r2, #1
 80092ac:	761a      	strb	r2, [r3, #24]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80092ae:	6a3b      	ldr	r3, [r7, #32]
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f7ff f91d 	bl	80084f8 <DSI_ShortWrite>
 80092be:	4603      	mov	r3, r0
 80092c0:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	761a      	strb	r2, [r3, #24]

  return status;
 80092c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b08c      	sub	sp, #48	; 0x30
 80092d6:	af02      	add	r7, sp, #8
 80092d8:	60f8      	str	r0, [r7, #12]
 80092da:	60b9      	str	r1, [r7, #8]
 80092dc:	607a      	str	r2, [r7, #4]
 80092de:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80092e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e2:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	7e1b      	ldrb	r3, [r3, #24]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d101      	bne.n	80092f0 <HAL_DSI_LongWrite+0x1e>
 80092ec:	2302      	movs	r3, #2
 80092ee:	e083      	b.n	80093f8 <HAL_DSI_LongWrite+0x126>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2201      	movs	r2, #1
 80092f4:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80092f6:	f7fe f841 	bl	800737c <HAL_GetTick>
 80092fa:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80092fc:	e00b      	b.n	8009316 <HAL_DSI_LongWrite+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80092fe:	f7fe f83d 	bl	800737c <HAL_GetTick>
 8009302:	4602      	mov	r2, r0
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	2b64      	cmp	r3, #100	; 0x64
 800930a:	d904      	bls.n	8009316 <HAL_DSI_LongWrite+0x44>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 8009312:	2303      	movs	r3, #3
 8009314:	e070      	b.n	80093f8 <HAL_DSI_LongWrite+0x126>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	2b00      	cmp	r3, #0
 8009322:	d0ec      	beq.n	80092fe <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8009324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009326:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	2b03      	cmp	r3, #3
 800932c:	bf28      	it	cs
 800932e:	2303      	movcs	r3, #3
 8009330:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8009332:	2300      	movs	r3, #0
 8009334:	623b      	str	r3, [r7, #32]
 8009336:	e00f      	b.n	8009358 <HAL_DSI_LongWrite+0x86>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8009338:	69ba      	ldr	r2, [r7, #24]
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	4413      	add	r3, r2
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	461a      	mov	r2, r3
 8009342:	6a3b      	ldr	r3, [r7, #32]
 8009344:	3301      	adds	r3, #1
 8009346:	00db      	lsls	r3, r3, #3
 8009348:	fa02 f303 	lsl.w	r3, r2, r3
 800934c:	69fa      	ldr	r2, [r7, #28]
 800934e:	4313      	orrs	r3, r2
 8009350:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	3301      	adds	r3, #1
 8009356:	623b      	str	r3, [r7, #32]
 8009358:	6a3a      	ldr	r2, [r7, #32]
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	429a      	cmp	r2, r3
 800935e:	d3eb      	bcc.n	8009338 <HAL_DSI_LongWrite+0x66>
  }
  hdsi->Instance->GPDR = fifoword;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	69fa      	ldr	r2, [r7, #28]
 8009366:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8009368:	683a      	ldr	r2, [r7, #0]
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	4413      	add	r3, r2
 8009376:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8009378:	e028      	b.n	80093cc <HAL_DSI_LongWrite+0xfa>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800937a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937c:	2b04      	cmp	r3, #4
 800937e:	bf28      	it	cs
 8009380:	2304      	movcs	r3, #4
 8009382:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8009384:	2300      	movs	r3, #0
 8009386:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8009388:	2300      	movs	r3, #0
 800938a:	623b      	str	r3, [r7, #32]
 800938c:	e00e      	b.n	80093ac <HAL_DSI_LongWrite+0xda>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800938e:	69ba      	ldr	r2, [r7, #24]
 8009390:	6a3b      	ldr	r3, [r7, #32]
 8009392:	4413      	add	r3, r2
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	461a      	mov	r2, r3
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	00db      	lsls	r3, r3, #3
 800939c:	fa02 f303 	lsl.w	r3, r2, r3
 80093a0:	69fa      	ldr	r2, [r7, #28]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80093a6:	6a3b      	ldr	r3, [r7, #32]
 80093a8:	3301      	adds	r3, #1
 80093aa:	623b      	str	r3, [r7, #32]
 80093ac:	6a3a      	ldr	r2, [r7, #32]
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d3ec      	bcc.n	800938e <HAL_DSI_LongWrite+0xbc>
    }
    hdsi->Instance->GPDR = fifoword;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	69fa      	ldr	r2, [r7, #28]
 80093ba:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80093bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80093c4:	69ba      	ldr	r2, [r7, #24]
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	4413      	add	r3, r2
 80093ca:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1d3      	bne.n	800937a <HAL_DSI_LongWrite+0xa8>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80093da:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	3301      	adds	r3, #1
 80093e0:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	4613      	mov	r3, r2
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	f7ff f86b 	bl	80084c6 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3728      	adds	r7, #40	; 0x28
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <HAL_DSI_EnterULPM>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_EnterULPM(DSI_HandleTypeDef *hdsi)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	7e1b      	ldrb	r3, [r3, #24]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d101      	bne.n	8009414 <HAL_DSI_EnterULPM+0x14>
 8009410:	2302      	movs	r3, #2
 8009412:	e106      	b.n	8009622 <HAL_DSI_EnterULPM+0x222>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	761a      	strb	r2, [r3, #24]

  /* Verify the initial status of the DSI Host */

  /* Verify that the clock lane and the digital section of the D-PHY are enabled */
  if ((hdsi->Instance->PCTLR & (DSI_PCTLR_CKE | DSI_PCTLR_DEN)) != (DSI_PCTLR_CKE | DSI_PCTLR_DEN))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009422:	f003 0306 	and.w	r3, r3, #6
 8009426:	2b06      	cmp	r3, #6
 8009428:	d004      	beq.n	8009434 <HAL_DSI_EnterULPM+0x34>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e0f6      	b.n	8009622 <HAL_DSI_EnterULPM+0x222>
  }

  /* Verify that the D-PHY PLL and the reference bias are enabled */
  if ((hdsi->Instance->WRPCR & DSI_WRPCR_PLLEN) != DSI_WRPCR_PLLEN)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800943c:	f003 0301 	and.w	r3, r3, #1
 8009440:	2b01      	cmp	r3, #1
 8009442:	d004      	beq.n	800944e <HAL_DSI_EnterULPM+0x4e>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e0e9      	b.n	8009622 <HAL_DSI_EnterULPM+0x222>
  }
  else if ((hdsi->Instance->BCFGR  & DSI_BCFGR_PWRUP) != DSI_BCFGR_PWRUP)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8009456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800945a:	2b40      	cmp	r3, #64	; 0x40
 800945c:	d004      	beq.n	8009468 <HAL_DSI_EnterULPM+0x68>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e0dc      	b.n	8009622 <HAL_DSI_EnterULPM+0x222>
  {
    /* Nothing to do */
  }

  /* Verify that there are no ULPS exit or request on both data and clock lanes */
  if ((hdsi->Instance->PUCR & (DSI_PUCR_UEDL | DSI_PUCR_URDL | DSI_PUCR_UECL | DSI_PUCR_URCL)) != 0U)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009470:	f003 030f 	and.w	r3, r3, #15
 8009474:	2b00      	cmp	r3, #0
 8009476:	d004      	beq.n	8009482 <HAL_DSI_EnterULPM+0x82>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e0cf      	b.n	8009622 <HAL_DSI_EnterULPM+0x222>
  }

  /* Verify that there are no Transmission trigger */
  if ((hdsi->Instance->PTTCR & DSI_PTTCR_TX_TRIG) != 0U)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800948a:	f003 030f 	and.w	r3, r3, #15
 800948e:	2b00      	cmp	r3, #0
 8009490:	d004      	beq.n	800949c <HAL_DSI_EnterULPM+0x9c>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e0c2      	b.n	8009622 <HAL_DSI_EnterULPM+0x222>
  }

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800949c:	2001      	movs	r0, #1
 800949e:	f7fd ff79 	bl	8007394 <HAL_Delay>

  /* Verify that D-PHY PLL is locked */
  tickstart = HAL_GetTick();
 80094a2:	f7fd ff6b 	bl	800737c <HAL_GetTick>
 80094a6:	60f8      	str	r0, [r7, #12]

  while ((__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U))
 80094a8:	e00b      	b.n	80094c2 <HAL_DSI_EnterULPM+0xc2>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80094aa:	f7fd ff67 	bl	800737c <HAL_GetTick>
 80094ae:	4602      	mov	r2, r0
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	2b64      	cmp	r3, #100	; 0x64
 80094b6:	d904      	bls.n	80094c2 <HAL_DSI_EnterULPM+0xc2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 80094be:	2303      	movs	r3, #3
 80094c0:	e0af      	b.n	8009622 <HAL_DSI_EnterULPM+0x222>
  while ((__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80094ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d0eb      	beq.n	80094aa <HAL_DSI_EnterULPM+0xaa>
    }
  }

  /* Verify that all active lanes are in Stop state */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80094da:	f003 0303 	and.w	r3, r3, #3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10c      	bne.n	80094fc <HAL_DSI_EnterULPM+0xfc>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80094ee:	2b30      	cmp	r3, #48	; 0x30
 80094f0:	d01f      	beq.n	8009532 <HAL_DSI_EnterULPM+0x132>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e092      	b.n	8009622 <HAL_DSI_EnterULPM+0x222>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009504:	f003 0303 	and.w	r3, r3, #3
 8009508:	2b01      	cmp	r3, #1
 800950a:	d10d      	bne.n	8009528 <HAL_DSI_EnterULPM+0x128>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | \
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009514:	f403 73d8 	and.w	r3, r3, #432	; 0x1b0
 8009518:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800951c:	d009      	beq.n	8009532 <HAL_DSI_EnterULPM+0x132>
                                DSI_PSR_UAN1)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_UAN1))
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e07c      	b.n	8009622 <HAL_DSI_EnterULPM+0x222>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e077      	b.n	8009622 <HAL_DSI_EnterULPM+0x222>
  }

  /* Clock lane configuration: no more HS request */
  hdsi->Instance->CLCR &= ~DSI_CLCR_DPCC;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f022 0201 	bic.w	r2, r2, #1
 8009542:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Use system PLL as byte lane clock source before stopping DSIPHY clock source */
  __HAL_RCC_DSI_CONFIG(RCC_DSICLKSOURCE_PLL3);
 8009546:	4b39      	ldr	r3, [pc, #228]	; (800962c <HAL_DSI_EnterULPM+0x22c>)
 8009548:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800954c:	4a37      	ldr	r2, [pc, #220]	; (800962c <HAL_DSI_EnterULPM+0x22c>)
 800954e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009552:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4

  /* ULPS Request on Clock and Data Lanes */
  hdsi->Instance->PUCR |= (DSI_PUCR_URCL | DSI_PUCR_URDL);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f042 0205 	orr.w	r2, r2, #5
 8009566:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Get tick */
  tickstart = HAL_GetTick();
 800956a:	f7fd ff07 	bl	800737c <HAL_GetTick>
 800956e:	60f8      	str	r0, [r7, #12]

  /* Wait until all active lanes enter ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009578:	f003 0303 	and.w	r3, r3, #3
 800957c:	2b00      	cmp	r3, #0
 800957e:	d115      	bne.n	80095ac <HAL_DSI_EnterULPM+0x1ac>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != 0U)
 8009580:	e00b      	b.n	800959a <HAL_DSI_EnterULPM+0x19a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009582:	f7fd fefb 	bl	800737c <HAL_GetTick>
 8009586:	4602      	mov	r2, r0
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	2b64      	cmp	r3, #100	; 0x64
 800958e:	d904      	bls.n	800959a <HAL_DSI_EnterULPM+0x19a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009596:	2303      	movs	r3, #3
 8009598:	e043      	b.n	8009622 <HAL_DSI_EnterULPM+0x222>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != 0U)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1eb      	bne.n	8009582 <HAL_DSI_EnterULPM+0x182>
 80095aa:	e022      	b.n	80095f2 <HAL_DSI_EnterULPM+0x1f2>
      }
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095b4:	f003 0303 	and.w	r3, r3, #3
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d115      	bne.n	80095e8 <HAL_DSI_EnterULPM+0x1e8>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != 0U)
 80095bc:	e00b      	b.n	80095d6 <HAL_DSI_EnterULPM+0x1d6>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80095be:	f7fd fedd 	bl	800737c <HAL_GetTick>
 80095c2:	4602      	mov	r2, r0
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	2b64      	cmp	r3, #100	; 0x64
 80095ca:	d904      	bls.n	80095d6 <HAL_DSI_EnterULPM+0x1d6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e025      	b.n	8009622 <HAL_DSI_EnterULPM+0x222>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != 0U)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095de:	f403 7394 	and.w	r3, r3, #296	; 0x128
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1eb      	bne.n	80095be <HAL_DSI_EnterULPM+0x1be>
 80095e6:	e004      	b.n	80095f2 <HAL_DSI_EnterULPM+0x1f2>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e017      	b.n	8009622 <HAL_DSI_EnterULPM+0x222>
  }

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80095f2:	2300      	movs	r3, #0
 80095f4:	60bb      	str	r3, [r7, #8]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f022 0201 	bic.w	r2, r2, #1
 8009606:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	60bb      	str	r3, [r7, #8]
 8009618:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	46020c00 	.word	0x46020c00

08009630 <HAL_DSI_ExitULPM>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ExitULPM(DSI_HandleTypeDef *hdsi)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	7e1b      	ldrb	r3, [r3, #24]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d101      	bne.n	8009644 <HAL_DSI_ExitULPM+0x14>
 8009640:	2302      	movs	r3, #2
 8009642:	e125      	b.n	8009890 <HAL_DSI_ExitULPM+0x260>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	761a      	strb	r2, [r3, #24]

  /* Verify that all active lanes are in ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009652:	f003 0303 	and.w	r3, r3, #3
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10c      	bne.n	8009674 <HAL_DSI_ExitULPM+0x44>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_RUE0 | DSI_PSR_UAN0 | DSI_PSR_PSS0 | \
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009662:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009666:	2b00      	cmp	r3, #0
 8009668:	d01e      	beq.n	80096a8 <HAL_DSI_ExitULPM+0x78>
                                DSI_PSR_UANC | DSI_PSR_PSSC | DSI_PSR_PD)) != 0U)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	761a      	strb	r2, [r3, #24]

      return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e10d      	b.n	8009890 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800967c:	f003 0303 	and.w	r3, r3, #3
 8009680:	2b01      	cmp	r3, #1
 8009682:	d10c      	bne.n	800969e <HAL_DSI_ExitULPM+0x6e>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_RUE0 | DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_UAN1 | \
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800968c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009690:	2b00      	cmp	r3, #0
 8009692:	d009      	beq.n	80096a8 <HAL_DSI_ExitULPM+0x78>
                                DSI_PSR_PSS1 | DSI_PSR_UANC | DSI_PSR_PSSC | DSI_PSR_PD)) != 0U)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	761a      	strb	r2, [r3, #24]

      return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e0f8      	b.n	8009890 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e0f3      	b.n	8009890 <HAL_DSI_ExitULPM+0x260>
  }

  /* Turn on the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80096a8:	2300      	movs	r3, #0
 80096aa:	60bb      	str	r3, [r7, #8]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f042 0201 	orr.w	r2, r2, #1
 80096bc:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80096c8:	f003 0301 	and.w	r3, r3, #1
 80096cc:	60bb      	str	r3, [r7, #8]
 80096ce:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80096d0:	2001      	movs	r0, #1
 80096d2:	f7fd fe5f 	bl	8007394 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80096d6:	f7fd fe51 	bl	800737c <HAL_GetTick>
 80096da:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80096dc:	e00b      	b.n	80096f6 <HAL_DSI_ExitULPM+0xc6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80096de:	f7fd fe4d 	bl	800737c <HAL_GetTick>
 80096e2:	4602      	mov	r2, r0
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	2b64      	cmp	r3, #100	; 0x64
 80096ea:	d904      	bls.n	80096f6 <HAL_DSI_ExitULPM+0xc6>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 80096f2:	2303      	movs	r3, #3
 80096f4:	e0cc      	b.n	8009890 <HAL_DSI_ExitULPM+0x260>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80096fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009702:	2b00      	cmp	r3, #0
 8009704:	d0eb      	beq.n	80096de <HAL_DSI_ExitULPM+0xae>
    }
  }

  /* Exit ULPS on Clock and Data Lanes */
  hdsi->Instance->PUCR |= (DSI_PUCR_UECL | DSI_PUCR_UEDL);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f042 020a 	orr.w	r2, r2, #10
 8009716:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Get tick */
  tickstart = HAL_GetTick();
 800971a:	f7fd fe2f 	bl	800737c <HAL_GetTick>
 800971e:	60f8      	str	r0, [r7, #12]

  /* Wait until all active lanes exit ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009728:	f003 0303 	and.w	r3, r3, #3
 800972c:	2b00      	cmp	r3, #0
 800972e:	d115      	bne.n	800975c <HAL_DSI_ExitULPM+0x12c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UANC))
 8009730:	e00b      	b.n	800974a <HAL_DSI_ExitULPM+0x11a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009732:	f7fd fe23 	bl	800737c <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	2b64      	cmp	r3, #100	; 0x64
 800973e:	d904      	bls.n	800974a <HAL_DSI_ExitULPM+0x11a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e0a2      	b.n	8009890 <HAL_DSI_ExitULPM+0x260>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UANC))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009752:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009756:	2b28      	cmp	r3, #40	; 0x28
 8009758:	d1eb      	bne.n	8009732 <HAL_DSI_ExitULPM+0x102>
 800975a:	e023      	b.n	80097a4 <HAL_DSI_ExitULPM+0x174>
      }
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009764:	f003 0303 	and.w	r3, r3, #3
 8009768:	2b01      	cmp	r3, #1
 800976a:	d116      	bne.n	800979a <HAL_DSI_ExitULPM+0x16a>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UAN1 |
 800976c:	e00b      	b.n	8009786 <HAL_DSI_ExitULPM+0x156>
                                                                                    DSI_PSR_UANC))
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800976e:	f7fd fe05 	bl	800737c <HAL_GetTick>
 8009772:	4602      	mov	r2, r0
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	2b64      	cmp	r3, #100	; 0x64
 800977a:	d904      	bls.n	8009786 <HAL_DSI_ExitULPM+0x156>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009782:	2303      	movs	r3, #3
 8009784:	e084      	b.n	8009890 <HAL_DSI_ExitULPM+0x260>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UAN1 |
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800978e:	f403 7394 	and.w	r3, r3, #296	; 0x128
 8009792:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8009796:	d1ea      	bne.n	800976e <HAL_DSI_ExitULPM+0x13e>
 8009798:	e004      	b.n	80097a4 <HAL_DSI_ExitULPM+0x174>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e075      	b.n	8009890 <HAL_DSI_ExitULPM+0x260>
  }

  /* wait for 1 ms */
  HAL_Delay(1U);
 80097a4:	2001      	movs	r0, #1
 80097a6:	f7fd fdf5 	bl	8007394 <HAL_Delay>

  /* De-assert the ULPM requests and the ULPM exit bits */
  hdsi->Instance->PUCR = 0U;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Switch the lane byte clock source in the RCC from system PLL to D-PHY */
  __HAL_RCC_DSI_CONFIG(RCC_DSICLKSOURCE_DSIPHY);
 80097b4:	4b38      	ldr	r3, [pc, #224]	; (8009898 <HAL_DSI_ExitULPM+0x268>)
 80097b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80097ba:	4a37      	ldr	r2, [pc, #220]	; (8009898 <HAL_DSI_ExitULPM+0x268>)
 80097bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097c0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4

  /* Restore clock lane configuration to HS */
  hdsi->Instance->CLCR |= DSI_CLCR_DPCC;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f042 0201 	orr.w	r2, r2, #1
 80097d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Verify that D-PHY PLL is enabled */
  if ((hdsi->Instance->WRPCR & DSI_WRPCR_PLLEN) != DSI_WRPCR_PLLEN)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d004      	beq.n	80097f2 <HAL_DSI_ExitULPM+0x1c2>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e04e      	b.n	8009890 <HAL_DSI_ExitULPM+0x260>
  }

  /* Verify that all active lanes are in Stop state */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80097fa:	f003 0303 	and.w	r3, r3, #3
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10c      	bne.n	800981c <HAL_DSI_ExitULPM+0x1ec>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800980a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800980e:	2b30      	cmp	r3, #48	; 0x30
 8009810:	d01f      	beq.n	8009852 <HAL_DSI_ExitULPM+0x222>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e039      	b.n	8009890 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009824:	f003 0303 	and.w	r3, r3, #3
 8009828:	2b01      	cmp	r3, #1
 800982a:	d10d      	bne.n	8009848 <HAL_DSI_ExitULPM+0x218>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | \
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009834:	f403 73d8 	and.w	r3, r3, #432	; 0x1b0
 8009838:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800983c:	d009      	beq.n	8009852 <HAL_DSI_ExitULPM+0x222>
                                DSI_PSR_UAN1)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_UAN1))
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e023      	b.n	8009890 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e01e      	b.n	8009890 <HAL_DSI_ExitULPM+0x260>
  }

  /* Verify that D-PHY PLL is locked */
  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8009852:	2001      	movs	r0, #1
 8009854:	f7fd fd9e 	bl	8007394 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8009858:	f7fd fd90 	bl	800737c <HAL_GetTick>
 800985c:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800985e:	e00b      	b.n	8009878 <HAL_DSI_ExitULPM+0x248>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009860:	f7fd fd8c 	bl	800737c <HAL_GetTick>
 8009864:	4602      	mov	r2, r0
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	2b64      	cmp	r3, #100	; 0x64
 800986c:	d904      	bls.n	8009878 <HAL_DSI_ExitULPM+0x248>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 8009874:	2303      	movs	r3, #3
 8009876:	e00b      	b.n	8009890 <HAL_DSI_ExitULPM+0x260>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009884:	2b00      	cmp	r3, #0
 8009886:	d0eb      	beq.n	8009860 <HAL_DSI_ExitULPM+0x230>
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	46020c00 	.word	0x46020c00

0800989c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800989c:	b480      	push	{r7}
 800989e:	b089      	sub	sp, #36	; 0x24
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80098a6:	2300      	movs	r3, #0
 80098a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80098ae:	e1ba      	b.n	8009c26 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	2101      	movs	r1, #1
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	fa01 f303 	lsl.w	r3, r1, r3
 80098bc:	4013      	ands	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f000 81aa 	beq.w	8009c20 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a55      	ldr	r2, [pc, #340]	; (8009a24 <HAL_GPIO_Init+0x188>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d15d      	bne.n	8009990 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80098da:	2201      	movs	r2, #1
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	fa02 f303 	lsl.w	r3, r2, r3
 80098e2:	43db      	mvns	r3, r3
 80098e4:	69fa      	ldr	r2, [r7, #28]
 80098e6:	4013      	ands	r3, r2
 80098e8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	f003 0201 	and.w	r2, r3, #1
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	fa02 f303 	lsl.w	r3, r2, r3
 80098f8:	69fa      	ldr	r2, [r7, #28]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	69fa      	ldr	r2, [r7, #28]
 8009902:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8009904:	4a48      	ldr	r2, [pc, #288]	; (8009a28 <HAL_GPIO_Init+0x18c>)
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800990c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800990e:	4a46      	ldr	r2, [pc, #280]	; (8009a28 <HAL_GPIO_Init+0x18c>)
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	00db      	lsls	r3, r3, #3
 8009914:	4413      	add	r3, r2
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	08da      	lsrs	r2, r3, #3
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	3208      	adds	r2, #8
 8009922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009926:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	f003 0307 	and.w	r3, r3, #7
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	220f      	movs	r2, #15
 8009932:	fa02 f303 	lsl.w	r3, r2, r3
 8009936:	43db      	mvns	r3, r3
 8009938:	69fa      	ldr	r2, [r7, #28]
 800993a:	4013      	ands	r3, r2
 800993c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	f003 0307 	and.w	r3, r3, #7
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	220b      	movs	r2, #11
 8009948:	fa02 f303 	lsl.w	r3, r2, r3
 800994c:	69fa      	ldr	r2, [r7, #28]
 800994e:	4313      	orrs	r3, r2
 8009950:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	08da      	lsrs	r2, r3, #3
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	3208      	adds	r2, #8
 800995a:	69f9      	ldr	r1, [r7, #28]
 800995c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	005b      	lsls	r3, r3, #1
 800996a:	2203      	movs	r2, #3
 800996c:	fa02 f303 	lsl.w	r3, r2, r3
 8009970:	43db      	mvns	r3, r3
 8009972:	69fa      	ldr	r2, [r7, #28]
 8009974:	4013      	ands	r3, r2
 8009976:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	005b      	lsls	r3, r3, #1
 800997c:	2202      	movs	r2, #2
 800997e:	fa02 f303 	lsl.w	r3, r2, r3
 8009982:	69fa      	ldr	r2, [r7, #28]
 8009984:	4313      	orrs	r3, r2
 8009986:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	69fa      	ldr	r2, [r7, #28]
 800998c:	601a      	str	r2, [r3, #0]
 800998e:	e067      	b.n	8009a60 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	2b02      	cmp	r3, #2
 8009996:	d003      	beq.n	80099a0 <HAL_GPIO_Init+0x104>
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	2b12      	cmp	r3, #18
 800999e:	d145      	bne.n	8009a2c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	08da      	lsrs	r2, r3, #3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	3208      	adds	r2, #8
 80099a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	f003 0307 	and.w	r3, r3, #7
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	220f      	movs	r2, #15
 80099b8:	fa02 f303 	lsl.w	r3, r2, r3
 80099bc:	43db      	mvns	r3, r3
 80099be:	69fa      	ldr	r2, [r7, #28]
 80099c0:	4013      	ands	r3, r2
 80099c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	f003 020f 	and.w	r2, r3, #15
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	f003 0307 	and.w	r3, r3, #7
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	fa02 f303 	lsl.w	r3, r2, r3
 80099d8:	69fa      	ldr	r2, [r7, #28]
 80099da:	4313      	orrs	r3, r2
 80099dc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	08da      	lsrs	r2, r3, #3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	3208      	adds	r2, #8
 80099e6:	69f9      	ldr	r1, [r7, #28]
 80099e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	005b      	lsls	r3, r3, #1
 80099f6:	2203      	movs	r2, #3
 80099f8:	fa02 f303 	lsl.w	r3, r2, r3
 80099fc:	43db      	mvns	r3, r3
 80099fe:	69fa      	ldr	r2, [r7, #28]
 8009a00:	4013      	ands	r3, r2
 8009a02:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	f003 0203 	and.w	r2, r3, #3
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	005b      	lsls	r3, r3, #1
 8009a10:	fa02 f303 	lsl.w	r3, r2, r3
 8009a14:	69fa      	ldr	r2, [r7, #28]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	69fa      	ldr	r2, [r7, #28]
 8009a1e:	601a      	str	r2, [r3, #0]
 8009a20:	e01e      	b.n	8009a60 <HAL_GPIO_Init+0x1c4>
 8009a22:	bf00      	nop
 8009a24:	46020000 	.word	0x46020000
 8009a28:	0802a83c 	.word	0x0802a83c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	2203      	movs	r2, #3
 8009a38:	fa02 f303 	lsl.w	r3, r2, r3
 8009a3c:	43db      	mvns	r3, r3
 8009a3e:	69fa      	ldr	r2, [r7, #28]
 8009a40:	4013      	ands	r3, r2
 8009a42:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	f003 0203 	and.w	r2, r3, #3
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	005b      	lsls	r3, r3, #1
 8009a50:	fa02 f303 	lsl.w	r3, r2, r3
 8009a54:	69fa      	ldr	r2, [r7, #28]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	69fa      	ldr	r2, [r7, #28]
 8009a5e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d00b      	beq.n	8009a80 <HAL_GPIO_Init+0x1e4>
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d007      	beq.n	8009a80 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009a74:	2b11      	cmp	r3, #17
 8009a76:	d003      	beq.n	8009a80 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	2b12      	cmp	r3, #18
 8009a7e:	d130      	bne.n	8009ae2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	005b      	lsls	r3, r3, #1
 8009a8a:	2203      	movs	r2, #3
 8009a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a90:	43db      	mvns	r3, r3
 8009a92:	69fa      	ldr	r2, [r7, #28]
 8009a94:	4013      	ands	r3, r2
 8009a96:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	68da      	ldr	r2, [r3, #12]
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	005b      	lsls	r3, r3, #1
 8009aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa4:	69fa      	ldr	r2, [r7, #28]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	69fa      	ldr	r2, [r7, #28]
 8009aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	fa02 f303 	lsl.w	r3, r2, r3
 8009abe:	43db      	mvns	r3, r3
 8009ac0:	69fa      	ldr	r2, [r7, #28]
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	091b      	lsrs	r3, r3, #4
 8009acc:	f003 0201 	and.w	r2, r3, #1
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad6:	69fa      	ldr	r2, [r7, #28]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	69fa      	ldr	r2, [r7, #28]
 8009ae0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	d017      	beq.n	8009b1a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	005b      	lsls	r3, r3, #1
 8009af4:	2203      	movs	r2, #3
 8009af6:	fa02 f303 	lsl.w	r3, r2, r3
 8009afa:	43db      	mvns	r3, r3
 8009afc:	69fa      	ldr	r2, [r7, #28]
 8009afe:	4013      	ands	r3, r2
 8009b00:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	689a      	ldr	r2, [r3, #8]
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b0e:	69fa      	ldr	r2, [r7, #28]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	69fa      	ldr	r2, [r7, #28]
 8009b18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d07c      	beq.n	8009c20 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8009b26:	4a47      	ldr	r2, [pc, #284]	; (8009c44 <HAL_GPIO_Init+0x3a8>)
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	089b      	lsrs	r3, r3, #2
 8009b2c:	3318      	adds	r3, #24
 8009b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b32:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	f003 0303 	and.w	r3, r3, #3
 8009b3a:	00db      	lsls	r3, r3, #3
 8009b3c:	220f      	movs	r2, #15
 8009b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b42:	43db      	mvns	r3, r3
 8009b44:	69fa      	ldr	r2, [r7, #28]
 8009b46:	4013      	ands	r3, r2
 8009b48:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	0a9a      	lsrs	r2, r3, #10
 8009b4e:	4b3e      	ldr	r3, [pc, #248]	; (8009c48 <HAL_GPIO_Init+0x3ac>)
 8009b50:	4013      	ands	r3, r2
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	f002 0203 	and.w	r2, r2, #3
 8009b58:	00d2      	lsls	r2, r2, #3
 8009b5a:	4093      	lsls	r3, r2
 8009b5c:	69fa      	ldr	r2, [r7, #28]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8009b62:	4938      	ldr	r1, [pc, #224]	; (8009c44 <HAL_GPIO_Init+0x3a8>)
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	089b      	lsrs	r3, r3, #2
 8009b68:	3318      	adds	r3, #24
 8009b6a:	69fa      	ldr	r2, [r7, #28]
 8009b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8009b70:	4b34      	ldr	r3, [pc, #208]	; (8009c44 <HAL_GPIO_Init+0x3a8>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	43db      	mvns	r3, r3
 8009b7a:	69fa      	ldr	r2, [r7, #28]
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d003      	beq.n	8009b94 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8009b8c:	69fa      	ldr	r2, [r7, #28]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8009b94:	4a2b      	ldr	r2, [pc, #172]	; (8009c44 <HAL_GPIO_Init+0x3a8>)
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8009b9a:	4b2a      	ldr	r3, [pc, #168]	; (8009c44 <HAL_GPIO_Init+0x3a8>)
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	43db      	mvns	r3, r3
 8009ba4:	69fa      	ldr	r2, [r7, #28]
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8009bb6:	69fa      	ldr	r2, [r7, #28]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8009bbe:	4a21      	ldr	r2, [pc, #132]	; (8009c44 <HAL_GPIO_Init+0x3a8>)
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8009bc4:	4b1f      	ldr	r3, [pc, #124]	; (8009c44 <HAL_GPIO_Init+0x3a8>)
 8009bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	43db      	mvns	r3, r3
 8009bd0:	69fa      	ldr	r2, [r7, #28]
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d003      	beq.n	8009bea <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8009be2:	69fa      	ldr	r2, [r7, #28]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8009bea:	4a16      	ldr	r2, [pc, #88]	; (8009c44 <HAL_GPIO_Init+0x3a8>)
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8009bf2:	4b14      	ldr	r3, [pc, #80]	; (8009c44 <HAL_GPIO_Init+0x3a8>)
 8009bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bf8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	43db      	mvns	r3, r3
 8009bfe:	69fa      	ldr	r2, [r7, #28]
 8009c00:	4013      	ands	r3, r2
 8009c02:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d003      	beq.n	8009c18 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8009c10:	69fa      	ldr	r2, [r7, #28]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8009c18:	4a0a      	ldr	r2, [pc, #40]	; (8009c44 <HAL_GPIO_Init+0x3a8>)
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	3301      	adds	r3, #1
 8009c24:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f47f ae3d 	bne.w	80098b0 <HAL_GPIO_Init+0x14>
  }
}
 8009c36:	bf00      	nop
 8009c38:	bf00      	nop
 8009c3a:	3724      	adds	r7, #36	; 0x24
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	46022000 	.word	0x46022000
 8009c48:	002f7f7f 	.word	0x002f7f7f

08009c4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b089      	sub	sp, #36	; 0x24
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8009c56:	2300      	movs	r3, #0
 8009c58:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8009c5e:	e0bc      	b.n	8009dda <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8009c60:	2201      	movs	r2, #1
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	fa02 f303 	lsl.w	r3, r2, r3
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f000 80ad 	beq.w	8009dd4 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a5e      	ldr	r2, [pc, #376]	; (8009df8 <HAL_GPIO_DeInit+0x1ac>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d115      	bne.n	8009cae <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8009c82:	4a5e      	ldr	r2, [pc, #376]	; (8009dfc <HAL_GPIO_DeInit+0x1b0>)
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c8a:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8009c8c:	4a5b      	ldr	r2, [pc, #364]	; (8009dfc <HAL_GPIO_DeInit+0x1b0>)
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	00db      	lsls	r3, r3, #3
 8009c92:	4413      	add	r3, r2
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8009c98:	4b57      	ldr	r3, [pc, #348]	; (8009df8 <HAL_GPIO_DeInit+0x1ac>)
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ca4:	43db      	mvns	r3, r3
 8009ca6:	4954      	ldr	r1, [pc, #336]	; (8009df8 <HAL_GPIO_DeInit+0x1ac>)
 8009ca8:	4013      	ands	r3, r2
 8009caa:	600b      	str	r3, [r1, #0]
 8009cac:	e053      	b.n	8009d56 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8009cae:	4a54      	ldr	r2, [pc, #336]	; (8009e00 <HAL_GPIO_DeInit+0x1b4>)
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	089b      	lsrs	r3, r3, #2
 8009cb4:	3318      	adds	r3, #24
 8009cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cba:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	f003 0303 	and.w	r3, r3, #3
 8009cc2:	00db      	lsls	r3, r3, #3
 8009cc4:	220f      	movs	r2, #15
 8009cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	4013      	ands	r3, r2
 8009cce:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	0a9a      	lsrs	r2, r3, #10
 8009cd4:	4b4b      	ldr	r3, [pc, #300]	; (8009e04 <HAL_GPIO_DeInit+0x1b8>)
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	69ba      	ldr	r2, [r7, #24]
 8009cda:	f002 0203 	and.w	r2, r2, #3
 8009cde:	00d2      	lsls	r2, r2, #3
 8009ce0:	4093      	lsls	r3, r2
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d136      	bne.n	8009d56 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8009ce8:	4b45      	ldr	r3, [pc, #276]	; (8009e00 <HAL_GPIO_DeInit+0x1b4>)
 8009cea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	43db      	mvns	r3, r3
 8009cf2:	4943      	ldr	r1, [pc, #268]	; (8009e00 <HAL_GPIO_DeInit+0x1b4>)
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8009cfa:	4b41      	ldr	r3, [pc, #260]	; (8009e00 <HAL_GPIO_DeInit+0x1b4>)
 8009cfc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	43db      	mvns	r3, r3
 8009d04:	493e      	ldr	r1, [pc, #248]	; (8009e00 <HAL_GPIO_DeInit+0x1b4>)
 8009d06:	4013      	ands	r3, r2
 8009d08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8009d0c:	4b3c      	ldr	r3, [pc, #240]	; (8009e00 <HAL_GPIO_DeInit+0x1b4>)
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	43db      	mvns	r3, r3
 8009d14:	493a      	ldr	r1, [pc, #232]	; (8009e00 <HAL_GPIO_DeInit+0x1b4>)
 8009d16:	4013      	ands	r3, r2
 8009d18:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8009d1a:	4b39      	ldr	r3, [pc, #228]	; (8009e00 <HAL_GPIO_DeInit+0x1b4>)
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	43db      	mvns	r3, r3
 8009d22:	4937      	ldr	r1, [pc, #220]	; (8009e00 <HAL_GPIO_DeInit+0x1b4>)
 8009d24:	4013      	ands	r3, r2
 8009d26:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	f003 0303 	and.w	r3, r3, #3
 8009d2e:	00db      	lsls	r3, r3, #3
 8009d30:	220f      	movs	r2, #15
 8009d32:	fa02 f303 	lsl.w	r3, r2, r3
 8009d36:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8009d38:	4a31      	ldr	r2, [pc, #196]	; (8009e00 <HAL_GPIO_DeInit+0x1b4>)
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	089b      	lsrs	r3, r3, #2
 8009d3e:	3318      	adds	r3, #24
 8009d40:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	43da      	mvns	r2, r3
 8009d48:	482d      	ldr	r0, [pc, #180]	; (8009e00 <HAL_GPIO_DeInit+0x1b4>)
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	089b      	lsrs	r3, r3, #2
 8009d4e:	400a      	ands	r2, r1
 8009d50:	3318      	adds	r3, #24
 8009d52:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	005b      	lsls	r3, r3, #1
 8009d5e:	2103      	movs	r1, #3
 8009d60:	fa01 f303 	lsl.w	r3, r1, r3
 8009d64:	431a      	orrs	r2, r3
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	08da      	lsrs	r2, r3, #3
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	3208      	adds	r2, #8
 8009d72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	f003 0307 	and.w	r3, r3, #7
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	220f      	movs	r2, #15
 8009d80:	fa02 f303 	lsl.w	r3, r2, r3
 8009d84:	43db      	mvns	r3, r3
 8009d86:	69fa      	ldr	r2, [r7, #28]
 8009d88:	08d2      	lsrs	r2, r2, #3
 8009d8a:	4019      	ands	r1, r3
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	3208      	adds	r2, #8
 8009d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	689a      	ldr	r2, [r3, #8]
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	005b      	lsls	r3, r3, #1
 8009d9c:	2103      	movs	r1, #3
 8009d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009da2:	43db      	mvns	r3, r3
 8009da4:	401a      	ands	r2, r3
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	685a      	ldr	r2, [r3, #4]
 8009dae:	2101      	movs	r1, #1
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	fa01 f303 	lsl.w	r3, r1, r3
 8009db6:	43db      	mvns	r3, r3
 8009db8:	401a      	ands	r2, r3
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	68da      	ldr	r2, [r3, #12]
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	005b      	lsls	r3, r3, #1
 8009dc6:	2103      	movs	r1, #3
 8009dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009dcc:	43db      	mvns	r3, r3
 8009dce:	401a      	ands	r2, r3
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	fa22 f303 	lsr.w	r3, r2, r3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f47f af3c 	bne.w	8009c60 <HAL_GPIO_DeInit+0x14>
  }
}
 8009de8:	bf00      	nop
 8009dea:	bf00      	nop
 8009dec:	3724      	adds	r7, #36	; 0x24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	46020000 	.word	0x46020000
 8009dfc:	0802a83c 	.word	0x0802a83c
 8009e00:	46022000 	.word	0x46022000
 8009e04:	002f7f7f 	.word	0x002f7f7f

08009e08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	460b      	mov	r3, r1
 8009e12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	691a      	ldr	r2, [r3, #16]
 8009e18:	887b      	ldrh	r3, [r7, #2]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d002      	beq.n	8009e26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009e20:	2301      	movs	r3, #1
 8009e22:	73fb      	strb	r3, [r7, #15]
 8009e24:	e001      	b.n	8009e2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009e26:	2300      	movs	r3, #0
 8009e28:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8009e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3714      	adds	r7, #20
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	460b      	mov	r3, r1
 8009e42:	807b      	strh	r3, [r7, #2]
 8009e44:	4613      	mov	r3, r2
 8009e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e48:	787b      	ldrb	r3, [r7, #1]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d003      	beq.n	8009e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009e4e:	887a      	ldrh	r2, [r7, #2]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8009e54:	e002      	b.n	8009e5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8009e56:	887a      	ldrh	r2, [r7, #2]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009e5c:	bf00      	nop
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	460b      	mov	r3, r1
 8009e72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	695b      	ldr	r3, [r3, #20]
 8009e78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009e7a:	887a      	ldrh	r2, [r7, #2]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	4013      	ands	r3, r2
 8009e80:	041a      	lsls	r2, r3, #16
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	43d9      	mvns	r1, r3
 8009e86:	887b      	ldrh	r3, [r7, #2]
 8009e88:	400b      	ands	r3, r1
 8009e8a:	431a      	orrs	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	619a      	str	r2, [r3, #24]
}
 8009e90:	bf00      	nop
 8009e92:	3714      	adds	r7, #20
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <HAL_GPIO_EnableHighSPeedLowVoltage>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_EnableHighSPeedLowVoltage(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b08b      	sub	sp, #44	; 0x2c
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	807b      	strh	r3, [r7, #2]
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8009eb0:	e03c      	b.n	8009f2c <HAL_GPIO_EnableHighSPeedLowVoltage+0x90>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 8009eb2:	887a      	ldrh	r2, [r7, #2]
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d02f      	beq.n	8009f26 <HAL_GPIO_EnableHighSPeedLowVoltage+0x8a>
    {
      /* In case of LPGPIO Port */
      if (GPIOx == LPGPIO1)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a1f      	ldr	r2, [pc, #124]	; (8009f48 <HAL_GPIO_EnableHighSPeedLowVoltage+0xac>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d120      	bne.n	8009f10 <HAL_GPIO_EnableHighSPeedLowVoltage+0x74>
      {
        /* Get GPIO pin position */
        position = POSITION_VAL(GPIO_Pin);
 8009ece:	887b      	ldrh	r3, [r7, #2]
 8009ed0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	fa93 f3a3 	rbit	r3, r3
 8009ed8:	60fb      	str	r3, [r7, #12]
  return result;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d101      	bne.n	8009ee8 <HAL_GPIO_EnableHighSPeedLowVoltage+0x4c>
    return 32U;
 8009ee4:	2320      	movs	r3, #32
 8009ee6:	e003      	b.n	8009ef0 <HAL_GPIO_EnableHighSPeedLowVoltage+0x54>
  return __builtin_clz(value);
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	fab3 f383 	clz	r3, r3
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	623b      	str	r3, [r7, #32]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8009ef2:	4a16      	ldr	r2, [pc, #88]	; (8009f4c <HAL_GPIO_EnableHighSPeedLowVoltage+0xb0>)
 8009ef4:	6a3b      	ldr	r3, [r7, #32]
 8009ef6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009efa:	61fb      	str	r3, [r7, #28]
        pin_position = (1UL << (LPGPIO_Map[position].Pin_Pos));
 8009efc:	4a13      	ldr	r2, [pc, #76]	; (8009f4c <HAL_GPIO_EnableHighSPeedLowVoltage+0xb0>)
 8009efe:	6a3b      	ldr	r3, [r7, #32]
 8009f00:	00db      	lsls	r3, r3, #3
 8009f02:	4413      	add	r3, r2
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	fa02 f303 	lsl.w	r3, r2, r3
 8009f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f0e:	e004      	b.n	8009f1a <HAL_GPIO_EnableHighSPeedLowVoltage+0x7e>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Save GPIO pin pos */
        pin_position = (1UL << position);
 8009f10:	2201      	movs	r2, #1
 8009f12:	6a3b      	ldr	r3, [r7, #32]
 8009f14:	fa02 f303 	lsl.w	r3, r2, r3
 8009f18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      /* Set HSLVR gpio pin */
      SET_BIT(p_gpio->HSLVR, pin_position);
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	431a      	orrs	r2, r3
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    position++;
 8009f26:	6a3b      	ldr	r3, [r7, #32]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	623b      	str	r3, [r7, #32]
  while ((GPIO_Pin >> position) != 0U)
 8009f2c:	887a      	ldrh	r2, [r7, #2]
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	fa42 f303 	asr.w	r3, r2, r3
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1bc      	bne.n	8009eb2 <HAL_GPIO_EnableHighSPeedLowVoltage+0x16>
  }
}
 8009f38:	bf00      	nop
 8009f3a:	bf00      	nop
 8009f3c:	372c      	adds	r7, #44	; 0x2c
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	46020000 	.word	0x46020000
 8009f4c:	0802a83c 	.word	0x0802a83c

08009f50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	4603      	mov	r3, r0
 8009f58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8009f5a:	4b0f      	ldr	r3, [pc, #60]	; (8009f98 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009f5c:	68da      	ldr	r2, [r3, #12]
 8009f5e:	88fb      	ldrh	r3, [r7, #6]
 8009f60:	4013      	ands	r3, r2
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d006      	beq.n	8009f74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8009f66:	4a0c      	ldr	r2, [pc, #48]	; (8009f98 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009f68:	88fb      	ldrh	r3, [r7, #6]
 8009f6a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8009f6c:	88fb      	ldrh	r3, [r7, #6]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 f814 	bl	8009f9c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8009f74:	4b08      	ldr	r3, [pc, #32]	; (8009f98 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009f76:	691a      	ldr	r2, [r3, #16]
 8009f78:	88fb      	ldrh	r3, [r7, #6]
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d006      	beq.n	8009f8e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8009f80:	4a05      	ldr	r2, [pc, #20]	; (8009f98 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009f82:	88fb      	ldrh	r3, [r7, #6]
 8009f84:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8009f86:	88fb      	ldrh	r3, [r7, #6]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7f7 ff1b 	bl	8001dc4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8009f8e:	bf00      	nop
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	46022000 	.word	0x46022000

08009f9c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8009fa6:	bf00      	nop
 8009fa8:	370c      	adds	r7, #12
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b082      	sub	sp, #8
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d101      	bne.n	8009fc4 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e01c      	b.n	8009ffe <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	795b      	ldrb	r3, [r3, #5]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d105      	bne.n	8009fd8 <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f7f7 fb3d 	bl	800164c <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	791b      	ldrb	r3, [r3, #4]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d101      	bne.n	8009fe4 <HAL_GPU2D_Init+0x32>
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	e00c      	b.n	8009ffe <HAL_GPU2D_Init+0x4c>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <HAL_GPU2D_ReadRegister>:
  *                   the configuration information for the GPU2D.
  * @param  offset    The register offset from GPU2D base address to read.
  * @retval Register value
  */
uint32_t HAL_GPU2D_ReadRegister(GPU2D_HandleTypeDef *hgpu2d, uint32_t offset)
{
 800a006:	b480      	push	{r7}
 800a008:	b085      	sub	sp, #20
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	6039      	str	r1, [r7, #0]
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
  assert_param(IS_GPU2D_OFFSET(offset));

  /* No locking is required since reading a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  value = GPU2D_ReadReg(hgpu2d->Instance, offset);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	4413      	add	r3, r2
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	60fb      	str	r3, [r7, #12]

  return value;
 800a01c:	68fb      	ldr	r3, [r7, #12]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3714      	adds	r7, #20
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <HAL_GPU2D_WriteRegister>:
  * @param  offset    The register offset from GPU2D base address to write.
  * @param  value     The value to be written to provided register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_WriteRegister(GPU2D_HandleTypeDef *hgpu2d, uint32_t offset, uint32_t value)
{
 800a02a:	b480      	push	{r7}
 800a02c:	b085      	sub	sp, #20
 800a02e:	af00      	add	r7, sp, #0
 800a030:	60f8      	str	r0, [r7, #12]
 800a032:	60b9      	str	r1, [r7, #8]
 800a034:	607a      	str	r2, [r7, #4]
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
  assert_param(IS_GPU2D_OFFSET(offset));

  /* No locking is required since writing a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  GPU2D_WriteReg(hgpu2d->Instance, offset, value);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	4413      	add	r3, r2
 800a03e:	461a      	mov	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b086      	sub	sp, #24
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	33f8      	adds	r3, #248	; 0xf8
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d013      	beq.n	800a096 <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	33f8      	adds	r3, #248	; 0xf8
 800a074:	613b      	str	r3, [r7, #16]
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f023 0201 	bic.w	r2, r3, #1
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 800a08e:	68f9      	ldr	r1, [r7, #12]
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f7f8 fd21 	bl	8002ad8 <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 800a096:	bf00      	nop
 800a098:	3718      	adds	r7, #24
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b082      	sub	sp, #8
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f804 	bl	800a0b4 <HAL_GPU2D_ErrorCallback>
}
 800a0ac:	bf00      	nop
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 800a0bc:	e7fe      	b.n	800a0bc <HAL_GPU2D_ErrorCallback+0x8>

0800a0be <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d101      	bne.n	800a0d0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e081      	b.n	800a1d4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d106      	bne.n	800a0ea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 f8a8 	bl	800a23a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2224      	movs	r2, #36	; 0x24
 800a0ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f022 0201 	bic.w	r2, r2, #1
 800a100:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a10e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	689a      	ldr	r2, [r3, #8]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a11e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d107      	bne.n	800a138 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	689a      	ldr	r2, [r3, #8]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a134:	609a      	str	r2, [r3, #8]
 800a136:	e006      	b.n	800a146 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	689a      	ldr	r2, [r3, #8]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a144:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d104      	bne.n	800a158 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a156:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	6812      	ldr	r2, [r2, #0]
 800a162:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a16a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68da      	ldr	r2, [r3, #12]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a17a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	691a      	ldr	r2, [r3, #16]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	695b      	ldr	r3, [r3, #20]
 800a184:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	430a      	orrs	r2, r1
 800a194:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	69d9      	ldr	r1, [r3, #28]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a1a      	ldr	r2, [r3, #32]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	430a      	orrs	r2, r1
 800a1a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f042 0201 	orr.w	r2, r2, #1
 800a1b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2220      	movs	r2, #32
 800a1c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e021      	b.n	800a232 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2224      	movs	r2, #36	; 0x24
 800a1f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f022 0201 	bic.w	r2, r2, #1
 800a204:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f821 	bl	800a24e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a23a:	b480      	push	{r7}
 800a23c:	b083      	sub	sp, #12
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800a242:	bf00      	nop
 800a244:	370c      	adds	r7, #12
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a24e:	b480      	push	{r7}
 800a250:	b083      	sub	sp, #12
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800a256:	bf00      	nop
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
	...

0800a264 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b088      	sub	sp, #32
 800a268:	af02      	add	r7, sp, #8
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	607a      	str	r2, [r7, #4]
 800a26e:	461a      	mov	r2, r3
 800a270:	460b      	mov	r3, r1
 800a272:	817b      	strh	r3, [r7, #10]
 800a274:	4613      	mov	r3, r2
 800a276:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b20      	cmp	r3, #32
 800a282:	f040 80db 	bne.w	800a43c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d101      	bne.n	800a294 <HAL_I2C_Master_Receive+0x30>
 800a290:	2302      	movs	r3, #2
 800a292:	e0d4      	b.n	800a43e <HAL_I2C_Master_Receive+0x1da>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a29c:	f7fd f86e 	bl	800737c <HAL_GetTick>
 800a2a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	2319      	movs	r3, #25
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f000 fbe2 	bl	800aa78 <I2C_WaitOnFlagUntilTimeout>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d001      	beq.n	800a2be <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e0bf      	b.n	800a43e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2222      	movs	r2, #34	; 0x22
 800a2c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2210      	movs	r2, #16
 800a2ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	893a      	ldrh	r2, [r7, #8]
 800a2de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	2bff      	cmp	r3, #255	; 0xff
 800a2ee:	d90e      	bls.n	800a30e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	22ff      	movs	r2, #255	; 0xff
 800a2f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	8979      	ldrh	r1, [r7, #10]
 800a2fe:	4b52      	ldr	r3, [pc, #328]	; (800a448 <HAL_I2C_Master_Receive+0x1e4>)
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f000 fdf2 	bl	800aef0 <I2C_TransferConfig>
 800a30c:	e06d      	b.n	800a3ea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a312:	b29a      	uxth	r2, r3
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	8979      	ldrh	r1, [r7, #10]
 800a320:	4b49      	ldr	r3, [pc, #292]	; (800a448 <HAL_I2C_Master_Receive+0x1e4>)
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f000 fde1 	bl	800aef0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800a32e:	e05c      	b.n	800a3ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a330:	697a      	ldr	r2, [r7, #20]
 800a332:	6a39      	ldr	r1, [r7, #32]
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f000 fc79 	bl	800ac2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d001      	beq.n	800a344 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	e07c      	b.n	800a43e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34e:	b2d2      	uxtb	r2, r2
 800a350:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a356:	1c5a      	adds	r2, r3, #1
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a360:	3b01      	subs	r3, #1
 800a362:	b29a      	uxth	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	3b01      	subs	r3, #1
 800a370:	b29a      	uxth	r2, r3
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d034      	beq.n	800a3ea <HAL_I2C_Master_Receive+0x186>
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a384:	2b00      	cmp	r3, #0
 800a386:	d130      	bne.n	800a3ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	6a3b      	ldr	r3, [r7, #32]
 800a38e:	2200      	movs	r2, #0
 800a390:	2180      	movs	r1, #128	; 0x80
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f000 fb70 	bl	800aa78 <I2C_WaitOnFlagUntilTimeout>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d001      	beq.n	800a3a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e04d      	b.n	800a43e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	2bff      	cmp	r3, #255	; 0xff
 800a3aa:	d90e      	bls.n	800a3ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	22ff      	movs	r2, #255	; 0xff
 800a3b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	8979      	ldrh	r1, [r7, #10]
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f000 fd94 	bl	800aef0 <I2C_TransferConfig>
 800a3c8:	e00f      	b.n	800a3ea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	8979      	ldrh	r1, [r7, #10]
 800a3dc:	2300      	movs	r3, #0
 800a3de:	9300      	str	r3, [sp, #0]
 800a3e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f000 fd83 	bl	800aef0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d19d      	bne.n	800a330 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3f4:	697a      	ldr	r2, [r7, #20]
 800a3f6:	6a39      	ldr	r1, [r7, #32]
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 fbd3 	bl	800aba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e01a      	b.n	800a43e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2220      	movs	r2, #32
 800a40e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6859      	ldr	r1, [r3, #4]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	4b0c      	ldr	r3, [pc, #48]	; (800a44c <HAL_I2C_Master_Receive+0x1e8>)
 800a41c:	400b      	ands	r3, r1
 800a41e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2220      	movs	r2, #32
 800a424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a438:	2300      	movs	r3, #0
 800a43a:	e000      	b.n	800a43e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a43c:	2302      	movs	r3, #2
  }
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3718      	adds	r7, #24
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	80002400 	.word	0x80002400
 800a44c:	fe00e800 	.word	0xfe00e800

0800a450 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b088      	sub	sp, #32
 800a454:	af02      	add	r7, sp, #8
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	4608      	mov	r0, r1
 800a45a:	4611      	mov	r1, r2
 800a45c:	461a      	mov	r2, r3
 800a45e:	4603      	mov	r3, r0
 800a460:	817b      	strh	r3, [r7, #10]
 800a462:	460b      	mov	r3, r1
 800a464:	813b      	strh	r3, [r7, #8]
 800a466:	4613      	mov	r3, r2
 800a468:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b20      	cmp	r3, #32
 800a474:	f040 80f9 	bne.w	800a66a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a478:	6a3b      	ldr	r3, [r7, #32]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d002      	beq.n	800a484 <HAL_I2C_Mem_Write+0x34>
 800a47e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a480:	2b00      	cmp	r3, #0
 800a482:	d105      	bne.n	800a490 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a48a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e0ed      	b.n	800a66c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a496:	2b01      	cmp	r3, #1
 800a498:	d101      	bne.n	800a49e <HAL_I2C_Mem_Write+0x4e>
 800a49a:	2302      	movs	r3, #2
 800a49c:	e0e6      	b.n	800a66c <HAL_I2C_Mem_Write+0x21c>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a4a6:	f7fc ff69 	bl	800737c <HAL_GetTick>
 800a4aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	2319      	movs	r3, #25
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f000 fadd 	bl	800aa78 <I2C_WaitOnFlagUntilTimeout>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e0d1      	b.n	800a66c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2221      	movs	r2, #33	; 0x21
 800a4cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2240      	movs	r2, #64	; 0x40
 800a4d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6a3a      	ldr	r2, [r7, #32]
 800a4e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a4e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a4f0:	88f8      	ldrh	r0, [r7, #6]
 800a4f2:	893a      	ldrh	r2, [r7, #8]
 800a4f4:	8979      	ldrh	r1, [r7, #10]
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	4603      	mov	r3, r0
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f000 f9ed 	bl	800a8e0 <I2C_RequestMemoryWrite>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d005      	beq.n	800a518 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e0a9      	b.n	800a66c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	2bff      	cmp	r3, #255	; 0xff
 800a520:	d90e      	bls.n	800a540 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	22ff      	movs	r2, #255	; 0xff
 800a526:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	8979      	ldrh	r1, [r7, #10]
 800a530:	2300      	movs	r3, #0
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f000 fcd9 	bl	800aef0 <I2C_TransferConfig>
 800a53e:	e00f      	b.n	800a560 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a544:	b29a      	uxth	r2, r3
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a54e:	b2da      	uxtb	r2, r3
 800a550:	8979      	ldrh	r1, [r7, #10]
 800a552:	2300      	movs	r3, #0
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f000 fcc8 	bl	800aef0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a560:	697a      	ldr	r2, [r7, #20]
 800a562:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 fad6 	bl	800ab16 <I2C_WaitOnTXISFlagUntilTimeout>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d001      	beq.n	800a574 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e07b      	b.n	800a66c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a578:	781a      	ldrb	r2, [r3, #0]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a584:	1c5a      	adds	r2, r3, #1
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a58e:	b29b      	uxth	r3, r3
 800a590:	3b01      	subs	r3, #1
 800a592:	b29a      	uxth	r2, r3
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a59c:	3b01      	subs	r3, #1
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d034      	beq.n	800a618 <HAL_I2C_Mem_Write+0x1c8>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d130      	bne.n	800a618 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	9300      	str	r3, [sp, #0]
 800a5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5bc:	2200      	movs	r2, #0
 800a5be:	2180      	movs	r1, #128	; 0x80
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f000 fa59 	bl	800aa78 <I2C_WaitOnFlagUntilTimeout>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e04d      	b.n	800a66c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	2bff      	cmp	r3, #255	; 0xff
 800a5d8:	d90e      	bls.n	800a5f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	22ff      	movs	r2, #255	; 0xff
 800a5de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5e4:	b2da      	uxtb	r2, r3
 800a5e6:	8979      	ldrh	r1, [r7, #10]
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f000 fc7d 	bl	800aef0 <I2C_TransferConfig>
 800a5f6:	e00f      	b.n	800a618 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a606:	b2da      	uxtb	r2, r3
 800a608:	8979      	ldrh	r1, [r7, #10]
 800a60a:	2300      	movs	r3, #0
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f000 fc6c 	bl	800aef0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d19e      	bne.n	800a560 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f000 fabc 	bl	800aba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d001      	beq.n	800a636 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	e01a      	b.n	800a66c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2220      	movs	r2, #32
 800a63c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	6859      	ldr	r1, [r3, #4]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	4b0a      	ldr	r3, [pc, #40]	; (800a674 <HAL_I2C_Mem_Write+0x224>)
 800a64a:	400b      	ands	r3, r1
 800a64c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2220      	movs	r2, #32
 800a652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a666:	2300      	movs	r3, #0
 800a668:	e000      	b.n	800a66c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a66a:	2302      	movs	r3, #2
  }
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3718      	adds	r7, #24
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	fe00e800 	.word	0xfe00e800

0800a678 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b088      	sub	sp, #32
 800a67c:	af02      	add	r7, sp, #8
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	4608      	mov	r0, r1
 800a682:	4611      	mov	r1, r2
 800a684:	461a      	mov	r2, r3
 800a686:	4603      	mov	r3, r0
 800a688:	817b      	strh	r3, [r7, #10]
 800a68a:	460b      	mov	r3, r1
 800a68c:	813b      	strh	r3, [r7, #8]
 800a68e:	4613      	mov	r3, r2
 800a690:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	2b20      	cmp	r3, #32
 800a69c:	f040 80fd 	bne.w	800a89a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6a0:	6a3b      	ldr	r3, [r7, #32]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d002      	beq.n	800a6ac <HAL_I2C_Mem_Read+0x34>
 800a6a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d105      	bne.n	800a6b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e0f1      	b.n	800a89c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d101      	bne.n	800a6c6 <HAL_I2C_Mem_Read+0x4e>
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	e0ea      	b.n	800a89c <HAL_I2C_Mem_Read+0x224>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a6ce:	f7fc fe55 	bl	800737c <HAL_GetTick>
 800a6d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	9300      	str	r3, [sp, #0]
 800a6d8:	2319      	movs	r3, #25
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f000 f9c9 	bl	800aa78 <I2C_WaitOnFlagUntilTimeout>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d001      	beq.n	800a6f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e0d5      	b.n	800a89c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2222      	movs	r2, #34	; 0x22
 800a6f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2240      	movs	r2, #64	; 0x40
 800a6fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6a3a      	ldr	r2, [r7, #32]
 800a70a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a710:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a718:	88f8      	ldrh	r0, [r7, #6]
 800a71a:	893a      	ldrh	r2, [r7, #8]
 800a71c:	8979      	ldrh	r1, [r7, #10]
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	4603      	mov	r3, r0
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f000 f92d 	bl	800a988 <I2C_RequestMemoryRead>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d005      	beq.n	800a740 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2200      	movs	r2, #0
 800a738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	e0ad      	b.n	800a89c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a744:	b29b      	uxth	r3, r3
 800a746:	2bff      	cmp	r3, #255	; 0xff
 800a748:	d90e      	bls.n	800a768 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	22ff      	movs	r2, #255	; 0xff
 800a74e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a754:	b2da      	uxtb	r2, r3
 800a756:	8979      	ldrh	r1, [r7, #10]
 800a758:	4b52      	ldr	r3, [pc, #328]	; (800a8a4 <HAL_I2C_Mem_Read+0x22c>)
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f000 fbc5 	bl	800aef0 <I2C_TransferConfig>
 800a766:	e00f      	b.n	800a788 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a776:	b2da      	uxtb	r2, r3
 800a778:	8979      	ldrh	r1, [r7, #10]
 800a77a:	4b4a      	ldr	r3, [pc, #296]	; (800a8a4 <HAL_I2C_Mem_Read+0x22c>)
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f000 fbb4 	bl	800aef0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78e:	2200      	movs	r2, #0
 800a790:	2104      	movs	r1, #4
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f000 f970 	bl	800aa78 <I2C_WaitOnFlagUntilTimeout>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e07c      	b.n	800a89c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ac:	b2d2      	uxtb	r2, r2
 800a7ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b4:	1c5a      	adds	r2, r3, #1
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d034      	beq.n	800a848 <HAL_I2C_Mem_Read+0x1d0>
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d130      	bne.n	800a848 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	2180      	movs	r1, #128	; 0x80
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f000 f941 	bl	800aa78 <I2C_WaitOnFlagUntilTimeout>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e04d      	b.n	800a89c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a804:	b29b      	uxth	r3, r3
 800a806:	2bff      	cmp	r3, #255	; 0xff
 800a808:	d90e      	bls.n	800a828 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	22ff      	movs	r2, #255	; 0xff
 800a80e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a814:	b2da      	uxtb	r2, r3
 800a816:	8979      	ldrh	r1, [r7, #10]
 800a818:	2300      	movs	r3, #0
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f000 fb65 	bl	800aef0 <I2C_TransferConfig>
 800a826:	e00f      	b.n	800a848 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a836:	b2da      	uxtb	r2, r3
 800a838:	8979      	ldrh	r1, [r7, #10]
 800a83a:	2300      	movs	r3, #0
 800a83c:	9300      	str	r3, [sp, #0]
 800a83e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f000 fb54 	bl	800aef0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d19a      	bne.n	800a788 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f000 f9a4 	bl	800aba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d001      	beq.n	800a866 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e01a      	b.n	800a89c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2220      	movs	r2, #32
 800a86c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	6859      	ldr	r1, [r3, #4]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	4b0b      	ldr	r3, [pc, #44]	; (800a8a8 <HAL_I2C_Mem_Read+0x230>)
 800a87a:	400b      	ands	r3, r1
 800a87c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2220      	movs	r2, #32
 800a882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2200      	movs	r2, #0
 800a88a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a896:	2300      	movs	r3, #0
 800a898:	e000      	b.n	800a89c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a89a:	2302      	movs	r3, #2
  }
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3718      	adds	r7, #24
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	80002400 	.word	0x80002400
 800a8a8:	fe00e800 	.word	0xfe00e800

0800a8ac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8ba:	b2db      	uxtb	r3, r3
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b086      	sub	sp, #24
 800a8e4:	af02      	add	r7, sp, #8
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	4608      	mov	r0, r1
 800a8ea:	4611      	mov	r1, r2
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	817b      	strh	r3, [r7, #10]
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	813b      	strh	r3, [r7, #8]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a8fa:	88fb      	ldrh	r3, [r7, #6]
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	8979      	ldrh	r1, [r7, #10]
 800a900:	4b20      	ldr	r3, [pc, #128]	; (800a984 <I2C_RequestMemoryWrite+0xa4>)
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f000 faf1 	bl	800aef0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a90e:	69fa      	ldr	r2, [r7, #28]
 800a910:	69b9      	ldr	r1, [r7, #24]
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f000 f8ff 	bl	800ab16 <I2C_WaitOnTXISFlagUntilTimeout>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	e02c      	b.n	800a97c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a922:	88fb      	ldrh	r3, [r7, #6]
 800a924:	2b01      	cmp	r3, #1
 800a926:	d105      	bne.n	800a934 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a928:	893b      	ldrh	r3, [r7, #8]
 800a92a:	b2da      	uxtb	r2, r3
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	629a      	str	r2, [r3, #40]	; 0x28
 800a932:	e015      	b.n	800a960 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a934:	893b      	ldrh	r3, [r7, #8]
 800a936:	0a1b      	lsrs	r3, r3, #8
 800a938:	b29b      	uxth	r3, r3
 800a93a:	b2da      	uxtb	r2, r3
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a942:	69fa      	ldr	r2, [r7, #28]
 800a944:	69b9      	ldr	r1, [r7, #24]
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f000 f8e5 	bl	800ab16 <I2C_WaitOnTXISFlagUntilTimeout>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d001      	beq.n	800a956 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	e012      	b.n	800a97c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a956:	893b      	ldrh	r3, [r7, #8]
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	2200      	movs	r2, #0
 800a968:	2180      	movs	r1, #128	; 0x80
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f000 f884 	bl	800aa78 <I2C_WaitOnFlagUntilTimeout>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d001      	beq.n	800a97a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e000      	b.n	800a97c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	80002000 	.word	0x80002000

0800a988 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af02      	add	r7, sp, #8
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	4608      	mov	r0, r1
 800a992:	4611      	mov	r1, r2
 800a994:	461a      	mov	r2, r3
 800a996:	4603      	mov	r3, r0
 800a998:	817b      	strh	r3, [r7, #10]
 800a99a:	460b      	mov	r3, r1
 800a99c:	813b      	strh	r3, [r7, #8]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a9a2:	88fb      	ldrh	r3, [r7, #6]
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	8979      	ldrh	r1, [r7, #10]
 800a9a8:	4b20      	ldr	r3, [pc, #128]	; (800aa2c <I2C_RequestMemoryRead+0xa4>)
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f000 fa9e 	bl	800aef0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9b4:	69fa      	ldr	r2, [r7, #28]
 800a9b6:	69b9      	ldr	r1, [r7, #24]
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f000 f8ac 	bl	800ab16 <I2C_WaitOnTXISFlagUntilTimeout>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e02c      	b.n	800aa22 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a9c8:	88fb      	ldrh	r3, [r7, #6]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d105      	bne.n	800a9da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a9ce:	893b      	ldrh	r3, [r7, #8]
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	629a      	str	r2, [r3, #40]	; 0x28
 800a9d8:	e015      	b.n	800aa06 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a9da:	893b      	ldrh	r3, [r7, #8]
 800a9dc:	0a1b      	lsrs	r3, r3, #8
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9e8:	69fa      	ldr	r2, [r7, #28]
 800a9ea:	69b9      	ldr	r1, [r7, #24]
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f000 f892 	bl	800ab16 <I2C_WaitOnTXISFlagUntilTimeout>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e012      	b.n	800aa22 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a9fc:	893b      	ldrh	r3, [r7, #8]
 800a9fe:	b2da      	uxtb	r2, r3
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	9300      	str	r3, [sp, #0]
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	2140      	movs	r1, #64	; 0x40
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f000 f831 	bl	800aa78 <I2C_WaitOnFlagUntilTimeout>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d001      	beq.n	800aa20 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e000      	b.n	800aa22 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	80002000 	.word	0x80002000

0800aa30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	f003 0302 	and.w	r3, r3, #2
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d103      	bne.n	800aa4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	699b      	ldr	r3, [r3, #24]
 800aa54:	f003 0301 	and.w	r3, r3, #1
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d007      	beq.n	800aa6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	699a      	ldr	r2, [r3, #24]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f042 0201 	orr.w	r2, r2, #1
 800aa6a:	619a      	str	r2, [r3, #24]
  }
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	603b      	str	r3, [r7, #0]
 800aa84:	4613      	mov	r3, r2
 800aa86:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa88:	e031      	b.n	800aaee <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa90:	d02d      	beq.n	800aaee <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa92:	f7fc fc73 	bl	800737c <HAL_GetTick>
 800aa96:	4602      	mov	r2, r0
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d302      	bcc.n	800aaa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d122      	bne.n	800aaee <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	699a      	ldr	r2, [r3, #24]
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	4013      	ands	r3, r2
 800aab2:	68ba      	ldr	r2, [r7, #8]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	bf0c      	ite	eq
 800aab8:	2301      	moveq	r3, #1
 800aaba:	2300      	movne	r3, #0
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	461a      	mov	r2, r3
 800aac0:	79fb      	ldrb	r3, [r7, #7]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d113      	bne.n	800aaee <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaca:	f043 0220 	orr.w	r2, r3, #32
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2220      	movs	r2, #32
 800aad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	e00f      	b.n	800ab0e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	699a      	ldr	r2, [r3, #24]
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	68ba      	ldr	r2, [r7, #8]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	bf0c      	ite	eq
 800aafe:	2301      	moveq	r3, #1
 800ab00:	2300      	movne	r3, #0
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	461a      	mov	r2, r3
 800ab06:	79fb      	ldrb	r3, [r7, #7]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d0be      	beq.n	800aa8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	60f8      	str	r0, [r7, #12]
 800ab1e:	60b9      	str	r1, [r7, #8]
 800ab20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ab22:	e033      	b.n	800ab8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	68b9      	ldr	r1, [r7, #8]
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f000 f901 	bl	800ad30 <I2C_IsErrorOccurred>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d001      	beq.n	800ab38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	e031      	b.n	800ab9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3e:	d025      	beq.n	800ab8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab40:	f7fc fc1c 	bl	800737c <HAL_GetTick>
 800ab44:	4602      	mov	r2, r0
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	68ba      	ldr	r2, [r7, #8]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d302      	bcc.n	800ab56 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d11a      	bne.n	800ab8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	699b      	ldr	r3, [r3, #24]
 800ab5c:	f003 0302 	and.w	r3, r3, #2
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d013      	beq.n	800ab8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab68:	f043 0220 	orr.w	r2, r3, #32
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2220      	movs	r2, #32
 800ab74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	e007      	b.n	800ab9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	699b      	ldr	r3, [r3, #24]
 800ab92:	f003 0302 	and.w	r3, r3, #2
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	d1c4      	bne.n	800ab24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800abb0:	e02f      	b.n	800ac12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	68b9      	ldr	r1, [r7, #8]
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f000 f8ba 	bl	800ad30 <I2C_IsErrorOccurred>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	e02d      	b.n	800ac22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abc6:	f7fc fbd9 	bl	800737c <HAL_GetTick>
 800abca:	4602      	mov	r2, r0
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	1ad3      	subs	r3, r2, r3
 800abd0:	68ba      	ldr	r2, [r7, #8]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d302      	bcc.n	800abdc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d11a      	bne.n	800ac12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	699b      	ldr	r3, [r3, #24]
 800abe2:	f003 0320 	and.w	r3, r3, #32
 800abe6:	2b20      	cmp	r3, #32
 800abe8:	d013      	beq.n	800ac12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abee:	f043 0220 	orr.w	r2, r3, #32
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2220      	movs	r2, #32
 800abfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e007      	b.n	800ac22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	f003 0320 	and.w	r3, r3, #32
 800ac1c:	2b20      	cmp	r3, #32
 800ac1e:	d1c8      	bne.n	800abb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
	...

0800ac2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac38:	e06b      	b.n	800ad12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	68b9      	ldr	r1, [r7, #8]
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	f000 f876 	bl	800ad30 <I2C_IsErrorOccurred>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d001      	beq.n	800ac4e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e069      	b.n	800ad22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	699b      	ldr	r3, [r3, #24]
 800ac54:	f003 0320 	and.w	r3, r3, #32
 800ac58:	2b20      	cmp	r3, #32
 800ac5a:	d138      	bne.n	800acce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	f003 0304 	and.w	r3, r3, #4
 800ac66:	2b04      	cmp	r3, #4
 800ac68:	d105      	bne.n	800ac76 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d001      	beq.n	800ac76 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	e055      	b.n	800ad22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	f003 0310 	and.w	r3, r3, #16
 800ac80:	2b10      	cmp	r3, #16
 800ac82:	d107      	bne.n	800ac94 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2210      	movs	r2, #16
 800ac8a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2204      	movs	r2, #4
 800ac90:	645a      	str	r2, [r3, #68]	; 0x44
 800ac92:	e002      	b.n	800ac9a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6859      	ldr	r1, [r3, #4]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	4b1f      	ldr	r3, [pc, #124]	; (800ad2c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800acae:	400b      	ands	r3, r1
 800acb0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2220      	movs	r2, #32
 800acb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	e029      	b.n	800ad22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acce:	f7fc fb55 	bl	800737c <HAL_GetTick>
 800acd2:	4602      	mov	r2, r0
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	1ad3      	subs	r3, r2, r3
 800acd8:	68ba      	ldr	r2, [r7, #8]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d302      	bcc.n	800ace4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d116      	bne.n	800ad12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	f003 0304 	and.w	r3, r3, #4
 800acee:	2b04      	cmp	r3, #4
 800acf0:	d00f      	beq.n	800ad12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acf6:	f043 0220 	orr.w	r2, r3, #32
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2220      	movs	r2, #32
 800ad02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e007      	b.n	800ad22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	699b      	ldr	r3, [r3, #24]
 800ad18:	f003 0304 	and.w	r3, r3, #4
 800ad1c:	2b04      	cmp	r3, #4
 800ad1e:	d18c      	bne.n	800ac3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	fe00e800 	.word	0xfe00e800

0800ad30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b08a      	sub	sp, #40	; 0x28
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	f003 0310 	and.w	r3, r3, #16
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d068      	beq.n	800ae2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2210      	movs	r2, #16
 800ad62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ad64:	e049      	b.n	800adfa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad6c:	d045      	beq.n	800adfa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ad6e:	f7fc fb05 	bl	800737c <HAL_GetTick>
 800ad72:	4602      	mov	r2, r0
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	1ad3      	subs	r3, r2, r3
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d302      	bcc.n	800ad84 <I2C_IsErrorOccurred+0x54>
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d13a      	bne.n	800adfa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	699b      	ldr	r3, [r3, #24]
 800ad9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ada2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ada6:	d121      	bne.n	800adec <I2C_IsErrorOccurred+0xbc>
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adae:	d01d      	beq.n	800adec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800adb0:	7cfb      	ldrb	r3, [r7, #19]
 800adb2:	2b20      	cmp	r3, #32
 800adb4:	d01a      	beq.n	800adec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800adc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800adc6:	f7fc fad9 	bl	800737c <HAL_GetTick>
 800adca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800adcc:	e00e      	b.n	800adec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800adce:	f7fc fad5 	bl	800737c <HAL_GetTick>
 800add2:	4602      	mov	r2, r0
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	1ad3      	subs	r3, r2, r3
 800add8:	2b19      	cmp	r3, #25
 800adda:	d907      	bls.n	800adec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800addc:	6a3b      	ldr	r3, [r7, #32]
 800adde:	f043 0320 	orr.w	r3, r3, #32
 800ade2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800adea:	e006      	b.n	800adfa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	699b      	ldr	r3, [r3, #24]
 800adf2:	f003 0320 	and.w	r3, r3, #32
 800adf6:	2b20      	cmp	r3, #32
 800adf8:	d1e9      	bne.n	800adce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	699b      	ldr	r3, [r3, #24]
 800ae00:	f003 0320 	and.w	r3, r3, #32
 800ae04:	2b20      	cmp	r3, #32
 800ae06:	d003      	beq.n	800ae10 <I2C_IsErrorOccurred+0xe0>
 800ae08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d0aa      	beq.n	800ad66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ae10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d103      	bne.n	800ae20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2220      	movs	r2, #32
 800ae1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ae20:	6a3b      	ldr	r3, [r7, #32]
 800ae22:	f043 0304 	orr.w	r3, r3, #4
 800ae26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d00b      	beq.n	800ae58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ae40:	6a3b      	ldr	r3, [r7, #32]
 800ae42:	f043 0301 	orr.w	r3, r3, #1
 800ae46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00b      	beq.n	800ae7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ae62:	6a3b      	ldr	r3, [r7, #32]
 800ae64:	f043 0308 	orr.w	r3, r3, #8
 800ae68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ae74:	2301      	movs	r3, #1
 800ae76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00b      	beq.n	800ae9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ae84:	6a3b      	ldr	r3, [r7, #32]
 800ae86:	f043 0302 	orr.w	r3, r3, #2
 800ae8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800ae9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d01c      	beq.n	800aede <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	f7ff fdc3 	bl	800aa30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	6859      	ldr	r1, [r3, #4]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	4b0d      	ldr	r3, [pc, #52]	; (800aeec <I2C_IsErrorOccurred+0x1bc>)
 800aeb6:	400b      	ands	r3, r1
 800aeb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aebe:	6a3b      	ldr	r3, [r7, #32]
 800aec0:	431a      	orrs	r2, r3
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2220      	movs	r2, #32
 800aeca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800aede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3728      	adds	r7, #40	; 0x28
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	fe00e800 	.word	0xfe00e800

0800aef0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b087      	sub	sp, #28
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	607b      	str	r3, [r7, #4]
 800aefa:	460b      	mov	r3, r1
 800aefc:	817b      	strh	r3, [r7, #10]
 800aefe:	4613      	mov	r3, r2
 800af00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af02:	897b      	ldrh	r3, [r7, #10]
 800af04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800af08:	7a7b      	ldrb	r3, [r7, #9]
 800af0a:	041b      	lsls	r3, r3, #16
 800af0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af16:	6a3b      	ldr	r3, [r7, #32]
 800af18:	4313      	orrs	r3, r2
 800af1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	685a      	ldr	r2, [r3, #4]
 800af26:	6a3b      	ldr	r3, [r7, #32]
 800af28:	0d5b      	lsrs	r3, r3, #21
 800af2a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800af2e:	4b08      	ldr	r3, [pc, #32]	; (800af50 <I2C_TransferConfig+0x60>)
 800af30:	430b      	orrs	r3, r1
 800af32:	43db      	mvns	r3, r3
 800af34:	ea02 0103 	and.w	r1, r2, r3
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	697a      	ldr	r2, [r7, #20]
 800af3e:	430a      	orrs	r2, r1
 800af40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800af42:	bf00      	nop
 800af44:	371c      	adds	r7, #28
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	03ff63ff 	.word	0x03ff63ff

0800af54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af64:	b2db      	uxtb	r3, r3
 800af66:	2b20      	cmp	r3, #32
 800af68:	d138      	bne.n	800afdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af70:	2b01      	cmp	r3, #1
 800af72:	d101      	bne.n	800af78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800af74:	2302      	movs	r3, #2
 800af76:	e032      	b.n	800afde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2224      	movs	r2, #36	; 0x24
 800af84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f022 0201 	bic.w	r2, r2, #1
 800af96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800afa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	6819      	ldr	r1, [r3, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	430a      	orrs	r2, r1
 800afb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f042 0201 	orr.w	r2, r2, #1
 800afc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2220      	movs	r2, #32
 800afcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800afd8:	2300      	movs	r3, #0
 800afda:	e000      	b.n	800afde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800afdc:	2302      	movs	r3, #2
  }
}
 800afde:	4618      	mov	r0, r3
 800afe0:	370c      	adds	r7, #12
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr

0800afea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800afea:	b480      	push	{r7}
 800afec:	b085      	sub	sp, #20
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
 800aff2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800affa:	b2db      	uxtb	r3, r3
 800affc:	2b20      	cmp	r3, #32
 800affe:	d139      	bne.n	800b074 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b006:	2b01      	cmp	r3, #1
 800b008:	d101      	bne.n	800b00e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b00a:	2302      	movs	r3, #2
 800b00c:	e033      	b.n	800b076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2201      	movs	r2, #1
 800b012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2224      	movs	r2, #36	; 0x24
 800b01a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f022 0201 	bic.w	r2, r2, #1
 800b02c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b03c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	021b      	lsls	r3, r3, #8
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	4313      	orrs	r3, r2
 800b046:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f042 0201 	orr.w	r2, r2, #1
 800b05e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2220      	movs	r2, #32
 800b064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b070:	2300      	movs	r3, #0
 800b072:	e000      	b.n	800b076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b074:	2302      	movs	r3, #2
  }
}
 800b076:	4618      	mov	r0, r3
 800b078:	3714      	adds	r7, #20
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
	...

0800b084 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800b090:	4b0b      	ldr	r3, [pc, #44]	; (800b0c0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f003 0301 	and.w	r3, r3, #1
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800b09c:	2301      	movs	r3, #1
 800b09e:	73fb      	strb	r3, [r7, #15]
 800b0a0:	e007      	b.n	800b0b2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800b0a2:	4b07      	ldr	r3, [pc, #28]	; (800b0c0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f023 0204 	bic.w	r2, r3, #4
 800b0aa:	4905      	ldr	r1, [pc, #20]	; (800b0c0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	600b      	str	r3, [r1, #0]
  }

  return status;
 800b0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3714      	adds	r7, #20
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	40030400 	.word	0x40030400

0800b0c4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800b0c8:	4b05      	ldr	r3, [pc, #20]	; (800b0e0 <HAL_ICACHE_Enable+0x1c>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a04      	ldr	r2, [pc, #16]	; (800b0e0 <HAL_ICACHE_Enable+0x1c>)
 800b0ce:	f043 0301 	orr.w	r3, r3, #1
 800b0d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	40030400 	.word	0x40030400

0800b0e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d101      	bne.n	800b0f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e0bf      	b.n	800b276 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d106      	bne.n	800b110 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f7f6 fb16 	bl	800173c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2202      	movs	r2, #2
 800b114:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	699a      	ldr	r2, [r3, #24]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800b126:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	6999      	ldr	r1, [r3, #24]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	685a      	ldr	r2, [r3, #4]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b13c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	430a      	orrs	r2, r1
 800b14a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	6899      	ldr	r1, [r3, #8]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	4b4a      	ldr	r3, [pc, #296]	; (800b280 <HAL_LTDC_Init+0x19c>)
 800b158:	400b      	ands	r3, r1
 800b15a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	695b      	ldr	r3, [r3, #20]
 800b160:	041b      	lsls	r3, r3, #16
 800b162:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	6899      	ldr	r1, [r3, #8]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	699a      	ldr	r2, [r3, #24]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	431a      	orrs	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	430a      	orrs	r2, r1
 800b178:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	68d9      	ldr	r1, [r3, #12]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	4b3e      	ldr	r3, [pc, #248]	; (800b280 <HAL_LTDC_Init+0x19c>)
 800b186:	400b      	ands	r3, r1
 800b188:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	69db      	ldr	r3, [r3, #28]
 800b18e:	041b      	lsls	r3, r3, #16
 800b190:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68d9      	ldr	r1, [r3, #12]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6a1a      	ldr	r2, [r3, #32]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	431a      	orrs	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	430a      	orrs	r2, r1
 800b1a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6919      	ldr	r1, [r3, #16]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	4b33      	ldr	r3, [pc, #204]	; (800b280 <HAL_LTDC_Init+0x19c>)
 800b1b4:	400b      	ands	r3, r1
 800b1b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1bc:	041b      	lsls	r3, r3, #16
 800b1be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	6919      	ldr	r1, [r3, #16]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	431a      	orrs	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	430a      	orrs	r2, r1
 800b1d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	6959      	ldr	r1, [r3, #20]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	4b27      	ldr	r3, [pc, #156]	; (800b280 <HAL_LTDC_Init+0x19c>)
 800b1e2:	400b      	ands	r3, r1
 800b1e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ea:	041b      	lsls	r3, r3, #16
 800b1ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	6959      	ldr	r1, [r3, #20]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	431a      	orrs	r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	430a      	orrs	r2, r1
 800b202:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b20a:	021b      	lsls	r3, r3, #8
 800b20c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b214:	041b      	lsls	r3, r3, #16
 800b216:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800b226:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	4313      	orrs	r3, r2
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800b23a:	431a      	orrs	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	430a      	orrs	r2, r1
 800b242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f042 0206 	orr.w	r2, r2, #6
 800b252:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	699a      	ldr	r2, [r3, #24]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f042 0201 	orr.w	r2, r2, #1
 800b262:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2201      	movs	r2, #1
 800b270:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	f000f800 	.word	0xf000f800

0800b284 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b292:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b29a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f003 0304 	and.w	r3, r3, #4
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d023      	beq.n	800b2ee <HAL_LTDC_IRQHandler+0x6a>
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	f003 0304 	and.w	r3, r3, #4
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d01e      	beq.n	800b2ee <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f022 0204 	bic.w	r2, r2, #4
 800b2be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2204      	movs	r2, #4
 800b2c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b2ce:	f043 0201 	orr.w	r2, r3, #1
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2204      	movs	r2, #4
 800b2dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f86f 	bl	800b3cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f003 0302 	and.w	r3, r3, #2
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d023      	beq.n	800b340 <HAL_LTDC_IRQHandler+0xbc>
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	f003 0302 	and.w	r3, r3, #2
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d01e      	beq.n	800b340 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f022 0202 	bic.w	r2, r2, #2
 800b310:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2202      	movs	r2, #2
 800b318:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b320:	f043 0202 	orr.w	r2, r3, #2
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2204      	movs	r2, #4
 800b32e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 f846 	bl	800b3cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f003 0301 	and.w	r3, r3, #1
 800b346:	2b00      	cmp	r3, #0
 800b348:	d01b      	beq.n	800b382 <HAL_LTDC_IRQHandler+0xfe>
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	f003 0301 	and.w	r3, r3, #1
 800b350:	2b00      	cmp	r3, #0
 800b352:	d016      	beq.n	800b382 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f022 0201 	bic.w	r2, r2, #1
 800b362:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2201      	movs	r2, #1
 800b36a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f7f7 fb79 	bl	8002a74 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f003 0308 	and.w	r3, r3, #8
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d01b      	beq.n	800b3c4 <HAL_LTDC_IRQHandler+0x140>
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	f003 0308 	and.w	r3, r3, #8
 800b392:	2b00      	cmp	r3, #0
 800b394:	d016      	beq.n	800b3c4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f022 0208 	bic.w	r2, r2, #8
 800b3a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2208      	movs	r2, #8
 800b3ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 f80e 	bl	800b3e0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800b3c4:	bf00      	nop
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800b3d4:	bf00      	nop
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800b3e8:	bf00      	nop
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b3f4:	b5b0      	push	{r4, r5, r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b406:	2b01      	cmp	r3, #1
 800b408:	d101      	bne.n	800b40e <HAL_LTDC_ConfigLayer+0x1a>
 800b40a:	2302      	movs	r3, #2
 800b40c:	e02c      	b.n	800b468 <HAL_LTDC_ConfigLayer+0x74>
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2201      	movs	r2, #1
 800b412:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2202      	movs	r2, #2
 800b41a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2134      	movs	r1, #52	; 0x34
 800b424:	fb01 f303 	mul.w	r3, r1, r3
 800b428:	4413      	add	r3, r2
 800b42a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	4614      	mov	r4, r2
 800b432:	461d      	mov	r5, r3
 800b434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b43a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b43c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b43e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b440:	682b      	ldr	r3, [r5, #0]
 800b442:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	68b9      	ldr	r1, [r7, #8]
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f000 f87f 	bl	800b54c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2201      	movs	r2, #1
 800b454:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bdb0      	pop	{r4, r5, r7, pc}

0800b470 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b482:	2b01      	cmp	r3, #1
 800b484:	d101      	bne.n	800b48a <HAL_LTDC_SetAddress+0x1a>
 800b486:	2302      	movs	r3, #2
 800b488:	e024      	b.n	800b4d4 <HAL_LTDC_SetAddress+0x64>
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2201      	movs	r2, #1
 800b48e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2202      	movs	r2, #2
 800b496:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2234      	movs	r2, #52	; 0x34
 800b49e:	fb02 f303 	mul.w	r3, r2, r3
 800b4a2:	3338      	adds	r3, #56	; 0x38
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	6979      	ldr	r1, [r7, #20]
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f000 f849 	bl	800b54c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3718      	adds	r7, #24
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d101      	bne.n	800b4f4 <HAL_LTDC_ProgramLineEvent+0x18>
 800b4f0:	2302      	movs	r3, #2
 800b4f2:	e023      	b.n	800b53c <HAL_LTDC_ProgramLineEvent+0x60>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2202      	movs	r2, #2
 800b500:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f022 0201 	bic.w	r2, r2, #1
 800b512:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800b514:	4a0c      	ldr	r2, [pc, #48]	; (800b548 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f042 0201 	orr.w	r2, r2, #1
 800b528:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2201      	movs	r2, #1
 800b52e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b53a:	2300      	movs	r3, #0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr
 800b548:	40016800 	.word	0x40016800

0800b54c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b089      	sub	sp, #36	; 0x24
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	685a      	ldr	r2, [r3, #4]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	0c1b      	lsrs	r3, r3, #16
 800b564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b568:	4413      	add	r3, r2
 800b56a:	041b      	lsls	r3, r3, #16
 800b56c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	461a      	mov	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	01db      	lsls	r3, r3, #7
 800b578:	4413      	add	r3, r2
 800b57a:	3384      	adds	r3, #132	; 0x84
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	6812      	ldr	r2, [r2, #0]
 800b582:	4611      	mov	r1, r2
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	01d2      	lsls	r2, r2, #7
 800b588:	440a      	add	r2, r1
 800b58a:	3284      	adds	r2, #132	; 0x84
 800b58c:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800b590:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	0c1b      	lsrs	r3, r3, #16
 800b59e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b5a2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b5a4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	01db      	lsls	r3, r3, #7
 800b5b0:	440b      	add	r3, r1
 800b5b2:	3384      	adds	r3, #132	; 0x84
 800b5b4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b5ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	68da      	ldr	r2, [r3, #12]
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5ca:	4413      	add	r3, r2
 800b5cc:	041b      	lsls	r3, r3, #16
 800b5ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	01db      	lsls	r3, r3, #7
 800b5da:	4413      	add	r3, r2
 800b5dc:	3384      	adds	r3, #132	; 0x84
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	6812      	ldr	r2, [r2, #0]
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	01d2      	lsls	r2, r2, #7
 800b5ea:	440a      	add	r2, r1
 800b5ec:	3284      	adds	r2, #132	; 0x84
 800b5ee:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800b5f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	689a      	ldr	r2, [r3, #8]
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b602:	4413      	add	r3, r2
 800b604:	1c5a      	adds	r2, r3, #1
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4619      	mov	r1, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	01db      	lsls	r3, r3, #7
 800b610:	440b      	add	r3, r1
 800b612:	3384      	adds	r3, #132	; 0x84
 800b614:	4619      	mov	r1, r3
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	4313      	orrs	r3, r2
 800b61a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	461a      	mov	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	01db      	lsls	r3, r3, #7
 800b626:	4413      	add	r3, r2
 800b628:	3384      	adds	r3, #132	; 0x84
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	6812      	ldr	r2, [r2, #0]
 800b630:	4611      	mov	r1, r2
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	01d2      	lsls	r2, r2, #7
 800b636:	440a      	add	r2, r1
 800b638:	3284      	adds	r2, #132	; 0x84
 800b63a:	f023 0307 	bic.w	r3, r3, #7
 800b63e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	461a      	mov	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	01db      	lsls	r3, r3, #7
 800b64a:	4413      	add	r3, r2
 800b64c:	3384      	adds	r3, #132	; 0x84
 800b64e:	461a      	mov	r2, r3
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b65c:	021b      	lsls	r3, r3, #8
 800b65e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b666:	041b      	lsls	r3, r3, #16
 800b668:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	699b      	ldr	r3, [r3, #24]
 800b66e:	061b      	lsls	r3, r3, #24
 800b670:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	461a      	mov	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	01db      	lsls	r3, r3, #7
 800b67c:	4413      	add	r3, r2
 800b67e:	3384      	adds	r3, #132	; 0x84
 800b680:	699b      	ldr	r3, [r3, #24]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	461a      	mov	r2, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	01db      	lsls	r3, r3, #7
 800b68c:	4413      	add	r3, r2
 800b68e:	3384      	adds	r3, #132	; 0x84
 800b690:	461a      	mov	r2, r3
 800b692:	2300      	movs	r3, #0
 800b694:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b69c:	461a      	mov	r2, r3
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	431a      	orrs	r2, r3
 800b6a2:	69bb      	ldr	r3, [r7, #24]
 800b6a4:	431a      	orrs	r2, r3
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	01db      	lsls	r3, r3, #7
 800b6b0:	440b      	add	r3, r1
 800b6b2:	3384      	adds	r3, #132	; 0x84
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	01db      	lsls	r3, r3, #7
 800b6c6:	4413      	add	r3, r2
 800b6c8:	3384      	adds	r3, #132	; 0x84
 800b6ca:	695b      	ldr	r3, [r3, #20]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	6812      	ldr	r2, [r2, #0]
 800b6d0:	4611      	mov	r1, r2
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	01d2      	lsls	r2, r2, #7
 800b6d6:	440a      	add	r2, r1
 800b6d8:	3284      	adds	r2, #132	; 0x84
 800b6da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b6de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	01db      	lsls	r3, r3, #7
 800b6ea:	4413      	add	r3, r2
 800b6ec:	3384      	adds	r3, #132	; 0x84
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	695b      	ldr	r3, [r3, #20]
 800b6f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	01db      	lsls	r3, r3, #7
 800b700:	4413      	add	r3, r2
 800b702:	3384      	adds	r3, #132	; 0x84
 800b704:	69db      	ldr	r3, [r3, #28]
 800b706:	68fa      	ldr	r2, [r7, #12]
 800b708:	6812      	ldr	r2, [r2, #0]
 800b70a:	4611      	mov	r1, r2
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	01d2      	lsls	r2, r2, #7
 800b710:	440a      	add	r2, r1
 800b712:	3284      	adds	r2, #132	; 0x84
 800b714:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b718:	f023 0307 	bic.w	r3, r3, #7
 800b71c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	69da      	ldr	r2, [r3, #28]
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	68f9      	ldr	r1, [r7, #12]
 800b728:	6809      	ldr	r1, [r1, #0]
 800b72a:	4608      	mov	r0, r1
 800b72c:	6879      	ldr	r1, [r7, #4]
 800b72e:	01c9      	lsls	r1, r1, #7
 800b730:	4401      	add	r1, r0
 800b732:	3184      	adds	r1, #132	; 0x84
 800b734:	4313      	orrs	r3, r2
 800b736:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	461a      	mov	r2, r3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	01db      	lsls	r3, r3, #7
 800b742:	4413      	add	r3, r2
 800b744:	3384      	adds	r3, #132	; 0x84
 800b746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	461a      	mov	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	01db      	lsls	r3, r3, #7
 800b752:	4413      	add	r3, r2
 800b754:	3384      	adds	r3, #132	; 0x84
 800b756:	461a      	mov	r2, r3
 800b758:	2300      	movs	r3, #0
 800b75a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	461a      	mov	r2, r3
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	01db      	lsls	r3, r3, #7
 800b766:	4413      	add	r3, r2
 800b768:	3384      	adds	r3, #132	; 0x84
 800b76a:	461a      	mov	r2, r3
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b770:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	691b      	ldr	r3, [r3, #16]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d102      	bne.n	800b780 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800b77a:	2304      	movs	r3, #4
 800b77c:	61fb      	str	r3, [r7, #28]
 800b77e:	e01b      	b.n	800b7b8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	691b      	ldr	r3, [r3, #16]
 800b784:	2b01      	cmp	r3, #1
 800b786:	d102      	bne.n	800b78e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800b788:	2303      	movs	r3, #3
 800b78a:	61fb      	str	r3, [r7, #28]
 800b78c:	e014      	b.n	800b7b8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	2b04      	cmp	r3, #4
 800b794:	d00b      	beq.n	800b7ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d007      	beq.n	800b7ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b7a2:	2b03      	cmp	r3, #3
 800b7a4:	d003      	beq.n	800b7ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b7aa:	2b07      	cmp	r3, #7
 800b7ac:	d102      	bne.n	800b7b4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800b7ae:	2302      	movs	r3, #2
 800b7b0:	61fb      	str	r3, [r7, #28]
 800b7b2:	e001      	b.n	800b7b8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	461a      	mov	r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	01db      	lsls	r3, r3, #7
 800b7c2:	4413      	add	r3, r2
 800b7c4:	3384      	adds	r3, #132	; 0x84
 800b7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	6812      	ldr	r2, [r2, #0]
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	01d2      	lsls	r2, r2, #7
 800b7d2:	440a      	add	r2, r1
 800b7d4:	3284      	adds	r2, #132	; 0x84
 800b7d6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800b7da:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e0:	69fa      	ldr	r2, [r7, #28]
 800b7e2:	fb02 f303 	mul.w	r3, r2, r3
 800b7e6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	6859      	ldr	r1, [r3, #4]
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	1acb      	subs	r3, r1, r3
 800b7f2:	69f9      	ldr	r1, [r7, #28]
 800b7f4:	fb01 f303 	mul.w	r3, r1, r3
 800b7f8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800b7fa:	68f9      	ldr	r1, [r7, #12]
 800b7fc:	6809      	ldr	r1, [r1, #0]
 800b7fe:	4608      	mov	r0, r1
 800b800:	6879      	ldr	r1, [r7, #4]
 800b802:	01c9      	lsls	r1, r1, #7
 800b804:	4401      	add	r1, r0
 800b806:	3184      	adds	r1, #132	; 0x84
 800b808:	4313      	orrs	r3, r2
 800b80a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	461a      	mov	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	01db      	lsls	r3, r3, #7
 800b816:	4413      	add	r3, r2
 800b818:	3384      	adds	r3, #132	; 0x84
 800b81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	6812      	ldr	r2, [r2, #0]
 800b820:	4611      	mov	r1, r2
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	01d2      	lsls	r2, r2, #7
 800b826:	440a      	add	r2, r1
 800b828:	3284      	adds	r2, #132	; 0x84
 800b82a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b82e:	f023 0307 	bic.w	r3, r3, #7
 800b832:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	461a      	mov	r2, r3
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	01db      	lsls	r3, r3, #7
 800b83e:	4413      	add	r3, r2
 800b840:	3384      	adds	r3, #132	; 0x84
 800b842:	461a      	mov	r2, r3
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b848:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	461a      	mov	r2, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	01db      	lsls	r3, r3, #7
 800b854:	4413      	add	r3, r2
 800b856:	3384      	adds	r3, #132	; 0x84
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	6812      	ldr	r2, [r2, #0]
 800b85e:	4611      	mov	r1, r2
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	01d2      	lsls	r2, r2, #7
 800b864:	440a      	add	r2, r1
 800b866:	3284      	adds	r2, #132	; 0x84
 800b868:	f043 0301 	orr.w	r3, r3, #1
 800b86c:	6013      	str	r3, [r2, #0]
}
 800b86e:	bf00      	nop
 800b870:	3724      	adds	r7, #36	; 0x24
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr
	...

0800b87c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800b884:	4b39      	ldr	r3, [pc, #228]	; (800b96c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b888:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b88c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	429a      	cmp	r2, r3
 800b894:	d10b      	bne.n	800b8ae <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b89c:	d905      	bls.n	800b8aa <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800b89e:	4b33      	ldr	r3, [pc, #204]	; (800b96c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	4a32      	ldr	r2, [pc, #200]	; (800b96c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b8a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8a8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	e057      	b.n	800b95e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8b4:	d90a      	bls.n	800b8cc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800b8b6:	4b2d      	ldr	r3, [pc, #180]	; (800b96c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	4a2a      	ldr	r2, [pc, #168]	; (800b96c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b8c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8c8:	60d3      	str	r3, [r2, #12]
 800b8ca:	e007      	b.n	800b8dc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800b8cc:	4b27      	ldr	r3, [pc, #156]	; (800b96c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b8d4:	4925      	ldr	r1, [pc, #148]	; (800b96c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b8dc:	4b24      	ldr	r3, [pc, #144]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a24      	ldr	r2, [pc, #144]	; (800b974 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800b8e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8e6:	099b      	lsrs	r3, r3, #6
 800b8e8:	2232      	movs	r2, #50	; 0x32
 800b8ea:	fb02 f303 	mul.w	r3, r2, r3
 800b8ee:	4a21      	ldr	r2, [pc, #132]	; (800b974 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800b8f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b8f4:	099b      	lsrs	r3, r3, #6
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800b8fa:	e002      	b.n	800b902 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	3b01      	subs	r3, #1
 800b900:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800b902:	4b1a      	ldr	r3, [pc, #104]	; (800b96c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d102      	bne.n	800b914 <HAL_PWREx_ControlVoltageScaling+0x98>
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d1f3      	bne.n	800b8fc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d01b      	beq.n	800b952 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b91a:	4b15      	ldr	r3, [pc, #84]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4a15      	ldr	r2, [pc, #84]	; (800b974 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800b920:	fba2 2303 	umull	r2, r3, r2, r3
 800b924:	099b      	lsrs	r3, r3, #6
 800b926:	2232      	movs	r2, #50	; 0x32
 800b928:	fb02 f303 	mul.w	r3, r2, r3
 800b92c:	4a11      	ldr	r2, [pc, #68]	; (800b974 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800b92e:	fba2 2303 	umull	r2, r3, r2, r3
 800b932:	099b      	lsrs	r3, r3, #6
 800b934:	3301      	adds	r3, #1
 800b936:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800b938:	e002      	b.n	800b940 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	3b01      	subs	r3, #1
 800b93e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800b940:	4b0a      	ldr	r3, [pc, #40]	; (800b96c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d102      	bne.n	800b952 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1f3      	bne.n	800b93a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d101      	bne.n	800b95c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800b958:	2303      	movs	r3, #3
 800b95a:	e000      	b.n	800b95e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800b95c:	2300      	movs	r3, #0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3714      	adds	r7, #20
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	46020800 	.word	0x46020800
 800b970:	20000048 	.word	0x20000048
 800b974:	10624dd3 	.word	0x10624dd3

0800b978 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b978:	b480      	push	{r7}
 800b97a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800b97c:	4b04      	ldr	r3, [pc, #16]	; (800b990 <HAL_PWREx_GetVoltageRange+0x18>)
 800b97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800b984:	4618      	mov	r0, r3
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr
 800b98e:	bf00      	nop
 800b990:	46020800 	.word	0x46020800

0800b994 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b99c:	4b22      	ldr	r3, [pc, #136]	; (800ba28 <HAL_PWREx_ConfigSupply+0x94>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a22      	ldr	r2, [pc, #136]	; (800ba2c <HAL_PWREx_ConfigSupply+0x98>)
 800b9a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b9a6:	099b      	lsrs	r3, r3, #6
 800b9a8:	2232      	movs	r2, #50	; 0x32
 800b9aa:	fb02 f303 	mul.w	r3, r2, r3
 800b9ae:	4a1f      	ldr	r2, [pc, #124]	; (800ba2c <HAL_PWREx_ConfigSupply+0x98>)
 800b9b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b9b4:	099b      	lsrs	r3, r3, #6
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d113      	bne.n	800b9e8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800b9c0:	4b1b      	ldr	r3, [pc, #108]	; (800ba30 <HAL_PWREx_ConfigSupply+0x9c>)
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	4a1a      	ldr	r2, [pc, #104]	; (800ba30 <HAL_PWREx_ConfigSupply+0x9c>)
 800b9c6:	f023 0302 	bic.w	r3, r3, #2
 800b9ca:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800b9cc:	e002      	b.n	800b9d4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800b9d4:	4b16      	ldr	r3, [pc, #88]	; (800ba30 <HAL_PWREx_ConfigSupply+0x9c>)
 800b9d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9d8:	f003 0302 	and.w	r3, r3, #2
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	d116      	bne.n	800ba0e <HAL_PWREx_ConfigSupply+0x7a>
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d1f3      	bne.n	800b9ce <HAL_PWREx_ConfigSupply+0x3a>
 800b9e6:	e012      	b.n	800ba0e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800b9e8:	4b11      	ldr	r3, [pc, #68]	; (800ba30 <HAL_PWREx_ConfigSupply+0x9c>)
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	4a10      	ldr	r2, [pc, #64]	; (800ba30 <HAL_PWREx_ConfigSupply+0x9c>)
 800b9ee:	f043 0302 	orr.w	r3, r3, #2
 800b9f2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800b9f4:	e002      	b.n	800b9fc <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800b9fc:	4b0c      	ldr	r3, [pc, #48]	; (800ba30 <HAL_PWREx_ConfigSupply+0x9c>)
 800b9fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba00:	f003 0302 	and.w	r3, r3, #2
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d102      	bne.n	800ba0e <HAL_PWREx_ConfigSupply+0x7a>
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1f3      	bne.n	800b9f6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d101      	bne.n	800ba18 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800ba14:	2303      	movs	r3, #3
 800ba16:	e000      	b.n	800ba1a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3714      	adds	r7, #20
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	20000048 	.word	0x20000048
 800ba2c:	10624dd3 	.word	0x10624dd3
 800ba30:	46020800 	.word	0x46020800

0800ba34 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800ba34:	b480      	push	{r7}
 800ba36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800ba38:	4b05      	ldr	r3, [pc, #20]	; (800ba50 <HAL_PWREx_EnableVddIO2+0x1c>)
 800ba3a:	691b      	ldr	r3, [r3, #16]
 800ba3c:	4a04      	ldr	r2, [pc, #16]	; (800ba50 <HAL_PWREx_EnableVddIO2+0x1c>)
 800ba3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba42:	6113      	str	r3, [r2, #16]
}
 800ba44:	bf00      	nop
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr
 800ba4e:	bf00      	nop
 800ba50:	46020800 	.word	0x46020800

0800ba54 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800ba54:	b480      	push	{r7}
 800ba56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800ba58:	4b05      	ldr	r3, [pc, #20]	; (800ba70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800ba5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5c:	4a04      	ldr	r2, [pc, #16]	; (800ba70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800ba5e:	f043 0301 	orr.w	r3, r3, #1
 800ba62:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800ba64:	bf00      	nop
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop
 800ba70:	46020800 	.word	0x46020800

0800ba74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b08e      	sub	sp, #56	; 0x38
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d102      	bne.n	800ba8e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	f000 bec8 	b.w	800c81e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba8e:	4b99      	ldr	r3, [pc, #612]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800ba90:	69db      	ldr	r3, [r3, #28]
 800ba92:	f003 030c 	and.w	r3, r3, #12
 800ba96:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ba98:	4b96      	ldr	r3, [pc, #600]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800ba9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba9c:	f003 0303 	and.w	r3, r3, #3
 800baa0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f003 0310 	and.w	r3, r3, #16
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f000 816c 	beq.w	800bd88 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800bab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d007      	beq.n	800bac6 <HAL_RCC_OscConfig+0x52>
 800bab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab8:	2b0c      	cmp	r3, #12
 800baba:	f040 80de 	bne.w	800bc7a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800babe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	f040 80da 	bne.w	800bc7a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	69db      	ldr	r3, [r3, #28]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d102      	bne.n	800bad4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800bace:	2301      	movs	r3, #1
 800bad0:	f000 bea5 	b.w	800c81e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bad8:	4b86      	ldr	r3, [pc, #536]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d004      	beq.n	800baee <HAL_RCC_OscConfig+0x7a>
 800bae4:	4b83      	ldr	r3, [pc, #524]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800baec:	e005      	b.n	800bafa <HAL_RCC_OscConfig+0x86>
 800baee:	4b81      	ldr	r3, [pc, #516]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800baf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800baf4:	041b      	lsls	r3, r3, #16
 800baf6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d255      	bcs.n	800bbaa <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10a      	bne.n	800bb1a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f001 fa17 	bl	800cf3c <RCC_SetFlashLatencyFromMSIRange>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d002      	beq.n	800bb1a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	f000 be82 	b.w	800c81e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800bb1a:	4b76      	ldr	r3, [pc, #472]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	4a75      	ldr	r2, [pc, #468]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bb20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bb24:	6093      	str	r3, [r2, #8]
 800bb26:	4b73      	ldr	r3, [pc, #460]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb32:	4970      	ldr	r1, [pc, #448]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bb34:	4313      	orrs	r3, r2
 800bb36:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800bb40:	d309      	bcc.n	800bb56 <HAL_RCC_OscConfig+0xe2>
 800bb42:	4b6c      	ldr	r3, [pc, #432]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	f023 021f 	bic.w	r2, r3, #31
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	4969      	ldr	r1, [pc, #420]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bb50:	4313      	orrs	r3, r2
 800bb52:	60cb      	str	r3, [r1, #12]
 800bb54:	e07e      	b.n	800bc54 <HAL_RCC_OscConfig+0x1e0>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	da0a      	bge.n	800bb74 <HAL_RCC_OscConfig+0x100>
 800bb5e:	4b65      	ldr	r3, [pc, #404]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	015b      	lsls	r3, r3, #5
 800bb6c:	4961      	ldr	r1, [pc, #388]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	60cb      	str	r3, [r1, #12]
 800bb72:	e06f      	b.n	800bc54 <HAL_RCC_OscConfig+0x1e0>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb7c:	d30a      	bcc.n	800bb94 <HAL_RCC_OscConfig+0x120>
 800bb7e:	4b5d      	ldr	r3, [pc, #372]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6a1b      	ldr	r3, [r3, #32]
 800bb8a:	029b      	lsls	r3, r3, #10
 800bb8c:	4959      	ldr	r1, [pc, #356]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	60cb      	str	r3, [r1, #12]
 800bb92:	e05f      	b.n	800bc54 <HAL_RCC_OscConfig+0x1e0>
 800bb94:	4b57      	ldr	r3, [pc, #348]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6a1b      	ldr	r3, [r3, #32]
 800bba0:	03db      	lsls	r3, r3, #15
 800bba2:	4954      	ldr	r1, [pc, #336]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bba4:	4313      	orrs	r3, r2
 800bba6:	60cb      	str	r3, [r1, #12]
 800bba8:	e054      	b.n	800bc54 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800bbaa:	4b52      	ldr	r3, [pc, #328]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	4a51      	ldr	r2, [pc, #324]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bbb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bbb4:	6093      	str	r3, [r2, #8]
 800bbb6:	4b4f      	ldr	r3, [pc, #316]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc2:	494c      	ldr	r1, [pc, #304]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbcc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800bbd0:	d309      	bcc.n	800bbe6 <HAL_RCC_OscConfig+0x172>
 800bbd2:	4b48      	ldr	r3, [pc, #288]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	f023 021f 	bic.w	r2, r3, #31
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	4945      	ldr	r1, [pc, #276]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	60cb      	str	r3, [r1, #12]
 800bbe4:	e028      	b.n	800bc38 <HAL_RCC_OscConfig+0x1c4>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	da0a      	bge.n	800bc04 <HAL_RCC_OscConfig+0x190>
 800bbee:	4b41      	ldr	r3, [pc, #260]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a1b      	ldr	r3, [r3, #32]
 800bbfa:	015b      	lsls	r3, r3, #5
 800bbfc:	493d      	ldr	r1, [pc, #244]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	60cb      	str	r3, [r1, #12]
 800bc02:	e019      	b.n	800bc38 <HAL_RCC_OscConfig+0x1c4>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc0c:	d30a      	bcc.n	800bc24 <HAL_RCC_OscConfig+0x1b0>
 800bc0e:	4b39      	ldr	r3, [pc, #228]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6a1b      	ldr	r3, [r3, #32]
 800bc1a:	029b      	lsls	r3, r3, #10
 800bc1c:	4935      	ldr	r1, [pc, #212]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	60cb      	str	r3, [r1, #12]
 800bc22:	e009      	b.n	800bc38 <HAL_RCC_OscConfig+0x1c4>
 800bc24:	4b33      	ldr	r3, [pc, #204]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6a1b      	ldr	r3, [r3, #32]
 800bc30:	03db      	lsls	r3, r3, #15
 800bc32:	4930      	ldr	r1, [pc, #192]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bc34:	4313      	orrs	r3, r2
 800bc36:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d10a      	bne.n	800bc54 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc42:	4618      	mov	r0, r3
 800bc44:	f001 f97a 	bl	800cf3c <RCC_SetFlashLatencyFromMSIRange>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d002      	beq.n	800bc54 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	f000 bde5 	b.w	800c81e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800bc54:	f001 f8e4 	bl	800ce20 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800bc58:	4b27      	ldr	r3, [pc, #156]	; (800bcf8 <HAL_RCC_OscConfig+0x284>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7f5 fdf9 	bl	8001854 <HAL_InitTick>
 800bc62:	4603      	mov	r3, r0
 800bc64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800bc68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f000 808a 	beq.w	800bd86 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800bc72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc76:	f000 bdd2 	b.w	800c81e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	69db      	ldr	r3, [r3, #28]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d066      	beq.n	800bd50 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800bc82:	4b1c      	ldr	r3, [pc, #112]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4a1b      	ldr	r2, [pc, #108]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bc88:	f043 0301 	orr.w	r3, r3, #1
 800bc8c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bc8e:	f7fb fb75 	bl	800737c <HAL_GetTick>
 800bc92:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800bc94:	e009      	b.n	800bcaa <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bc96:	f7fb fb71 	bl	800737c <HAL_GetTick>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9e:	1ad3      	subs	r3, r2, r3
 800bca0:	2b02      	cmp	r3, #2
 800bca2:	d902      	bls.n	800bcaa <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800bca4:	2303      	movs	r3, #3
 800bca6:	f000 bdba 	b.w	800c81e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800bcaa:	4b12      	ldr	r3, [pc, #72]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f003 0304 	and.w	r3, r3, #4
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d0ef      	beq.n	800bc96 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800bcb6:	4b0f      	ldr	r3, [pc, #60]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	4a0e      	ldr	r2, [pc, #56]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bcbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bcc0:	6093      	str	r3, [r2, #8]
 800bcc2:	4b0c      	ldr	r3, [pc, #48]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bcc4:	689b      	ldr	r3, [r3, #8]
 800bcc6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcce:	4909      	ldr	r1, [pc, #36]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800bcdc:	d30e      	bcc.n	800bcfc <HAL_RCC_OscConfig+0x288>
 800bcde:	4b05      	ldr	r3, [pc, #20]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	f023 021f 	bic.w	r2, r3, #31
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a1b      	ldr	r3, [r3, #32]
 800bcea:	4902      	ldr	r1, [pc, #8]	; (800bcf4 <HAL_RCC_OscConfig+0x280>)
 800bcec:	4313      	orrs	r3, r2
 800bcee:	60cb      	str	r3, [r1, #12]
 800bcf0:	e04a      	b.n	800bd88 <HAL_RCC_OscConfig+0x314>
 800bcf2:	bf00      	nop
 800bcf4:	46020c00 	.word	0x46020c00
 800bcf8:	2000004c 	.word	0x2000004c
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	da0a      	bge.n	800bd1a <HAL_RCC_OscConfig+0x2a6>
 800bd04:	4b98      	ldr	r3, [pc, #608]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6a1b      	ldr	r3, [r3, #32]
 800bd10:	015b      	lsls	r3, r3, #5
 800bd12:	4995      	ldr	r1, [pc, #596]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bd14:	4313      	orrs	r3, r2
 800bd16:	60cb      	str	r3, [r1, #12]
 800bd18:	e036      	b.n	800bd88 <HAL_RCC_OscConfig+0x314>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd22:	d30a      	bcc.n	800bd3a <HAL_RCC_OscConfig+0x2c6>
 800bd24:	4b90      	ldr	r3, [pc, #576]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6a1b      	ldr	r3, [r3, #32]
 800bd30:	029b      	lsls	r3, r3, #10
 800bd32:	498d      	ldr	r1, [pc, #564]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bd34:	4313      	orrs	r3, r2
 800bd36:	60cb      	str	r3, [r1, #12]
 800bd38:	e026      	b.n	800bd88 <HAL_RCC_OscConfig+0x314>
 800bd3a:	4b8b      	ldr	r3, [pc, #556]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6a1b      	ldr	r3, [r3, #32]
 800bd46:	03db      	lsls	r3, r3, #15
 800bd48:	4987      	ldr	r1, [pc, #540]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	60cb      	str	r3, [r1, #12]
 800bd4e:	e01b      	b.n	800bd88 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800bd50:	4b85      	ldr	r3, [pc, #532]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a84      	ldr	r2, [pc, #528]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bd56:	f023 0301 	bic.w	r3, r3, #1
 800bd5a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bd5c:	f7fb fb0e 	bl	800737c <HAL_GetTick>
 800bd60:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800bd62:	e009      	b.n	800bd78 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bd64:	f7fb fb0a 	bl	800737c <HAL_GetTick>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	2b02      	cmp	r3, #2
 800bd70:	d902      	bls.n	800bd78 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800bd72:	2303      	movs	r3, #3
 800bd74:	f000 bd53 	b.w	800c81e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800bd78:	4b7b      	ldr	r3, [pc, #492]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f003 0304 	and.w	r3, r3, #4
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1ef      	bne.n	800bd64 <HAL_RCC_OscConfig+0x2f0>
 800bd84:	e000      	b.n	800bd88 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bd86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f003 0301 	and.w	r3, r3, #1
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	f000 808b 	beq.w	800beac <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800bd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd98:	2b08      	cmp	r3, #8
 800bd9a:	d005      	beq.n	800bda8 <HAL_RCC_OscConfig+0x334>
 800bd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9e:	2b0c      	cmp	r3, #12
 800bda0:	d109      	bne.n	800bdb6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda4:	2b03      	cmp	r3, #3
 800bda6:	d106      	bne.n	800bdb6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d17d      	bne.n	800beac <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	f000 bd34 	b.w	800c81e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdbe:	d106      	bne.n	800bdce <HAL_RCC_OscConfig+0x35a>
 800bdc0:	4b69      	ldr	r3, [pc, #420]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a68      	ldr	r2, [pc, #416]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bdc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdca:	6013      	str	r3, [r2, #0]
 800bdcc:	e041      	b.n	800be52 <HAL_RCC_OscConfig+0x3de>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bdd6:	d112      	bne.n	800bdfe <HAL_RCC_OscConfig+0x38a>
 800bdd8:	4b63      	ldr	r3, [pc, #396]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a62      	ldr	r2, [pc, #392]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bdde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	4b60      	ldr	r3, [pc, #384]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a5f      	ldr	r2, [pc, #380]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bdea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bdee:	6013      	str	r3, [r2, #0]
 800bdf0:	4b5d      	ldr	r3, [pc, #372]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a5c      	ldr	r2, [pc, #368]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bdf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdfa:	6013      	str	r3, [r2, #0]
 800bdfc:	e029      	b.n	800be52 <HAL_RCC_OscConfig+0x3de>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800be06:	d112      	bne.n	800be2e <HAL_RCC_OscConfig+0x3ba>
 800be08:	4b57      	ldr	r3, [pc, #348]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a56      	ldr	r2, [pc, #344]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800be0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800be12:	6013      	str	r3, [r2, #0]
 800be14:	4b54      	ldr	r3, [pc, #336]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a53      	ldr	r2, [pc, #332]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800be1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be1e:	6013      	str	r3, [r2, #0]
 800be20:	4b51      	ldr	r3, [pc, #324]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a50      	ldr	r2, [pc, #320]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800be26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be2a:	6013      	str	r3, [r2, #0]
 800be2c:	e011      	b.n	800be52 <HAL_RCC_OscConfig+0x3de>
 800be2e:	4b4e      	ldr	r3, [pc, #312]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a4d      	ldr	r2, [pc, #308]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800be34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be38:	6013      	str	r3, [r2, #0]
 800be3a:	4b4b      	ldr	r3, [pc, #300]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a4a      	ldr	r2, [pc, #296]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800be40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be44:	6013      	str	r3, [r2, #0]
 800be46:	4b48      	ldr	r3, [pc, #288]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a47      	ldr	r2, [pc, #284]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800be4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d014      	beq.n	800be84 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800be5a:	f7fb fa8f 	bl	800737c <HAL_GetTick>
 800be5e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be60:	e009      	b.n	800be76 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be62:	f7fb fa8b 	bl	800737c <HAL_GetTick>
 800be66:	4602      	mov	r2, r0
 800be68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6a:	1ad3      	subs	r3, r2, r3
 800be6c:	2b64      	cmp	r3, #100	; 0x64
 800be6e:	d902      	bls.n	800be76 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800be70:	2303      	movs	r3, #3
 800be72:	f000 bcd4 	b.w	800c81e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be76:	4b3c      	ldr	r3, [pc, #240]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d0ef      	beq.n	800be62 <HAL_RCC_OscConfig+0x3ee>
 800be82:	e013      	b.n	800beac <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800be84:	f7fb fa7a 	bl	800737c <HAL_GetTick>
 800be88:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800be8a:	e009      	b.n	800bea0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be8c:	f7fb fa76 	bl	800737c <HAL_GetTick>
 800be90:	4602      	mov	r2, r0
 800be92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be94:	1ad3      	subs	r3, r2, r3
 800be96:	2b64      	cmp	r3, #100	; 0x64
 800be98:	d902      	bls.n	800bea0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800be9a:	2303      	movs	r3, #3
 800be9c:	f000 bcbf 	b.w	800c81e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bea0:	4b31      	ldr	r3, [pc, #196]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d1ef      	bne.n	800be8c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f003 0302 	and.w	r3, r3, #2
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d05f      	beq.n	800bf78 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800beb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beba:	2b04      	cmp	r3, #4
 800bebc:	d005      	beq.n	800beca <HAL_RCC_OscConfig+0x456>
 800bebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec0:	2b0c      	cmp	r3, #12
 800bec2:	d114      	bne.n	800beee <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800bec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	d111      	bne.n	800beee <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d102      	bne.n	800bed8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800bed2:	2301      	movs	r3, #1
 800bed4:	f000 bca3 	b.w	800c81e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800bed8:	4b23      	ldr	r3, [pc, #140]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800beda:	691b      	ldr	r3, [r3, #16]
 800bedc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	041b      	lsls	r3, r3, #16
 800bee6:	4920      	ldr	r1, [pc, #128]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bee8:	4313      	orrs	r3, r2
 800beea:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800beec:	e044      	b.n	800bf78 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d024      	beq.n	800bf40 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800bef6:	4b1c      	ldr	r3, [pc, #112]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a1b      	ldr	r2, [pc, #108]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800befc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf00:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bf02:	f7fb fa3b 	bl	800737c <HAL_GetTick>
 800bf06:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bf08:	e009      	b.n	800bf1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf0a:	f7fb fa37 	bl	800737c <HAL_GetTick>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	d902      	bls.n	800bf1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	f000 bc80 	b.w	800c81e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bf1e:	4b12      	ldr	r3, [pc, #72]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d0ef      	beq.n	800bf0a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800bf2a:	4b0f      	ldr	r3, [pc, #60]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bf2c:	691b      	ldr	r3, [r3, #16]
 800bf2e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	041b      	lsls	r3, r3, #16
 800bf38:	490b      	ldr	r1, [pc, #44]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	610b      	str	r3, [r1, #16]
 800bf3e:	e01b      	b.n	800bf78 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800bf40:	4b09      	ldr	r3, [pc, #36]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a08      	ldr	r2, [pc, #32]	; (800bf68 <HAL_RCC_OscConfig+0x4f4>)
 800bf46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf4a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bf4c:	f7fb fa16 	bl	800737c <HAL_GetTick>
 800bf50:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bf52:	e00b      	b.n	800bf6c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf54:	f7fb fa12 	bl	800737c <HAL_GetTick>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5c:	1ad3      	subs	r3, r2, r3
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d904      	bls.n	800bf6c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800bf62:	2303      	movs	r3, #3
 800bf64:	f000 bc5b 	b.w	800c81e <HAL_RCC_OscConfig+0xdaa>
 800bf68:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bf6c:	4baf      	ldr	r3, [pc, #700]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1ed      	bne.n	800bf54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f003 0308 	and.w	r3, r3, #8
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f000 80c8 	beq.w	800c116 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800bf86:	2300      	movs	r3, #0
 800bf88:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bf8c:	4ba7      	ldr	r3, [pc, #668]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800bf8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf92:	f003 0304 	and.w	r3, r3, #4
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d111      	bne.n	800bfbe <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bf9a:	4ba4      	ldr	r3, [pc, #656]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800bf9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfa0:	4aa2      	ldr	r2, [pc, #648]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800bfa2:	f043 0304 	orr.w	r3, r3, #4
 800bfa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800bfaa:	4ba0      	ldr	r3, [pc, #640]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800bfac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfb0:	f003 0304 	and.w	r3, r3, #4
 800bfb4:	617b      	str	r3, [r7, #20]
 800bfb6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bfbe:	4b9c      	ldr	r3, [pc, #624]	; (800c230 <HAL_RCC_OscConfig+0x7bc>)
 800bfc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc2:	f003 0301 	and.w	r3, r3, #1
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d119      	bne.n	800bffe <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800bfca:	4b99      	ldr	r3, [pc, #612]	; (800c230 <HAL_RCC_OscConfig+0x7bc>)
 800bfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfce:	4a98      	ldr	r2, [pc, #608]	; (800c230 <HAL_RCC_OscConfig+0x7bc>)
 800bfd0:	f043 0301 	orr.w	r3, r3, #1
 800bfd4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bfd6:	f7fb f9d1 	bl	800737c <HAL_GetTick>
 800bfda:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bfdc:	e009      	b.n	800bff2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bfde:	f7fb f9cd 	bl	800737c <HAL_GetTick>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe6:	1ad3      	subs	r3, r2, r3
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	d902      	bls.n	800bff2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800bfec:	2303      	movs	r3, #3
 800bfee:	f000 bc16 	b.w	800c81e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bff2:	4b8f      	ldr	r3, [pc, #572]	; (800c230 <HAL_RCC_OscConfig+0x7bc>)
 800bff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bff6:	f003 0301 	and.w	r3, r3, #1
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d0ef      	beq.n	800bfde <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	695b      	ldr	r3, [r3, #20]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d05f      	beq.n	800c0c6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800c006:	4b89      	ldr	r3, [pc, #548]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c00c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	699a      	ldr	r2, [r3, #24]
 800c012:	6a3b      	ldr	r3, [r7, #32]
 800c014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c018:	429a      	cmp	r2, r3
 800c01a:	d037      	beq.n	800c08c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800c01c:	6a3b      	ldr	r3, [r7, #32]
 800c01e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c022:	2b00      	cmp	r3, #0
 800c024:	d006      	beq.n	800c034 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800c026:	6a3b      	ldr	r3, [r7, #32]
 800c028:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d101      	bne.n	800c034 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	e3f4      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800c034:	6a3b      	ldr	r3, [r7, #32]
 800c036:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d01b      	beq.n	800c076 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800c03e:	4b7b      	ldr	r3, [pc, #492]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c044:	4a79      	ldr	r2, [pc, #484]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c046:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800c04a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800c04e:	f7fb f995 	bl	800737c <HAL_GetTick>
 800c052:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c054:	e008      	b.n	800c068 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c056:	f7fb f991 	bl	800737c <HAL_GetTick>
 800c05a:	4602      	mov	r2, r0
 800c05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05e:	1ad3      	subs	r3, r2, r3
 800c060:	2b05      	cmp	r3, #5
 800c062:	d901      	bls.n	800c068 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800c064:	2303      	movs	r3, #3
 800c066:	e3da      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c068:	4b70      	ldr	r3, [pc, #448]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c06a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c06e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c072:	2b00      	cmp	r3, #0
 800c074:	d1ef      	bne.n	800c056 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800c076:	4b6d      	ldr	r3, [pc, #436]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c07c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	699b      	ldr	r3, [r3, #24]
 800c084:	4969      	ldr	r1, [pc, #420]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c086:	4313      	orrs	r3, r2
 800c088:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800c08c:	4b67      	ldr	r3, [pc, #412]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c08e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c092:	4a66      	ldr	r2, [pc, #408]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c094:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c098:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800c09c:	f7fb f96e 	bl	800737c <HAL_GetTick>
 800c0a0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c0a2:	e008      	b.n	800c0b6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c0a4:	f7fb f96a 	bl	800737c <HAL_GetTick>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ac:	1ad3      	subs	r3, r2, r3
 800c0ae:	2b05      	cmp	r3, #5
 800c0b0:	d901      	bls.n	800c0b6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800c0b2:	2303      	movs	r3, #3
 800c0b4:	e3b3      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c0b6:	4b5d      	ldr	r3, [pc, #372]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c0b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d0ef      	beq.n	800c0a4 <HAL_RCC_OscConfig+0x630>
 800c0c4:	e01b      	b.n	800c0fe <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800c0c6:	4b59      	ldr	r3, [pc, #356]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c0c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0cc:	4a57      	ldr	r2, [pc, #348]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c0ce:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800c0d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800c0d6:	f7fb f951 	bl	800737c <HAL_GetTick>
 800c0da:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c0dc:	e008      	b.n	800c0f0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c0de:	f7fb f94d 	bl	800737c <HAL_GetTick>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	2b05      	cmp	r3, #5
 800c0ea:	d901      	bls.n	800c0f0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800c0ec:	2303      	movs	r3, #3
 800c0ee:	e396      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c0f0:	4b4e      	ldr	r3, [pc, #312]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c0f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d1ef      	bne.n	800c0de <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c0fe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c102:	2b01      	cmp	r3, #1
 800c104:	d107      	bne.n	800c116 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c106:	4b49      	ldr	r3, [pc, #292]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c10c:	4a47      	ldr	r2, [pc, #284]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c10e:	f023 0304 	bic.w	r3, r3, #4
 800c112:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f003 0304 	and.w	r3, r3, #4
 800c11e:	2b00      	cmp	r3, #0
 800c120:	f000 8111 	beq.w	800c346 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800c124:	2300      	movs	r3, #0
 800c126:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c12a:	4b40      	ldr	r3, [pc, #256]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c12c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c130:	f003 0304 	and.w	r3, r3, #4
 800c134:	2b00      	cmp	r3, #0
 800c136:	d111      	bne.n	800c15c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c138:	4b3c      	ldr	r3, [pc, #240]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c13a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c13e:	4a3b      	ldr	r2, [pc, #236]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c140:	f043 0304 	orr.w	r3, r3, #4
 800c144:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c148:	4b38      	ldr	r3, [pc, #224]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c14a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c14e:	f003 0304 	and.w	r3, r3, #4
 800c152:	613b      	str	r3, [r7, #16]
 800c154:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800c156:	2301      	movs	r3, #1
 800c158:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c15c:	4b34      	ldr	r3, [pc, #208]	; (800c230 <HAL_RCC_OscConfig+0x7bc>)
 800c15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c160:	f003 0301 	and.w	r3, r3, #1
 800c164:	2b00      	cmp	r3, #0
 800c166:	d118      	bne.n	800c19a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c168:	4b31      	ldr	r3, [pc, #196]	; (800c230 <HAL_RCC_OscConfig+0x7bc>)
 800c16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c16c:	4a30      	ldr	r2, [pc, #192]	; (800c230 <HAL_RCC_OscConfig+0x7bc>)
 800c16e:	f043 0301 	orr.w	r3, r3, #1
 800c172:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c174:	f7fb f902 	bl	800737c <HAL_GetTick>
 800c178:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c17a:	e008      	b.n	800c18e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c17c:	f7fb f8fe 	bl	800737c <HAL_GetTick>
 800c180:	4602      	mov	r2, r0
 800c182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c184:	1ad3      	subs	r3, r2, r3
 800c186:	2b02      	cmp	r3, #2
 800c188:	d901      	bls.n	800c18e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800c18a:	2303      	movs	r3, #3
 800c18c:	e347      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c18e:	4b28      	ldr	r3, [pc, #160]	; (800c230 <HAL_RCC_OscConfig+0x7bc>)
 800c190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c192:	f003 0301 	and.w	r3, r3, #1
 800c196:	2b00      	cmp	r3, #0
 800c198:	d0f0      	beq.n	800c17c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	f003 0301 	and.w	r3, r3, #1
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d01f      	beq.n	800c1e6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	f003 0304 	and.w	r3, r3, #4
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d010      	beq.n	800c1d4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c1b2:	4b1e      	ldr	r3, [pc, #120]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c1b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c1b8:	4a1c      	ldr	r2, [pc, #112]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c1ba:	f043 0304 	orr.w	r3, r3, #4
 800c1be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c1c2:	4b1a      	ldr	r3, [pc, #104]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c1c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c1c8:	4a18      	ldr	r2, [pc, #96]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c1ca:	f043 0301 	orr.w	r3, r3, #1
 800c1ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c1d2:	e018      	b.n	800c206 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c1d4:	4b15      	ldr	r3, [pc, #84]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c1d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c1da:	4a14      	ldr	r2, [pc, #80]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c1dc:	f043 0301 	orr.w	r3, r3, #1
 800c1e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c1e4:	e00f      	b.n	800c206 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c1e6:	4b11      	ldr	r3, [pc, #68]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c1e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c1ec:	4a0f      	ldr	r2, [pc, #60]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c1ee:	f023 0301 	bic.w	r3, r3, #1
 800c1f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c1f6:	4b0d      	ldr	r3, [pc, #52]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c1f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c1fc:	4a0b      	ldr	r2, [pc, #44]	; (800c22c <HAL_RCC_OscConfig+0x7b8>)
 800c1fe:	f023 0304 	bic.w	r3, r3, #4
 800c202:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d057      	beq.n	800c2be <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800c20e:	f7fb f8b5 	bl	800737c <HAL_GetTick>
 800c212:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c214:	e00e      	b.n	800c234 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c216:	f7fb f8b1 	bl	800737c <HAL_GetTick>
 800c21a:	4602      	mov	r2, r0
 800c21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21e:	1ad3      	subs	r3, r2, r3
 800c220:	f241 3288 	movw	r2, #5000	; 0x1388
 800c224:	4293      	cmp	r3, r2
 800c226:	d905      	bls.n	800c234 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800c228:	2303      	movs	r3, #3
 800c22a:	e2f8      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
 800c22c:	46020c00 	.word	0x46020c00
 800c230:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c234:	4b9c      	ldr	r3, [pc, #624]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c23a:	f003 0302 	and.w	r3, r3, #2
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d0e9      	beq.n	800c216 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d01b      	beq.n	800c286 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c24e:	4b96      	ldr	r3, [pc, #600]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c254:	4a94      	ldr	r2, [pc, #592]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c25a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c25e:	e00a      	b.n	800c276 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c260:	f7fb f88c 	bl	800737c <HAL_GetTick>
 800c264:	4602      	mov	r2, r0
 800c266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c268:	1ad3      	subs	r3, r2, r3
 800c26a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c26e:	4293      	cmp	r3, r2
 800c270:	d901      	bls.n	800c276 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800c272:	2303      	movs	r3, #3
 800c274:	e2d3      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c276:	4b8c      	ldr	r3, [pc, #560]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c27c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c280:	2b00      	cmp	r3, #0
 800c282:	d0ed      	beq.n	800c260 <HAL_RCC_OscConfig+0x7ec>
 800c284:	e053      	b.n	800c32e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c286:	4b88      	ldr	r3, [pc, #544]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c28c:	4a86      	ldr	r2, [pc, #536]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c28e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c292:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c296:	e00a      	b.n	800c2ae <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c298:	f7fb f870 	bl	800737c <HAL_GetTick>
 800c29c:	4602      	mov	r2, r0
 800c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a0:	1ad3      	subs	r3, r2, r3
 800c2a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d901      	bls.n	800c2ae <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800c2aa:	2303      	movs	r3, #3
 800c2ac:	e2b7      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c2ae:	4b7e      	ldr	r3, [pc, #504]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c2b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d1ed      	bne.n	800c298 <HAL_RCC_OscConfig+0x824>
 800c2bc:	e037      	b.n	800c32e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800c2be:	f7fb f85d 	bl	800737c <HAL_GetTick>
 800c2c2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c2c4:	e00a      	b.n	800c2dc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c2c6:	f7fb f859 	bl	800737c <HAL_GetTick>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ce:	1ad3      	subs	r3, r2, r3
 800c2d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d901      	bls.n	800c2dc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	e2a0      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c2dc:	4b72      	ldr	r3, [pc, #456]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c2de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2e2:	f003 0302 	and.w	r3, r3, #2
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1ed      	bne.n	800c2c6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800c2ea:	4b6f      	ldr	r3, [pc, #444]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c2ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d01a      	beq.n	800c32e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c2f8:	4b6b      	ldr	r3, [pc, #428]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c2fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2fe:	4a6a      	ldr	r2, [pc, #424]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c304:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c308:	e00a      	b.n	800c320 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c30a:	f7fb f837 	bl	800737c <HAL_GetTick>
 800c30e:	4602      	mov	r2, r0
 800c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c312:	1ad3      	subs	r3, r2, r3
 800c314:	f241 3288 	movw	r2, #5000	; 0x1388
 800c318:	4293      	cmp	r3, r2
 800c31a:	d901      	bls.n	800c320 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800c31c:	2303      	movs	r3, #3
 800c31e:	e27e      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c320:	4b61      	ldr	r3, [pc, #388]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1ed      	bne.n	800c30a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c32e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c332:	2b01      	cmp	r3, #1
 800c334:	d107      	bne.n	800c346 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c336:	4b5c      	ldr	r3, [pc, #368]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c33c:	4a5a      	ldr	r2, [pc, #360]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c33e:	f023 0304 	bic.w	r3, r3, #4
 800c342:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f003 0320 	and.w	r3, r3, #32
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d036      	beq.n	800c3c0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c356:	2b00      	cmp	r3, #0
 800c358:	d019      	beq.n	800c38e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800c35a:	4b53      	ldr	r3, [pc, #332]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a52      	ldr	r2, [pc, #328]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c360:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c364:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c366:	f7fb f809 	bl	800737c <HAL_GetTick>
 800c36a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c36c:	e008      	b.n	800c380 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c36e:	f7fb f805 	bl	800737c <HAL_GetTick>
 800c372:	4602      	mov	r2, r0
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	1ad3      	subs	r3, r2, r3
 800c378:	2b02      	cmp	r3, #2
 800c37a:	d901      	bls.n	800c380 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800c37c:	2303      	movs	r3, #3
 800c37e:	e24e      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c380:	4b49      	ldr	r3, [pc, #292]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d0f0      	beq.n	800c36e <HAL_RCC_OscConfig+0x8fa>
 800c38c:	e018      	b.n	800c3c0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800c38e:	4b46      	ldr	r3, [pc, #280]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4a45      	ldr	r2, [pc, #276]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c398:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c39a:	f7fa ffef 	bl	800737c <HAL_GetTick>
 800c39e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c3a0:	e008      	b.n	800c3b4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c3a2:	f7fa ffeb 	bl	800737c <HAL_GetTick>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3aa:	1ad3      	subs	r3, r2, r3
 800c3ac:	2b02      	cmp	r3, #2
 800c3ae:	d901      	bls.n	800c3b4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800c3b0:	2303      	movs	r3, #3
 800c3b2:	e234      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c3b4:	4b3c      	ldr	r3, [pc, #240]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d1f0      	bne.n	800c3a2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d036      	beq.n	800c43a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d019      	beq.n	800c408 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800c3d4:	4b34      	ldr	r3, [pc, #208]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a33      	ldr	r2, [pc, #204]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c3da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c3de:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c3e0:	f7fa ffcc 	bl	800737c <HAL_GetTick>
 800c3e4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c3e6:	e008      	b.n	800c3fa <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c3e8:	f7fa ffc8 	bl	800737c <HAL_GetTick>
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	2b02      	cmp	r3, #2
 800c3f4:	d901      	bls.n	800c3fa <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800c3f6:	2303      	movs	r3, #3
 800c3f8:	e211      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c3fa:	4b2b      	ldr	r3, [pc, #172]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c402:	2b00      	cmp	r3, #0
 800c404:	d0f0      	beq.n	800c3e8 <HAL_RCC_OscConfig+0x974>
 800c406:	e018      	b.n	800c43a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800c408:	4b27      	ldr	r3, [pc, #156]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a26      	ldr	r2, [pc, #152]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c40e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c412:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c414:	f7fa ffb2 	bl	800737c <HAL_GetTick>
 800c418:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c41a:	e008      	b.n	800c42e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c41c:	f7fa ffae 	bl	800737c <HAL_GetTick>
 800c420:	4602      	mov	r2, r0
 800c422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c424:	1ad3      	subs	r3, r2, r3
 800c426:	2b02      	cmp	r3, #2
 800c428:	d901      	bls.n	800c42e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800c42a:	2303      	movs	r3, #3
 800c42c:	e1f7      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c42e:	4b1e      	ldr	r3, [pc, #120]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1f0      	bne.n	800c41c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c442:	2b00      	cmp	r3, #0
 800c444:	d07f      	beq.n	800c546 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d062      	beq.n	800c514 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800c44e:	4b16      	ldr	r3, [pc, #88]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	4a15      	ldr	r2, [pc, #84]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c454:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c458:	6093      	str	r3, [r2, #8]
 800c45a:	4b13      	ldr	r3, [pc, #76]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c45c:	689b      	ldr	r3, [r3, #8]
 800c45e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c466:	4910      	ldr	r1, [pc, #64]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c468:	4313      	orrs	r3, r2
 800c46a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c470:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c474:	d309      	bcc.n	800c48a <HAL_RCC_OscConfig+0xa16>
 800c476:	4b0c      	ldr	r3, [pc, #48]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	f023 021f 	bic.w	r2, r3, #31
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6a1b      	ldr	r3, [r3, #32]
 800c482:	4909      	ldr	r1, [pc, #36]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c484:	4313      	orrs	r3, r2
 800c486:	60cb      	str	r3, [r1, #12]
 800c488:	e02a      	b.n	800c4e0 <HAL_RCC_OscConfig+0xa6c>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48e:	2b00      	cmp	r3, #0
 800c490:	da0c      	bge.n	800c4ac <HAL_RCC_OscConfig+0xa38>
 800c492:	4b05      	ldr	r3, [pc, #20]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6a1b      	ldr	r3, [r3, #32]
 800c49e:	015b      	lsls	r3, r3, #5
 800c4a0:	4901      	ldr	r1, [pc, #4]	; (800c4a8 <HAL_RCC_OscConfig+0xa34>)
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	60cb      	str	r3, [r1, #12]
 800c4a6:	e01b      	b.n	800c4e0 <HAL_RCC_OscConfig+0xa6c>
 800c4a8:	46020c00 	.word	0x46020c00
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4b4:	d30a      	bcc.n	800c4cc <HAL_RCC_OscConfig+0xa58>
 800c4b6:	4ba1      	ldr	r3, [pc, #644]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a1b      	ldr	r3, [r3, #32]
 800c4c2:	029b      	lsls	r3, r3, #10
 800c4c4:	499d      	ldr	r1, [pc, #628]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	60cb      	str	r3, [r1, #12]
 800c4ca:	e009      	b.n	800c4e0 <HAL_RCC_OscConfig+0xa6c>
 800c4cc:	4b9b      	ldr	r3, [pc, #620]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c4ce:	68db      	ldr	r3, [r3, #12]
 800c4d0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6a1b      	ldr	r3, [r3, #32]
 800c4d8:	03db      	lsls	r3, r3, #15
 800c4da:	4998      	ldr	r1, [pc, #608]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800c4e0:	4b96      	ldr	r3, [pc, #600]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a95      	ldr	r2, [pc, #596]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c4e6:	f043 0310 	orr.w	r3, r3, #16
 800c4ea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c4ec:	f7fa ff46 	bl	800737c <HAL_GetTick>
 800c4f0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c4f2:	e008      	b.n	800c506 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c4f4:	f7fa ff42 	bl	800737c <HAL_GetTick>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fc:	1ad3      	subs	r3, r2, r3
 800c4fe:	2b02      	cmp	r3, #2
 800c500:	d901      	bls.n	800c506 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800c502:	2303      	movs	r3, #3
 800c504:	e18b      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c506:	4b8d      	ldr	r3, [pc, #564]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f003 0320 	and.w	r3, r3, #32
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d0f0      	beq.n	800c4f4 <HAL_RCC_OscConfig+0xa80>
 800c512:	e018      	b.n	800c546 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800c514:	4b89      	ldr	r3, [pc, #548]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a88      	ldr	r2, [pc, #544]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c51a:	f023 0310 	bic.w	r3, r3, #16
 800c51e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c520:	f7fa ff2c 	bl	800737c <HAL_GetTick>
 800c524:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c526:	e008      	b.n	800c53a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c528:	f7fa ff28 	bl	800737c <HAL_GetTick>
 800c52c:	4602      	mov	r2, r0
 800c52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	2b02      	cmp	r3, #2
 800c534:	d901      	bls.n	800c53a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800c536:	2303      	movs	r3, #3
 800c538:	e171      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c53a:	4b80      	ldr	r3, [pc, #512]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f003 0320 	and.w	r3, r3, #32
 800c542:	2b00      	cmp	r3, #0
 800c544:	d1f0      	bne.n	800c528 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	f000 8166 	beq.w	800c81c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800c550:	2300      	movs	r3, #0
 800c552:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c556:	4b79      	ldr	r3, [pc, #484]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c558:	69db      	ldr	r3, [r3, #28]
 800c55a:	f003 030c 	and.w	r3, r3, #12
 800c55e:	2b0c      	cmp	r3, #12
 800c560:	f000 80f2 	beq.w	800c748 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c568:	2b02      	cmp	r3, #2
 800c56a:	f040 80c5 	bne.w	800c6f8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800c56e:	4b73      	ldr	r3, [pc, #460]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a72      	ldr	r2, [pc, #456]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c574:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c578:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c57a:	f7fa feff 	bl	800737c <HAL_GetTick>
 800c57e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c580:	e008      	b.n	800c594 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c582:	f7fa fefb 	bl	800737c <HAL_GetTick>
 800c586:	4602      	mov	r2, r0
 800c588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	2b02      	cmp	r3, #2
 800c58e:	d901      	bls.n	800c594 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800c590:	2303      	movs	r3, #3
 800c592:	e144      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c594:	4b69      	ldr	r3, [pc, #420]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d1f0      	bne.n	800c582 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c5a0:	4b66      	ldr	r3, [pc, #408]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c5a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5a6:	f003 0304 	and.w	r3, r3, #4
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d111      	bne.n	800c5d2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800c5ae:	4b63      	ldr	r3, [pc, #396]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c5b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5b4:	4a61      	ldr	r2, [pc, #388]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c5b6:	f043 0304 	orr.w	r3, r3, #4
 800c5ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c5be:	4b5f      	ldr	r3, [pc, #380]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c5c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5c4:	f003 0304 	and.w	r3, r3, #4
 800c5c8:	60fb      	str	r3, [r7, #12]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800c5d2:	4b5b      	ldr	r3, [pc, #364]	; (800c740 <HAL_RCC_OscConfig+0xccc>)
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c5da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c5de:	d102      	bne.n	800c5e6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c5e6:	4b56      	ldr	r3, [pc, #344]	; (800c740 <HAL_RCC_OscConfig+0xccc>)
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	4a55      	ldr	r2, [pc, #340]	; (800c740 <HAL_RCC_OscConfig+0xccc>)
 800c5ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5f0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800c5f2:	4b52      	ldr	r3, [pc, #328]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c5fa:	f023 0303 	bic.w	r3, r3, #3
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c606:	3a01      	subs	r2, #1
 800c608:	0212      	lsls	r2, r2, #8
 800c60a:	4311      	orrs	r1, r2
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c610:	430a      	orrs	r2, r1
 800c612:	494a      	ldr	r1, [pc, #296]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c614:	4313      	orrs	r3, r2
 800c616:	628b      	str	r3, [r1, #40]	; 0x28
 800c618:	4b48      	ldr	r3, [pc, #288]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c61a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c61c:	4b49      	ldr	r3, [pc, #292]	; (800c744 <HAL_RCC_OscConfig+0xcd0>)
 800c61e:	4013      	ands	r3, r2
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c624:	3a01      	subs	r2, #1
 800c626:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c62e:	3a01      	subs	r2, #1
 800c630:	0252      	lsls	r2, r2, #9
 800c632:	b292      	uxth	r2, r2
 800c634:	4311      	orrs	r1, r2
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c63a:	3a01      	subs	r2, #1
 800c63c:	0412      	lsls	r2, r2, #16
 800c63e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c642:	4311      	orrs	r1, r2
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c648:	3a01      	subs	r2, #1
 800c64a:	0612      	lsls	r2, r2, #24
 800c64c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c650:	430a      	orrs	r2, r1
 800c652:	493a      	ldr	r1, [pc, #232]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c654:	4313      	orrs	r3, r2
 800c656:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800c658:	4b38      	ldr	r3, [pc, #224]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c65c:	4a37      	ldr	r2, [pc, #220]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c65e:	f023 0310 	bic.w	r3, r3, #16
 800c662:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c668:	4a34      	ldr	r2, [pc, #208]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c66a:	00db      	lsls	r3, r3, #3
 800c66c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800c66e:	4b33      	ldr	r3, [pc, #204]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c672:	4a32      	ldr	r2, [pc, #200]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c674:	f043 0310 	orr.w	r3, r3, #16
 800c678:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800c67a:	4b30      	ldr	r3, [pc, #192]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c67e:	f023 020c 	bic.w	r2, r3, #12
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c686:	492d      	ldr	r1, [pc, #180]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c688:	4313      	orrs	r3, r2
 800c68a:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800c68c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c690:	2b01      	cmp	r3, #1
 800c692:	d105      	bne.n	800c6a0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c694:	4b2a      	ldr	r3, [pc, #168]	; (800c740 <HAL_RCC_OscConfig+0xccc>)
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	4a29      	ldr	r2, [pc, #164]	; (800c740 <HAL_RCC_OscConfig+0xccc>)
 800c69a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c69e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800c6a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d107      	bne.n	800c6b8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800c6a8:	4b24      	ldr	r3, [pc, #144]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c6aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6ae:	4a23      	ldr	r2, [pc, #140]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c6b0:	f023 0304 	bic.w	r3, r3, #4
 800c6b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c6b8:	4b20      	ldr	r3, [pc, #128]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c6ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6bc:	4a1f      	ldr	r2, [pc, #124]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c6be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c6c2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800c6c4:	4b1d      	ldr	r3, [pc, #116]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a1c      	ldr	r2, [pc, #112]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c6ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c6ce:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c6d0:	f7fa fe54 	bl	800737c <HAL_GetTick>
 800c6d4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c6d6:	e008      	b.n	800c6ea <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c6d8:	f7fa fe50 	bl	800737c <HAL_GetTick>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e0:	1ad3      	subs	r3, r2, r3
 800c6e2:	2b02      	cmp	r3, #2
 800c6e4:	d901      	bls.n	800c6ea <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	e099      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c6ea:	4b14      	ldr	r3, [pc, #80]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d0f0      	beq.n	800c6d8 <HAL_RCC_OscConfig+0xc64>
 800c6f6:	e091      	b.n	800c81c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800c6f8:	4b10      	ldr	r3, [pc, #64]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a0f      	ldr	r2, [pc, #60]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c6fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c702:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c704:	f7fa fe3a 	bl	800737c <HAL_GetTick>
 800c708:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c70a:	e008      	b.n	800c71e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c70c:	f7fa fe36 	bl	800737c <HAL_GetTick>
 800c710:	4602      	mov	r2, r0
 800c712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c714:	1ad3      	subs	r3, r2, r3
 800c716:	2b02      	cmp	r3, #2
 800c718:	d901      	bls.n	800c71e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800c71a:	2303      	movs	r3, #3
 800c71c:	e07f      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c71e:	4b07      	ldr	r3, [pc, #28]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1f0      	bne.n	800c70c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800c72a:	4b04      	ldr	r3, [pc, #16]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c72e:	4a03      	ldr	r2, [pc, #12]	; (800c73c <HAL_RCC_OscConfig+0xcc8>)
 800c730:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c734:	f023 0303 	bic.w	r3, r3, #3
 800c738:	6293      	str	r3, [r2, #40]	; 0x28
 800c73a:	e06f      	b.n	800c81c <HAL_RCC_OscConfig+0xda8>
 800c73c:	46020c00 	.word	0x46020c00
 800c740:	46020800 	.word	0x46020800
 800c744:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800c748:	4b37      	ldr	r3, [pc, #220]	; (800c828 <HAL_RCC_OscConfig+0xdb4>)
 800c74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c74c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c74e:	4b36      	ldr	r3, [pc, #216]	; (800c828 <HAL_RCC_OscConfig+0xdb4>)
 800c750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c752:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d039      	beq.n	800c7d0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	f003 0203 	and.w	r2, r3, #3
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c766:	429a      	cmp	r2, r3
 800c768:	d132      	bne.n	800c7d0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	0a1b      	lsrs	r3, r3, #8
 800c76e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c776:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800c778:	429a      	cmp	r2, r3
 800c77a:	d129      	bne.n	800c7d0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800c786:	429a      	cmp	r2, r3
 800c788:	d122      	bne.n	800c7d0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c794:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800c796:	429a      	cmp	r2, r3
 800c798:	d11a      	bne.n	800c7d0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800c79a:	69bb      	ldr	r3, [r7, #24]
 800c79c:	0a5b      	lsrs	r3, r3, #9
 800c79e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d111      	bne.n	800c7d0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800c7ac:	69bb      	ldr	r3, [r7, #24]
 800c7ae:	0c1b      	lsrs	r3, r3, #16
 800c7b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7b8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d108      	bne.n	800c7d0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	0e1b      	lsrs	r3, r3, #24
 800c7c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ca:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d001      	beq.n	800c7d4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	e024      	b.n	800c81e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800c7d4:	4b14      	ldr	r3, [pc, #80]	; (800c828 <HAL_RCC_OscConfig+0xdb4>)
 800c7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d8:	08db      	lsrs	r3, r3, #3
 800c7da:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d01a      	beq.n	800c81c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800c7e6:	4b10      	ldr	r3, [pc, #64]	; (800c828 <HAL_RCC_OscConfig+0xdb4>)
 800c7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ea:	4a0f      	ldr	r2, [pc, #60]	; (800c828 <HAL_RCC_OscConfig+0xdb4>)
 800c7ec:	f023 0310 	bic.w	r3, r3, #16
 800c7f0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7f2:	f7fa fdc3 	bl	800737c <HAL_GetTick>
 800c7f6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800c7f8:	bf00      	nop
 800c7fa:	f7fa fdbf 	bl	800737c <HAL_GetTick>
 800c7fe:	4602      	mov	r2, r0
 800c800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c802:	4293      	cmp	r3, r2
 800c804:	d0f9      	beq.n	800c7fa <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c80a:	4a07      	ldr	r2, [pc, #28]	; (800c828 <HAL_RCC_OscConfig+0xdb4>)
 800c80c:	00db      	lsls	r3, r3, #3
 800c80e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800c810:	4b05      	ldr	r3, [pc, #20]	; (800c828 <HAL_RCC_OscConfig+0xdb4>)
 800c812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c814:	4a04      	ldr	r2, [pc, #16]	; (800c828 <HAL_RCC_OscConfig+0xdb4>)
 800c816:	f043 0310 	orr.w	r3, r3, #16
 800c81a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800c81c:	2300      	movs	r3, #0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3738      	adds	r7, #56	; 0x38
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	46020c00 	.word	0x46020c00

0800c82c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b086      	sub	sp, #24
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d101      	bne.n	800c840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c83c:	2301      	movs	r3, #1
 800c83e:	e1d9      	b.n	800cbf4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c840:	4b9b      	ldr	r3, [pc, #620]	; (800cab0 <HAL_RCC_ClockConfig+0x284>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f003 030f 	and.w	r3, r3, #15
 800c848:	683a      	ldr	r2, [r7, #0]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d910      	bls.n	800c870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c84e:	4b98      	ldr	r3, [pc, #608]	; (800cab0 <HAL_RCC_ClockConfig+0x284>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f023 020f 	bic.w	r2, r3, #15
 800c856:	4996      	ldr	r1, [pc, #600]	; (800cab0 <HAL_RCC_ClockConfig+0x284>)
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	4313      	orrs	r3, r2
 800c85c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c85e:	4b94      	ldr	r3, [pc, #592]	; (800cab0 <HAL_RCC_ClockConfig+0x284>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f003 030f 	and.w	r3, r3, #15
 800c866:	683a      	ldr	r2, [r7, #0]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d001      	beq.n	800c870 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c86c:	2301      	movs	r3, #1
 800c86e:	e1c1      	b.n	800cbf4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f003 0310 	and.w	r3, r3, #16
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d010      	beq.n	800c89e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	695a      	ldr	r2, [r3, #20]
 800c880:	4b8c      	ldr	r3, [pc, #560]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c884:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c888:	429a      	cmp	r2, r3
 800c88a:	d908      	bls.n	800c89e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800c88c:	4b89      	ldr	r3, [pc, #548]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c890:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	695b      	ldr	r3, [r3, #20]
 800c898:	4986      	ldr	r1, [pc, #536]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c89a:	4313      	orrs	r3, r2
 800c89c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f003 0308 	and.w	r3, r3, #8
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d012      	beq.n	800c8d0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	691a      	ldr	r2, [r3, #16]
 800c8ae:	4b81      	ldr	r3, [pc, #516]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c8b0:	6a1b      	ldr	r3, [r3, #32]
 800c8b2:	091b      	lsrs	r3, r3, #4
 800c8b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d909      	bls.n	800c8d0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800c8bc:	4b7d      	ldr	r3, [pc, #500]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c8be:	6a1b      	ldr	r3, [r3, #32]
 800c8c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	691b      	ldr	r3, [r3, #16]
 800c8c8:	011b      	lsls	r3, r3, #4
 800c8ca:	497a      	ldr	r1, [pc, #488]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f003 0304 	and.w	r3, r3, #4
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d010      	beq.n	800c8fe <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	68da      	ldr	r2, [r3, #12]
 800c8e0:	4b74      	ldr	r3, [pc, #464]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c8e2:	6a1b      	ldr	r3, [r3, #32]
 800c8e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d908      	bls.n	800c8fe <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800c8ec:	4b71      	ldr	r3, [pc, #452]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c8ee:	6a1b      	ldr	r3, [r3, #32]
 800c8f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	496e      	ldr	r1, [pc, #440]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f003 0302 	and.w	r3, r3, #2
 800c906:	2b00      	cmp	r3, #0
 800c908:	d010      	beq.n	800c92c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	689a      	ldr	r2, [r3, #8]
 800c90e:	4b69      	ldr	r3, [pc, #420]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c910:	6a1b      	ldr	r3, [r3, #32]
 800c912:	f003 030f 	and.w	r3, r3, #15
 800c916:	429a      	cmp	r2, r3
 800c918:	d908      	bls.n	800c92c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800c91a:	4b66      	ldr	r3, [pc, #408]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c91c:	6a1b      	ldr	r3, [r3, #32]
 800c91e:	f023 020f 	bic.w	r2, r3, #15
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	689b      	ldr	r3, [r3, #8]
 800c926:	4963      	ldr	r1, [pc, #396]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c928:	4313      	orrs	r3, r2
 800c92a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f003 0301 	and.w	r3, r3, #1
 800c934:	2b00      	cmp	r3, #0
 800c936:	f000 80d2 	beq.w	800cade <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800c93a:	2300      	movs	r3, #0
 800c93c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	2b03      	cmp	r3, #3
 800c944:	d143      	bne.n	800c9ce <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c946:	4b5b      	ldr	r3, [pc, #364]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c94c:	f003 0304 	and.w	r3, r3, #4
 800c950:	2b00      	cmp	r3, #0
 800c952:	d110      	bne.n	800c976 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800c954:	4b57      	ldr	r3, [pc, #348]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c95a:	4a56      	ldr	r2, [pc, #344]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c95c:	f043 0304 	orr.w	r3, r3, #4
 800c960:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c964:	4b53      	ldr	r3, [pc, #332]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c96a:	f003 0304 	and.w	r3, r3, #4
 800c96e:	60bb      	str	r3, [r7, #8]
 800c970:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800c972:	2301      	movs	r3, #1
 800c974:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800c976:	f7fa fd01 	bl	800737c <HAL_GetTick>
 800c97a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800c97c:	4b4e      	ldr	r3, [pc, #312]	; (800cab8 <HAL_RCC_ClockConfig+0x28c>)
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00f      	beq.n	800c9a8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800c988:	e008      	b.n	800c99c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800c98a:	f7fa fcf7 	bl	800737c <HAL_GetTick>
 800c98e:	4602      	mov	r2, r0
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	1ad3      	subs	r3, r2, r3
 800c994:	2b02      	cmp	r3, #2
 800c996:	d901      	bls.n	800c99c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800c998:	2303      	movs	r3, #3
 800c99a:	e12b      	b.n	800cbf4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800c99c:	4b46      	ldr	r3, [pc, #280]	; (800cab8 <HAL_RCC_ClockConfig+0x28c>)
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d0f0      	beq.n	800c98a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800c9a8:	7dfb      	ldrb	r3, [r7, #23]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d107      	bne.n	800c9be <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800c9ae:	4b41      	ldr	r3, [pc, #260]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c9b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9b4:	4a3f      	ldr	r2, [pc, #252]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c9b6:	f023 0304 	bic.w	r3, r3, #4
 800c9ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c9be:	4b3d      	ldr	r3, [pc, #244]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d121      	bne.n	800ca0e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	e112      	b.n	800cbf4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	2b02      	cmp	r3, #2
 800c9d4:	d107      	bne.n	800c9e6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c9d6:	4b37      	ldr	r3, [pc, #220]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d115      	bne.n	800ca0e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e106      	b.n	800cbf4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d107      	bne.n	800c9fe <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c9ee:	4b31      	ldr	r3, [pc, #196]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f003 0304 	and.w	r3, r3, #4
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d109      	bne.n	800ca0e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e0fa      	b.n	800cbf4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c9fe:	4b2d      	ldr	r3, [pc, #180]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d101      	bne.n	800ca0e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	e0f2      	b.n	800cbf4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800ca0e:	4b29      	ldr	r3, [pc, #164]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800ca10:	69db      	ldr	r3, [r3, #28]
 800ca12:	f023 0203 	bic.w	r2, r3, #3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	4926      	ldr	r1, [pc, #152]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800ca20:	f7fa fcac 	bl	800737c <HAL_GetTick>
 800ca24:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	2b03      	cmp	r3, #3
 800ca2c:	d112      	bne.n	800ca54 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ca2e:	e00a      	b.n	800ca46 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca30:	f7fa fca4 	bl	800737c <HAL_GetTick>
 800ca34:	4602      	mov	r2, r0
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d901      	bls.n	800ca46 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800ca42:	2303      	movs	r3, #3
 800ca44:	e0d6      	b.n	800cbf4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ca46:	4b1b      	ldr	r3, [pc, #108]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800ca48:	69db      	ldr	r3, [r3, #28]
 800ca4a:	f003 030c 	and.w	r3, r3, #12
 800ca4e:	2b0c      	cmp	r3, #12
 800ca50:	d1ee      	bne.n	800ca30 <HAL_RCC_ClockConfig+0x204>
 800ca52:	e044      	b.n	800cade <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	d112      	bne.n	800ca82 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800ca5c:	e00a      	b.n	800ca74 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca5e:	f7fa fc8d 	bl	800737c <HAL_GetTick>
 800ca62:	4602      	mov	r2, r0
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	1ad3      	subs	r3, r2, r3
 800ca68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d901      	bls.n	800ca74 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ca70:	2303      	movs	r3, #3
 800ca72:	e0bf      	b.n	800cbf4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800ca74:	4b0f      	ldr	r3, [pc, #60]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800ca76:	69db      	ldr	r3, [r3, #28]
 800ca78:	f003 030c 	and.w	r3, r3, #12
 800ca7c:	2b08      	cmp	r3, #8
 800ca7e:	d1ee      	bne.n	800ca5e <HAL_RCC_ClockConfig+0x232>
 800ca80:	e02d      	b.n	800cade <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d123      	bne.n	800cad2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800ca8a:	e00a      	b.n	800caa2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca8c:	f7fa fc76 	bl	800737c <HAL_GetTick>
 800ca90:	4602      	mov	r2, r0
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	1ad3      	subs	r3, r2, r3
 800ca96:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d901      	bls.n	800caa2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800ca9e:	2303      	movs	r3, #3
 800caa0:	e0a8      	b.n	800cbf4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800caa2:	4b04      	ldr	r3, [pc, #16]	; (800cab4 <HAL_RCC_ClockConfig+0x288>)
 800caa4:	69db      	ldr	r3, [r3, #28]
 800caa6:	f003 030c 	and.w	r3, r3, #12
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d1ee      	bne.n	800ca8c <HAL_RCC_ClockConfig+0x260>
 800caae:	e016      	b.n	800cade <HAL_RCC_ClockConfig+0x2b2>
 800cab0:	40022000 	.word	0x40022000
 800cab4:	46020c00 	.word	0x46020c00
 800cab8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cabc:	f7fa fc5e 	bl	800737c <HAL_GetTick>
 800cac0:	4602      	mov	r2, r0
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	1ad3      	subs	r3, r2, r3
 800cac6:	f241 3288 	movw	r2, #5000	; 0x1388
 800caca:	4293      	cmp	r3, r2
 800cacc:	d901      	bls.n	800cad2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800cace:	2303      	movs	r3, #3
 800cad0:	e090      	b.n	800cbf4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800cad2:	4b4a      	ldr	r3, [pc, #296]	; (800cbfc <HAL_RCC_ClockConfig+0x3d0>)
 800cad4:	69db      	ldr	r3, [r3, #28]
 800cad6:	f003 030c 	and.w	r3, r3, #12
 800cada:	2b04      	cmp	r3, #4
 800cadc:	d1ee      	bne.n	800cabc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f003 0302 	and.w	r3, r3, #2
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d010      	beq.n	800cb0c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	689a      	ldr	r2, [r3, #8]
 800caee:	4b43      	ldr	r3, [pc, #268]	; (800cbfc <HAL_RCC_ClockConfig+0x3d0>)
 800caf0:	6a1b      	ldr	r3, [r3, #32]
 800caf2:	f003 030f 	and.w	r3, r3, #15
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d208      	bcs.n	800cb0c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800cafa:	4b40      	ldr	r3, [pc, #256]	; (800cbfc <HAL_RCC_ClockConfig+0x3d0>)
 800cafc:	6a1b      	ldr	r3, [r3, #32]
 800cafe:	f023 020f 	bic.w	r2, r3, #15
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	689b      	ldr	r3, [r3, #8]
 800cb06:	493d      	ldr	r1, [pc, #244]	; (800cbfc <HAL_RCC_ClockConfig+0x3d0>)
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cb0c:	4b3c      	ldr	r3, [pc, #240]	; (800cc00 <HAL_RCC_ClockConfig+0x3d4>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f003 030f 	and.w	r3, r3, #15
 800cb14:	683a      	ldr	r2, [r7, #0]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d210      	bcs.n	800cb3c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb1a:	4b39      	ldr	r3, [pc, #228]	; (800cc00 <HAL_RCC_ClockConfig+0x3d4>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f023 020f 	bic.w	r2, r3, #15
 800cb22:	4937      	ldr	r1, [pc, #220]	; (800cc00 <HAL_RCC_ClockConfig+0x3d4>)
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb2a:	4b35      	ldr	r3, [pc, #212]	; (800cc00 <HAL_RCC_ClockConfig+0x3d4>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f003 030f 	and.w	r3, r3, #15
 800cb32:	683a      	ldr	r2, [r7, #0]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d001      	beq.n	800cb3c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e05b      	b.n	800cbf4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f003 0304 	and.w	r3, r3, #4
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d010      	beq.n	800cb6a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	68da      	ldr	r2, [r3, #12]
 800cb4c:	4b2b      	ldr	r3, [pc, #172]	; (800cbfc <HAL_RCC_ClockConfig+0x3d0>)
 800cb4e:	6a1b      	ldr	r3, [r3, #32]
 800cb50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d208      	bcs.n	800cb6a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800cb58:	4b28      	ldr	r3, [pc, #160]	; (800cbfc <HAL_RCC_ClockConfig+0x3d0>)
 800cb5a:	6a1b      	ldr	r3, [r3, #32]
 800cb5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	68db      	ldr	r3, [r3, #12]
 800cb64:	4925      	ldr	r1, [pc, #148]	; (800cbfc <HAL_RCC_ClockConfig+0x3d0>)
 800cb66:	4313      	orrs	r3, r2
 800cb68:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f003 0308 	and.w	r3, r3, #8
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d012      	beq.n	800cb9c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	691a      	ldr	r2, [r3, #16]
 800cb7a:	4b20      	ldr	r3, [pc, #128]	; (800cbfc <HAL_RCC_ClockConfig+0x3d0>)
 800cb7c:	6a1b      	ldr	r3, [r3, #32]
 800cb7e:	091b      	lsrs	r3, r3, #4
 800cb80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d209      	bcs.n	800cb9c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800cb88:	4b1c      	ldr	r3, [pc, #112]	; (800cbfc <HAL_RCC_ClockConfig+0x3d0>)
 800cb8a:	6a1b      	ldr	r3, [r3, #32]
 800cb8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	691b      	ldr	r3, [r3, #16]
 800cb94:	011b      	lsls	r3, r3, #4
 800cb96:	4919      	ldr	r1, [pc, #100]	; (800cbfc <HAL_RCC_ClockConfig+0x3d0>)
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f003 0310 	and.w	r3, r3, #16
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d010      	beq.n	800cbca <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	695a      	ldr	r2, [r3, #20]
 800cbac:	4b13      	ldr	r3, [pc, #76]	; (800cbfc <HAL_RCC_ClockConfig+0x3d0>)
 800cbae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d208      	bcs.n	800cbca <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800cbb8:	4b10      	ldr	r3, [pc, #64]	; (800cbfc <HAL_RCC_ClockConfig+0x3d0>)
 800cbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	695b      	ldr	r3, [r3, #20]
 800cbc4:	490d      	ldr	r1, [pc, #52]	; (800cbfc <HAL_RCC_ClockConfig+0x3d0>)
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800cbca:	f000 f821 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	4b0a      	ldr	r3, [pc, #40]	; (800cbfc <HAL_RCC_ClockConfig+0x3d0>)
 800cbd2:	6a1b      	ldr	r3, [r3, #32]
 800cbd4:	f003 030f 	and.w	r3, r3, #15
 800cbd8:	490a      	ldr	r1, [pc, #40]	; (800cc04 <HAL_RCC_ClockConfig+0x3d8>)
 800cbda:	5ccb      	ldrb	r3, [r1, r3]
 800cbdc:	fa22 f303 	lsr.w	r3, r2, r3
 800cbe0:	4a09      	ldr	r2, [pc, #36]	; (800cc08 <HAL_RCC_ClockConfig+0x3dc>)
 800cbe2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800cbe4:	4b09      	ldr	r3, [pc, #36]	; (800cc0c <HAL_RCC_ClockConfig+0x3e0>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7f4 fe33 	bl	8001854 <HAL_InitTick>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	73fb      	strb	r3, [r7, #15]

  return status;
 800cbf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3718      	adds	r7, #24
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	46020c00 	.word	0x46020c00
 800cc00:	40022000 	.word	0x40022000
 800cc04:	0802a7e4 	.word	0x0802a7e4
 800cc08:	20000048 	.word	0x20000048
 800cc0c:	2000004c 	.word	0x2000004c

0800cc10 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b08b      	sub	sp, #44	; 0x2c
 800cc14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800cc16:	2300      	movs	r3, #0
 800cc18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc1e:	4b7b      	ldr	r3, [pc, #492]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc20:	69db      	ldr	r3, [r3, #28]
 800cc22:	f003 030c 	and.w	r3, r3, #12
 800cc26:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cc28:	4b78      	ldr	r3, [pc, #480]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc2c:	f003 0303 	and.w	r3, r3, #3
 800cc30:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800cc32:	69bb      	ldr	r3, [r7, #24]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d005      	beq.n	800cc44 <HAL_RCC_GetSysClockFreq+0x34>
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	2b0c      	cmp	r3, #12
 800cc3c:	d121      	bne.n	800cc82 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d11e      	bne.n	800cc82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800cc44:	4b71      	ldr	r3, [pc, #452]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc46:	689b      	ldr	r3, [r3, #8]
 800cc48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d107      	bne.n	800cc60 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800cc50:	4b6e      	ldr	r3, [pc, #440]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cc56:	0b1b      	lsrs	r3, r3, #12
 800cc58:	f003 030f 	and.w	r3, r3, #15
 800cc5c:	627b      	str	r3, [r7, #36]	; 0x24
 800cc5e:	e005      	b.n	800cc6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800cc60:	4b6a      	ldr	r3, [pc, #424]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	0f1b      	lsrs	r3, r3, #28
 800cc66:	f003 030f 	and.w	r3, r3, #15
 800cc6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800cc6c:	4a68      	ldr	r2, [pc, #416]	; (800ce10 <HAL_RCC_GetSysClockFreq+0x200>)
 800cc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc74:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d110      	bne.n	800cc9e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800cc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cc80:	e00d      	b.n	800cc9e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cc82:	4b62      	ldr	r3, [pc, #392]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc84:	69db      	ldr	r3, [r3, #28]
 800cc86:	f003 030c 	and.w	r3, r3, #12
 800cc8a:	2b04      	cmp	r3, #4
 800cc8c:	d102      	bne.n	800cc94 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cc8e:	4b61      	ldr	r3, [pc, #388]	; (800ce14 <HAL_RCC_GetSysClockFreq+0x204>)
 800cc90:	623b      	str	r3, [r7, #32]
 800cc92:	e004      	b.n	800cc9e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800cc94:	69bb      	ldr	r3, [r7, #24]
 800cc96:	2b08      	cmp	r3, #8
 800cc98:	d101      	bne.n	800cc9e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cc9a:	4b5e      	ldr	r3, [pc, #376]	; (800ce14 <HAL_RCC_GetSysClockFreq+0x204>)
 800cc9c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	2b0c      	cmp	r3, #12
 800cca2:	f040 80ac 	bne.w	800cdfe <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800cca6:	4b59      	ldr	r3, [pc, #356]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccaa:	f003 0303 	and.w	r3, r3, #3
 800ccae:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ccb0:	4b56      	ldr	r3, [pc, #344]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ccb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb4:	0a1b      	lsrs	r3, r3, #8
 800ccb6:	f003 030f 	and.w	r3, r3, #15
 800ccba:	3301      	adds	r3, #1
 800ccbc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ccbe:	4b53      	ldr	r3, [pc, #332]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ccc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccc2:	091b      	lsrs	r3, r3, #4
 800ccc4:	f003 0301 	and.w	r3, r3, #1
 800ccc8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800ccca:	4b50      	ldr	r3, [pc, #320]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccce:	08db      	lsrs	r3, r3, #3
 800ccd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ccd4:	68ba      	ldr	r2, [r7, #8]
 800ccd6:	fb02 f303 	mul.w	r3, r2, r3
 800ccda:	ee07 3a90 	vmov	s15, r3
 800ccde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	f000 8086 	beq.w	800cdfa <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	2b02      	cmp	r3, #2
 800ccf2:	d003      	beq.n	800ccfc <HAL_RCC_GetSysClockFreq+0xec>
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	2b03      	cmp	r3, #3
 800ccf8:	d022      	beq.n	800cd40 <HAL_RCC_GetSysClockFreq+0x130>
 800ccfa:	e043      	b.n	800cd84 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	ee07 3a90 	vmov	s15, r3
 800cd02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd06:	eddf 6a44 	vldr	s13, [pc, #272]	; 800ce18 <HAL_RCC_GetSysClockFreq+0x208>
 800cd0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd0e:	4b3f      	ldr	r3, [pc, #252]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cd10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd16:	ee07 3a90 	vmov	s15, r3
 800cd1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cd1e:	ed97 6a01 	vldr	s12, [r7, #4]
 800cd22:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800ce1c <HAL_RCC_GetSysClockFreq+0x20c>
 800cd26:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cd2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cd2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd32:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cd36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd3a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800cd3e:	e046      	b.n	800cdce <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	ee07 3a90 	vmov	s15, r3
 800cd46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd4a:	eddf 6a33 	vldr	s13, [pc, #204]	; 800ce18 <HAL_RCC_GetSysClockFreq+0x208>
 800cd4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd52:	4b2e      	ldr	r3, [pc, #184]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cd54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd5a:	ee07 3a90 	vmov	s15, r3
 800cd5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cd62:	ed97 6a01 	vldr	s12, [r7, #4]
 800cd66:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800ce1c <HAL_RCC_GetSysClockFreq+0x20c>
 800cd6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cd6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cd72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd76:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cd7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd7e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800cd82:	e024      	b.n	800cdce <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd86:	ee07 3a90 	vmov	s15, r3
 800cd8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	ee07 3a90 	vmov	s15, r3
 800cd94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd9c:	4b1b      	ldr	r3, [pc, #108]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cd9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cda0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cda4:	ee07 3a90 	vmov	s15, r3
 800cda8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cdac:	ed97 6a01 	vldr	s12, [r7, #4]
 800cdb0:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800ce1c <HAL_RCC_GetSysClockFreq+0x20c>
 800cdb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cdb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cdbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cdc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdc8:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800cdcc:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800cdce:	4b0f      	ldr	r3, [pc, #60]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cdd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdd2:	0e1b      	lsrs	r3, r3, #24
 800cdd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdd8:	3301      	adds	r3, #1
 800cdda:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	ee07 3a90 	vmov	s15, r3
 800cde2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cde6:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdf2:	ee17 3a90 	vmov	r3, s15
 800cdf6:	623b      	str	r3, [r7, #32]
 800cdf8:	e001      	b.n	800cdfe <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800cdfe:	6a3b      	ldr	r3, [r7, #32]
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	372c      	adds	r7, #44	; 0x2c
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr
 800ce0c:	46020c00 	.word	0x46020c00
 800ce10:	0802a7fc 	.word	0x0802a7fc
 800ce14:	00f42400 	.word	0x00f42400
 800ce18:	4b742400 	.word	0x4b742400
 800ce1c:	46000000 	.word	0x46000000

0800ce20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800ce24:	f7ff fef4 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	4b07      	ldr	r3, [pc, #28]	; (800ce48 <HAL_RCC_GetHCLKFreq+0x28>)
 800ce2c:	6a1b      	ldr	r3, [r3, #32]
 800ce2e:	f003 030f 	and.w	r3, r3, #15
 800ce32:	4906      	ldr	r1, [pc, #24]	; (800ce4c <HAL_RCC_GetHCLKFreq+0x2c>)
 800ce34:	5ccb      	ldrb	r3, [r1, r3]
 800ce36:	fa22 f303 	lsr.w	r3, r2, r3
 800ce3a:	4a05      	ldr	r2, [pc, #20]	; (800ce50 <HAL_RCC_GetHCLKFreq+0x30>)
 800ce3c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800ce3e:	4b04      	ldr	r3, [pc, #16]	; (800ce50 <HAL_RCC_GetHCLKFreq+0x30>)
 800ce40:	681b      	ldr	r3, [r3, #0]
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	bd80      	pop	{r7, pc}
 800ce46:	bf00      	nop
 800ce48:	46020c00 	.word	0x46020c00
 800ce4c:	0802a7e4 	.word	0x0802a7e4
 800ce50:	20000048 	.word	0x20000048

0800ce54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800ce58:	f7ff ffe2 	bl	800ce20 <HAL_RCC_GetHCLKFreq>
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	4b05      	ldr	r3, [pc, #20]	; (800ce74 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ce60:	6a1b      	ldr	r3, [r3, #32]
 800ce62:	091b      	lsrs	r3, r3, #4
 800ce64:	f003 0307 	and.w	r3, r3, #7
 800ce68:	4903      	ldr	r1, [pc, #12]	; (800ce78 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ce6a:	5ccb      	ldrb	r3, [r1, r3]
 800ce6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	46020c00 	.word	0x46020c00
 800ce78:	0802a7f4 	.word	0x0802a7f4

0800ce7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800ce80:	f7ff ffce 	bl	800ce20 <HAL_RCC_GetHCLKFreq>
 800ce84:	4602      	mov	r2, r0
 800ce86:	4b05      	ldr	r3, [pc, #20]	; (800ce9c <HAL_RCC_GetPCLK2Freq+0x20>)
 800ce88:	6a1b      	ldr	r3, [r3, #32]
 800ce8a:	0a1b      	lsrs	r3, r3, #8
 800ce8c:	f003 0307 	and.w	r3, r3, #7
 800ce90:	4903      	ldr	r1, [pc, #12]	; (800cea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ce92:	5ccb      	ldrb	r3, [r1, r3]
 800ce94:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	46020c00 	.word	0x46020c00
 800cea0:	0802a7f4 	.word	0x0802a7f4

0800cea4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800cea8:	f7ff ffba 	bl	800ce20 <HAL_RCC_GetHCLKFreq>
 800ceac:	4602      	mov	r2, r0
 800ceae:	4b05      	ldr	r3, [pc, #20]	; (800cec4 <HAL_RCC_GetPCLK3Freq+0x20>)
 800ceb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb2:	091b      	lsrs	r3, r3, #4
 800ceb4:	f003 0307 	and.w	r3, r3, #7
 800ceb8:	4903      	ldr	r1, [pc, #12]	; (800cec8 <HAL_RCC_GetPCLK3Freq+0x24>)
 800ceba:	5ccb      	ldrb	r3, [r1, r3]
 800cebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	46020c00 	.word	0x46020c00
 800cec8:	0802a7f4 	.word	0x0802a7f4

0800cecc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	221f      	movs	r2, #31
 800ceda:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800cedc:	4b15      	ldr	r3, [pc, #84]	; (800cf34 <HAL_RCC_GetClockConfig+0x68>)
 800cede:	69db      	ldr	r3, [r3, #28]
 800cee0:	f003 0203 	and.w	r2, r3, #3
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800cee8:	4b12      	ldr	r3, [pc, #72]	; (800cf34 <HAL_RCC_GetClockConfig+0x68>)
 800ceea:	6a1b      	ldr	r3, [r3, #32]
 800ceec:	f003 020f 	and.w	r2, r3, #15
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800cef4:	4b0f      	ldr	r3, [pc, #60]	; (800cf34 <HAL_RCC_GetClockConfig+0x68>)
 800cef6:	6a1b      	ldr	r3, [r3, #32]
 800cef8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800cf00:	4b0c      	ldr	r3, [pc, #48]	; (800cf34 <HAL_RCC_GetClockConfig+0x68>)
 800cf02:	6a1b      	ldr	r3, [r3, #32]
 800cf04:	091b      	lsrs	r3, r3, #4
 800cf06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800cf0e:	4b09      	ldr	r3, [pc, #36]	; (800cf34 <HAL_RCC_GetClockConfig+0x68>)
 800cf10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cf1a:	4b07      	ldr	r3, [pc, #28]	; (800cf38 <HAL_RCC_GetClockConfig+0x6c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f003 020f 	and.w	r2, r3, #15
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	601a      	str	r2, [r3, #0]
}
 800cf26:	bf00      	nop
 800cf28:	370c      	adds	r7, #12
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop
 800cf34:	46020c00 	.word	0x46020c00
 800cf38:	40022000 	.word	0x40022000

0800cf3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b086      	sub	sp, #24
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cf44:	4b3e      	ldr	r3, [pc, #248]	; (800d040 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cf46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf4a:	f003 0304 	and.w	r3, r3, #4
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d003      	beq.n	800cf5a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800cf52:	f7fe fd11 	bl	800b978 <HAL_PWREx_GetVoltageRange>
 800cf56:	6178      	str	r0, [r7, #20]
 800cf58:	e019      	b.n	800cf8e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800cf5a:	4b39      	ldr	r3, [pc, #228]	; (800d040 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cf5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf60:	4a37      	ldr	r2, [pc, #220]	; (800d040 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cf62:	f043 0304 	orr.w	r3, r3, #4
 800cf66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800cf6a:	4b35      	ldr	r3, [pc, #212]	; (800d040 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cf6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf70:	f003 0304 	and.w	r3, r3, #4
 800cf74:	60fb      	str	r3, [r7, #12]
 800cf76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cf78:	f7fe fcfe 	bl	800b978 <HAL_PWREx_GetVoltageRange>
 800cf7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800cf7e:	4b30      	ldr	r3, [pc, #192]	; (800d040 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cf80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf84:	4a2e      	ldr	r2, [pc, #184]	; (800d040 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cf86:	f023 0304 	bic.w	r3, r3, #4
 800cf8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cf94:	d003      	beq.n	800cf9e <RCC_SetFlashLatencyFromMSIRange+0x62>
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf9c:	d109      	bne.n	800cfb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfa4:	d202      	bcs.n	800cfac <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800cfaa:	e033      	b.n	800d014 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800cfac:	2300      	movs	r3, #0
 800cfae:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800cfb0:	e030      	b.n	800d014 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfb8:	d208      	bcs.n	800cfcc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfc0:	d102      	bne.n	800cfc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800cfc2:	2303      	movs	r3, #3
 800cfc4:	613b      	str	r3, [r7, #16]
 800cfc6:	e025      	b.n	800d014 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	e035      	b.n	800d038 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfd2:	d90f      	bls.n	800cff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d109      	bne.n	800cfee <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cfe0:	d902      	bls.n	800cfe8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	613b      	str	r3, [r7, #16]
 800cfe6:	e015      	b.n	800d014 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800cfe8:	2301      	movs	r3, #1
 800cfea:	613b      	str	r3, [r7, #16]
 800cfec:	e012      	b.n	800d014 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800cfee:	2300      	movs	r3, #0
 800cff0:	613b      	str	r3, [r7, #16]
 800cff2:	e00f      	b.n	800d014 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cffa:	d109      	bne.n	800d010 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d002:	d102      	bne.n	800d00a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800d004:	2301      	movs	r3, #1
 800d006:	613b      	str	r3, [r7, #16]
 800d008:	e004      	b.n	800d014 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800d00a:	2302      	movs	r3, #2
 800d00c:	613b      	str	r3, [r7, #16]
 800d00e:	e001      	b.n	800d014 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800d010:	2301      	movs	r3, #1
 800d012:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d014:	4b0b      	ldr	r3, [pc, #44]	; (800d044 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f023 020f 	bic.w	r2, r3, #15
 800d01c:	4909      	ldr	r1, [pc, #36]	; (800d044 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	4313      	orrs	r3, r2
 800d022:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800d024:	4b07      	ldr	r3, [pc, #28]	; (800d044 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f003 030f 	and.w	r3, r3, #15
 800d02c:	693a      	ldr	r2, [r7, #16]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d001      	beq.n	800d036 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800d032:	2301      	movs	r3, #1
 800d034:	e000      	b.n	800d038 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3718      	adds	r7, #24
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	46020c00 	.word	0x46020c00
 800d044:	40022000 	.word	0x40022000

0800d048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800d048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d04c:	b0c8      	sub	sp, #288	; 0x120
 800d04e:	af00      	add	r7, sp, #0
 800d050:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d054:	2300      	movs	r3, #0
 800d056:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d05a:	2300      	movs	r3, #0
 800d05c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d068:	f002 0401 	and.w	r4, r2, #1
 800d06c:	2500      	movs	r5, #0
 800d06e:	ea54 0305 	orrs.w	r3, r4, r5
 800d072:	d00b      	beq.n	800d08c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800d074:	4bd5      	ldr	r3, [pc, #852]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d07a:	f023 0103 	bic.w	r1, r3, #3
 800d07e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d084:	4ad1      	ldr	r2, [pc, #836]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d086:	430b      	orrs	r3, r1
 800d088:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d08c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d094:	f002 0802 	and.w	r8, r2, #2
 800d098:	f04f 0900 	mov.w	r9, #0
 800d09c:	ea58 0309 	orrs.w	r3, r8, r9
 800d0a0:	d00b      	beq.n	800d0ba <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800d0a2:	4bca      	ldr	r3, [pc, #808]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d0a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d0a8:	f023 010c 	bic.w	r1, r3, #12
 800d0ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0b2:	4ac6      	ldr	r2, [pc, #792]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d0b4:	430b      	orrs	r3, r1
 800d0b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d0ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c2:	f002 0a04 	and.w	sl, r2, #4
 800d0c6:	f04f 0b00 	mov.w	fp, #0
 800d0ca:	ea5a 030b 	orrs.w	r3, sl, fp
 800d0ce:	d00b      	beq.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800d0d0:	4bbe      	ldr	r3, [pc, #760]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d0d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d0d6:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800d0da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0e0:	4aba      	ldr	r2, [pc, #744]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d0e2:	430b      	orrs	r3, r1
 800d0e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d0e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f0:	f002 0308 	and.w	r3, r2, #8
 800d0f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d0fe:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800d102:	460b      	mov	r3, r1
 800d104:	4313      	orrs	r3, r2
 800d106:	d00b      	beq.n	800d120 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800d108:	4bb0      	ldr	r3, [pc, #704]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d10a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d10e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d118:	4aac      	ldr	r2, [pc, #688]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d11a:	430b      	orrs	r3, r1
 800d11c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d128:	f002 0310 	and.w	r3, r2, #16
 800d12c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d130:	2300      	movs	r3, #0
 800d132:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d136:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800d13a:	460b      	mov	r3, r1
 800d13c:	4313      	orrs	r3, r2
 800d13e:	d00b      	beq.n	800d158 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800d140:	4ba2      	ldr	r3, [pc, #648]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d146:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d14a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d14e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d150:	4a9e      	ldr	r2, [pc, #632]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d152:	430b      	orrs	r3, r1
 800d154:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d160:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800d164:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d168:	2300      	movs	r3, #0
 800d16a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d16e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800d172:	460b      	mov	r3, r1
 800d174:	4313      	orrs	r3, r2
 800d176:	d00b      	beq.n	800d190 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800d178:	4b94      	ldr	r3, [pc, #592]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d17a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d17e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d188:	4a90      	ldr	r2, [pc, #576]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d18a:	430b      	orrs	r3, r1
 800d18c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d198:	f002 0320 	and.w	r3, r2, #32
 800d19c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d1a6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	d00b      	beq.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800d1b0:	4b86      	ldr	r3, [pc, #536]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d1b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d1b6:	f023 0107 	bic.w	r1, r3, #7
 800d1ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1c0:	4a82      	ldr	r2, [pc, #520]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d1c2:	430b      	orrs	r3, r1
 800d1c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d1c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d1d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d1d8:	2300      	movs	r3, #0
 800d1da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d1de:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800d1e2:	460b      	mov	r3, r1
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	d00b      	beq.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800d1e8:	4b78      	ldr	r3, [pc, #480]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d1ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d1ee:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800d1f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1f8:	4a74      	ldr	r2, [pc, #464]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d1fa:	430b      	orrs	r3, r1
 800d1fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d208:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d20c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d210:	2300      	movs	r3, #0
 800d212:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d216:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d21a:	460b      	mov	r3, r1
 800d21c:	4313      	orrs	r3, r2
 800d21e:	d00b      	beq.n	800d238 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800d220:	4b6a      	ldr	r3, [pc, #424]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d226:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d22a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d22e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d230:	4a66      	ldr	r2, [pc, #408]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d232:	430b      	orrs	r3, r1
 800d234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d240:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800d244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d248:	2300      	movs	r3, #0
 800d24a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d24e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800d252:	460b      	mov	r3, r1
 800d254:	4313      	orrs	r3, r2
 800d256:	d00b      	beq.n	800d270 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800d258:	4b5c      	ldr	r3, [pc, #368]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d25a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d25e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d268:	4a58      	ldr	r2, [pc, #352]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d26a:	430b      	orrs	r3, r1
 800d26c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d278:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d27c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d280:	2300      	movs	r3, #0
 800d282:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d286:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d28a:	460b      	mov	r3, r1
 800d28c:	4313      	orrs	r3, r2
 800d28e:	d00b      	beq.n	800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800d290:	4b4e      	ldr	r3, [pc, #312]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d296:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800d29a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d29e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2a0:	4a4a      	ldr	r2, [pc, #296]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d2a2:	430b      	orrs	r3, r1
 800d2a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800d2a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800d2b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d2be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	d00b      	beq.n	800d2e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800d2c8:	4b40      	ldr	r3, [pc, #256]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d2ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d2ce:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800d2d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2d8:	4a3c      	ldr	r2, [pc, #240]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d2da:	430b      	orrs	r3, r1
 800d2dc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800d2e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800d2ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d2f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	d00c      	beq.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800d300:	4b32      	ldr	r3, [pc, #200]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d302:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d306:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800d30a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d30e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d312:	4a2e      	ldr	r2, [pc, #184]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d314:	430b      	orrs	r3, r1
 800d316:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d31a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d322:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800d326:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d32a:	2300      	movs	r3, #0
 800d32c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d330:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d334:	460b      	mov	r3, r1
 800d336:	4313      	orrs	r3, r2
 800d338:	d00c      	beq.n	800d354 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800d33a:	4b24      	ldr	r3, [pc, #144]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d33c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d340:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800d344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d34c:	4a1f      	ldr	r2, [pc, #124]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d34e:	430b      	orrs	r3, r1
 800d350:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d354:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800d360:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d364:	2300      	movs	r3, #0
 800d366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d36a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d36e:	460b      	mov	r3, r1
 800d370:	4313      	orrs	r3, r2
 800d372:	d00c      	beq.n	800d38e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800d374:	4b15      	ldr	r3, [pc, #84]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d37a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800d37e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d386:	4a11      	ldr	r2, [pc, #68]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d388:	430b      	orrs	r3, r1
 800d38a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800d38e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d396:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800d39a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d39e:	2300      	movs	r3, #0
 800d3a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d3a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	d010      	beq.n	800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800d3ae:	4b07      	ldr	r3, [pc, #28]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d3b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d3b4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d3b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3c0:	4a02      	ldr	r2, [pc, #8]	; (800d3cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d3c2:	430b      	orrs	r3, r1
 800d3c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d3c8:	e002      	b.n	800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800d3ca:	bf00      	nop
 800d3cc:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d3d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d8:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800d3dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d3e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	4313      	orrs	r3, r2
 800d3ee:	d04c      	beq.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800d3f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d3f8:	2b80      	cmp	r3, #128	; 0x80
 800d3fa:	d02d      	beq.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800d3fc:	2b80      	cmp	r3, #128	; 0x80
 800d3fe:	d827      	bhi.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800d400:	2b60      	cmp	r3, #96	; 0x60
 800d402:	d02b      	beq.n	800d45c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800d404:	2b60      	cmp	r3, #96	; 0x60
 800d406:	d823      	bhi.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800d408:	2b40      	cmp	r3, #64	; 0x40
 800d40a:	d006      	beq.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800d40c:	2b40      	cmp	r3, #64	; 0x40
 800d40e:	d81f      	bhi.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800d410:	2b00      	cmp	r3, #0
 800d412:	d009      	beq.n	800d428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800d414:	2b20      	cmp	r3, #32
 800d416:	d011      	beq.n	800d43c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800d418:	e01a      	b.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d41a:	4bc0      	ldr	r3, [pc, #768]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d41e:	4abf      	ldr	r2, [pc, #764]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d424:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d426:	e01a      	b.n	800d45e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d42c:	3308      	adds	r3, #8
 800d42e:	4618      	mov	r0, r3
 800d430:	f002 fd02 	bl	800fe38 <RCCEx_PLL2_Config>
 800d434:	4603      	mov	r3, r0
 800d436:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d43a:	e010      	b.n	800d45e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d43c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d440:	332c      	adds	r3, #44	; 0x2c
 800d442:	4618      	mov	r0, r3
 800d444:	f002 fd90 	bl	800ff68 <RCCEx_PLL3_Config>
 800d448:	4603      	mov	r3, r0
 800d44a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d44e:	e006      	b.n	800d45e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d450:	2301      	movs	r3, #1
 800d452:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d456:	e002      	b.n	800d45e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800d458:	bf00      	nop
 800d45a:	e000      	b.n	800d45e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800d45c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d45e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d462:	2b00      	cmp	r3, #0
 800d464:	d10d      	bne.n	800d482 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800d466:	4bad      	ldr	r3, [pc, #692]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d468:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d46c:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800d470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d474:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d478:	4aa8      	ldr	r2, [pc, #672]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d47a:	430b      	orrs	r3, r1
 800d47c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d480:	e003      	b.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d482:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d486:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d48a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d492:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800d496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d49a:	2300      	movs	r3, #0
 800d49c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d4a0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	d053      	beq.n	800d552 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800d4aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d4b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4b6:	d033      	beq.n	800d520 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800d4b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4bc:	d82c      	bhi.n	800d518 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800d4be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d4c2:	d02f      	beq.n	800d524 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800d4c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d4c8:	d826      	bhi.n	800d518 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800d4ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4ce:	d008      	beq.n	800d4e2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800d4d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4d4:	d820      	bhi.n	800d518 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d00a      	beq.n	800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800d4da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4de:	d011      	beq.n	800d504 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d4e0:	e01a      	b.n	800d518 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d4e2:	4b8e      	ldr	r3, [pc, #568]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4e6:	4a8d      	ldr	r2, [pc, #564]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d4e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d4ec:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d4ee:	e01a      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d4f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4f4:	3308      	adds	r3, #8
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f002 fc9e 	bl	800fe38 <RCCEx_PLL2_Config>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d502:	e010      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d508:	332c      	adds	r3, #44	; 0x2c
 800d50a:	4618      	mov	r0, r3
 800d50c:	f002 fd2c 	bl	800ff68 <RCCEx_PLL3_Config>
 800d510:	4603      	mov	r3, r0
 800d512:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d516:	e006      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d518:	2301      	movs	r3, #1
 800d51a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d51e:	e002      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800d520:	bf00      	nop
 800d522:	e000      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800d524:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d526:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d10d      	bne.n	800d54a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800d52e:	4b7b      	ldr	r3, [pc, #492]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d530:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d534:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800d538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d53c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d540:	4a76      	ldr	r2, [pc, #472]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d542:	430b      	orrs	r3, r1
 800d544:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d548:	e003      	b.n	800d552 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d54a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d54e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800d552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800d55e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d562:	2300      	movs	r3, #0
 800d564:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d568:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d56c:	460b      	mov	r3, r1
 800d56e:	4313      	orrs	r3, r2
 800d570:	d046      	beq.n	800d600 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800d572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d576:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d57a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d57e:	d028      	beq.n	800d5d2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d580:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d584:	d821      	bhi.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0x582>
 800d586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d58a:	d022      	beq.n	800d5d2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d58c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d590:	d81b      	bhi.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0x582>
 800d592:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d596:	d01c      	beq.n	800d5d2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d598:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d59c:	d815      	bhi.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0x582>
 800d59e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5a2:	d008      	beq.n	800d5b6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800d5a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5a8:	d80f      	bhi.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0x582>
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d011      	beq.n	800d5d2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d5ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5b2:	d00e      	beq.n	800d5d2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d5b4:	e009      	b.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d5b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5ba:	3308      	adds	r3, #8
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f002 fc3b 	bl	800fe38 <RCCEx_PLL2_Config>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d5c8:	e004      	b.n	800d5d4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d5d0:	e000      	b.n	800d5d4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800d5d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5d4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d10d      	bne.n	800d5f8 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800d5dc:	4b4f      	ldr	r3, [pc, #316]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d5de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d5e2:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800d5e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d5ee:	4a4b      	ldr	r2, [pc, #300]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d5f0:	430b      	orrs	r3, r1
 800d5f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d5f6:	e003      	b.n	800d600 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5f8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d5fc:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800d600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d608:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d60c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d610:	2300      	movs	r3, #0
 800d612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d616:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d61a:	460b      	mov	r3, r1
 800d61c:	4313      	orrs	r3, r2
 800d61e:	d03f      	beq.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800d620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d628:	2b04      	cmp	r3, #4
 800d62a:	d81e      	bhi.n	800d66a <HAL_RCCEx_PeriphCLKConfig+0x622>
 800d62c:	a201      	add	r2, pc, #4	; (adr r2, 800d634 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800d62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d632:	bf00      	nop
 800d634:	0800d673 	.word	0x0800d673
 800d638:	0800d649 	.word	0x0800d649
 800d63c:	0800d657 	.word	0x0800d657
 800d640:	0800d673 	.word	0x0800d673
 800d644:	0800d673 	.word	0x0800d673
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d648:	4b34      	ldr	r3, [pc, #208]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d64c:	4a33      	ldr	r2, [pc, #204]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d64e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d652:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800d654:	e00e      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d65a:	332c      	adds	r3, #44	; 0x2c
 800d65c:	4618      	mov	r0, r3
 800d65e:	f002 fc83 	bl	800ff68 <RCCEx_PLL3_Config>
 800d662:	4603      	mov	r3, r0
 800d664:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d668:	e004      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d66a:	2301      	movs	r3, #1
 800d66c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d670:	e000      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800d672:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d674:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d10d      	bne.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800d67c:	4b27      	ldr	r3, [pc, #156]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d67e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d682:	f023 0107 	bic.w	r1, r3, #7
 800d686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d68a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d68e:	4a23      	ldr	r2, [pc, #140]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d690:	430b      	orrs	r3, r1
 800d692:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d696:	e003      	b.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d698:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d69c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800d6a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800d6ac:	67bb      	str	r3, [r7, #120]	; 0x78
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d6b2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	d04c      	beq.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800d6bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d6c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d6c8:	d02a      	beq.n	800d720 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800d6ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d6ce:	d821      	bhi.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800d6d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d6d4:	d026      	beq.n	800d724 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800d6d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d6da:	d81b      	bhi.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800d6dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d6e0:	d00e      	beq.n	800d700 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800d6e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d6e6:	d815      	bhi.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d01d      	beq.n	800d728 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800d6ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6f0:	d110      	bne.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d6f2:	4b0a      	ldr	r3, [pc, #40]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6f6:	4a09      	ldr	r2, [pc, #36]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d6f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6fc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800d6fe:	e014      	b.n	800d72a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d704:	332c      	adds	r3, #44	; 0x2c
 800d706:	4618      	mov	r0, r3
 800d708:	f002 fc2e 	bl	800ff68 <RCCEx_PLL3_Config>
 800d70c:	4603      	mov	r3, r0
 800d70e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d712:	e00a      	b.n	800d72a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d714:	2301      	movs	r3, #1
 800d716:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d71a:	e006      	b.n	800d72a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800d71c:	46020c00 	.word	0x46020c00
        break;
 800d720:	bf00      	nop
 800d722:	e002      	b.n	800d72a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800d724:	bf00      	nop
 800d726:	e000      	b.n	800d72a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800d728:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d72a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d10d      	bne.n	800d74e <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800d732:	4baf      	ldr	r3, [pc, #700]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d738:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800d73c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d744:	4aaa      	ldr	r2, [pc, #680]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d746:	430b      	orrs	r3, r1
 800d748:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d74c:	e003      	b.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d74e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d752:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d762:	673b      	str	r3, [r7, #112]	; 0x70
 800d764:	2300      	movs	r3, #0
 800d766:	677b      	str	r3, [r7, #116]	; 0x74
 800d768:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d76c:	460b      	mov	r3, r1
 800d76e:	4313      	orrs	r3, r2
 800d770:	f000 80b5 	beq.w	800d8de <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d774:	2300      	movs	r3, #0
 800d776:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d77a:	4b9d      	ldr	r3, [pc, #628]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d77c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d780:	f003 0304 	and.w	r3, r3, #4
 800d784:	2b00      	cmp	r3, #0
 800d786:	d113      	bne.n	800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d788:	4b99      	ldr	r3, [pc, #612]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d78a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d78e:	4a98      	ldr	r2, [pc, #608]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d790:	f043 0304 	orr.w	r3, r3, #4
 800d794:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d798:	4b95      	ldr	r3, [pc, #596]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d79a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d79e:	f003 0304 	and.w	r3, r3, #4
 800d7a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800d7a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
      pwrclkchanged = SET;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800d7b0:	4b90      	ldr	r3, [pc, #576]	; (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800d7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7b4:	4a8f      	ldr	r2, [pc, #572]	; (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800d7b6:	f043 0301 	orr.w	r3, r3, #1
 800d7ba:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d7bc:	f7f9 fdde 	bl	800737c <HAL_GetTick>
 800d7c0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d7c4:	e00b      	b.n	800d7de <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d7c6:	f7f9 fdd9 	bl	800737c <HAL_GetTick>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7d0:	1ad3      	subs	r3, r2, r3
 800d7d2:	2b02      	cmp	r3, #2
 800d7d4:	d903      	bls.n	800d7de <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800d7d6:	2303      	movs	r3, #3
 800d7d8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d7dc:	e005      	b.n	800d7ea <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d7de:	4b85      	ldr	r3, [pc, #532]	; (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800d7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7e2:	f003 0301 	and.w	r3, r3, #1
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d0ed      	beq.n	800d7c6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800d7ea:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d165      	bne.n	800d8be <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d7f2:	4b7f      	ldr	r3, [pc, #508]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d7f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d7f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d7fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800d800:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d804:	2b00      	cmp	r3, #0
 800d806:	d023      	beq.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800d808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d80c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800d810:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d814:	4293      	cmp	r3, r2
 800d816:	d01b      	beq.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d818:	4b75      	ldr	r3, [pc, #468]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d81a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d81e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d822:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d826:	4b72      	ldr	r3, [pc, #456]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d82c:	4a70      	ldr	r2, [pc, #448]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d82e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d832:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d836:	4b6e      	ldr	r3, [pc, #440]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d83c:	4a6c      	ldr	r2, [pc, #432]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d83e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d842:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d846:	4a6a      	ldr	r2, [pc, #424]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d848:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d84c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d850:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d854:	f003 0301 	and.w	r3, r3, #1
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d019      	beq.n	800d890 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d85c:	f7f9 fd8e 	bl	800737c <HAL_GetTick>
 800d860:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d864:	e00d      	b.n	800d882 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d866:	f7f9 fd89 	bl	800737c <HAL_GetTick>
 800d86a:	4602      	mov	r2, r0
 800d86c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d870:	1ad2      	subs	r2, r2, r3
 800d872:	f241 3388 	movw	r3, #5000	; 0x1388
 800d876:	429a      	cmp	r2, r3
 800d878:	d903      	bls.n	800d882 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800d87a:	2303      	movs	r3, #3
 800d87c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
            break;
 800d880:	e006      	b.n	800d890 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d882:	4b5b      	ldr	r3, [pc, #364]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d888:	f003 0302 	and.w	r3, r3, #2
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d0ea      	beq.n	800d866 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800d890:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d894:	2b00      	cmp	r3, #0
 800d896:	d10d      	bne.n	800d8b4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800d898:	4b55      	ldr	r3, [pc, #340]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d89a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d89e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d8a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8a6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800d8aa:	4a51      	ldr	r2, [pc, #324]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d8ac:	430b      	orrs	r3, r1
 800d8ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800d8b2:	e008      	b.n	800d8c6 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d8b4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d8b8:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 800d8bc:	e003      	b.n	800d8c6 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8be:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d8c2:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d8c6:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d107      	bne.n	800d8de <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d8ce:	4b48      	ldr	r3, [pc, #288]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d8d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d8d4:	4a46      	ldr	r2, [pc, #280]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d8d6:	f023 0304 	bic.w	r3, r3, #4
 800d8da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800d8de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e6:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800d8ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d8f0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	d042      	beq.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800d8fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d902:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d906:	d022      	beq.n	800d94e <HAL_RCCEx_PeriphCLKConfig+0x906>
 800d908:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d90c:	d81b      	bhi.n	800d946 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800d90e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d912:	d011      	beq.n	800d938 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800d914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d918:	d815      	bhi.n	800d946 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d019      	beq.n	800d952 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800d91e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d922:	d110      	bne.n	800d946 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d924:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d928:	3308      	adds	r3, #8
 800d92a:	4618      	mov	r0, r3
 800d92c:	f002 fa84 	bl	800fe38 <RCCEx_PLL2_Config>
 800d930:	4603      	mov	r3, r0
 800d932:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d936:	e00d      	b.n	800d954 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d938:	4b2d      	ldr	r3, [pc, #180]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d93c:	4a2c      	ldr	r2, [pc, #176]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d93e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d942:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800d944:	e006      	b.n	800d954 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d946:	2301      	movs	r3, #1
 800d948:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d94c:	e002      	b.n	800d954 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800d94e:	bf00      	nop
 800d950:	e000      	b.n	800d954 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800d952:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d954:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d10d      	bne.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800d95c:	4b24      	ldr	r3, [pc, #144]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d95e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d962:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800d966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d96a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d96e:	4a20      	ldr	r2, [pc, #128]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d970:	430b      	orrs	r3, r1
 800d972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d976:	e003      	b.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d978:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d97c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d988:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d98c:	663b      	str	r3, [r7, #96]	; 0x60
 800d98e:	2300      	movs	r3, #0
 800d990:	667b      	str	r3, [r7, #100]	; 0x64
 800d992:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d996:	460b      	mov	r3, r1
 800d998:	4313      	orrs	r3, r2
 800d99a:	d031      	beq.n	800da00 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800d99c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d9a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9a8:	d00b      	beq.n	800d9c2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800d9aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9ae:	d804      	bhi.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0x972>
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d008      	beq.n	800d9c6 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800d9b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9b8:	d007      	beq.n	800d9ca <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d9c0:	e004      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800d9c2:	bf00      	nop
 800d9c4:	e002      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800d9c6:	bf00      	nop
 800d9c8:	e000      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800d9ca:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d9cc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d111      	bne.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800d9d4:	4b06      	ldr	r3, [pc, #24]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d9d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d9da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d9de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d9e6:	4a02      	ldr	r2, [pc, #8]	; (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d9e8:	430b      	orrs	r3, r1
 800d9ea:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d9ee:	e007      	b.n	800da00 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800d9f0:	46020c00 	.word	0x46020c00
 800d9f4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9f8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d9fc:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800da00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da08:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800da0c:	65bb      	str	r3, [r7, #88]	; 0x58
 800da0e:	2300      	movs	r3, #0
 800da10:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da12:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800da16:	460b      	mov	r3, r1
 800da18:	4313      	orrs	r3, r2
 800da1a:	d00c      	beq.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800da1c:	4bb2      	ldr	r3, [pc, #712]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800da22:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800da26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800da2e:	4aae      	ldr	r2, [pc, #696]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da30:	430b      	orrs	r3, r1
 800da32:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800da36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da3e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800da42:	653b      	str	r3, [r7, #80]	; 0x50
 800da44:	2300      	movs	r3, #0
 800da46:	657b      	str	r3, [r7, #84]	; 0x54
 800da48:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800da4c:	460b      	mov	r3, r1
 800da4e:	4313      	orrs	r3, r2
 800da50:	d019      	beq.n	800da86 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800da52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800da5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da5e:	d105      	bne.n	800da6c <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800da60:	4ba1      	ldr	r3, [pc, #644]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da64:	4aa0      	ldr	r2, [pc, #640]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da6a:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800da6c:	4b9e      	ldr	r3, [pc, #632]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800da72:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800da76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800da7e:	4a9a      	ldr	r2, [pc, #616]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da80:	430b      	orrs	r3, r1
 800da82:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800da86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800da92:	64bb      	str	r3, [r7, #72]	; 0x48
 800da94:	2300      	movs	r3, #0
 800da96:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da98:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800da9c:	460b      	mov	r3, r1
 800da9e:	4313      	orrs	r3, r2
 800daa0:	d00c      	beq.n	800dabc <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800daa2:	4b91      	ldr	r3, [pc, #580]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800daa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800daa8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800daac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dab0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800dab4:	4a8c      	ldr	r2, [pc, #560]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dab6:	430b      	orrs	r3, r1
 800dab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800dabc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800dac8:	643b      	str	r3, [r7, #64]	; 0x40
 800daca:	2300      	movs	r3, #0
 800dacc:	647b      	str	r3, [r7, #68]	; 0x44
 800dace:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800dad2:	460b      	mov	r3, r1
 800dad4:	4313      	orrs	r3, r2
 800dad6:	d00c      	beq.n	800daf2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800dad8:	4b83      	ldr	r3, [pc, #524]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dade:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800dae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dae6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800daea:	4a7f      	ldr	r2, [pc, #508]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800daec:	430b      	orrs	r3, r1
 800daee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800daf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800daf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafa:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800dafe:	63bb      	str	r3, [r7, #56]	; 0x38
 800db00:	2300      	movs	r3, #0
 800db02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db04:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800db08:	460b      	mov	r3, r1
 800db0a:	4313      	orrs	r3, r2
 800db0c:	d00c      	beq.n	800db28 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800db0e:	4b76      	ldr	r3, [pc, #472]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800db14:	f023 0118 	bic.w	r1, r3, #24
 800db18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db1c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800db20:	4a71      	ldr	r2, [pc, #452]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db22:	430b      	orrs	r3, r1
 800db24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800db28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db30:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800db34:	633b      	str	r3, [r7, #48]	; 0x30
 800db36:	2300      	movs	r3, #0
 800db38:	637b      	str	r3, [r7, #52]	; 0x34
 800db3a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800db3e:	460b      	mov	r3, r1
 800db40:	4313      	orrs	r3, r2
 800db42:	d032      	beq.n	800dbaa <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800db44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800db4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800db50:	d105      	bne.n	800db5e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db52:	4b65      	ldr	r3, [pc, #404]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db56:	4a64      	ldr	r2, [pc, #400]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db5c:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800db5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800db66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800db6a:	d108      	bne.n	800db7e <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800db6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db70:	3308      	adds	r3, #8
 800db72:	4618      	mov	r0, r3
 800db74:	f002 f960 	bl	800fe38 <RCCEx_PLL2_Config>
 800db78:	4603      	mov	r3, r0
 800db7a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }
    if (ret == HAL_OK)
 800db7e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800db82:	2b00      	cmp	r3, #0
 800db84:	d10d      	bne.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800db86:	4b58      	ldr	r3, [pc, #352]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800db8c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800db90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db94:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800db98:	4a53      	ldr	r2, [pc, #332]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db9a:	430b      	orrs	r3, r1
 800db9c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800dba0:	e003      	b.n	800dbaa <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dba2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dba6:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800dbaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb2:	2100      	movs	r1, #0
 800dbb4:	62b9      	str	r1, [r7, #40]	; 0x28
 800dbb6:	f003 0301 	and.w	r3, r3, #1
 800dbba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbbc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	d04a      	beq.n	800dc5c <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800dbc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800dbce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800dbd2:	d01e      	beq.n	800dc12 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800dbd4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800dbd8:	d825      	bhi.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800dbda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dbde:	d00e      	beq.n	800dbfe <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800dbe0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dbe4:	d81f      	bhi.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d021      	beq.n	800dc2e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800dbea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dbee:	d11a      	bne.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbf0:	4b3d      	ldr	r3, [pc, #244]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf4:	4a3c      	ldr	r2, [pc, #240]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dbf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dbfa:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800dbfc:	e018      	b.n	800dc30 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dbfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc02:	3308      	adds	r3, #8
 800dc04:	4618      	mov	r0, r3
 800dc06:	f002 f917 	bl	800fe38 <RCCEx_PLL2_Config>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800dc10:	e00e      	b.n	800dc30 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dc12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc16:	332c      	adds	r3, #44	; 0x2c
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f002 f9a5 	bl	800ff68 <RCCEx_PLL3_Config>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800dc24:	e004      	b.n	800dc30 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800dc26:	2301      	movs	r3, #1
 800dc28:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dc2c:	e000      	b.n	800dc30 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800dc2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc30:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d10d      	bne.n	800dc54 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800dc38:	4b2b      	ldr	r3, [pc, #172]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dc3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dc3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dc42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc46:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800dc4a:	4927      	ldr	r1, [pc, #156]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800dc52:	e003      	b.n	800dc5c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc54:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dc58:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800dc5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc64:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800dc68:	623b      	str	r3, [r7, #32]
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	627b      	str	r3, [r7, #36]	; 0x24
 800dc6e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800dc72:	460b      	mov	r3, r1
 800dc74:	4313      	orrs	r3, r2
 800dc76:	d03d      	beq.n	800dcf4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800dc78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dc84:	d00e      	beq.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800dc86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dc8a:	d815      	bhi.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d017      	beq.n	800dcc0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800dc90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dc94:	d110      	bne.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc96:	4b14      	ldr	r3, [pc, #80]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dc98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc9a:	4a13      	ldr	r2, [pc, #76]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dc9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dca0:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800dca2:	e00e      	b.n	800dcc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dca8:	3308      	adds	r3, #8
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f002 f8c4 	bl	800fe38 <RCCEx_PLL2_Config>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800dcb6:	e004      	b.n	800dcc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800dcb8:	2301      	movs	r3, #1
 800dcba:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dcbe:	e000      	b.n	800dcc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800dcc0:	bf00      	nop
    }
    if (ret == HAL_OK)
 800dcc2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d110      	bne.n	800dcec <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800dcca:	4b07      	ldr	r3, [pc, #28]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dcd0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800dcd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcdc:	4902      	ldr	r1, [pc, #8]	; (800dce8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dcde:	4313      	orrs	r3, r2
 800dce0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800dce4:	e006      	b.n	800dcf4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800dce6:	bf00      	nop
 800dce8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcec:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dcf0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800dcf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800dd00:	61bb      	str	r3, [r7, #24]
 800dd02:	2300      	movs	r3, #0
 800dd04:	61fb      	str	r3, [r7, #28]
 800dd06:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	d00c      	beq.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800dd10:	4b68      	ldr	r3, [pc, #416]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800dd12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dd16:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800dd1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd1e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800dd22:	4964      	ldr	r1, [pc, #400]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800dd24:	4313      	orrs	r3, r2
 800dd26:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dd2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd32:	2100      	movs	r1, #0
 800dd34:	6139      	str	r1, [r7, #16]
 800dd36:	f003 0302 	and.w	r3, r3, #2
 800dd3a:	617b      	str	r3, [r7, #20]
 800dd3c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dd40:	460b      	mov	r3, r1
 800dd42:	4313      	orrs	r3, r2
 800dd44:	d036      	beq.n	800ddb4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800dd46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd4a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d00c      	beq.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800dd52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dd56:	d113      	bne.n	800dd80 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dd58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd5c:	3308      	adds	r3, #8
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f002 f86a 	bl	800fe38 <RCCEx_PLL2_Config>
 800dd64:	4603      	mov	r3, r0
 800dd66:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800dd6a:	e00d      	b.n	800dd88 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dd6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd70:	332c      	adds	r3, #44	; 0x2c
 800dd72:	4618      	mov	r0, r3
 800dd74:	f002 f8f8 	bl	800ff68 <RCCEx_PLL3_Config>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800dd7e:	e003      	b.n	800dd88 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800dd80:	2301      	movs	r3, #1
 800dd82:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dd86:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd88:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d10d      	bne.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800dd90:	4b48      	ldr	r3, [pc, #288]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800dd92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dd96:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800dd9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800dda2:	4944      	ldr	r1, [pc, #272]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800dda4:	4313      	orrs	r3, r2
 800dda6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800ddaa:	e003      	b.n	800ddb4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddac:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ddb0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800ddb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbc:	2100      	movs	r1, #0
 800ddbe:	60b9      	str	r1, [r7, #8]
 800ddc0:	f003 0304 	and.w	r3, r3, #4
 800ddc4:	60fb      	str	r3, [r7, #12]
 800ddc6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ddca:	460b      	mov	r3, r1
 800ddcc:	4313      	orrs	r3, r2
 800ddce:	d024      	beq.n	800de1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800ddd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d108      	bne.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dde0:	332c      	adds	r3, #44	; 0x2c
 800dde2:	4618      	mov	r0, r3
 800dde4:	f002 f8c0 	bl	800ff68 <RCCEx_PLL3_Config>
 800dde8:	4603      	mov	r3, r0
 800ddea:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }

    if (ret == HAL_OK)
 800ddee:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d10d      	bne.n	800de12 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800ddf6:	4b2f      	ldr	r3, [pc, #188]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800ddf8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ddfc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800de00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800de08:	492a      	ldr	r1, [pc, #168]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800de0a:	4313      	orrs	r3, r2
 800de0c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800de10:	e003      	b.n	800de1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de12:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800de16:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800de1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de22:	2100      	movs	r1, #0
 800de24:	6039      	str	r1, [r7, #0]
 800de26:	f003 0308 	and.w	r3, r3, #8
 800de2a:	607b      	str	r3, [r7, #4]
 800de2c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800de30:	460b      	mov	r3, r1
 800de32:	4313      	orrs	r3, r2
 800de34:	d036      	beq.n	800dea4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800de36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de3a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800de3e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800de42:	d00d      	beq.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800de44:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800de48:	d811      	bhi.n	800de6e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800de4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de4e:	d012      	beq.n	800de76 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800de50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de54:	d80b      	bhi.n	800de6e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800de56:	2b00      	cmp	r3, #0
 800de58:	d00d      	beq.n	800de76 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800de5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de5e:	d106      	bne.n	800de6e <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800de60:	4b14      	ldr	r3, [pc, #80]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800de62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de64:	4a13      	ldr	r2, [pc, #76]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800de66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de6a:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800de6c:	e004      	b.n	800de78 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800de6e:	2301      	movs	r3, #1
 800de70:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800de74:	e000      	b.n	800de78 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800de76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de78:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d10d      	bne.n	800de9c <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800de80:	4b0c      	ldr	r3, [pc, #48]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800de82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800de86:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800de8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800de92:	4908      	ldr	r1, [pc, #32]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800de94:	4313      	orrs	r3, r2
 800de96:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800de9a:	e003      	b.n	800dea4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de9c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dea0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800dea4:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800deae:	46bd      	mov	sp, r7
 800deb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800deb4:	46020c00 	.word	0x46020c00

0800deb8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800deb8:	b480      	push	{r7}
 800deba:	b089      	sub	sp, #36	; 0x24
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800dec0:	4bad      	ldr	r3, [pc, #692]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800dec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dec8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800deca:	4bab      	ldr	r3, [pc, #684]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800decc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dece:	f003 0303 	and.w	r3, r3, #3
 800ded2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ded4:	4ba8      	ldr	r3, [pc, #672]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ded6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ded8:	0a1b      	lsrs	r3, r3, #8
 800deda:	f003 030f 	and.w	r3, r3, #15
 800dede:	3301      	adds	r3, #1
 800dee0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800dee2:	4ba5      	ldr	r3, [pc, #660]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800dee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dee6:	091b      	lsrs	r3, r3, #4
 800dee8:	f003 0301 	and.w	r3, r3, #1
 800deec:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800deee:	4ba2      	ldr	r3, [pc, #648]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800def0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def2:	08db      	lsrs	r3, r3, #3
 800def4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800def8:	68fa      	ldr	r2, [r7, #12]
 800defa:	fb02 f303 	mul.w	r3, r2, r3
 800defe:	ee07 3a90 	vmov	s15, r3
 800df02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df06:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	f000 8123 	beq.w	800e158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	2b03      	cmp	r3, #3
 800df16:	d062      	beq.n	800dfde <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	2b03      	cmp	r3, #3
 800df1c:	f200 8081 	bhi.w	800e022 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	2b01      	cmp	r3, #1
 800df24:	d024      	beq.n	800df70 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	2b02      	cmp	r3, #2
 800df2a:	d17a      	bne.n	800e022 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	ee07 3a90 	vmov	s15, r3
 800df32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df36:	eddf 6a91 	vldr	s13, [pc, #580]	; 800e17c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800df3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df3e:	4b8e      	ldr	r3, [pc, #568]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800df40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df46:	ee07 3a90 	vmov	s15, r3
 800df4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800df4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800df52:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800e180 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800df56:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800df5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800df5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df62:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800df66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df6e:	e08f      	b.n	800e090 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800df70:	4b81      	ldr	r3, [pc, #516]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d005      	beq.n	800df88 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 800df7c:	4b7e      	ldr	r3, [pc, #504]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	0f1b      	lsrs	r3, r3, #28
 800df82:	f003 030f 	and.w	r3, r3, #15
 800df86:	e006      	b.n	800df96 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 800df88:	4b7b      	ldr	r3, [pc, #492]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800df8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800df8e:	041b      	lsls	r3, r3, #16
 800df90:	0f1b      	lsrs	r3, r3, #28
 800df92:	f003 030f 	and.w	r3, r3, #15
 800df96:	4a7b      	ldr	r2, [pc, #492]	; (800e184 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800df98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df9c:	ee07 3a90 	vmov	s15, r3
 800dfa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	ee07 3a90 	vmov	s15, r3
 800dfaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dfb2:	69bb      	ldr	r3, [r7, #24]
 800dfb4:	ee07 3a90 	vmov	s15, r3
 800dfb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfbc:	ed97 6a02 	vldr	s12, [r7, #8]
 800dfc0:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800e180 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800dfc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dfd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800dfd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dfdc:	e058      	b.n	800e090 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	ee07 3a90 	vmov	s15, r3
 800dfe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfe8:	eddf 6a64 	vldr	s13, [pc, #400]	; 800e17c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800dfec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dff0:	4b61      	ldr	r3, [pc, #388]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800dff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dff8:	ee07 3a90 	vmov	s15, r3
 800dffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e000:	ed97 6a02 	vldr	s12, [r7, #8]
 800e004:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800e180 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e008:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e00c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e014:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e01c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e020:	e036      	b.n	800e090 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e022:	4b55      	ldr	r3, [pc, #340]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e024:	689b      	ldr	r3, [r3, #8]
 800e026:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d005      	beq.n	800e03a <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 800e02e:	4b52      	ldr	r3, [pc, #328]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e030:	689b      	ldr	r3, [r3, #8]
 800e032:	0f1b      	lsrs	r3, r3, #28
 800e034:	f003 030f 	and.w	r3, r3, #15
 800e038:	e006      	b.n	800e048 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 800e03a:	4b4f      	ldr	r3, [pc, #316]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e03c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e040:	041b      	lsls	r3, r3, #16
 800e042:	0f1b      	lsrs	r3, r3, #28
 800e044:	f003 030f 	and.w	r3, r3, #15
 800e048:	4a4e      	ldr	r2, [pc, #312]	; (800e184 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800e04a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e04e:	ee07 3a90 	vmov	s15, r3
 800e052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	ee07 3a90 	vmov	s15, r3
 800e05c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e064:	69bb      	ldr	r3, [r7, #24]
 800e066:	ee07 3a90 	vmov	s15, r3
 800e06a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e06e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e072:	eddf 5a43 	vldr	s11, [pc, #268]	; 800e180 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e07a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e07e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e082:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e08a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e08e:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800e090:	4b39      	ldr	r3, [pc, #228]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d017      	beq.n	800e0cc <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e09c:	4b36      	ldr	r3, [pc, #216]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0a0:	0a5b      	lsrs	r3, r3, #9
 800e0a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0a6:	ee07 3a90 	vmov	s15, r3
 800e0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800e0ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e0b2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e0b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0c2:	ee17 2a90 	vmov	r2, s15
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	601a      	str	r2, [r3, #0]
 800e0ca:	e002      	b.n	800e0d2 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800e0d2:	4b29      	ldr	r3, [pc, #164]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d017      	beq.n	800e10e <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e0de:	4b26      	ldr	r3, [pc, #152]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e0e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0e2:	0c1b      	lsrs	r3, r3, #16
 800e0e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0e8:	ee07 3a90 	vmov	s15, r3
 800e0ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800e0f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e0f4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e0f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e104:	ee17 2a90 	vmov	r2, s15
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	605a      	str	r2, [r3, #4]
 800e10c:	e002      	b.n	800e114 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2200      	movs	r2, #0
 800e112:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800e114:	4b18      	ldr	r3, [pc, #96]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d017      	beq.n	800e150 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e120:	4b15      	ldr	r3, [pc, #84]	; (800e178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e124:	0e1b      	lsrs	r3, r3, #24
 800e126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e12a:	ee07 3a90 	vmov	s15, r3
 800e12e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800e132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e136:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e13a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e13e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e146:	ee17 2a90 	vmov	r2, s15
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e14e:	e00c      	b.n	800e16a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	609a      	str	r2, [r3, #8]
}
 800e156:	e008      	b.n	800e16a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2200      	movs	r2, #0
 800e162:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	609a      	str	r2, [r3, #8]
}
 800e16a:	bf00      	nop
 800e16c:	3724      	adds	r7, #36	; 0x24
 800e16e:	46bd      	mov	sp, r7
 800e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e174:	4770      	bx	lr
 800e176:	bf00      	nop
 800e178:	46020c00 	.word	0x46020c00
 800e17c:	4b742400 	.word	0x4b742400
 800e180:	46000000 	.word	0x46000000
 800e184:	0802a7fc 	.word	0x0802a7fc

0800e188 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e188:	b480      	push	{r7}
 800e18a:	b089      	sub	sp, #36	; 0x24
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800e190:	4bad      	ldr	r3, [pc, #692]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e198:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800e19a:	4bab      	ldr	r3, [pc, #684]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e19e:	f003 0303 	and.w	r3, r3, #3
 800e1a2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800e1a4:	4ba8      	ldr	r3, [pc, #672]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a8:	0a1b      	lsrs	r3, r3, #8
 800e1aa:	f003 030f 	and.w	r3, r3, #15
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800e1b2:	4ba5      	ldr	r3, [pc, #660]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b6:	091b      	lsrs	r3, r3, #4
 800e1b8:	f003 0301 	and.w	r3, r3, #1
 800e1bc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800e1be:	4ba2      	ldr	r3, [pc, #648]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1c2:	08db      	lsrs	r3, r3, #3
 800e1c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e1c8:	68fa      	ldr	r2, [r7, #12]
 800e1ca:	fb02 f303 	mul.w	r3, r2, r3
 800e1ce:	ee07 3a90 	vmov	s15, r3
 800e1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1d6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f000 8123 	beq.w	800e428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	2b03      	cmp	r3, #3
 800e1e6:	d062      	beq.n	800e2ae <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	2b03      	cmp	r3, #3
 800e1ec:	f200 8081 	bhi.w	800e2f2 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d024      	beq.n	800e240 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	2b02      	cmp	r3, #2
 800e1fa:	d17a      	bne.n	800e2f2 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	ee07 3a90 	vmov	s15, r3
 800e202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e206:	eddf 6a91 	vldr	s13, [pc, #580]	; 800e44c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800e20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e20e:	4b8e      	ldr	r3, [pc, #568]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e216:	ee07 3a90 	vmov	s15, r3
 800e21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e21e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e222:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800e450 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e226:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e22e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e232:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e23a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e23e:	e08f      	b.n	800e360 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e240:	4b81      	ldr	r3, [pc, #516]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e242:	689b      	ldr	r3, [r3, #8]
 800e244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d005      	beq.n	800e258 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 800e24c:	4b7e      	ldr	r3, [pc, #504]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e24e:	689b      	ldr	r3, [r3, #8]
 800e250:	0f1b      	lsrs	r3, r3, #28
 800e252:	f003 030f 	and.w	r3, r3, #15
 800e256:	e006      	b.n	800e266 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 800e258:	4b7b      	ldr	r3, [pc, #492]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e25a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e25e:	041b      	lsls	r3, r3, #16
 800e260:	0f1b      	lsrs	r3, r3, #28
 800e262:	f003 030f 	and.w	r3, r3, #15
 800e266:	4a7b      	ldr	r2, [pc, #492]	; (800e454 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800e268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e26c:	ee07 3a90 	vmov	s15, r3
 800e270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	ee07 3a90 	vmov	s15, r3
 800e27a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e27e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e282:	69bb      	ldr	r3, [r7, #24]
 800e284:	ee07 3a90 	vmov	s15, r3
 800e288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e28c:	ed97 6a02 	vldr	s12, [r7, #8]
 800e290:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800e450 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e294:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e298:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e29c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e2a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e2a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e2ac:	e058      	b.n	800e360 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	ee07 3a90 	vmov	s15, r3
 800e2b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2b8:	eddf 6a64 	vldr	s13, [pc, #400]	; 800e44c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800e2bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2c0:	4b61      	ldr	r3, [pc, #388]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e2c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2c8:	ee07 3a90 	vmov	s15, r3
 800e2cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e2d0:	ed97 6a02 	vldr	s12, [r7, #8]
 800e2d4:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800e450 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e2d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e2dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e2e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e2e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e2e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e2f0:	e036      	b.n	800e360 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e2f2:	4b55      	ldr	r3, [pc, #340]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e2f4:	689b      	ldr	r3, [r3, #8]
 800e2f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d005      	beq.n	800e30a <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 800e2fe:	4b52      	ldr	r3, [pc, #328]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e300:	689b      	ldr	r3, [r3, #8]
 800e302:	0f1b      	lsrs	r3, r3, #28
 800e304:	f003 030f 	and.w	r3, r3, #15
 800e308:	e006      	b.n	800e318 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 800e30a:	4b4f      	ldr	r3, [pc, #316]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e30c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e310:	041b      	lsls	r3, r3, #16
 800e312:	0f1b      	lsrs	r3, r3, #28
 800e314:	f003 030f 	and.w	r3, r3, #15
 800e318:	4a4e      	ldr	r2, [pc, #312]	; (800e454 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800e31a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e31e:	ee07 3a90 	vmov	s15, r3
 800e322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	ee07 3a90 	vmov	s15, r3
 800e32c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e330:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e334:	69bb      	ldr	r3, [r7, #24]
 800e336:	ee07 3a90 	vmov	s15, r3
 800e33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e33e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e342:	eddf 5a43 	vldr	s11, [pc, #268]	; 800e450 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e34e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e352:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e35a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e35e:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800e360:	4b39      	ldr	r3, [pc, #228]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d017      	beq.n	800e39c <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e36c:	4b36      	ldr	r3, [pc, #216]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e36e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e370:	0a5b      	lsrs	r3, r3, #9
 800e372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e376:	ee07 3a90 	vmov	s15, r3
 800e37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800e37e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e382:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e386:	edd7 6a07 	vldr	s13, [r7, #28]
 800e38a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e38e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e392:	ee17 2a90 	vmov	r2, s15
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	601a      	str	r2, [r3, #0]
 800e39a:	e002      	b.n	800e3a2 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800e3a2:	4b29      	ldr	r3, [pc, #164]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d017      	beq.n	800e3de <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e3ae:	4b26      	ldr	r3, [pc, #152]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e3b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3b2:	0c1b      	lsrs	r3, r3, #16
 800e3b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3b8:	ee07 3a90 	vmov	s15, r3
 800e3bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800e3c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e3c4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e3c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800e3cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e3d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3d4:	ee17 2a90 	vmov	r2, s15
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	605a      	str	r2, [r3, #4]
 800e3dc:	e002      	b.n	800e3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800e3e4:	4b18      	ldr	r3, [pc, #96]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d017      	beq.n	800e420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e3f0:	4b15      	ldr	r3, [pc, #84]	; (800e448 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e3f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3f4:	0e1b      	lsrs	r3, r3, #24
 800e3f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3fa:	ee07 3a90 	vmov	s15, r3
 800e3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800e402:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e406:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e40a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e40e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e416:	ee17 2a90 	vmov	r2, s15
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e41e:	e00c      	b.n	800e43a <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2200      	movs	r2, #0
 800e424:	609a      	str	r2, [r3, #8]
}
 800e426:	e008      	b.n	800e43a <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2200      	movs	r2, #0
 800e42c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2200      	movs	r2, #0
 800e432:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2200      	movs	r2, #0
 800e438:	609a      	str	r2, [r3, #8]
}
 800e43a:	bf00      	nop
 800e43c:	3724      	adds	r7, #36	; 0x24
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr
 800e446:	bf00      	nop
 800e448:	46020c00 	.word	0x46020c00
 800e44c:	4b742400 	.word	0x4b742400
 800e450:	46000000 	.word	0x46000000
 800e454:	0802a7fc 	.word	0x0802a7fc

0800e458 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e458:	b480      	push	{r7}
 800e45a:	b089      	sub	sp, #36	; 0x24
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800e460:	4bad      	ldr	r3, [pc, #692]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e468:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800e46a:	4bab      	ldr	r3, [pc, #684]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e46e:	f003 0303 	and.w	r3, r3, #3
 800e472:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800e474:	4ba8      	ldr	r3, [pc, #672]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e478:	0a1b      	lsrs	r3, r3, #8
 800e47a:	f003 030f 	and.w	r3, r3, #15
 800e47e:	3301      	adds	r3, #1
 800e480:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800e482:	4ba5      	ldr	r3, [pc, #660]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e486:	091b      	lsrs	r3, r3, #4
 800e488:	f003 0301 	and.w	r3, r3, #1
 800e48c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800e48e:	4ba2      	ldr	r3, [pc, #648]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e492:	08db      	lsrs	r3, r3, #3
 800e494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e498:	68fa      	ldr	r2, [r7, #12]
 800e49a:	fb02 f303 	mul.w	r3, r2, r3
 800e49e:	ee07 3a90 	vmov	s15, r3
 800e4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4a6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	f000 8123 	beq.w	800e6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	2b03      	cmp	r3, #3
 800e4b6:	d062      	beq.n	800e57e <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	2b03      	cmp	r3, #3
 800e4bc:	f200 8081 	bhi.w	800e5c2 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	2b01      	cmp	r3, #1
 800e4c4:	d024      	beq.n	800e510 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d17a      	bne.n	800e5c2 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	ee07 3a90 	vmov	s15, r3
 800e4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4d6:	eddf 6a91 	vldr	s13, [pc, #580]	; 800e71c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800e4da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e4de:	4b8e      	ldr	r3, [pc, #568]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e4e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4e6:	ee07 3a90 	vmov	s15, r3
 800e4ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800e4ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800e4f2:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800e720 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800e4f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e4fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800e4fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e502:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e50a:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800e50e:	e08f      	b.n	800e630 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e510:	4b81      	ldr	r3, [pc, #516]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e512:	689b      	ldr	r3, [r3, #8]
 800e514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d005      	beq.n	800e528 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 800e51c:	4b7e      	ldr	r3, [pc, #504]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e51e:	689b      	ldr	r3, [r3, #8]
 800e520:	0f1b      	lsrs	r3, r3, #28
 800e522:	f003 030f 	and.w	r3, r3, #15
 800e526:	e006      	b.n	800e536 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 800e528:	4b7b      	ldr	r3, [pc, #492]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e52a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e52e:	041b      	lsls	r3, r3, #16
 800e530:	0f1b      	lsrs	r3, r3, #28
 800e532:	f003 030f 	and.w	r3, r3, #15
 800e536:	4a7b      	ldr	r2, [pc, #492]	; (800e724 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800e538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e53c:	ee07 3a90 	vmov	s15, r3
 800e540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	ee07 3a90 	vmov	s15, r3
 800e54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e54e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e552:	69bb      	ldr	r3, [r7, #24]
 800e554:	ee07 3a90 	vmov	s15, r3
 800e558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e55c:	ed97 6a02 	vldr	s12, [r7, #8]
 800e560:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800e720 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800e564:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e568:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e56c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e570:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e574:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e578:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e57c:	e058      	b.n	800e630 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	ee07 3a90 	vmov	s15, r3
 800e584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e588:	eddf 6a64 	vldr	s13, [pc, #400]	; 800e71c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800e58c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e590:	4b61      	ldr	r3, [pc, #388]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e598:	ee07 3a90 	vmov	s15, r3
 800e59c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800e5a0:	ed97 6a02 	vldr	s12, [r7, #8]
 800e5a4:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800e720 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800e5a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e5ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800e5b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e5b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e5b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e5c0:	e036      	b.n	800e630 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e5c2:	4b55      	ldr	r3, [pc, #340]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e5c4:	689b      	ldr	r3, [r3, #8]
 800e5c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d005      	beq.n	800e5da <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 800e5ce:	4b52      	ldr	r3, [pc, #328]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e5d0:	689b      	ldr	r3, [r3, #8]
 800e5d2:	0f1b      	lsrs	r3, r3, #28
 800e5d4:	f003 030f 	and.w	r3, r3, #15
 800e5d8:	e006      	b.n	800e5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 800e5da:	4b4f      	ldr	r3, [pc, #316]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e5dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e5e0:	041b      	lsls	r3, r3, #16
 800e5e2:	0f1b      	lsrs	r3, r3, #28
 800e5e4:	f003 030f 	and.w	r3, r3, #15
 800e5e8:	4a4e      	ldr	r2, [pc, #312]	; (800e724 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800e5ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5ee:	ee07 3a90 	vmov	s15, r3
 800e5f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	ee07 3a90 	vmov	s15, r3
 800e5fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	ee07 3a90 	vmov	s15, r3
 800e60a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e60e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e612:	eddf 5a43 	vldr	s11, [pc, #268]	; 800e720 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800e616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e61a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e61e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e622:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e62a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e62e:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800e630:	4b39      	ldr	r3, [pc, #228]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d017      	beq.n	800e66c <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e63c:	4b36      	ldr	r3, [pc, #216]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e63e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e640:	0a5b      	lsrs	r3, r3, #9
 800e642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e646:	ee07 3a90 	vmov	s15, r3
 800e64a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800e64e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e652:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e656:	edd7 6a07 	vldr	s13, [r7, #28]
 800e65a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e65e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e662:	ee17 2a90 	vmov	r2, s15
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	601a      	str	r2, [r3, #0]
 800e66a:	e002      	b.n	800e672 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2200      	movs	r2, #0
 800e670:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800e672:	4b29      	ldr	r3, [pc, #164]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d017      	beq.n	800e6ae <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e67e:	4b26      	ldr	r3, [pc, #152]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e682:	0c1b      	lsrs	r3, r3, #16
 800e684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e688:	ee07 3a90 	vmov	s15, r3
 800e68c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800e690:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e694:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e698:	edd7 6a07 	vldr	s13, [r7, #28]
 800e69c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6a4:	ee17 2a90 	vmov	r2, s15
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	605a      	str	r2, [r3, #4]
 800e6ac:	e002      	b.n	800e6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800e6b4:	4b18      	ldr	r3, [pc, #96]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e6b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d017      	beq.n	800e6f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e6c0:	4b15      	ldr	r3, [pc, #84]	; (800e718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e6c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6c4:	0e1b      	lsrs	r3, r3, #24
 800e6c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6ca:	ee07 3a90 	vmov	s15, r3
 800e6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800e6d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e6d6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e6da:	edd7 6a07 	vldr	s13, [r7, #28]
 800e6de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6e6:	ee17 2a90 	vmov	r2, s15
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800e6ee:	e00c      	b.n	800e70a <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	609a      	str	r2, [r3, #8]
}
 800e6f6:	e008      	b.n	800e70a <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2200      	movs	r2, #0
 800e702:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2200      	movs	r2, #0
 800e708:	609a      	str	r2, [r3, #8]
}
 800e70a:	bf00      	nop
 800e70c:	3724      	adds	r7, #36	; 0x24
 800e70e:	46bd      	mov	sp, r7
 800e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e714:	4770      	bx	lr
 800e716:	bf00      	nop
 800e718:	46020c00 	.word	0x46020c00
 800e71c:	4b742400 	.word	0x4b742400
 800e720:	46000000 	.word	0x46000000
 800e724:	0802a7fc 	.word	0x0802a7fc

0800e728 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b08e      	sub	sp, #56	; 0x38
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800e732:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e736:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800e73a:	430b      	orrs	r3, r1
 800e73c:	d145      	bne.n	800e7ca <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800e73e:	4ba7      	ldr	r3, [pc, #668]	; (800e9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e748:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800e74a:	4ba4      	ldr	r3, [pc, #656]	; (800e9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e74c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e750:	f003 0302 	and.w	r3, r3, #2
 800e754:	2b02      	cmp	r3, #2
 800e756:	d108      	bne.n	800e76a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800e758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e75e:	d104      	bne.n	800e76a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800e760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e764:	637b      	str	r3, [r7, #52]	; 0x34
 800e766:	f001 bb58 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800e76a:	4b9c      	ldr	r3, [pc, #624]	; (800e9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e76c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e774:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e778:	d114      	bne.n	800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800e77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e77c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e780:	d110      	bne.n	800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e782:	4b96      	ldr	r3, [pc, #600]	; (800e9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e78c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e790:	d103      	bne.n	800e79a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800e792:	23fa      	movs	r3, #250	; 0xfa
 800e794:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e796:	f001 bb40 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800e79a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e79e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e7a0:	f001 bb3b 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800e7a4:	4b8d      	ldr	r3, [pc, #564]	; (800e9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e7ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e7b0:	d107      	bne.n	800e7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800e7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e7b8:	d103      	bne.n	800e7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800e7ba:	4b89      	ldr	r3, [pc, #548]	; (800e9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800e7bc:	637b      	str	r3, [r7, #52]	; 0x34
 800e7be:	f001 bb2c 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	637b      	str	r3, [r7, #52]	; 0x34
 800e7c6:	f001 bb28 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e7ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7ce:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800e7d2:	430b      	orrs	r3, r1
 800e7d4:	d151      	bne.n	800e87a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800e7d6:	4b81      	ldr	r3, [pc, #516]	; (800e9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e7d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e7dc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800e7e0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e4:	2b80      	cmp	r3, #128	; 0x80
 800e7e6:	d035      	beq.n	800e854 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800e7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ea:	2b80      	cmp	r3, #128	; 0x80
 800e7ec:	d841      	bhi.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f0:	2b60      	cmp	r3, #96	; 0x60
 800e7f2:	d02a      	beq.n	800e84a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800e7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f6:	2b60      	cmp	r3, #96	; 0x60
 800e7f8:	d83b      	bhi.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fc:	2b40      	cmp	r3, #64	; 0x40
 800e7fe:	d009      	beq.n	800e814 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e802:	2b40      	cmp	r3, #64	; 0x40
 800e804:	d835      	bhi.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d00c      	beq.n	800e826 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800e80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80e:	2b20      	cmp	r3, #32
 800e810:	d012      	beq.n	800e838 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800e812:	e02e      	b.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e818:	4618      	mov	r0, r3
 800e81a:	f7ff fb4d 	bl	800deb8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e820:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e822:	f001 bafa 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e826:	f107 0318 	add.w	r3, r7, #24
 800e82a:	4618      	mov	r0, r3
 800e82c:	f7ff fcac 	bl	800e188 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800e830:	69bb      	ldr	r3, [r7, #24]
 800e832:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e834:	f001 baf1 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e838:	f107 030c 	add.w	r3, r7, #12
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7ff fe0b 	bl	800e458 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e846:	f001 bae8 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e84a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e84e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e850:	f001 bae3 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e854:	4b61      	ldr	r3, [pc, #388]	; (800e9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e85c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e860:	d103      	bne.n	800e86a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800e862:	4b60      	ldr	r3, [pc, #384]	; (800e9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e864:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e866:	f001 bad8 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800e86a:	2300      	movs	r3, #0
 800e86c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e86e:	f001 bad4 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :
      {
        frequency = 0U;
 800e872:	2300      	movs	r3, #0
 800e874:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e876:	f001 bad0 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800e87a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e87e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800e882:	430b      	orrs	r3, r1
 800e884:	d158      	bne.n	800e938 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800e886:	4b55      	ldr	r3, [pc, #340]	; (800e9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e888:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e88c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e890:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e898:	d03b      	beq.n	800e912 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800e89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e89c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8a0:	d846      	bhi.n	800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e8a8:	d02e      	beq.n	800e908 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800e8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e8b0:	d83e      	bhi.n	800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8b8:	d00b      	beq.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800e8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8c0:	d836      	bhi.n	800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d00d      	beq.n	800e8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800e8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8ce:	d012      	beq.n	800e8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800e8d0:	e02e      	b.n	800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e8d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7ff faee 	bl	800deb8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e8e0:	f001 ba9b 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8e4:	f107 0318 	add.w	r3, r7, #24
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7ff fc4d 	bl	800e188 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e8f2:	f001 ba92 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e8f6:	f107 030c 	add.w	r3, r7, #12
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7ff fdac 	bl	800e458 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e904:	f001 ba89 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e908:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e90c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e90e:	f001 ba84 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e912:	4b32      	ldr	r3, [pc, #200]	; (800e9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e91a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e91e:	d103      	bne.n	800e928 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800e920:	4b30      	ldr	r3, [pc, #192]	; (800e9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e922:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e924:	f001 ba79 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800e928:	2300      	movs	r3, #0
 800e92a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e92c:	f001 ba75 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :

        frequency = 0U;
 800e930:	2300      	movs	r3, #0
 800e932:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e934:	f001 ba71 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800e938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e93c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800e940:	430b      	orrs	r3, r1
 800e942:	d126      	bne.n	800e992 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800e944:	4b25      	ldr	r3, [pc, #148]	; (800e9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e946:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e94a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e94e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800e950:	4b22      	ldr	r3, [pc, #136]	; (800e9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e95c:	d106      	bne.n	800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800e95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e960:	2b00      	cmp	r3, #0
 800e962:	d103      	bne.n	800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800e964:	4b1f      	ldr	r3, [pc, #124]	; (800e9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e966:	637b      	str	r3, [r7, #52]	; 0x34
 800e968:	f001 ba57 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800e96c:	4b1b      	ldr	r3, [pc, #108]	; (800e9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e978:	d107      	bne.n	800e98a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800e97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e980:	d103      	bne.n	800e98a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800e982:	4b19      	ldr	r3, [pc, #100]	; (800e9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800e984:	637b      	str	r3, [r7, #52]	; 0x34
 800e986:	f001 ba48 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800e98a:	2300      	movs	r3, #0
 800e98c:	637b      	str	r3, [r7, #52]	; 0x34
 800e98e:	f001 ba44 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800e992:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e996:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800e99a:	430b      	orrs	r3, r1
 800e99c:	d16e      	bne.n	800ea7c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800e99e:	4b0f      	ldr	r3, [pc, #60]	; (800e9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e9a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e9a4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800e9a8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e9b0:	d03d      	beq.n	800ea2e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800e9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e9b8:	d85c      	bhi.n	800ea74 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800e9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e9c0:	d014      	beq.n	800e9ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800e9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e9c8:	d854      	bhi.n	800ea74 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800e9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d01f      	beq.n	800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800e9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e9d6:	d012      	beq.n	800e9fe <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800e9d8:	e04c      	b.n	800ea74 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800e9da:	bf00      	nop
 800e9dc:	46020c00 	.word	0x46020c00
 800e9e0:	0007a120 	.word	0x0007a120
 800e9e4:	00f42400 	.word	0x00f42400
 800e9e8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e9ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7ff fa61 	bl	800deb8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e9fa:	f001 ba0e 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e9fe:	f107 0318 	add.w	r3, r7, #24
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7ff fbc0 	bl	800e188 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800ea08:	69fb      	ldr	r3, [r7, #28]
 800ea0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea0c:	f001 ba05 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800ea10:	4ba7      	ldr	r3, [pc, #668]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ea18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea1c:	d103      	bne.n	800ea26 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800ea1e:	4ba5      	ldr	r3, [pc, #660]	; (800ecb4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ea20:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ea22:	f001 b9fa 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800ea26:	2300      	movs	r3, #0
 800ea28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea2a:	f001 b9f6 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ea2e:	4ba0      	ldr	r3, [pc, #640]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	f003 0320 	and.w	r3, r3, #32
 800ea36:	2b20      	cmp	r3, #32
 800ea38:	d118      	bne.n	800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ea3a:	4b9d      	ldr	r3, [pc, #628]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ea3c:	689b      	ldr	r3, [r3, #8]
 800ea3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d005      	beq.n	800ea52 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ea46:	4b9a      	ldr	r3, [pc, #616]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ea48:	689b      	ldr	r3, [r3, #8]
 800ea4a:	0e1b      	lsrs	r3, r3, #24
 800ea4c:	f003 030f 	and.w	r3, r3, #15
 800ea50:	e006      	b.n	800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800ea52:	4b97      	ldr	r3, [pc, #604]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ea54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ea58:	041b      	lsls	r3, r3, #16
 800ea5a:	0e1b      	lsrs	r3, r3, #24
 800ea5c:	f003 030f 	and.w	r3, r3, #15
 800ea60:	4a95      	ldr	r2, [pc, #596]	; (800ecb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ea62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea66:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ea68:	f001 b9d7 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea70:	f001 b9d3 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :

        frequency = 0U;
 800ea74:	2300      	movs	r3, #0
 800ea76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea78:	f001 b9cf 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ea7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea80:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800ea84:	430b      	orrs	r3, r1
 800ea86:	d17f      	bne.n	800eb88 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ea88:	4b89      	ldr	r3, [pc, #548]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ea8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ea8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea92:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800ea94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d165      	bne.n	800eb66 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ea9a:	4b85      	ldr	r3, [pc, #532]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ea9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eaa0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800eaa4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800eaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800eaac:	d034      	beq.n	800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800eab4:	d853      	bhi.n	800eb5e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800eab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eabc:	d00b      	beq.n	800ead6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800eabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eac4:	d84b      	bhi.n	800eb5e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800eac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d016      	beq.n	800eafa <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800eacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eace:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ead2:	d009      	beq.n	800eae8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800ead4:	e043      	b.n	800eb5e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ead6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eada:	4618      	mov	r0, r3
 800eadc:	f7ff f9ec 	bl	800deb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800eae4:	f001 b999 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eae8:	f107 0318 	add.w	r3, r7, #24
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7ff fb4b 	bl	800e188 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800eaf2:	69fb      	ldr	r3, [r7, #28]
 800eaf4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800eaf6:	f001 b990 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800eafa:	4b6d      	ldr	r3, [pc, #436]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eb02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb06:	d103      	bne.n	800eb10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800eb08:	4b6a      	ldr	r3, [pc, #424]	; (800ecb4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800eb0a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800eb0c:	f001 b985 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
            frequency = 0U;
 800eb10:	2300      	movs	r3, #0
 800eb12:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800eb14:	f001 b981 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800eb18:	4b65      	ldr	r3, [pc, #404]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f003 0320 	and.w	r3, r3, #32
 800eb20:	2b20      	cmp	r3, #32
 800eb22:	d118      	bne.n	800eb56 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800eb24:	4b62      	ldr	r3, [pc, #392]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eb26:	689b      	ldr	r3, [r3, #8]
 800eb28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d005      	beq.n	800eb3c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800eb30:	4b5f      	ldr	r3, [pc, #380]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	0e1b      	lsrs	r3, r3, #24
 800eb36:	f003 030f 	and.w	r3, r3, #15
 800eb3a:	e006      	b.n	800eb4a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800eb3c:	4b5c      	ldr	r3, [pc, #368]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eb3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800eb42:	041b      	lsls	r3, r3, #16
 800eb44:	0e1b      	lsrs	r3, r3, #24
 800eb46:	f003 030f 	and.w	r3, r3, #15
 800eb4a:	4a5b      	ldr	r2, [pc, #364]	; (800ecb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800eb4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb50:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800eb52:	f001 b962 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
            frequency = 0U;
 800eb56:	2300      	movs	r3, #0
 800eb58:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800eb5a:	f001 b95e 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        default :
        {
          frequency = 0U;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800eb62:	f001 b95a 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800eb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eb6c:	d108      	bne.n	800eb80 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eb6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7ff f9a0 	bl	800deb8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800eb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb7a:	637b      	str	r3, [r7, #52]	; 0x34
 800eb7c:	f001 b94d 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else
    {
      frequency = 0U;
 800eb80:	2300      	movs	r3, #0
 800eb82:	637b      	str	r3, [r7, #52]	; 0x34
 800eb84:	f001 b949 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800eb88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb8c:	1e51      	subs	r1, r2, #1
 800eb8e:	430b      	orrs	r3, r1
 800eb90:	d136      	bne.n	800ec00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800eb92:	4b47      	ldr	r3, [pc, #284]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eb94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eb98:	f003 0303 	and.w	r3, r3, #3
 800eb9c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800eb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d104      	bne.n	800ebae <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800eba4:	f7fe f96a 	bl	800ce7c <HAL_RCC_GetPCLK2Freq>
 800eba8:	6378      	str	r0, [r7, #52]	; 0x34
 800ebaa:	f001 b936 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800ebae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	d104      	bne.n	800ebbe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ebb4:	f7fe f82c 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800ebb8:	6378      	str	r0, [r7, #52]	; 0x34
 800ebba:	f001 b92e 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800ebbe:	4b3c      	ldr	r3, [pc, #240]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ebc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebca:	d106      	bne.n	800ebda <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800ebcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebce:	2b02      	cmp	r3, #2
 800ebd0:	d103      	bne.n	800ebda <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800ebd2:	4b3a      	ldr	r3, [pc, #232]	; (800ecbc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ebd4:	637b      	str	r3, [r7, #52]	; 0x34
 800ebd6:	f001 b920 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800ebda:	4b35      	ldr	r3, [pc, #212]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ebdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ebe0:	f003 0302 	and.w	r3, r3, #2
 800ebe4:	2b02      	cmp	r3, #2
 800ebe6:	d107      	bne.n	800ebf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800ebe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebea:	2b03      	cmp	r3, #3
 800ebec:	d104      	bne.n	800ebf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800ebee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebf2:	637b      	str	r3, [r7, #52]	; 0x34
 800ebf4:	f001 b911 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	637b      	str	r3, [r7, #52]	; 0x34
 800ebfc:	f001 b90d 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800ec00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec04:	1e91      	subs	r1, r2, #2
 800ec06:	430b      	orrs	r3, r1
 800ec08:	d136      	bne.n	800ec78 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ec0a:	4b29      	ldr	r3, [pc, #164]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ec0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec10:	f003 030c 	and.w	r3, r3, #12
 800ec14:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800ec16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d104      	bne.n	800ec26 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ec1c:	f7fe f91a 	bl	800ce54 <HAL_RCC_GetPCLK1Freq>
 800ec20:	6378      	str	r0, [r7, #52]	; 0x34
 800ec22:	f001 b8fa 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800ec26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec28:	2b04      	cmp	r3, #4
 800ec2a:	d104      	bne.n	800ec36 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ec2c:	f7fd fff0 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800ec30:	6378      	str	r0, [r7, #52]	; 0x34
 800ec32:	f001 b8f2 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800ec36:	4b1e      	ldr	r3, [pc, #120]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ec3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec42:	d106      	bne.n	800ec52 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ec44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec46:	2b08      	cmp	r3, #8
 800ec48:	d103      	bne.n	800ec52 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800ec4a:	4b1c      	ldr	r3, [pc, #112]	; (800ecbc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ec4c:	637b      	str	r3, [r7, #52]	; 0x34
 800ec4e:	f001 b8e4 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800ec52:	4b17      	ldr	r3, [pc, #92]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ec54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ec58:	f003 0302 	and.w	r3, r3, #2
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d107      	bne.n	800ec70 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800ec60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec62:	2b0c      	cmp	r3, #12
 800ec64:	d104      	bne.n	800ec70 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800ec66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec6a:	637b      	str	r3, [r7, #52]	; 0x34
 800ec6c:	f001 b8d5 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800ec70:	2300      	movs	r3, #0
 800ec72:	637b      	str	r3, [r7, #52]	; 0x34
 800ec74:	f001 b8d1 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800ec78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec7c:	1f11      	subs	r1, r2, #4
 800ec7e:	430b      	orrs	r3, r1
 800ec80:	d13f      	bne.n	800ed02 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ec82:	4b0b      	ldr	r3, [pc, #44]	; (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ec84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ec8c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800ec8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d104      	bne.n	800ec9e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ec94:	f7fe f8de 	bl	800ce54 <HAL_RCC_GetPCLK1Freq>
 800ec98:	6378      	str	r0, [r7, #52]	; 0x34
 800ec9a:	f001 b8be 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800ec9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca0:	2b10      	cmp	r3, #16
 800eca2:	d10d      	bne.n	800ecc0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800eca4:	f7fd ffb4 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800eca8:	6378      	str	r0, [r7, #52]	; 0x34
 800ecaa:	f001 b8b6 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800ecae:	bf00      	nop
 800ecb0:	46020c00 	.word	0x46020c00
 800ecb4:	02dc6c00 	.word	0x02dc6c00
 800ecb8:	0802a7fc 	.word	0x0802a7fc
 800ecbc:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800ecc0:	4ba8      	ldr	r3, [pc, #672]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ecc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eccc:	d106      	bne.n	800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800ecce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd0:	2b20      	cmp	r3, #32
 800ecd2:	d103      	bne.n	800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800ecd4:	4ba4      	ldr	r3, [pc, #656]	; (800ef68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ecd6:	637b      	str	r3, [r7, #52]	; 0x34
 800ecd8:	f001 b89f 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800ecdc:	4ba1      	ldr	r3, [pc, #644]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ecde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ece2:	f003 0302 	and.w	r3, r3, #2
 800ece6:	2b02      	cmp	r3, #2
 800ece8:	d107      	bne.n	800ecfa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ecea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecec:	2b30      	cmp	r3, #48	; 0x30
 800ecee:	d104      	bne.n	800ecfa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800ecf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ecf4:	637b      	str	r3, [r7, #52]	; 0x34
 800ecf6:	f001 b890 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	637b      	str	r3, [r7, #52]	; 0x34
 800ecfe:	f001 b88c 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800ed02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed06:	f1a2 0108 	sub.w	r1, r2, #8
 800ed0a:	430b      	orrs	r3, r1
 800ed0c:	d136      	bne.n	800ed7c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800ed0e:	4b95      	ldr	r3, [pc, #596]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ed10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ed18:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800ed1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d104      	bne.n	800ed2a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ed20:	f7fe f898 	bl	800ce54 <HAL_RCC_GetPCLK1Freq>
 800ed24:	6378      	str	r0, [r7, #52]	; 0x34
 800ed26:	f001 b878 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800ed2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2c:	2b40      	cmp	r3, #64	; 0x40
 800ed2e:	d104      	bne.n	800ed3a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ed30:	f7fd ff6e 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800ed34:	6378      	str	r0, [r7, #52]	; 0x34
 800ed36:	f001 b870 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800ed3a:	4b8a      	ldr	r3, [pc, #552]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed46:	d106      	bne.n	800ed56 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800ed48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4a:	2b80      	cmp	r3, #128	; 0x80
 800ed4c:	d103      	bne.n	800ed56 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800ed4e:	4b86      	ldr	r3, [pc, #536]	; (800ef68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ed50:	637b      	str	r3, [r7, #52]	; 0x34
 800ed52:	f001 b862 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800ed56:	4b83      	ldr	r3, [pc, #524]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ed58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ed5c:	f003 0302 	and.w	r3, r3, #2
 800ed60:	2b02      	cmp	r3, #2
 800ed62:	d107      	bne.n	800ed74 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ed64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed66:	2bc0      	cmp	r3, #192	; 0xc0
 800ed68:	d104      	bne.n	800ed74 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800ed6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ed70:	f001 b853 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800ed74:	2300      	movs	r3, #0
 800ed76:	637b      	str	r3, [r7, #52]	; 0x34
 800ed78:	f001 b84f 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800ed7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed80:	f1a2 0110 	sub.w	r1, r2, #16
 800ed84:	430b      	orrs	r3, r1
 800ed86:	d139      	bne.n	800edfc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800ed88:	4b76      	ldr	r3, [pc, #472]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ed8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed92:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800ed94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d104      	bne.n	800eda4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ed9a:	f7fe f85b 	bl	800ce54 <HAL_RCC_GetPCLK1Freq>
 800ed9e:	6378      	str	r0, [r7, #52]	; 0x34
 800eda0:	f001 b83b 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800eda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edaa:	d104      	bne.n	800edb6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800edac:	f7fd ff30 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800edb0:	6378      	str	r0, [r7, #52]	; 0x34
 800edb2:	f001 b832 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800edb6:	4b6b      	ldr	r3, [pc, #428]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800edbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edc2:	d107      	bne.n	800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800edc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edca:	d103      	bne.n	800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800edcc:	4b66      	ldr	r3, [pc, #408]	; (800ef68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800edce:	637b      	str	r3, [r7, #52]	; 0x34
 800edd0:	f001 b823 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800edd4:	4b63      	ldr	r3, [pc, #396]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800edd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800edda:	f003 0302 	and.w	r3, r3, #2
 800edde:	2b02      	cmp	r3, #2
 800ede0:	d108      	bne.n	800edf4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800ede2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ede8:	d104      	bne.n	800edf4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800edea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800edee:	637b      	str	r3, [r7, #52]	; 0x34
 800edf0:	f001 b813 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800edf4:	2300      	movs	r3, #0
 800edf6:	637b      	str	r3, [r7, #52]	; 0x34
 800edf8:	f001 b80f 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800edfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee00:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800ee04:	430b      	orrs	r3, r1
 800ee06:	d139      	bne.n	800ee7c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800ee08:	4b56      	ldr	r3, [pc, #344]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ee0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ee0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ee12:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800ee14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d104      	bne.n	800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ee1a:	f7fe f81b 	bl	800ce54 <HAL_RCC_GetPCLK1Freq>
 800ee1e:	6378      	str	r0, [r7, #52]	; 0x34
 800ee20:	f000 bffb 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800ee24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee2a:	d104      	bne.n	800ee36 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ee2c:	f7fd fef0 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800ee30:	6378      	str	r0, [r7, #52]	; 0x34
 800ee32:	f000 bff2 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800ee36:	4b4b      	ldr	r3, [pc, #300]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ee3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee42:	d107      	bne.n	800ee54 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800ee44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee4a:	d103      	bne.n	800ee54 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800ee4c:	4b46      	ldr	r3, [pc, #280]	; (800ef68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ee4e:	637b      	str	r3, [r7, #52]	; 0x34
 800ee50:	f000 bfe3 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800ee54:	4b43      	ldr	r3, [pc, #268]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ee56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ee5a:	f003 0302 	and.w	r3, r3, #2
 800ee5e:	2b02      	cmp	r3, #2
 800ee60:	d108      	bne.n	800ee74 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800ee62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ee68:	d104      	bne.n	800ee74 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800ee6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ee70:	f000 bfd3 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800ee74:	2300      	movs	r3, #0
 800ee76:	637b      	str	r3, [r7, #52]	; 0x34
 800ee78:	f000 bfcf 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800ee7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee80:	f1a2 0120 	sub.w	r1, r2, #32
 800ee84:	430b      	orrs	r3, r1
 800ee86:	d158      	bne.n	800ef3a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800ee88:	4b36      	ldr	r3, [pc, #216]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ee8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ee8e:	f003 0307 	and.w	r3, r3, #7
 800ee92:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800ee94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d104      	bne.n	800eea4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800ee9a:	f7fe f803 	bl	800cea4 <HAL_RCC_GetPCLK3Freq>
 800ee9e:	6378      	str	r0, [r7, #52]	; 0x34
 800eea0:	f000 bfbb 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800eea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea6:	2b01      	cmp	r3, #1
 800eea8:	d104      	bne.n	800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800eeaa:	f7fd feb1 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800eeae:	6378      	str	r0, [r7, #52]	; 0x34
 800eeb0:	f000 bfb3 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800eeb4:	4b2b      	ldr	r3, [pc, #172]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eec0:	d106      	bne.n	800eed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800eec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec4:	2b02      	cmp	r3, #2
 800eec6:	d103      	bne.n	800eed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800eec8:	4b27      	ldr	r3, [pc, #156]	; (800ef68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800eeca:	637b      	str	r3, [r7, #52]	; 0x34
 800eecc:	f000 bfa5 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800eed0:	4b24      	ldr	r3, [pc, #144]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800eed2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800eed6:	f003 0302 	and.w	r3, r3, #2
 800eeda:	2b02      	cmp	r3, #2
 800eedc:	d107      	bne.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800eede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee0:	2b03      	cmp	r3, #3
 800eee2:	d104      	bne.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800eee4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eee8:	637b      	str	r3, [r7, #52]	; 0x34
 800eeea:	f000 bf96 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800eeee:	4b1d      	ldr	r3, [pc, #116]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f003 0320 	and.w	r3, r3, #32
 800eef6:	2b20      	cmp	r3, #32
 800eef8:	d11b      	bne.n	800ef32 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800eefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefc:	2b04      	cmp	r3, #4
 800eefe:	d118      	bne.n	800ef32 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ef00:	4b18      	ldr	r3, [pc, #96]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ef02:	689b      	ldr	r3, [r3, #8]
 800ef04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d005      	beq.n	800ef18 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800ef0c:	4b15      	ldr	r3, [pc, #84]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ef0e:	689b      	ldr	r3, [r3, #8]
 800ef10:	0e1b      	lsrs	r3, r3, #24
 800ef12:	f003 030f 	and.w	r3, r3, #15
 800ef16:	e006      	b.n	800ef26 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800ef18:	4b12      	ldr	r3, [pc, #72]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ef1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ef1e:	041b      	lsls	r3, r3, #16
 800ef20:	0e1b      	lsrs	r3, r3, #24
 800ef22:	f003 030f 	and.w	r3, r3, #15
 800ef26:	4a11      	ldr	r2, [pc, #68]	; (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ef28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef2c:	637b      	str	r3, [r7, #52]	; 0x34
 800ef2e:	f000 bf74 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800ef32:	2300      	movs	r3, #0
 800ef34:	637b      	str	r3, [r7, #52]	; 0x34
 800ef36:	f000 bf70 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800ef3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef3e:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ef42:	430b      	orrs	r3, r1
 800ef44:	d172      	bne.n	800f02c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800ef46:	4b07      	ldr	r3, [pc, #28]	; (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ef48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ef4c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ef50:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800ef52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef58:	d10a      	bne.n	800ef70 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ef5a:	f7fd fe59 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800ef5e:	6378      	str	r0, [r7, #52]	; 0x34
 800ef60:	f000 bf5b 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800ef64:	46020c00 	.word	0x46020c00
 800ef68:	00f42400 	.word	0x00f42400
 800ef6c:	0802a7fc 	.word	0x0802a7fc
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800ef70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef76:	d108      	bne.n	800ef8a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef78:	f107 0318 	add.w	r3, r7, #24
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7ff f903 	bl	800e188 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800ef82:	6a3b      	ldr	r3, [r7, #32]
 800ef84:	637b      	str	r3, [r7, #52]	; 0x34
 800ef86:	f000 bf48 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800ef8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d104      	bne.n	800ef9a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800ef90:	f7fd ff46 	bl	800ce20 <HAL_RCC_GetHCLKFreq>
 800ef94:	6378      	str	r0, [r7, #52]	; 0x34
 800ef96:	f000 bf40 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800ef9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800efa0:	d122      	bne.n	800efe8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800efa2:	4baa      	ldr	r3, [pc, #680]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f003 0320 	and.w	r3, r3, #32
 800efaa:	2b20      	cmp	r3, #32
 800efac:	d118      	bne.n	800efe0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800efae:	4ba7      	ldr	r3, [pc, #668]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800efb0:	689b      	ldr	r3, [r3, #8]
 800efb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d005      	beq.n	800efc6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800efba:	4ba4      	ldr	r3, [pc, #656]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800efbc:	689b      	ldr	r3, [r3, #8]
 800efbe:	0e1b      	lsrs	r3, r3, #24
 800efc0:	f003 030f 	and.w	r3, r3, #15
 800efc4:	e006      	b.n	800efd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800efc6:	4ba1      	ldr	r3, [pc, #644]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800efc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800efcc:	041b      	lsls	r3, r3, #16
 800efce:	0e1b      	lsrs	r3, r3, #24
 800efd0:	f003 030f 	and.w	r3, r3, #15
 800efd4:	4a9e      	ldr	r2, [pc, #632]	; (800f250 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800efd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efda:	637b      	str	r3, [r7, #52]	; 0x34
 800efdc:	f000 bf1d 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 800efe0:	2300      	movs	r3, #0
 800efe2:	637b      	str	r3, [r7, #52]	; 0x34
 800efe4:	f000 bf19 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800efe8:	4b98      	ldr	r3, [pc, #608]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eff0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eff4:	d107      	bne.n	800f006 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800eff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800effc:	d103      	bne.n	800f006 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800effe:	4b95      	ldr	r3, [pc, #596]	; (800f254 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800f000:	637b      	str	r3, [r7, #52]	; 0x34
 800f002:	f000 bf0a 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800f006:	4b91      	ldr	r3, [pc, #580]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f00e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f012:	d107      	bne.n	800f024 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800f014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f016:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f01a:	d103      	bne.n	800f024 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800f01c:	4b8d      	ldr	r3, [pc, #564]	; (800f254 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800f01e:	637b      	str	r3, [r7, #52]	; 0x34
 800f020:	f000 befb 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800f024:	2300      	movs	r3, #0
 800f026:	637b      	str	r3, [r7, #52]	; 0x34
 800f028:	f000 bef7 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800f02c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f030:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800f034:	430b      	orrs	r3, r1
 800f036:	d158      	bne.n	800f0ea <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800f038:	4b84      	ldr	r3, [pc, #528]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f03a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f03e:	f003 0307 	and.w	r3, r3, #7
 800f042:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f046:	2b04      	cmp	r3, #4
 800f048:	d84b      	bhi.n	800f0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800f04a:	a201      	add	r2, pc, #4	; (adr r2, 800f050 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800f04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f050:	0800f089 	.word	0x0800f089
 800f054:	0800f065 	.word	0x0800f065
 800f058:	0800f077 	.word	0x0800f077
 800f05c:	0800f093 	.word	0x0800f093
 800f060:	0800f09d 	.word	0x0800f09d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fe ff25 	bl	800deb8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f070:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f072:	f000 bed2 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f076:	f107 030c 	add.w	r3, r7, #12
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7ff f9ec 	bl	800e458 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f084:	f000 bec9 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f088:	f7fd feca 	bl	800ce20 <HAL_RCC_GetHCLKFreq>
 800f08c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f08e:	f000 bec4 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f092:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f096:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f098:	f000 bebf 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f09c:	4b6b      	ldr	r3, [pc, #428]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f003 0320 	and.w	r3, r3, #32
 800f0a4:	2b20      	cmp	r3, #32
 800f0a6:	d118      	bne.n	800f0da <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f0a8:	4b68      	ldr	r3, [pc, #416]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f0aa:	689b      	ldr	r3, [r3, #8]
 800f0ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d005      	beq.n	800f0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800f0b4:	4b65      	ldr	r3, [pc, #404]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f0b6:	689b      	ldr	r3, [r3, #8]
 800f0b8:	0e1b      	lsrs	r3, r3, #24
 800f0ba:	f003 030f 	and.w	r3, r3, #15
 800f0be:	e006      	b.n	800f0ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800f0c0:	4b62      	ldr	r3, [pc, #392]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f0c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f0c6:	041b      	lsls	r3, r3, #16
 800f0c8:	0e1b      	lsrs	r3, r3, #24
 800f0ca:	f003 030f 	and.w	r3, r3, #15
 800f0ce:	4a60      	ldr	r2, [pc, #384]	; (800f250 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800f0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0d4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f0d6:	f000 bea0 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f0de:	f000 be9c 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f0e6:	f000 be98 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800f0ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0ee:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800f0f2:	430b      	orrs	r3, r1
 800f0f4:	d167      	bne.n	800f1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800f0f6:	4b55      	ldr	r3, [pc, #340]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f0f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f0fc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f100:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f104:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f108:	d036      	beq.n	800f178 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800f10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f10c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f110:	d855      	bhi.n	800f1be <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f114:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f118:	d029      	beq.n	800f16e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800f11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f11c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f120:	d84d      	bhi.n	800f1be <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f128:	d013      	beq.n	800f152 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800f12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f12c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f130:	d845      	bhi.n	800f1be <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f134:	2b00      	cmp	r3, #0
 800f136:	d015      	beq.n	800f164 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800f138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f13e:	d13e      	bne.n	800f1be <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f144:	4618      	mov	r0, r3
 800f146:	f7fe feb7 	bl	800deb8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f14e:	f000 be64 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f152:	f107 030c 	add.w	r3, r7, #12
 800f156:	4618      	mov	r0, r3
 800f158:	f7ff f97e 	bl	800e458 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f160:	f000 be5b 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f164:	f7fd fe5c 	bl	800ce20 <HAL_RCC_GetHCLKFreq>
 800f168:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f16a:	f000 be56 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f16e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f172:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f174:	f000 be51 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f178:	4b34      	ldr	r3, [pc, #208]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f003 0320 	and.w	r3, r3, #32
 800f180:	2b20      	cmp	r3, #32
 800f182:	d118      	bne.n	800f1b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f184:	4b31      	ldr	r3, [pc, #196]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f186:	689b      	ldr	r3, [r3, #8]
 800f188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d005      	beq.n	800f19c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800f190:	4b2e      	ldr	r3, [pc, #184]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f192:	689b      	ldr	r3, [r3, #8]
 800f194:	0e1b      	lsrs	r3, r3, #24
 800f196:	f003 030f 	and.w	r3, r3, #15
 800f19a:	e006      	b.n	800f1aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f19c:	4b2b      	ldr	r3, [pc, #172]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f19e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f1a2:	041b      	lsls	r3, r3, #16
 800f1a4:	0e1b      	lsrs	r3, r3, #24
 800f1a6:	f003 030f 	and.w	r3, r3, #15
 800f1aa:	4a29      	ldr	r2, [pc, #164]	; (800f250 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800f1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1b0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f1b2:	f000 be32 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f1ba:	f000 be2e 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f1c2:	f000 be2a 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800f1c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1ca:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800f1ce:	430b      	orrs	r3, r1
 800f1d0:	d153      	bne.n	800f27a <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800f1d2:	4b1e      	ldr	r3, [pc, #120]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f1d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f1d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f1dc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800f1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d104      	bne.n	800f1ee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f1e4:	f7fd fe36 	bl	800ce54 <HAL_RCC_GetPCLK1Freq>
 800f1e8:	6378      	str	r0, [r7, #52]	; 0x34
 800f1ea:	f000 be16 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800f1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f1f4:	d104      	bne.n	800f200 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f1f6:	f7fd fd0b 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800f1fa:	6378      	str	r0, [r7, #52]	; 0x34
 800f1fc:	f000 be0d 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800f200:	4b12      	ldr	r3, [pc, #72]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f20c:	d107      	bne.n	800f21e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800f20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f214:	d103      	bne.n	800f21e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800f216:	4b0f      	ldr	r3, [pc, #60]	; (800f254 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800f218:	637b      	str	r3, [r7, #52]	; 0x34
 800f21a:	f000 bdfe 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800f21e:	4b0b      	ldr	r3, [pc, #44]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f003 0320 	and.w	r3, r3, #32
 800f226:	2b20      	cmp	r3, #32
 800f228:	d123      	bne.n	800f272 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800f22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f230:	d11f      	bne.n	800f272 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f232:	4b06      	ldr	r3, [pc, #24]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f234:	689b      	ldr	r3, [r3, #8]
 800f236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d00c      	beq.n	800f258 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800f23e:	4b03      	ldr	r3, [pc, #12]	; (800f24c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f240:	689b      	ldr	r3, [r3, #8]
 800f242:	0e1b      	lsrs	r3, r3, #24
 800f244:	f003 030f 	and.w	r3, r3, #15
 800f248:	e00d      	b.n	800f266 <HAL_RCCEx_GetPeriphCLKFreq+0xb3e>
 800f24a:	bf00      	nop
 800f24c:	46020c00 	.word	0x46020c00
 800f250:	0802a7fc 	.word	0x0802a7fc
 800f254:	00f42400 	.word	0x00f42400
 800f258:	4ba0      	ldr	r3, [pc, #640]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f25a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f25e:	041b      	lsls	r3, r3, #16
 800f260:	0e1b      	lsrs	r3, r3, #24
 800f262:	f003 030f 	and.w	r3, r3, #15
 800f266:	4a9e      	ldr	r2, [pc, #632]	; (800f4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f26c:	637b      	str	r3, [r7, #52]	; 0x34
 800f26e:	f000 bdd4 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800f272:	2300      	movs	r3, #0
 800f274:	637b      	str	r3, [r7, #52]	; 0x34
 800f276:	f000 bdd0 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800f27a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f27e:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800f282:	430b      	orrs	r3, r1
 800f284:	d14c      	bne.n	800f320 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800f286:	4b95      	ldr	r3, [pc, #596]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f28c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f290:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800f292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f294:	2b00      	cmp	r3, #0
 800f296:	d104      	bne.n	800f2a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb7a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f298:	f7fd fddc 	bl	800ce54 <HAL_RCC_GetPCLK1Freq>
 800f29c:	6378      	str	r0, [r7, #52]	; 0x34
 800f29e:	f000 bdbc 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800f2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2a8:	d104      	bne.n	800f2b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f2aa:	f7fd fcb1 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800f2ae:	6378      	str	r0, [r7, #52]	; 0x34
 800f2b0:	f000 bdb3 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800f2b4:	4b89      	ldr	r3, [pc, #548]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f2bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f2c0:	d107      	bne.n	800f2d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800f2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2c8:	d103      	bne.n	800f2d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
    {
      frequency = HSI_VALUE;
 800f2ca:	4b86      	ldr	r3, [pc, #536]	; (800f4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f2cc:	637b      	str	r3, [r7, #52]	; 0x34
 800f2ce:	f000 bda4 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800f2d2:	4b82      	ldr	r3, [pc, #520]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f003 0320 	and.w	r3, r3, #32
 800f2da:	2b20      	cmp	r3, #32
 800f2dc:	d11c      	bne.n	800f318 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
 800f2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f2e4:	d118      	bne.n	800f318 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f2e6:	4b7d      	ldr	r3, [pc, #500]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f2e8:	689b      	ldr	r3, [r3, #8]
 800f2ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d005      	beq.n	800f2fe <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 800f2f2:	4b7a      	ldr	r3, [pc, #488]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f2f4:	689b      	ldr	r3, [r3, #8]
 800f2f6:	0e1b      	lsrs	r3, r3, #24
 800f2f8:	f003 030f 	and.w	r3, r3, #15
 800f2fc:	e006      	b.n	800f30c <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 800f2fe:	4b77      	ldr	r3, [pc, #476]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f304:	041b      	lsls	r3, r3, #16
 800f306:	0e1b      	lsrs	r3, r3, #24
 800f308:	f003 030f 	and.w	r3, r3, #15
 800f30c:	4a74      	ldr	r2, [pc, #464]	; (800f4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f30e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f312:	637b      	str	r3, [r7, #52]	; 0x34
 800f314:	f000 bd81 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800f318:	2300      	movs	r3, #0
 800f31a:	637b      	str	r3, [r7, #52]	; 0x34
 800f31c:	f000 bd7d 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800f320:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f324:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800f328:	430b      	orrs	r3, r1
 800f32a:	d158      	bne.n	800f3de <HAL_RCCEx_GetPeriphCLKFreq+0xcb6>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800f32c:	4b6b      	ldr	r3, [pc, #428]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f32e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f332:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f336:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f33a:	2bc0      	cmp	r3, #192	; 0xc0
 800f33c:	d028      	beq.n	800f390 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 800f33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f340:	2bc0      	cmp	r3, #192	; 0xc0
 800f342:	d848      	bhi.n	800f3d6 <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
 800f344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f346:	2b80      	cmp	r3, #128	; 0x80
 800f348:	d00e      	beq.n	800f368 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
 800f34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f34c:	2b80      	cmp	r3, #128	; 0x80
 800f34e:	d842      	bhi.n	800f3d6 <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
 800f350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f352:	2b00      	cmp	r3, #0
 800f354:	d003      	beq.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 800f356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f358:	2b40      	cmp	r3, #64	; 0x40
 800f35a:	d014      	beq.n	800f386 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
 800f35c:	e03b      	b.n	800f3d6 <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800f35e:	f7fd fda1 	bl	800cea4 <HAL_RCC_GetPCLK3Freq>
 800f362:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f364:	f000 bd59 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f368:	4b5c      	ldr	r3, [pc, #368]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f374:	d103      	bne.n	800f37e <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
        {
          frequency = HSI_VALUE;
 800f376:	4b5b      	ldr	r3, [pc, #364]	; (800f4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f378:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f37a:	f000 bd4e 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f37e:	2300      	movs	r3, #0
 800f380:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f382:	f000 bd4a 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800f386:	f7fd fc43 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800f38a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f38c:	f000 bd45 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f390:	4b52      	ldr	r3, [pc, #328]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	f003 0320 	and.w	r3, r3, #32
 800f398:	2b20      	cmp	r3, #32
 800f39a:	d118      	bne.n	800f3ce <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f39c:	4b4f      	ldr	r3, [pc, #316]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f39e:	689b      	ldr	r3, [r3, #8]
 800f3a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d005      	beq.n	800f3b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
 800f3a8:	4b4c      	ldr	r3, [pc, #304]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f3aa:	689b      	ldr	r3, [r3, #8]
 800f3ac:	0e1b      	lsrs	r3, r3, #24
 800f3ae:	f003 030f 	and.w	r3, r3, #15
 800f3b2:	e006      	b.n	800f3c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800f3b4:	4b49      	ldr	r3, [pc, #292]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f3b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f3ba:	041b      	lsls	r3, r3, #16
 800f3bc:	0e1b      	lsrs	r3, r3, #24
 800f3be:	f003 030f 	and.w	r3, r3, #15
 800f3c2:	4a47      	ldr	r2, [pc, #284]	; (800f4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3c8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f3ca:	f000 bd26 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f3d2:	f000 bd22 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      default:
      {
        frequency = 0U;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f3da:	f000 bd1e 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800f3de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3e2:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800f3e6:	430b      	orrs	r3, r1
 800f3e8:	d14c      	bne.n	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800f3ea:	4b3c      	ldr	r3, [pc, #240]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f3ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f3f4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800f3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d104      	bne.n	800f406 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f3fc:	f7fd fd2a 	bl	800ce54 <HAL_RCC_GetPCLK1Freq>
 800f400:	6378      	str	r0, [r7, #52]	; 0x34
 800f402:	f000 bd0a 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800f406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f40c:	d104      	bne.n	800f418 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f40e:	f7fd fbff 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800f412:	6378      	str	r0, [r7, #52]	; 0x34
 800f414:	f000 bd01 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800f418:	4b30      	ldr	r3, [pc, #192]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f424:	d107      	bne.n	800f436 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 800f426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f42c:	d103      	bne.n	800f436 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
    {
      frequency = HSI_VALUE;
 800f42e:	4b2d      	ldr	r3, [pc, #180]	; (800f4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f430:	637b      	str	r3, [r7, #52]	; 0x34
 800f432:	f000 bcf2 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800f436:	4b29      	ldr	r3, [pc, #164]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f003 0320 	and.w	r3, r3, #32
 800f43e:	2b20      	cmp	r3, #32
 800f440:	d11c      	bne.n	800f47c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800f442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f444:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f448:	d118      	bne.n	800f47c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f44a:	4b24      	ldr	r3, [pc, #144]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f44c:	689b      	ldr	r3, [r3, #8]
 800f44e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f452:	2b00      	cmp	r3, #0
 800f454:	d005      	beq.n	800f462 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800f456:	4b21      	ldr	r3, [pc, #132]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f458:	689b      	ldr	r3, [r3, #8]
 800f45a:	0e1b      	lsrs	r3, r3, #24
 800f45c:	f003 030f 	and.w	r3, r3, #15
 800f460:	e006      	b.n	800f470 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 800f462:	4b1e      	ldr	r3, [pc, #120]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f464:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f468:	041b      	lsls	r3, r3, #16
 800f46a:	0e1b      	lsrs	r3, r3, #24
 800f46c:	f003 030f 	and.w	r3, r3, #15
 800f470:	4a1b      	ldr	r2, [pc, #108]	; (800f4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f476:	637b      	str	r3, [r7, #52]	; 0x34
 800f478:	f000 bccf 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800f47c:	2300      	movs	r3, #0
 800f47e:	637b      	str	r3, [r7, #52]	; 0x34
 800f480:	f000 bccb 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800f484:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f488:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800f48c:	430b      	orrs	r3, r1
 800f48e:	d152      	bne.n	800f536 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800f490:	4b12      	ldr	r3, [pc, #72]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f492:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f496:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800f49a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800f49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d104      	bne.n	800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f4a2:	f7fd fcd7 	bl	800ce54 <HAL_RCC_GetPCLK1Freq>
 800f4a6:	6378      	str	r0, [r7, #52]	; 0x34
 800f4a8:	f000 bcb7 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800f4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f4b2:	d104      	bne.n	800f4be <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f4b4:	f7fd fbac 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800f4b8:	6378      	str	r0, [r7, #52]	; 0x34
 800f4ba:	f000 bcae 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800f4be:	4b07      	ldr	r3, [pc, #28]	; (800f4dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f4c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4ca:	d10d      	bne.n	800f4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
 800f4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f4d2:	d109      	bne.n	800f4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
    {
      frequency = HSI_VALUE;
 800f4d4:	4b03      	ldr	r3, [pc, #12]	; (800f4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f4d6:	637b      	str	r3, [r7, #52]	; 0x34
 800f4d8:	f000 bc9f 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800f4dc:	46020c00 	.word	0x46020c00
 800f4e0:	0802a7fc 	.word	0x0802a7fc
 800f4e4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800f4e8:	4ba6      	ldr	r3, [pc, #664]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	f003 0320 	and.w	r3, r3, #32
 800f4f0:	2b20      	cmp	r3, #32
 800f4f2:	d11c      	bne.n	800f52e <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
 800f4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f4fa:	d118      	bne.n	800f52e <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f4fc:	4ba1      	ldr	r3, [pc, #644]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f4fe:	689b      	ldr	r3, [r3, #8]
 800f500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f504:	2b00      	cmp	r3, #0
 800f506:	d005      	beq.n	800f514 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800f508:	4b9e      	ldr	r3, [pc, #632]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f50a:	689b      	ldr	r3, [r3, #8]
 800f50c:	0e1b      	lsrs	r3, r3, #24
 800f50e:	f003 030f 	and.w	r3, r3, #15
 800f512:	e006      	b.n	800f522 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
 800f514:	4b9b      	ldr	r3, [pc, #620]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f516:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f51a:	041b      	lsls	r3, r3, #16
 800f51c:	0e1b      	lsrs	r3, r3, #24
 800f51e:	f003 030f 	and.w	r3, r3, #15
 800f522:	4a99      	ldr	r2, [pc, #612]	; (800f788 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800f524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f528:	637b      	str	r3, [r7, #52]	; 0x34
 800f52a:	f000 bc76 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800f52e:	2300      	movs	r3, #0
 800f530:	637b      	str	r3, [r7, #52]	; 0x34
 800f532:	f000 bc72 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800f536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f53a:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800f53e:	430b      	orrs	r3, r1
 800f540:	d14c      	bne.n	800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xeb4>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800f542:	4b90      	ldr	r3, [pc, #576]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f544:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f548:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800f54c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800f54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f550:	2b00      	cmp	r3, #0
 800f552:	d104      	bne.n	800f55e <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f554:	f7fd fc7e 	bl	800ce54 <HAL_RCC_GetPCLK1Freq>
 800f558:	6378      	str	r0, [r7, #52]	; 0x34
 800f55a:	f000 bc5e 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800f55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f560:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f564:	d104      	bne.n	800f570 <HAL_RCCEx_GetPeriphCLKFreq+0xe48>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f566:	f7fd fb53 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800f56a:	6378      	str	r0, [r7, #52]	; 0x34
 800f56c:	f000 bc55 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800f570:	4b84      	ldr	r3, [pc, #528]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f57c:	d107      	bne.n	800f58e <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
 800f57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f584:	d103      	bne.n	800f58e <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
    {
      frequency = HSI_VALUE;
 800f586:	4b81      	ldr	r3, [pc, #516]	; (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 800f588:	637b      	str	r3, [r7, #52]	; 0x34
 800f58a:	f000 bc46 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800f58e:	4b7d      	ldr	r3, [pc, #500]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	f003 0320 	and.w	r3, r3, #32
 800f596:	2b20      	cmp	r3, #32
 800f598:	d11c      	bne.n	800f5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 800f59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f59c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f5a0:	d118      	bne.n	800f5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f5a2:	4b78      	ldr	r3, [pc, #480]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f5a4:	689b      	ldr	r3, [r3, #8]
 800f5a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d005      	beq.n	800f5ba <HAL_RCCEx_GetPeriphCLKFreq+0xe92>
 800f5ae:	4b75      	ldr	r3, [pc, #468]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f5b0:	689b      	ldr	r3, [r3, #8]
 800f5b2:	0e1b      	lsrs	r3, r3, #24
 800f5b4:	f003 030f 	and.w	r3, r3, #15
 800f5b8:	e006      	b.n	800f5c8 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 800f5ba:	4b72      	ldr	r3, [pc, #456]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f5bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f5c0:	041b      	lsls	r3, r3, #16
 800f5c2:	0e1b      	lsrs	r3, r3, #24
 800f5c4:	f003 030f 	and.w	r3, r3, #15
 800f5c8:	4a6f      	ldr	r2, [pc, #444]	; (800f788 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800f5ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5ce:	637b      	str	r3, [r7, #52]	; 0x34
 800f5d0:	f000 bc23 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	637b      	str	r3, [r7, #52]	; 0x34
 800f5d8:	f000 bc1f 	b.w	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800f5dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5e0:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800f5e4:	430b      	orrs	r3, r1
 800f5e6:	d164      	bne.n	800f6b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf8a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800f5e8:	4b66      	ldr	r3, [pc, #408]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f5ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f5ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5f2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800f5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d120      	bne.n	800f63c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f5fa:	4b62      	ldr	r3, [pc, #392]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	f003 0320 	and.w	r3, r3, #32
 800f602:	2b20      	cmp	r3, #32
 800f604:	d117      	bne.n	800f636 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f606:	4b5f      	ldr	r3, [pc, #380]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d005      	beq.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
 800f612:	4b5c      	ldr	r3, [pc, #368]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f614:	689b      	ldr	r3, [r3, #8]
 800f616:	0e1b      	lsrs	r3, r3, #24
 800f618:	f003 030f 	and.w	r3, r3, #15
 800f61c:	e006      	b.n	800f62c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 800f61e:	4b59      	ldr	r3, [pc, #356]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f620:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f624:	041b      	lsls	r3, r3, #16
 800f626:	0e1b      	lsrs	r3, r3, #24
 800f628:	f003 030f 	and.w	r3, r3, #15
 800f62c:	4a56      	ldr	r2, [pc, #344]	; (800f788 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800f62e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f632:	637b      	str	r3, [r7, #52]	; 0x34
 800f634:	e3f1      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 800f636:	2300      	movs	r3, #0
 800f638:	637b      	str	r3, [r7, #52]	; 0x34
 800f63a:	e3ee      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800f63c:	4b51      	ldr	r3, [pc, #324]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f63e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f642:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f646:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f64a:	d112      	bne.n	800f672 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800f64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f652:	d10e      	bne.n	800f672 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f654:	4b4b      	ldr	r3, [pc, #300]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f65a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f65e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f662:	d102      	bne.n	800f66a <HAL_RCCEx_GetPeriphCLKFreq+0xf42>
      {
        frequency = LSI_VALUE / 128U;
 800f664:	23fa      	movs	r3, #250	; 0xfa
 800f666:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f668:	e3d7      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800f66a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f66e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f670:	e3d3      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800f672:	4b44      	ldr	r3, [pc, #272]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f67a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f67e:	d106      	bne.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 800f680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f686:	d102      	bne.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
    {
      frequency = HSI_VALUE;
 800f688:	4b40      	ldr	r3, [pc, #256]	; (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 800f68a:	637b      	str	r3, [r7, #52]	; 0x34
 800f68c:	e3c5      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800f68e:	4b3d      	ldr	r3, [pc, #244]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f690:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f694:	f003 0302 	and.w	r3, r3, #2
 800f698:	2b02      	cmp	r3, #2
 800f69a:	d107      	bne.n	800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
 800f69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f6a2:	d103      	bne.n	800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
    {
      frequency = LSE_VALUE;
 800f6a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f6a8:	637b      	str	r3, [r7, #52]	; 0x34
 800f6aa:	e3b6      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	637b      	str	r3, [r7, #52]	; 0x34
 800f6b0:	e3b3      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800f6b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6b6:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800f6ba:	430b      	orrs	r3, r1
 800f6bc:	d16b      	bne.n	800f796 <HAL_RCCEx_GetPeriphCLKFreq+0x106e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800f6be:	4b31      	ldr	r3, [pc, #196]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f6c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f6c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f6c8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800f6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d120      	bne.n	800f712 <HAL_RCCEx_GetPeriphCLKFreq+0xfea>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f6d0:	4b2c      	ldr	r3, [pc, #176]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	f003 0320 	and.w	r3, r3, #32
 800f6d8:	2b20      	cmp	r3, #32
 800f6da:	d117      	bne.n	800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f6dc:	4b29      	ldr	r3, [pc, #164]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f6de:	689b      	ldr	r3, [r3, #8]
 800f6e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d005      	beq.n	800f6f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800f6e8:	4b26      	ldr	r3, [pc, #152]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f6ea:	689b      	ldr	r3, [r3, #8]
 800f6ec:	0e1b      	lsrs	r3, r3, #24
 800f6ee:	f003 030f 	and.w	r3, r3, #15
 800f6f2:	e006      	b.n	800f702 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
 800f6f4:	4b23      	ldr	r3, [pc, #140]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f6f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f6fa:	041b      	lsls	r3, r3, #16
 800f6fc:	0e1b      	lsrs	r3, r3, #24
 800f6fe:	f003 030f 	and.w	r3, r3, #15
 800f702:	4a21      	ldr	r2, [pc, #132]	; (800f788 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800f704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f708:	637b      	str	r3, [r7, #52]	; 0x34
 800f70a:	e386      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 800f70c:	2300      	movs	r3, #0
 800f70e:	637b      	str	r3, [r7, #52]	; 0x34
 800f710:	e383      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800f712:	4b1c      	ldr	r3, [pc, #112]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f71c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f720:	d112      	bne.n	800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
 800f722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f728:	d10e      	bne.n	800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f72a:	4b16      	ldr	r3, [pc, #88]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f72c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f734:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f738:	d102      	bne.n	800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
      {
        frequency = LSI_VALUE / 128U;
 800f73a:	23fa      	movs	r3, #250	; 0xfa
 800f73c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f73e:	e36c      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800f740:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f744:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f746:	e368      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800f748:	4b0e      	ldr	r3, [pc, #56]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f754:	d106      	bne.n	800f764 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>
 800f756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f75c:	d102      	bne.n	800f764 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>
    {
      frequency = HSI_VALUE;
 800f75e:	4b0b      	ldr	r3, [pc, #44]	; (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 800f760:	637b      	str	r3, [r7, #52]	; 0x34
 800f762:	e35a      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800f764:	4b07      	ldr	r3, [pc, #28]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f76a:	f003 0302 	and.w	r3, r3, #2
 800f76e:	2b02      	cmp	r3, #2
 800f770:	d10e      	bne.n	800f790 <HAL_RCCEx_GetPeriphCLKFreq+0x1068>
 800f772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f774:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f778:	d10a      	bne.n	800f790 <HAL_RCCEx_GetPeriphCLKFreq+0x1068>
    {
      frequency = LSE_VALUE;
 800f77a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f77e:	637b      	str	r3, [r7, #52]	; 0x34
 800f780:	e34b      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800f782:	bf00      	nop
 800f784:	46020c00 	.word	0x46020c00
 800f788:	0802a7fc 	.word	0x0802a7fc
 800f78c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800f790:	2300      	movs	r3, #0
 800f792:	637b      	str	r3, [r7, #52]	; 0x34
 800f794:	e341      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800f796:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f79a:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800f79e:	430b      	orrs	r3, r1
 800f7a0:	d147      	bne.n	800f832 <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800f7a2:	4b9b      	ldr	r3, [pc, #620]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f7a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f7a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800f7ac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800f7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d103      	bne.n	800f7bc <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f7b4:	f7fd fb4e 	bl	800ce54 <HAL_RCC_GetPCLK1Freq>
 800f7b8:	6378      	str	r0, [r7, #52]	; 0x34
 800f7ba:	e32e      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800f7bc:	4b94      	ldr	r3, [pc, #592]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f7be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f7c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f7c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f7ca:	d112      	bne.n	800f7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
 800f7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f7d2:	d10e      	bne.n	800f7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f7d4:	4b8e      	ldr	r3, [pc, #568]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f7d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f7da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f7de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f7e2:	d102      	bne.n	800f7ea <HAL_RCCEx_GetPeriphCLKFreq+0x10c2>
      {
        frequency = LSI_VALUE / 128U;
 800f7e4:	23fa      	movs	r3, #250	; 0xfa
 800f7e6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f7e8:	e317      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800f7ea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f7ee:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f7f0:	e313      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800f7f2:	4b87      	ldr	r3, [pc, #540]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f7fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7fe:	d106      	bne.n	800f80e <HAL_RCCEx_GetPeriphCLKFreq+0x10e6>
 800f800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f802:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f806:	d102      	bne.n	800f80e <HAL_RCCEx_GetPeriphCLKFreq+0x10e6>
    {
      frequency = HSI_VALUE;
 800f808:	4b82      	ldr	r3, [pc, #520]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f80a:	637b      	str	r3, [r7, #52]	; 0x34
 800f80c:	e305      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800f80e:	4b80      	ldr	r3, [pc, #512]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f814:	f003 0302 	and.w	r3, r3, #2
 800f818:	2b02      	cmp	r3, #2
 800f81a:	d107      	bne.n	800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
 800f81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800f822:	d103      	bne.n	800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
    {
      frequency = LSE_VALUE;
 800f824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f828:	637b      	str	r3, [r7, #52]	; 0x34
 800f82a:	e2f6      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800f82c:	2300      	movs	r3, #0
 800f82e:	637b      	str	r3, [r7, #52]	; 0x34
 800f830:	e2f3      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800f832:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f836:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800f83a:	430b      	orrs	r3, r1
 800f83c:	d12d      	bne.n	800f89a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800f83e:	4b74      	ldr	r3, [pc, #464]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f844:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800f848:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800f84a:	4b71      	ldr	r3, [pc, #452]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f856:	d105      	bne.n	800f864 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800f858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d102      	bne.n	800f864 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
    {
      frequency = HSE_VALUE;
 800f85e:	4b6d      	ldr	r3, [pc, #436]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f860:	637b      	str	r3, [r7, #52]	; 0x34
 800f862:	e2da      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800f864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f866:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f86a:	d107      	bne.n	800f87c <HAL_RCCEx_GetPeriphCLKFreq+0x1154>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f86c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f870:	4618      	mov	r0, r3
 800f872:	f7fe fb21 	bl	800deb8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800f876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f878:	637b      	str	r3, [r7, #52]	; 0x34
 800f87a:	e2ce      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800f87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f87e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f882:	d107      	bne.n	800f894 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f884:	f107 0318 	add.w	r3, r7, #24
 800f888:	4618      	mov	r0, r3
 800f88a:	f7fe fc7d 	bl	800e188 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800f88e:	69bb      	ldr	r3, [r7, #24]
 800f890:	637b      	str	r3, [r7, #52]	; 0x34
 800f892:	e2c2      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800f894:	2300      	movs	r3, #0
 800f896:	637b      	str	r3, [r7, #52]	; 0x34
 800f898:	e2bf      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800f89a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f89e:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800f8a2:	430b      	orrs	r3, r1
 800f8a4:	d156      	bne.n	800f954 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800f8a6:	4b5a      	ldr	r3, [pc, #360]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f8a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800f8b0:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800f8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f8b8:	d028      	beq.n	800f90c <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
 800f8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f8c0:	d845      	bhi.n	800f94e <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
 800f8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f8c8:	d013      	beq.n	800f8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11ca>
 800f8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f8d0:	d83d      	bhi.n	800f94e <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
 800f8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d004      	beq.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
 800f8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f8de:	d004      	beq.n	800f8ea <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>
 800f8e0:	e035      	b.n	800f94e <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800f8e2:	f7fd facb 	bl	800ce7c <HAL_RCC_GetPCLK2Freq>
 800f8e6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f8e8:	e297      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f8ea:	f7fd f991 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800f8ee:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f8f0:	e293      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f8f2:	4b47      	ldr	r3, [pc, #284]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f8fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f8fe:	d102      	bne.n	800f906 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        {
          frequency = HSI_VALUE;
 800f900:	4b44      	ldr	r3, [pc, #272]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f902:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f904:	e289      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f906:	2300      	movs	r3, #0
 800f908:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f90a:	e286      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f90c:	4b40      	ldr	r3, [pc, #256]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f003 0320 	and.w	r3, r3, #32
 800f914:	2b20      	cmp	r3, #32
 800f916:	d117      	bne.n	800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f918:	4b3d      	ldr	r3, [pc, #244]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f91a:	689b      	ldr	r3, [r3, #8]
 800f91c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f920:	2b00      	cmp	r3, #0
 800f922:	d005      	beq.n	800f930 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800f924:	4b3a      	ldr	r3, [pc, #232]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f926:	689b      	ldr	r3, [r3, #8]
 800f928:	0e1b      	lsrs	r3, r3, #24
 800f92a:	f003 030f 	and.w	r3, r3, #15
 800f92e:	e006      	b.n	800f93e <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800f930:	4b37      	ldr	r3, [pc, #220]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f932:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f936:	041b      	lsls	r3, r3, #16
 800f938:	0e1b      	lsrs	r3, r3, #24
 800f93a:	f003 030f 	and.w	r3, r3, #15
 800f93e:	4a36      	ldr	r2, [pc, #216]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800f940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f944:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f946:	e268      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f948:	2300      	movs	r3, #0
 800f94a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f94c:	e265      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800f94e:	2300      	movs	r3, #0
 800f950:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f952:	e262      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800f954:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f958:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800f95c:	430b      	orrs	r3, r1
 800f95e:	d15d      	bne.n	800fa1c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800f960:	4b2b      	ldr	r3, [pc, #172]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f966:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f96a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800f96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f96e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f972:	d028      	beq.n	800f9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x129e>
 800f974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f976:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f97a:	d845      	bhi.n	800fa08 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
 800f97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f97e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f982:	d013      	beq.n	800f9ac <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
 800f984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f98a:	d83d      	bhi.n	800fa08 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
 800f98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d004      	beq.n	800f99c <HAL_RCCEx_GetPeriphCLKFreq+0x1274>
 800f992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f998:	d004      	beq.n	800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>
 800f99a:	e035      	b.n	800fa08 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800f99c:	f7fd fa5a 	bl	800ce54 <HAL_RCC_GetPCLK1Freq>
 800f9a0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f9a2:	e23a      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f9a4:	f7fd f934 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800f9a8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f9aa:	e236      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f9ac:	4b18      	ldr	r3, [pc, #96]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f9b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9b8:	d102      	bne.n	800f9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
        {
          frequency = HSI_VALUE;
 800f9ba:	4b16      	ldr	r3, [pc, #88]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f9bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f9be:	e22c      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f9c4:	e229      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f9c6:	4b12      	ldr	r3, [pc, #72]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f003 0320 	and.w	r3, r3, #32
 800f9ce:	2b20      	cmp	r3, #32
 800f9d0:	d117      	bne.n	800fa02 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f9d2:	4b0f      	ldr	r3, [pc, #60]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f9d4:	689b      	ldr	r3, [r3, #8]
 800f9d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d005      	beq.n	800f9ea <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 800f9de:	4b0c      	ldr	r3, [pc, #48]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f9e0:	689b      	ldr	r3, [r3, #8]
 800f9e2:	0e1b      	lsrs	r3, r3, #24
 800f9e4:	f003 030f 	and.w	r3, r3, #15
 800f9e8:	e006      	b.n	800f9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
 800f9ea:	4b09      	ldr	r3, [pc, #36]	; (800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f9ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f9f0:	041b      	lsls	r3, r3, #16
 800f9f2:	0e1b      	lsrs	r3, r3, #24
 800f9f4:	f003 030f 	and.w	r3, r3, #15
 800f9f8:	4a07      	ldr	r2, [pc, #28]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800f9fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9fe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fa00:	e20b      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fa02:	2300      	movs	r3, #0
 800fa04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa06:	e208      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa0c:	e205      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800fa0e:	bf00      	nop
 800fa10:	46020c00 	.word	0x46020c00
 800fa14:	00f42400 	.word	0x00f42400
 800fa18:	0802a7fc 	.word	0x0802a7fc
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800fa1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa20:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800fa24:	430b      	orrs	r3, r1
 800fa26:	d176      	bne.n	800fb16 <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800fa28:	4ba6      	ldr	r3, [pc, #664]	; (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fa2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fa2e:	f003 0318 	and.w	r3, r3, #24
 800fa32:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800fa34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa36:	2b18      	cmp	r3, #24
 800fa38:	d86a      	bhi.n	800fb10 <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 800fa3a:	a201      	add	r2, pc, #4	; (adr r2, 800fa40 <HAL_RCCEx_GetPeriphCLKFreq+0x1318>)
 800fa3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa40:	0800faa5 	.word	0x0800faa5
 800fa44:	0800fb11 	.word	0x0800fb11
 800fa48:	0800fb11 	.word	0x0800fb11
 800fa4c:	0800fb11 	.word	0x0800fb11
 800fa50:	0800fb11 	.word	0x0800fb11
 800fa54:	0800fb11 	.word	0x0800fb11
 800fa58:	0800fb11 	.word	0x0800fb11
 800fa5c:	0800fb11 	.word	0x0800fb11
 800fa60:	0800faad 	.word	0x0800faad
 800fa64:	0800fb11 	.word	0x0800fb11
 800fa68:	0800fb11 	.word	0x0800fb11
 800fa6c:	0800fb11 	.word	0x0800fb11
 800fa70:	0800fb11 	.word	0x0800fb11
 800fa74:	0800fb11 	.word	0x0800fb11
 800fa78:	0800fb11 	.word	0x0800fb11
 800fa7c:	0800fb11 	.word	0x0800fb11
 800fa80:	0800fab5 	.word	0x0800fab5
 800fa84:	0800fb11 	.word	0x0800fb11
 800fa88:	0800fb11 	.word	0x0800fb11
 800fa8c:	0800fb11 	.word	0x0800fb11
 800fa90:	0800fb11 	.word	0x0800fb11
 800fa94:	0800fb11 	.word	0x0800fb11
 800fa98:	0800fb11 	.word	0x0800fb11
 800fa9c:	0800fb11 	.word	0x0800fb11
 800faa0:	0800facf 	.word	0x0800facf
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800faa4:	f7fd f9fe 	bl	800cea4 <HAL_RCC_GetPCLK3Freq>
 800faa8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800faaa:	e1b6      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800faac:	f7fd f8b0 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800fab0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fab2:	e1b2      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fab4:	4b83      	ldr	r3, [pc, #524]	; (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fabc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fac0:	d102      	bne.n	800fac8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 800fac2:	4b81      	ldr	r3, [pc, #516]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x15a0>)
 800fac4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fac6:	e1a8      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fac8:	2300      	movs	r3, #0
 800faca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800facc:	e1a5      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800face:	4b7d      	ldr	r3, [pc, #500]	; (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f003 0320 	and.w	r3, r3, #32
 800fad6:	2b20      	cmp	r3, #32
 800fad8:	d117      	bne.n	800fb0a <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fada:	4b7a      	ldr	r3, [pc, #488]	; (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fadc:	689b      	ldr	r3, [r3, #8]
 800fade:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d005      	beq.n	800faf2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 800fae6:	4b77      	ldr	r3, [pc, #476]	; (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fae8:	689b      	ldr	r3, [r3, #8]
 800faea:	0e1b      	lsrs	r3, r3, #24
 800faec:	f003 030f 	and.w	r3, r3, #15
 800faf0:	e006      	b.n	800fb00 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 800faf2:	4b74      	ldr	r3, [pc, #464]	; (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800faf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800faf8:	041b      	lsls	r3, r3, #16
 800fafa:	0e1b      	lsrs	r3, r3, #24
 800fafc:	f003 030f 	and.w	r3, r3, #15
 800fb00:	4a72      	ldr	r2, [pc, #456]	; (800fccc <HAL_RCCEx_GetPeriphCLKFreq+0x15a4>)
 800fb02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb06:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fb08:	e187      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb0e:	e184      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fb10:	2300      	movs	r3, #0
 800fb12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb14:	e181      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800fb16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb1a:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800fb1e:	430b      	orrs	r3, r1
 800fb20:	d155      	bne.n	800fbce <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800fb22:	4b68      	ldr	r3, [pc, #416]	; (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fb24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fb28:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800fb2c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800fb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fb34:	d013      	beq.n	800fb5e <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 800fb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fb3c:	d844      	bhi.n	800fbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 800fb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fb44:	d013      	beq.n	800fb6e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 800fb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fb4c:	d83c      	bhi.n	800fbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 800fb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d014      	beq.n	800fb7e <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 800fb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb5a:	d014      	beq.n	800fb86 <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 800fb5c:	e034      	b.n	800fbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb5e:	f107 0318 	add.w	r3, r7, #24
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7fe fb10 	bl	800e188 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800fb68:	69fb      	ldr	r3, [r7, #28]
 800fb6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb6c:	e155      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fb6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7fe f9a0 	bl	800deb8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800fb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb7c:	e14d      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fb7e:	f7fd f847 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800fb82:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fb84:	e149      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fb86:	4b4f      	ldr	r3, [pc, #316]	; (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	f003 0320 	and.w	r3, r3, #32
 800fb8e:	2b20      	cmp	r3, #32
 800fb90:	d117      	bne.n	800fbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fb92:	4b4c      	ldr	r3, [pc, #304]	; (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fb94:	689b      	ldr	r3, [r3, #8]
 800fb96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d005      	beq.n	800fbaa <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 800fb9e:	4b49      	ldr	r3, [pc, #292]	; (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fba0:	689b      	ldr	r3, [r3, #8]
 800fba2:	0e1b      	lsrs	r3, r3, #24
 800fba4:	f003 030f 	and.w	r3, r3, #15
 800fba8:	e006      	b.n	800fbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 800fbaa:	4b46      	ldr	r3, [pc, #280]	; (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fbac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fbb0:	041b      	lsls	r3, r3, #16
 800fbb2:	0e1b      	lsrs	r3, r3, #24
 800fbb4:	f003 030f 	and.w	r3, r3, #15
 800fbb8:	4a44      	ldr	r2, [pc, #272]	; (800fccc <HAL_RCCEx_GetPeriphCLKFreq+0x15a4>)
 800fbba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbbe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fbc0:	e12b      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fbc6:	e128      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fbcc:	e125      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800fbce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbd2:	1e59      	subs	r1, r3, #1
 800fbd4:	ea52 0301 	orrs.w	r3, r2, r1
 800fbd8:	d13c      	bne.n	800fc54 <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800fbda:	4b3a      	ldr	r3, [pc, #232]	; (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fbdc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fbe0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800fbe4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800fbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800fbec:	d027      	beq.n	800fc3e <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800fbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800fbf4:	d82b      	bhi.n	800fc4e <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 800fbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fbfc:	d017      	beq.n	800fc2e <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 800fbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fc04:	d823      	bhi.n	800fc4e <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 800fc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d004      	beq.n	800fc16 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 800fc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fc12:	d004      	beq.n	800fc1e <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 800fc14:	e01b      	b.n	800fc4e <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fc16:	f7fc fffb 	bl	800cc10 <HAL_RCC_GetSysClockFreq>
 800fc1a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fc1c:	e0fd      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fc1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7fe f948 	bl	800deb8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800fc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fc2c:	e0f5      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc2e:	f107 0318 	add.w	r3, r7, #24
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fe faa8 	bl	800e188 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fc3c:	e0ed      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc3e:	f107 030c 	add.w	r3, r7, #12
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fe fc08 	bl	800e458 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fc4c:	e0e5      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fc52:	e0e2      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800fc54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc58:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800fc5c:	430b      	orrs	r3, r1
 800fc5e:	d137      	bne.n	800fcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x15a8>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800fc60:	4b18      	ldr	r3, [pc, #96]	; (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fc62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fc66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fc6a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800fc6c:	4b15      	ldr	r3, [pc, #84]	; (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fc6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fc72:	f003 0302 	and.w	r3, r3, #2
 800fc76:	2b02      	cmp	r3, #2
 800fc78:	d106      	bne.n	800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 800fc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d103      	bne.n	800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 800fc80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc84:	637b      	str	r3, [r7, #52]	; 0x34
 800fc86:	e0c8      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800fc88:	4b0e      	ldr	r3, [pc, #56]	; (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fc8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fc8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fc96:	d112      	bne.n	800fcbe <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 800fc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc9e:	d10e      	bne.n	800fcbe <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fca0:	4b08      	ldr	r3, [pc, #32]	; (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fcaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fcae:	d102      	bne.n	800fcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 800fcb0:	23fa      	movs	r3, #250	; 0xfa
 800fcb2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fcb4:	e0b1      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800fcb6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fcba:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fcbc:	e0ad      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	637b      	str	r3, [r7, #52]	; 0x34
 800fcc2:	e0aa      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800fcc4:	46020c00 	.word	0x46020c00
 800fcc8:	00f42400 	.word	0x00f42400
 800fccc:	0802a7fc 	.word	0x0802a7fc
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800fcd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcd4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800fcd8:	430b      	orrs	r3, r1
 800fcda:	d131      	bne.n	800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800fcdc:	4b51      	ldr	r3, [pc, #324]	; (800fe24 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fcde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fce2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800fce6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800fce8:	4b4e      	ldr	r3, [pc, #312]	; (800fe24 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fcf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fcf4:	d105      	bne.n	800fd02 <HAL_RCCEx_GetPeriphCLKFreq+0x15da>
 800fcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d102      	bne.n	800fd02 <HAL_RCCEx_GetPeriphCLKFreq+0x15da>
    {
      frequency = HSI48_VALUE;
 800fcfc:	4b4a      	ldr	r3, [pc, #296]	; (800fe28 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800fcfe:	637b      	str	r3, [r7, #52]	; 0x34
 800fd00:	e08b      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800fd02:	4b48      	ldr	r3, [pc, #288]	; (800fe24 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fd0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fd0e:	d106      	bne.n	800fd1e <HAL_RCCEx_GetPeriphCLKFreq+0x15f6>
 800fd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd16:	d102      	bne.n	800fd1e <HAL_RCCEx_GetPeriphCLKFreq+0x15f6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800fd18:	4b44      	ldr	r3, [pc, #272]	; (800fe2c <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800fd1a:	637b      	str	r3, [r7, #52]	; 0x34
 800fd1c:	e07d      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800fd1e:	4b41      	ldr	r3, [pc, #260]	; (800fe24 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fd26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd2a:	d106      	bne.n	800fd3a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
 800fd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fd32:	d102      	bne.n	800fd3a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
    {
      frequency = HSI_VALUE;
 800fd34:	4b3e      	ldr	r3, [pc, #248]	; (800fe30 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800fd36:	637b      	str	r3, [r7, #52]	; 0x34
 800fd38:	e06f      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	637b      	str	r3, [r7, #52]	; 0x34
 800fd3e:	e06c      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800fd40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd44:	1e99      	subs	r1, r3, #2
 800fd46:	ea52 0301 	orrs.w	r3, r2, r1
 800fd4a:	d120      	bne.n	800fd8e <HAL_RCCEx_GetPeriphCLKFreq+0x1666>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800fd4c:	4b35      	ldr	r3, [pc, #212]	; (800fe24 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fd4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fd52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fd56:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800fd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d004      	beq.n	800fd68 <HAL_RCCEx_GetPeriphCLKFreq+0x1640>
 800fd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fd64:	d008      	beq.n	800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0x1650>
 800fd66:	e00f      	b.n	800fd88 <HAL_RCCEx_GetPeriphCLKFreq+0x1660>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd68:	f107 030c 	add.w	r3, r7, #12
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f7fe fb73 	bl	800e458 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd76:	e050      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd78:	f107 0318 	add.w	r3, r7, #24
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7fe fa03 	bl	800e188 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800fd82:	6a3b      	ldr	r3, [r7, #32]
 800fd84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd86:	e048      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd8c:	e045      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800fd8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd92:	f1a3 0108 	sub.w	r1, r3, #8
 800fd96:	ea52 0301 	orrs.w	r3, r2, r1
 800fd9a:	d13c      	bne.n	800fe16 <HAL_RCCEx_GetPeriphCLKFreq+0x16ee>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800fd9c:	4b21      	ldr	r3, [pc, #132]	; (800fe24 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fd9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fda2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800fda6:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800fda8:	4b1e      	ldr	r3, [pc, #120]	; (800fe24 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fdb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fdb4:	d105      	bne.n	800fdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
 800fdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d102      	bne.n	800fdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      frequency = HSE_VALUE;
 800fdbc:	4b1c      	ldr	r3, [pc, #112]	; (800fe30 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800fdbe:	637b      	str	r3, [r7, #52]	; 0x34
 800fdc0:	e02b      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800fdc2:	4b18      	ldr	r3, [pc, #96]	; (800fe24 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fdca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fdce:	d106      	bne.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16b6>
 800fdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fdd6:	d102      	bne.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16b6>
    {
      frequency = HSE_VALUE >> 1U ;
 800fdd8:	4b16      	ldr	r3, [pc, #88]	; (800fe34 <HAL_RCCEx_GetPeriphCLKFreq+0x170c>)
 800fdda:	637b      	str	r3, [r7, #52]	; 0x34
 800fddc:	e01d      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800fdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fde4:	d107      	bne.n	800fdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x16ce>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fde6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fe f864 	bl	800deb8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800fdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf2:	637b      	str	r3, [r7, #52]	; 0x34
 800fdf4:	e011      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800fdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800fdfc:	d108      	bne.n	800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x16e8>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fdfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7fe f858 	bl	800deb8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800fe08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe0a:	085b      	lsrs	r3, r3, #1
 800fe0c:	637b      	str	r3, [r7, #52]	; 0x34
 800fe0e:	e004      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800fe10:	2300      	movs	r3, #0
 800fe12:	637b      	str	r3, [r7, #52]	; 0x34
 800fe14:	e001      	b.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800fe16:	2300      	movs	r3, #0
 800fe18:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800fe1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3738      	adds	r7, #56	; 0x38
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	46020c00 	.word	0x46020c00
 800fe28:	02dc6c00 	.word	0x02dc6c00
 800fe2c:	016e3600 	.word	0x016e3600
 800fe30:	00f42400 	.word	0x00f42400
 800fe34:	007a1200 	.word	0x007a1200

0800fe38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b084      	sub	sp, #16
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800fe40:	4b47      	ldr	r3, [pc, #284]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	4a46      	ldr	r2, [pc, #280]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800fe46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fe4a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fe4c:	f7f7 fa96 	bl	800737c <HAL_GetTick>
 800fe50:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fe52:	e008      	b.n	800fe66 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fe54:	f7f7 fa92 	bl	800737c <HAL_GetTick>
 800fe58:	4602      	mov	r2, r0
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	1ad3      	subs	r3, r2, r3
 800fe5e:	2b02      	cmp	r3, #2
 800fe60:	d901      	bls.n	800fe66 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800fe62:	2303      	movs	r3, #3
 800fe64:	e077      	b.n	800ff56 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fe66:	4b3e      	ldr	r3, [pc, #248]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d1f0      	bne.n	800fe54 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800fe72:	4b3b      	ldr	r3, [pc, #236]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800fe74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800fe7a:	f023 0303 	bic.w	r3, r3, #3
 800fe7e:	687a      	ldr	r2, [r7, #4]
 800fe80:	6811      	ldr	r1, [r2, #0]
 800fe82:	687a      	ldr	r2, [r7, #4]
 800fe84:	6852      	ldr	r2, [r2, #4]
 800fe86:	3a01      	subs	r2, #1
 800fe88:	0212      	lsls	r2, r2, #8
 800fe8a:	430a      	orrs	r2, r1
 800fe8c:	4934      	ldr	r1, [pc, #208]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800fe8e:	4313      	orrs	r3, r2
 800fe90:	62cb      	str	r3, [r1, #44]	; 0x2c
 800fe92:	4b33      	ldr	r3, [pc, #204]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800fe94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe96:	4b33      	ldr	r3, [pc, #204]	; (800ff64 <RCCEx_PLL2_Config+0x12c>)
 800fe98:	4013      	ands	r3, r2
 800fe9a:	687a      	ldr	r2, [r7, #4]
 800fe9c:	6892      	ldr	r2, [r2, #8]
 800fe9e:	3a01      	subs	r2, #1
 800fea0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	68d2      	ldr	r2, [r2, #12]
 800fea8:	3a01      	subs	r2, #1
 800feaa:	0252      	lsls	r2, r2, #9
 800feac:	b292      	uxth	r2, r2
 800feae:	4311      	orrs	r1, r2
 800feb0:	687a      	ldr	r2, [r7, #4]
 800feb2:	6912      	ldr	r2, [r2, #16]
 800feb4:	3a01      	subs	r2, #1
 800feb6:	0412      	lsls	r2, r2, #16
 800feb8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800febc:	4311      	orrs	r1, r2
 800febe:	687a      	ldr	r2, [r7, #4]
 800fec0:	6952      	ldr	r2, [r2, #20]
 800fec2:	3a01      	subs	r2, #1
 800fec4:	0612      	lsls	r2, r2, #24
 800fec6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800feca:	430a      	orrs	r2, r1
 800fecc:	4924      	ldr	r1, [pc, #144]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800fece:	4313      	orrs	r3, r2
 800fed0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800fed2:	4b23      	ldr	r3, [pc, #140]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800fed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed6:	f023 020c 	bic.w	r2, r3, #12
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	699b      	ldr	r3, [r3, #24]
 800fede:	4920      	ldr	r1, [pc, #128]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800fee0:	4313      	orrs	r3, r2
 800fee2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800fee4:	4b1e      	ldr	r3, [pc, #120]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800fee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6a1b      	ldr	r3, [r3, #32]
 800feec:	491c      	ldr	r1, [pc, #112]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800feee:	4313      	orrs	r3, r2
 800fef0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800fef2:	4b1b      	ldr	r3, [pc, #108]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800fef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fef6:	4a1a      	ldr	r2, [pc, #104]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800fef8:	f023 0310 	bic.w	r3, r3, #16
 800fefc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800fefe:	4b18      	ldr	r3, [pc, #96]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800ff00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ff06:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ff0a:	687a      	ldr	r2, [r7, #4]
 800ff0c:	69d2      	ldr	r2, [r2, #28]
 800ff0e:	00d2      	lsls	r2, r2, #3
 800ff10:	4913      	ldr	r1, [pc, #76]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800ff12:	4313      	orrs	r3, r2
 800ff14:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800ff16:	4b12      	ldr	r3, [pc, #72]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800ff18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff1a:	4a11      	ldr	r2, [pc, #68]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800ff1c:	f043 0310 	orr.w	r3, r3, #16
 800ff20:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800ff22:	4b0f      	ldr	r3, [pc, #60]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	4a0e      	ldr	r2, [pc, #56]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800ff28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ff2c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ff2e:	f7f7 fa25 	bl	800737c <HAL_GetTick>
 800ff32:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ff34:	e008      	b.n	800ff48 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ff36:	f7f7 fa21 	bl	800737c <HAL_GetTick>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	1ad3      	subs	r3, r2, r3
 800ff40:	2b02      	cmp	r3, #2
 800ff42:	d901      	bls.n	800ff48 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800ff44:	2303      	movs	r3, #3
 800ff46:	e006      	b.n	800ff56 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ff48:	4b05      	ldr	r3, [pc, #20]	; (800ff60 <RCCEx_PLL2_Config+0x128>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d0f0      	beq.n	800ff36 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800ff54:	2300      	movs	r3, #0

}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3710      	adds	r7, #16
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	46020c00 	.word	0x46020c00
 800ff64:	80800000 	.word	0x80800000

0800ff68 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800ff70:	4b47      	ldr	r3, [pc, #284]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	4a46      	ldr	r2, [pc, #280]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 800ff76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ff7a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ff7c:	f7f7 f9fe 	bl	800737c <HAL_GetTick>
 800ff80:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ff82:	e008      	b.n	800ff96 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ff84:	f7f7 f9fa 	bl	800737c <HAL_GetTick>
 800ff88:	4602      	mov	r2, r0
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	1ad3      	subs	r3, r2, r3
 800ff8e:	2b02      	cmp	r3, #2
 800ff90:	d901      	bls.n	800ff96 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ff92:	2303      	movs	r3, #3
 800ff94:	e077      	b.n	8010086 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ff96:	4b3e      	ldr	r3, [pc, #248]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d1f0      	bne.n	800ff84 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ffa2:	4b3b      	ldr	r3, [pc, #236]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 800ffa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffa6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ffaa:	f023 0303 	bic.w	r3, r3, #3
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	6811      	ldr	r1, [r2, #0]
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	6852      	ldr	r2, [r2, #4]
 800ffb6:	3a01      	subs	r2, #1
 800ffb8:	0212      	lsls	r2, r2, #8
 800ffba:	430a      	orrs	r2, r1
 800ffbc:	4934      	ldr	r1, [pc, #208]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 800ffbe:	4313      	orrs	r3, r2
 800ffc0:	630b      	str	r3, [r1, #48]	; 0x30
 800ffc2:	4b33      	ldr	r3, [pc, #204]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 800ffc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffc6:	4b33      	ldr	r3, [pc, #204]	; (8010094 <RCCEx_PLL3_Config+0x12c>)
 800ffc8:	4013      	ands	r3, r2
 800ffca:	687a      	ldr	r2, [r7, #4]
 800ffcc:	6892      	ldr	r2, [r2, #8]
 800ffce:	3a01      	subs	r2, #1
 800ffd0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	68d2      	ldr	r2, [r2, #12]
 800ffd8:	3a01      	subs	r2, #1
 800ffda:	0252      	lsls	r2, r2, #9
 800ffdc:	b292      	uxth	r2, r2
 800ffde:	4311      	orrs	r1, r2
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	6912      	ldr	r2, [r2, #16]
 800ffe4:	3a01      	subs	r2, #1
 800ffe6:	0412      	lsls	r2, r2, #16
 800ffe8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800ffec:	4311      	orrs	r1, r2
 800ffee:	687a      	ldr	r2, [r7, #4]
 800fff0:	6952      	ldr	r2, [r2, #20]
 800fff2:	3a01      	subs	r2, #1
 800fff4:	0612      	lsls	r2, r2, #24
 800fff6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800fffa:	430a      	orrs	r2, r1
 800fffc:	4924      	ldr	r1, [pc, #144]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 800fffe:	4313      	orrs	r3, r2
 8010000:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8010002:	4b23      	ldr	r3, [pc, #140]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 8010004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010006:	f023 020c 	bic.w	r2, r3, #12
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	699b      	ldr	r3, [r3, #24]
 801000e:	4920      	ldr	r1, [pc, #128]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 8010010:	4313      	orrs	r3, r2
 8010012:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8010014:	4b1e      	ldr	r3, [pc, #120]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 8010016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6a1b      	ldr	r3, [r3, #32]
 801001c:	491c      	ldr	r1, [pc, #112]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 801001e:	4313      	orrs	r3, r2
 8010020:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8010022:	4b1b      	ldr	r3, [pc, #108]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 8010024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010026:	4a1a      	ldr	r2, [pc, #104]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 8010028:	f023 0310 	bic.w	r3, r3, #16
 801002c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801002e:	4b18      	ldr	r3, [pc, #96]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 8010030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010036:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801003a:	687a      	ldr	r2, [r7, #4]
 801003c:	69d2      	ldr	r2, [r2, #28]
 801003e:	00d2      	lsls	r2, r2, #3
 8010040:	4913      	ldr	r1, [pc, #76]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 8010042:	4313      	orrs	r3, r2
 8010044:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8010046:	4b12      	ldr	r3, [pc, #72]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 8010048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801004a:	4a11      	ldr	r2, [pc, #68]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 801004c:	f043 0310 	orr.w	r3, r3, #16
 8010050:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8010052:	4b0f      	ldr	r3, [pc, #60]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4a0e      	ldr	r2, [pc, #56]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 8010058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801005c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801005e:	f7f7 f98d 	bl	800737c <HAL_GetTick>
 8010062:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010064:	e008      	b.n	8010078 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010066:	f7f7 f989 	bl	800737c <HAL_GetTick>
 801006a:	4602      	mov	r2, r0
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	1ad3      	subs	r3, r2, r3
 8010070:	2b02      	cmp	r3, #2
 8010072:	d901      	bls.n	8010078 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8010074:	2303      	movs	r3, #3
 8010076:	e006      	b.n	8010086 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010078:	4b05      	ldr	r3, [pc, #20]	; (8010090 <RCCEx_PLL3_Config+0x128>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010080:	2b00      	cmp	r3, #0
 8010082:	d0f0      	beq.n	8010066 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8010084:	2300      	movs	r3, #0
}
 8010086:	4618      	mov	r0, r3
 8010088:	3710      	adds	r7, #16
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}
 801008e:	bf00      	nop
 8010090:	46020c00 	.word	0x46020c00
 8010094:	80800000 	.word	0x80800000

08010098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b082      	sub	sp, #8
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d101      	bne.n	80100aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80100a6:	2301      	movs	r3, #1
 80100a8:	e049      	b.n	801013e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100b0:	b2db      	uxtb	r3, r3
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d106      	bne.n	80100c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2200      	movs	r2, #0
 80100ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f7f1 fb6c 	bl	800179c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2202      	movs	r2, #2
 80100c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	3304      	adds	r3, #4
 80100d4:	4619      	mov	r1, r3
 80100d6:	4610      	mov	r0, r2
 80100d8:	f000 fe48 	bl	8010d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2201      	movs	r2, #1
 80100e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2201      	movs	r2, #1
 80100e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2201      	movs	r2, #1
 80100f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2201      	movs	r2, #1
 80100f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2201      	movs	r2, #1
 8010100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2201      	movs	r2, #1
 8010108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2201      	movs	r2, #1
 8010110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2201      	movs	r2, #1
 8010118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2201      	movs	r2, #1
 8010120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2201      	movs	r2, #1
 8010128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2201      	movs	r2, #1
 8010130:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2201      	movs	r2, #1
 8010138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801013c:	2300      	movs	r3, #0
}
 801013e:	4618      	mov	r0, r3
 8010140:	3708      	adds	r7, #8
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}
	...

08010148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010148:	b480      	push	{r7}
 801014a:	b085      	sub	sp, #20
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010156:	b2db      	uxtb	r3, r3
 8010158:	2b01      	cmp	r3, #1
 801015a:	d001      	beq.n	8010160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801015c:	2301      	movs	r3, #1
 801015e:	e072      	b.n	8010246 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2202      	movs	r2, #2
 8010164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	68da      	ldr	r2, [r3, #12]
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	f042 0201 	orr.w	r2, r2, #1
 8010176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	4a35      	ldr	r2, [pc, #212]	; (8010254 <HAL_TIM_Base_Start_IT+0x10c>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d040      	beq.n	8010204 <HAL_TIM_Base_Start_IT+0xbc>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	4a34      	ldr	r2, [pc, #208]	; (8010258 <HAL_TIM_Base_Start_IT+0x110>)
 8010188:	4293      	cmp	r3, r2
 801018a:	d03b      	beq.n	8010204 <HAL_TIM_Base_Start_IT+0xbc>
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010194:	d036      	beq.n	8010204 <HAL_TIM_Base_Start_IT+0xbc>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801019e:	d031      	beq.n	8010204 <HAL_TIM_Base_Start_IT+0xbc>
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	4a2d      	ldr	r2, [pc, #180]	; (801025c <HAL_TIM_Base_Start_IT+0x114>)
 80101a6:	4293      	cmp	r3, r2
 80101a8:	d02c      	beq.n	8010204 <HAL_TIM_Base_Start_IT+0xbc>
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	4a2c      	ldr	r2, [pc, #176]	; (8010260 <HAL_TIM_Base_Start_IT+0x118>)
 80101b0:	4293      	cmp	r3, r2
 80101b2:	d027      	beq.n	8010204 <HAL_TIM_Base_Start_IT+0xbc>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	4a2a      	ldr	r2, [pc, #168]	; (8010264 <HAL_TIM_Base_Start_IT+0x11c>)
 80101ba:	4293      	cmp	r3, r2
 80101bc:	d022      	beq.n	8010204 <HAL_TIM_Base_Start_IT+0xbc>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	4a29      	ldr	r2, [pc, #164]	; (8010268 <HAL_TIM_Base_Start_IT+0x120>)
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d01d      	beq.n	8010204 <HAL_TIM_Base_Start_IT+0xbc>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	4a27      	ldr	r2, [pc, #156]	; (801026c <HAL_TIM_Base_Start_IT+0x124>)
 80101ce:	4293      	cmp	r3, r2
 80101d0:	d018      	beq.n	8010204 <HAL_TIM_Base_Start_IT+0xbc>
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	4a26      	ldr	r2, [pc, #152]	; (8010270 <HAL_TIM_Base_Start_IT+0x128>)
 80101d8:	4293      	cmp	r3, r2
 80101da:	d013      	beq.n	8010204 <HAL_TIM_Base_Start_IT+0xbc>
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	4a24      	ldr	r2, [pc, #144]	; (8010274 <HAL_TIM_Base_Start_IT+0x12c>)
 80101e2:	4293      	cmp	r3, r2
 80101e4:	d00e      	beq.n	8010204 <HAL_TIM_Base_Start_IT+0xbc>
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	4a23      	ldr	r2, [pc, #140]	; (8010278 <HAL_TIM_Base_Start_IT+0x130>)
 80101ec:	4293      	cmp	r3, r2
 80101ee:	d009      	beq.n	8010204 <HAL_TIM_Base_Start_IT+0xbc>
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	4a21      	ldr	r2, [pc, #132]	; (801027c <HAL_TIM_Base_Start_IT+0x134>)
 80101f6:	4293      	cmp	r3, r2
 80101f8:	d004      	beq.n	8010204 <HAL_TIM_Base_Start_IT+0xbc>
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	4a20      	ldr	r2, [pc, #128]	; (8010280 <HAL_TIM_Base_Start_IT+0x138>)
 8010200:	4293      	cmp	r3, r2
 8010202:	d115      	bne.n	8010230 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	689a      	ldr	r2, [r3, #8]
 801020a:	4b1e      	ldr	r3, [pc, #120]	; (8010284 <HAL_TIM_Base_Start_IT+0x13c>)
 801020c:	4013      	ands	r3, r2
 801020e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	2b06      	cmp	r3, #6
 8010214:	d015      	beq.n	8010242 <HAL_TIM_Base_Start_IT+0xfa>
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801021c:	d011      	beq.n	8010242 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	681a      	ldr	r2, [r3, #0]
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	f042 0201 	orr.w	r2, r2, #1
 801022c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801022e:	e008      	b.n	8010242 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	681a      	ldr	r2, [r3, #0]
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f042 0201 	orr.w	r2, r2, #1
 801023e:	601a      	str	r2, [r3, #0]
 8010240:	e000      	b.n	8010244 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010242:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010244:	2300      	movs	r3, #0
}
 8010246:	4618      	mov	r0, r3
 8010248:	3714      	adds	r7, #20
 801024a:	46bd      	mov	sp, r7
 801024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010250:	4770      	bx	lr
 8010252:	bf00      	nop
 8010254:	40012c00 	.word	0x40012c00
 8010258:	50012c00 	.word	0x50012c00
 801025c:	40000400 	.word	0x40000400
 8010260:	50000400 	.word	0x50000400
 8010264:	40000800 	.word	0x40000800
 8010268:	50000800 	.word	0x50000800
 801026c:	40000c00 	.word	0x40000c00
 8010270:	50000c00 	.word	0x50000c00
 8010274:	40013400 	.word	0x40013400
 8010278:	50013400 	.word	0x50013400
 801027c:	40014000 	.word	0x40014000
 8010280:	50014000 	.word	0x50014000
 8010284:	00010007 	.word	0x00010007

08010288 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d101      	bne.n	801029a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010296:	2301      	movs	r3, #1
 8010298:	e049      	b.n	801032e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80102a0:	b2db      	uxtb	r3, r3
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d106      	bne.n	80102b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2200      	movs	r2, #0
 80102aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f000 f841 	bl	8010336 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2202      	movs	r2, #2
 80102b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681a      	ldr	r2, [r3, #0]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	3304      	adds	r3, #4
 80102c4:	4619      	mov	r1, r3
 80102c6:	4610      	mov	r0, r2
 80102c8:	f000 fd50 	bl	8010d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2201      	movs	r2, #1
 80102d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2201      	movs	r2, #1
 80102d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2201      	movs	r2, #1
 80102e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2201      	movs	r2, #1
 80102e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2201      	movs	r2, #1
 80102f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2201      	movs	r2, #1
 80102f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2201      	movs	r2, #1
 8010300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2201      	movs	r2, #1
 8010308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2201      	movs	r2, #1
 8010310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2201      	movs	r2, #1
 8010318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2201      	movs	r2, #1
 8010320:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2201      	movs	r2, #1
 8010328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801032c:	2300      	movs	r3, #0
}
 801032e:	4618      	mov	r0, r3
 8010330:	3708      	adds	r7, #8
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}

08010336 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010336:	b480      	push	{r7}
 8010338:	b083      	sub	sp, #12
 801033a:	af00      	add	r7, sp, #0
 801033c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801033e:	bf00      	nop
 8010340:	370c      	adds	r7, #12
 8010342:	46bd      	mov	sp, r7
 8010344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010348:	4770      	bx	lr
	...

0801034c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b084      	sub	sp, #16
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d109      	bne.n	8010370 <HAL_TIM_PWM_Start+0x24>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010362:	b2db      	uxtb	r3, r3
 8010364:	2b01      	cmp	r3, #1
 8010366:	bf14      	ite	ne
 8010368:	2301      	movne	r3, #1
 801036a:	2300      	moveq	r3, #0
 801036c:	b2db      	uxtb	r3, r3
 801036e:	e03c      	b.n	80103ea <HAL_TIM_PWM_Start+0x9e>
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	2b04      	cmp	r3, #4
 8010374:	d109      	bne.n	801038a <HAL_TIM_PWM_Start+0x3e>
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801037c:	b2db      	uxtb	r3, r3
 801037e:	2b01      	cmp	r3, #1
 8010380:	bf14      	ite	ne
 8010382:	2301      	movne	r3, #1
 8010384:	2300      	moveq	r3, #0
 8010386:	b2db      	uxtb	r3, r3
 8010388:	e02f      	b.n	80103ea <HAL_TIM_PWM_Start+0x9e>
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	2b08      	cmp	r3, #8
 801038e:	d109      	bne.n	80103a4 <HAL_TIM_PWM_Start+0x58>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010396:	b2db      	uxtb	r3, r3
 8010398:	2b01      	cmp	r3, #1
 801039a:	bf14      	ite	ne
 801039c:	2301      	movne	r3, #1
 801039e:	2300      	moveq	r3, #0
 80103a0:	b2db      	uxtb	r3, r3
 80103a2:	e022      	b.n	80103ea <HAL_TIM_PWM_Start+0x9e>
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	2b0c      	cmp	r3, #12
 80103a8:	d109      	bne.n	80103be <HAL_TIM_PWM_Start+0x72>
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80103b0:	b2db      	uxtb	r3, r3
 80103b2:	2b01      	cmp	r3, #1
 80103b4:	bf14      	ite	ne
 80103b6:	2301      	movne	r3, #1
 80103b8:	2300      	moveq	r3, #0
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	e015      	b.n	80103ea <HAL_TIM_PWM_Start+0x9e>
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	2b10      	cmp	r3, #16
 80103c2:	d109      	bne.n	80103d8 <HAL_TIM_PWM_Start+0x8c>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	bf14      	ite	ne
 80103d0:	2301      	movne	r3, #1
 80103d2:	2300      	moveq	r3, #0
 80103d4:	b2db      	uxtb	r3, r3
 80103d6:	e008      	b.n	80103ea <HAL_TIM_PWM_Start+0x9e>
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80103de:	b2db      	uxtb	r3, r3
 80103e0:	2b01      	cmp	r3, #1
 80103e2:	bf14      	ite	ne
 80103e4:	2301      	movne	r3, #1
 80103e6:	2300      	moveq	r3, #0
 80103e8:	b2db      	uxtb	r3, r3
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d001      	beq.n	80103f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80103ee:	2301      	movs	r3, #1
 80103f0:	e0d8      	b.n	80105a4 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d104      	bne.n	8010402 <HAL_TIM_PWM_Start+0xb6>
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2202      	movs	r2, #2
 80103fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010400:	e023      	b.n	801044a <HAL_TIM_PWM_Start+0xfe>
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	2b04      	cmp	r3, #4
 8010406:	d104      	bne.n	8010412 <HAL_TIM_PWM_Start+0xc6>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2202      	movs	r2, #2
 801040c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010410:	e01b      	b.n	801044a <HAL_TIM_PWM_Start+0xfe>
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	2b08      	cmp	r3, #8
 8010416:	d104      	bne.n	8010422 <HAL_TIM_PWM_Start+0xd6>
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2202      	movs	r2, #2
 801041c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010420:	e013      	b.n	801044a <HAL_TIM_PWM_Start+0xfe>
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	2b0c      	cmp	r3, #12
 8010426:	d104      	bne.n	8010432 <HAL_TIM_PWM_Start+0xe6>
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2202      	movs	r2, #2
 801042c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010430:	e00b      	b.n	801044a <HAL_TIM_PWM_Start+0xfe>
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	2b10      	cmp	r3, #16
 8010436:	d104      	bne.n	8010442 <HAL_TIM_PWM_Start+0xf6>
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2202      	movs	r2, #2
 801043c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010440:	e003      	b.n	801044a <HAL_TIM_PWM_Start+0xfe>
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2202      	movs	r2, #2
 8010446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2201      	movs	r2, #1
 8010450:	6839      	ldr	r1, [r7, #0]
 8010452:	4618      	mov	r0, r3
 8010454:	f001 f9f6 	bl	8011844 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4a53      	ldr	r2, [pc, #332]	; (80105ac <HAL_TIM_PWM_Start+0x260>)
 801045e:	4293      	cmp	r3, r2
 8010460:	d02c      	beq.n	80104bc <HAL_TIM_PWM_Start+0x170>
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	4a52      	ldr	r2, [pc, #328]	; (80105b0 <HAL_TIM_PWM_Start+0x264>)
 8010468:	4293      	cmp	r3, r2
 801046a:	d027      	beq.n	80104bc <HAL_TIM_PWM_Start+0x170>
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	4a50      	ldr	r2, [pc, #320]	; (80105b4 <HAL_TIM_PWM_Start+0x268>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d022      	beq.n	80104bc <HAL_TIM_PWM_Start+0x170>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	4a4f      	ldr	r2, [pc, #316]	; (80105b8 <HAL_TIM_PWM_Start+0x26c>)
 801047c:	4293      	cmp	r3, r2
 801047e:	d01d      	beq.n	80104bc <HAL_TIM_PWM_Start+0x170>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4a4d      	ldr	r2, [pc, #308]	; (80105bc <HAL_TIM_PWM_Start+0x270>)
 8010486:	4293      	cmp	r3, r2
 8010488:	d018      	beq.n	80104bc <HAL_TIM_PWM_Start+0x170>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	4a4c      	ldr	r2, [pc, #304]	; (80105c0 <HAL_TIM_PWM_Start+0x274>)
 8010490:	4293      	cmp	r3, r2
 8010492:	d013      	beq.n	80104bc <HAL_TIM_PWM_Start+0x170>
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	4a4a      	ldr	r2, [pc, #296]	; (80105c4 <HAL_TIM_PWM_Start+0x278>)
 801049a:	4293      	cmp	r3, r2
 801049c:	d00e      	beq.n	80104bc <HAL_TIM_PWM_Start+0x170>
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	4a49      	ldr	r2, [pc, #292]	; (80105c8 <HAL_TIM_PWM_Start+0x27c>)
 80104a4:	4293      	cmp	r3, r2
 80104a6:	d009      	beq.n	80104bc <HAL_TIM_PWM_Start+0x170>
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	4a47      	ldr	r2, [pc, #284]	; (80105cc <HAL_TIM_PWM_Start+0x280>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d004      	beq.n	80104bc <HAL_TIM_PWM_Start+0x170>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	4a46      	ldr	r2, [pc, #280]	; (80105d0 <HAL_TIM_PWM_Start+0x284>)
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d101      	bne.n	80104c0 <HAL_TIM_PWM_Start+0x174>
 80104bc:	2301      	movs	r3, #1
 80104be:	e000      	b.n	80104c2 <HAL_TIM_PWM_Start+0x176>
 80104c0:	2300      	movs	r3, #0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d007      	beq.n	80104d6 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80104d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	4a34      	ldr	r2, [pc, #208]	; (80105ac <HAL_TIM_PWM_Start+0x260>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d040      	beq.n	8010562 <HAL_TIM_PWM_Start+0x216>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	4a32      	ldr	r2, [pc, #200]	; (80105b0 <HAL_TIM_PWM_Start+0x264>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d03b      	beq.n	8010562 <HAL_TIM_PWM_Start+0x216>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104f2:	d036      	beq.n	8010562 <HAL_TIM_PWM_Start+0x216>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80104fc:	d031      	beq.n	8010562 <HAL_TIM_PWM_Start+0x216>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	4a34      	ldr	r2, [pc, #208]	; (80105d4 <HAL_TIM_PWM_Start+0x288>)
 8010504:	4293      	cmp	r3, r2
 8010506:	d02c      	beq.n	8010562 <HAL_TIM_PWM_Start+0x216>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	4a32      	ldr	r2, [pc, #200]	; (80105d8 <HAL_TIM_PWM_Start+0x28c>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d027      	beq.n	8010562 <HAL_TIM_PWM_Start+0x216>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	4a31      	ldr	r2, [pc, #196]	; (80105dc <HAL_TIM_PWM_Start+0x290>)
 8010518:	4293      	cmp	r3, r2
 801051a:	d022      	beq.n	8010562 <HAL_TIM_PWM_Start+0x216>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	4a2f      	ldr	r2, [pc, #188]	; (80105e0 <HAL_TIM_PWM_Start+0x294>)
 8010522:	4293      	cmp	r3, r2
 8010524:	d01d      	beq.n	8010562 <HAL_TIM_PWM_Start+0x216>
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	4a2e      	ldr	r2, [pc, #184]	; (80105e4 <HAL_TIM_PWM_Start+0x298>)
 801052c:	4293      	cmp	r3, r2
 801052e:	d018      	beq.n	8010562 <HAL_TIM_PWM_Start+0x216>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	4a2c      	ldr	r2, [pc, #176]	; (80105e8 <HAL_TIM_PWM_Start+0x29c>)
 8010536:	4293      	cmp	r3, r2
 8010538:	d013      	beq.n	8010562 <HAL_TIM_PWM_Start+0x216>
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	4a1d      	ldr	r2, [pc, #116]	; (80105b4 <HAL_TIM_PWM_Start+0x268>)
 8010540:	4293      	cmp	r3, r2
 8010542:	d00e      	beq.n	8010562 <HAL_TIM_PWM_Start+0x216>
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	4a1b      	ldr	r2, [pc, #108]	; (80105b8 <HAL_TIM_PWM_Start+0x26c>)
 801054a:	4293      	cmp	r3, r2
 801054c:	d009      	beq.n	8010562 <HAL_TIM_PWM_Start+0x216>
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	4a1a      	ldr	r2, [pc, #104]	; (80105bc <HAL_TIM_PWM_Start+0x270>)
 8010554:	4293      	cmp	r3, r2
 8010556:	d004      	beq.n	8010562 <HAL_TIM_PWM_Start+0x216>
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	4a18      	ldr	r2, [pc, #96]	; (80105c0 <HAL_TIM_PWM_Start+0x274>)
 801055e:	4293      	cmp	r3, r2
 8010560:	d115      	bne.n	801058e <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	689a      	ldr	r2, [r3, #8]
 8010568:	4b20      	ldr	r3, [pc, #128]	; (80105ec <HAL_TIM_PWM_Start+0x2a0>)
 801056a:	4013      	ands	r3, r2
 801056c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2b06      	cmp	r3, #6
 8010572:	d015      	beq.n	80105a0 <HAL_TIM_PWM_Start+0x254>
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801057a:	d011      	beq.n	80105a0 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	681a      	ldr	r2, [r3, #0]
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	f042 0201 	orr.w	r2, r2, #1
 801058a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801058c:	e008      	b.n	80105a0 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	681a      	ldr	r2, [r3, #0]
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	f042 0201 	orr.w	r2, r2, #1
 801059c:	601a      	str	r2, [r3, #0]
 801059e:	e000      	b.n	80105a2 <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80105a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80105a2:	2300      	movs	r3, #0
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3710      	adds	r7, #16
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}
 80105ac:	40012c00 	.word	0x40012c00
 80105b0:	50012c00 	.word	0x50012c00
 80105b4:	40013400 	.word	0x40013400
 80105b8:	50013400 	.word	0x50013400
 80105bc:	40014000 	.word	0x40014000
 80105c0:	50014000 	.word	0x50014000
 80105c4:	40014400 	.word	0x40014400
 80105c8:	50014400 	.word	0x50014400
 80105cc:	40014800 	.word	0x40014800
 80105d0:	50014800 	.word	0x50014800
 80105d4:	40000400 	.word	0x40000400
 80105d8:	50000400 	.word	0x50000400
 80105dc:	40000800 	.word	0x40000800
 80105e0:	50000800 	.word	0x50000800
 80105e4:	40000c00 	.word	0x40000c00
 80105e8:	50000c00 	.word	0x50000c00
 80105ec:	00010007 	.word	0x00010007

080105f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b082      	sub	sp, #8
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	691b      	ldr	r3, [r3, #16]
 80105fe:	f003 0302 	and.w	r3, r3, #2
 8010602:	2b02      	cmp	r3, #2
 8010604:	d122      	bne.n	801064c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	68db      	ldr	r3, [r3, #12]
 801060c:	f003 0302 	and.w	r3, r3, #2
 8010610:	2b02      	cmp	r3, #2
 8010612:	d11b      	bne.n	801064c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	f06f 0202 	mvn.w	r2, #2
 801061c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	2201      	movs	r2, #1
 8010622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	699b      	ldr	r3, [r3, #24]
 801062a:	f003 0303 	and.w	r3, r3, #3
 801062e:	2b00      	cmp	r3, #0
 8010630:	d003      	beq.n	801063a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f000 fb7c 	bl	8010d30 <HAL_TIM_IC_CaptureCallback>
 8010638:	e005      	b.n	8010646 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f000 fb6e 	bl	8010d1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f000 fb7f 	bl	8010d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2200      	movs	r2, #0
 801064a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	691b      	ldr	r3, [r3, #16]
 8010652:	f003 0304 	and.w	r3, r3, #4
 8010656:	2b04      	cmp	r3, #4
 8010658:	d122      	bne.n	80106a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	68db      	ldr	r3, [r3, #12]
 8010660:	f003 0304 	and.w	r3, r3, #4
 8010664:	2b04      	cmp	r3, #4
 8010666:	d11b      	bne.n	80106a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	f06f 0204 	mvn.w	r2, #4
 8010670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2202      	movs	r2, #2
 8010676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	699b      	ldr	r3, [r3, #24]
 801067e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010682:	2b00      	cmp	r3, #0
 8010684:	d003      	beq.n	801068e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f000 fb52 	bl	8010d30 <HAL_TIM_IC_CaptureCallback>
 801068c:	e005      	b.n	801069a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f000 fb44 	bl	8010d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f000 fb55 	bl	8010d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2200      	movs	r2, #0
 801069e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	691b      	ldr	r3, [r3, #16]
 80106a6:	f003 0308 	and.w	r3, r3, #8
 80106aa:	2b08      	cmp	r3, #8
 80106ac:	d122      	bne.n	80106f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	68db      	ldr	r3, [r3, #12]
 80106b4:	f003 0308 	and.w	r3, r3, #8
 80106b8:	2b08      	cmp	r3, #8
 80106ba:	d11b      	bne.n	80106f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	f06f 0208 	mvn.w	r2, #8
 80106c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2204      	movs	r2, #4
 80106ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	69db      	ldr	r3, [r3, #28]
 80106d2:	f003 0303 	and.w	r3, r3, #3
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d003      	beq.n	80106e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f000 fb28 	bl	8010d30 <HAL_TIM_IC_CaptureCallback>
 80106e0:	e005      	b.n	80106ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80106e2:	6878      	ldr	r0, [r7, #4]
 80106e4:	f000 fb1a 	bl	8010d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f000 fb2b 	bl	8010d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2200      	movs	r2, #0
 80106f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	691b      	ldr	r3, [r3, #16]
 80106fa:	f003 0310 	and.w	r3, r3, #16
 80106fe:	2b10      	cmp	r3, #16
 8010700:	d122      	bne.n	8010748 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	68db      	ldr	r3, [r3, #12]
 8010708:	f003 0310 	and.w	r3, r3, #16
 801070c:	2b10      	cmp	r3, #16
 801070e:	d11b      	bne.n	8010748 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f06f 0210 	mvn.w	r2, #16
 8010718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2208      	movs	r2, #8
 801071e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	69db      	ldr	r3, [r3, #28]
 8010726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801072a:	2b00      	cmp	r3, #0
 801072c:	d003      	beq.n	8010736 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f000 fafe 	bl	8010d30 <HAL_TIM_IC_CaptureCallback>
 8010734:	e005      	b.n	8010742 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f000 faf0 	bl	8010d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f000 fb01 	bl	8010d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2200      	movs	r2, #0
 8010746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	691b      	ldr	r3, [r3, #16]
 801074e:	f003 0301 	and.w	r3, r3, #1
 8010752:	2b01      	cmp	r3, #1
 8010754:	d10e      	bne.n	8010774 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	68db      	ldr	r3, [r3, #12]
 801075c:	f003 0301 	and.w	r3, r3, #1
 8010760:	2b01      	cmp	r3, #1
 8010762:	d107      	bne.n	8010774 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	f06f 0201 	mvn.w	r2, #1
 801076c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f7f0 fe94 	bl	800149c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	691b      	ldr	r3, [r3, #16]
 801077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801077e:	2b80      	cmp	r3, #128	; 0x80
 8010780:	d10e      	bne.n	80107a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	68db      	ldr	r3, [r3, #12]
 8010788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801078c:	2b80      	cmp	r3, #128	; 0x80
 801078e:	d107      	bne.n	80107a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f001 fa06 	bl	8011bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	691b      	ldr	r3, [r3, #16]
 80107a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107ae:	d10e      	bne.n	80107ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	68db      	ldr	r3, [r3, #12]
 80107b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107ba:	2b80      	cmp	r3, #128	; 0x80
 80107bc:	d107      	bne.n	80107ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80107c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f001 f9f9 	bl	8011bc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	691b      	ldr	r3, [r3, #16]
 80107d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107d8:	2b40      	cmp	r3, #64	; 0x40
 80107da:	d10e      	bne.n	80107fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	68db      	ldr	r3, [r3, #12]
 80107e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107e6:	2b40      	cmp	r3, #64	; 0x40
 80107e8:	d107      	bne.n	80107fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80107f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f000 faaf 	bl	8010d58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	691b      	ldr	r3, [r3, #16]
 8010800:	f003 0320 	and.w	r3, r3, #32
 8010804:	2b20      	cmp	r3, #32
 8010806:	d10e      	bne.n	8010826 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	68db      	ldr	r3, [r3, #12]
 801080e:	f003 0320 	and.w	r3, r3, #32
 8010812:	2b20      	cmp	r3, #32
 8010814:	d107      	bne.n	8010826 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f06f 0220 	mvn.w	r2, #32
 801081e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f001 f9b9 	bl	8011b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	691b      	ldr	r3, [r3, #16]
 801082c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010834:	d10f      	bne.n	8010856 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	68db      	ldr	r3, [r3, #12]
 801083c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010844:	d107      	bne.n	8010856 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801084e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f001 f9bf 	bl	8011bd4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	691b      	ldr	r3, [r3, #16]
 801085c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010860:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010864:	d10f      	bne.n	8010886 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	68db      	ldr	r3, [r3, #12]
 801086c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010870:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010874:	d107      	bne.n	8010886 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801087e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f001 f9b1 	bl	8011be8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	691b      	ldr	r3, [r3, #16]
 801088c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010894:	d10f      	bne.n	80108b6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	68db      	ldr	r3, [r3, #12]
 801089c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80108a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80108a4:	d107      	bne.n	80108b6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80108ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f001 f9a3 	bl	8011bfc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	691b      	ldr	r3, [r3, #16]
 80108bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80108c4:	d10f      	bne.n	80108e6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	68db      	ldr	r3, [r3, #12]
 80108cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80108d4:	d107      	bne.n	80108e6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80108de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f001 f995 	bl	8011c10 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80108e6:	bf00      	nop
 80108e8:	3708      	adds	r7, #8
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
	...

080108f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b086      	sub	sp, #24
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	60f8      	str	r0, [r7, #12]
 80108f8:	60b9      	str	r1, [r7, #8]
 80108fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80108fc:	2300      	movs	r3, #0
 80108fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010906:	2b01      	cmp	r3, #1
 8010908:	d101      	bne.n	801090e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801090a:	2302      	movs	r3, #2
 801090c:	e0ff      	b.n	8010b0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	2201      	movs	r2, #1
 8010912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2b14      	cmp	r3, #20
 801091a:	f200 80f0 	bhi.w	8010afe <HAL_TIM_PWM_ConfigChannel+0x20e>
 801091e:	a201      	add	r2, pc, #4	; (adr r2, 8010924 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010924:	08010979 	.word	0x08010979
 8010928:	08010aff 	.word	0x08010aff
 801092c:	08010aff 	.word	0x08010aff
 8010930:	08010aff 	.word	0x08010aff
 8010934:	080109b9 	.word	0x080109b9
 8010938:	08010aff 	.word	0x08010aff
 801093c:	08010aff 	.word	0x08010aff
 8010940:	08010aff 	.word	0x08010aff
 8010944:	080109fb 	.word	0x080109fb
 8010948:	08010aff 	.word	0x08010aff
 801094c:	08010aff 	.word	0x08010aff
 8010950:	08010aff 	.word	0x08010aff
 8010954:	08010a3b 	.word	0x08010a3b
 8010958:	08010aff 	.word	0x08010aff
 801095c:	08010aff 	.word	0x08010aff
 8010960:	08010aff 	.word	0x08010aff
 8010964:	08010a7d 	.word	0x08010a7d
 8010968:	08010aff 	.word	0x08010aff
 801096c:	08010aff 	.word	0x08010aff
 8010970:	08010aff 	.word	0x08010aff
 8010974:	08010abd 	.word	0x08010abd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	68b9      	ldr	r1, [r7, #8]
 801097e:	4618      	mov	r0, r3
 8010980:	f000 faee 	bl	8010f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	699a      	ldr	r2, [r3, #24]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	f042 0208 	orr.w	r2, r2, #8
 8010992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	699a      	ldr	r2, [r3, #24]
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	f022 0204 	bic.w	r2, r2, #4
 80109a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	6999      	ldr	r1, [r3, #24]
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	691a      	ldr	r2, [r3, #16]
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	430a      	orrs	r2, r1
 80109b4:	619a      	str	r2, [r3, #24]
      break;
 80109b6:	e0a5      	b.n	8010b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	68b9      	ldr	r1, [r7, #8]
 80109be:	4618      	mov	r0, r3
 80109c0:	f000 fb90 	bl	80110e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	699a      	ldr	r2, [r3, #24]
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80109d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	699a      	ldr	r2, [r3, #24]
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80109e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	6999      	ldr	r1, [r3, #24]
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	691b      	ldr	r3, [r3, #16]
 80109ee:	021a      	lsls	r2, r3, #8
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	430a      	orrs	r2, r1
 80109f6:	619a      	str	r2, [r3, #24]
      break;
 80109f8:	e084      	b.n	8010b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	68b9      	ldr	r1, [r7, #8]
 8010a00:	4618      	mov	r0, r3
 8010a02:	f000 fc1f 	bl	8011244 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	69da      	ldr	r2, [r3, #28]
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	f042 0208 	orr.w	r2, r2, #8
 8010a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	69da      	ldr	r2, [r3, #28]
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	f022 0204 	bic.w	r2, r2, #4
 8010a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	69d9      	ldr	r1, [r3, #28]
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	691a      	ldr	r2, [r3, #16]
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	430a      	orrs	r2, r1
 8010a36:	61da      	str	r2, [r3, #28]
      break;
 8010a38:	e064      	b.n	8010b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	68b9      	ldr	r1, [r7, #8]
 8010a40:	4618      	mov	r0, r3
 8010a42:	f000 fcad 	bl	80113a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	69da      	ldr	r2, [r3, #28]
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	69da      	ldr	r2, [r3, #28]
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	69d9      	ldr	r1, [r3, #28]
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	691b      	ldr	r3, [r3, #16]
 8010a70:	021a      	lsls	r2, r3, #8
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	430a      	orrs	r2, r1
 8010a78:	61da      	str	r2, [r3, #28]
      break;
 8010a7a:	e043      	b.n	8010b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	68b9      	ldr	r1, [r7, #8]
 8010a82:	4618      	mov	r0, r3
 8010a84:	f000 fd3c 	bl	8011500 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	f042 0208 	orr.w	r2, r2, #8
 8010a96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	f022 0204 	bic.w	r2, r2, #4
 8010aa6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	691a      	ldr	r2, [r3, #16]
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	430a      	orrs	r2, r1
 8010ab8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8010aba:	e023      	b.n	8010b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	68b9      	ldr	r1, [r7, #8]
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f000 fd9e 	bl	8011604 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010ad6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010ae6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	691b      	ldr	r3, [r3, #16]
 8010af2:	021a      	lsls	r2, r3, #8
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	430a      	orrs	r2, r1
 8010afa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8010afc:	e002      	b.n	8010b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010afe:	2301      	movs	r3, #1
 8010b00:	75fb      	strb	r3, [r7, #23]
      break;
 8010b02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	2200      	movs	r2, #0
 8010b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3718      	adds	r7, #24
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	bf00      	nop

08010b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010b22:	2300      	movs	r3, #0
 8010b24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010b2c:	2b01      	cmp	r3, #1
 8010b2e:	d101      	bne.n	8010b34 <HAL_TIM_ConfigClockSource+0x1c>
 8010b30:	2302      	movs	r3, #2
 8010b32:	e0e6      	b.n	8010d02 <HAL_TIM_ConfigClockSource+0x1ea>
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2201      	movs	r2, #1
 8010b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2202      	movs	r2, #2
 8010b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	689b      	ldr	r3, [r3, #8]
 8010b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8010b52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8010b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010b5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	68ba      	ldr	r2, [r7, #8]
 8010b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	4a67      	ldr	r2, [pc, #412]	; (8010d0c <HAL_TIM_ConfigClockSource+0x1f4>)
 8010b6e:	4293      	cmp	r3, r2
 8010b70:	f000 80b1 	beq.w	8010cd6 <HAL_TIM_ConfigClockSource+0x1be>
 8010b74:	4a65      	ldr	r2, [pc, #404]	; (8010d0c <HAL_TIM_ConfigClockSource+0x1f4>)
 8010b76:	4293      	cmp	r3, r2
 8010b78:	f200 80b6 	bhi.w	8010ce8 <HAL_TIM_ConfigClockSource+0x1d0>
 8010b7c:	4a64      	ldr	r2, [pc, #400]	; (8010d10 <HAL_TIM_ConfigClockSource+0x1f8>)
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	f000 80a9 	beq.w	8010cd6 <HAL_TIM_ConfigClockSource+0x1be>
 8010b84:	4a62      	ldr	r2, [pc, #392]	; (8010d10 <HAL_TIM_ConfigClockSource+0x1f8>)
 8010b86:	4293      	cmp	r3, r2
 8010b88:	f200 80ae 	bhi.w	8010ce8 <HAL_TIM_ConfigClockSource+0x1d0>
 8010b8c:	4a61      	ldr	r2, [pc, #388]	; (8010d14 <HAL_TIM_ConfigClockSource+0x1fc>)
 8010b8e:	4293      	cmp	r3, r2
 8010b90:	f000 80a1 	beq.w	8010cd6 <HAL_TIM_ConfigClockSource+0x1be>
 8010b94:	4a5f      	ldr	r2, [pc, #380]	; (8010d14 <HAL_TIM_ConfigClockSource+0x1fc>)
 8010b96:	4293      	cmp	r3, r2
 8010b98:	f200 80a6 	bhi.w	8010ce8 <HAL_TIM_ConfigClockSource+0x1d0>
 8010b9c:	4a5e      	ldr	r2, [pc, #376]	; (8010d18 <HAL_TIM_ConfigClockSource+0x200>)
 8010b9e:	4293      	cmp	r3, r2
 8010ba0:	f000 8099 	beq.w	8010cd6 <HAL_TIM_ConfigClockSource+0x1be>
 8010ba4:	4a5c      	ldr	r2, [pc, #368]	; (8010d18 <HAL_TIM_ConfigClockSource+0x200>)
 8010ba6:	4293      	cmp	r3, r2
 8010ba8:	f200 809e 	bhi.w	8010ce8 <HAL_TIM_ConfigClockSource+0x1d0>
 8010bac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010bb0:	f000 8091 	beq.w	8010cd6 <HAL_TIM_ConfigClockSource+0x1be>
 8010bb4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010bb8:	f200 8096 	bhi.w	8010ce8 <HAL_TIM_ConfigClockSource+0x1d0>
 8010bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010bc0:	f000 8089 	beq.w	8010cd6 <HAL_TIM_ConfigClockSource+0x1be>
 8010bc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010bc8:	f200 808e 	bhi.w	8010ce8 <HAL_TIM_ConfigClockSource+0x1d0>
 8010bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010bd0:	d03e      	beq.n	8010c50 <HAL_TIM_ConfigClockSource+0x138>
 8010bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010bd6:	f200 8087 	bhi.w	8010ce8 <HAL_TIM_ConfigClockSource+0x1d0>
 8010bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010bde:	f000 8086 	beq.w	8010cee <HAL_TIM_ConfigClockSource+0x1d6>
 8010be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010be6:	d87f      	bhi.n	8010ce8 <HAL_TIM_ConfigClockSource+0x1d0>
 8010be8:	2b70      	cmp	r3, #112	; 0x70
 8010bea:	d01a      	beq.n	8010c22 <HAL_TIM_ConfigClockSource+0x10a>
 8010bec:	2b70      	cmp	r3, #112	; 0x70
 8010bee:	d87b      	bhi.n	8010ce8 <HAL_TIM_ConfigClockSource+0x1d0>
 8010bf0:	2b60      	cmp	r3, #96	; 0x60
 8010bf2:	d050      	beq.n	8010c96 <HAL_TIM_ConfigClockSource+0x17e>
 8010bf4:	2b60      	cmp	r3, #96	; 0x60
 8010bf6:	d877      	bhi.n	8010ce8 <HAL_TIM_ConfigClockSource+0x1d0>
 8010bf8:	2b50      	cmp	r3, #80	; 0x50
 8010bfa:	d03c      	beq.n	8010c76 <HAL_TIM_ConfigClockSource+0x15e>
 8010bfc:	2b50      	cmp	r3, #80	; 0x50
 8010bfe:	d873      	bhi.n	8010ce8 <HAL_TIM_ConfigClockSource+0x1d0>
 8010c00:	2b40      	cmp	r3, #64	; 0x40
 8010c02:	d058      	beq.n	8010cb6 <HAL_TIM_ConfigClockSource+0x19e>
 8010c04:	2b40      	cmp	r3, #64	; 0x40
 8010c06:	d86f      	bhi.n	8010ce8 <HAL_TIM_ConfigClockSource+0x1d0>
 8010c08:	2b30      	cmp	r3, #48	; 0x30
 8010c0a:	d064      	beq.n	8010cd6 <HAL_TIM_ConfigClockSource+0x1be>
 8010c0c:	2b30      	cmp	r3, #48	; 0x30
 8010c0e:	d86b      	bhi.n	8010ce8 <HAL_TIM_ConfigClockSource+0x1d0>
 8010c10:	2b20      	cmp	r3, #32
 8010c12:	d060      	beq.n	8010cd6 <HAL_TIM_ConfigClockSource+0x1be>
 8010c14:	2b20      	cmp	r3, #32
 8010c16:	d867      	bhi.n	8010ce8 <HAL_TIM_ConfigClockSource+0x1d0>
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d05c      	beq.n	8010cd6 <HAL_TIM_ConfigClockSource+0x1be>
 8010c1c:	2b10      	cmp	r3, #16
 8010c1e:	d05a      	beq.n	8010cd6 <HAL_TIM_ConfigClockSource+0x1be>
 8010c20:	e062      	b.n	8010ce8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	6818      	ldr	r0, [r3, #0]
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	6899      	ldr	r1, [r3, #8]
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	685a      	ldr	r2, [r3, #4]
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	68db      	ldr	r3, [r3, #12]
 8010c32:	f000 fde7 	bl	8011804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	689b      	ldr	r3, [r3, #8]
 8010c3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010c3e:	68bb      	ldr	r3, [r7, #8]
 8010c40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010c44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	68ba      	ldr	r2, [r7, #8]
 8010c4c:	609a      	str	r2, [r3, #8]
      break;
 8010c4e:	e04f      	b.n	8010cf0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	6818      	ldr	r0, [r3, #0]
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	6899      	ldr	r1, [r3, #8]
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	685a      	ldr	r2, [r3, #4]
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	f000 fdd0 	bl	8011804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	689a      	ldr	r2, [r3, #8]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010c72:	609a      	str	r2, [r3, #8]
      break;
 8010c74:	e03c      	b.n	8010cf0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6818      	ldr	r0, [r3, #0]
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	6859      	ldr	r1, [r3, #4]
 8010c7e:	683b      	ldr	r3, [r7, #0]
 8010c80:	68db      	ldr	r3, [r3, #12]
 8010c82:	461a      	mov	r2, r3
 8010c84:	f000 fd42 	bl	801170c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	2150      	movs	r1, #80	; 0x50
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f000 fd9b 	bl	80117ca <TIM_ITRx_SetConfig>
      break;
 8010c94:	e02c      	b.n	8010cf0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6818      	ldr	r0, [r3, #0]
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	6859      	ldr	r1, [r3, #4]
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	68db      	ldr	r3, [r3, #12]
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	f000 fd61 	bl	801176a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	2160      	movs	r1, #96	; 0x60
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f000 fd8b 	bl	80117ca <TIM_ITRx_SetConfig>
      break;
 8010cb4:	e01c      	b.n	8010cf0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	6818      	ldr	r0, [r3, #0]
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	6859      	ldr	r1, [r3, #4]
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	68db      	ldr	r3, [r3, #12]
 8010cc2:	461a      	mov	r2, r3
 8010cc4:	f000 fd22 	bl	801170c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	2140      	movs	r1, #64	; 0x40
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f000 fd7b 	bl	80117ca <TIM_ITRx_SetConfig>
      break;
 8010cd4:	e00c      	b.n	8010cf0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681a      	ldr	r2, [r3, #0]
 8010cda:	683b      	ldr	r3, [r7, #0]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	4619      	mov	r1, r3
 8010ce0:	4610      	mov	r0, r2
 8010ce2:	f000 fd72 	bl	80117ca <TIM_ITRx_SetConfig>
      break;
 8010ce6:	e003      	b.n	8010cf0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8010ce8:	2301      	movs	r3, #1
 8010cea:	73fb      	strb	r3, [r7, #15]
      break;
 8010cec:	e000      	b.n	8010cf0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8010cee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3710      	adds	r7, #16
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}
 8010d0a:	bf00      	nop
 8010d0c:	00100070 	.word	0x00100070
 8010d10:	00100040 	.word	0x00100040
 8010d14:	00100030 	.word	0x00100030
 8010d18:	00100020 	.word	0x00100020

08010d1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b083      	sub	sp, #12
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010d24:	bf00      	nop
 8010d26:	370c      	adds	r7, #12
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr

08010d30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010d30:	b480      	push	{r7}
 8010d32:	b083      	sub	sp, #12
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010d38:	bf00      	nop
 8010d3a:	370c      	adds	r7, #12
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d42:	4770      	bx	lr

08010d44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010d44:	b480      	push	{r7}
 8010d46:	b083      	sub	sp, #12
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010d4c:	bf00      	nop
 8010d4e:	370c      	adds	r7, #12
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr

08010d58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010d58:	b480      	push	{r7}
 8010d5a:	b083      	sub	sp, #12
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010d60:	bf00      	nop
 8010d62:	370c      	adds	r7, #12
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr

08010d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b085      	sub	sp, #20
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	4a68      	ldr	r2, [pc, #416]	; (8010f20 <TIM_Base_SetConfig+0x1b4>)
 8010d80:	4293      	cmp	r3, r2
 8010d82:	d02b      	beq.n	8010ddc <TIM_Base_SetConfig+0x70>
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	4a67      	ldr	r2, [pc, #412]	; (8010f24 <TIM_Base_SetConfig+0x1b8>)
 8010d88:	4293      	cmp	r3, r2
 8010d8a:	d027      	beq.n	8010ddc <TIM_Base_SetConfig+0x70>
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d92:	d023      	beq.n	8010ddc <TIM_Base_SetConfig+0x70>
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d9a:	d01f      	beq.n	8010ddc <TIM_Base_SetConfig+0x70>
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	4a62      	ldr	r2, [pc, #392]	; (8010f28 <TIM_Base_SetConfig+0x1bc>)
 8010da0:	4293      	cmp	r3, r2
 8010da2:	d01b      	beq.n	8010ddc <TIM_Base_SetConfig+0x70>
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	4a61      	ldr	r2, [pc, #388]	; (8010f2c <TIM_Base_SetConfig+0x1c0>)
 8010da8:	4293      	cmp	r3, r2
 8010daa:	d017      	beq.n	8010ddc <TIM_Base_SetConfig+0x70>
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	4a60      	ldr	r2, [pc, #384]	; (8010f30 <TIM_Base_SetConfig+0x1c4>)
 8010db0:	4293      	cmp	r3, r2
 8010db2:	d013      	beq.n	8010ddc <TIM_Base_SetConfig+0x70>
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	4a5f      	ldr	r2, [pc, #380]	; (8010f34 <TIM_Base_SetConfig+0x1c8>)
 8010db8:	4293      	cmp	r3, r2
 8010dba:	d00f      	beq.n	8010ddc <TIM_Base_SetConfig+0x70>
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	4a5e      	ldr	r2, [pc, #376]	; (8010f38 <TIM_Base_SetConfig+0x1cc>)
 8010dc0:	4293      	cmp	r3, r2
 8010dc2:	d00b      	beq.n	8010ddc <TIM_Base_SetConfig+0x70>
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	4a5d      	ldr	r2, [pc, #372]	; (8010f3c <TIM_Base_SetConfig+0x1d0>)
 8010dc8:	4293      	cmp	r3, r2
 8010dca:	d007      	beq.n	8010ddc <TIM_Base_SetConfig+0x70>
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	4a5c      	ldr	r2, [pc, #368]	; (8010f40 <TIM_Base_SetConfig+0x1d4>)
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d003      	beq.n	8010ddc <TIM_Base_SetConfig+0x70>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	4a5b      	ldr	r2, [pc, #364]	; (8010f44 <TIM_Base_SetConfig+0x1d8>)
 8010dd8:	4293      	cmp	r3, r2
 8010dda:	d108      	bne.n	8010dee <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	68fa      	ldr	r2, [r7, #12]
 8010dea:	4313      	orrs	r3, r2
 8010dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	4a4b      	ldr	r2, [pc, #300]	; (8010f20 <TIM_Base_SetConfig+0x1b4>)
 8010df2:	4293      	cmp	r3, r2
 8010df4:	d043      	beq.n	8010e7e <TIM_Base_SetConfig+0x112>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	4a4a      	ldr	r2, [pc, #296]	; (8010f24 <TIM_Base_SetConfig+0x1b8>)
 8010dfa:	4293      	cmp	r3, r2
 8010dfc:	d03f      	beq.n	8010e7e <TIM_Base_SetConfig+0x112>
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e04:	d03b      	beq.n	8010e7e <TIM_Base_SetConfig+0x112>
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010e0c:	d037      	beq.n	8010e7e <TIM_Base_SetConfig+0x112>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	4a45      	ldr	r2, [pc, #276]	; (8010f28 <TIM_Base_SetConfig+0x1bc>)
 8010e12:	4293      	cmp	r3, r2
 8010e14:	d033      	beq.n	8010e7e <TIM_Base_SetConfig+0x112>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	4a44      	ldr	r2, [pc, #272]	; (8010f2c <TIM_Base_SetConfig+0x1c0>)
 8010e1a:	4293      	cmp	r3, r2
 8010e1c:	d02f      	beq.n	8010e7e <TIM_Base_SetConfig+0x112>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	4a43      	ldr	r2, [pc, #268]	; (8010f30 <TIM_Base_SetConfig+0x1c4>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	d02b      	beq.n	8010e7e <TIM_Base_SetConfig+0x112>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	4a42      	ldr	r2, [pc, #264]	; (8010f34 <TIM_Base_SetConfig+0x1c8>)
 8010e2a:	4293      	cmp	r3, r2
 8010e2c:	d027      	beq.n	8010e7e <TIM_Base_SetConfig+0x112>
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	4a41      	ldr	r2, [pc, #260]	; (8010f38 <TIM_Base_SetConfig+0x1cc>)
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d023      	beq.n	8010e7e <TIM_Base_SetConfig+0x112>
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	4a40      	ldr	r2, [pc, #256]	; (8010f3c <TIM_Base_SetConfig+0x1d0>)
 8010e3a:	4293      	cmp	r3, r2
 8010e3c:	d01f      	beq.n	8010e7e <TIM_Base_SetConfig+0x112>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	4a3f      	ldr	r2, [pc, #252]	; (8010f40 <TIM_Base_SetConfig+0x1d4>)
 8010e42:	4293      	cmp	r3, r2
 8010e44:	d01b      	beq.n	8010e7e <TIM_Base_SetConfig+0x112>
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	4a3e      	ldr	r2, [pc, #248]	; (8010f44 <TIM_Base_SetConfig+0x1d8>)
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	d017      	beq.n	8010e7e <TIM_Base_SetConfig+0x112>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	4a3d      	ldr	r2, [pc, #244]	; (8010f48 <TIM_Base_SetConfig+0x1dc>)
 8010e52:	4293      	cmp	r3, r2
 8010e54:	d013      	beq.n	8010e7e <TIM_Base_SetConfig+0x112>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	4a3c      	ldr	r2, [pc, #240]	; (8010f4c <TIM_Base_SetConfig+0x1e0>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d00f      	beq.n	8010e7e <TIM_Base_SetConfig+0x112>
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	4a3b      	ldr	r2, [pc, #236]	; (8010f50 <TIM_Base_SetConfig+0x1e4>)
 8010e62:	4293      	cmp	r3, r2
 8010e64:	d00b      	beq.n	8010e7e <TIM_Base_SetConfig+0x112>
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	4a3a      	ldr	r2, [pc, #232]	; (8010f54 <TIM_Base_SetConfig+0x1e8>)
 8010e6a:	4293      	cmp	r3, r2
 8010e6c:	d007      	beq.n	8010e7e <TIM_Base_SetConfig+0x112>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	4a39      	ldr	r2, [pc, #228]	; (8010f58 <TIM_Base_SetConfig+0x1ec>)
 8010e72:	4293      	cmp	r3, r2
 8010e74:	d003      	beq.n	8010e7e <TIM_Base_SetConfig+0x112>
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	4a38      	ldr	r2, [pc, #224]	; (8010f5c <TIM_Base_SetConfig+0x1f0>)
 8010e7a:	4293      	cmp	r3, r2
 8010e7c:	d108      	bne.n	8010e90 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	68db      	ldr	r3, [r3, #12]
 8010e8a:	68fa      	ldr	r2, [r7, #12]
 8010e8c:	4313      	orrs	r3, r2
 8010e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	695b      	ldr	r3, [r3, #20]
 8010e9a:	4313      	orrs	r3, r2
 8010e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	68fa      	ldr	r2, [r7, #12]
 8010ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	689a      	ldr	r2, [r3, #8]
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	681a      	ldr	r2, [r3, #0]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	4a1a      	ldr	r2, [pc, #104]	; (8010f20 <TIM_Base_SetConfig+0x1b4>)
 8010eb8:	4293      	cmp	r3, r2
 8010eba:	d023      	beq.n	8010f04 <TIM_Base_SetConfig+0x198>
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	4a19      	ldr	r2, [pc, #100]	; (8010f24 <TIM_Base_SetConfig+0x1b8>)
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	d01f      	beq.n	8010f04 <TIM_Base_SetConfig+0x198>
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	4a1e      	ldr	r2, [pc, #120]	; (8010f40 <TIM_Base_SetConfig+0x1d4>)
 8010ec8:	4293      	cmp	r3, r2
 8010eca:	d01b      	beq.n	8010f04 <TIM_Base_SetConfig+0x198>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	4a1d      	ldr	r2, [pc, #116]	; (8010f44 <TIM_Base_SetConfig+0x1d8>)
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	d017      	beq.n	8010f04 <TIM_Base_SetConfig+0x198>
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	4a1c      	ldr	r2, [pc, #112]	; (8010f48 <TIM_Base_SetConfig+0x1dc>)
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	d013      	beq.n	8010f04 <TIM_Base_SetConfig+0x198>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	4a1b      	ldr	r2, [pc, #108]	; (8010f4c <TIM_Base_SetConfig+0x1e0>)
 8010ee0:	4293      	cmp	r3, r2
 8010ee2:	d00f      	beq.n	8010f04 <TIM_Base_SetConfig+0x198>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	4a1a      	ldr	r2, [pc, #104]	; (8010f50 <TIM_Base_SetConfig+0x1e4>)
 8010ee8:	4293      	cmp	r3, r2
 8010eea:	d00b      	beq.n	8010f04 <TIM_Base_SetConfig+0x198>
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	4a19      	ldr	r2, [pc, #100]	; (8010f54 <TIM_Base_SetConfig+0x1e8>)
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	d007      	beq.n	8010f04 <TIM_Base_SetConfig+0x198>
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	4a18      	ldr	r2, [pc, #96]	; (8010f58 <TIM_Base_SetConfig+0x1ec>)
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	d003      	beq.n	8010f04 <TIM_Base_SetConfig+0x198>
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	4a17      	ldr	r2, [pc, #92]	; (8010f5c <TIM_Base_SetConfig+0x1f0>)
 8010f00:	4293      	cmp	r3, r2
 8010f02:	d103      	bne.n	8010f0c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	691a      	ldr	r2, [r3, #16]
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2201      	movs	r2, #1
 8010f10:	615a      	str	r2, [r3, #20]
}
 8010f12:	bf00      	nop
 8010f14:	3714      	adds	r7, #20
 8010f16:	46bd      	mov	sp, r7
 8010f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1c:	4770      	bx	lr
 8010f1e:	bf00      	nop
 8010f20:	40012c00 	.word	0x40012c00
 8010f24:	50012c00 	.word	0x50012c00
 8010f28:	40000400 	.word	0x40000400
 8010f2c:	50000400 	.word	0x50000400
 8010f30:	40000800 	.word	0x40000800
 8010f34:	50000800 	.word	0x50000800
 8010f38:	40000c00 	.word	0x40000c00
 8010f3c:	50000c00 	.word	0x50000c00
 8010f40:	40013400 	.word	0x40013400
 8010f44:	50013400 	.word	0x50013400
 8010f48:	40014000 	.word	0x40014000
 8010f4c:	50014000 	.word	0x50014000
 8010f50:	40014400 	.word	0x40014400
 8010f54:	50014400 	.word	0x50014400
 8010f58:	40014800 	.word	0x40014800
 8010f5c:	50014800 	.word	0x50014800

08010f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010f60:	b480      	push	{r7}
 8010f62:	b087      	sub	sp, #28
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
 8010f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6a1b      	ldr	r3, [r3, #32]
 8010f6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6a1b      	ldr	r3, [r3, #32]
 8010f74:	f023 0201 	bic.w	r2, r3, #1
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	685b      	ldr	r3, [r3, #4]
 8010f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	699b      	ldr	r3, [r3, #24]
 8010f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	f023 0303 	bic.w	r3, r3, #3
 8010f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	68fa      	ldr	r2, [r7, #12]
 8010fa2:	4313      	orrs	r3, r2
 8010fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	f023 0302 	bic.w	r3, r3, #2
 8010fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	689b      	ldr	r3, [r3, #8]
 8010fb2:	697a      	ldr	r2, [r7, #20]
 8010fb4:	4313      	orrs	r3, r2
 8010fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	4a40      	ldr	r2, [pc, #256]	; (80110bc <TIM_OC1_SetConfig+0x15c>)
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d023      	beq.n	8011008 <TIM_OC1_SetConfig+0xa8>
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	4a3f      	ldr	r2, [pc, #252]	; (80110c0 <TIM_OC1_SetConfig+0x160>)
 8010fc4:	4293      	cmp	r3, r2
 8010fc6:	d01f      	beq.n	8011008 <TIM_OC1_SetConfig+0xa8>
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	4a3e      	ldr	r2, [pc, #248]	; (80110c4 <TIM_OC1_SetConfig+0x164>)
 8010fcc:	4293      	cmp	r3, r2
 8010fce:	d01b      	beq.n	8011008 <TIM_OC1_SetConfig+0xa8>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	4a3d      	ldr	r2, [pc, #244]	; (80110c8 <TIM_OC1_SetConfig+0x168>)
 8010fd4:	4293      	cmp	r3, r2
 8010fd6:	d017      	beq.n	8011008 <TIM_OC1_SetConfig+0xa8>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	4a3c      	ldr	r2, [pc, #240]	; (80110cc <TIM_OC1_SetConfig+0x16c>)
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	d013      	beq.n	8011008 <TIM_OC1_SetConfig+0xa8>
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	4a3b      	ldr	r2, [pc, #236]	; (80110d0 <TIM_OC1_SetConfig+0x170>)
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	d00f      	beq.n	8011008 <TIM_OC1_SetConfig+0xa8>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	4a3a      	ldr	r2, [pc, #232]	; (80110d4 <TIM_OC1_SetConfig+0x174>)
 8010fec:	4293      	cmp	r3, r2
 8010fee:	d00b      	beq.n	8011008 <TIM_OC1_SetConfig+0xa8>
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	4a39      	ldr	r2, [pc, #228]	; (80110d8 <TIM_OC1_SetConfig+0x178>)
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	d007      	beq.n	8011008 <TIM_OC1_SetConfig+0xa8>
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	4a38      	ldr	r2, [pc, #224]	; (80110dc <TIM_OC1_SetConfig+0x17c>)
 8010ffc:	4293      	cmp	r3, r2
 8010ffe:	d003      	beq.n	8011008 <TIM_OC1_SetConfig+0xa8>
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	4a37      	ldr	r2, [pc, #220]	; (80110e0 <TIM_OC1_SetConfig+0x180>)
 8011004:	4293      	cmp	r3, r2
 8011006:	d10c      	bne.n	8011022 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	f023 0308 	bic.w	r3, r3, #8
 801100e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	68db      	ldr	r3, [r3, #12]
 8011014:	697a      	ldr	r2, [r7, #20]
 8011016:	4313      	orrs	r3, r2
 8011018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801101a:	697b      	ldr	r3, [r7, #20]
 801101c:	f023 0304 	bic.w	r3, r3, #4
 8011020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	4a25      	ldr	r2, [pc, #148]	; (80110bc <TIM_OC1_SetConfig+0x15c>)
 8011026:	4293      	cmp	r3, r2
 8011028:	d023      	beq.n	8011072 <TIM_OC1_SetConfig+0x112>
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	4a24      	ldr	r2, [pc, #144]	; (80110c0 <TIM_OC1_SetConfig+0x160>)
 801102e:	4293      	cmp	r3, r2
 8011030:	d01f      	beq.n	8011072 <TIM_OC1_SetConfig+0x112>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	4a23      	ldr	r2, [pc, #140]	; (80110c4 <TIM_OC1_SetConfig+0x164>)
 8011036:	4293      	cmp	r3, r2
 8011038:	d01b      	beq.n	8011072 <TIM_OC1_SetConfig+0x112>
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	4a22      	ldr	r2, [pc, #136]	; (80110c8 <TIM_OC1_SetConfig+0x168>)
 801103e:	4293      	cmp	r3, r2
 8011040:	d017      	beq.n	8011072 <TIM_OC1_SetConfig+0x112>
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	4a21      	ldr	r2, [pc, #132]	; (80110cc <TIM_OC1_SetConfig+0x16c>)
 8011046:	4293      	cmp	r3, r2
 8011048:	d013      	beq.n	8011072 <TIM_OC1_SetConfig+0x112>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	4a20      	ldr	r2, [pc, #128]	; (80110d0 <TIM_OC1_SetConfig+0x170>)
 801104e:	4293      	cmp	r3, r2
 8011050:	d00f      	beq.n	8011072 <TIM_OC1_SetConfig+0x112>
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	4a1f      	ldr	r2, [pc, #124]	; (80110d4 <TIM_OC1_SetConfig+0x174>)
 8011056:	4293      	cmp	r3, r2
 8011058:	d00b      	beq.n	8011072 <TIM_OC1_SetConfig+0x112>
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	4a1e      	ldr	r2, [pc, #120]	; (80110d8 <TIM_OC1_SetConfig+0x178>)
 801105e:	4293      	cmp	r3, r2
 8011060:	d007      	beq.n	8011072 <TIM_OC1_SetConfig+0x112>
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	4a1d      	ldr	r2, [pc, #116]	; (80110dc <TIM_OC1_SetConfig+0x17c>)
 8011066:	4293      	cmp	r3, r2
 8011068:	d003      	beq.n	8011072 <TIM_OC1_SetConfig+0x112>
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	4a1c      	ldr	r2, [pc, #112]	; (80110e0 <TIM_OC1_SetConfig+0x180>)
 801106e:	4293      	cmp	r3, r2
 8011070:	d111      	bne.n	8011096 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	695b      	ldr	r3, [r3, #20]
 8011086:	693a      	ldr	r2, [r7, #16]
 8011088:	4313      	orrs	r3, r2
 801108a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	699b      	ldr	r3, [r3, #24]
 8011090:	693a      	ldr	r2, [r7, #16]
 8011092:	4313      	orrs	r3, r2
 8011094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	693a      	ldr	r2, [r7, #16]
 801109a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	68fa      	ldr	r2, [r7, #12]
 80110a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	685a      	ldr	r2, [r3, #4]
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	697a      	ldr	r2, [r7, #20]
 80110ae:	621a      	str	r2, [r3, #32]
}
 80110b0:	bf00      	nop
 80110b2:	371c      	adds	r7, #28
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr
 80110bc:	40012c00 	.word	0x40012c00
 80110c0:	50012c00 	.word	0x50012c00
 80110c4:	40013400 	.word	0x40013400
 80110c8:	50013400 	.word	0x50013400
 80110cc:	40014000 	.word	0x40014000
 80110d0:	50014000 	.word	0x50014000
 80110d4:	40014400 	.word	0x40014400
 80110d8:	50014400 	.word	0x50014400
 80110dc:	40014800 	.word	0x40014800
 80110e0:	50014800 	.word	0x50014800

080110e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b087      	sub	sp, #28
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	6a1b      	ldr	r3, [r3, #32]
 80110f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6a1b      	ldr	r3, [r3, #32]
 80110f8:	f023 0210 	bic.w	r2, r3, #16
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	699b      	ldr	r3, [r3, #24]
 801110a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801111e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	021b      	lsls	r3, r3, #8
 8011126:	68fa      	ldr	r2, [r7, #12]
 8011128:	4313      	orrs	r3, r2
 801112a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	f023 0320 	bic.w	r3, r3, #32
 8011132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	689b      	ldr	r3, [r3, #8]
 8011138:	011b      	lsls	r3, r3, #4
 801113a:	697a      	ldr	r2, [r7, #20]
 801113c:	4313      	orrs	r3, r2
 801113e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	4a36      	ldr	r2, [pc, #216]	; (801121c <TIM_OC2_SetConfig+0x138>)
 8011144:	4293      	cmp	r3, r2
 8011146:	d00b      	beq.n	8011160 <TIM_OC2_SetConfig+0x7c>
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	4a35      	ldr	r2, [pc, #212]	; (8011220 <TIM_OC2_SetConfig+0x13c>)
 801114c:	4293      	cmp	r3, r2
 801114e:	d007      	beq.n	8011160 <TIM_OC2_SetConfig+0x7c>
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	4a34      	ldr	r2, [pc, #208]	; (8011224 <TIM_OC2_SetConfig+0x140>)
 8011154:	4293      	cmp	r3, r2
 8011156:	d003      	beq.n	8011160 <TIM_OC2_SetConfig+0x7c>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	4a33      	ldr	r2, [pc, #204]	; (8011228 <TIM_OC2_SetConfig+0x144>)
 801115c:	4293      	cmp	r3, r2
 801115e:	d10d      	bne.n	801117c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	68db      	ldr	r3, [r3, #12]
 801116c:	011b      	lsls	r3, r3, #4
 801116e:	697a      	ldr	r2, [r7, #20]
 8011170:	4313      	orrs	r3, r2
 8011172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801117a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	4a27      	ldr	r2, [pc, #156]	; (801121c <TIM_OC2_SetConfig+0x138>)
 8011180:	4293      	cmp	r3, r2
 8011182:	d023      	beq.n	80111cc <TIM_OC2_SetConfig+0xe8>
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	4a26      	ldr	r2, [pc, #152]	; (8011220 <TIM_OC2_SetConfig+0x13c>)
 8011188:	4293      	cmp	r3, r2
 801118a:	d01f      	beq.n	80111cc <TIM_OC2_SetConfig+0xe8>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	4a25      	ldr	r2, [pc, #148]	; (8011224 <TIM_OC2_SetConfig+0x140>)
 8011190:	4293      	cmp	r3, r2
 8011192:	d01b      	beq.n	80111cc <TIM_OC2_SetConfig+0xe8>
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	4a24      	ldr	r2, [pc, #144]	; (8011228 <TIM_OC2_SetConfig+0x144>)
 8011198:	4293      	cmp	r3, r2
 801119a:	d017      	beq.n	80111cc <TIM_OC2_SetConfig+0xe8>
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	4a23      	ldr	r2, [pc, #140]	; (801122c <TIM_OC2_SetConfig+0x148>)
 80111a0:	4293      	cmp	r3, r2
 80111a2:	d013      	beq.n	80111cc <TIM_OC2_SetConfig+0xe8>
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	4a22      	ldr	r2, [pc, #136]	; (8011230 <TIM_OC2_SetConfig+0x14c>)
 80111a8:	4293      	cmp	r3, r2
 80111aa:	d00f      	beq.n	80111cc <TIM_OC2_SetConfig+0xe8>
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	4a21      	ldr	r2, [pc, #132]	; (8011234 <TIM_OC2_SetConfig+0x150>)
 80111b0:	4293      	cmp	r3, r2
 80111b2:	d00b      	beq.n	80111cc <TIM_OC2_SetConfig+0xe8>
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	4a20      	ldr	r2, [pc, #128]	; (8011238 <TIM_OC2_SetConfig+0x154>)
 80111b8:	4293      	cmp	r3, r2
 80111ba:	d007      	beq.n	80111cc <TIM_OC2_SetConfig+0xe8>
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	4a1f      	ldr	r2, [pc, #124]	; (801123c <TIM_OC2_SetConfig+0x158>)
 80111c0:	4293      	cmp	r3, r2
 80111c2:	d003      	beq.n	80111cc <TIM_OC2_SetConfig+0xe8>
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	4a1e      	ldr	r2, [pc, #120]	; (8011240 <TIM_OC2_SetConfig+0x15c>)
 80111c8:	4293      	cmp	r3, r2
 80111ca:	d113      	bne.n	80111f4 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80111d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80111da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	695b      	ldr	r3, [r3, #20]
 80111e0:	009b      	lsls	r3, r3, #2
 80111e2:	693a      	ldr	r2, [r7, #16]
 80111e4:	4313      	orrs	r3, r2
 80111e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	699b      	ldr	r3, [r3, #24]
 80111ec:	009b      	lsls	r3, r3, #2
 80111ee:	693a      	ldr	r2, [r7, #16]
 80111f0:	4313      	orrs	r3, r2
 80111f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	693a      	ldr	r2, [r7, #16]
 80111f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	68fa      	ldr	r2, [r7, #12]
 80111fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	685a      	ldr	r2, [r3, #4]
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	697a      	ldr	r2, [r7, #20]
 801120c:	621a      	str	r2, [r3, #32]
}
 801120e:	bf00      	nop
 8011210:	371c      	adds	r7, #28
 8011212:	46bd      	mov	sp, r7
 8011214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011218:	4770      	bx	lr
 801121a:	bf00      	nop
 801121c:	40012c00 	.word	0x40012c00
 8011220:	50012c00 	.word	0x50012c00
 8011224:	40013400 	.word	0x40013400
 8011228:	50013400 	.word	0x50013400
 801122c:	40014000 	.word	0x40014000
 8011230:	50014000 	.word	0x50014000
 8011234:	40014400 	.word	0x40014400
 8011238:	50014400 	.word	0x50014400
 801123c:	40014800 	.word	0x40014800
 8011240:	50014800 	.word	0x50014800

08011244 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011244:	b480      	push	{r7}
 8011246:	b087      	sub	sp, #28
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6a1b      	ldr	r3, [r3, #32]
 8011252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6a1b      	ldr	r3, [r3, #32]
 8011258:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	685b      	ldr	r3, [r3, #4]
 8011264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	69db      	ldr	r3, [r3, #28]
 801126a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	f023 0303 	bic.w	r3, r3, #3
 801127e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	68fa      	ldr	r2, [r7, #12]
 8011286:	4313      	orrs	r3, r2
 8011288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	689b      	ldr	r3, [r3, #8]
 8011296:	021b      	lsls	r3, r3, #8
 8011298:	697a      	ldr	r2, [r7, #20]
 801129a:	4313      	orrs	r3, r2
 801129c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	4a35      	ldr	r2, [pc, #212]	; (8011378 <TIM_OC3_SetConfig+0x134>)
 80112a2:	4293      	cmp	r3, r2
 80112a4:	d00b      	beq.n	80112be <TIM_OC3_SetConfig+0x7a>
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	4a34      	ldr	r2, [pc, #208]	; (801137c <TIM_OC3_SetConfig+0x138>)
 80112aa:	4293      	cmp	r3, r2
 80112ac:	d007      	beq.n	80112be <TIM_OC3_SetConfig+0x7a>
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	4a33      	ldr	r2, [pc, #204]	; (8011380 <TIM_OC3_SetConfig+0x13c>)
 80112b2:	4293      	cmp	r3, r2
 80112b4:	d003      	beq.n	80112be <TIM_OC3_SetConfig+0x7a>
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	4a32      	ldr	r2, [pc, #200]	; (8011384 <TIM_OC3_SetConfig+0x140>)
 80112ba:	4293      	cmp	r3, r2
 80112bc:	d10d      	bne.n	80112da <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80112c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	68db      	ldr	r3, [r3, #12]
 80112ca:	021b      	lsls	r3, r3, #8
 80112cc:	697a      	ldr	r2, [r7, #20]
 80112ce:	4313      	orrs	r3, r2
 80112d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80112d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	4a26      	ldr	r2, [pc, #152]	; (8011378 <TIM_OC3_SetConfig+0x134>)
 80112de:	4293      	cmp	r3, r2
 80112e0:	d023      	beq.n	801132a <TIM_OC3_SetConfig+0xe6>
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	4a25      	ldr	r2, [pc, #148]	; (801137c <TIM_OC3_SetConfig+0x138>)
 80112e6:	4293      	cmp	r3, r2
 80112e8:	d01f      	beq.n	801132a <TIM_OC3_SetConfig+0xe6>
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	4a24      	ldr	r2, [pc, #144]	; (8011380 <TIM_OC3_SetConfig+0x13c>)
 80112ee:	4293      	cmp	r3, r2
 80112f0:	d01b      	beq.n	801132a <TIM_OC3_SetConfig+0xe6>
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	4a23      	ldr	r2, [pc, #140]	; (8011384 <TIM_OC3_SetConfig+0x140>)
 80112f6:	4293      	cmp	r3, r2
 80112f8:	d017      	beq.n	801132a <TIM_OC3_SetConfig+0xe6>
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	4a22      	ldr	r2, [pc, #136]	; (8011388 <TIM_OC3_SetConfig+0x144>)
 80112fe:	4293      	cmp	r3, r2
 8011300:	d013      	beq.n	801132a <TIM_OC3_SetConfig+0xe6>
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	4a21      	ldr	r2, [pc, #132]	; (801138c <TIM_OC3_SetConfig+0x148>)
 8011306:	4293      	cmp	r3, r2
 8011308:	d00f      	beq.n	801132a <TIM_OC3_SetConfig+0xe6>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	4a20      	ldr	r2, [pc, #128]	; (8011390 <TIM_OC3_SetConfig+0x14c>)
 801130e:	4293      	cmp	r3, r2
 8011310:	d00b      	beq.n	801132a <TIM_OC3_SetConfig+0xe6>
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	4a1f      	ldr	r2, [pc, #124]	; (8011394 <TIM_OC3_SetConfig+0x150>)
 8011316:	4293      	cmp	r3, r2
 8011318:	d007      	beq.n	801132a <TIM_OC3_SetConfig+0xe6>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	4a1e      	ldr	r2, [pc, #120]	; (8011398 <TIM_OC3_SetConfig+0x154>)
 801131e:	4293      	cmp	r3, r2
 8011320:	d003      	beq.n	801132a <TIM_OC3_SetConfig+0xe6>
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	4a1d      	ldr	r2, [pc, #116]	; (801139c <TIM_OC3_SetConfig+0x158>)
 8011326:	4293      	cmp	r3, r2
 8011328:	d113      	bne.n	8011352 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801132a:	693b      	ldr	r3, [r7, #16]
 801132c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011332:	693b      	ldr	r3, [r7, #16]
 8011334:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	695b      	ldr	r3, [r3, #20]
 801133e:	011b      	lsls	r3, r3, #4
 8011340:	693a      	ldr	r2, [r7, #16]
 8011342:	4313      	orrs	r3, r2
 8011344:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	699b      	ldr	r3, [r3, #24]
 801134a:	011b      	lsls	r3, r3, #4
 801134c:	693a      	ldr	r2, [r7, #16]
 801134e:	4313      	orrs	r3, r2
 8011350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	693a      	ldr	r2, [r7, #16]
 8011356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	68fa      	ldr	r2, [r7, #12]
 801135c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	685a      	ldr	r2, [r3, #4]
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	697a      	ldr	r2, [r7, #20]
 801136a:	621a      	str	r2, [r3, #32]
}
 801136c:	bf00      	nop
 801136e:	371c      	adds	r7, #28
 8011370:	46bd      	mov	sp, r7
 8011372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011376:	4770      	bx	lr
 8011378:	40012c00 	.word	0x40012c00
 801137c:	50012c00 	.word	0x50012c00
 8011380:	40013400 	.word	0x40013400
 8011384:	50013400 	.word	0x50013400
 8011388:	40014000 	.word	0x40014000
 801138c:	50014000 	.word	0x50014000
 8011390:	40014400 	.word	0x40014400
 8011394:	50014400 	.word	0x50014400
 8011398:	40014800 	.word	0x40014800
 801139c:	50014800 	.word	0x50014800

080113a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80113a0:	b480      	push	{r7}
 80113a2:	b087      	sub	sp, #28
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
 80113a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6a1b      	ldr	r3, [r3, #32]
 80113ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6a1b      	ldr	r3, [r3, #32]
 80113b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	685b      	ldr	r3, [r3, #4]
 80113c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	69db      	ldr	r3, [r3, #28]
 80113c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80113ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80113d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80113da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	021b      	lsls	r3, r3, #8
 80113e2:	68fa      	ldr	r2, [r7, #12]
 80113e4:	4313      	orrs	r3, r2
 80113e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80113ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	689b      	ldr	r3, [r3, #8]
 80113f4:	031b      	lsls	r3, r3, #12
 80113f6:	697a      	ldr	r2, [r7, #20]
 80113f8:	4313      	orrs	r3, r2
 80113fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	4a36      	ldr	r2, [pc, #216]	; (80114d8 <TIM_OC4_SetConfig+0x138>)
 8011400:	4293      	cmp	r3, r2
 8011402:	d00b      	beq.n	801141c <TIM_OC4_SetConfig+0x7c>
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	4a35      	ldr	r2, [pc, #212]	; (80114dc <TIM_OC4_SetConfig+0x13c>)
 8011408:	4293      	cmp	r3, r2
 801140a:	d007      	beq.n	801141c <TIM_OC4_SetConfig+0x7c>
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	4a34      	ldr	r2, [pc, #208]	; (80114e0 <TIM_OC4_SetConfig+0x140>)
 8011410:	4293      	cmp	r3, r2
 8011412:	d003      	beq.n	801141c <TIM_OC4_SetConfig+0x7c>
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	4a33      	ldr	r2, [pc, #204]	; (80114e4 <TIM_OC4_SetConfig+0x144>)
 8011418:	4293      	cmp	r3, r2
 801141a:	d10d      	bne.n	8011438 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	68db      	ldr	r3, [r3, #12]
 8011428:	031b      	lsls	r3, r3, #12
 801142a:	697a      	ldr	r2, [r7, #20]
 801142c:	4313      	orrs	r3, r2
 801142e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011436:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	4a27      	ldr	r2, [pc, #156]	; (80114d8 <TIM_OC4_SetConfig+0x138>)
 801143c:	4293      	cmp	r3, r2
 801143e:	d023      	beq.n	8011488 <TIM_OC4_SetConfig+0xe8>
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	4a26      	ldr	r2, [pc, #152]	; (80114dc <TIM_OC4_SetConfig+0x13c>)
 8011444:	4293      	cmp	r3, r2
 8011446:	d01f      	beq.n	8011488 <TIM_OC4_SetConfig+0xe8>
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	4a25      	ldr	r2, [pc, #148]	; (80114e0 <TIM_OC4_SetConfig+0x140>)
 801144c:	4293      	cmp	r3, r2
 801144e:	d01b      	beq.n	8011488 <TIM_OC4_SetConfig+0xe8>
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	4a24      	ldr	r2, [pc, #144]	; (80114e4 <TIM_OC4_SetConfig+0x144>)
 8011454:	4293      	cmp	r3, r2
 8011456:	d017      	beq.n	8011488 <TIM_OC4_SetConfig+0xe8>
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	4a23      	ldr	r2, [pc, #140]	; (80114e8 <TIM_OC4_SetConfig+0x148>)
 801145c:	4293      	cmp	r3, r2
 801145e:	d013      	beq.n	8011488 <TIM_OC4_SetConfig+0xe8>
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	4a22      	ldr	r2, [pc, #136]	; (80114ec <TIM_OC4_SetConfig+0x14c>)
 8011464:	4293      	cmp	r3, r2
 8011466:	d00f      	beq.n	8011488 <TIM_OC4_SetConfig+0xe8>
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	4a21      	ldr	r2, [pc, #132]	; (80114f0 <TIM_OC4_SetConfig+0x150>)
 801146c:	4293      	cmp	r3, r2
 801146e:	d00b      	beq.n	8011488 <TIM_OC4_SetConfig+0xe8>
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	4a20      	ldr	r2, [pc, #128]	; (80114f4 <TIM_OC4_SetConfig+0x154>)
 8011474:	4293      	cmp	r3, r2
 8011476:	d007      	beq.n	8011488 <TIM_OC4_SetConfig+0xe8>
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	4a1f      	ldr	r2, [pc, #124]	; (80114f8 <TIM_OC4_SetConfig+0x158>)
 801147c:	4293      	cmp	r3, r2
 801147e:	d003      	beq.n	8011488 <TIM_OC4_SetConfig+0xe8>
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	4a1e      	ldr	r2, [pc, #120]	; (80114fc <TIM_OC4_SetConfig+0x15c>)
 8011484:	4293      	cmp	r3, r2
 8011486:	d113      	bne.n	80114b0 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801148e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011496:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	695b      	ldr	r3, [r3, #20]
 801149c:	019b      	lsls	r3, r3, #6
 801149e:	693a      	ldr	r2, [r7, #16]
 80114a0:	4313      	orrs	r3, r2
 80114a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	699b      	ldr	r3, [r3, #24]
 80114a8:	019b      	lsls	r3, r3, #6
 80114aa:	693a      	ldr	r2, [r7, #16]
 80114ac:	4313      	orrs	r3, r2
 80114ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	693a      	ldr	r2, [r7, #16]
 80114b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	68fa      	ldr	r2, [r7, #12]
 80114ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	685a      	ldr	r2, [r3, #4]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	697a      	ldr	r2, [r7, #20]
 80114c8:	621a      	str	r2, [r3, #32]
}
 80114ca:	bf00      	nop
 80114cc:	371c      	adds	r7, #28
 80114ce:	46bd      	mov	sp, r7
 80114d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d4:	4770      	bx	lr
 80114d6:	bf00      	nop
 80114d8:	40012c00 	.word	0x40012c00
 80114dc:	50012c00 	.word	0x50012c00
 80114e0:	40013400 	.word	0x40013400
 80114e4:	50013400 	.word	0x50013400
 80114e8:	40014000 	.word	0x40014000
 80114ec:	50014000 	.word	0x50014000
 80114f0:	40014400 	.word	0x40014400
 80114f4:	50014400 	.word	0x50014400
 80114f8:	40014800 	.word	0x40014800
 80114fc:	50014800 	.word	0x50014800

08011500 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011500:	b480      	push	{r7}
 8011502:	b087      	sub	sp, #28
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
 8011508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6a1b      	ldr	r3, [r3, #32]
 801150e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6a1b      	ldr	r3, [r3, #32]
 8011514:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801152e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	68fa      	ldr	r2, [r7, #12]
 801153a:	4313      	orrs	r3, r2
 801153c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011544:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	689b      	ldr	r3, [r3, #8]
 801154a:	041b      	lsls	r3, r3, #16
 801154c:	693a      	ldr	r2, [r7, #16]
 801154e:	4313      	orrs	r3, r2
 8011550:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	4a21      	ldr	r2, [pc, #132]	; (80115dc <TIM_OC5_SetConfig+0xdc>)
 8011556:	4293      	cmp	r3, r2
 8011558:	d023      	beq.n	80115a2 <TIM_OC5_SetConfig+0xa2>
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	4a20      	ldr	r2, [pc, #128]	; (80115e0 <TIM_OC5_SetConfig+0xe0>)
 801155e:	4293      	cmp	r3, r2
 8011560:	d01f      	beq.n	80115a2 <TIM_OC5_SetConfig+0xa2>
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	4a1f      	ldr	r2, [pc, #124]	; (80115e4 <TIM_OC5_SetConfig+0xe4>)
 8011566:	4293      	cmp	r3, r2
 8011568:	d01b      	beq.n	80115a2 <TIM_OC5_SetConfig+0xa2>
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	4a1e      	ldr	r2, [pc, #120]	; (80115e8 <TIM_OC5_SetConfig+0xe8>)
 801156e:	4293      	cmp	r3, r2
 8011570:	d017      	beq.n	80115a2 <TIM_OC5_SetConfig+0xa2>
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	4a1d      	ldr	r2, [pc, #116]	; (80115ec <TIM_OC5_SetConfig+0xec>)
 8011576:	4293      	cmp	r3, r2
 8011578:	d013      	beq.n	80115a2 <TIM_OC5_SetConfig+0xa2>
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	4a1c      	ldr	r2, [pc, #112]	; (80115f0 <TIM_OC5_SetConfig+0xf0>)
 801157e:	4293      	cmp	r3, r2
 8011580:	d00f      	beq.n	80115a2 <TIM_OC5_SetConfig+0xa2>
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	4a1b      	ldr	r2, [pc, #108]	; (80115f4 <TIM_OC5_SetConfig+0xf4>)
 8011586:	4293      	cmp	r3, r2
 8011588:	d00b      	beq.n	80115a2 <TIM_OC5_SetConfig+0xa2>
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	4a1a      	ldr	r2, [pc, #104]	; (80115f8 <TIM_OC5_SetConfig+0xf8>)
 801158e:	4293      	cmp	r3, r2
 8011590:	d007      	beq.n	80115a2 <TIM_OC5_SetConfig+0xa2>
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	4a19      	ldr	r2, [pc, #100]	; (80115fc <TIM_OC5_SetConfig+0xfc>)
 8011596:	4293      	cmp	r3, r2
 8011598:	d003      	beq.n	80115a2 <TIM_OC5_SetConfig+0xa2>
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	4a18      	ldr	r2, [pc, #96]	; (8011600 <TIM_OC5_SetConfig+0x100>)
 801159e:	4293      	cmp	r3, r2
 80115a0:	d109      	bne.n	80115b6 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80115a2:	697b      	ldr	r3, [r7, #20]
 80115a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80115a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	695b      	ldr	r3, [r3, #20]
 80115ae:	021b      	lsls	r3, r3, #8
 80115b0:	697a      	ldr	r2, [r7, #20]
 80115b2:	4313      	orrs	r3, r2
 80115b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	697a      	ldr	r2, [r7, #20]
 80115ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	68fa      	ldr	r2, [r7, #12]
 80115c0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	685a      	ldr	r2, [r3, #4]
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	693a      	ldr	r2, [r7, #16]
 80115ce:	621a      	str	r2, [r3, #32]
}
 80115d0:	bf00      	nop
 80115d2:	371c      	adds	r7, #28
 80115d4:	46bd      	mov	sp, r7
 80115d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115da:	4770      	bx	lr
 80115dc:	40012c00 	.word	0x40012c00
 80115e0:	50012c00 	.word	0x50012c00
 80115e4:	40013400 	.word	0x40013400
 80115e8:	50013400 	.word	0x50013400
 80115ec:	40014000 	.word	0x40014000
 80115f0:	50014000 	.word	0x50014000
 80115f4:	40014400 	.word	0x40014400
 80115f8:	50014400 	.word	0x50014400
 80115fc:	40014800 	.word	0x40014800
 8011600:	50014800 	.word	0x50014800

08011604 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011604:	b480      	push	{r7}
 8011606:	b087      	sub	sp, #28
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
 801160c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6a1b      	ldr	r3, [r3, #32]
 8011612:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6a1b      	ldr	r3, [r3, #32]
 8011618:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	685b      	ldr	r3, [r3, #4]
 8011624:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801162a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	021b      	lsls	r3, r3, #8
 801163e:	68fa      	ldr	r2, [r7, #12]
 8011640:	4313      	orrs	r3, r2
 8011642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801164a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	689b      	ldr	r3, [r3, #8]
 8011650:	051b      	lsls	r3, r3, #20
 8011652:	693a      	ldr	r2, [r7, #16]
 8011654:	4313      	orrs	r3, r2
 8011656:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	4a22      	ldr	r2, [pc, #136]	; (80116e4 <TIM_OC6_SetConfig+0xe0>)
 801165c:	4293      	cmp	r3, r2
 801165e:	d023      	beq.n	80116a8 <TIM_OC6_SetConfig+0xa4>
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	4a21      	ldr	r2, [pc, #132]	; (80116e8 <TIM_OC6_SetConfig+0xe4>)
 8011664:	4293      	cmp	r3, r2
 8011666:	d01f      	beq.n	80116a8 <TIM_OC6_SetConfig+0xa4>
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	4a20      	ldr	r2, [pc, #128]	; (80116ec <TIM_OC6_SetConfig+0xe8>)
 801166c:	4293      	cmp	r3, r2
 801166e:	d01b      	beq.n	80116a8 <TIM_OC6_SetConfig+0xa4>
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	4a1f      	ldr	r2, [pc, #124]	; (80116f0 <TIM_OC6_SetConfig+0xec>)
 8011674:	4293      	cmp	r3, r2
 8011676:	d017      	beq.n	80116a8 <TIM_OC6_SetConfig+0xa4>
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	4a1e      	ldr	r2, [pc, #120]	; (80116f4 <TIM_OC6_SetConfig+0xf0>)
 801167c:	4293      	cmp	r3, r2
 801167e:	d013      	beq.n	80116a8 <TIM_OC6_SetConfig+0xa4>
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	4a1d      	ldr	r2, [pc, #116]	; (80116f8 <TIM_OC6_SetConfig+0xf4>)
 8011684:	4293      	cmp	r3, r2
 8011686:	d00f      	beq.n	80116a8 <TIM_OC6_SetConfig+0xa4>
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	4a1c      	ldr	r2, [pc, #112]	; (80116fc <TIM_OC6_SetConfig+0xf8>)
 801168c:	4293      	cmp	r3, r2
 801168e:	d00b      	beq.n	80116a8 <TIM_OC6_SetConfig+0xa4>
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	4a1b      	ldr	r2, [pc, #108]	; (8011700 <TIM_OC6_SetConfig+0xfc>)
 8011694:	4293      	cmp	r3, r2
 8011696:	d007      	beq.n	80116a8 <TIM_OC6_SetConfig+0xa4>
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	4a1a      	ldr	r2, [pc, #104]	; (8011704 <TIM_OC6_SetConfig+0x100>)
 801169c:	4293      	cmp	r3, r2
 801169e:	d003      	beq.n	80116a8 <TIM_OC6_SetConfig+0xa4>
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	4a19      	ldr	r2, [pc, #100]	; (8011708 <TIM_OC6_SetConfig+0x104>)
 80116a4:	4293      	cmp	r3, r2
 80116a6:	d109      	bne.n	80116bc <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80116ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	695b      	ldr	r3, [r3, #20]
 80116b4:	029b      	lsls	r3, r3, #10
 80116b6:	697a      	ldr	r2, [r7, #20]
 80116b8:	4313      	orrs	r3, r2
 80116ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	697a      	ldr	r2, [r7, #20]
 80116c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	68fa      	ldr	r2, [r7, #12]
 80116c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	685a      	ldr	r2, [r3, #4]
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	693a      	ldr	r2, [r7, #16]
 80116d4:	621a      	str	r2, [r3, #32]
}
 80116d6:	bf00      	nop
 80116d8:	371c      	adds	r7, #28
 80116da:	46bd      	mov	sp, r7
 80116dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e0:	4770      	bx	lr
 80116e2:	bf00      	nop
 80116e4:	40012c00 	.word	0x40012c00
 80116e8:	50012c00 	.word	0x50012c00
 80116ec:	40013400 	.word	0x40013400
 80116f0:	50013400 	.word	0x50013400
 80116f4:	40014000 	.word	0x40014000
 80116f8:	50014000 	.word	0x50014000
 80116fc:	40014400 	.word	0x40014400
 8011700:	50014400 	.word	0x50014400
 8011704:	40014800 	.word	0x40014800
 8011708:	50014800 	.word	0x50014800

0801170c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801170c:	b480      	push	{r7}
 801170e:	b087      	sub	sp, #28
 8011710:	af00      	add	r7, sp, #0
 8011712:	60f8      	str	r0, [r7, #12]
 8011714:	60b9      	str	r1, [r7, #8]
 8011716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	6a1b      	ldr	r3, [r3, #32]
 801171c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	6a1b      	ldr	r3, [r3, #32]
 8011722:	f023 0201 	bic.w	r2, r3, #1
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	699b      	ldr	r3, [r3, #24]
 801172e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011730:	693b      	ldr	r3, [r7, #16]
 8011732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	011b      	lsls	r3, r3, #4
 801173c:	693a      	ldr	r2, [r7, #16]
 801173e:	4313      	orrs	r3, r2
 8011740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	f023 030a 	bic.w	r3, r3, #10
 8011748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801174a:	697a      	ldr	r2, [r7, #20]
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	4313      	orrs	r3, r2
 8011750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	693a      	ldr	r2, [r7, #16]
 8011756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	697a      	ldr	r2, [r7, #20]
 801175c:	621a      	str	r2, [r3, #32]
}
 801175e:	bf00      	nop
 8011760:	371c      	adds	r7, #28
 8011762:	46bd      	mov	sp, r7
 8011764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011768:	4770      	bx	lr

0801176a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801176a:	b480      	push	{r7}
 801176c:	b087      	sub	sp, #28
 801176e:	af00      	add	r7, sp, #0
 8011770:	60f8      	str	r0, [r7, #12]
 8011772:	60b9      	str	r1, [r7, #8]
 8011774:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	6a1b      	ldr	r3, [r3, #32]
 801177a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	6a1b      	ldr	r3, [r3, #32]
 8011780:	f023 0210 	bic.w	r2, r3, #16
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	699b      	ldr	r3, [r3, #24]
 801178c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011794:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	031b      	lsls	r3, r3, #12
 801179a:	693a      	ldr	r2, [r7, #16]
 801179c:	4313      	orrs	r3, r2
 801179e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80117a0:	697b      	ldr	r3, [r7, #20]
 80117a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80117a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	011b      	lsls	r3, r3, #4
 80117ac:	697a      	ldr	r2, [r7, #20]
 80117ae:	4313      	orrs	r3, r2
 80117b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	693a      	ldr	r2, [r7, #16]
 80117b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	697a      	ldr	r2, [r7, #20]
 80117bc:	621a      	str	r2, [r3, #32]
}
 80117be:	bf00      	nop
 80117c0:	371c      	adds	r7, #28
 80117c2:	46bd      	mov	sp, r7
 80117c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c8:	4770      	bx	lr

080117ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80117ca:	b480      	push	{r7}
 80117cc:	b085      	sub	sp, #20
 80117ce:	af00      	add	r7, sp, #0
 80117d0:	6078      	str	r0, [r7, #4]
 80117d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	689b      	ldr	r3, [r3, #8]
 80117d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80117e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80117e6:	683a      	ldr	r2, [r7, #0]
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	4313      	orrs	r3, r2
 80117ec:	f043 0307 	orr.w	r3, r3, #7
 80117f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	68fa      	ldr	r2, [r7, #12]
 80117f6:	609a      	str	r2, [r3, #8]
}
 80117f8:	bf00      	nop
 80117fa:	3714      	adds	r7, #20
 80117fc:	46bd      	mov	sp, r7
 80117fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011802:	4770      	bx	lr

08011804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011804:	b480      	push	{r7}
 8011806:	b087      	sub	sp, #28
 8011808:	af00      	add	r7, sp, #0
 801180a:	60f8      	str	r0, [r7, #12]
 801180c:	60b9      	str	r1, [r7, #8]
 801180e:	607a      	str	r2, [r7, #4]
 8011810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	689b      	ldr	r3, [r3, #8]
 8011816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011818:	697b      	ldr	r3, [r7, #20]
 801181a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801181e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	021a      	lsls	r2, r3, #8
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	431a      	orrs	r2, r3
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	4313      	orrs	r3, r2
 801182c:	697a      	ldr	r2, [r7, #20]
 801182e:	4313      	orrs	r3, r2
 8011830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	697a      	ldr	r2, [r7, #20]
 8011836:	609a      	str	r2, [r3, #8]
}
 8011838:	bf00      	nop
 801183a:	371c      	adds	r7, #28
 801183c:	46bd      	mov	sp, r7
 801183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011842:	4770      	bx	lr

08011844 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011844:	b480      	push	{r7}
 8011846:	b087      	sub	sp, #28
 8011848:	af00      	add	r7, sp, #0
 801184a:	60f8      	str	r0, [r7, #12]
 801184c:	60b9      	str	r1, [r7, #8]
 801184e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011850:	68bb      	ldr	r3, [r7, #8]
 8011852:	f003 031f 	and.w	r3, r3, #31
 8011856:	2201      	movs	r2, #1
 8011858:	fa02 f303 	lsl.w	r3, r2, r3
 801185c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	6a1a      	ldr	r2, [r3, #32]
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	43db      	mvns	r3, r3
 8011866:	401a      	ands	r2, r3
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	6a1a      	ldr	r2, [r3, #32]
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	f003 031f 	and.w	r3, r3, #31
 8011876:	6879      	ldr	r1, [r7, #4]
 8011878:	fa01 f303 	lsl.w	r3, r1, r3
 801187c:	431a      	orrs	r2, r3
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	621a      	str	r2, [r3, #32]
}
 8011882:	bf00      	nop
 8011884:	371c      	adds	r7, #28
 8011886:	46bd      	mov	sp, r7
 8011888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188c:	4770      	bx	lr
	...

08011890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011890:	b480      	push	{r7}
 8011892:	b085      	sub	sp, #20
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80118a0:	2b01      	cmp	r3, #1
 80118a2:	d101      	bne.n	80118a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80118a4:	2302      	movs	r3, #2
 80118a6:	e097      	b.n	80119d8 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2201      	movs	r2, #1
 80118ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2202      	movs	r2, #2
 80118b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	685b      	ldr	r3, [r3, #4]
 80118be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	689b      	ldr	r3, [r3, #8]
 80118c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	4a45      	ldr	r2, [pc, #276]	; (80119e4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80118ce:	4293      	cmp	r3, r2
 80118d0:	d00e      	beq.n	80118f0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	4a44      	ldr	r2, [pc, #272]	; (80119e8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80118d8:	4293      	cmp	r3, r2
 80118da:	d009      	beq.n	80118f0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	4a42      	ldr	r2, [pc, #264]	; (80119ec <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80118e2:	4293      	cmp	r3, r2
 80118e4:	d004      	beq.n	80118f0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	4a41      	ldr	r2, [pc, #260]	; (80119f0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80118ec:	4293      	cmp	r3, r2
 80118ee:	d108      	bne.n	8011902 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80118f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	685b      	ldr	r3, [r3, #4]
 80118fc:	68fa      	ldr	r2, [r7, #12]
 80118fe:	4313      	orrs	r3, r2
 8011900:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8011908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801190c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	68fa      	ldr	r2, [r7, #12]
 8011914:	4313      	orrs	r3, r2
 8011916:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	68fa      	ldr	r2, [r7, #12]
 801191e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	4a2f      	ldr	r2, [pc, #188]	; (80119e4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8011926:	4293      	cmp	r3, r2
 8011928:	d040      	beq.n	80119ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	4a2e      	ldr	r2, [pc, #184]	; (80119e8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8011930:	4293      	cmp	r3, r2
 8011932:	d03b      	beq.n	80119ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801193c:	d036      	beq.n	80119ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011946:	d031      	beq.n	80119ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	4a29      	ldr	r2, [pc, #164]	; (80119f4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 801194e:	4293      	cmp	r3, r2
 8011950:	d02c      	beq.n	80119ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	4a28      	ldr	r2, [pc, #160]	; (80119f8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8011958:	4293      	cmp	r3, r2
 801195a:	d027      	beq.n	80119ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	4a26      	ldr	r2, [pc, #152]	; (80119fc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8011962:	4293      	cmp	r3, r2
 8011964:	d022      	beq.n	80119ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	4a25      	ldr	r2, [pc, #148]	; (8011a00 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 801196c:	4293      	cmp	r3, r2
 801196e:	d01d      	beq.n	80119ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	4a23      	ldr	r2, [pc, #140]	; (8011a04 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8011976:	4293      	cmp	r3, r2
 8011978:	d018      	beq.n	80119ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	4a22      	ldr	r2, [pc, #136]	; (8011a08 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8011980:	4293      	cmp	r3, r2
 8011982:	d013      	beq.n	80119ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	4a18      	ldr	r2, [pc, #96]	; (80119ec <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 801198a:	4293      	cmp	r3, r2
 801198c:	d00e      	beq.n	80119ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	4a17      	ldr	r2, [pc, #92]	; (80119f0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8011994:	4293      	cmp	r3, r2
 8011996:	d009      	beq.n	80119ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	4a1b      	ldr	r2, [pc, #108]	; (8011a0c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 801199e:	4293      	cmp	r3, r2
 80119a0:	d004      	beq.n	80119ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	4a1a      	ldr	r2, [pc, #104]	; (8011a10 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80119a8:	4293      	cmp	r3, r2
 80119aa:	d10c      	bne.n	80119c6 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80119b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	689b      	ldr	r3, [r3, #8]
 80119b8:	68ba      	ldr	r2, [r7, #8]
 80119ba:	4313      	orrs	r3, r2
 80119bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	68ba      	ldr	r2, [r7, #8]
 80119c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2201      	movs	r2, #1
 80119ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2200      	movs	r2, #0
 80119d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80119d6:	2300      	movs	r3, #0
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3714      	adds	r7, #20
 80119dc:	46bd      	mov	sp, r7
 80119de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e2:	4770      	bx	lr
 80119e4:	40012c00 	.word	0x40012c00
 80119e8:	50012c00 	.word	0x50012c00
 80119ec:	40013400 	.word	0x40013400
 80119f0:	50013400 	.word	0x50013400
 80119f4:	40000400 	.word	0x40000400
 80119f8:	50000400 	.word	0x50000400
 80119fc:	40000800 	.word	0x40000800
 8011a00:	50000800 	.word	0x50000800
 8011a04:	40000c00 	.word	0x40000c00
 8011a08:	50000c00 	.word	0x50000c00
 8011a0c:	40014000 	.word	0x40014000
 8011a10:	50014000 	.word	0x50014000

08011a14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011a14:	b480      	push	{r7}
 8011a16:	b085      	sub	sp, #20
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011a28:	2b01      	cmp	r3, #1
 8011a2a:	d101      	bne.n	8011a30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011a2c:	2302      	movs	r3, #2
 8011a2e:	e0a5      	b.n	8011b7c <HAL_TIMEx_ConfigBreakDeadTime+0x168>
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2201      	movs	r2, #1
 8011a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	68db      	ldr	r3, [r3, #12]
 8011a42:	4313      	orrs	r3, r2
 8011a44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	689b      	ldr	r3, [r3, #8]
 8011a50:	4313      	orrs	r3, r2
 8011a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	685b      	ldr	r3, [r3, #4]
 8011a5e:	4313      	orrs	r3, r2
 8011a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	4313      	orrs	r3, r2
 8011a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011a76:	683b      	ldr	r3, [r7, #0]
 8011a78:	691b      	ldr	r3, [r3, #16]
 8011a7a:	4313      	orrs	r3, r2
 8011a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	695b      	ldr	r3, [r3, #20]
 8011a88:	4313      	orrs	r3, r2
 8011a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011a92:	683b      	ldr	r3, [r7, #0]
 8011a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a96:	4313      	orrs	r3, r2
 8011a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	699b      	ldr	r3, [r3, #24]
 8011aa4:	041b      	lsls	r3, r3, #16
 8011aa6:	4313      	orrs	r3, r2
 8011aa8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	4a36      	ldr	r2, [pc, #216]	; (8011b88 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 8011ab0:	4293      	cmp	r3, r2
 8011ab2:	d00e      	beq.n	8011ad2 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	4a34      	ldr	r2, [pc, #208]	; (8011b8c <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8011aba:	4293      	cmp	r3, r2
 8011abc:	d009      	beq.n	8011ad2 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	4a33      	ldr	r2, [pc, #204]	; (8011b90 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 8011ac4:	4293      	cmp	r3, r2
 8011ac6:	d004      	beq.n	8011ad2 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	4a31      	ldr	r2, [pc, #196]	; (8011b94 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	d106      	bne.n	8011ae0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	69db      	ldr	r3, [r3, #28]
 8011adc:	4313      	orrs	r3, r2
 8011ade:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	4a28      	ldr	r2, [pc, #160]	; (8011b88 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 8011ae6:	4293      	cmp	r3, r2
 8011ae8:	d00e      	beq.n	8011b08 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	4a27      	ldr	r2, [pc, #156]	; (8011b8c <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8011af0:	4293      	cmp	r3, r2
 8011af2:	d009      	beq.n	8011b08 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	4a25      	ldr	r2, [pc, #148]	; (8011b90 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 8011afa:	4293      	cmp	r3, r2
 8011afc:	d004      	beq.n	8011b08 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	4a24      	ldr	r2, [pc, #144]	; (8011b94 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8011b04:	4293      	cmp	r3, r2
 8011b06:	d130      	bne.n	8011b6a <HAL_TIMEx_ConfigBreakDeadTime+0x156>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b12:	051b      	lsls	r3, r3, #20
 8011b14:	4313      	orrs	r3, r2
 8011b16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	6a1b      	ldr	r3, [r3, #32]
 8011b22:	4313      	orrs	r3, r2
 8011b24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b30:	4313      	orrs	r3, r2
 8011b32:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	4a13      	ldr	r2, [pc, #76]	; (8011b88 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 8011b3a:	4293      	cmp	r3, r2
 8011b3c:	d00e      	beq.n	8011b5c <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	4a12      	ldr	r2, [pc, #72]	; (8011b8c <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8011b44:	4293      	cmp	r3, r2
 8011b46:	d009      	beq.n	8011b5c <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	4a10      	ldr	r2, [pc, #64]	; (8011b90 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	d004      	beq.n	8011b5c <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	4a0f      	ldr	r2, [pc, #60]	; (8011b94 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8011b58:	4293      	cmp	r3, r2
 8011b5a:	d106      	bne.n	8011b6a <HAL_TIMEx_ConfigBreakDeadTime+0x156>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b66:	4313      	orrs	r3, r2
 8011b68:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	68fa      	ldr	r2, [r7, #12]
 8011b70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2200      	movs	r2, #0
 8011b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011b7a:	2300      	movs	r3, #0
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	3714      	adds	r7, #20
 8011b80:	46bd      	mov	sp, r7
 8011b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b86:	4770      	bx	lr
 8011b88:	40012c00 	.word	0x40012c00
 8011b8c:	50012c00 	.word	0x50012c00
 8011b90:	40013400 	.word	0x40013400
 8011b94:	50013400 	.word	0x50013400

08011b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b083      	sub	sp, #12
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011ba0:	bf00      	nop
 8011ba2:	370c      	adds	r7, #12
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011baa:	4770      	bx	lr

08011bac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011bac:	b480      	push	{r7}
 8011bae:	b083      	sub	sp, #12
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011bb4:	bf00      	nop
 8011bb6:	370c      	adds	r7, #12
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbe:	4770      	bx	lr

08011bc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011bc0:	b480      	push	{r7}
 8011bc2:	b083      	sub	sp, #12
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011bc8:	bf00      	nop
 8011bca:	370c      	adds	r7, #12
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr

08011bd4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	b083      	sub	sp, #12
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8011bdc:	bf00      	nop
 8011bde:	370c      	adds	r7, #12
 8011be0:	46bd      	mov	sp, r7
 8011be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be6:	4770      	bx	lr

08011be8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8011be8:	b480      	push	{r7}
 8011bea:	b083      	sub	sp, #12
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8011bf0:	bf00      	nop
 8011bf2:	370c      	adds	r7, #12
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfa:	4770      	bx	lr

08011bfc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8011bfc:	b480      	push	{r7}
 8011bfe:	b083      	sub	sp, #12
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8011c04:	bf00      	nop
 8011c06:	370c      	adds	r7, #12
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0e:	4770      	bx	lr

08011c10 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8011c10:	b480      	push	{r7}
 8011c12:	b083      	sub	sp, #12
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8011c18:	bf00      	nop
 8011c1a:	370c      	adds	r7, #12
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c22:	4770      	bx	lr

08011c24 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8011c24:	b480      	push	{r7}
 8011c26:	b083      	sub	sp, #12
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	f043 0201 	orr.w	r2, r3, #1
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	601a      	str	r2, [r3, #0]
}
 8011c38:	bf00      	nop
 8011c3a:	370c      	adds	r7, #12
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c42:	4770      	bx	lr

08011c44 <LL_DLYB_Disable>:
  * @param  DLYBx DLYB Instance.
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Disable(DLYB_TypeDef *DLYBx)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b083      	sub	sp, #12
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(DLYBx->CR, DLYB_CR_DEN);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	f023 0201 	bic.w	r2, r3, #1
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	601a      	str	r2, [r3, #0]
}
 8011c58:	bf00      	nop
 8011c5a:	370c      	adds	r7, #12
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c62:	4770      	bx	lr

08011c64 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b086      	sub	sp, #24
 8011c68:	af02      	add	r7, sp, #8
 8011c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8011c70:	f7f5 fb84 	bl	800737c <HAL_GetTick>
 8011c74:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d102      	bne.n	8011c82 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	73fb      	strb	r3, [r7, #15]
 8011c80:	e137      	b.n	8011ef2 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	4a76      	ldr	r2, [pc, #472]	; (8011e60 <HAL_XSPI_Init+0x1fc>)
 8011c88:	4293      	cmp	r3, r2
 8011c8a:	d008      	beq.n	8011c9e <HAL_XSPI_Init+0x3a>
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	4a74      	ldr	r2, [pc, #464]	; (8011e64 <HAL_XSPI_Init+0x200>)
 8011c92:	4293      	cmp	r3, r2
 8011c94:	d003      	beq.n	8011c9e <HAL_XSPI_Init+0x3a>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	4a73      	ldr	r2, [pc, #460]	; (8011e68 <HAL_XSPI_Init+0x204>)
 8011c9c:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	4a72      	ldr	r2, [pc, #456]	; (8011e6c <HAL_XSPI_Init+0x208>)
 8011ca4:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	4a6d      	ldr	r2, [pc, #436]	; (8011e60 <HAL_XSPI_Init+0x1fc>)
 8011cac:	4293      	cmp	r3, r2
 8011cae:	d008      	beq.n	8011cc2 <HAL_XSPI_Init+0x5e>
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	4a6b      	ldr	r2, [pc, #428]	; (8011e64 <HAL_XSPI_Init+0x200>)
 8011cb6:	4293      	cmp	r3, r2
 8011cb8:	d003      	beq.n	8011cc2 <HAL_XSPI_Init+0x5e>
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	4a6a      	ldr	r2, [pc, #424]	; (8011e68 <HAL_XSPI_Init+0x204>)
 8011cc0:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	4a66      	ldr	r2, [pc, #408]	; (8011e60 <HAL_XSPI_Init+0x1fc>)
 8011cc8:	4293      	cmp	r3, r2
 8011cca:	d008      	beq.n	8011cde <HAL_XSPI_Init+0x7a>
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	4a64      	ldr	r2, [pc, #400]	; (8011e64 <HAL_XSPI_Init+0x200>)
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	d003      	beq.n	8011cde <HAL_XSPI_Init+0x7a>
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	4a63      	ldr	r2, [pc, #396]	; (8011e68 <HAL_XSPI_Init+0x204>)
 8011cdc:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	f040 8102 	bne.w	8011ef2 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f7ef fd02 	bl	80016f8 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8011cf4:	f241 3188 	movw	r1, #5000	; 0x1388
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f000 fc82 	bl	8012602 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	689a      	ldr	r2, [r3, #8]
 8011d04:	4b5a      	ldr	r3, [pc, #360]	; (8011e70 <HAL_XSPI_Init+0x20c>)
 8011d06:	4013      	ands	r3, r2
 8011d08:	687a      	ldr	r2, [r7, #4]
 8011d0a:	68d1      	ldr	r1, [r2, #12]
 8011d0c:	687a      	ldr	r2, [r7, #4]
 8011d0e:	6912      	ldr	r2, [r2, #16]
 8011d10:	0412      	lsls	r2, r2, #16
 8011d12:	4311      	orrs	r1, r2
 8011d14:	687a      	ldr	r2, [r7, #4]
 8011d16:	6952      	ldr	r2, [r2, #20]
 8011d18:	3a01      	subs	r2, #1
 8011d1a:	0212      	lsls	r2, r2, #8
 8011d1c:	4311      	orrs	r1, r2
 8011d1e:	687a      	ldr	r2, [r7, #4]
 8011d20:	69d2      	ldr	r2, [r2, #28]
 8011d22:	4311      	orrs	r1, r2
 8011d24:	687a      	ldr	r2, [r7, #4]
 8011d26:	6812      	ldr	r2, [r2, #0]
 8011d28:	430b      	orrs	r3, r1
 8011d2a:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	4a4b      	ldr	r2, [pc, #300]	; (8011e60 <HAL_XSPI_Init+0x1fc>)
 8011d32:	4293      	cmp	r3, r2
 8011d34:	d00e      	beq.n	8011d54 <HAL_XSPI_Init+0xf0>
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	4a4a      	ldr	r2, [pc, #296]	; (8011e64 <HAL_XSPI_Init+0x200>)
 8011d3c:	4293      	cmp	r3, r2
 8011d3e:	d009      	beq.n	8011d54 <HAL_XSPI_Init+0xf0>
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	4a48      	ldr	r2, [pc, #288]	; (8011e68 <HAL_XSPI_Init+0x204>)
 8011d46:	4293      	cmp	r3, r2
 8011d48:	d004      	beq.n	8011d54 <HAL_XSPI_Init+0xf0>
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	4a49      	ldr	r2, [pc, #292]	; (8011e74 <HAL_XSPI_Init+0x210>)
 8011d50:	4293      	cmp	r3, r2
 8011d52:	d10a      	bne.n	8011d6a <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	689b      	ldr	r3, [r3, #8]
 8011d5a:	f023 0108 	bic.w	r1, r3, #8
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	430a      	orrs	r2, r1
 8011d68:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6a1a      	ldr	r2, [r3, #32]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	430a      	orrs	r2, r1
 8011d7e:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	691b      	ldr	r3, [r3, #16]
 8011d86:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d8e:	041a      	lsls	r2, r3, #16
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	430a      	orrs	r2, r1
 8011d96:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	4a30      	ldr	r2, [pc, #192]	; (8011e60 <HAL_XSPI_Init+0x1fc>)
 8011d9e:	4293      	cmp	r3, r2
 8011da0:	d00e      	beq.n	8011dc0 <HAL_XSPI_Init+0x15c>
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	4a2f      	ldr	r2, [pc, #188]	; (8011e64 <HAL_XSPI_Init+0x200>)
 8011da8:	4293      	cmp	r3, r2
 8011daa:	d009      	beq.n	8011dc0 <HAL_XSPI_Init+0x15c>
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	4a2d      	ldr	r2, [pc, #180]	; (8011e68 <HAL_XSPI_Init+0x204>)
 8011db2:	4293      	cmp	r3, r2
 8011db4:	d004      	beq.n	8011dc0 <HAL_XSPI_Init+0x15c>
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	4a2e      	ldr	r2, [pc, #184]	; (8011e74 <HAL_XSPI_Init+0x210>)
 8011dbc:	4293      	cmp	r3, r2
 8011dbe:	d10a      	bne.n	8011dd6 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	691b      	ldr	r3, [r3, #16]
 8011dc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	430a      	orrs	r2, r1
 8011dd4:	611a      	str	r2, [r3, #16]
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	687a      	ldr	r2, [r7, #4]
 8011ddc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8011dde:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	685b      	ldr	r3, [r3, #4]
 8011dee:	3b01      	subs	r3, #1
 8011df0:	021a      	lsls	r2, r3, #8
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	430a      	orrs	r2, r1
 8011df8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011dfe:	9300      	str	r3, [sp, #0]
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	2200      	movs	r2, #0
 8011e04:	2120      	movs	r1, #32
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f000 fd60 	bl	80128cc <XSPI_WaitFlagStateUntilTimeout>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8011e10:	7bfb      	ldrb	r3, [r7, #15]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d16d      	bne.n	8011ef2 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	68db      	ldr	r3, [r3, #12]
 8011e1c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	430a      	orrs	r2, r1
 8011e2a:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	4a0e      	ldr	r2, [pc, #56]	; (8011e6c <HAL_XSPI_Init+0x208>)
 8011e32:	4293      	cmp	r3, r2
 8011e34:	d004      	beq.n	8011e40 <HAL_XSPI_Init+0x1dc>
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	4a0f      	ldr	r2, [pc, #60]	; (8011e78 <HAL_XSPI_Init+0x214>)
 8011e3c:	4293      	cmp	r3, r2
 8011e3e:	d11d      	bne.n	8011e7c <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e44:	9300      	str	r3, [sp, #0]
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	2200      	movs	r2, #0
 8011e4a:	2120      	movs	r1, #32
 8011e4c:	6878      	ldr	r0, [r7, #4]
 8011e4e:	f000 fd3d 	bl	80128cc <XSPI_WaitFlagStateUntilTimeout>
 8011e52:	4603      	mov	r3, r0
 8011e54:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8011e56:	7bfb      	ldrb	r3, [r7, #15]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d00f      	beq.n	8011e7c <HAL_XSPI_Init+0x218>
          {
            return status;
 8011e5c:	7bfb      	ldrb	r3, [r7, #15]
 8011e5e:	e049      	b.n	8011ef4 <HAL_XSPI_Init+0x290>
 8011e60:	420d1400 	.word	0x420d1400
 8011e64:	520d1400 	.word	0x520d1400
 8011e68:	420d2400 	.word	0x420d2400
 8011e6c:	420d3400 	.word	0x420d3400
 8011e70:	f8e0c0fc 	.word	0xf8e0c0fc
 8011e74:	520d2400 	.word	0x520d2400
 8011e78:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	689a      	ldr	r2, [r3, #8]
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	430a      	orrs	r2, r1
 8011e90:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8011e9a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ea6:	431a      	orrs	r2, r3
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	430a      	orrs	r2, r1
 8011eae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	681a      	ldr	r2, [r3, #0]
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	f042 0201 	orr.w	r2, r2, #1
 8011ec0:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	699b      	ldr	r3, [r3, #24]
 8011ec6:	2b02      	cmp	r3, #2
 8011ec8:	d107      	bne.n	8011eda <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	689a      	ldr	r2, [r3, #8]
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	f042 0202 	orr.w	r2, r2, #2
 8011ed8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	68db      	ldr	r3, [r3, #12]
 8011ede:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011ee2:	d103      	bne.n	8011eec <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2201      	movs	r2, #1
 8011ee8:	655a      	str	r2, [r3, #84]	; 0x54
 8011eea:	e002      	b.n	8011ef2 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	2202      	movs	r2, #2
 8011ef0:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
  }
  return status;
 8011ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3710      	adds	r7, #16
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}

08011efc <HAL_XSPI_DeInit>:
  * @brief  De-Initialize the XSPI peripheral.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_DeInit(XSPI_HandleTypeDef *hxspi)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b084      	sub	sp, #16
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011f04:	2300      	movs	r3, #0
 8011f06:	73fb      	strb	r3, [r7, #15]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d102      	bne.n	8011f14 <HAL_XSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8011f0e:	2301      	movs	r3, #1
 8011f10:	73fb      	strb	r3, [r7, #15]
 8011f12:	e015      	b.n	8011f40 <HAL_XSPI_DeInit+0x44>
    /* No error code can be set as the handler is null */
  }
  else
  {
    /* Disable XSPI */
    HAL_XSPI_DISABLE(hxspi);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	681a      	ldr	r2, [r3, #0]
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	f022 0201 	bic.w	r2, r2, #1
 8011f22:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after XSPI disable */
    CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	689a      	ldr	r2, [r3, #8]
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	f022 0202 	bic.w	r2, r2, #2
 8011f32:	609a      	str	r2, [r3, #8]

    /* De-initialize the low level hardware */
    hxspi->MspDeInitCallback(hxspi);
#else
    /* De-initialize the low-level hardware */
    HAL_XSPI_MspDeInit(hxspi);
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f7ef fbf7 	bl	8001728 <HAL_XSPI_MspDeInit>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hxspi->State = HAL_XSPI_STATE_RESET;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  return status;
 8011f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f42:	4618      	mov	r0, r3
 8011f44:	3710      	adds	r7, #16
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}
	...

08011f4c <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b08a      	sub	sp, #40	; 0x28
 8011f50:	af02      	add	r7, sp, #8
 8011f52:	60f8      	str	r0, [r7, #12]
 8011f54:	60b9      	str	r1, [r7, #8]
 8011f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8011f58:	f7f5 fa10 	bl	800737c <HAL_GetTick>
 8011f5c:	61b8      	str	r0, [r7, #24]

  /* Check the parameters of the command structure */
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	689b      	ldr	r3, [r3, #8]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d125      	bne.n	8011fb2 <HAL_XSPI_Command+0x66>
  {
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	4a68      	ldr	r2, [pc, #416]	; (801210c <HAL_XSPI_Command+0x1c0>)
 8011f6c:	4293      	cmp	r3, r2
 8011f6e:	d020      	beq.n	8011fb2 <HAL_XSPI_Command+0x66>
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	4a66      	ldr	r2, [pc, #408]	; (8012110 <HAL_XSPI_Command+0x1c4>)
 8011f76:	4293      	cmp	r3, r2
 8011f78:	d01b      	beq.n	8011fb2 <HAL_XSPI_Command+0x66>
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	4a65      	ldr	r2, [pc, #404]	; (8012114 <HAL_XSPI_Command+0x1c8>)
 8011f80:	4293      	cmp	r3, r2
 8011f82:	d016      	beq.n	8011fb2 <HAL_XSPI_Command+0x66>
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	4a63      	ldr	r2, [pc, #396]	; (8012118 <HAL_XSPI_Command+0x1cc>)
 8011f8a:	4293      	cmp	r3, r2
 8011f8c:	d011      	beq.n	8011fb2 <HAL_XSPI_Command+0x66>
    {
      assert_param(IS_OCTOSPI_IO_SELECT(pCmd->IOSelect));
    }
#if defined(HSPI1)
    else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	4a62      	ldr	r2, [pc, #392]	; (801211c <HAL_XSPI_Command+0x1d0>)
 8011f94:	4293      	cmp	r3, r2
 8011f96:	d00c      	beq.n	8011fb2 <HAL_XSPI_Command+0x66>
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	4a60      	ldr	r2, [pc, #384]	; (8012120 <HAL_XSPI_Command+0x1d4>)
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	d007      	beq.n	8011fb2 <HAL_XSPI_Command+0x66>
      assert_param(IS_HSPI_IO_SELECT(pCmd->IOSelect));
    }
#endif /* HSPI1 */
    else
    {
      hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fa6:	f043 0208 	orr.w	r2, r3, #8
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8011fae:	2301      	movs	r3, #1
 8011fb0:	e0a8      	b.n	8012104 <HAL_XSPI_Command+0x1b8>
  {
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	4a55      	ldr	r2, [pc, #340]	; (801210c <HAL_XSPI_Command+0x1c0>)
 8011fb8:	4293      	cmp	r3, r2
 8011fba:	d020      	beq.n	8011ffe <HAL_XSPI_Command+0xb2>
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	4a53      	ldr	r2, [pc, #332]	; (8012110 <HAL_XSPI_Command+0x1c4>)
 8011fc2:	4293      	cmp	r3, r2
 8011fc4:	d01b      	beq.n	8011ffe <HAL_XSPI_Command+0xb2>
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	4a52      	ldr	r2, [pc, #328]	; (8012114 <HAL_XSPI_Command+0x1c8>)
 8011fcc:	4293      	cmp	r3, r2
 8011fce:	d016      	beq.n	8011ffe <HAL_XSPI_Command+0xb2>
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	4a50      	ldr	r2, [pc, #320]	; (8012118 <HAL_XSPI_Command+0x1cc>)
 8011fd6:	4293      	cmp	r3, r2
 8011fd8:	d011      	beq.n	8011ffe <HAL_XSPI_Command+0xb2>
  {
    assert_param(IS_OCTOSPI_DATA_MODE(pCmd->DataMode));
  }
#if defined(HSPI1)
  else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	4a4f      	ldr	r2, [pc, #316]	; (801211c <HAL_XSPI_Command+0x1d0>)
 8011fe0:	4293      	cmp	r3, r2
 8011fe2:	d00c      	beq.n	8011ffe <HAL_XSPI_Command+0xb2>
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	4a4d      	ldr	r2, [pc, #308]	; (8012120 <HAL_XSPI_Command+0x1d4>)
 8011fea:	4293      	cmp	r3, r2
 8011fec:	d007      	beq.n	8011ffe <HAL_XSPI_Command+0xb2>
    assert_param(IS_HSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
  }
#endif /* HSPI1 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ff2:	f043 0208 	orr.w	r2, r3, #8
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	659a      	str	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	e082      	b.n	8012104 <HAL_XSPI_Command+0x1b8>
  }

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012002:	2b00      	cmp	r3, #0

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
  assert_param(IS_XSPI_SIOO_MODE(pCmd->SIOOMode));

  /* Check the state of the driver */
  state = hxspi->State;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012008:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 801200a:	697b      	ldr	r3, [r7, #20]
 801200c:	2b02      	cmp	r3, #2
 801200e:	d104      	bne.n	801201a <HAL_XSPI_Command+0xce>
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	68db      	ldr	r3, [r3, #12]
 8012014:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012018:	d115      	bne.n	8012046 <HAL_XSPI_Command+0xfa>
 801201a:	697b      	ldr	r3, [r7, #20]
 801201c:	2b14      	cmp	r3, #20
 801201e:	d107      	bne.n	8012030 <HAL_XSPI_Command+0xe4>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8012020:	68bb      	ldr	r3, [r7, #8]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	2b02      	cmp	r3, #2
 8012026:	d00e      	beq.n	8012046 <HAL_XSPI_Command+0xfa>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 801202c:	2b03      	cmp	r3, #3
 801202e:	d00a      	beq.n	8012046 <HAL_XSPI_Command+0xfa>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	2b24      	cmp	r3, #36	; 0x24
 8012034:	d15e      	bne.n	80120f4 <HAL_XSPI_Command+0x1a8>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8012036:	68bb      	ldr	r3, [r7, #8]
 8012038:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 801203a:	2b01      	cmp	r3, #1
 801203c:	d003      	beq.n	8012046 <HAL_XSPI_Command+0xfa>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8012042:	2b03      	cmp	r3, #3
 8012044:	d156      	bne.n	80120f4 <HAL_XSPI_Command+0x1a8>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	9300      	str	r3, [sp, #0]
 801204a:	69bb      	ldr	r3, [r7, #24]
 801204c:	2200      	movs	r2, #0
 801204e:	2120      	movs	r1, #32
 8012050:	68f8      	ldr	r0, [r7, #12]
 8012052:	f000 fc3b 	bl	80128cc <XSPI_WaitFlagStateUntilTimeout>
 8012056:	4603      	mov	r3, r0
 8012058:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 801205a:	7ffb      	ldrb	r3, [r7, #31]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d146      	bne.n	80120ee <HAL_XSPI_Command+0x1a2>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	2200      	movs	r2, #0
 8012064:	659a      	str	r2, [r3, #88]	; 0x58

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 8012066:	68b9      	ldr	r1, [r7, #8]
 8012068:	68f8      	ldr	r0, [r7, #12]
 801206a:	f000 fc67 	bl	801293c <XSPI_ConfigCmd>
 801206e:	4603      	mov	r3, r0
 8012070:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8012072:	7ffb      	ldrb	r3, [r7, #31]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d143      	bne.n	8012100 <HAL_XSPI_Command+0x1b4>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801207c:	2b00      	cmp	r3, #0
 801207e:	d10e      	bne.n	801209e <HAL_XSPI_Command+0x152>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	9300      	str	r3, [sp, #0]
 8012084:	69bb      	ldr	r3, [r7, #24]
 8012086:	2201      	movs	r2, #1
 8012088:	2102      	movs	r1, #2
 801208a:	68f8      	ldr	r0, [r7, #12]
 801208c:	f000 fc1e 	bl	80128cc <XSPI_WaitFlagStateUntilTimeout>
 8012090:	4603      	mov	r3, r0
 8012092:	77fb      	strb	r3, [r7, #31]

          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	2202      	movs	r2, #2
 801209a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 801209c:	e030      	b.n	8012100 <HAL_XSPI_Command+0x1b4>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d103      	bne.n	80120ae <HAL_XSPI_Command+0x162>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	2204      	movs	r2, #4
 80120aa:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80120ac:	e028      	b.n	8012100 <HAL_XSPI_Command+0x1b4>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 80120ae:	68bb      	ldr	r3, [r7, #8]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	2b01      	cmp	r3, #1
 80120b4:	d10b      	bne.n	80120ce <HAL_XSPI_Command+0x182>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120ba:	2b24      	cmp	r3, #36	; 0x24
 80120bc:	d103      	bne.n	80120c6 <HAL_XSPI_Command+0x17a>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	2204      	movs	r2, #4
 80120c2:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80120c4:	e01c      	b.n	8012100 <HAL_XSPI_Command+0x1b4>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	2214      	movs	r2, #20
 80120ca:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80120cc:	e018      	b.n	8012100 <HAL_XSPI_Command+0x1b4>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 80120ce:	68bb      	ldr	r3, [r7, #8]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	2b02      	cmp	r3, #2
 80120d4:	d114      	bne.n	8012100 <HAL_XSPI_Command+0x1b4>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120da:	2b14      	cmp	r3, #20
 80120dc:	d103      	bne.n	80120e6 <HAL_XSPI_Command+0x19a>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	2204      	movs	r2, #4
 80120e2:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80120e4:	e00c      	b.n	8012100 <HAL_XSPI_Command+0x1b4>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	2224      	movs	r2, #36	; 0x24
 80120ea:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80120ec:	e008      	b.n	8012100 <HAL_XSPI_Command+0x1b4>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 80120ee:	2302      	movs	r3, #2
 80120f0:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 80120f2:	e005      	b.n	8012100 <HAL_XSPI_Command+0x1b4>
    }
  }
  else
  {
    status = HAL_ERROR;
 80120f4:	2301      	movs	r3, #1
 80120f6:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	2210      	movs	r2, #16
 80120fc:	659a      	str	r2, [r3, #88]	; 0x58
 80120fe:	e000      	b.n	8012102 <HAL_XSPI_Command+0x1b6>
    if (status == HAL_OK)
 8012100:	bf00      	nop
  }

  return status;
 8012102:	7ffb      	ldrb	r3, [r7, #31]
}
 8012104:	4618      	mov	r0, r3
 8012106:	3720      	adds	r7, #32
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}
 801210c:	420d1400 	.word	0x420d1400
 8012110:	520d1400 	.word	0x520d1400
 8012114:	420d2400 	.word	0x420d2400
 8012118:	520d2400 	.word	0x520d2400
 801211c:	420d3400 	.word	0x420d3400
 8012120:	520d3400 	.word	0x520d3400

08012124 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b08a      	sub	sp, #40	; 0x28
 8012128:	af02      	add	r7, sp, #8
 801212a:	60f8      	str	r0, [r7, #12]
 801212c:	60b9      	str	r1, [r7, #8]
 801212e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8012130:	f7f5 f924 	bl	800737c <HAL_GetTick>
 8012134:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	3350      	adds	r3, #80	; 0x50
 801213c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d105      	bne.n	8012150 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8012144:	2301      	movs	r3, #1
 8012146:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	2208      	movs	r2, #8
 801214c:	659a      	str	r2, [r3, #88]	; 0x58
 801214e:	e057      	b.n	8012200 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012154:	2b04      	cmp	r3, #4
 8012156:	d14e      	bne.n	80121f6 <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801215e:	1c5a      	adds	r2, r3, #1
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	649a      	str	r2, [r3, #72]	; 0x48
      hxspi->XferSize  = hxspi->XferCount;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	645a      	str	r2, [r3, #68]	; 0x44
      hxspi->pBuffPtr  = pData;
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	68ba      	ldr	r2, [r7, #8]
 8012170:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	681a      	ldr	r2, [r3, #0]
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8012180:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	9300      	str	r3, [sp, #0]
 8012186:	69bb      	ldr	r3, [r7, #24]
 8012188:	2201      	movs	r2, #1
 801218a:	2104      	movs	r1, #4
 801218c:	68f8      	ldr	r0, [r7, #12]
 801218e:	f000 fb9d 	bl	80128cc <XSPI_WaitFlagStateUntilTimeout>
 8012192:	4603      	mov	r3, r0
 8012194:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8012196:	7ffb      	ldrb	r3, [r7, #31]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d113      	bne.n	80121c4 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121a0:	781a      	ldrb	r2, [r3, #0]
 80121a2:	697b      	ldr	r3, [r7, #20]
 80121a4:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121aa:	1c5a      	adds	r2, r3, #1
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	641a      	str	r2, [r3, #64]	; 0x40
        hxspi->XferCount--;
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80121b4:	1e5a      	subs	r2, r3, #1
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hxspi->XferCount > 0U);
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d1df      	bne.n	8012182 <HAL_XSPI_Transmit+0x5e>
 80121c2:	e000      	b.n	80121c6 <HAL_XSPI_Transmit+0xa2>
          break;
 80121c4:	bf00      	nop

      if (status == HAL_OK)
 80121c6:	7ffb      	ldrb	r3, [r7, #31]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d119      	bne.n	8012200 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	9300      	str	r3, [sp, #0]
 80121d0:	69bb      	ldr	r3, [r7, #24]
 80121d2:	2201      	movs	r2, #1
 80121d4:	2102      	movs	r1, #2
 80121d6:	68f8      	ldr	r0, [r7, #12]
 80121d8:	f000 fb78 	bl	80128cc <XSPI_WaitFlagStateUntilTimeout>
 80121dc:	4603      	mov	r3, r0
 80121de:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80121e0:	7ffb      	ldrb	r3, [r7, #31]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d10c      	bne.n	8012200 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	2202      	movs	r2, #2
 80121ec:	625a      	str	r2, [r3, #36]	; 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	2202      	movs	r2, #2
 80121f2:	655a      	str	r2, [r3, #84]	; 0x54
 80121f4:	e004      	b.n	8012200 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80121f6:	2301      	movs	r3, #1
 80121f8:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	2210      	movs	r2, #16
 80121fe:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 8012200:	7ffb      	ldrb	r3, [r7, #31]
}
 8012202:	4618      	mov	r0, r3
 8012204:	3720      	adds	r7, #32
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}

0801220a <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 801220a:	b580      	push	{r7, lr}
 801220c:	b08c      	sub	sp, #48	; 0x30
 801220e:	af02      	add	r7, sp, #8
 8012210:	60f8      	str	r0, [r7, #12]
 8012212:	60b9      	str	r1, [r7, #8]
 8012214:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8012216:	f7f5 f8b1 	bl	800737c <HAL_GetTick>
 801221a:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	3350      	adds	r3, #80	; 0x50
 8012222:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801222a:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8012234:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d106      	bne.n	801224a <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 801223c:	2301      	movs	r3, #1
 801223e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	2208      	movs	r2, #8
 8012246:	659a      	str	r2, [r3, #88]	; 0x58
 8012248:	e07c      	b.n	8012344 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801224e:	2b04      	cmp	r3, #4
 8012250:	d172      	bne.n	8012338 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012258:	1c5a      	adds	r2, r3, #1
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	649a      	str	r2, [r3, #72]	; 0x48
      hxspi->XferSize  = hxspi->XferCount;
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	645a      	str	r2, [r3, #68]	; 0x44
      hxspi->pBuffPtr  = pData;
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	68ba      	ldr	r2, [r7, #8]
 801226a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801227e:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	68db      	ldr	r3, [r3, #12]
 8012284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012288:	d104      	bne.n	8012294 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	69ba      	ldr	r2, [r7, #24]
 8012290:	649a      	str	r2, [r3, #72]	; 0x48
 8012292:	e011      	b.n	80122b8 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801229c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d004      	beq.n	80122ae <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	69ba      	ldr	r2, [r7, #24]
 80122aa:	649a      	str	r2, [r3, #72]	; 0x48
 80122ac:	e004      	b.n	80122b8 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	697a      	ldr	r2, [r7, #20]
 80122b4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	9300      	str	r3, [sp, #0]
 80122bc:	6a3b      	ldr	r3, [r7, #32]
 80122be:	2201      	movs	r2, #1
 80122c0:	2106      	movs	r1, #6
 80122c2:	68f8      	ldr	r0, [r7, #12]
 80122c4:	f000 fb02 	bl	80128cc <XSPI_WaitFlagStateUntilTimeout>
 80122c8:	4603      	mov	r3, r0
 80122ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80122ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d114      	bne.n	8012300 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122da:	69fa      	ldr	r2, [r7, #28]
 80122dc:	7812      	ldrb	r2, [r2, #0]
 80122de:	b2d2      	uxtb	r2, r2
 80122e0:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122e6:	1c5a      	adds	r2, r3, #1
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	641a      	str	r2, [r3, #64]	; 0x40
        hxspi->XferCount--;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122f0:	1e5a      	subs	r2, r3, #1
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hxspi->XferCount > 0U);
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d1dc      	bne.n	80122b8 <HAL_XSPI_Receive+0xae>
 80122fe:	e000      	b.n	8012302 <HAL_XSPI_Receive+0xf8>
          break;
 8012300:	bf00      	nop

      if (status == HAL_OK)
 8012302:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012306:	2b00      	cmp	r3, #0
 8012308:	d11c      	bne.n	8012344 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	9300      	str	r3, [sp, #0]
 801230e:	6a3b      	ldr	r3, [r7, #32]
 8012310:	2201      	movs	r2, #1
 8012312:	2102      	movs	r1, #2
 8012314:	68f8      	ldr	r0, [r7, #12]
 8012316:	f000 fad9 	bl	80128cc <XSPI_WaitFlagStateUntilTimeout>
 801231a:	4603      	mov	r3, r0
 801231c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8012320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012324:	2b00      	cmp	r3, #0
 8012326:	d10d      	bne.n	8012344 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	2202      	movs	r2, #2
 801232e:	625a      	str	r2, [r3, #36]	; 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	2202      	movs	r2, #2
 8012334:	655a      	str	r2, [r3, #84]	; 0x54
 8012336:	e005      	b.n	8012344 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8012338:	2301      	movs	r3, #1
 801233a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	2210      	movs	r2, #16
 8012342:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 8012344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012348:	4618      	mov	r0, r3
 801234a:	3728      	adds	r7, #40	; 0x28
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}

08012350 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, XSPI_AutoPollingTypeDef *const pCfg,
                                       uint32_t Timeout)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b08a      	sub	sp, #40	; 0x28
 8012354:	af02      	add	r7, sp, #8
 8012356:	60f8      	str	r0, [r7, #12]
 8012358:	60b9      	str	r1, [r7, #8]
 801235a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801235c:	f7f5 f80e 	bl	800737c <HAL_GetTick>
 8012360:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012368:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8012372:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012378:	2b04      	cmp	r3, #4
 801237a:	d167      	bne.n	801244c <HAL_XSPI_AutoPolling+0xfc>
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	68db      	ldr	r3, [r3, #12]
 8012380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012384:	d162      	bne.n	801244c <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	9300      	str	r3, [sp, #0]
 801238a:	69bb      	ldr	r3, [r7, #24]
 801238c:	2200      	movs	r2, #0
 801238e:	2120      	movs	r1, #32
 8012390:	68f8      	ldr	r0, [r7, #12]
 8012392:	f000 fa9b 	bl	80128cc <XSPI_WaitFlagStateUntilTimeout>
 8012396:	4603      	mov	r3, r0
 8012398:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 801239a:	7ffb      	ldrb	r3, [r7, #31]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d152      	bne.n	8012446 <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	68ba      	ldr	r2, [r7, #8]
 80123a6:	6812      	ldr	r2, [r2, #0]
 80123a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	68ba      	ldr	r2, [r7, #8]
 80123b2:	6852      	ldr	r2, [r2, #4]
 80123b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	68ba      	ldr	r2, [r7, #8]
 80123be:	6912      	ldr	r2, [r2, #16]
 80123c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	6899      	ldr	r1, [r3, #8]
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	68db      	ldr	r3, [r3, #12]
 80123d6:	430b      	orrs	r3, r1
 80123d8:	431a      	orrs	r2, r3
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80123e2:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	68db      	ldr	r3, [r3, #12]
 80123e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80123ec:	d104      	bne.n	80123f8 <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	697a      	ldr	r2, [r7, #20]
 80123f4:	649a      	str	r2, [r3, #72]	; 0x48
 80123f6:	e011      	b.n	801241c <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8012400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012404:	2b00      	cmp	r3, #0
 8012406:	d004      	beq.n	8012412 <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	697a      	ldr	r2, [r7, #20]
 801240e:	649a      	str	r2, [r3, #72]	; 0x48
 8012410:	e004      	b.n	801241c <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	693a      	ldr	r2, [r7, #16]
 8012418:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	9300      	str	r3, [sp, #0]
 8012420:	69bb      	ldr	r3, [r7, #24]
 8012422:	2201      	movs	r2, #1
 8012424:	2108      	movs	r1, #8
 8012426:	68f8      	ldr	r0, [r7, #12]
 8012428:	f000 fa50 	bl	80128cc <XSPI_WaitFlagStateUntilTimeout>
 801242c:	4603      	mov	r3, r0
 801242e:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8012430:	7ffb      	ldrb	r3, [r7, #31]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d110      	bne.n	8012458 <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	2208      	movs	r2, #8
 801243c:	625a      	str	r2, [r3, #36]	; 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	2202      	movs	r2, #2
 8012442:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8012444:	e008      	b.n	8012458 <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
 8012446:	2302      	movs	r3, #2
 8012448:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 801244a:	e005      	b.n	8012458 <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
 801244c:	2301      	movs	r3, #1
 801244e:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	2210      	movs	r2, #16
 8012454:	659a      	str	r2, [r3, #88]	; 0x58
 8012456:	e000      	b.n	801245a <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
 8012458:	bf00      	nop
  }

  return status;
 801245a:	7ffb      	ldrb	r3, [r7, #31]
}
 801245c:	4618      	mov	r0, r3
 801245e:	3720      	adds	r7, #32
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, XSPI_MemoryMappedTypeDef *const pCfg)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b086      	sub	sp, #24
 8012468:	af02      	add	r7, sp, #8
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801246e:	f7f4 ff85 	bl	800737c <HAL_GetTick>
 8012472:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012478:	2b04      	cmp	r3, #4
 801247a:	d136      	bne.n	80124ea <HAL_XSPI_MemoryMapped+0x86>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012480:	9300      	str	r3, [sp, #0]
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	2200      	movs	r2, #0
 8012486:	2120      	movs	r1, #32
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f000 fa1f 	bl	80128cc <XSPI_WaitFlagStateUntilTimeout>
 801248e:	4603      	mov	r3, r0
 8012490:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8012492:	7bfb      	ldrb	r3, [r7, #15]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d12d      	bne.n	80124f4 <HAL_XSPI_MemoryMapped+0x90>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2288      	movs	r2, #136	; 0x88
 801249c:	655a      	str	r2, [r3, #84]	; 0x54

      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	2b08      	cmp	r3, #8
 80124a4:	d111      	bne.n	80124ca <HAL_XSPI_MemoryMapped+0x66>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	683a      	ldr	r2, [r7, #0]
 80124ac:	6852      	ldr	r2, [r2, #4]
 80124ae:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	2210      	movs	r2, #16
 80124b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	681a      	ldr	r2, [r3, #0]
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80124c8:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80124d4:	f023 0308 	bic.w	r3, r3, #8
 80124d8:	683a      	ldr	r2, [r7, #0]
 80124da:	6812      	ldr	r2, [r2, #0]
 80124dc:	431a      	orrs	r2, r3
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80124e6:	601a      	str	r2, [r3, #0]
 80124e8:	e004      	b.n	80124f4 <HAL_XSPI_MemoryMapped+0x90>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 80124ea:	2301      	movs	r3, #1
 80124ec:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	2210      	movs	r2, #16
 80124f2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 80124f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3710      	adds	r7, #16
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}

080124fe <HAL_XSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
 80124fe:	b580      	push	{r7, lr}
 8012500:	b088      	sub	sp, #32
 8012502:	af02      	add	r7, sp, #8
 8012504:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012506:	2300      	movs	r3, #0
 8012508:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 801250a:	f7f4 ff37 	bl	800737c <HAL_GetTick>
 801250e:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hxspi->State;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012514:	60fb      	str	r3, [r7, #12]
  if (((state & XSPI_BUSY_STATE_MASK) != 0U) || ((state & XSPI_CFG_STATE_MASK) != 0U))
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	f003 0308 	and.w	r3, r3, #8
 801251c:	2b00      	cmp	r3, #0
 801251e:	d104      	bne.n	801252a <HAL_XSPI_Abort+0x2c>
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	f003 0304 	and.w	r3, r3, #4
 8012526:	2b00      	cmp	r3, #0
 8012528:	d05f      	beq.n	80125ea <HAL_XSPI_Abort+0xec>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	f003 0304 	and.w	r3, r3, #4
 8012534:	2b00      	cmp	r3, #0
 8012536:	d021      	beq.n	801257c <HAL_XSPI_Abort+0x7e>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	681a      	ldr	r2, [r3, #0]
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	f022 0204 	bic.w	r2, r2, #4
 8012546:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801254c:	4618      	mov	r0, r3
 801254e:	f7f5 fb4d 	bl	8007bec <HAL_DMA_Abort>
 8012552:	4603      	mov	r3, r0
 8012554:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8012556:	7dfb      	ldrb	r3, [r7, #23]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d002      	beq.n	8012562 <HAL_XSPI_Abort+0x64>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2204      	movs	r2, #4
 8012560:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012566:	4618      	mov	r0, r3
 8012568:	f7f5 fb40 	bl	8007bec <HAL_DMA_Abort>
 801256c:	4603      	mov	r3, r0
 801256e:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8012570:	7dfb      	ldrb	r3, [r7, #23]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d002      	beq.n	801257c <HAL_XSPI_Abort+0x7e>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	2204      	movs	r2, #4
 801257a:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	6a1b      	ldr	r3, [r3, #32]
 8012582:	f003 0320 	and.w	r3, r3, #32
 8012586:	2b00      	cmp	r3, #0
 8012588:	d02b      	beq.n	80125e2 <HAL_XSPI_Abort+0xe4>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	681a      	ldr	r2, [r3, #0]
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	f042 0202 	orr.w	r2, r2, #2
 8012598:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801259e:	9300      	str	r3, [sp, #0]
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	2201      	movs	r2, #1
 80125a4:	2102      	movs	r1, #2
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f000 f990 	bl	80128cc <XSPI_WaitFlagStateUntilTimeout>
 80125ac:	4603      	mov	r3, r0
 80125ae:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80125b0:	7dfb      	ldrb	r3, [r7, #23]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d11f      	bne.n	80125f6 <HAL_XSPI_Abort+0xf8>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	2202      	movs	r2, #2
 80125bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80125c2:	9300      	str	r3, [sp, #0]
 80125c4:	693b      	ldr	r3, [r7, #16]
 80125c6:	2200      	movs	r2, #0
 80125c8:	2120      	movs	r1, #32
 80125ca:	6878      	ldr	r0, [r7, #4]
 80125cc:	f000 f97e 	bl	80128cc <XSPI_WaitFlagStateUntilTimeout>
 80125d0:	4603      	mov	r3, r0
 80125d2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80125d4:	7dfb      	ldrb	r3, [r7, #23]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d10d      	bne.n	80125f6 <HAL_XSPI_Abort+0xf8>
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2202      	movs	r2, #2
 80125de:	655a      	str	r2, [r3, #84]	; 0x54
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 80125e0:	e009      	b.n	80125f6 <HAL_XSPI_Abort+0xf8>
        }
      }
    }
    else
    {
      hxspi->State = HAL_XSPI_STATE_READY;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2202      	movs	r2, #2
 80125e6:	655a      	str	r2, [r3, #84]	; 0x54
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 80125e8:	e005      	b.n	80125f6 <HAL_XSPI_Abort+0xf8>
    }
  }
  else
  {
    status = HAL_ERROR;
 80125ea:	2301      	movs	r3, #1
 80125ec:	75fb      	strb	r3, [r7, #23]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	2210      	movs	r2, #16
 80125f2:	659a      	str	r2, [r3, #88]	; 0x58
 80125f4:	e000      	b.n	80125f8 <HAL_XSPI_Abort+0xfa>
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 80125f6:	bf00      	nop
  }

  return status;
 80125f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80125fa:	4618      	mov	r0, r3
 80125fc:	3718      	adds	r7, #24
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}

08012602 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8012602:	b480      	push	{r7}
 8012604:	b083      	sub	sp, #12
 8012606:	af00      	add	r7, sp, #0
 8012608:	6078      	str	r0, [r7, #4]
 801260a:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	683a      	ldr	r2, [r7, #0]
 8012610:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 8012612:	2300      	movs	r3, #0
}
 8012614:	4618      	mov	r0, r3
 8012616:	370c      	adds	r7, #12
 8012618:	46bd      	mov	sp, r7
 801261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261e:	4770      	bx	lr

08012620 <HAL_XSPI_DLYB_SetConfig>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_SetConfig(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b084      	sub	sp, #16
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801262a:	2301      	movs	r3, #1
 801262c:	73fb      	strb	r3, [r7, #15]

  /* Enable XSPI Free Running Clock (mandatory) */
  SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	689a      	ldr	r2, [r3, #8]
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	f042 0202 	orr.w	r2, r2, #2
 801263c:	609a      	str	r2, [r3, #8]

  /* Update XSPI state */
  hxspi->State = HAL_XSPI_STATE_BUSY_CMD;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2208      	movs	r2, #8
 8012642:	655a      	str	r2, [r3, #84]	; 0x54

  if (hxspi->Instance == OCTOSPI1)
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	4a18      	ldr	r2, [pc, #96]	; (80126ac <HAL_XSPI_DLYB_SetConfig+0x8c>)
 801264a:	4293      	cmp	r3, r2
 801264c:	d109      	bne.n	8012662 <HAL_XSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 801264e:	4818      	ldr	r0, [pc, #96]	; (80126b0 <HAL_XSPI_DLYB_SetConfig+0x90>)
 8012650:	f7ff fae8 	bl	8011c24 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8012654:	6839      	ldr	r1, [r7, #0]
 8012656:	4816      	ldr	r0, [pc, #88]	; (80126b0 <HAL_XSPI_DLYB_SetConfig+0x90>)
 8012658:	f000 fb2e 	bl	8012cb8 <LL_DLYB_SetDelay>
    status = HAL_OK;
 801265c:	2300      	movs	r3, #0
 801265e:	73fb      	strb	r3, [r7, #15]
 8012660:	e014      	b.n	801268c <HAL_XSPI_DLYB_SetConfig+0x6c>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	4a13      	ldr	r2, [pc, #76]	; (80126b4 <HAL_XSPI_DLYB_SetConfig+0x94>)
 8012668:	4293      	cmp	r3, r2
 801266a:	d109      	bne.n	8012680 <HAL_XSPI_DLYB_SetConfig+0x60>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 801266c:	4812      	ldr	r0, [pc, #72]	; (80126b8 <HAL_XSPI_DLYB_SetConfig+0x98>)
 801266e:	f7ff fad9 	bl	8011c24 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8012672:	6839      	ldr	r1, [r7, #0]
 8012674:	4810      	ldr	r0, [pc, #64]	; (80126b8 <HAL_XSPI_DLYB_SetConfig+0x98>)
 8012676:	f000 fb1f 	bl	8012cb8 <LL_DLYB_SetDelay>
    status = HAL_OK;
 801267a:	2300      	movs	r3, #0
 801267c:	73fb      	strb	r3, [r7, #15]
 801267e:	e005      	b.n	801268c <HAL_XSPI_DLYB_SetConfig+0x6c>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012684:	f043 0208 	orr.w	r2, r3, #8
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Abort the current XSPI operation if exist */
  (void)HAL_XSPI_Abort(hxspi);
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f7ff ff36 	bl	80124fe <HAL_XSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	689a      	ldr	r2, [r3, #8]
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	f022 0202 	bic.w	r2, r2, #2
 80126a0:	609a      	str	r2, [r3, #8]

  return status;
 80126a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	3710      	adds	r7, #16
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}
 80126ac:	420d1400 	.word	0x420d1400
 80126b0:	420cf000 	.word	0x420cf000
 80126b4:	420d2400 	.word	0x420d2400
 80126b8:	420cf400 	.word	0x420cf400

080126bc <HAL_XSPI_DLYB_GetConfig>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_GetConfig(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b084      	sub	sp, #16
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80126c6:	2301      	movs	r3, #1
 80126c8:	73fb      	strb	r3, [r7, #15]

  if (hxspi->Instance == OCTOSPI1)
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	4a10      	ldr	r2, [pc, #64]	; (8012710 <HAL_XSPI_DLYB_GetConfig+0x54>)
 80126d0:	4293      	cmp	r3, r2
 80126d2:	d106      	bne.n	80126e2 <HAL_XSPI_DLYB_GetConfig+0x26>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 80126d4:	6839      	ldr	r1, [r7, #0]
 80126d6:	480f      	ldr	r0, [pc, #60]	; (8012714 <HAL_XSPI_DLYB_GetConfig+0x58>)
 80126d8:	f000 fb0d 	bl	8012cf6 <LL_DLYB_GetDelay>
    status = HAL_OK;
 80126dc:	2300      	movs	r3, #0
 80126de:	73fb      	strb	r3, [r7, #15]
 80126e0:	e011      	b.n	8012706 <HAL_XSPI_DLYB_GetConfig+0x4a>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	4a0c      	ldr	r2, [pc, #48]	; (8012718 <HAL_XSPI_DLYB_GetConfig+0x5c>)
 80126e8:	4293      	cmp	r3, r2
 80126ea:	d106      	bne.n	80126fa <HAL_XSPI_DLYB_GetConfig+0x3e>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 80126ec:	6839      	ldr	r1, [r7, #0]
 80126ee:	480b      	ldr	r0, [pc, #44]	; (801271c <HAL_XSPI_DLYB_GetConfig+0x60>)
 80126f0:	f000 fb01 	bl	8012cf6 <LL_DLYB_GetDelay>
    status = HAL_OK;
 80126f4:	2300      	movs	r3, #0
 80126f6:	73fb      	strb	r3, [r7, #15]
 80126f8:	e005      	b.n	8012706 <HAL_XSPI_DLYB_GetConfig+0x4a>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126fe:	f043 0208 	orr.w	r2, r3, #8
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 8012706:	7bfb      	ldrb	r3, [r7, #15]
}
 8012708:	4618      	mov	r0, r3
 801270a:	3710      	adds	r7, #16
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}
 8012710:	420d1400 	.word	0x420d1400
 8012714:	420cf000 	.word	0x420cf000
 8012718:	420d2400 	.word	0x420d2400
 801271c:	420cf400 	.word	0x420cf400

08012720 <HAL_XSPI_DLYB_GetClockPeriod>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_GetClockPeriod(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b084      	sub	sp, #16
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
 8012728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801272a:	2301      	movs	r3, #1
 801272c:	73fb      	strb	r3, [r7, #15]

  /* Enable XSPI Free Running Clock (mandatory) */
  SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	689a      	ldr	r2, [r3, #8]
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	f042 0202 	orr.w	r2, r2, #2
 801273c:	609a      	str	r2, [r3, #8]

  /* Update XSPI state */
  hxspi->State = HAL_XSPI_STATE_BUSY_CMD;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2208      	movs	r2, #8
 8012742:	655a      	str	r2, [r3, #84]	; 0x54

  if (hxspi->Instance == OCTOSPI1)
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	4a1e      	ldr	r2, [pc, #120]	; (80127c4 <HAL_XSPI_DLYB_GetClockPeriod+0xa4>)
 801274a:	4293      	cmp	r3, r2
 801274c:	d10f      	bne.n	801276e <HAL_XSPI_DLYB_GetClockPeriod+0x4e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 801274e:	481e      	ldr	r0, [pc, #120]	; (80127c8 <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 8012750:	f7ff fa68 	bl	8011c24 <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI1, pdlyb_cfg) == (uint32_t)SUCCESS)
 8012754:	6839      	ldr	r1, [r7, #0]
 8012756:	481c      	ldr	r0, [pc, #112]	; (80127c8 <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 8012758:	f000 fae6 	bl	8012d28 <LL_DLYB_GetClockPeriod>
 801275c:	4603      	mov	r3, r0
 801275e:	2b00      	cmp	r3, #0
 8012760:	d101      	bne.n	8012766 <HAL_XSPI_DLYB_GetClockPeriod+0x46>
    {
      status = HAL_OK;
 8012762:	2300      	movs	r3, #0
 8012764:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI1);
 8012766:	4818      	ldr	r0, [pc, #96]	; (80127c8 <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 8012768:	f7ff fa6c 	bl	8011c44 <LL_DLYB_Disable>
 801276c:	e01a      	b.n	80127a4 <HAL_XSPI_DLYB_GetClockPeriod+0x84>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	4a16      	ldr	r2, [pc, #88]	; (80127cc <HAL_XSPI_DLYB_GetClockPeriod+0xac>)
 8012774:	4293      	cmp	r3, r2
 8012776:	d10f      	bne.n	8012798 <HAL_XSPI_DLYB_GetClockPeriod+0x78>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8012778:	4815      	ldr	r0, [pc, #84]	; (80127d0 <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 801277a:	f7ff fa53 	bl	8011c24 <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI2, pdlyb_cfg) == (uint32_t)SUCCESS)
 801277e:	6839      	ldr	r1, [r7, #0]
 8012780:	4813      	ldr	r0, [pc, #76]	; (80127d0 <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 8012782:	f000 fad1 	bl	8012d28 <LL_DLYB_GetClockPeriod>
 8012786:	4603      	mov	r3, r0
 8012788:	2b00      	cmp	r3, #0
 801278a:	d101      	bne.n	8012790 <HAL_XSPI_DLYB_GetClockPeriod+0x70>
    {
      status = HAL_OK;
 801278c:	2300      	movs	r3, #0
 801278e:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI2);
 8012790:	480f      	ldr	r0, [pc, #60]	; (80127d0 <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 8012792:	f7ff fa57 	bl	8011c44 <LL_DLYB_Disable>
 8012796:	e005      	b.n	80127a4 <HAL_XSPI_DLYB_GetClockPeriod+0x84>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801279c:	f043 0208 	orr.w	r2, r3, #8
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Abort the current XSPI operation if exist */
  (void)HAL_XSPI_Abort(hxspi);
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	f7ff feaa 	bl	80124fe <HAL_XSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	689a      	ldr	r2, [r3, #8]
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	f022 0202 	bic.w	r2, r2, #2
 80127b8:	609a      	str	r2, [r3, #8]

  return status;
 80127ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80127bc:	4618      	mov	r0, r3
 80127be:	3710      	adds	r7, #16
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}
 80127c4:	420d1400 	.word	0x420d1400
 80127c8:	420cf000 	.word	0x420cf000
 80127cc:	420d2400 	.word	0x420d2400
 80127d0:	420cf400 	.word	0x420cf400

080127d4 <HAL_XSPI_SetDelayValue>:
  * @param  hxspi : XSPI handle
  * @param  pCfg   : Configuration of delay value specified in DelayValueType field.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_SetDelayValue(XSPI_HandleTypeDef *hxspi, XSPI_HSCalTypeDef *const pCfg)
{
 80127d4:	b480      	push	{r7}
 80127d6:	b085      	sub	sp, #20
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
 80127dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80127de:	2300      	movs	r3, #0
 80127e0:	73fb      	strb	r3, [r7, #15]

  if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	4a37      	ldr	r2, [pc, #220]	; (80128c4 <HAL_XSPI_SetDelayValue+0xf0>)
 80127e8:	4293      	cmp	r3, r2
 80127ea:	d004      	beq.n	80127f6 <HAL_XSPI_SetDelayValue+0x22>
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	4a35      	ldr	r2, [pc, #212]	; (80128c8 <HAL_XSPI_SetDelayValue+0xf4>)
 80127f2:	4293      	cmp	r3, r2
 80127f4:	d159      	bne.n	80128aa <HAL_XSPI_SetDelayValue+0xd6>
    assert_param(IS_XSPI_DELAY_TYPE(pCfg->DelayValueType));
    assert_param(IS_XSPI_FINECAL_VALUE(pCfg->FineCalibrationUnit));
    assert_param(IS_XSPI_COARSECAL_VALUE(pCfg->CoarseCalibrationUnit));

    /* Check if the state isn't in one of the busy states */
    if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127fa:	f003 0308 	and.w	r3, r3, #8
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d14c      	bne.n	801289c <HAL_XSPI_SetDelayValue+0xc8>
    {
      switch (pCfg->DelayValueType)
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	2b03      	cmp	r3, #3
 8012808:	d02e      	beq.n	8012868 <HAL_XSPI_SetDelayValue+0x94>
 801280a:	2b03      	cmp	r3, #3
 801280c:	d840      	bhi.n	8012890 <HAL_XSPI_SetDelayValue+0xbc>
 801280e:	2b01      	cmp	r3, #1
 8012810:	d002      	beq.n	8012818 <HAL_XSPI_SetDelayValue+0x44>
 8012812:	2b02      	cmp	r3, #2
 8012814:	d014      	beq.n	8012840 <HAL_XSPI_SetDelayValue+0x6c>
 8012816:	e03b      	b.n	8012890 <HAL_XSPI_SetDelayValue+0xbc>
      {
        case HAL_XSPI_CAL_FEEDBACK_CLK_DELAY:
          MODIFY_REG(hxspi->Instance->CALMR, (HSPI_CALMR_COARSE |  HSPI_CALMR_FINE),
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012820:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8012824:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012828:	683a      	ldr	r2, [r7, #0]
 801282a:	6851      	ldr	r1, [r2, #4]
 801282c:	683a      	ldr	r2, [r7, #0]
 801282e:	6892      	ldr	r2, [r2, #8]
 8012830:	0412      	lsls	r2, r2, #16
 8012832:	4311      	orrs	r1, r2
 8012834:	687a      	ldr	r2, [r7, #4]
 8012836:	6812      	ldr	r2, [r2, #0]
 8012838:	430b      	orrs	r3, r1
 801283a:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALMR_COARSE_Pos)));
          break;
 801283e:	e033      	b.n	80128a8 <HAL_XSPI_SetDelayValue+0xd4>
        case HAL_XSPI_CAL_DATA_OUTPUT_DELAY:
          MODIFY_REG(hxspi->Instance->CALSOR, (HSPI_CALSOR_COARSE | HSPI_CALSOR_FINE),
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8012848:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801284c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012850:	683a      	ldr	r2, [r7, #0]
 8012852:	6851      	ldr	r1, [r2, #4]
 8012854:	683a      	ldr	r2, [r7, #0]
 8012856:	6892      	ldr	r2, [r2, #8]
 8012858:	0412      	lsls	r2, r2, #16
 801285a:	4311      	orrs	r1, r2
 801285c:	687a      	ldr	r2, [r7, #4]
 801285e:	6812      	ldr	r2, [r2, #0]
 8012860:	430b      	orrs	r3, r1
 8012862:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALSOR_COARSE_Pos)));
          break;
 8012866:	e01f      	b.n	80128a8 <HAL_XSPI_SetDelayValue+0xd4>
        case HAL_XSPI_CAL_DQS_INPUT_DELAY:
          MODIFY_REG(hxspi->Instance->CALSIR, (HSPI_CALSIR_COARSE | HSPI_CALSIR_FINE),
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8012870:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8012874:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012878:	683a      	ldr	r2, [r7, #0]
 801287a:	6851      	ldr	r1, [r2, #4]
 801287c:	683a      	ldr	r2, [r7, #0]
 801287e:	6892      	ldr	r2, [r2, #8]
 8012880:	0412      	lsls	r2, r2, #16
 8012882:	4311      	orrs	r1, r2
 8012884:	687a      	ldr	r2, [r7, #4]
 8012886:	6812      	ldr	r2, [r2, #0]
 8012888:	430b      	orrs	r3, r1
 801288a:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALSIR_COARSE_Pos)));
          break;
 801288e:	e00b      	b.n	80128a8 <HAL_XSPI_SetDelayValue+0xd4>
        default:
          status = HAL_ERROR;
 8012890:	2301      	movs	r3, #1
 8012892:	73fb      	strb	r3, [r7, #15]
          hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2208      	movs	r2, #8
 8012898:	659a      	str	r2, [r3, #88]	; 0x58
          break;
 801289a:	e005      	b.n	80128a8 <HAL_XSPI_SetDelayValue+0xd4>
      }
    }
    else
    {
      status = HAL_ERROR;
 801289c:	2301      	movs	r3, #1
 801289e:	73fb      	strb	r3, [r7, #15]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2210      	movs	r2, #16
 80128a4:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
 80128a6:	e005      	b.n	80128b4 <HAL_XSPI_SetDelayValue+0xe0>
 80128a8:	e004      	b.n	80128b4 <HAL_XSPI_SetDelayValue+0xe0>
    }
  }
  else
  {
    status = HAL_ERROR;
 80128aa:	2301      	movs	r3, #1
 80128ac:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2208      	movs	r2, #8
 80128b2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 80128b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	3714      	adds	r7, #20
 80128ba:	46bd      	mov	sp, r7
 80128bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c0:	4770      	bx	lr
 80128c2:	bf00      	nop
 80128c4:	420d3400 	.word	0x420d3400
 80128c8:	520d3400 	.word	0x520d3400

080128cc <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b084      	sub	sp, #16
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	60f8      	str	r0, [r7, #12]
 80128d4:	60b9      	str	r1, [r7, #8]
 80128d6:	603b      	str	r3, [r7, #0]
 80128d8:	4613      	mov	r3, r2
 80128da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80128dc:	e01a      	b.n	8012914 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80128de:	69bb      	ldr	r3, [r7, #24]
 80128e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128e4:	d016      	beq.n	8012914 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80128e6:	f7f4 fd49 	bl	800737c <HAL_GetTick>
 80128ea:	4602      	mov	r2, r0
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	1ad3      	subs	r3, r2, r3
 80128f0:	69ba      	ldr	r2, [r7, #24]
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d302      	bcc.n	80128fc <XSPI_WaitFlagStateUntilTimeout+0x30>
 80128f6:	69bb      	ldr	r3, [r7, #24]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d10b      	bne.n	8012914 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012902:	655a      	str	r2, [r3, #84]	; 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012908:	f043 0201 	orr.w	r2, r3, #1
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8012910:	2303      	movs	r3, #3
 8012912:	e00e      	b.n	8012932 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	6a1a      	ldr	r2, [r3, #32]
 801291a:	68bb      	ldr	r3, [r7, #8]
 801291c:	4013      	ands	r3, r2
 801291e:	2b00      	cmp	r3, #0
 8012920:	bf14      	ite	ne
 8012922:	2301      	movne	r3, #1
 8012924:	2300      	moveq	r3, #0
 8012926:	b2db      	uxtb	r3, r3
 8012928:	461a      	mov	r2, r3
 801292a:	79fb      	ldrb	r3, [r7, #7]
 801292c:	429a      	cmp	r2, r3
 801292e:	d1d6      	bne.n	80128de <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012930:	2300      	movs	r3, #0
}
 8012932:	4618      	mov	r0, r3
 8012934:	3710      	adds	r7, #16
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}
	...

0801293c <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 801293c:	b480      	push	{r7}
 801293e:	b089      	sub	sp, #36	; 0x24
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012946:	2300      	movs	r3, #0
 8012948:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	681a      	ldr	r2, [r3, #0]
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8012958:	601a      	str	r2, [r3, #0]

  if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	4a8f      	ldr	r2, [pc, #572]	; (8012b9c <XSPI_ConfigCmd+0x260>)
 8012960:	4293      	cmp	r3, r2
 8012962:	d00e      	beq.n	8012982 <XSPI_ConfigCmd+0x46>
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	4a8d      	ldr	r2, [pc, #564]	; (8012ba0 <XSPI_ConfigCmd+0x264>)
 801296a:	4293      	cmp	r3, r2
 801296c:	d009      	beq.n	8012982 <XSPI_ConfigCmd+0x46>
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	4a8c      	ldr	r2, [pc, #560]	; (8012ba4 <XSPI_ConfigCmd+0x268>)
 8012974:	4293      	cmp	r3, r2
 8012976:	d004      	beq.n	8012982 <XSPI_ConfigCmd+0x46>
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	4a8a      	ldr	r2, [pc, #552]	; (8012ba8 <XSPI_ConfigCmd+0x26c>)
 801297e:	4293      	cmp	r3, r2
 8012980:	d10f      	bne.n	80129a2 <XSPI_ConfigCmd+0x66>
  {
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	689b      	ldr	r3, [r3, #8]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d12d      	bne.n	80129e6 <XSPI_ConfigCmd+0xaa>
    {
      assert_param(IS_OCTOSPI_IO_SELECT(pCmd->IOSelect));
      MODIFY_REG(hxspi->Instance->CR, OCTOSPI_CR_MSEL, pCmd->IOSelect);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	685a      	ldr	r2, [r3, #4]
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	430a      	orrs	r2, r1
 801299e:	601a      	str	r2, [r3, #0]
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 80129a0:	e021      	b.n	80129e6 <XSPI_ConfigCmd+0xaa>
    }
  }
#if defined(HSPI1)
  else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	4a81      	ldr	r2, [pc, #516]	; (8012bac <XSPI_ConfigCmd+0x270>)
 80129a8:	4293      	cmp	r3, r2
 80129aa:	d004      	beq.n	80129b6 <XSPI_ConfigCmd+0x7a>
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	4a7f      	ldr	r2, [pc, #508]	; (8012bb0 <XSPI_ConfigCmd+0x274>)
 80129b2:	4293      	cmp	r3, r2
 80129b4:	d10f      	bne.n	80129d6 <XSPI_ConfigCmd+0x9a>
  {
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	689b      	ldr	r3, [r3, #8]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d113      	bne.n	80129e6 <XSPI_ConfigCmd+0xaa>
    {
      assert_param(IS_HSPI_IO_SELECT(pCmd->IOSelect));
      MODIFY_REG(hxspi->Instance->CR, HSPI_CR_MSEL, pCmd->IOSelect);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	685a      	ldr	r2, [r3, #4]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	430a      	orrs	r2, r1
 80129d2:	601a      	str	r2, [r3, #0]
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 80129d4:	e007      	b.n	80129e6 <XSPI_ConfigCmd+0xaa>
    }
  }
#endif /* HSPI1 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129da:	f043 0208 	orr.w	r2, r3, #8
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	659a      	str	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 80129e2:	2301      	movs	r3, #1
 80129e4:	e162      	b.n	8012cac <XSPI_ConfigCmd+0x370>
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	2b02      	cmp	r3, #2
 80129ec:	d114      	bne.n	8012a18 <XSPI_ConfigCmd+0xdc>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80129f6:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8012a00:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8012a0a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8012a14:	60fb      	str	r3, [r7, #12]
 8012a16:	e02c      	b.n	8012a72 <XSPI_ConfigCmd+0x136>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	2b03      	cmp	r3, #3
 8012a1e:	d114      	bne.n	8012a4a <XSPI_ConfigCmd+0x10e>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012a28:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8012a32:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012a3c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8012a46:	60fb      	str	r3, [r7, #12]
 8012a48:	e013      	b.n	8012a72 <XSPI_ConfigCmd+0x136>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012a52:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8012a5c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8012a66:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012a70:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (pCmd->DQSMode | pCmd->SIOOMode);
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a7a:	431a      	orrs	r2, r3
 8012a7c:	69bb      	ldr	r3, [r7, #24]
 8012a7e:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d012      	beq.n	8012aae <XSPI_ConfigCmd+0x172>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 8012a90:	69bb      	ldr	r3, [r7, #24]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012aa0:	4319      	orrs	r1, r3
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012aa6:	430b      	orrs	r3, r1
 8012aa8:	431a      	orrs	r2, r3
 8012aaa:	69bb      	ldr	r3, [r7, #24]
 8012aac:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	f023 021f 	bic.w	r2, r3, #31
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012aba:	431a      	orrs	r2, r3
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8012ac0:	683b      	ldr	r3, [r7, #0]
 8012ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d009      	beq.n	8012adc <XSPI_ConfigCmd+0x1a0>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d105      	bne.n	8012adc <XSPI_ConfigCmd+0x1a0>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 8012ad0:	683b      	ldr	r3, [r7, #0]
 8012ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	3a01      	subs	r2, #1
 8012ada:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	68db      	ldr	r3, [r3, #12]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	f000 80a8 	beq.w	8012c36 <XSPI_ConfigCmd+0x2fa>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	69db      	ldr	r3, [r3, #28]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d064      	beq.n	8012bb8 <XSPI_ConfigCmd+0x27c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d01e      	beq.n	8012b34 <XSPI_ConfigCmd+0x1f8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8012af6:	69bb      	ldr	r3, [r7, #24]
 8012af8:	681a      	ldr	r2, [r3, #0]
 8012afa:	4b2e      	ldr	r3, [pc, #184]	; (8012bb4 <XSPI_ConfigCmd+0x278>)
 8012afc:	4013      	ands	r3, r2
 8012afe:	683a      	ldr	r2, [r7, #0]
 8012b00:	68d1      	ldr	r1, [r2, #12]
 8012b02:	683a      	ldr	r2, [r7, #0]
 8012b04:	6952      	ldr	r2, [r2, #20]
 8012b06:	4311      	orrs	r1, r2
 8012b08:	683a      	ldr	r2, [r7, #0]
 8012b0a:	6912      	ldr	r2, [r2, #16]
 8012b0c:	4311      	orrs	r1, r2
 8012b0e:	683a      	ldr	r2, [r7, #0]
 8012b10:	69d2      	ldr	r2, [r2, #28]
 8012b12:	4311      	orrs	r1, r2
 8012b14:	683a      	ldr	r2, [r7, #0]
 8012b16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012b18:	4311      	orrs	r1, r2
 8012b1a:	683a      	ldr	r2, [r7, #0]
 8012b1c:	6a12      	ldr	r2, [r2, #32]
 8012b1e:	4311      	orrs	r1, r2
 8012b20:	683a      	ldr	r2, [r7, #0]
 8012b22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012b24:	4311      	orrs	r1, r2
 8012b26:	683a      	ldr	r2, [r7, #0]
 8012b28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012b2a:	430a      	orrs	r2, r1
 8012b2c:	431a      	orrs	r2, r3
 8012b2e:	69bb      	ldr	r3, [r7, #24]
 8012b30:	601a      	str	r2, [r3, #0]
 8012b32:	e028      	b.n	8012b86 <XSPI_ConfigCmd+0x24a>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8012b34:	69bb      	ldr	r3, [r7, #24]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012b3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012b40:	683a      	ldr	r2, [r7, #0]
 8012b42:	68d1      	ldr	r1, [r2, #12]
 8012b44:	683a      	ldr	r2, [r7, #0]
 8012b46:	6952      	ldr	r2, [r2, #20]
 8012b48:	4311      	orrs	r1, r2
 8012b4a:	683a      	ldr	r2, [r7, #0]
 8012b4c:	6912      	ldr	r2, [r2, #16]
 8012b4e:	4311      	orrs	r1, r2
 8012b50:	683a      	ldr	r2, [r7, #0]
 8012b52:	69d2      	ldr	r2, [r2, #28]
 8012b54:	4311      	orrs	r1, r2
 8012b56:	683a      	ldr	r2, [r7, #0]
 8012b58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012b5a:	4311      	orrs	r1, r2
 8012b5c:	683a      	ldr	r2, [r7, #0]
 8012b5e:	6a12      	ldr	r2, [r2, #32]
 8012b60:	430a      	orrs	r2, r1
 8012b62:	431a      	orrs	r2, r3
 8012b64:	69bb      	ldr	r3, [r7, #24]
 8012b66:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012b70:	d109      	bne.n	8012b86 <XSPI_ConfigCmd+0x24a>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8012b76:	2b08      	cmp	r3, #8
 8012b78:	d105      	bne.n	8012b86 <XSPI_ConfigCmd+0x24a>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8012b82:	69bb      	ldr	r3, [r7, #24]
 8012b84:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	689a      	ldr	r2, [r3, #8]
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	683a      	ldr	r2, [r7, #0]
 8012b94:	6992      	ldr	r2, [r2, #24]
 8012b96:	649a      	str	r2, [r3, #72]	; 0x48
 8012b98:	e087      	b.n	8012caa <XSPI_ConfigCmd+0x36e>
 8012b9a:	bf00      	nop
 8012b9c:	420d1400 	.word	0x420d1400
 8012ba0:	520d1400 	.word	0x520d1400
 8012ba4:	420d2400 	.word	0x420d2400
 8012ba8:	520d2400 	.word	0x520d2400
 8012bac:	420d3400 	.word	0x420d3400
 8012bb0:	520d3400 	.word	0x520d3400
 8012bb4:	f0ffc0c0 	.word	0xf0ffc0c0
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d017      	beq.n	8012bf0 <XSPI_ConfigCmd+0x2b4>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 8012bc0:	69bb      	ldr	r3, [r7, #24]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8012bc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012bcc:	683a      	ldr	r2, [r7, #0]
 8012bce:	68d1      	ldr	r1, [r2, #12]
 8012bd0:	683a      	ldr	r2, [r7, #0]
 8012bd2:	6952      	ldr	r2, [r2, #20]
 8012bd4:	4311      	orrs	r1, r2
 8012bd6:	683a      	ldr	r2, [r7, #0]
 8012bd8:	6912      	ldr	r2, [r2, #16]
 8012bda:	4311      	orrs	r1, r2
 8012bdc:	683a      	ldr	r2, [r7, #0]
 8012bde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012be0:	4311      	orrs	r1, r2
 8012be2:	683a      	ldr	r2, [r7, #0]
 8012be4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012be6:	430a      	orrs	r2, r1
 8012be8:	431a      	orrs	r2, r3
 8012bea:	69bb      	ldr	r3, [r7, #24]
 8012bec:	601a      	str	r2, [r3, #0]
 8012bee:	e01d      	b.n	8012c2c <XSPI_ConfigCmd+0x2f0>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 8012bf0:	69bb      	ldr	r3, [r7, #24]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8012bf8:	683b      	ldr	r3, [r7, #0]
 8012bfa:	68d9      	ldr	r1, [r3, #12]
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	695b      	ldr	r3, [r3, #20]
 8012c00:	4319      	orrs	r1, r3
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	691b      	ldr	r3, [r3, #16]
 8012c06:	430b      	orrs	r3, r1
 8012c08:	431a      	orrs	r2, r3
 8012c0a:	69bb      	ldr	r3, [r7, #24]
 8012c0c:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012c16:	d109      	bne.n	8012c2c <XSPI_ConfigCmd+0x2f0>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8012c1c:	2b08      	cmp	r3, #8
 8012c1e:	d105      	bne.n	8012c2c <XSPI_ConfigCmd+0x2f0>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8012c20:	69bb      	ldr	r3, [r7, #24]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8012c28:	69bb      	ldr	r3, [r7, #24]
 8012c2a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	689a      	ldr	r2, [r3, #8]
 8012c30:	693b      	ldr	r3, [r7, #16]
 8012c32:	601a      	str	r2, [r3, #0]
 8012c34:	e039      	b.n	8012caa <XSPI_ConfigCmd+0x36e>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	69db      	ldr	r3, [r3, #28]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d030      	beq.n	8012ca0 <XSPI_ConfigCmd+0x364>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8012c3e:	683b      	ldr	r3, [r7, #0]
 8012c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d017      	beq.n	8012c76 <XSPI_ConfigCmd+0x33a>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 8012c46:	69bb      	ldr	r3, [r7, #24]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8012c4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012c52:	683a      	ldr	r2, [r7, #0]
 8012c54:	69d1      	ldr	r1, [r2, #28]
 8012c56:	683a      	ldr	r2, [r7, #0]
 8012c58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012c5a:	4311      	orrs	r1, r2
 8012c5c:	683a      	ldr	r2, [r7, #0]
 8012c5e:	6a12      	ldr	r2, [r2, #32]
 8012c60:	4311      	orrs	r1, r2
 8012c62:	683a      	ldr	r2, [r7, #0]
 8012c64:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012c66:	4311      	orrs	r1, r2
 8012c68:	683a      	ldr	r2, [r7, #0]
 8012c6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012c6c:	430a      	orrs	r2, r1
 8012c6e:	431a      	orrs	r2, r3
 8012c70:	69bb      	ldr	r3, [r7, #24]
 8012c72:	601a      	str	r2, [r3, #0]
 8012c74:	e00e      	b.n	8012c94 <XSPI_ConfigCmd+0x358>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 8012c76:	69bb      	ldr	r3, [r7, #24]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	69d9      	ldr	r1, [r3, #28]
 8012c82:	683b      	ldr	r3, [r7, #0]
 8012c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c86:	4319      	orrs	r1, r3
 8012c88:	683b      	ldr	r3, [r7, #0]
 8012c8a:	6a1b      	ldr	r3, [r3, #32]
 8012c8c:	430b      	orrs	r3, r1
 8012c8e:	431a      	orrs	r2, r3
 8012c90:	69bb      	ldr	r3, [r7, #24]
 8012c92:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	683a      	ldr	r2, [r7, #0]
 8012c9a:	6992      	ldr	r2, [r2, #24]
 8012c9c:	649a      	str	r2, [r3, #72]	; 0x48
 8012c9e:	e004      	b.n	8012caa <XSPI_ConfigCmd+0x36e>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2208      	movs	r2, #8
 8012ca8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 8012caa:	7ffb      	ldrb	r3, [r7, #31]
}
 8012cac:	4618      	mov	r0, r3
 8012cae:	3724      	adds	r7, #36	; 0x24
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb6:	4770      	bx	lr

08012cb8 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8012cb8:	b480      	push	{r7}
 8012cba:	b083      	sub	sp, #12
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	f043 0202 	orr.w	r2, r3, #2
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	685a      	ldr	r2, [r3, #4]
 8012cd2:	683b      	ldr	r3, [r7, #0]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	021b      	lsls	r3, r3, #8
 8012cd8:	431a      	orrs	r2, r3
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	f023 0202 	bic.w	r2, r3, #2
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	601a      	str	r2, [r3, #0]
}
 8012cea:	bf00      	nop
 8012cec:	370c      	adds	r7, #12
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf4:	4770      	bx	lr

08012cf6 <LL_DLYB_GetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is received.
  *          - ERROR: the Delay value is not received.
  */
void LL_DLYB_GetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 8012cf6:	b480      	push	{r7}
 8012cf8:	b083      	sub	sp, #12
 8012cfa:	af00      	add	r7, sp, #0
 8012cfc:	6078      	str	r0, [r7, #4]
 8012cfe:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Fill the DelayBlock configuration structure with SEL and UNIT value */
  pdlyb_cfg->Units = ((DLYBx->CFGR & DLYB_CFGR_UNIT) >> DLYB_CFGR_UNIT_Pos);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	685b      	ldr	r3, [r3, #4]
 8012d04:	0a1b      	lsrs	r3, r3, #8
 8012d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	601a      	str	r2, [r3, #0]
  pdlyb_cfg->PhaseSel = (DLYBx->CFGR & DLYB_CFGR_SEL);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	f003 020f 	and.w	r2, r3, #15
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	605a      	str	r2, [r3, #4]
}
 8012d1a:	bf00      	nop
 8012d1c:	370c      	adds	r7, #12
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d24:	4770      	bx	lr
	...

08012d28 <LL_DLYB_GetClockPeriod>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: there is a valid period detected and stored in pdlyb_cfg.
  *          - ERROR: there is no valid period detected.
  */
uint32_t LL_DLYB_GetClockPeriod(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b086      	sub	sp, #24
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
 8012d30:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8012d32:	2300      	movs	r3, #0
 8012d34:	617b      	str	r3, [r7, #20]

  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	f043 0202 	orr.w	r2, r3, #2
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	601a      	str	r2, [r3, #0]

  /* Delay line length detection */
  while (i < DLYB_MAX_UNIT)
 8012d42:	e02a      	b.n	8012d9a <LL_DLYB_GetClockPeriod+0x72>
  {
    /* Set the Delay of the UNIT(s)*/
    DLYBx->CFGR = DLYB_MAX_SELECT | (i << DLYB_CFGR_UNIT_Pos);
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	021b      	lsls	r3, r3, #8
 8012d48:	f043 020c 	orr.w	r2, r3, #12
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	605a      	str	r2, [r3, #4]

    /* Waiting for a LNG valid value */
    tickstart =  HAL_GetTick();
 8012d50:	f7f4 fb14 	bl	800737c <HAL_GetTick>
 8012d54:	60f8      	str	r0, [r7, #12]
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8012d56:	e00c      	b.n	8012d72 <LL_DLYB_GetClockPeriod+0x4a>
    {
      if ((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 8012d58:	f7f4 fb10 	bl	800737c <HAL_GetTick>
 8012d5c:	4602      	mov	r2, r0
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	1ad3      	subs	r3, r2, r3
 8012d62:	2bfe      	cmp	r3, #254	; 0xfe
 8012d64:	d905      	bls.n	8012d72 <LL_DLYB_GetClockPeriod+0x4a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	685b      	ldr	r3, [r3, #4]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	db01      	blt.n	8012d72 <LL_DLYB_GetClockPeriod+0x4a>
        {
          return (uint32_t) HAL_TIMEOUT;
 8012d6e:	2303      	movs	r3, #3
 8012d70:	e042      	b.n	8012df8 <LL_DLYB_GetClockPeriod+0xd0>
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	685b      	ldr	r3, [r3, #4]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	daee      	bge.n	8012d58 <LL_DLYB_GetClockPeriod+0x30>
        }
      }
    }

    if ((DLYBx->CFGR & DLYB_LNG_10_0_MASK) != 0U)
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	685a      	ldr	r2, [r3, #4]
 8012d7e:	4b20      	ldr	r3, [pc, #128]	; (8012e00 <LL_DLYB_GetClockPeriod+0xd8>)
 8012d80:	4013      	ands	r3, r2
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d006      	beq.n	8012d94 <LL_DLYB_GetClockPeriod+0x6c>
    {
      if ((DLYBx->CFGR & (DLYB_CFGR_LNG_11 | DLYB_CFGR_LNG_10)) != DLYB_LNG_11_10_MASK)
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	685b      	ldr	r3, [r3, #4]
 8012d8a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8012d8e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8012d92:	d106      	bne.n	8012da2 <LL_DLYB_GetClockPeriod+0x7a>
      {
        /* Delay line length is configured to one input clock period*/
        break;
      }
    }
    i++;
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	3301      	adds	r3, #1
 8012d98:	617b      	str	r3, [r7, #20]
  while (i < DLYB_MAX_UNIT)
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8012d9e:	d9d1      	bls.n	8012d44 <LL_DLYB_GetClockPeriod+0x1c>
 8012da0:	e000      	b.n	8012da4 <LL_DLYB_GetClockPeriod+0x7c>
        break;
 8012da2:	bf00      	nop
  }

  if (DLYB_MAX_UNIT != i)
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	2b80      	cmp	r3, #128	; 0x80
 8012da8:	d022      	beq.n	8012df0 <LL_DLYB_GetClockPeriod+0xc8>
  {
    /* Determine how many unit delays (nb) span one input clock period */
    lng = (DLYBx->CFGR & DLYB_CFGR_LNG) >> 16U;
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	685b      	ldr	r3, [r3, #4]
 8012dae:	0c1b      	lsrs	r3, r3, #16
 8012db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012db4:	60bb      	str	r3, [r7, #8]
    nb = 10U;
 8012db6:	230a      	movs	r3, #10
 8012db8:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 8012dba:	e002      	b.n	8012dc2 <LL_DLYB_GetClockPeriod+0x9a>
    {
      nb--;
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	3b01      	subs	r3, #1
 8012dc0:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d005      	beq.n	8012dd4 <LL_DLYB_GetClockPeriod+0xac>
 8012dc8:	68ba      	ldr	r2, [r7, #8]
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d0f3      	beq.n	8012dbc <LL_DLYB_GetClockPeriod+0x94>
    }
    if (nb != 0U)
 8012dd4:	693b      	ldr	r3, [r7, #16]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d00a      	beq.n	8012df0 <LL_DLYB_GetClockPeriod+0xc8>
    {
      pdlyb_cfg->PhaseSel = nb ;
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	693a      	ldr	r2, [r7, #16]
 8012dde:	605a      	str	r2, [r3, #4]
      pdlyb_cfg->Units = i ;
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	697a      	ldr	r2, [r7, #20]
 8012de4:	601a      	str	r2, [r3, #0]

      /* Disable the length sampling */
      DLYBx->CR = DLYB_CR_SEN;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	2202      	movs	r2, #2
 8012dea:	601a      	str	r2, [r3, #0]

      return (uint32_t)SUCCESS;
 8012dec:	2300      	movs	r3, #0
 8012dee:	e003      	b.n	8012df8 <LL_DLYB_GetClockPeriod+0xd0>
    }
  }

  /* Disable the length sampling */
  DLYBx->CR = DLYB_CR_SEN;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2202      	movs	r2, #2
 8012df4:	601a      	str	r2, [r3, #0]

  return (uint32_t)ERROR;
 8012df6:	2301      	movs	r3, #1

}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	3718      	adds	r7, #24
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}
 8012e00:	07ff0000 	.word	0x07ff0000

08012e04 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b096      	sub	sp, #88	; 0x58
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	60f8      	str	r0, [r7, #12]
 8012e0c:	60b9      	str	r1, [r7, #8]
 8012e0e:	607a      	str	r2, [r7, #4]
 8012e10:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	3303      	adds	r3, #3
 8012e16:	f023 0303 	bic.w	r3, r3, #3
 8012e1a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8012e20:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8012e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8012e24:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8012e26:	b672      	cpsid	i
#endif
    return(int_posture);
 8012e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8012e2a:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012e2c:	4b55      	ldr	r3, [pc, #340]	; (8012f84 <_tx_byte_allocate+0x180>)
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8012e32:	2300      	movs	r3, #0
 8012e34:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e3a:	621a      	str	r2, [r3, #32]
 8012e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e3e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e42:	f383 8810 	msr	PRIMASK, r3
}
 8012e46:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8012e48:	6879      	ldr	r1, [r7, #4]
 8012e4a:	68f8      	ldr	r0, [r7, #12]
 8012e4c:	f000 f9b2 	bl	80131b4 <_tx_byte_pool_search>
 8012e50:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e52:	f3ef 8310 	mrs	r3, PRIMASK
 8012e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8012e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8012e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8012e5c:	b672      	cpsid	i
    return(int_posture);
 8012e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8012e60:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8012e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d002      	beq.n	8012e6e <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8012e68:	2301      	movs	r3, #1
 8012e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e6c:	e006      	b.n	8012e7c <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	6a1b      	ldr	r3, [r3, #32]
 8012e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e74:	429a      	cmp	r2, r3
 8012e76:	d101      	bne.n	8012e7c <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8012e78:	2301      	movs	r3, #1
 8012e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8012e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d0d9      	beq.n	8012e36 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012e86:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8012e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d008      	beq.n	8012ea0 <_tx_byte_allocate+0x9c>
 8012e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e90:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e92:	6a3b      	ldr	r3, [r7, #32]
 8012e94:	f383 8810 	msr	PRIMASK, r3
}
 8012e98:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	653b      	str	r3, [r7, #80]	; 0x50
 8012e9e:	e06c      	b.n	8012f7a <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d061      	beq.n	8012f6a <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8012ea6:	4b38      	ldr	r3, [pc, #224]	; (8012f88 <_tx_byte_allocate+0x184>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d007      	beq.n	8012ebe <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8012eae:	2310      	movs	r3, #16
 8012eb0:	653b      	str	r3, [r7, #80]	; 0x50
 8012eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012eb4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012eb6:	69fb      	ldr	r3, [r7, #28]
 8012eb8:	f383 8810 	msr	PRIMASK, r3
}
 8012ebc:	e05d      	b.n	8012f7a <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8012ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ec0:	4a32      	ldr	r2, [pc, #200]	; (8012f8c <_tx_byte_allocate+0x188>)
 8012ec2:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8012ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ec6:	68fa      	ldr	r2, [r7, #12]
 8012ec8:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8012eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ecc:	68ba      	ldr	r2, [r7, #8]
 8012ece:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8012ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ed2:	687a      	ldr	r2, [r7, #4]
 8012ed4:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8012ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ed8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012edc:	1c5a      	adds	r2, r3, #1
 8012ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ee0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ee8:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012eee:	1c5a      	adds	r2, r3, #1
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8012ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d109      	bne.n	8012f0e <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012efe:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8012f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f04:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8012f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f0a:	675a      	str	r2, [r3, #116]	; 0x74
 8012f0c:	e011      	b.n	8012f32 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f12:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8012f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012f18:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8012f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f1e:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8012f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f24:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8012f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f2a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8012f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f30:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8012f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f34:	2209      	movs	r2, #9
 8012f36:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f3a:	2201      	movs	r2, #1
 8012f3c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8012f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f40:	683a      	ldr	r2, [r7, #0]
 8012f42:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8012f44:	4b10      	ldr	r3, [pc, #64]	; (8012f88 <_tx_byte_allocate+0x184>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	3301      	adds	r3, #1
 8012f4a:	4a0f      	ldr	r2, [pc, #60]	; (8012f88 <_tx_byte_allocate+0x184>)
 8012f4c:	6013      	str	r3, [r2, #0]
 8012f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f50:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f52:	69bb      	ldr	r3, [r7, #24]
 8012f54:	f383 8810 	msr	PRIMASK, r3
}
 8012f58:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8012f5a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8012f5c:	f001 fb02 	bl	8014564 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8012f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f66:	653b      	str	r3, [r7, #80]	; 0x50
 8012f68:	e007      	b.n	8012f7a <_tx_byte_allocate+0x176>
 8012f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f6c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f6e:	697b      	ldr	r3, [r7, #20]
 8012f70:	f383 8810 	msr	PRIMASK, r3
}
 8012f74:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8012f76:	2310      	movs	r3, #16
 8012f78:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8012f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3758      	adds	r7, #88	; 0x58
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}
 8012f84:	20197b44 	.word	0x20197b44
 8012f88:	20197bdc 	.word	0x20197bdc
 8012f8c:	08012f91 	.word	0x08012f91

08012f90 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b08e      	sub	sp, #56	; 0x38
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8012f9e:	623b      	str	r3, [r7, #32]
    return(posture);
 8012fa0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012fa2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012fa4:	b672      	cpsid	i
    return(int_posture);
 8012fa6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8012fa8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012fae:	4a33      	ldr	r2, [pc, #204]	; (801307c <_tx_byte_pool_cleanup+0xec>)
 8012fb0:	4293      	cmp	r3, r2
 8012fb2:	d158      	bne.n	8013066 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012fba:	683a      	ldr	r2, [r7, #0]
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d152      	bne.n	8013066 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fc4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8012fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d04c      	beq.n	8013066 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8012fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	4a2b      	ldr	r2, [pc, #172]	; (8013080 <_tx_byte_pool_cleanup+0xf0>)
 8012fd2:	4293      	cmp	r3, r2
 8012fd4:	d147      	bne.n	8013066 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8012fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d043      	beq.n	8013066 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8012fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fe8:	1e5a      	subs	r2, r3, #1
 8012fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fec:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8012fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ff2:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8012ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d103      	bne.n	8013002 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8012ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	625a      	str	r2, [r3, #36]	; 0x24
 8013000:	e013      	b.n	801302a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013006:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801300c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013012:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013018:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 801301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801301e:	687a      	ldr	r2, [r7, #4]
 8013020:	429a      	cmp	r2, r3
 8013022:	d102      	bne.n	801302a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8013024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013028:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801302e:	2b09      	cmp	r3, #9
 8013030:	d119      	bne.n	8013066 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2210      	movs	r2, #16
 8013036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801303a:	4b12      	ldr	r3, [pc, #72]	; (8013084 <_tx_byte_pool_cleanup+0xf4>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	3301      	adds	r3, #1
 8013040:	4a10      	ldr	r2, [pc, #64]	; (8013084 <_tx_byte_pool_cleanup+0xf4>)
 8013042:	6013      	str	r3, [r2, #0]
 8013044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013046:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013048:	693b      	ldr	r3, [r7, #16]
 801304a:	f383 8810 	msr	PRIMASK, r3
}
 801304e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	f001 f987 	bl	8014364 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013056:	f3ef 8310 	mrs	r3, PRIMASK
 801305a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801305c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801305e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013060:	b672      	cpsid	i
    return(int_posture);
 8013062:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8013064:	637b      	str	r3, [r7, #52]	; 0x34
 8013066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013068:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	f383 8810 	msr	PRIMASK, r3
}
 8013070:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8013072:	bf00      	nop
 8013074:	3738      	adds	r7, #56	; 0x38
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}
 801307a:	bf00      	nop
 801307c:	08012f91 	.word	0x08012f91
 8013080:	42595445 	.word	0x42595445
 8013084:	20197bdc 	.word	0x20197bdc

08013088 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b08e      	sub	sp, #56	; 0x38
 801308c:	af00      	add	r7, sp, #0
 801308e:	60f8      	str	r0, [r7, #12]
 8013090:	60b9      	str	r1, [r7, #8]
 8013092:	607a      	str	r2, [r7, #4]
 8013094:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8013096:	2234      	movs	r2, #52	; 0x34
 8013098:	2100      	movs	r1, #0
 801309a:	68f8      	ldr	r0, [r7, #12]
 801309c:	f015 f891 	bl	80281c2 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	f023 0303 	bic.w	r3, r3, #3
 80130a6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	68ba      	ldr	r2, [r7, #8]
 80130ac:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	687a      	ldr	r2, [r7, #4]
 80130b2:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	683a      	ldr	r2, [r7, #0]
 80130b8:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	687a      	ldr	r2, [r7, #4]
 80130be:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	687a      	ldr	r2, [r7, #4]
 80130c4:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	f1a3 0208 	sub.w	r2, r3, #8
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	2202      	movs	r2, #2
 80130d4:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80130da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	4413      	add	r3, r2
 80130e0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80130e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130e4:	3b04      	subs	r3, #4
 80130e6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80130ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 80130f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130f4:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 80130f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130f8:	3b04      	subs	r3, #4
 80130fa:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80130fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8013100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013102:	687a      	ldr	r2, [r7, #4]
 8013104:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 801310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801310c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 801310e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013110:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013112:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8013118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801311a:	3304      	adds	r3, #4
 801311c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 801311e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013120:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8013122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013124:	4a1f      	ldr	r2, [pc, #124]	; (80131a4 <_tx_byte_pool_create+0x11c>)
 8013126:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	2200      	movs	r2, #0
 801312c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801312e:	f3ef 8310 	mrs	r3, PRIMASK
 8013132:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013134:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013136:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013138:	b672      	cpsid	i
    return(int_posture);
 801313a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 801313c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	4a19      	ldr	r2, [pc, #100]	; (80131a8 <_tx_byte_pool_create+0x120>)
 8013142:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8013144:	4b19      	ldr	r3, [pc, #100]	; (80131ac <_tx_byte_pool_create+0x124>)
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d109      	bne.n	8013160 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 801314c:	4a18      	ldr	r2, [pc, #96]	; (80131b0 <_tx_byte_pool_create+0x128>)
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	68fa      	ldr	r2, [r7, #12]
 8013156:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	68fa      	ldr	r2, [r7, #12]
 801315c:	631a      	str	r2, [r3, #48]	; 0x30
 801315e:	e011      	b.n	8013184 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8013160:	4b13      	ldr	r3, [pc, #76]	; (80131b0 <_tx_byte_pool_create+0x128>)
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8013166:	6a3b      	ldr	r3, [r7, #32]
 8013168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801316a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 801316c:	6a3b      	ldr	r3, [r7, #32]
 801316e:	68fa      	ldr	r2, [r7, #12]
 8013170:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8013172:	69fb      	ldr	r3, [r7, #28]
 8013174:	68fa      	ldr	r2, [r7, #12]
 8013176:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	69fa      	ldr	r2, [r7, #28]
 801317c:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	6a3a      	ldr	r2, [r7, #32]
 8013182:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8013184:	4b09      	ldr	r3, [pc, #36]	; (80131ac <_tx_byte_pool_create+0x124>)
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	3301      	adds	r3, #1
 801318a:	4a08      	ldr	r2, [pc, #32]	; (80131ac <_tx_byte_pool_create+0x124>)
 801318c:	6013      	str	r3, [r2, #0]
 801318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013190:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	f383 8810 	msr	PRIMASK, r3
}
 8013198:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801319a:	2300      	movs	r3, #0
}
 801319c:	4618      	mov	r0, r3
 801319e:	3738      	adds	r7, #56	; 0x38
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	ffffeeee 	.word	0xffffeeee
 80131a8:	42595445 	.word	0x42595445
 80131ac:	20197b38 	.word	0x20197b38
 80131b0:	20197b34 	.word	0x20197b34

080131b4 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 80131b4:	b480      	push	{r7}
 80131b6:	b097      	sub	sp, #92	; 0x5c
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
 80131bc:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 80131be:	2300      	movs	r3, #0
 80131c0:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80131c2:	f3ef 8310 	mrs	r3, PRIMASK
 80131c6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80131c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80131ca:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80131cc:	b672      	cpsid	i
    return(int_posture);
 80131ce:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 80131d0:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	689a      	ldr	r2, [r3, #8]
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	68db      	ldr	r3, [r3, #12]
 80131da:	3b02      	subs	r3, #2
 80131dc:	00db      	lsls	r3, r3, #3
 80131de:	4413      	add	r3, r2
 80131e0:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 80131e2:	683a      	ldr	r2, [r7, #0]
 80131e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d308      	bcc.n	80131fc <_tx_byte_pool_search+0x48>
 80131ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131ec:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80131ee:	69fb      	ldr	r3, [r7, #28]
 80131f0:	f383 8810 	msr	PRIMASK, r3
}
 80131f4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 80131f6:	2300      	movs	r3, #0
 80131f8:	653b      	str	r3, [r7, #80]	; 0x50
 80131fa:	e0dd      	b.n	80133b8 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80131fc:	4b72      	ldr	r3, [pc, #456]	; (80133c8 <_tx_byte_pool_search+0x214>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013206:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	695b      	ldr	r3, [r3, #20]
 801320c:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	68db      	ldr	r3, [r3, #12]
 8013212:	3301      	adds	r3, #1
 8013214:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8013216:	2300      	movs	r3, #0
 8013218:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801321a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801321c:	3304      	adds	r3, #4
 801321e:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8013220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013222:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8013224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	4a68      	ldr	r2, [pc, #416]	; (80133cc <_tx_byte_pool_search+0x218>)
 801322a:	4293      	cmp	r3, r2
 801322c:	d143      	bne.n	80132b6 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 801322e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013230:	2b00      	cmp	r3, #0
 8013232:	d104      	bne.n	801323e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013238:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 801323a:	2301      	movs	r3, #1
 801323c:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801323e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013240:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8013242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8013248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801324a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801324c:	1ad3      	subs	r3, r2, r3
 801324e:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8013250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013252:	3b08      	subs	r3, #8
 8013254:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8013256:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	429a      	cmp	r2, r3
 801325c:	d257      	bcs.n	801330e <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 801325e:	2300      	movs	r3, #0
 8013260:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8013262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013264:	3304      	adds	r3, #4
 8013266:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8013268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801326a:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 801326c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	4a56      	ldr	r2, [pc, #344]	; (80133cc <_tx_byte_pool_search+0x218>)
 8013272:	4293      	cmp	r3, r2
 8013274:	d113      	bne.n	801329e <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8013276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013278:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 801327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801327c:	681a      	ldr	r2, [r3, #0]
 801327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013280:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	68db      	ldr	r3, [r3, #12]
 8013286:	1e5a      	subs	r2, r3, #1
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	695b      	ldr	r3, [r3, #20]
 8013290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013292:	429a      	cmp	r2, r3
 8013294:	d114      	bne.n	80132c0 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801329a:	615a      	str	r2, [r3, #20]
 801329c:	e010      	b.n	80132c0 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801329e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a0:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 80132a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 80132a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d008      	beq.n	80132c0 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 80132ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132b0:	3b01      	subs	r3, #1
 80132b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80132b4:	e004      	b.n	80132c0 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80132b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132b8:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 80132ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 80132c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d002      	beq.n	80132cc <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 80132c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132c8:	3b01      	subs	r3, #1
 80132ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80132cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80132ce:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80132d0:	693b      	ldr	r3, [r7, #16]
 80132d2:	f383 8810 	msr	PRIMASK, r3
}
 80132d6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80132d8:	f3ef 8310 	mrs	r3, PRIMASK
 80132dc:	61bb      	str	r3, [r7, #24]
    return(posture);
 80132de:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80132e0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80132e2:	b672      	cpsid	i
    return(int_posture);
 80132e4:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 80132e6:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	6a1b      	ldr	r3, [r3, #32]
 80132ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d009      	beq.n	8013306 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	695b      	ldr	r3, [r3, #20]
 80132f6:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	68db      	ldr	r3, [r3, #12]
 80132fc:	3301      	adds	r3, #1
 80132fe:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013304:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8013306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013308:	2b00      	cmp	r3, #0
 801330a:	d186      	bne.n	801321a <_tx_byte_pool_search+0x66>
 801330c:	e000      	b.n	8013310 <_tx_byte_pool_search+0x15c>
                    break;
 801330e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8013310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013312:	2b00      	cmp	r3, #0
 8013314:	d048      	beq.n	80133a8 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8013316:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	1ad3      	subs	r3, r2, r3
 801331c:	2b13      	cmp	r3, #19
 801331e:	d91e      	bls.n	801335e <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8013320:	683b      	ldr	r3, [r7, #0]
 8013322:	3308      	adds	r3, #8
 8013324:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013326:	4413      	add	r3, r2
 8013328:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801332c:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801332e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013330:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8013332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013334:	681a      	ldr	r2, [r3, #0]
 8013336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013338:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801333c:	3304      	adds	r3, #4
 801333e:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8013340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013342:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8013344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013346:	4a21      	ldr	r2, [pc, #132]	; (80133cc <_tx_byte_pool_search+0x218>)
 8013348:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	68db      	ldr	r3, [r3, #12]
 801334e:	1c5a      	adds	r2, r3, #1
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8013354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013358:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801335e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013360:	3304      	adds	r3, #4
 8013362:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8013364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013366:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8013368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801336a:	687a      	ldr	r2, [r7, #4]
 801336c:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	689a      	ldr	r2, [r3, #8]
 8013372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013374:	1ad3      	subs	r3, r2, r3
 8013376:	f1a3 0208 	sub.w	r2, r3, #8
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	695b      	ldr	r3, [r3, #20]
 8013382:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013384:	429a      	cmp	r2, r3
 8013386:	d105      	bne.n	8013394 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8013388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801338a:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 801338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801338e:	681a      	ldr	r2, [r3, #0]
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	615a      	str	r2, [r3, #20]
 8013394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013396:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	f383 8810 	msr	PRIMASK, r3
}
 801339e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80133a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133a2:	3308      	adds	r3, #8
 80133a4:	653b      	str	r3, [r7, #80]	; 0x50
 80133a6:	e007      	b.n	80133b8 <_tx_byte_pool_search+0x204>
 80133a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133aa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	f383 8810 	msr	PRIMASK, r3
}
 80133b2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 80133b4:	2300      	movs	r3, #0
 80133b6:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 80133b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80133ba:	4618      	mov	r0, r3
 80133bc:	375c      	adds	r7, #92	; 0x5c
 80133be:	46bd      	mov	sp, r7
 80133c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c4:	4770      	bx	lr
 80133c6:	bf00      	nop
 80133c8:	20197b44 	.word	0x20197b44
 80133cc:	ffffeeee 	.word	0xffffeeee

080133d0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80133d4:	f000 ff04 	bl	80141e0 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80133d8:	f001 fa8c 	bl	80148f4 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80133dc:	4b12      	ldr	r3, [pc, #72]	; (8013428 <_tx_initialize_high_level+0x58>)
 80133de:	2200      	movs	r2, #0
 80133e0:	601a      	str	r2, [r3, #0]
 80133e2:	4b12      	ldr	r3, [pc, #72]	; (801342c <_tx_initialize_high_level+0x5c>)
 80133e4:	2200      	movs	r2, #0
 80133e6:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80133e8:	4b11      	ldr	r3, [pc, #68]	; (8013430 <_tx_initialize_high_level+0x60>)
 80133ea:	2200      	movs	r2, #0
 80133ec:	601a      	str	r2, [r3, #0]
 80133ee:	4b11      	ldr	r3, [pc, #68]	; (8013434 <_tx_initialize_high_level+0x64>)
 80133f0:	2200      	movs	r2, #0
 80133f2:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80133f4:	4b10      	ldr	r3, [pc, #64]	; (8013438 <_tx_initialize_high_level+0x68>)
 80133f6:	2200      	movs	r2, #0
 80133f8:	601a      	str	r2, [r3, #0]
 80133fa:	4b10      	ldr	r3, [pc, #64]	; (801343c <_tx_initialize_high_level+0x6c>)
 80133fc:	2200      	movs	r2, #0
 80133fe:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8013400:	4b0f      	ldr	r3, [pc, #60]	; (8013440 <_tx_initialize_high_level+0x70>)
 8013402:	2200      	movs	r2, #0
 8013404:	601a      	str	r2, [r3, #0]
 8013406:	4b0f      	ldr	r3, [pc, #60]	; (8013444 <_tx_initialize_high_level+0x74>)
 8013408:	2200      	movs	r2, #0
 801340a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 801340c:	4b0e      	ldr	r3, [pc, #56]	; (8013448 <_tx_initialize_high_level+0x78>)
 801340e:	2200      	movs	r2, #0
 8013410:	601a      	str	r2, [r3, #0]
 8013412:	4b0e      	ldr	r3, [pc, #56]	; (801344c <_tx_initialize_high_level+0x7c>)
 8013414:	2200      	movs	r2, #0
 8013416:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8013418:	4b0d      	ldr	r3, [pc, #52]	; (8013450 <_tx_initialize_high_level+0x80>)
 801341a:	2200      	movs	r2, #0
 801341c:	601a      	str	r2, [r3, #0]
 801341e:	4b0d      	ldr	r3, [pc, #52]	; (8013454 <_tx_initialize_high_level+0x84>)
 8013420:	2200      	movs	r2, #0
 8013422:	601a      	str	r2, [r3, #0]
#endif
}
 8013424:	bf00      	nop
 8013426:	bd80      	pop	{r7, pc}
 8013428:	20197b0c 	.word	0x20197b0c
 801342c:	20197b10 	.word	0x20197b10
 8013430:	20197b14 	.word	0x20197b14
 8013434:	20197b18 	.word	0x20197b18
 8013438:	20197b1c 	.word	0x20197b1c
 801343c:	20197b20 	.word	0x20197b20
 8013440:	20197b2c 	.word	0x20197b2c
 8013444:	20197b30 	.word	0x20197b30
 8013448:	20197b34 	.word	0x20197b34
 801344c:	20197b38 	.word	0x20197b38
 8013450:	20197b24 	.word	0x20197b24
 8013454:	20197b28 	.word	0x20197b28

08013458 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8013458:	b580      	push	{r7, lr}
 801345a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 801345c:	4b10      	ldr	r3, [pc, #64]	; (80134a0 <_tx_initialize_kernel_enter+0x48>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8013464:	d00c      	beq.n	8013480 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8013466:	4b0e      	ldr	r3, [pc, #56]	; (80134a0 <_tx_initialize_kernel_enter+0x48>)
 8013468:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 801346c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 801346e:	f7ec ff1d 	bl	80002ac <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8013472:	f7ff ffad 	bl	80133d0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8013476:	4b0b      	ldr	r3, [pc, #44]	; (80134a4 <_tx_initialize_kernel_enter+0x4c>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	3301      	adds	r3, #1
 801347c:	4a09      	ldr	r2, [pc, #36]	; (80134a4 <_tx_initialize_kernel_enter+0x4c>)
 801347e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8013480:	4b07      	ldr	r3, [pc, #28]	; (80134a0 <_tx_initialize_kernel_enter+0x48>)
 8013482:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8013486:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8013488:	4b07      	ldr	r3, [pc, #28]	; (80134a8 <_tx_initialize_kernel_enter+0x50>)
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	4618      	mov	r0, r3
 801348e:	f7ed f833 	bl	80004f8 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8013492:	4b03      	ldr	r3, [pc, #12]	; (80134a0 <_tx_initialize_kernel_enter+0x48>)
 8013494:	2200      	movs	r2, #0
 8013496:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8013498:	f7ec ff44 	bl	8000324 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 801349c:	bf00      	nop
 801349e:	bd80      	pop	{r7, pc}
 80134a0:	20000054 	.word	0x20000054
 80134a4:	20197bdc 	.word	0x20197bdc
 80134a8:	20197b3c 	.word	0x20197b3c

080134ac <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b08e      	sub	sp, #56	; 0x38
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
 80134b4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80134b6:	f3ef 8310 	mrs	r3, PRIMASK
 80134ba:	623b      	str	r3, [r7, #32]
    return(posture);
 80134bc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80134be:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80134c0:	b672      	cpsid	i
    return(int_posture);
 80134c2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 80134c4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80134ca:	4a37      	ldr	r2, [pc, #220]	; (80135a8 <_tx_queue_cleanup+0xfc>)
 80134cc:	4293      	cmp	r3, r2
 80134ce:	d161      	bne.n	8013594 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80134d6:	683a      	ldr	r2, [r7, #0]
 80134d8:	429a      	cmp	r2, r3
 80134da:	d15b      	bne.n	8013594 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134e0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 80134e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d055      	beq.n	8013594 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 80134e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	4a2f      	ldr	r2, [pc, #188]	; (80135ac <_tx_queue_cleanup+0x100>)
 80134ee:	4293      	cmp	r3, r2
 80134f0:	d150      	bne.n	8013594 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 80134f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d04c      	beq.n	8013594 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	2200      	movs	r2, #0
 80134fe:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8013500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013504:	1e5a      	subs	r2, r3, #1
 8013506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013508:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 801350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801350e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8013510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013512:	2b00      	cmp	r3, #0
 8013514:	d103      	bne.n	801351e <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8013516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013518:	2200      	movs	r2, #0
 801351a:	629a      	str	r2, [r3, #40]	; 0x28
 801351c:	e013      	b.n	8013546 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013522:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013528:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801352c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801352e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013534:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 8013536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801353a:	687a      	ldr	r2, [r7, #4]
 801353c:	429a      	cmp	r2, r3
 801353e:	d102      	bne.n	8013546 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8013540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013544:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801354a:	2b05      	cmp	r3, #5
 801354c:	d122      	bne.n	8013594 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 801354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013550:	691b      	ldr	r3, [r3, #16]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d004      	beq.n	8013560 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	220b      	movs	r2, #11
 801355a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 801355e:	e003      	b.n	8013568 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	220a      	movs	r2, #10
 8013564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013568:	4b11      	ldr	r3, [pc, #68]	; (80135b0 <_tx_queue_cleanup+0x104>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	3301      	adds	r3, #1
 801356e:	4a10      	ldr	r2, [pc, #64]	; (80135b0 <_tx_queue_cleanup+0x104>)
 8013570:	6013      	str	r3, [r2, #0]
 8013572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013574:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013576:	693b      	ldr	r3, [r7, #16]
 8013578:	f383 8810 	msr	PRIMASK, r3
}
 801357c:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801357e:	6878      	ldr	r0, [r7, #4]
 8013580:	f000 fef0 	bl	8014364 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013584:	f3ef 8310 	mrs	r3, PRIMASK
 8013588:	61bb      	str	r3, [r7, #24]
    return(posture);
 801358a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801358c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801358e:	b672      	cpsid	i
    return(int_posture);
 8013590:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8013592:	637b      	str	r3, [r7, #52]	; 0x34
 8013594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013596:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	f383 8810 	msr	PRIMASK, r3
}
 801359e:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80135a0:	bf00      	nop
 80135a2:	3738      	adds	r7, #56	; 0x38
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bd80      	pop	{r7, pc}
 80135a8:	080134ad 	.word	0x080134ad
 80135ac:	51554555 	.word	0x51554555
 80135b0:	20197bdc 	.word	0x20197bdc

080135b4 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b08c      	sub	sp, #48	; 0x30
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	60f8      	str	r0, [r7, #12]
 80135bc:	60b9      	str	r1, [r7, #8]
 80135be:	607a      	str	r2, [r7, #4]
 80135c0:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 80135c2:	2238      	movs	r2, #56	; 0x38
 80135c4:	2100      	movs	r1, #0
 80135c6:	68f8      	ldr	r0, [r7, #12]
 80135c8:	f014 fdfb 	bl	80281c2 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	68ba      	ldr	r2, [r7, #8]
 80135d0:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	687a      	ldr	r2, [r7, #4]
 80135d6:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	009b      	lsls	r3, r3, #2
 80135dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80135de:	fbb2 f3f3 	udiv	r3, r2, r3
 80135e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 80135e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e6:	687a      	ldr	r2, [r7, #4]
 80135e8:	fb02 f303 	mul.w	r3, r2, r3
 80135ec:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	683a      	ldr	r2, [r7, #0]
 80135f2:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	699a      	ldr	r2, [r3, #24]
 80135f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135fa:	009b      	lsls	r3, r3, #2
 80135fc:	441a      	add	r2, r3
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	683a      	ldr	r2, [r7, #0]
 8013606:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	683a      	ldr	r2, [r7, #0]
 801360c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013612:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013618:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801361a:	f3ef 8310 	mrs	r3, PRIMASK
 801361e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013620:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013622:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013624:	b672      	cpsid	i
    return(int_posture);
 8013626:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8013628:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	4a18      	ldr	r2, [pc, #96]	; (8013690 <_tx_queue_create+0xdc>)
 801362e:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8013630:	4b18      	ldr	r3, [pc, #96]	; (8013694 <_tx_queue_create+0xe0>)
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d109      	bne.n	801364c <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8013638:	4a17      	ldr	r2, [pc, #92]	; (8013698 <_tx_queue_create+0xe4>)
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	68fa      	ldr	r2, [r7, #12]
 8013642:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	68fa      	ldr	r2, [r7, #12]
 8013648:	635a      	str	r2, [r3, #52]	; 0x34
 801364a:	e011      	b.n	8013670 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 801364c:	4b12      	ldr	r3, [pc, #72]	; (8013698 <_tx_queue_create+0xe4>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 8013652:	6a3b      	ldr	r3, [r7, #32]
 8013654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013656:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8013658:	6a3b      	ldr	r3, [r7, #32]
 801365a:	68fa      	ldr	r2, [r7, #12]
 801365c:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 801365e:	69fb      	ldr	r3, [r7, #28]
 8013660:	68fa      	ldr	r2, [r7, #12]
 8013662:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	69fa      	ldr	r2, [r7, #28]
 8013668:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	6a3a      	ldr	r2, [r7, #32]
 801366e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8013670:	4b08      	ldr	r3, [pc, #32]	; (8013694 <_tx_queue_create+0xe0>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	3301      	adds	r3, #1
 8013676:	4a07      	ldr	r2, [pc, #28]	; (8013694 <_tx_queue_create+0xe0>)
 8013678:	6013      	str	r3, [r2, #0]
 801367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801367c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801367e:	693b      	ldr	r3, [r7, #16]
 8013680:	f383 8810 	msr	PRIMASK, r3
}
 8013684:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013686:	2300      	movs	r3, #0
}
 8013688:	4618      	mov	r0, r3
 801368a:	3730      	adds	r7, #48	; 0x30
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}
 8013690:	51554555 	.word	0x51554555
 8013694:	20197b18 	.word	0x20197b18
 8013698:	20197b14 	.word	0x20197b14

0801369c <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b096      	sub	sp, #88	; 0x58
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	60f8      	str	r0, [r7, #12]
 80136a4:	60b9      	str	r1, [r7, #8]
 80136a6:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80136a8:	2300      	movs	r3, #0
 80136aa:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80136ac:	f3ef 8310 	mrs	r3, PRIMASK
 80136b0:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 80136b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 80136b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 80136b6:	b672      	cpsid	i
    return(int_posture);
 80136b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 80136ba:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136c0:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	691b      	ldr	r3, [r3, #16]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	f000 8136 	beq.w	8013938 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80136cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d13c      	bne.n	801374c <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	6a1b      	ldr	r3, [r3, #32]
 80136d6:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 80136d8:	68bb      	ldr	r3, [r7, #8]
 80136da:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	689b      	ldr	r3, [r3, #8]
 80136e0:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80136e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80136e4:	1d13      	adds	r3, r2, #4
 80136e6:	657b      	str	r3, [r7, #84]	; 0x54
 80136e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136ea:	1d19      	adds	r1, r3, #4
 80136ec:	6539      	str	r1, [r7, #80]	; 0x50
 80136ee:	6812      	ldr	r2, [r2, #0]
 80136f0:	601a      	str	r2, [r3, #0]
 80136f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136f4:	2b01      	cmp	r3, #1
 80136f6:	d90e      	bls.n	8013716 <_tx_queue_receive+0x7a>
 80136f8:	e007      	b.n	801370a <_tx_queue_receive+0x6e>
 80136fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80136fc:	1d13      	adds	r3, r2, #4
 80136fe:	657b      	str	r3, [r7, #84]	; 0x54
 8013700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013702:	1d19      	adds	r1, r3, #4
 8013704:	6539      	str	r1, [r7, #80]	; 0x50
 8013706:	6812      	ldr	r2, [r2, #0]
 8013708:	601a      	str	r2, [r3, #0]
 801370a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801370c:	3b01      	subs	r3, #1
 801370e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013712:	2b00      	cmp	r3, #0
 8013714:	d1f1      	bne.n	80136fa <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	69db      	ldr	r3, [r3, #28]
 801371a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801371c:	429a      	cmp	r2, r3
 801371e:	d102      	bne.n	8013726 <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	699b      	ldr	r3, [r3, #24]
 8013724:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801372a:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	695b      	ldr	r3, [r3, #20]
 8013730:	1c5a      	adds	r2, r3, #1
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	691b      	ldr	r3, [r3, #16]
 801373a:	1e5a      	subs	r2, r3, #1
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	611a      	str	r2, [r3, #16]
 8013740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013742:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013746:	f383 8810 	msr	PRIMASK, r3
}
 801374a:	e163      	b.n	8013a14 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013750:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8013752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013758:	2b01      	cmp	r3, #1
 801375a:	d153      	bne.n	8013804 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 801375c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801375e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013760:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8013762:	68bb      	ldr	r3, [r7, #8]
 8013764:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	689b      	ldr	r3, [r3, #8]
 801376a:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 801376c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801376e:	1d13      	adds	r3, r2, #4
 8013770:	657b      	str	r3, [r7, #84]	; 0x54
 8013772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013774:	1d19      	adds	r1, r3, #4
 8013776:	6539      	str	r1, [r7, #80]	; 0x50
 8013778:	6812      	ldr	r2, [r2, #0]
 801377a:	601a      	str	r2, [r3, #0]
 801377c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801377e:	2b01      	cmp	r3, #1
 8013780:	d90e      	bls.n	80137a0 <_tx_queue_receive+0x104>
 8013782:	e007      	b.n	8013794 <_tx_queue_receive+0xf8>
 8013784:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013786:	1d13      	adds	r3, r2, #4
 8013788:	657b      	str	r3, [r7, #84]	; 0x54
 801378a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801378c:	1d19      	adds	r1, r3, #4
 801378e:	6539      	str	r1, [r7, #80]	; 0x50
 8013790:	6812      	ldr	r2, [r2, #0]
 8013792:	601a      	str	r2, [r3, #0]
 8013794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013796:	3b01      	subs	r3, #1
 8013798:	64fb      	str	r3, [r7, #76]	; 0x4c
 801379a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801379c:	2b00      	cmp	r3, #0
 801379e:	d1f1      	bne.n	8013784 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 80137a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137a2:	3b01      	subs	r3, #1
 80137a4:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 80137a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d103      	bne.n	80137b4 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	2200      	movs	r2, #0
 80137b0:	629a      	str	r2, [r3, #40]	; 0x28
 80137b2:	e00e      	b.n	80137d2 <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80137b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137b8:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80137be:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80137c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80137c4:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 80137c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137ca:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 80137cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80137d0:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80137d6:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80137d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137da:	2200      	movs	r2, #0
 80137dc:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80137de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137e0:	2200      	movs	r2, #0
 80137e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80137e6:	4b8e      	ldr	r3, [pc, #568]	; (8013a20 <_tx_queue_receive+0x384>)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	3301      	adds	r3, #1
 80137ec:	4a8c      	ldr	r2, [pc, #560]	; (8013a20 <_tx_queue_receive+0x384>)
 80137ee:	6013      	str	r3, [r2, #0]
 80137f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137f2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80137f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f6:	f383 8810 	msr	PRIMASK, r3
}
 80137fa:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 80137fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80137fe:	f000 fdb1 	bl	8014364 <_tx_thread_system_resume>
 8013802:	e107      	b.n	8013a14 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	6a1b      	ldr	r3, [r3, #32]
 8013808:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 801380a:	68bb      	ldr	r3, [r7, #8]
 801380c:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	689b      	ldr	r3, [r3, #8]
 8013812:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8013814:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013816:	1d13      	adds	r3, r2, #4
 8013818:	657b      	str	r3, [r7, #84]	; 0x54
 801381a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801381c:	1d19      	adds	r1, r3, #4
 801381e:	6539      	str	r1, [r7, #80]	; 0x50
 8013820:	6812      	ldr	r2, [r2, #0]
 8013822:	601a      	str	r2, [r3, #0]
 8013824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013826:	2b01      	cmp	r3, #1
 8013828:	d90e      	bls.n	8013848 <_tx_queue_receive+0x1ac>
 801382a:	e007      	b.n	801383c <_tx_queue_receive+0x1a0>
 801382c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801382e:	1d13      	adds	r3, r2, #4
 8013830:	657b      	str	r3, [r7, #84]	; 0x54
 8013832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013834:	1d19      	adds	r1, r3, #4
 8013836:	6539      	str	r1, [r7, #80]	; 0x50
 8013838:	6812      	ldr	r2, [r2, #0]
 801383a:	601a      	str	r2, [r3, #0]
 801383c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801383e:	3b01      	subs	r3, #1
 8013840:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013844:	2b00      	cmp	r3, #0
 8013846:	d1f1      	bne.n	801382c <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	69db      	ldr	r3, [r3, #28]
 801384c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801384e:	429a      	cmp	r2, r3
 8013850:	d102      	bne.n	8013858 <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	699b      	ldr	r3, [r3, #24]
 8013856:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801385c:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 801385e:	4b70      	ldr	r3, [pc, #448]	; (8013a20 <_tx_queue_receive+0x384>)
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	3301      	adds	r3, #1
 8013864:	4a6e      	ldr	r2, [pc, #440]	; (8013a20 <_tx_queue_receive+0x384>)
 8013866:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8013868:	4b6d      	ldr	r3, [pc, #436]	; (8013a20 <_tx_queue_receive+0x384>)
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	3b01      	subs	r3, #1
 801386e:	4a6c      	ldr	r2, [pc, #432]	; (8013a20 <_tx_queue_receive+0x384>)
 8013870:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8013872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013876:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801387c:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	689b      	ldr	r3, [r3, #8]
 8013882:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8013884:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013886:	1d13      	adds	r3, r2, #4
 8013888:	657b      	str	r3, [r7, #84]	; 0x54
 801388a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801388c:	1d19      	adds	r1, r3, #4
 801388e:	6539      	str	r1, [r7, #80]	; 0x50
 8013890:	6812      	ldr	r2, [r2, #0]
 8013892:	601a      	str	r2, [r3, #0]
 8013894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013896:	2b01      	cmp	r3, #1
 8013898:	d90e      	bls.n	80138b8 <_tx_queue_receive+0x21c>
 801389a:	e007      	b.n	80138ac <_tx_queue_receive+0x210>
 801389c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801389e:	1d13      	adds	r3, r2, #4
 80138a0:	657b      	str	r3, [r7, #84]	; 0x54
 80138a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138a4:	1d19      	adds	r1, r3, #4
 80138a6:	6539      	str	r1, [r7, #80]	; 0x50
 80138a8:	6812      	ldr	r2, [r2, #0]
 80138aa:	601a      	str	r2, [r3, #0]
 80138ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138ae:	3b01      	subs	r3, #1
 80138b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80138b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d1f1      	bne.n	801389c <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	69db      	ldr	r3, [r3, #28]
 80138bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80138be:	429a      	cmp	r2, r3
 80138c0:	d102      	bne.n	80138c8 <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	699b      	ldr	r3, [r3, #24]
 80138c6:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80138cc:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138d2:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 80138d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138d6:	3b01      	subs	r3, #1
 80138d8:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 80138da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d103      	bne.n	80138e8 <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	2200      	movs	r2, #0
 80138e4:	629a      	str	r2, [r3, #40]	; 0x28
 80138e6:	e00e      	b.n	8013906 <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80138e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138ec:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138f2:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80138f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80138f8:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 80138fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80138fe:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 8013900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013904:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801390a:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801390c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801390e:	2200      	movs	r2, #0
 8013910:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8013912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013914:	2200      	movs	r2, #0
 8013916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801391a:	4b41      	ldr	r3, [pc, #260]	; (8013a20 <_tx_queue_receive+0x384>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	3301      	adds	r3, #1
 8013920:	4a3f      	ldr	r2, [pc, #252]	; (8013a20 <_tx_queue_receive+0x384>)
 8013922:	6013      	str	r3, [r2, #0]
 8013924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013926:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013928:	6a3b      	ldr	r3, [r7, #32]
 801392a:	f383 8810 	msr	PRIMASK, r3
}
 801392e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8013930:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013932:	f000 fd17 	bl	8014364 <_tx_thread_system_resume>
 8013936:	e06d      	b.n	8013a14 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d062      	beq.n	8013a04 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801393e:	4b38      	ldr	r3, [pc, #224]	; (8013a20 <_tx_queue_receive+0x384>)
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d008      	beq.n	8013958 <_tx_queue_receive+0x2bc>
 8013946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013948:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801394a:	69fb      	ldr	r3, [r7, #28]
 801394c:	f383 8810 	msr	PRIMASK, r3
}
 8013950:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 8013952:	230a      	movs	r3, #10
 8013954:	64bb      	str	r3, [r7, #72]	; 0x48
 8013956:	e05d      	b.n	8013a14 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013958:	4b32      	ldr	r3, [pc, #200]	; (8013a24 <_tx_queue_receive+0x388>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 801395e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013960:	4a31      	ldr	r2, [pc, #196]	; (8013a28 <_tx_queue_receive+0x38c>)
 8013962:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8013964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013966:	68fa      	ldr	r2, [r7, #12]
 8013968:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 801396a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801396c:	68ba      	ldr	r2, [r7, #8]
 801396e:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8013970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013972:	2200      	movs	r2, #0
 8013974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8013978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801397a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801397e:	1c5a      	adds	r2, r3, #1
 8013980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013982:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8013986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013988:	2b00      	cmp	r3, #0
 801398a:	d109      	bne.n	80139a0 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013990:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8013992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013994:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013996:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8013998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801399a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801399c:	675a      	str	r2, [r3, #116]	; 0x74
 801399e:	e011      	b.n	80139c4 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139a4:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80139a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139aa:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80139ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139b0:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80139b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80139b6:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80139b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80139bc:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80139be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80139c2:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 80139c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139c6:	1c5a      	adds	r2, r3, #1
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 80139cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139ce:	2205      	movs	r2, #5
 80139d0:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80139d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139d4:	2201      	movs	r2, #1
 80139d6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80139d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139da:	687a      	ldr	r2, [r7, #4]
 80139dc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80139de:	4b10      	ldr	r3, [pc, #64]	; (8013a20 <_tx_queue_receive+0x384>)
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	3301      	adds	r3, #1
 80139e4:	4a0e      	ldr	r2, [pc, #56]	; (8013a20 <_tx_queue_receive+0x384>)
 80139e6:	6013      	str	r3, [r2, #0]
 80139e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139ea:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80139ec:	69bb      	ldr	r3, [r7, #24]
 80139ee:	f383 8810 	msr	PRIMASK, r3
}
 80139f2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80139f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80139f6:	f000 fdb5 	bl	8014564 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80139fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a00:	64bb      	str	r3, [r7, #72]	; 0x48
 8013a02:	e007      	b.n	8013a14 <_tx_queue_receive+0x378>
 8013a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a06:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	f383 8810 	msr	PRIMASK, r3
}
 8013a0e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 8013a10:	230a      	movs	r3, #10
 8013a12:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 8013a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3758      	adds	r7, #88	; 0x58
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
 8013a1e:	bf00      	nop
 8013a20:	20197bdc 	.word	0x20197bdc
 8013a24:	20197b44 	.word	0x20197b44
 8013a28:	080134ad 	.word	0x080134ad

08013a2c <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b094      	sub	sp, #80	; 0x50
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	60f8      	str	r0, [r7, #12]
 8013a34:	60b9      	str	r1, [r7, #8]
 8013a36:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8013a38:	2300      	movs	r3, #0
 8013a3a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8013a40:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8013a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8013a44:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8013a46:	b672      	cpsid	i
    return(int_posture);
 8013a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8013a4a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a50:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	695b      	ldr	r3, [r3, #20]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	f000 809b 	beq.w	8013b92 <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8013a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d13c      	bne.n	8013adc <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	695b      	ldr	r3, [r3, #20]
 8013a66:	1e5a      	subs	r2, r3, #1
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	691b      	ldr	r3, [r3, #16]
 8013a70:	1c5a      	adds	r2, r3, #1
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a7e:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	689b      	ldr	r3, [r3, #8]
 8013a84:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8013a86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013a88:	1d13      	adds	r3, r2, #4
 8013a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a8e:	1d19      	adds	r1, r3, #4
 8013a90:	64b9      	str	r1, [r7, #72]	; 0x48
 8013a92:	6812      	ldr	r2, [r2, #0]
 8013a94:	601a      	str	r2, [r3, #0]
 8013a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a98:	2b01      	cmp	r3, #1
 8013a9a:	d90e      	bls.n	8013aba <_tx_queue_send+0x8e>
 8013a9c:	e007      	b.n	8013aae <_tx_queue_send+0x82>
 8013a9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013aa0:	1d13      	adds	r3, r2, #4
 8013aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013aa6:	1d19      	adds	r1, r3, #4
 8013aa8:	64b9      	str	r1, [r7, #72]	; 0x48
 8013aaa:	6812      	ldr	r2, [r2, #0]
 8013aac:	601a      	str	r2, [r3, #0]
 8013aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ab0:	3b01      	subs	r3, #1
 8013ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8013ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d1f1      	bne.n	8013a9e <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	69db      	ldr	r3, [r3, #28]
 8013abe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013ac0:	429a      	cmp	r2, r3
 8013ac2:	d102      	bne.n	8013aca <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	699b      	ldr	r3, [r3, #24]
 8013ac8:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013ace:	625a      	str	r2, [r3, #36]	; 0x24
 8013ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ad2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013ad4:	6a3b      	ldr	r3, [r7, #32]
 8013ad6:	f383 8810 	msr	PRIMASK, r3
}
 8013ada:	e0c8      	b.n	8013c6e <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ae0:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8013ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ae4:	3b01      	subs	r3, #1
 8013ae6:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8013ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d103      	bne.n	8013af6 <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	2200      	movs	r2, #0
 8013af2:	629a      	str	r2, [r3, #40]	; 0x28
 8013af4:	e012      	b.n	8013b1c <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8013af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013af8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8013afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b02:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b08:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8013b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b14:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8013b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b1a:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b20:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b24:	2200      	movs	r2, #0
 8013b26:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8013b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b30:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	689b      	ldr	r3, [r3, #8]
 8013b36:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8013b38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013b3a:	1d13      	adds	r3, r2, #4
 8013b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b40:	1d19      	adds	r1, r3, #4
 8013b42:	64b9      	str	r1, [r7, #72]	; 0x48
 8013b44:	6812      	ldr	r2, [r2, #0]
 8013b46:	601a      	str	r2, [r3, #0]
 8013b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b4a:	2b01      	cmp	r3, #1
 8013b4c:	d90e      	bls.n	8013b6c <_tx_queue_send+0x140>
 8013b4e:	e007      	b.n	8013b60 <_tx_queue_send+0x134>
 8013b50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013b52:	1d13      	adds	r3, r2, #4
 8013b54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b58:	1d19      	adds	r1, r3, #4
 8013b5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8013b5c:	6812      	ldr	r2, [r2, #0]
 8013b5e:	601a      	str	r2, [r3, #0]
 8013b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b62:	3b01      	subs	r3, #1
 8013b64:	647b      	str	r3, [r7, #68]	; 0x44
 8013b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d1f1      	bne.n	8013b50 <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8013b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b6e:	2200      	movs	r2, #0
 8013b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8013b74:	4b40      	ldr	r3, [pc, #256]	; (8013c78 <_tx_queue_send+0x24c>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	3301      	adds	r3, #1
 8013b7a:	4a3f      	ldr	r2, [pc, #252]	; (8013c78 <_tx_queue_send+0x24c>)
 8013b7c:	6013      	str	r3, [r2, #0]
 8013b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b80:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b82:	69fb      	ldr	r3, [r7, #28]
 8013b84:	f383 8810 	msr	PRIMASK, r3
}
 8013b88:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8013b8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013b8c:	f000 fbea 	bl	8014364 <_tx_thread_system_resume>
 8013b90:	e06d      	b.n	8013c6e <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d062      	beq.n	8013c5e <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8013b98:	4b37      	ldr	r3, [pc, #220]	; (8013c78 <_tx_queue_send+0x24c>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d008      	beq.n	8013bb2 <_tx_queue_send+0x186>
 8013ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ba2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013ba4:	69bb      	ldr	r3, [r7, #24]
 8013ba6:	f383 8810 	msr	PRIMASK, r3
}
 8013baa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8013bac:	230b      	movs	r3, #11
 8013bae:	643b      	str	r3, [r7, #64]	; 0x40
 8013bb0:	e05d      	b.n	8013c6e <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013bb2:	4b32      	ldr	r3, [pc, #200]	; (8013c7c <_tx_queue_send+0x250>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8013bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bba:	4a31      	ldr	r2, [pc, #196]	; (8013c80 <_tx_queue_send+0x254>)
 8013bbc:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8013bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bc0:	68fa      	ldr	r2, [r7, #12]
 8013bc2:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8013bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bc6:	68ba      	ldr	r2, [r7, #8]
 8013bc8:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8013bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bcc:	2200      	movs	r2, #0
 8013bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8013bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013bd8:	1c5a      	adds	r2, r3, #1
 8013bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bdc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8013be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d109      	bne.n	8013bfa <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bea:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8013bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bf0:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8013bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bf6:	675a      	str	r2, [r3, #116]	; 0x74
 8013bf8:	e011      	b.n	8013c1e <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bfe:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8013c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c04:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8013c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8013c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c10:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8013c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c16:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8013c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c1c:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8013c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c20:	1c5a      	adds	r2, r3, #1
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8013c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c28:	2205      	movs	r2, #5
 8013c2a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c2e:	2201      	movs	r2, #1
 8013c30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8013c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c34:	687a      	ldr	r2, [r7, #4]
 8013c36:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8013c38:	4b0f      	ldr	r3, [pc, #60]	; (8013c78 <_tx_queue_send+0x24c>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	3301      	adds	r3, #1
 8013c3e:	4a0e      	ldr	r2, [pc, #56]	; (8013c78 <_tx_queue_send+0x24c>)
 8013c40:	6013      	str	r3, [r2, #0]
 8013c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c44:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c46:	697b      	ldr	r3, [r7, #20]
 8013c48:	f383 8810 	msr	PRIMASK, r3
}
 8013c4c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8013c4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013c50:	f000 fc88 	bl	8014564 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8013c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8013c5c:	e007      	b.n	8013c6e <_tx_queue_send+0x242>
 8013c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c60:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c62:	693b      	ldr	r3, [r7, #16]
 8013c64:	f383 8810 	msr	PRIMASK, r3
}
 8013c68:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 8013c6a:	230b      	movs	r3, #11
 8013c6c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 8013c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8013c70:	4618      	mov	r0, r3
 8013c72:	3750      	adds	r7, #80	; 0x50
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}
 8013c78:	20197bdc 	.word	0x20197bdc
 8013c7c:	20197b44 	.word	0x20197b44
 8013c80:	080134ad 	.word	0x080134ad

08013c84 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b08e      	sub	sp, #56	; 0x38
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
 8013c8c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8013c92:	623b      	str	r3, [r7, #32]
    return(posture);
 8013c94:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013c96:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013c98:	b672      	cpsid	i
    return(int_posture);
 8013c9a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8013c9c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013ca2:	4a33      	ldr	r2, [pc, #204]	; (8013d70 <_tx_semaphore_cleanup+0xec>)
 8013ca4:	4293      	cmp	r3, r2
 8013ca6:	d158      	bne.n	8013d5a <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013cae:	683a      	ldr	r2, [r7, #0]
 8013cb0:	429a      	cmp	r2, r3
 8013cb2:	d152      	bne.n	8013d5a <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cb8:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8013cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d04c      	beq.n	8013d5a <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8013cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	4a2b      	ldr	r2, [pc, #172]	; (8013d74 <_tx_semaphore_cleanup+0xf0>)
 8013cc6:	4293      	cmp	r3, r2
 8013cc8:	d147      	bne.n	8013d5a <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8013cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ccc:	691b      	ldr	r3, [r3, #16]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d043      	beq.n	8013d5a <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8013cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cda:	691b      	ldr	r3, [r3, #16]
 8013cdc:	1e5a      	subs	r2, r3, #1
 8013cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ce0:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8013ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ce4:	691b      	ldr	r3, [r3, #16]
 8013ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8013ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d103      	bne.n	8013cf6 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8013cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	60da      	str	r2, [r3, #12]
 8013cf4:	e013      	b.n	8013d1e <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cfa:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d00:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8013d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d06:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d0c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8013d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d10:	68db      	ldr	r3, [r3, #12]
 8013d12:	687a      	ldr	r2, [r7, #4]
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d102      	bne.n	8013d1e <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8013d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d1c:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d22:	2b06      	cmp	r3, #6
 8013d24:	d119      	bne.n	8013d5a <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	220d      	movs	r2, #13
 8013d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013d2e:	4b12      	ldr	r3, [pc, #72]	; (8013d78 <_tx_semaphore_cleanup+0xf4>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	3301      	adds	r3, #1
 8013d34:	4a10      	ldr	r2, [pc, #64]	; (8013d78 <_tx_semaphore_cleanup+0xf4>)
 8013d36:	6013      	str	r3, [r2, #0]
 8013d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d3a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d3c:	693b      	ldr	r3, [r7, #16]
 8013d3e:	f383 8810 	msr	PRIMASK, r3
}
 8013d42:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8013d44:	6878      	ldr	r0, [r7, #4]
 8013d46:	f000 fb0d 	bl	8014364 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8013d4e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013d50:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013d52:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013d54:	b672      	cpsid	i
    return(int_posture);
 8013d56:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8013d58:	637b      	str	r3, [r7, #52]	; 0x34
 8013d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d5c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	f383 8810 	msr	PRIMASK, r3
}
 8013d64:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8013d66:	bf00      	nop
 8013d68:	3738      	adds	r7, #56	; 0x38
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	bd80      	pop	{r7, pc}
 8013d6e:	bf00      	nop
 8013d70:	08013c85 	.word	0x08013c85
 8013d74:	53454d41 	.word	0x53454d41
 8013d78:	20197bdc 	.word	0x20197bdc

08013d7c <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b08a      	sub	sp, #40	; 0x28
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	60f8      	str	r0, [r7, #12]
 8013d84:	60b9      	str	r1, [r7, #8]
 8013d86:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8013d88:	221c      	movs	r2, #28
 8013d8a:	2100      	movs	r1, #0
 8013d8c:	68f8      	ldr	r0, [r7, #12]
 8013d8e:	f014 fa18 	bl	80281c2 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	68ba      	ldr	r2, [r7, #8]
 8013d96:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	687a      	ldr	r2, [r7, #4]
 8013d9c:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8013da2:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013da4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013da6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013da8:	b672      	cpsid	i
    return(int_posture);
 8013daa:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8013dac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	4a18      	ldr	r2, [pc, #96]	; (8013e14 <_tx_semaphore_create+0x98>)
 8013db2:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8013db4:	4b18      	ldr	r3, [pc, #96]	; (8013e18 <_tx_semaphore_create+0x9c>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d109      	bne.n	8013dd0 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8013dbc:	4a17      	ldr	r2, [pc, #92]	; (8013e1c <_tx_semaphore_create+0xa0>)
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	68fa      	ldr	r2, [r7, #12]
 8013dc6:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	68fa      	ldr	r2, [r7, #12]
 8013dcc:	619a      	str	r2, [r3, #24]
 8013dce:	e011      	b.n	8013df4 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8013dd0:	4b12      	ldr	r3, [pc, #72]	; (8013e1c <_tx_semaphore_create+0xa0>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8013dd6:	6a3b      	ldr	r3, [r7, #32]
 8013dd8:	699b      	ldr	r3, [r3, #24]
 8013dda:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8013ddc:	6a3b      	ldr	r3, [r7, #32]
 8013dde:	68fa      	ldr	r2, [r7, #12]
 8013de0:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8013de2:	69fb      	ldr	r3, [r7, #28]
 8013de4:	68fa      	ldr	r2, [r7, #12]
 8013de6:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	69fa      	ldr	r2, [r7, #28]
 8013dec:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	6a3a      	ldr	r2, [r7, #32]
 8013df2:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8013df4:	4b08      	ldr	r3, [pc, #32]	; (8013e18 <_tx_semaphore_create+0x9c>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	3301      	adds	r3, #1
 8013dfa:	4a07      	ldr	r2, [pc, #28]	; (8013e18 <_tx_semaphore_create+0x9c>)
 8013dfc:	6013      	str	r3, [r2, #0]
 8013dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e00:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	f383 8810 	msr	PRIMASK, r3
}
 8013e08:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013e0a:	2300      	movs	r3, #0
}
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	3728      	adds	r7, #40	; 0x28
 8013e10:	46bd      	mov	sp, r7
 8013e12:	bd80      	pop	{r7, pc}
 8013e14:	53454d41 	.word	0x53454d41
 8013e18:	20197b10 	.word	0x20197b10
 8013e1c:	20197b0c 	.word	0x20197b0c

08013e20 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b08e      	sub	sp, #56	; 0x38
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
 8013e28:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8013e32:	623b      	str	r3, [r7, #32]
    return(posture);
 8013e34:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013e36:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013e38:	b672      	cpsid	i
    return(int_posture);
 8013e3a:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8013e3c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	689b      	ldr	r3, [r3, #8]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d00a      	beq.n	8013e5c <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	689b      	ldr	r3, [r3, #8]
 8013e4a:	1e5a      	subs	r2, r3, #1
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	609a      	str	r2, [r3, #8]
 8013e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e52:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e54:	69bb      	ldr	r3, [r7, #24]
 8013e56:	f383 8810 	msr	PRIMASK, r3
}
 8013e5a:	e068      	b.n	8013f2e <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d05d      	beq.n	8013f1e <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8013e62:	4b35      	ldr	r3, [pc, #212]	; (8013f38 <_tx_semaphore_get+0x118>)
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d008      	beq.n	8013e7c <_tx_semaphore_get+0x5c>
 8013e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e6c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e6e:	697b      	ldr	r3, [r7, #20]
 8013e70:	f383 8810 	msr	PRIMASK, r3
}
 8013e74:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8013e76:	230d      	movs	r3, #13
 8013e78:	637b      	str	r3, [r7, #52]	; 0x34
 8013e7a:	e058      	b.n	8013f2e <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013e7c:	4b2f      	ldr	r3, [pc, #188]	; (8013f3c <_tx_semaphore_get+0x11c>)
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8013e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e84:	4a2e      	ldr	r2, [pc, #184]	; (8013f40 <_tx_semaphore_get+0x120>)
 8013e86:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8013e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e8a:	687a      	ldr	r2, [r7, #4]
 8013e8c:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8013e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013e94:	1c5a      	adds	r2, r3, #1
 8013e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e98:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	691b      	ldr	r3, [r3, #16]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d109      	bne.n	8013eb8 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ea8:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8013eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013eae:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8013eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013eb4:	675a      	str	r2, [r3, #116]	; 0x74
 8013eb6:	e011      	b.n	8013edc <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	68db      	ldr	r3, [r3, #12]
 8013ebc:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8013ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ec2:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8013ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ec8:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8013eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ece:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8013ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ed4:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8013ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013eda:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	691b      	ldr	r3, [r3, #16]
 8013ee0:	1c5a      	adds	r2, r3, #1
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8013ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee8:	2206      	movs	r2, #6
 8013eea:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eee:	2201      	movs	r2, #1
 8013ef0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8013ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ef4:	683a      	ldr	r2, [r7, #0]
 8013ef6:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8013ef8:	4b0f      	ldr	r3, [pc, #60]	; (8013f38 <_tx_semaphore_get+0x118>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	3301      	adds	r3, #1
 8013efe:	4a0e      	ldr	r2, [pc, #56]	; (8013f38 <_tx_semaphore_get+0x118>)
 8013f00:	6013      	str	r3, [r2, #0]
 8013f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f04:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f06:	693b      	ldr	r3, [r7, #16]
 8013f08:	f383 8810 	msr	PRIMASK, r3
}
 8013f0c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8013f0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f10:	f000 fb28 	bl	8014564 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8013f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8013f1c:	e007      	b.n	8013f2e <_tx_semaphore_get+0x10e>
 8013f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f20:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	f383 8810 	msr	PRIMASK, r3
}
 8013f28:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8013f2a:	230d      	movs	r3, #13
 8013f2c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8013f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013f30:	4618      	mov	r0, r3
 8013f32:	3738      	adds	r7, #56	; 0x38
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}
 8013f38:	20197bdc 	.word	0x20197bdc
 8013f3c:	20197b44 	.word	0x20197b44
 8013f40:	08013c85 	.word	0x08013c85

08013f44 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b08c      	sub	sp, #48	; 0x30
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8013f50:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013f52:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013f54:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013f56:	b672      	cpsid	i
    return(int_posture);
 8013f58:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8013f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	691b      	ldr	r3, [r3, #16]
 8013f60:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8013f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d10a      	bne.n	8013f7e <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	689b      	ldr	r3, [r3, #8]
 8013f6c:	1c5a      	adds	r2, r3, #1
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	609a      	str	r2, [r3, #8]
 8013f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f74:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	f383 8810 	msr	PRIMASK, r3
}
 8013f7c:	e033      	b.n	8013fe6 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	68db      	ldr	r3, [r3, #12]
 8013f82:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8013f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f86:	3b01      	subs	r3, #1
 8013f88:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8013f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d103      	bne.n	8013f98 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	2200      	movs	r2, #0
 8013f94:	60da      	str	r2, [r3, #12]
 8013f96:	e00e      	b.n	8013fb6 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8013f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f9c:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	6a3a      	ldr	r2, [r7, #32]
 8013fa2:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fa8:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8013faa:	6a3b      	ldr	r3, [r7, #32]
 8013fac:	69fa      	ldr	r2, [r7, #28]
 8013fae:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013fb0:	69fb      	ldr	r3, [r7, #28]
 8013fb2:	6a3a      	ldr	r2, [r7, #32]
 8013fb4:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013fba:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8013fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8013fca:	4b09      	ldr	r3, [pc, #36]	; (8013ff0 <_tx_semaphore_put+0xac>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	3301      	adds	r3, #1
 8013fd0:	4a07      	ldr	r2, [pc, #28]	; (8013ff0 <_tx_semaphore_put+0xac>)
 8013fd2:	6013      	str	r3, [r2, #0]
 8013fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	f383 8810 	msr	PRIMASK, r3
}
 8013fde:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8013fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013fe2:	f000 f9bf 	bl	8014364 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8013fe6:	2300      	movs	r3, #0
}
 8013fe8:	4618      	mov	r0, r3
 8013fea:	3730      	adds	r7, #48	; 0x30
 8013fec:	46bd      	mov	sp, r7
 8013fee:	bd80      	pop	{r7, pc}
 8013ff0:	20197bdc 	.word	0x20197bdc

08013ff4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b092      	sub	sp, #72	; 0x48
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	60f8      	str	r0, [r7, #12]
 8013ffc:	60b9      	str	r1, [r7, #8]
 8013ffe:	607a      	str	r2, [r7, #4]
 8014000:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8014002:	2300      	movs	r3, #0
 8014004:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8014006:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014008:	21ef      	movs	r1, #239	; 0xef
 801400a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801400c:	f014 f8d9 	bl	80281c2 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8014010:	22b0      	movs	r2, #176	; 0xb0
 8014012:	2100      	movs	r1, #0
 8014014:	68f8      	ldr	r0, [r7, #12]
 8014016:	f014 f8d4 	bl	80281c2 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	68ba      	ldr	r2, [r7, #8]
 801401e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	683a      	ldr	r2, [r7, #0]
 801402a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014030:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014036:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801403c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014042:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801404a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014050:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	2220      	movs	r2, #32
 8014056:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801405a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801405c:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 801405e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014060:	3b01      	subs	r3, #1
 8014062:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014064:	4413      	add	r3, r2
 8014066:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801406c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 801406e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014072:	429a      	cmp	r2, r3
 8014074:	d007      	beq.n	8014086 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	2200      	movs	r2, #0
 801407a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	2200      	movs	r2, #0
 8014080:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8014084:	e006      	b.n	8014094 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801408a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014090:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	2203      	movs	r2, #3
 8014098:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	4a48      	ldr	r2, [pc, #288]	; (80141c0 <_tx_thread_create+0x1cc>)
 801409e:	655a      	str	r2, [r3, #84]	; 0x54
 80140a0:	68fa      	ldr	r2, [r7, #12]
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80140a6:	4947      	ldr	r1, [pc, #284]	; (80141c4 <_tx_thread_create+0x1d0>)
 80140a8:	68f8      	ldr	r0, [r7, #12]
 80140aa:	f7ec f9a9 	bl	8000400 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80140ae:	f3ef 8310 	mrs	r3, PRIMASK
 80140b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80140b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80140b6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80140b8:	b672      	cpsid	i
    return(int_posture);
 80140ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80140bc:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	4a41      	ldr	r2, [pc, #260]	; (80141c8 <_tx_thread_create+0x1d4>)
 80140c2:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80140c4:	4b41      	ldr	r3, [pc, #260]	; (80141cc <_tx_thread_create+0x1d8>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d10b      	bne.n	80140e4 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80140cc:	4a40      	ldr	r2, [pc, #256]	; (80141d0 <_tx_thread_create+0x1dc>)
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	68fa      	ldr	r2, [r7, #12]
 80140d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	68fa      	ldr	r2, [r7, #12]
 80140de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80140e2:	e016      	b.n	8014112 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80140e4:	4b3a      	ldr	r3, [pc, #232]	; (80141d0 <_tx_thread_create+0x1dc>)
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80140ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80140f0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80140f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140f4:	68fa      	ldr	r2, [r7, #12]
 80140f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80140fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140fc:	68fa      	ldr	r2, [r7, #12]
 80140fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014106:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801410e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8014112:	4b2e      	ldr	r3, [pc, #184]	; (80141cc <_tx_thread_create+0x1d8>)
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	3301      	adds	r3, #1
 8014118:	4a2c      	ldr	r2, [pc, #176]	; (80141cc <_tx_thread_create+0x1d8>)
 801411a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801411c:	4b2d      	ldr	r3, [pc, #180]	; (80141d4 <_tx_thread_create+0x1e0>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	3301      	adds	r3, #1
 8014122:	4a2c      	ldr	r2, [pc, #176]	; (80141d4 <_tx_thread_create+0x1e0>)
 8014124:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8014126:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014128:	2b01      	cmp	r3, #1
 801412a:	d129      	bne.n	8014180 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801412c:	f3ef 8305 	mrs	r3, IPSR
 8014130:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8014132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8014134:	4b28      	ldr	r3, [pc, #160]	; (80141d8 <_tx_thread_create+0x1e4>)
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	4313      	orrs	r3, r2
 801413a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801413e:	d30d      	bcc.n	801415c <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8014140:	4b26      	ldr	r3, [pc, #152]	; (80141dc <_tx_thread_create+0x1e8>)
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8014146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014148:	2b00      	cmp	r3, #0
 801414a:	d009      	beq.n	8014160 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 801414c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801414e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014150:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8014152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014158:	63da      	str	r2, [r3, #60]	; 0x3c
 801415a:	e001      	b.n	8014160 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 801415c:	2300      	movs	r3, #0
 801415e:	647b      	str	r3, [r7, #68]	; 0x44
 8014160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014162:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014164:	6a3b      	ldr	r3, [r7, #32]
 8014166:	f383 8810 	msr	PRIMASK, r3
}
 801416a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 801416c:	68f8      	ldr	r0, [r7, #12]
 801416e:	f000 f8f9 	bl	8014364 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8014172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014174:	2b00      	cmp	r3, #0
 8014176:	d01e      	beq.n	80141b6 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8014178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801417a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801417c:	63da      	str	r2, [r3, #60]	; 0x3c
 801417e:	e01a      	b.n	80141b6 <_tx_thread_create+0x1c2>
 8014180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014182:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014184:	693b      	ldr	r3, [r7, #16]
 8014186:	f383 8810 	msr	PRIMASK, r3
}
 801418a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801418c:	f3ef 8310 	mrs	r3, PRIMASK
 8014190:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014192:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014194:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014196:	b672      	cpsid	i
    return(int_posture);
 8014198:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 801419a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 801419c:	4b0d      	ldr	r3, [pc, #52]	; (80141d4 <_tx_thread_create+0x1e0>)
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	3b01      	subs	r3, #1
 80141a2:	4a0c      	ldr	r2, [pc, #48]	; (80141d4 <_tx_thread_create+0x1e0>)
 80141a4:	6013      	str	r3, [r2, #0]
 80141a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141a8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80141aa:	69fb      	ldr	r3, [r7, #28]
 80141ac:	f383 8810 	msr	PRIMASK, r3
}
 80141b0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80141b2:	f000 f89d 	bl	80142f0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80141b6:	2300      	movs	r3, #0
}
 80141b8:	4618      	mov	r0, r3
 80141ba:	3748      	adds	r7, #72	; 0x48
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}
 80141c0:	08014839 	.word	0x08014839
 80141c4:	08014259 	.word	0x08014259
 80141c8:	54485244 	.word	0x54485244
 80141cc:	20197b50 	.word	0x20197b50
 80141d0:	20197b4c 	.word	0x20197b4c
 80141d4:	20197bdc 	.word	0x20197bdc
 80141d8:	20000054 	.word	0x20000054
 80141dc:	20197b48 	.word	0x20197b48

080141e0 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80141e4:	4b12      	ldr	r3, [pc, #72]	; (8014230 <_tx_thread_initialize+0x50>)
 80141e6:	2200      	movs	r2, #0
 80141e8:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80141ea:	4b12      	ldr	r3, [pc, #72]	; (8014234 <_tx_thread_initialize+0x54>)
 80141ec:	2200      	movs	r2, #0
 80141ee:	601a      	str	r2, [r3, #0]
 80141f0:	4b11      	ldr	r3, [pc, #68]	; (8014238 <_tx_thread_initialize+0x58>)
 80141f2:	2200      	movs	r2, #0
 80141f4:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80141f6:	4b11      	ldr	r3, [pc, #68]	; (801423c <_tx_thread_initialize+0x5c>)
 80141f8:	2220      	movs	r2, #32
 80141fa:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80141fc:	2280      	movs	r2, #128	; 0x80
 80141fe:	2100      	movs	r1, #0
 8014200:	480f      	ldr	r0, [pc, #60]	; (8014240 <_tx_thread_initialize+0x60>)
 8014202:	f013 ffde 	bl	80281c2 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8014206:	4b0f      	ldr	r3, [pc, #60]	; (8014244 <_tx_thread_initialize+0x64>)
 8014208:	2200      	movs	r2, #0
 801420a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 801420c:	4b0e      	ldr	r3, [pc, #56]	; (8014248 <_tx_thread_initialize+0x68>)
 801420e:	2200      	movs	r2, #0
 8014210:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8014212:	4b0e      	ldr	r3, [pc, #56]	; (801424c <_tx_thread_initialize+0x6c>)
 8014214:	2200      	movs	r2, #0
 8014216:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8014218:	4b0d      	ldr	r3, [pc, #52]	; (8014250 <_tx_thread_initialize+0x70>)
 801421a:	2200      	movs	r2, #0
 801421c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 801421e:	4b0d      	ldr	r3, [pc, #52]	; (8014254 <_tx_thread_initialize+0x74>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8014226:	4a0b      	ldr	r2, [pc, #44]	; (8014254 <_tx_thread_initialize+0x74>)
 8014228:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 801422a:	bf00      	nop
 801422c:	bd80      	pop	{r7, pc}
 801422e:	bf00      	nop
 8014230:	20197b44 	.word	0x20197b44
 8014234:	20197b48 	.word	0x20197b48
 8014238:	20197b54 	.word	0x20197b54
 801423c:	20197b58 	.word	0x20197b58
 8014240:	20197b5c 	.word	0x20197b5c
 8014244:	20197b4c 	.word	0x20197b4c
 8014248:	20197b50 	.word	0x20197b50
 801424c:	20197bdc 	.word	0x20197bdc
 8014250:	20197be0 	.word	0x20197be0
 8014254:	20197be4 	.word	0x20197be4

08014258 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b088      	sub	sp, #32
 801425c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801425e:	4b21      	ldr	r3, [pc, #132]	; (80142e4 <_tx_thread_shell_entry+0x8c>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8014264:	69fb      	ldr	r3, [r7, #28]
 8014266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014268:	69fa      	ldr	r2, [r7, #28]
 801426a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801426c:	4610      	mov	r0, r2
 801426e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8014270:	4b1d      	ldr	r3, [pc, #116]	; (80142e8 <_tx_thread_shell_entry+0x90>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d003      	beq.n	8014280 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8014278:	4b1b      	ldr	r3, [pc, #108]	; (80142e8 <_tx_thread_shell_entry+0x90>)
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	69f8      	ldr	r0, [r7, #28]
 801427e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014280:	f3ef 8310 	mrs	r3, PRIMASK
 8014284:	607b      	str	r3, [r7, #4]
    return(posture);
 8014286:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8014288:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801428a:	b672      	cpsid	i
    return(int_posture);
 801428c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 801428e:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	2201      	movs	r2, #1
 8014294:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014296:	69fb      	ldr	r3, [r7, #28]
 8014298:	2201      	movs	r2, #1
 801429a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801429c:	69fb      	ldr	r3, [r7, #28]
 801429e:	2200      	movs	r2, #0
 80142a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80142a2:	4b12      	ldr	r3, [pc, #72]	; (80142ec <_tx_thread_shell_entry+0x94>)
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	3301      	adds	r3, #1
 80142a8:	4a10      	ldr	r2, [pc, #64]	; (80142ec <_tx_thread_shell_entry+0x94>)
 80142aa:	6013      	str	r3, [r2, #0]
 80142ac:	69bb      	ldr	r3, [r7, #24]
 80142ae:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80142b0:	68bb      	ldr	r3, [r7, #8]
 80142b2:	f383 8810 	msr	PRIMASK, r3
}
 80142b6:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80142b8:	f3ef 8314 	mrs	r3, CONTROL
 80142bc:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80142be:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80142c0:	617b      	str	r3, [r7, #20]
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	f023 0304 	bic.w	r3, r3, #4
 80142c8:	617b      	str	r3, [r7, #20]
 80142ca:	697b      	ldr	r3, [r7, #20]
 80142cc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80142ce:	693b      	ldr	r3, [r7, #16]
 80142d0:	f383 8814 	msr	CONTROL, r3
}
 80142d4:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80142d6:	69f8      	ldr	r0, [r7, #28]
 80142d8:	f000 f944 	bl	8014564 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80142dc:	bf00      	nop
 80142de:	3720      	adds	r7, #32
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}
 80142e4:	20197b44 	.word	0x20197b44
 80142e8:	20197be0 	.word	0x20197be0
 80142ec:	20197bdc 	.word	0x20197bdc

080142f0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80142f0:	b480      	push	{r7}
 80142f2:	b089      	sub	sp, #36	; 0x24
 80142f4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80142f6:	4b17      	ldr	r3, [pc, #92]	; (8014354 <_tx_thread_system_preempt_check+0x64>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80142fc:	69fb      	ldr	r3, [r7, #28]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d121      	bne.n	8014346 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8014302:	4b15      	ldr	r3, [pc, #84]	; (8014358 <_tx_thread_system_preempt_check+0x68>)
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8014308:	4b14      	ldr	r3, [pc, #80]	; (801435c <_tx_thread_system_preempt_check+0x6c>)
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 801430e:	69ba      	ldr	r2, [r7, #24]
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	429a      	cmp	r2, r3
 8014314:	d017      	beq.n	8014346 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8014316:	4b12      	ldr	r3, [pc, #72]	; (8014360 <_tx_thread_system_preempt_check+0x70>)
 8014318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801431c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801431e:	f3ef 8305 	mrs	r3, IPSR
 8014322:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8014324:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 8014326:	2b00      	cmp	r3, #0
 8014328:	d10c      	bne.n	8014344 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801432a:	f3ef 8310 	mrs	r3, PRIMASK
 801432e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8014330:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8014332:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8014334:	b662      	cpsie	i
}
 8014336:	bf00      	nop
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	f383 8810 	msr	PRIMASK, r3
}
 8014342:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8014344:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8014346:	bf00      	nop
 8014348:	3724      	adds	r7, #36	; 0x24
 801434a:	46bd      	mov	sp, r7
 801434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014350:	4770      	bx	lr
 8014352:	bf00      	nop
 8014354:	20197bdc 	.word	0x20197bdc
 8014358:	20197b44 	.word	0x20197b44
 801435c:	20197b48 	.word	0x20197b48
 8014360:	e000ed04 	.word	0xe000ed04

08014364 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b096      	sub	sp, #88	; 0x58
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801436c:	f3ef 8310 	mrs	r3, PRIMASK
 8014370:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8014372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8014374:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8014376:	b672      	cpsid	i
    return(int_posture);
 8014378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801437a:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014380:	2b00      	cmp	r3, #0
 8014382:	d005      	beq.n	8014390 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	334c      	adds	r3, #76	; 0x4c
 8014388:	4618      	mov	r0, r3
 801438a:	f000 fb91 	bl	8014ab0 <_tx_timer_system_deactivate>
 801438e:	e002      	b.n	8014396 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2200      	movs	r2, #0
 8014394:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8014396:	4b6c      	ldr	r3, [pc, #432]	; (8014548 <_tx_thread_system_resume+0x1e4>)
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	3b01      	subs	r3, #1
 801439c:	4a6a      	ldr	r2, [pc, #424]	; (8014548 <_tx_thread_system_resume+0x1e4>)
 801439e:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	f040 8083 	bne.w	80144b0 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	f000 8097 	beq.w	80144e2 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d172      	bne.n	80144a2 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	2200      	movs	r2, #0
 80143c0:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143c6:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80143c8:	4a60      	ldr	r2, [pc, #384]	; (801454c <_tx_thread_system_resume+0x1e8>)
 80143ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80143d0:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 80143d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d154      	bne.n	8014482 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80143d8:	495c      	ldr	r1, [pc, #368]	; (801454c <_tx_thread_system_resume+0x1e8>)
 80143da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143dc:	687a      	ldr	r2, [r7, #4]
 80143de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	687a      	ldr	r2, [r7, #4]
 80143e6:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	687a      	ldr	r2, [r7, #4]
 80143ec:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80143ee:	2201      	movs	r2, #1
 80143f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143f2:	fa02 f303 	lsl.w	r3, r2, r3
 80143f6:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80143f8:	4b55      	ldr	r3, [pc, #340]	; (8014550 <_tx_thread_system_resume+0x1ec>)
 80143fa:	681a      	ldr	r2, [r3, #0]
 80143fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143fe:	4313      	orrs	r3, r2
 8014400:	4a53      	ldr	r2, [pc, #332]	; (8014550 <_tx_thread_system_resume+0x1ec>)
 8014402:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8014404:	4b53      	ldr	r3, [pc, #332]	; (8014554 <_tx_thread_system_resume+0x1f0>)
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801440a:	429a      	cmp	r2, r3
 801440c:	d269      	bcs.n	80144e2 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 801440e:	4a51      	ldr	r2, [pc, #324]	; (8014554 <_tx_thread_system_resume+0x1f0>)
 8014410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014412:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8014414:	4b50      	ldr	r3, [pc, #320]	; (8014558 <_tx_thread_system_resume+0x1f4>)
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 801441a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801441c:	2b00      	cmp	r3, #0
 801441e:	d103      	bne.n	8014428 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8014420:	4a4d      	ldr	r2, [pc, #308]	; (8014558 <_tx_thread_system_resume+0x1f4>)
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	6013      	str	r3, [r2, #0]
 8014426:	e05c      	b.n	80144e2 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8014428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801442c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801442e:	429a      	cmp	r2, r3
 8014430:	d257      	bcs.n	80144e2 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8014432:	4a49      	ldr	r2, [pc, #292]	; (8014558 <_tx_thread_system_resume+0x1f4>)
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	6013      	str	r3, [r2, #0]
 8014438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801443a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801443e:	f383 8810 	msr	PRIMASK, r3
}
 8014442:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8014444:	4b40      	ldr	r3, [pc, #256]	; (8014548 <_tx_thread_system_resume+0x1e4>)
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 801444a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801444c:	2b00      	cmp	r3, #0
 801444e:	d174      	bne.n	801453a <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8014450:	4b42      	ldr	r3, [pc, #264]	; (801455c <_tx_thread_system_resume+0x1f8>)
 8014452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014456:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014458:	f3ef 8305 	mrs	r3, IPSR
 801445c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 801445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 8014460:	2b00      	cmp	r3, #0
 8014462:	d10c      	bne.n	801447e <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014464:	f3ef 8310 	mrs	r3, PRIMASK
 8014468:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 801446c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801446e:	b662      	cpsie	i
}
 8014470:	bf00      	nop
 8014472:	6a3b      	ldr	r3, [r7, #32]
 8014474:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014476:	69fb      	ldr	r3, [r7, #28]
 8014478:	f383 8810 	msr	PRIMASK, r3
}
 801447c:	bf00      	nop
}
 801447e:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8014480:	e05b      	b.n	801453a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8014482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014486:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8014488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801448a:	687a      	ldr	r2, [r7, #4]
 801448c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 801448e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014490:	687a      	ldr	r2, [r7, #4]
 8014492:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014498:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801449e:	621a      	str	r2, [r3, #32]
 80144a0:	e01f      	b.n	80144e2 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2200      	movs	r2, #0
 80144a6:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	2203      	movs	r2, #3
 80144ac:	631a      	str	r2, [r3, #48]	; 0x30
 80144ae:	e018      	b.n	80144e2 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144b4:	2b01      	cmp	r3, #1
 80144b6:	d014      	beq.n	80144e2 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144bc:	2b02      	cmp	r3, #2
 80144be:	d010      	beq.n	80144e2 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d106      	bne.n	80144d6 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	2200      	movs	r2, #0
 80144cc:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	2200      	movs	r2, #0
 80144d2:	631a      	str	r2, [r3, #48]	; 0x30
 80144d4:	e005      	b.n	80144e2 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	2200      	movs	r2, #0
 80144da:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	2203      	movs	r2, #3
 80144e0:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80144e2:	4b1f      	ldr	r3, [pc, #124]	; (8014560 <_tx_thread_system_resume+0x1fc>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80144e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80144ea:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80144ec:	69bb      	ldr	r3, [r7, #24]
 80144ee:	f383 8810 	msr	PRIMASK, r3
}
 80144f2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80144f4:	4b18      	ldr	r3, [pc, #96]	; (8014558 <_tx_thread_system_resume+0x1f4>)
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80144fa:	429a      	cmp	r2, r3
 80144fc:	d020      	beq.n	8014540 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80144fe:	4b12      	ldr	r3, [pc, #72]	; (8014548 <_tx_thread_system_resume+0x1e4>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8014504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014506:	2b00      	cmp	r3, #0
 8014508:	d11a      	bne.n	8014540 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801450a:	4b14      	ldr	r3, [pc, #80]	; (801455c <_tx_thread_system_resume+0x1f8>)
 801450c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014510:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014512:	f3ef 8305 	mrs	r3, IPSR
 8014516:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014518:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 801451a:	2b00      	cmp	r3, #0
 801451c:	d10f      	bne.n	801453e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801451e:	f3ef 8310 	mrs	r3, PRIMASK
 8014522:	613b      	str	r3, [r7, #16]
    return(posture);
 8014524:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8014526:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8014528:	b662      	cpsie	i
}
 801452a:	bf00      	nop
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014530:	68bb      	ldr	r3, [r7, #8]
 8014532:	f383 8810 	msr	PRIMASK, r3
}
 8014536:	bf00      	nop
}
 8014538:	e001      	b.n	801453e <_tx_thread_system_resume+0x1da>
                                return;
 801453a:	bf00      	nop
 801453c:	e000      	b.n	8014540 <_tx_thread_system_resume+0x1dc>
 801453e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8014540:	3758      	adds	r7, #88	; 0x58
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}
 8014546:	bf00      	nop
 8014548:	20197bdc 	.word	0x20197bdc
 801454c:	20197b5c 	.word	0x20197b5c
 8014550:	20197b54 	.word	0x20197b54
 8014554:	20197b58 	.word	0x20197b58
 8014558:	20197b48 	.word	0x20197b48
 801455c:	e000ed04 	.word	0xe000ed04
 8014560:	20197b44 	.word	0x20197b44

08014564 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b09e      	sub	sp, #120	; 0x78
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801456c:	4b81      	ldr	r3, [pc, #516]	; (8014774 <_tx_thread_system_suspend+0x210>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014572:	f3ef 8310 	mrs	r3, PRIMASK
 8014576:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8014578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 801457a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 801457c:	b672      	cpsid	i
    return(int_posture);
 801457e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8014580:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8014582:	687a      	ldr	r2, [r7, #4]
 8014584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014586:	429a      	cmp	r2, r3
 8014588:	d112      	bne.n	80145b0 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801458e:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8014590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014592:	2b00      	cmp	r3, #0
 8014594:	d008      	beq.n	80145a8 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8014596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014598:	f1b3 3fff 	cmp.w	r3, #4294967295
 801459c:	d004      	beq.n	80145a8 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	334c      	adds	r3, #76	; 0x4c
 80145a2:	4618      	mov	r0, r3
 80145a4:	f000 fa22 	bl	80149ec <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	69db      	ldr	r3, [r3, #28]
 80145ac:	4a72      	ldr	r2, [pc, #456]	; (8014778 <_tx_thread_system_suspend+0x214>)
 80145ae:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80145b0:	4b72      	ldr	r3, [pc, #456]	; (801477c <_tx_thread_system_suspend+0x218>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	3b01      	subs	r3, #1
 80145b6:	4a71      	ldr	r2, [pc, #452]	; (801477c <_tx_thread_system_suspend+0x218>)
 80145b8:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145be:	2b01      	cmp	r3, #1
 80145c0:	f040 80a6 	bne.w	8014710 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	2200      	movs	r2, #0
 80145c8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145ce:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	6a1b      	ldr	r3, [r3, #32]
 80145d4:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80145d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	429a      	cmp	r2, r3
 80145dc:	d015      	beq.n	801460a <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145e2:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80145e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80145e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80145e8:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80145ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80145ee:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80145f0:	4a63      	ldr	r2, [pc, #396]	; (8014780 <_tx_thread_system_suspend+0x21c>)
 80145f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80145f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80145f8:	687a      	ldr	r2, [r7, #4]
 80145fa:	429a      	cmp	r2, r3
 80145fc:	d157      	bne.n	80146ae <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80145fe:	4960      	ldr	r1, [pc, #384]	; (8014780 <_tx_thread_system_suspend+0x21c>)
 8014600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014602:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014608:	e051      	b.n	80146ae <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 801460a:	4a5d      	ldr	r2, [pc, #372]	; (8014780 <_tx_thread_system_suspend+0x21c>)
 801460c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801460e:	2100      	movs	r1, #0
 8014610:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8014614:	2201      	movs	r2, #1
 8014616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014618:	fa02 f303 	lsl.w	r3, r2, r3
 801461c:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 801461e:	4b59      	ldr	r3, [pc, #356]	; (8014784 <_tx_thread_system_suspend+0x220>)
 8014620:	681a      	ldr	r2, [r3, #0]
 8014622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014624:	43db      	mvns	r3, r3
 8014626:	4013      	ands	r3, r2
 8014628:	4a56      	ldr	r2, [pc, #344]	; (8014784 <_tx_thread_system_suspend+0x220>)
 801462a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 801462c:	2300      	movs	r3, #0
 801462e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8014630:	4b54      	ldr	r3, [pc, #336]	; (8014784 <_tx_thread_system_suspend+0x220>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8014636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014638:	2b00      	cmp	r3, #0
 801463a:	d12b      	bne.n	8014694 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801463c:	4b52      	ldr	r3, [pc, #328]	; (8014788 <_tx_thread_system_suspend+0x224>)
 801463e:	2220      	movs	r2, #32
 8014640:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8014642:	4b52      	ldr	r3, [pc, #328]	; (801478c <_tx_thread_system_suspend+0x228>)
 8014644:	2200      	movs	r2, #0
 8014646:	601a      	str	r2, [r3, #0]
 8014648:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801464a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801464c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801464e:	f383 8810 	msr	PRIMASK, r3
}
 8014652:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8014654:	4b49      	ldr	r3, [pc, #292]	; (801477c <_tx_thread_system_suspend+0x218>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 801465a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801465c:	2b00      	cmp	r3, #0
 801465e:	f040 8081 	bne.w	8014764 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8014662:	4b4b      	ldr	r3, [pc, #300]	; (8014790 <_tx_thread_system_suspend+0x22c>)
 8014664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014668:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801466a:	f3ef 8305 	mrs	r3, IPSR
 801466e:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8014670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 8014672:	2b00      	cmp	r3, #0
 8014674:	d10c      	bne.n	8014690 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014676:	f3ef 8310 	mrs	r3, PRIMASK
 801467a:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 801467c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 801467e:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8014680:	b662      	cpsie	i
}
 8014682:	bf00      	nop
 8014684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014686:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801468a:	f383 8810 	msr	PRIMASK, r3
}
 801468e:	bf00      	nop
}
 8014690:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8014692:	e067      	b.n	8014764 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8014694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014696:	fa93 f3a3 	rbit	r3, r3
 801469a:	65bb      	str	r3, [r7, #88]	; 0x58
 801469c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801469e:	fab3 f383 	clz	r3, r3
 80146a2:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80146a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80146a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80146a8:	4413      	add	r3, r2
 80146aa:	4a37      	ldr	r2, [pc, #220]	; (8014788 <_tx_thread_system_suspend+0x224>)
 80146ac:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80146ae:	4b37      	ldr	r3, [pc, #220]	; (801478c <_tx_thread_system_suspend+0x228>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	687a      	ldr	r2, [r7, #4]
 80146b4:	429a      	cmp	r2, r3
 80146b6:	d12b      	bne.n	8014710 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80146b8:	4b33      	ldr	r3, [pc, #204]	; (8014788 <_tx_thread_system_suspend+0x224>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	4a30      	ldr	r2, [pc, #192]	; (8014780 <_tx_thread_system_suspend+0x21c>)
 80146be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80146c2:	4a32      	ldr	r2, [pc, #200]	; (801478c <_tx_thread_system_suspend+0x228>)
 80146c4:	6013      	str	r3, [r2, #0]
 80146c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80146c8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80146ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146cc:	f383 8810 	msr	PRIMASK, r3
}
 80146d0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80146d2:	4b2a      	ldr	r3, [pc, #168]	; (801477c <_tx_thread_system_suspend+0x218>)
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 80146d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d144      	bne.n	8014768 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80146de:	4b2c      	ldr	r3, [pc, #176]	; (8014790 <_tx_thread_system_suspend+0x22c>)
 80146e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146e4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80146e6:	f3ef 8305 	mrs	r3, IPSR
 80146ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 80146ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d10c      	bne.n	801470c <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80146f2:	f3ef 8310 	mrs	r3, PRIMASK
 80146f6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80146f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 80146fa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 80146fc:	b662      	cpsie	i
}
 80146fe:	bf00      	nop
 8014700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014702:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014704:	6a3b      	ldr	r3, [r7, #32]
 8014706:	f383 8810 	msr	PRIMASK, r3
}
 801470a:	bf00      	nop
}
 801470c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 801470e:	e02b      	b.n	8014768 <_tx_thread_system_suspend+0x204>
 8014710:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014712:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014714:	69fb      	ldr	r3, [r7, #28]
 8014716:	f383 8810 	msr	PRIMASK, r3
}
 801471a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 801471c:	4b1b      	ldr	r3, [pc, #108]	; (801478c <_tx_thread_system_suspend+0x228>)
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014722:	429a      	cmp	r2, r3
 8014724:	d022      	beq.n	801476c <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8014726:	4b15      	ldr	r3, [pc, #84]	; (801477c <_tx_thread_system_suspend+0x218>)
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 801472c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801472e:	2b00      	cmp	r3, #0
 8014730:	d11c      	bne.n	801476c <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8014732:	4b17      	ldr	r3, [pc, #92]	; (8014790 <_tx_thread_system_suspend+0x22c>)
 8014734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014738:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801473a:	f3ef 8305 	mrs	r3, IPSR
 801473e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014740:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8014742:	2b00      	cmp	r3, #0
 8014744:	d10c      	bne.n	8014760 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014746:	f3ef 8310 	mrs	r3, PRIMASK
 801474a:	617b      	str	r3, [r7, #20]
    return(posture);
 801474c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 801474e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8014750:	b662      	cpsie	i
}
 8014752:	bf00      	nop
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	f383 8810 	msr	PRIMASK, r3
}
 801475e:	bf00      	nop
}
 8014760:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8014762:	e003      	b.n	801476c <_tx_thread_system_suspend+0x208>
                return;
 8014764:	bf00      	nop
 8014766:	e002      	b.n	801476e <_tx_thread_system_suspend+0x20a>
            return;
 8014768:	bf00      	nop
 801476a:	e000      	b.n	801476e <_tx_thread_system_suspend+0x20a>
    return;
 801476c:	bf00      	nop
}
 801476e:	3778      	adds	r7, #120	; 0x78
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}
 8014774:	20197b44 	.word	0x20197b44
 8014778:	20198148 	.word	0x20198148
 801477c:	20197bdc 	.word	0x20197bdc
 8014780:	20197b5c 	.word	0x20197b5c
 8014784:	20197b54 	.word	0x20197b54
 8014788:	20197b58 	.word	0x20197b58
 801478c:	20197b48 	.word	0x20197b48
 8014790:	e000ed04 	.word	0xe000ed04

08014794 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8014794:	b480      	push	{r7}
 8014796:	b087      	sub	sp, #28
 8014798:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801479a:	4b21      	ldr	r3, [pc, #132]	; (8014820 <_tx_thread_time_slice+0x8c>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80147a0:	f3ef 8310 	mrs	r3, PRIMASK
 80147a4:	60fb      	str	r3, [r7, #12]
    return(posture);
 80147a6:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80147a8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80147aa:	b672      	cpsid	i
    return(int_posture);
 80147ac:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80147ae:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80147b0:	4b1c      	ldr	r3, [pc, #112]	; (8014824 <_tx_thread_time_slice+0x90>)
 80147b2:	2200      	movs	r2, #0
 80147b4:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80147b6:	697b      	ldr	r3, [r7, #20]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d024      	beq.n	8014806 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80147bc:	697b      	ldr	r3, [r7, #20]
 80147be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d120      	bne.n	8014806 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80147c4:	697b      	ldr	r3, [r7, #20]
 80147c6:	69da      	ldr	r2, [r3, #28]
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 80147cc:	697b      	ldr	r3, [r7, #20]
 80147ce:	699b      	ldr	r3, [r3, #24]
 80147d0:	4a15      	ldr	r2, [pc, #84]	; (8014828 <_tx_thread_time_slice+0x94>)
 80147d2:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80147d4:	697b      	ldr	r3, [r7, #20]
 80147d6:	6a1b      	ldr	r3, [r3, #32]
 80147d8:	697a      	ldr	r2, [r7, #20]
 80147da:	429a      	cmp	r2, r3
 80147dc:	d013      	beq.n	8014806 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 80147de:	697b      	ldr	r3, [r7, #20]
 80147e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147e2:	697b      	ldr	r3, [r7, #20]
 80147e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80147e6:	429a      	cmp	r2, r3
 80147e8:	d10d      	bne.n	8014806 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80147ea:	697b      	ldr	r3, [r7, #20]
 80147ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147ee:	697a      	ldr	r2, [r7, #20]
 80147f0:	6a12      	ldr	r2, [r2, #32]
 80147f2:	490e      	ldr	r1, [pc, #56]	; (801482c <_tx_thread_time_slice+0x98>)
 80147f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80147f8:	4b0d      	ldr	r3, [pc, #52]	; (8014830 <_tx_thread_time_slice+0x9c>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	4a0b      	ldr	r2, [pc, #44]	; (801482c <_tx_thread_time_slice+0x98>)
 80147fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014802:	4a0c      	ldr	r2, [pc, #48]	; (8014834 <_tx_thread_time_slice+0xa0>)
 8014804:	6013      	str	r3, [r2, #0]
 8014806:	693b      	ldr	r3, [r7, #16]
 8014808:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	f383 8810 	msr	PRIMASK, r3
}
 8014810:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8014812:	bf00      	nop
 8014814:	371c      	adds	r7, #28
 8014816:	46bd      	mov	sp, r7
 8014818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481c:	4770      	bx	lr
 801481e:	bf00      	nop
 8014820:	20197b44 	.word	0x20197b44
 8014824:	20197bec 	.word	0x20197bec
 8014828:	20198148 	.word	0x20198148
 801482c:	20197b5c 	.word	0x20197b5c
 8014830:	20197b58 	.word	0x20197b58
 8014834:	20197b48 	.word	0x20197b48

08014838 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b08a      	sub	sp, #40	; 0x28
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014844:	f3ef 8310 	mrs	r3, PRIMASK
 8014848:	617b      	str	r3, [r7, #20]
    return(posture);
 801484a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801484c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801484e:	b672      	cpsid	i
    return(int_posture);
 8014850:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8014852:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8014854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014858:	2b04      	cmp	r3, #4
 801485a:	d10e      	bne.n	801487a <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 801485c:	4b13      	ldr	r3, [pc, #76]	; (80148ac <_tx_thread_timeout+0x74>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	3301      	adds	r3, #1
 8014862:	4a12      	ldr	r2, [pc, #72]	; (80148ac <_tx_thread_timeout+0x74>)
 8014864:	6013      	str	r3, [r2, #0]
 8014866:	6a3b      	ldr	r3, [r7, #32]
 8014868:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	f383 8810 	msr	PRIMASK, r3
}
 8014870:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8014872:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014874:	f7ff fd76 	bl	8014364 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8014878:	e013      	b.n	80148a2 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 801487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801487c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801487e:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8014880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014882:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014886:	61bb      	str	r3, [r7, #24]
 8014888:	6a3b      	ldr	r3, [r7, #32]
 801488a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801488c:	68bb      	ldr	r3, [r7, #8]
 801488e:	f383 8810 	msr	PRIMASK, r3
}
 8014892:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8014894:	69fb      	ldr	r3, [r7, #28]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d003      	beq.n	80148a2 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 801489a:	69fb      	ldr	r3, [r7, #28]
 801489c:	69b9      	ldr	r1, [r7, #24]
 801489e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148a0:	4798      	blx	r3
}
 80148a2:	bf00      	nop
 80148a4:	3728      	adds	r7, #40	; 0x28
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}
 80148aa:	bf00      	nop
 80148ac:	20197bdc 	.word	0x20197bdc

080148b0 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b084      	sub	sp, #16
 80148b4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80148b6:	f3ef 8310 	mrs	r3, PRIMASK
 80148ba:	607b      	str	r3, [r7, #4]
    return(posture);
 80148bc:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80148be:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80148c0:	b672      	cpsid	i
    return(int_posture);
 80148c2:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80148c4:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80148c6:	4b09      	ldr	r3, [pc, #36]	; (80148ec <_tx_timer_expiration_process+0x3c>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	3301      	adds	r3, #1
 80148cc:	4a07      	ldr	r2, [pc, #28]	; (80148ec <_tx_timer_expiration_process+0x3c>)
 80148ce:	6013      	str	r3, [r2, #0]
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80148d4:	68bb      	ldr	r3, [r7, #8]
 80148d6:	f383 8810 	msr	PRIMASK, r3
}
 80148da:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 80148dc:	4804      	ldr	r0, [pc, #16]	; (80148f0 <_tx_timer_expiration_process+0x40>)
 80148de:	f7ff fd41 	bl	8014364 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80148e2:	bf00      	nop
 80148e4:	3710      	adds	r7, #16
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd80      	pop	{r7, pc}
 80148ea:	bf00      	nop
 80148ec:	20197bdc 	.word	0x20197bdc
 80148f0:	20197c8c 	.word	0x20197c8c

080148f4 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 80148f4:	b590      	push	{r4, r7, lr}
 80148f6:	b089      	sub	sp, #36	; 0x24
 80148f8:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 80148fa:	4b28      	ldr	r3, [pc, #160]	; (801499c <_tx_timer_initialize+0xa8>)
 80148fc:	2200      	movs	r2, #0
 80148fe:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8014900:	4b27      	ldr	r3, [pc, #156]	; (80149a0 <_tx_timer_initialize+0xac>)
 8014902:	2200      	movs	r2, #0
 8014904:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8014906:	4b27      	ldr	r3, [pc, #156]	; (80149a4 <_tx_timer_initialize+0xb0>)
 8014908:	2200      	movs	r2, #0
 801490a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 801490c:	4b26      	ldr	r3, [pc, #152]	; (80149a8 <_tx_timer_initialize+0xb4>)
 801490e:	2200      	movs	r2, #0
 8014910:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8014912:	4b26      	ldr	r3, [pc, #152]	; (80149ac <_tx_timer_initialize+0xb8>)
 8014914:	2200      	movs	r2, #0
 8014916:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8014918:	2280      	movs	r2, #128	; 0x80
 801491a:	2100      	movs	r1, #0
 801491c:	4824      	ldr	r0, [pc, #144]	; (80149b0 <_tx_timer_initialize+0xbc>)
 801491e:	f013 fc50 	bl	80281c2 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8014922:	4b24      	ldr	r3, [pc, #144]	; (80149b4 <_tx_timer_initialize+0xc0>)
 8014924:	4a22      	ldr	r2, [pc, #136]	; (80149b0 <_tx_timer_initialize+0xbc>)
 8014926:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8014928:	4b23      	ldr	r3, [pc, #140]	; (80149b8 <_tx_timer_initialize+0xc4>)
 801492a:	4a21      	ldr	r2, [pc, #132]	; (80149b0 <_tx_timer_initialize+0xbc>)
 801492c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 801492e:	4b23      	ldr	r3, [pc, #140]	; (80149bc <_tx_timer_initialize+0xc8>)
 8014930:	4a23      	ldr	r2, [pc, #140]	; (80149c0 <_tx_timer_initialize+0xcc>)
 8014932:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8014934:	4b21      	ldr	r3, [pc, #132]	; (80149bc <_tx_timer_initialize+0xc8>)
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	3304      	adds	r3, #4
 801493a:	4a20      	ldr	r2, [pc, #128]	; (80149bc <_tx_timer_initialize+0xc8>)
 801493c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 801493e:	4b21      	ldr	r3, [pc, #132]	; (80149c4 <_tx_timer_initialize+0xd0>)
 8014940:	4a21      	ldr	r2, [pc, #132]	; (80149c8 <_tx_timer_initialize+0xd4>)
 8014942:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8014944:	4b21      	ldr	r3, [pc, #132]	; (80149cc <_tx_timer_initialize+0xd8>)
 8014946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801494a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 801494c:	4b20      	ldr	r3, [pc, #128]	; (80149d0 <_tx_timer_initialize+0xdc>)
 801494e:	2200      	movs	r2, #0
 8014950:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8014952:	4b1c      	ldr	r3, [pc, #112]	; (80149c4 <_tx_timer_initialize+0xd0>)
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	4a1d      	ldr	r2, [pc, #116]	; (80149cc <_tx_timer_initialize+0xd8>)
 8014958:	6812      	ldr	r2, [r2, #0]
 801495a:	491d      	ldr	r1, [pc, #116]	; (80149d0 <_tx_timer_initialize+0xdc>)
 801495c:	6809      	ldr	r1, [r1, #0]
 801495e:	481c      	ldr	r0, [pc, #112]	; (80149d0 <_tx_timer_initialize+0xdc>)
 8014960:	6800      	ldr	r0, [r0, #0]
 8014962:	2400      	movs	r4, #0
 8014964:	9405      	str	r4, [sp, #20]
 8014966:	2400      	movs	r4, #0
 8014968:	9404      	str	r4, [sp, #16]
 801496a:	9003      	str	r0, [sp, #12]
 801496c:	9102      	str	r1, [sp, #8]
 801496e:	9201      	str	r2, [sp, #4]
 8014970:	9300      	str	r3, [sp, #0]
 8014972:	4b18      	ldr	r3, [pc, #96]	; (80149d4 <_tx_timer_initialize+0xe0>)
 8014974:	4a18      	ldr	r2, [pc, #96]	; (80149d8 <_tx_timer_initialize+0xe4>)
 8014976:	4919      	ldr	r1, [pc, #100]	; (80149dc <_tx_timer_initialize+0xe8>)
 8014978:	4819      	ldr	r0, [pc, #100]	; (80149e0 <_tx_timer_initialize+0xec>)
 801497a:	f7ff fb3b 	bl	8013ff4 <_tx_thread_create>
 801497e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d1e5      	bne.n	8014952 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8014986:	4b17      	ldr	r3, [pc, #92]	; (80149e4 <_tx_timer_initialize+0xf0>)
 8014988:	2200      	movs	r2, #0
 801498a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 801498c:	4b16      	ldr	r3, [pc, #88]	; (80149e8 <_tx_timer_initialize+0xf4>)
 801498e:	2200      	movs	r2, #0
 8014990:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8014992:	bf00      	nop
 8014994:	370c      	adds	r7, #12
 8014996:	46bd      	mov	sp, r7
 8014998:	bd90      	pop	{r4, r7, pc}
 801499a:	bf00      	nop
 801499c:	20197be8 	.word	0x20197be8
 80149a0:	20198148 	.word	0x20198148
 80149a4:	20197bec 	.word	0x20197bec
 80149a8:	20197c7c 	.word	0x20197c7c
 80149ac:	20197c88 	.word	0x20197c88
 80149b0:	20197bf0 	.word	0x20197bf0
 80149b4:	20197c70 	.word	0x20197c70
 80149b8:	20197c78 	.word	0x20197c78
 80149bc:	20197c74 	.word	0x20197c74
 80149c0:	20197c6c 	.word	0x20197c6c
 80149c4:	20197d3c 	.word	0x20197d3c
 80149c8:	20197d48 	.word	0x20197d48
 80149cc:	20197d40 	.word	0x20197d40
 80149d0:	20197d44 	.word	0x20197d44
 80149d4:	4154494d 	.word	0x4154494d
 80149d8:	08014b21 	.word	0x08014b21
 80149dc:	08029718 	.word	0x08029718
 80149e0:	20197c8c 	.word	0x20197c8c
 80149e4:	20197c80 	.word	0x20197c80
 80149e8:	20197c84 	.word	0x20197c84

080149ec <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80149ec:	b480      	push	{r7}
 80149ee:	b089      	sub	sp, #36	; 0x24
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80149fa:	697b      	ldr	r3, [r7, #20]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d04a      	beq.n	8014a96 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8014a00:	697b      	ldr	r3, [r7, #20]
 8014a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a06:	d046      	beq.n	8014a96 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	699b      	ldr	r3, [r3, #24]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d142      	bne.n	8014a96 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8014a10:	697b      	ldr	r3, [r7, #20]
 8014a12:	2b20      	cmp	r3, #32
 8014a14:	d902      	bls.n	8014a1c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8014a16:	231f      	movs	r3, #31
 8014a18:	61bb      	str	r3, [r7, #24]
 8014a1a:	e002      	b.n	8014a22 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8014a1c:	697b      	ldr	r3, [r7, #20]
 8014a1e:	3b01      	subs	r3, #1
 8014a20:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8014a22:	4b20      	ldr	r3, [pc, #128]	; (8014aa4 <_tx_timer_system_activate+0xb8>)
 8014a24:	681a      	ldr	r2, [r3, #0]
 8014a26:	69bb      	ldr	r3, [r7, #24]
 8014a28:	009b      	lsls	r3, r3, #2
 8014a2a:	4413      	add	r3, r2
 8014a2c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8014a2e:	4b1e      	ldr	r3, [pc, #120]	; (8014aa8 <_tx_timer_system_activate+0xbc>)
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	69fa      	ldr	r2, [r7, #28]
 8014a34:	429a      	cmp	r2, r3
 8014a36:	d30b      	bcc.n	8014a50 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8014a38:	4b1b      	ldr	r3, [pc, #108]	; (8014aa8 <_tx_timer_system_activate+0xbc>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	69fa      	ldr	r2, [r7, #28]
 8014a3e:	1ad3      	subs	r3, r2, r3
 8014a40:	109b      	asrs	r3, r3, #2
 8014a42:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8014a44:	4b19      	ldr	r3, [pc, #100]	; (8014aac <_tx_timer_system_activate+0xc0>)
 8014a46:	681a      	ldr	r2, [r3, #0]
 8014a48:	693b      	ldr	r3, [r7, #16]
 8014a4a:	009b      	lsls	r3, r3, #2
 8014a4c:	4413      	add	r3, r2
 8014a4e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8014a50:	69fb      	ldr	r3, [r7, #28]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d109      	bne.n	8014a6c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	687a      	ldr	r2, [r7, #4]
 8014a5c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	687a      	ldr	r2, [r7, #4]
 8014a62:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8014a64:	69fb      	ldr	r3, [r7, #28]
 8014a66:	687a      	ldr	r2, [r7, #4]
 8014a68:	601a      	str	r2, [r3, #0]
 8014a6a:	e011      	b.n	8014a90 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8014a6c:	69fb      	ldr	r3, [r7, #28]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	695b      	ldr	r3, [r3, #20]
 8014a76:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	687a      	ldr	r2, [r7, #4]
 8014a7c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	687a      	ldr	r2, [r7, #4]
 8014a82:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	68fa      	ldr	r2, [r7, #12]
 8014a88:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	68ba      	ldr	r2, [r7, #8]
 8014a8e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	69fa      	ldr	r2, [r7, #28]
 8014a94:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8014a96:	bf00      	nop
 8014a98:	3724      	adds	r7, #36	; 0x24
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa0:	4770      	bx	lr
 8014aa2:	bf00      	nop
 8014aa4:	20197c78 	.word	0x20197c78
 8014aa8:	20197c74 	.word	0x20197c74
 8014aac:	20197c70 	.word	0x20197c70

08014ab0 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8014ab0:	b480      	push	{r7}
 8014ab2:	b087      	sub	sp, #28
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	699b      	ldr	r3, [r3, #24]
 8014abc:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d026      	beq.n	8014b12 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	691b      	ldr	r3, [r3, #16]
 8014ac8:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8014aca:	687a      	ldr	r2, [r7, #4]
 8014acc:	693b      	ldr	r3, [r7, #16]
 8014ace:	429a      	cmp	r2, r3
 8014ad0:	d108      	bne.n	8014ae4 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8014ad2:	697b      	ldr	r3, [r7, #20]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	687a      	ldr	r2, [r7, #4]
 8014ad8:	429a      	cmp	r2, r3
 8014ada:	d117      	bne.n	8014b0c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8014adc:	697b      	ldr	r3, [r7, #20]
 8014ade:	2200      	movs	r2, #0
 8014ae0:	601a      	str	r2, [r3, #0]
 8014ae2:	e013      	b.n	8014b0c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	695b      	ldr	r3, [r3, #20]
 8014ae8:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8014aea:	693b      	ldr	r3, [r7, #16]
 8014aec:	68fa      	ldr	r2, [r7, #12]
 8014aee:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	693a      	ldr	r2, [r7, #16]
 8014af4:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8014af6:	697b      	ldr	r3, [r7, #20]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	687a      	ldr	r2, [r7, #4]
 8014afc:	429a      	cmp	r2, r3
 8014afe:	d105      	bne.n	8014b0c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8014b00:	693b      	ldr	r3, [r7, #16]
 8014b02:	697a      	ldr	r2, [r7, #20]
 8014b04:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8014b06:	697b      	ldr	r3, [r7, #20]
 8014b08:	693a      	ldr	r2, [r7, #16]
 8014b0a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	2200      	movs	r2, #0
 8014b10:	619a      	str	r2, [r3, #24]
    }
}
 8014b12:	bf00      	nop
 8014b14:	371c      	adds	r7, #28
 8014b16:	46bd      	mov	sp, r7
 8014b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b1c:	4770      	bx	lr
	...

08014b20 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b098      	sub	sp, #96	; 0x60
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8014b28:	2300      	movs	r3, #0
 8014b2a:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	4a73      	ldr	r2, [pc, #460]	; (8014cfc <_tx_timer_thread_entry+0x1dc>)
 8014b30:	4293      	cmp	r3, r2
 8014b32:	f040 80de 	bne.w	8014cf2 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014b36:	f3ef 8310 	mrs	r3, PRIMASK
 8014b3a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8014b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8014b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8014b40:	b672      	cpsid	i
    return(int_posture);
 8014b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8014b44:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8014b46:	4b6e      	ldr	r3, [pc, #440]	; (8014d00 <_tx_timer_thread_entry+0x1e0>)
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d003      	beq.n	8014b5c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	f107 020c 	add.w	r2, r7, #12
 8014b5a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8014b5c:	4b68      	ldr	r3, [pc, #416]	; (8014d00 <_tx_timer_thread_entry+0x1e0>)
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	2200      	movs	r2, #0
 8014b62:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8014b64:	4b66      	ldr	r3, [pc, #408]	; (8014d00 <_tx_timer_thread_entry+0x1e0>)
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	3304      	adds	r3, #4
 8014b6a:	4a65      	ldr	r2, [pc, #404]	; (8014d00 <_tx_timer_thread_entry+0x1e0>)
 8014b6c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8014b6e:	4b64      	ldr	r3, [pc, #400]	; (8014d00 <_tx_timer_thread_entry+0x1e0>)
 8014b70:	681a      	ldr	r2, [r3, #0]
 8014b72:	4b64      	ldr	r3, [pc, #400]	; (8014d04 <_tx_timer_thread_entry+0x1e4>)
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	429a      	cmp	r2, r3
 8014b78:	d103      	bne.n	8014b82 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8014b7a:	4b63      	ldr	r3, [pc, #396]	; (8014d08 <_tx_timer_thread_entry+0x1e8>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	4a60      	ldr	r2, [pc, #384]	; (8014d00 <_tx_timer_thread_entry+0x1e0>)
 8014b80:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8014b82:	4b62      	ldr	r3, [pc, #392]	; (8014d0c <_tx_timer_thread_entry+0x1ec>)
 8014b84:	2200      	movs	r2, #0
 8014b86:	601a      	str	r2, [r3, #0]
 8014b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014b8a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b8e:	f383 8810 	msr	PRIMASK, r3
}
 8014b92:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014b94:	f3ef 8310 	mrs	r3, PRIMASK
 8014b98:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8014b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8014b9c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8014b9e:	b672      	cpsid	i
    return(int_posture);
 8014ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8014ba2:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8014ba4:	e07f      	b.n	8014ca6 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	691b      	ldr	r3, [r3, #16]
 8014bae:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8014bb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014bb8:	429a      	cmp	r2, r3
 8014bba:	d102      	bne.n	8014bc2 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	60fb      	str	r3, [r7, #12]
 8014bc0:	e00e      	b.n	8014be0 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8014bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bc4:	695b      	ldr	r3, [r3, #20]
 8014bc6:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8014bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014bca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014bcc:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8014bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014bd2:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8014bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014bd6:	f107 020c 	add.w	r2, r7, #12
 8014bda:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8014bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014bde:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8014be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	2b20      	cmp	r3, #32
 8014be6:	d911      	bls.n	8014c0c <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8014be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8014bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bf2:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8014bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bfa:	f107 0208 	add.w	r2, r7, #8
 8014bfe:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8014c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014c04:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8014c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c08:	60bb      	str	r3, [r7, #8]
 8014c0a:	e01a      	b.n	8014c42 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8014c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c0e:	689b      	ldr	r3, [r3, #8]
 8014c10:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8014c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c14:	68db      	ldr	r3, [r3, #12]
 8014c16:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8014c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c1a:	685a      	ldr	r2, [r3, #4]
 8014c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c1e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8014c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d009      	beq.n	8014c3c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8014c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c2a:	f107 0208 	add.w	r2, r7, #8
 8014c2e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8014c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014c34:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8014c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c38:	60bb      	str	r3, [r7, #8]
 8014c3a:	e002      	b.n	8014c42 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8014c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c3e:	2200      	movs	r2, #0
 8014c40:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8014c42:	4a33      	ldr	r2, [pc, #204]	; (8014d10 <_tx_timer_thread_entry+0x1f0>)
 8014c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c46:	6013      	str	r3, [r2, #0]
 8014c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c4e:	f383 8810 	msr	PRIMASK, r3
}
 8014c52:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8014c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d002      	beq.n	8014c60 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8014c5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014c5c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014c5e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014c60:	f3ef 8310 	mrs	r3, PRIMASK
 8014c64:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014c68:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8014c6a:	b672      	cpsid	i
    return(int_posture);
 8014c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8014c6e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8014c70:	4b27      	ldr	r3, [pc, #156]	; (8014d10 <_tx_timer_thread_entry+0x1f0>)
 8014c72:	2200      	movs	r2, #0
 8014c74:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8014c76:	68bb      	ldr	r3, [r7, #8]
 8014c78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d105      	bne.n	8014c8a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8014c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c80:	2200      	movs	r2, #0
 8014c82:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8014c84:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014c86:	f7ff feb1 	bl	80149ec <_tx_timer_system_activate>
 8014c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c8c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014c8e:	69bb      	ldr	r3, [r7, #24]
 8014c90:	f383 8810 	msr	PRIMASK, r3
}
 8014c94:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014c96:	f3ef 8310 	mrs	r3, PRIMASK
 8014c9a:	623b      	str	r3, [r7, #32]
    return(posture);
 8014c9c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014c9e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014ca0:	b672      	cpsid	i
    return(int_posture);
 8014ca2:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8014ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	f47f af7c 	bne.w	8014ba6 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8014cae:	4b17      	ldr	r3, [pc, #92]	; (8014d0c <_tx_timer_thread_entry+0x1ec>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d116      	bne.n	8014ce4 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8014cb6:	4b17      	ldr	r3, [pc, #92]	; (8014d14 <_tx_timer_thread_entry+0x1f4>)
 8014cb8:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8014cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cbc:	2203      	movs	r2, #3
 8014cbe:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cc2:	2201      	movs	r2, #1
 8014cc4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8014cc6:	4b14      	ldr	r3, [pc, #80]	; (8014d18 <_tx_timer_thread_entry+0x1f8>)
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	3301      	adds	r3, #1
 8014ccc:	4a12      	ldr	r2, [pc, #72]	; (8014d18 <_tx_timer_thread_entry+0x1f8>)
 8014cce:	6013      	str	r3, [r2, #0]
 8014cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014cd2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014cd4:	697b      	ldr	r3, [r7, #20]
 8014cd6:	f383 8810 	msr	PRIMASK, r3
}
 8014cda:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8014cdc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8014cde:	f7ff fc41 	bl	8014564 <_tx_thread_system_suspend>
 8014ce2:	e728      	b.n	8014b36 <_tx_timer_thread_entry+0x16>
 8014ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014ce6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014ce8:	693b      	ldr	r3, [r7, #16]
 8014cea:	f383 8810 	msr	PRIMASK, r3
}
 8014cee:	bf00      	nop
            TX_DISABLE
 8014cf0:	e721      	b.n	8014b36 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8014cf2:	bf00      	nop
 8014cf4:	3760      	adds	r7, #96	; 0x60
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}
 8014cfa:	bf00      	nop
 8014cfc:	4154494d 	.word	0x4154494d
 8014d00:	20197c78 	.word	0x20197c78
 8014d04:	20197c74 	.word	0x20197c74
 8014d08:	20197c70 	.word	0x20197c70
 8014d0c:	20197c7c 	.word	0x20197c7c
 8014d10:	20197c88 	.word	0x20197c88
 8014d14:	20197c8c 	.word	0x20197c8c
 8014d18:	20197bdc 	.word	0x20197bdc

08014d1c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b08a      	sub	sp, #40	; 0x28
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	60f8      	str	r0, [r7, #12]
 8014d24:	60b9      	str	r1, [r7, #8]
 8014d26:	607a      	str	r2, [r7, #4]
 8014d28:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d102      	bne.n	8014d3a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014d34:	2302      	movs	r3, #2
 8014d36:	627b      	str	r3, [r7, #36]	; 0x24
 8014d38:	e029      	b.n	8014d8e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	4a2d      	ldr	r2, [pc, #180]	; (8014df4 <_txe_byte_allocate+0xd8>)
 8014d40:	4293      	cmp	r3, r2
 8014d42:	d002      	beq.n	8014d4a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014d44:	2302      	movs	r3, #2
 8014d46:	627b      	str	r3, [r7, #36]	; 0x24
 8014d48:	e021      	b.n	8014d8e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8014d4a:	68bb      	ldr	r3, [r7, #8]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d102      	bne.n	8014d56 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8014d50:	2303      	movs	r3, #3
 8014d52:	627b      	str	r3, [r7, #36]	; 0x24
 8014d54:	e01b      	b.n	8014d8e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d102      	bne.n	8014d62 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8014d5c:	2305      	movs	r3, #5
 8014d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8014d60:	e015      	b.n	8014d8e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	69db      	ldr	r3, [r3, #28]
 8014d66:	687a      	ldr	r2, [r7, #4]
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	d902      	bls.n	8014d72 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8014d6c:	2305      	movs	r3, #5
 8014d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8014d70:	e00d      	b.n	8014d8e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d00a      	beq.n	8014d8e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014d78:	f3ef 8305 	mrs	r3, IPSR
 8014d7c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8014d7e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014d80:	4b1d      	ldr	r3, [pc, #116]	; (8014df8 <_txe_byte_allocate+0xdc>)
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	4313      	orrs	r3, r2
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d001      	beq.n	8014d8e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8014d8a:	2304      	movs	r3, #4
 8014d8c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8014d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d108      	bne.n	8014da6 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8014d94:	4b19      	ldr	r3, [pc, #100]	; (8014dfc <_txe_byte_allocate+0xe0>)
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8014d9a:	6a3b      	ldr	r3, [r7, #32]
 8014d9c:	4a18      	ldr	r2, [pc, #96]	; (8014e00 <_txe_byte_allocate+0xe4>)
 8014d9e:	4293      	cmp	r3, r2
 8014da0:	d101      	bne.n	8014da6 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8014da2:	2313      	movs	r3, #19
 8014da4:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8014da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d114      	bne.n	8014dd6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014dac:	f3ef 8305 	mrs	r3, IPSR
 8014db0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014db2:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014db4:	4b10      	ldr	r3, [pc, #64]	; (8014df8 <_txe_byte_allocate+0xdc>)
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	4313      	orrs	r3, r2
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d00b      	beq.n	8014dd6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014dbe:	f3ef 8305 	mrs	r3, IPSR
 8014dc2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014dc4:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014dc6:	4b0c      	ldr	r3, [pc, #48]	; (8014df8 <_txe_byte_allocate+0xdc>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	4313      	orrs	r3, r2
 8014dcc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014dd0:	d201      	bcs.n	8014dd6 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014dd2:	2313      	movs	r3, #19
 8014dd4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d106      	bne.n	8014dea <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8014ddc:	683b      	ldr	r3, [r7, #0]
 8014dde:	687a      	ldr	r2, [r7, #4]
 8014de0:	68b9      	ldr	r1, [r7, #8]
 8014de2:	68f8      	ldr	r0, [r7, #12]
 8014de4:	f7fe f80e 	bl	8012e04 <_tx_byte_allocate>
 8014de8:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8014dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014dec:	4618      	mov	r0, r3
 8014dee:	3728      	adds	r7, #40	; 0x28
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}
 8014df4:	42595445 	.word	0x42595445
 8014df8:	20000054 	.word	0x20000054
 8014dfc:	20197b44 	.word	0x20197b44
 8014e00:	20197c8c 	.word	0x20197c8c

08014e04 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b092      	sub	sp, #72	; 0x48
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	60f8      	str	r0, [r7, #12]
 8014e0c:	60b9      	str	r1, [r7, #8]
 8014e0e:	607a      	str	r2, [r7, #4]
 8014e10:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014e12:	2300      	movs	r3, #0
 8014e14:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d102      	bne.n	8014e22 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014e1c:	2302      	movs	r3, #2
 8014e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8014e20:	e075      	b.n	8014f0e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8014e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e24:	2b34      	cmp	r3, #52	; 0x34
 8014e26:	d002      	beq.n	8014e2e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014e28:	2302      	movs	r3, #2
 8014e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8014e2c:	e06f      	b.n	8014f0e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8014e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8014e36:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014e38:	b672      	cpsid	i
    return(int_posture);
 8014e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014e3c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8014e3e:	4b3b      	ldr	r3, [pc, #236]	; (8014f2c <_txe_byte_pool_create+0x128>)
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	3301      	adds	r3, #1
 8014e44:	4a39      	ldr	r2, [pc, #228]	; (8014f2c <_txe_byte_pool_create+0x128>)
 8014e46:	6013      	str	r3, [r2, #0]
 8014e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e4a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e4e:	f383 8810 	msr	PRIMASK, r3
}
 8014e52:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8014e54:	4b36      	ldr	r3, [pc, #216]	; (8014f30 <_txe_byte_pool_create+0x12c>)
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8014e5e:	e009      	b.n	8014e74 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8014e60:	68fa      	ldr	r2, [r7, #12]
 8014e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e64:	429a      	cmp	r2, r3
 8014e66:	d00b      	beq.n	8014e80 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8014e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8014e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e70:	3301      	adds	r3, #1
 8014e72:	643b      	str	r3, [r7, #64]	; 0x40
 8014e74:	4b2f      	ldr	r3, [pc, #188]	; (8014f34 <_txe_byte_pool_create+0x130>)
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014e7a:	429a      	cmp	r2, r3
 8014e7c:	d3f0      	bcc.n	8014e60 <_txe_byte_pool_create+0x5c>
 8014e7e:	e000      	b.n	8014e82 <_txe_byte_pool_create+0x7e>
                break;
 8014e80:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014e82:	f3ef 8310 	mrs	r3, PRIMASK
 8014e86:	623b      	str	r3, [r7, #32]
    return(posture);
 8014e88:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014e8a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014e8c:	b672      	cpsid	i
    return(int_posture);
 8014e8e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014e90:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014e92:	4b26      	ldr	r3, [pc, #152]	; (8014f2c <_txe_byte_pool_create+0x128>)
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	3b01      	subs	r3, #1
 8014e98:	4a24      	ldr	r2, [pc, #144]	; (8014f2c <_txe_byte_pool_create+0x128>)
 8014e9a:	6013      	str	r3, [r2, #0]
 8014e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e9e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea2:	f383 8810 	msr	PRIMASK, r3
}
 8014ea6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014ea8:	f7ff fa22 	bl	80142f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8014eac:	68fa      	ldr	r2, [r7, #12]
 8014eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014eb0:	429a      	cmp	r2, r3
 8014eb2:	d102      	bne.n	8014eba <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8014eb4:	2302      	movs	r3, #2
 8014eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8014eb8:	e029      	b.n	8014f0e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d102      	bne.n	8014ec6 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8014ec0:	2303      	movs	r3, #3
 8014ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8014ec4:	e023      	b.n	8014f0e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	2b63      	cmp	r3, #99	; 0x63
 8014eca:	d802      	bhi.n	8014ed2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8014ecc:	2305      	movs	r3, #5
 8014ece:	647b      	str	r3, [r7, #68]	; 0x44
 8014ed0:	e01d      	b.n	8014f0e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014ed2:	4b19      	ldr	r3, [pc, #100]	; (8014f38 <_txe_byte_pool_create+0x134>)
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8014ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014eda:	4a18      	ldr	r2, [pc, #96]	; (8014f3c <_txe_byte_pool_create+0x138>)
 8014edc:	4293      	cmp	r3, r2
 8014ede:	d101      	bne.n	8014ee4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014ee0:	2313      	movs	r3, #19
 8014ee2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014ee4:	f3ef 8305 	mrs	r3, IPSR
 8014ee8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014eea:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014eec:	4b14      	ldr	r3, [pc, #80]	; (8014f40 <_txe_byte_pool_create+0x13c>)
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	4313      	orrs	r3, r2
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d00b      	beq.n	8014f0e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014ef6:	f3ef 8305 	mrs	r3, IPSR
 8014efa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014efc:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014efe:	4b10      	ldr	r3, [pc, #64]	; (8014f40 <_txe_byte_pool_create+0x13c>)
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	4313      	orrs	r3, r2
 8014f04:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014f08:	d201      	bcs.n	8014f0e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8014f0a:	2313      	movs	r3, #19
 8014f0c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d106      	bne.n	8014f22 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	687a      	ldr	r2, [r7, #4]
 8014f18:	68b9      	ldr	r1, [r7, #8]
 8014f1a:	68f8      	ldr	r0, [r7, #12]
 8014f1c:	f7fe f8b4 	bl	8013088 <_tx_byte_pool_create>
 8014f20:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8014f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8014f24:	4618      	mov	r0, r3
 8014f26:	3748      	adds	r7, #72	; 0x48
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	bd80      	pop	{r7, pc}
 8014f2c:	20197bdc 	.word	0x20197bdc
 8014f30:	20197b34 	.word	0x20197b34
 8014f34:	20197b38 	.word	0x20197b38
 8014f38:	20197b44 	.word	0x20197b44
 8014f3c:	20197c8c 	.word	0x20197c8c
 8014f40:	20000054 	.word	0x20000054

08014f44 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b094      	sub	sp, #80	; 0x50
 8014f48:	af02      	add	r7, sp, #8
 8014f4a:	60f8      	str	r0, [r7, #12]
 8014f4c:	60b9      	str	r1, [r7, #8]
 8014f4e:	607a      	str	r2, [r7, #4]
 8014f50:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014f52:	2300      	movs	r3, #0
 8014f54:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d102      	bne.n	8014f62 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8014f5c:	2309      	movs	r3, #9
 8014f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8014f60:	e083      	b.n	801506a <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 8014f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f64:	2b38      	cmp	r3, #56	; 0x38
 8014f66:	d002      	beq.n	8014f6e <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8014f68:	2309      	movs	r3, #9
 8014f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8014f6c:	e07d      	b.n	801506a <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8014f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8014f76:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014f78:	b672      	cpsid	i
    return(int_posture);
 8014f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014f7c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8014f7e:	4b43      	ldr	r3, [pc, #268]	; (801508c <_txe_queue_create+0x148>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	3301      	adds	r3, #1
 8014f84:	4a41      	ldr	r2, [pc, #260]	; (801508c <_txe_queue_create+0x148>)
 8014f86:	6013      	str	r3, [r2, #0]
 8014f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f8a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f8e:	f383 8810 	msr	PRIMASK, r3
}
 8014f92:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8014f94:	4b3e      	ldr	r3, [pc, #248]	; (8015090 <_txe_queue_create+0x14c>)
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	643b      	str	r3, [r7, #64]	; 0x40
 8014f9e:	e009      	b.n	8014fb4 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 8014fa0:	68fa      	ldr	r2, [r7, #12]
 8014fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d00b      	beq.n	8014fc0 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8014fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8014fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fb0:	3301      	adds	r3, #1
 8014fb2:	643b      	str	r3, [r7, #64]	; 0x40
 8014fb4:	4b37      	ldr	r3, [pc, #220]	; (8015094 <_txe_queue_create+0x150>)
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d3f0      	bcc.n	8014fa0 <_txe_queue_create+0x5c>
 8014fbe:	e000      	b.n	8014fc2 <_txe_queue_create+0x7e>
                break;
 8014fc0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8014fc6:	623b      	str	r3, [r7, #32]
    return(posture);
 8014fc8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014fca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014fcc:	b672      	cpsid	i
    return(int_posture);
 8014fce:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014fd0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014fd2:	4b2e      	ldr	r3, [pc, #184]	; (801508c <_txe_queue_create+0x148>)
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	3b01      	subs	r3, #1
 8014fd8:	4a2c      	ldr	r2, [pc, #176]	; (801508c <_txe_queue_create+0x148>)
 8014fda:	6013      	str	r3, [r2, #0]
 8014fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fde:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe2:	f383 8810 	msr	PRIMASK, r3
}
 8014fe6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014fe8:	f7ff f982 	bl	80142f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8014fec:	68fa      	ldr	r2, [r7, #12]
 8014fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	d102      	bne.n	8014ffa <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 8014ff4:	2309      	movs	r3, #9
 8014ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8014ff8:	e037      	b.n	801506a <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 8014ffa:	683b      	ldr	r3, [r7, #0]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d102      	bne.n	8015006 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 8015000:	2303      	movs	r3, #3
 8015002:	647b      	str	r3, [r7, #68]	; 0x44
 8015004:	e031      	b.n	801506a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d102      	bne.n	8015012 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 801500c:	2305      	movs	r3, #5
 801500e:	647b      	str	r3, [r7, #68]	; 0x44
 8015010:	e02b      	b.n	801506a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	2b10      	cmp	r3, #16
 8015016:	d902      	bls.n	801501e <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8015018:	2305      	movs	r3, #5
 801501a:	647b      	str	r3, [r7, #68]	; 0x44
 801501c:	e025      	b.n	801506a <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 801501e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015020:	089b      	lsrs	r3, r3, #2
 8015022:	687a      	ldr	r2, [r7, #4]
 8015024:	429a      	cmp	r2, r3
 8015026:	d902      	bls.n	801502e <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 8015028:	2305      	movs	r3, #5
 801502a:	647b      	str	r3, [r7, #68]	; 0x44
 801502c:	e01d      	b.n	801506a <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801502e:	4b1a      	ldr	r3, [pc, #104]	; (8015098 <_txe_queue_create+0x154>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8015034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015036:	4a19      	ldr	r2, [pc, #100]	; (801509c <_txe_queue_create+0x158>)
 8015038:	4293      	cmp	r3, r2
 801503a:	d101      	bne.n	8015040 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801503c:	2313      	movs	r3, #19
 801503e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015040:	f3ef 8305 	mrs	r3, IPSR
 8015044:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015046:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015048:	4b15      	ldr	r3, [pc, #84]	; (80150a0 <_txe_queue_create+0x15c>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	4313      	orrs	r3, r2
 801504e:	2b00      	cmp	r3, #0
 8015050:	d00b      	beq.n	801506a <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015052:	f3ef 8305 	mrs	r3, IPSR
 8015056:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015058:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801505a:	4b11      	ldr	r3, [pc, #68]	; (80150a0 <_txe_queue_create+0x15c>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	4313      	orrs	r3, r2
 8015060:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015064:	d201      	bcs.n	801506a <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8015066:	2313      	movs	r3, #19
 8015068:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801506a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801506c:	2b00      	cmp	r3, #0
 801506e:	d108      	bne.n	8015082 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 8015070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015072:	9300      	str	r3, [sp, #0]
 8015074:	683b      	ldr	r3, [r7, #0]
 8015076:	687a      	ldr	r2, [r7, #4]
 8015078:	68b9      	ldr	r1, [r7, #8]
 801507a:	68f8      	ldr	r0, [r7, #12]
 801507c:	f7fe fa9a 	bl	80135b4 <_tx_queue_create>
 8015080:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8015082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8015084:	4618      	mov	r0, r3
 8015086:	3748      	adds	r7, #72	; 0x48
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}
 801508c:	20197bdc 	.word	0x20197bdc
 8015090:	20197b14 	.word	0x20197b14
 8015094:	20197b18 	.word	0x20197b18
 8015098:	20197b44 	.word	0x20197b44
 801509c:	20197c8c 	.word	0x20197c8c
 80150a0:	20000054 	.word	0x20000054

080150a4 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b088      	sub	sp, #32
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	60f8      	str	r0, [r7, #12]
 80150ac:	60b9      	str	r1, [r7, #8]
 80150ae:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80150b0:	2300      	movs	r3, #0
 80150b2:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d102      	bne.n	80150c0 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80150ba:	2309      	movs	r3, #9
 80150bc:	61fb      	str	r3, [r7, #28]
 80150be:	e025      	b.n	801510c <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	4a18      	ldr	r2, [pc, #96]	; (8015128 <_txe_queue_receive+0x84>)
 80150c6:	4293      	cmp	r3, r2
 80150c8:	d002      	beq.n	80150d0 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80150ca:	2309      	movs	r3, #9
 80150cc:	61fb      	str	r3, [r7, #28]
 80150ce:	e01d      	b.n	801510c <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d102      	bne.n	80150dc <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80150d6:	2303      	movs	r3, #3
 80150d8:	61fb      	str	r3, [r7, #28]
 80150da:	e017      	b.n	801510c <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d014      	beq.n	801510c <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80150e2:	f3ef 8305 	mrs	r3, IPSR
 80150e6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80150e8:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80150ea:	4b10      	ldr	r3, [pc, #64]	; (801512c <_txe_queue_receive+0x88>)
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	4313      	orrs	r3, r2
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d002      	beq.n	80150fa <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80150f4:	2304      	movs	r3, #4
 80150f6:	61fb      	str	r3, [r7, #28]
 80150f8:	e008      	b.n	801510c <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80150fa:	4b0d      	ldr	r3, [pc, #52]	; (8015130 <_txe_queue_receive+0x8c>)
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8015100:	69bb      	ldr	r3, [r7, #24]
 8015102:	4a0c      	ldr	r2, [pc, #48]	; (8015134 <_txe_queue_receive+0x90>)
 8015104:	4293      	cmp	r3, r2
 8015106:	d101      	bne.n	801510c <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8015108:	2304      	movs	r3, #4
 801510a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801510c:	69fb      	ldr	r3, [r7, #28]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d105      	bne.n	801511e <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 8015112:	687a      	ldr	r2, [r7, #4]
 8015114:	68b9      	ldr	r1, [r7, #8]
 8015116:	68f8      	ldr	r0, [r7, #12]
 8015118:	f7fe fac0 	bl	801369c <_tx_queue_receive>
 801511c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 801511e:	69fb      	ldr	r3, [r7, #28]
}
 8015120:	4618      	mov	r0, r3
 8015122:	3720      	adds	r7, #32
 8015124:	46bd      	mov	sp, r7
 8015126:	bd80      	pop	{r7, pc}
 8015128:	51554555 	.word	0x51554555
 801512c:	20000054 	.word	0x20000054
 8015130:	20197b44 	.word	0x20197b44
 8015134:	20197c8c 	.word	0x20197c8c

08015138 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b088      	sub	sp, #32
 801513c:	af00      	add	r7, sp, #0
 801513e:	60f8      	str	r0, [r7, #12]
 8015140:	60b9      	str	r1, [r7, #8]
 8015142:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015144:	2300      	movs	r3, #0
 8015146:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d102      	bne.n	8015154 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801514e:	2309      	movs	r3, #9
 8015150:	61fb      	str	r3, [r7, #28]
 8015152:	e025      	b.n	80151a0 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	4a18      	ldr	r2, [pc, #96]	; (80151bc <_txe_queue_send+0x84>)
 801515a:	4293      	cmp	r3, r2
 801515c:	d002      	beq.n	8015164 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801515e:	2309      	movs	r3, #9
 8015160:	61fb      	str	r3, [r7, #28]
 8015162:	e01d      	b.n	80151a0 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d102      	bne.n	8015170 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 801516a:	2303      	movs	r3, #3
 801516c:	61fb      	str	r3, [r7, #28]
 801516e:	e017      	b.n	80151a0 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d014      	beq.n	80151a0 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015176:	f3ef 8305 	mrs	r3, IPSR
 801517a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801517c:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801517e:	4b10      	ldr	r3, [pc, #64]	; (80151c0 <_txe_queue_send+0x88>)
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	4313      	orrs	r3, r2
 8015184:	2b00      	cmp	r3, #0
 8015186:	d002      	beq.n	801518e <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8015188:	2304      	movs	r3, #4
 801518a:	61fb      	str	r3, [r7, #28]
 801518c:	e008      	b.n	80151a0 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801518e:	4b0d      	ldr	r3, [pc, #52]	; (80151c4 <_txe_queue_send+0x8c>)
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8015194:	69bb      	ldr	r3, [r7, #24]
 8015196:	4a0c      	ldr	r2, [pc, #48]	; (80151c8 <_txe_queue_send+0x90>)
 8015198:	4293      	cmp	r3, r2
 801519a:	d101      	bne.n	80151a0 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801519c:	2304      	movs	r3, #4
 801519e:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80151a0:	69fb      	ldr	r3, [r7, #28]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d105      	bne.n	80151b2 <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 80151a6:	687a      	ldr	r2, [r7, #4]
 80151a8:	68b9      	ldr	r1, [r7, #8]
 80151aa:	68f8      	ldr	r0, [r7, #12]
 80151ac:	f7fe fc3e 	bl	8013a2c <_tx_queue_send>
 80151b0:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80151b2:	69fb      	ldr	r3, [r7, #28]
}
 80151b4:	4618      	mov	r0, r3
 80151b6:	3720      	adds	r7, #32
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}
 80151bc:	51554555 	.word	0x51554555
 80151c0:	20000054 	.word	0x20000054
 80151c4:	20197b44 	.word	0x20197b44
 80151c8:	20197c8c 	.word	0x20197c8c

080151cc <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b092      	sub	sp, #72	; 0x48
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	60f8      	str	r0, [r7, #12]
 80151d4:	60b9      	str	r1, [r7, #8]
 80151d6:	607a      	str	r2, [r7, #4]
 80151d8:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80151da:	2300      	movs	r3, #0
 80151dc:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d102      	bne.n	80151ea <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80151e4:	230c      	movs	r3, #12
 80151e6:	647b      	str	r3, [r7, #68]	; 0x44
 80151e8:	e054      	b.n	8015294 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 80151ea:	683b      	ldr	r3, [r7, #0]
 80151ec:	2b1c      	cmp	r3, #28
 80151ee:	d002      	beq.n	80151f6 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80151f0:	230c      	movs	r3, #12
 80151f2:	647b      	str	r3, [r7, #68]	; 0x44
 80151f4:	e04e      	b.n	8015294 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80151f6:	f3ef 8310 	mrs	r3, PRIMASK
 80151fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80151fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80151fe:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8015200:	b672      	cpsid	i
    return(int_posture);
 8015202:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8015204:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8015206:	4b36      	ldr	r3, [pc, #216]	; (80152e0 <_txe_semaphore_create+0x114>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	3301      	adds	r3, #1
 801520c:	4a34      	ldr	r2, [pc, #208]	; (80152e0 <_txe_semaphore_create+0x114>)
 801520e:	6013      	str	r3, [r2, #0]
 8015210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015212:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015216:	f383 8810 	msr	PRIMASK, r3
}
 801521a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 801521c:	4b31      	ldr	r3, [pc, #196]	; (80152e4 <_txe_semaphore_create+0x118>)
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8015222:	2300      	movs	r3, #0
 8015224:	643b      	str	r3, [r7, #64]	; 0x40
 8015226:	e009      	b.n	801523c <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8015228:	68fa      	ldr	r2, [r7, #12]
 801522a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801522c:	429a      	cmp	r2, r3
 801522e:	d00b      	beq.n	8015248 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8015230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015232:	695b      	ldr	r3, [r3, #20]
 8015234:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8015236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015238:	3301      	adds	r3, #1
 801523a:	643b      	str	r3, [r7, #64]	; 0x40
 801523c:	4b2a      	ldr	r3, [pc, #168]	; (80152e8 <_txe_semaphore_create+0x11c>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015242:	429a      	cmp	r2, r3
 8015244:	d3f0      	bcc.n	8015228 <_txe_semaphore_create+0x5c>
 8015246:	e000      	b.n	801524a <_txe_semaphore_create+0x7e>
                break;
 8015248:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801524a:	f3ef 8310 	mrs	r3, PRIMASK
 801524e:	623b      	str	r3, [r7, #32]
    return(posture);
 8015250:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015252:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015254:	b672      	cpsid	i
    return(int_posture);
 8015256:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8015258:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801525a:	4b21      	ldr	r3, [pc, #132]	; (80152e0 <_txe_semaphore_create+0x114>)
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	3b01      	subs	r3, #1
 8015260:	4a1f      	ldr	r2, [pc, #124]	; (80152e0 <_txe_semaphore_create+0x114>)
 8015262:	6013      	str	r3, [r2, #0]
 8015264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015266:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801526a:	f383 8810 	msr	PRIMASK, r3
}
 801526e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8015270:	f7ff f83e 	bl	80142f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8015274:	68fa      	ldr	r2, [r7, #12]
 8015276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015278:	429a      	cmp	r2, r3
 801527a:	d102      	bne.n	8015282 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 801527c:	230c      	movs	r3, #12
 801527e:	647b      	str	r3, [r7, #68]	; 0x44
 8015280:	e008      	b.n	8015294 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8015282:	4b1a      	ldr	r3, [pc, #104]	; (80152ec <_txe_semaphore_create+0x120>)
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8015288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801528a:	4a19      	ldr	r2, [pc, #100]	; (80152f0 <_txe_semaphore_create+0x124>)
 801528c:	4293      	cmp	r3, r2
 801528e:	d101      	bne.n	8015294 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015290:	2313      	movs	r3, #19
 8015292:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015296:	2b00      	cmp	r3, #0
 8015298:	d114      	bne.n	80152c4 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801529a:	f3ef 8305 	mrs	r3, IPSR
 801529e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80152a0:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80152a2:	4b14      	ldr	r3, [pc, #80]	; (80152f4 <_txe_semaphore_create+0x128>)
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	4313      	orrs	r3, r2
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d00b      	beq.n	80152c4 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80152ac:	f3ef 8305 	mrs	r3, IPSR
 80152b0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80152b2:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80152b4:	4b0f      	ldr	r3, [pc, #60]	; (80152f4 <_txe_semaphore_create+0x128>)
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	4313      	orrs	r3, r2
 80152ba:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80152be:	d201      	bcs.n	80152c4 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80152c0:	2313      	movs	r3, #19
 80152c2:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80152c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d105      	bne.n	80152d6 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 80152ca:	687a      	ldr	r2, [r7, #4]
 80152cc:	68b9      	ldr	r1, [r7, #8]
 80152ce:	68f8      	ldr	r0, [r7, #12]
 80152d0:	f7fe fd54 	bl	8013d7c <_tx_semaphore_create>
 80152d4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80152d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80152d8:	4618      	mov	r0, r3
 80152da:	3748      	adds	r7, #72	; 0x48
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd80      	pop	{r7, pc}
 80152e0:	20197bdc 	.word	0x20197bdc
 80152e4:	20197b0c 	.word	0x20197b0c
 80152e8:	20197b10 	.word	0x20197b10
 80152ec:	20197b44 	.word	0x20197b44
 80152f0:	20197c8c 	.word	0x20197c8c
 80152f4:	20000054 	.word	0x20000054

080152f8 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b086      	sub	sp, #24
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
 8015300:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015302:	2300      	movs	r3, #0
 8015304:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d102      	bne.n	8015312 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801530c:	230c      	movs	r3, #12
 801530e:	617b      	str	r3, [r7, #20]
 8015310:	e01f      	b.n	8015352 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	4a15      	ldr	r2, [pc, #84]	; (801536c <_txe_semaphore_get+0x74>)
 8015318:	4293      	cmp	r3, r2
 801531a:	d002      	beq.n	8015322 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801531c:	230c      	movs	r3, #12
 801531e:	617b      	str	r3, [r7, #20]
 8015320:	e017      	b.n	8015352 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8015322:	683b      	ldr	r3, [r7, #0]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d014      	beq.n	8015352 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015328:	f3ef 8305 	mrs	r3, IPSR
 801532c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801532e:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015330:	4b0f      	ldr	r3, [pc, #60]	; (8015370 <_txe_semaphore_get+0x78>)
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	4313      	orrs	r3, r2
 8015336:	2b00      	cmp	r3, #0
 8015338:	d002      	beq.n	8015340 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801533a:	2304      	movs	r3, #4
 801533c:	617b      	str	r3, [r7, #20]
 801533e:	e008      	b.n	8015352 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8015340:	4b0c      	ldr	r3, [pc, #48]	; (8015374 <_txe_semaphore_get+0x7c>)
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8015346:	693b      	ldr	r3, [r7, #16]
 8015348:	4a0b      	ldr	r2, [pc, #44]	; (8015378 <_txe_semaphore_get+0x80>)
 801534a:	4293      	cmp	r3, r2
 801534c:	d101      	bne.n	8015352 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801534e:	2304      	movs	r3, #4
 8015350:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015352:	697b      	ldr	r3, [r7, #20]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d104      	bne.n	8015362 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8015358:	6839      	ldr	r1, [r7, #0]
 801535a:	6878      	ldr	r0, [r7, #4]
 801535c:	f7fe fd60 	bl	8013e20 <_tx_semaphore_get>
 8015360:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8015362:	697b      	ldr	r3, [r7, #20]
}
 8015364:	4618      	mov	r0, r3
 8015366:	3718      	adds	r7, #24
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}
 801536c:	53454d41 	.word	0x53454d41
 8015370:	20000054 	.word	0x20000054
 8015374:	20197b44 	.word	0x20197b44
 8015378:	20197c8c 	.word	0x20197c8c

0801537c <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b084      	sub	sp, #16
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d102      	bne.n	8015390 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801538a:	230c      	movs	r3, #12
 801538c:	60fb      	str	r3, [r7, #12]
 801538e:	e00b      	b.n	80153a8 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	4a07      	ldr	r2, [pc, #28]	; (80153b4 <_txe_semaphore_put+0x38>)
 8015396:	4293      	cmp	r3, r2
 8015398:	d002      	beq.n	80153a0 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801539a:	230c      	movs	r3, #12
 801539c:	60fb      	str	r3, [r7, #12]
 801539e:	e003      	b.n	80153a8 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 80153a0:	6878      	ldr	r0, [r7, #4]
 80153a2:	f7fe fdcf 	bl	8013f44 <_tx_semaphore_put>
 80153a6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80153a8:	68fb      	ldr	r3, [r7, #12]
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3710      	adds	r7, #16
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}
 80153b2:	bf00      	nop
 80153b4:	53454d41 	.word	0x53454d41

080153b8 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b09a      	sub	sp, #104	; 0x68
 80153bc:	af06      	add	r7, sp, #24
 80153be:	60f8      	str	r0, [r7, #12]
 80153c0:	60b9      	str	r1, [r7, #8]
 80153c2:	607a      	str	r2, [r7, #4]
 80153c4:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80153c6:	2300      	movs	r3, #0
 80153c8:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d102      	bne.n	80153d6 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80153d0:	230e      	movs	r3, #14
 80153d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80153d4:	e0bb      	b.n	801554e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80153d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80153d8:	2bb0      	cmp	r3, #176	; 0xb0
 80153da:	d002      	beq.n	80153e2 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80153dc:	230e      	movs	r3, #14
 80153de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80153e0:	e0b5      	b.n	801554e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80153e2:	f3ef 8310 	mrs	r3, PRIMASK
 80153e6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80153e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80153ea:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80153ec:	b672      	cpsid	i
    return(int_posture);
 80153ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80153f0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80153f2:	4b64      	ldr	r3, [pc, #400]	; (8015584 <_txe_thread_create+0x1cc>)
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	3301      	adds	r3, #1
 80153f8:	4a62      	ldr	r2, [pc, #392]	; (8015584 <_txe_thread_create+0x1cc>)
 80153fa:	6013      	str	r3, [r2, #0]
 80153fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015402:	f383 8810 	msr	PRIMASK, r3
}
 8015406:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8015408:	2300      	movs	r3, #0
 801540a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 801540c:	4b5e      	ldr	r3, [pc, #376]	; (8015588 <_txe_thread_create+0x1d0>)
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8015412:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015414:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8015416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015418:	3b01      	subs	r3, #1
 801541a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801541c:	4413      	add	r3, r2
 801541e:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8015420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015422:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8015424:	2300      	movs	r3, #0
 8015426:	647b      	str	r3, [r7, #68]	; 0x44
 8015428:	e02b      	b.n	8015482 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 801542a:	68fa      	ldr	r2, [r7, #12]
 801542c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801542e:	429a      	cmp	r2, r3
 8015430:	d101      	bne.n	8015436 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8015432:	2301      	movs	r3, #1
 8015434:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8015436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015438:	2b01      	cmp	r3, #1
 801543a:	d028      	beq.n	801548e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 801543c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801543e:	68db      	ldr	r3, [r3, #12]
 8015440:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015442:	429a      	cmp	r2, r3
 8015444:	d308      	bcc.n	8015458 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8015446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015448:	691b      	ldr	r3, [r3, #16]
 801544a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801544c:	429a      	cmp	r2, r3
 801544e:	d203      	bcs.n	8015458 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8015450:	2300      	movs	r3, #0
 8015452:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8015454:	2301      	movs	r3, #1
 8015456:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8015458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801545a:	68db      	ldr	r3, [r3, #12]
 801545c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801545e:	429a      	cmp	r2, r3
 8015460:	d308      	bcc.n	8015474 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8015462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015464:	691b      	ldr	r3, [r3, #16]
 8015466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015468:	429a      	cmp	r2, r3
 801546a:	d203      	bcs.n	8015474 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801546c:	2300      	movs	r3, #0
 801546e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8015470:	2301      	movs	r3, #1
 8015472:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8015474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801547a:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 801547c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801547e:	3301      	adds	r3, #1
 8015480:	647b      	str	r3, [r7, #68]	; 0x44
 8015482:	4b42      	ldr	r3, [pc, #264]	; (801558c <_txe_thread_create+0x1d4>)
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015488:	429a      	cmp	r2, r3
 801548a:	d3ce      	bcc.n	801542a <_txe_thread_create+0x72>
 801548c:	e000      	b.n	8015490 <_txe_thread_create+0xd8>
                break;
 801548e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015490:	f3ef 8310 	mrs	r3, PRIMASK
 8015494:	61fb      	str	r3, [r7, #28]
    return(posture);
 8015496:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8015498:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801549a:	b672      	cpsid	i
    return(int_posture);
 801549c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801549e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80154a0:	4b38      	ldr	r3, [pc, #224]	; (8015584 <_txe_thread_create+0x1cc>)
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	3b01      	subs	r3, #1
 80154a6:	4a37      	ldr	r2, [pc, #220]	; (8015584 <_txe_thread_create+0x1cc>)
 80154a8:	6013      	str	r3, [r2, #0]
 80154aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154ac:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80154ae:	6a3b      	ldr	r3, [r7, #32]
 80154b0:	f383 8810 	msr	PRIMASK, r3
}
 80154b4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80154b6:	f7fe ff1b 	bl	80142f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80154ba:	68fa      	ldr	r2, [r7, #12]
 80154bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80154be:	429a      	cmp	r2, r3
 80154c0:	d102      	bne.n	80154c8 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80154c2:	230e      	movs	r3, #14
 80154c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80154c6:	e042      	b.n	801554e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80154c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d102      	bne.n	80154d4 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80154ce:	2303      	movs	r3, #3
 80154d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80154d2:	e03c      	b.n	801554e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d102      	bne.n	80154e0 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80154da:	2303      	movs	r3, #3
 80154dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80154de:	e036      	b.n	801554e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80154e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80154e2:	2bc7      	cmp	r3, #199	; 0xc7
 80154e4:	d802      	bhi.n	80154ec <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80154e6:	2305      	movs	r3, #5
 80154e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80154ea:	e030      	b.n	801554e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80154ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80154ee:	2b1f      	cmp	r3, #31
 80154f0:	d902      	bls.n	80154f8 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80154f2:	230f      	movs	r3, #15
 80154f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80154f6:	e02a      	b.n	801554e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80154f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80154fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80154fc:	429a      	cmp	r2, r3
 80154fe:	d902      	bls.n	8015506 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8015500:	2318      	movs	r3, #24
 8015502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015504:	e023      	b.n	801554e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8015506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015508:	2b01      	cmp	r3, #1
 801550a:	d902      	bls.n	8015512 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 801550c:	2310      	movs	r3, #16
 801550e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015510:	e01d      	b.n	801554e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8015512:	4b1f      	ldr	r3, [pc, #124]	; (8015590 <_txe_thread_create+0x1d8>)
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8015518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801551a:	4a1e      	ldr	r2, [pc, #120]	; (8015594 <_txe_thread_create+0x1dc>)
 801551c:	4293      	cmp	r3, r2
 801551e:	d101      	bne.n	8015524 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015520:	2313      	movs	r3, #19
 8015522:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015524:	f3ef 8305 	mrs	r3, IPSR
 8015528:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801552a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801552c:	4b1a      	ldr	r3, [pc, #104]	; (8015598 <_txe_thread_create+0x1e0>)
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	4313      	orrs	r3, r2
 8015532:	2b00      	cmp	r3, #0
 8015534:	d00b      	beq.n	801554e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015536:	f3ef 8305 	mrs	r3, IPSR
 801553a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801553c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801553e:	4b16      	ldr	r3, [pc, #88]	; (8015598 <_txe_thread_create+0x1e0>)
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	4313      	orrs	r3, r2
 8015544:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015548:	d201      	bcs.n	801554e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801554a:	2313      	movs	r3, #19
 801554c:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801554e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015550:	2b00      	cmp	r3, #0
 8015552:	d112      	bne.n	801557a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8015554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015556:	9305      	str	r3, [sp, #20]
 8015558:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801555a:	9304      	str	r3, [sp, #16]
 801555c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801555e:	9303      	str	r3, [sp, #12]
 8015560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015562:	9302      	str	r3, [sp, #8]
 8015564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015566:	9301      	str	r3, [sp, #4]
 8015568:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801556a:	9300      	str	r3, [sp, #0]
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	687a      	ldr	r2, [r7, #4]
 8015570:	68b9      	ldr	r1, [r7, #8]
 8015572:	68f8      	ldr	r0, [r7, #12]
 8015574:	f7fe fd3e 	bl	8013ff4 <_tx_thread_create>
 8015578:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 801557a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 801557c:	4618      	mov	r0, r3
 801557e:	3750      	adds	r7, #80	; 0x50
 8015580:	46bd      	mov	sp, r7
 8015582:	bd80      	pop	{r7, pc}
 8015584:	20197bdc 	.word	0x20197bdc
 8015588:	20197b4c 	.word	0x20197b4c
 801558c:	20197b50 	.word	0x20197b50
 8015590:	20197b44 	.word	0x20197b44
 8015594:	20197c8c 	.word	0x20197c8c
 8015598:	20000054 	.word	0x20000054

0801559c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801559c:	8880      	ldrh	r0, [r0, #4]
 801559e:	4770      	bx	lr

080155a0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80155a0:	b570      	push	{r4, r5, r6, lr}
 80155a2:	6803      	ldr	r3, [r0, #0]
 80155a4:	4605      	mov	r5, r0
 80155a6:	460c      	mov	r4, r1
 80155a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155aa:	2100      	movs	r1, #0
 80155ac:	4798      	blx	r3
 80155ae:	682b      	ldr	r3, [r5, #0]
 80155b0:	4606      	mov	r6, r0
 80155b2:	6a1b      	ldr	r3, [r3, #32]
 80155b4:	4628      	mov	r0, r5
 80155b6:	4798      	blx	r3
 80155b8:	1ba4      	subs	r4, r4, r6
 80155ba:	b2a4      	uxth	r4, r4
 80155bc:	fbb4 f0f0 	udiv	r0, r4, r0
 80155c0:	bd70      	pop	{r4, r5, r6, pc}

080155c2 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80155c2:	2300      	movs	r3, #0
 80155c4:	8083      	strh	r3, [r0, #4]
 80155c6:	4770      	bx	lr

080155c8 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80155c8:	b510      	push	{r4, lr}
 80155ca:	4604      	mov	r4, r0
 80155cc:	6803      	ldr	r3, [r0, #0]
 80155ce:	8881      	ldrh	r1, [r0, #4]
 80155d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155d2:	4798      	blx	r3
 80155d4:	88a3      	ldrh	r3, [r4, #4]
 80155d6:	3301      	adds	r3, #1
 80155d8:	80a3      	strh	r3, [r4, #4]
 80155da:	bd10      	pop	{r4, pc}

080155dc <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80155dc:	6803      	ldr	r3, [r0, #0]
 80155de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155e0:	4718      	bx	r3

080155e2 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80155e2:	4770      	bx	lr

080155e4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80155e4:	4a02      	ldr	r2, [pc, #8]	; (80155f0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80155e6:	6002      	str	r2, [r0, #0]
 80155e8:	2200      	movs	r2, #0
 80155ea:	8082      	strh	r2, [r0, #4]
 80155ec:	4770      	bx	lr
 80155ee:	bf00      	nop
 80155f0:	0802a8c4 	.word	0x0802a8c4

080155f4 <_ZN8touchgfx9Container13getFirstChildEv>:
 80155f4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80155f6:	4770      	bx	lr

080155f8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80155f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80155fa:	2000      	movs	r0, #0
 80155fc:	b12b      	cbz	r3, 801560a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80155fe:	b920      	cbnz	r0, 801560a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015600:	1a5a      	subs	r2, r3, r1
 8015602:	4250      	negs	r0, r2
 8015604:	4150      	adcs	r0, r2
 8015606:	699b      	ldr	r3, [r3, #24]
 8015608:	e7f8      	b.n	80155fc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801560a:	4770      	bx	lr

0801560c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801560c:	2300      	movs	r3, #0
 801560e:	6148      	str	r0, [r1, #20]
 8015610:	618b      	str	r3, [r1, #24]
 8015612:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015614:	b913      	cbnz	r3, 801561c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8015616:	6281      	str	r1, [r0, #40]	; 0x28
 8015618:	4770      	bx	lr
 801561a:	4613      	mov	r3, r2
 801561c:	699a      	ldr	r2, [r3, #24]
 801561e:	2a00      	cmp	r2, #0
 8015620:	d1fb      	bne.n	801561a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8015622:	6199      	str	r1, [r3, #24]
 8015624:	4770      	bx	lr

08015626 <_ZN8touchgfx9Container9removeAllEv>:
 8015626:	2200      	movs	r2, #0
 8015628:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801562a:	b123      	cbz	r3, 8015636 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801562c:	6999      	ldr	r1, [r3, #24]
 801562e:	6281      	str	r1, [r0, #40]	; 0x28
 8015630:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8015634:	e7f8      	b.n	8015628 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8015636:	4770      	bx	lr

08015638 <_ZN8touchgfx9Container6unlinkEv>:
 8015638:	2300      	movs	r3, #0
 801563a:	6283      	str	r3, [r0, #40]	; 0x28
 801563c:	4770      	bx	lr

0801563e <_ZNK8touchgfx9Container12getSolidRectEv>:
 801563e:	2200      	movs	r2, #0
 8015640:	8002      	strh	r2, [r0, #0]
 8015642:	8042      	strh	r2, [r0, #2]
 8015644:	8082      	strh	r2, [r0, #4]
 8015646:	80c2      	strh	r2, [r0, #6]
 8015648:	4770      	bx	lr

0801564a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801564a:	b570      	push	{r4, r5, r6, lr}
 801564c:	460d      	mov	r5, r1
 801564e:	4616      	mov	r6, r2
 8015650:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015652:	b13c      	cbz	r4, 8015664 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015654:	6823      	ldr	r3, [r4, #0]
 8015656:	4620      	mov	r0, r4
 8015658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801565a:	4632      	mov	r2, r6
 801565c:	4629      	mov	r1, r5
 801565e:	4798      	blx	r3
 8015660:	69a4      	ldr	r4, [r4, #24]
 8015662:	e7f6      	b.n	8015652 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015664:	bd70      	pop	{r4, r5, r6, pc}

08015666 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015666:	b538      	push	{r3, r4, r5, lr}
 8015668:	460d      	mov	r5, r1
 801566a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801566c:	b134      	cbz	r4, 801567c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801566e:	682b      	ldr	r3, [r5, #0]
 8015670:	4621      	mov	r1, r4
 8015672:	689b      	ldr	r3, [r3, #8]
 8015674:	4628      	mov	r0, r5
 8015676:	4798      	blx	r3
 8015678:	69a4      	ldr	r4, [r4, #24]
 801567a:	e7f7      	b.n	801566c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801567c:	bd38      	pop	{r3, r4, r5, pc}

0801567e <_ZN8touchgfx9ContainerD1Ev>:
 801567e:	4770      	bx	lr

08015680 <_ZN8touchgfx9ContainerD0Ev>:
 8015680:	b510      	push	{r4, lr}
 8015682:	4604      	mov	r4, r0
 8015684:	212c      	movs	r1, #44	; 0x2c
 8015686:	f012 fce4 	bl	8028052 <_ZdlPvj>
 801568a:	4620      	mov	r0, r4
 801568c:	bd10      	pop	{r4, pc}

0801568e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801568e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015690:	b19b      	cbz	r3, 80156ba <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015692:	428b      	cmp	r3, r1
 8015694:	d109      	bne.n	80156aa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015696:	2100      	movs	r1, #0
 8015698:	699a      	ldr	r2, [r3, #24]
 801569a:	6159      	str	r1, [r3, #20]
 801569c:	6282      	str	r2, [r0, #40]	; 0x28
 801569e:	b902      	cbnz	r2, 80156a2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80156a0:	4770      	bx	lr
 80156a2:	6199      	str	r1, [r3, #24]
 80156a4:	4770      	bx	lr
 80156a6:	4613      	mov	r3, r2
 80156a8:	b13a      	cbz	r2, 80156ba <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80156aa:	699a      	ldr	r2, [r3, #24]
 80156ac:	428a      	cmp	r2, r1
 80156ae:	d1fa      	bne.n	80156a6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80156b0:	698a      	ldr	r2, [r1, #24]
 80156b2:	619a      	str	r2, [r3, #24]
 80156b4:	2300      	movs	r3, #0
 80156b6:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80156ba:	4770      	bx	lr

080156bc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80156bc:	b410      	push	{r4}
 80156be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80156c0:	4604      	mov	r4, r0
 80156c2:	b92b      	cbnz	r3, 80156d0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80156c4:	6803      	ldr	r3, [r0, #0]
 80156c6:	4611      	mov	r1, r2
 80156c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80156ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156ce:	4718      	bx	r3
 80156d0:	b941      	cbnz	r1, 80156e4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80156d2:	6193      	str	r3, [r2, #24]
 80156d4:	6282      	str	r2, [r0, #40]	; 0x28
 80156d6:	6154      	str	r4, [r2, #20]
 80156d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156dc:	4770      	bx	lr
 80156de:	4603      	mov	r3, r0
 80156e0:	2800      	cmp	r0, #0
 80156e2:	d0f9      	beq.n	80156d8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80156e4:	4299      	cmp	r1, r3
 80156e6:	6998      	ldr	r0, [r3, #24]
 80156e8:	d1f9      	bne.n	80156de <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80156ea:	6190      	str	r0, [r2, #24]
 80156ec:	618a      	str	r2, [r1, #24]
 80156ee:	e7f2      	b.n	80156d6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080156f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80156f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156f4:	461f      	mov	r7, r3
 80156f6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80156fa:	460d      	mov	r5, r1
 80156fc:	4616      	mov	r6, r2
 80156fe:	b103      	cbz	r3, 8015702 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8015700:	6038      	str	r0, [r7, #0]
 8015702:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015704:	b314      	cbz	r4, 801574c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8015706:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801570a:	b1eb      	cbz	r3, 8015748 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801570c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015710:	428d      	cmp	r5, r1
 8015712:	db19      	blt.n	8015748 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015714:	8923      	ldrh	r3, [r4, #8]
 8015716:	b289      	uxth	r1, r1
 8015718:	440b      	add	r3, r1
 801571a:	b21b      	sxth	r3, r3
 801571c:	429d      	cmp	r5, r3
 801571e:	da13      	bge.n	8015748 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015720:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015724:	4296      	cmp	r6, r2
 8015726:	db0f      	blt.n	8015748 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015728:	8963      	ldrh	r3, [r4, #10]
 801572a:	b292      	uxth	r2, r2
 801572c:	4413      	add	r3, r2
 801572e:	b21b      	sxth	r3, r3
 8015730:	429e      	cmp	r6, r3
 8015732:	da09      	bge.n	8015748 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015734:	6823      	ldr	r3, [r4, #0]
 8015736:	1ab2      	subs	r2, r6, r2
 8015738:	1a69      	subs	r1, r5, r1
 801573a:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 801573e:	b212      	sxth	r2, r2
 8015740:	463b      	mov	r3, r7
 8015742:	b209      	sxth	r1, r1
 8015744:	4620      	mov	r0, r4
 8015746:	47c0      	blx	r8
 8015748:	69a4      	ldr	r4, [r4, #24]
 801574a:	e7db      	b.n	8015704 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801574c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015750 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8015750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015754:	4c6c      	ldr	r4, [pc, #432]	; (8015908 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 8015756:	b0a1      	sub	sp, #132	; 0x84
 8015758:	6824      	ldr	r4, [r4, #0]
 801575a:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801575c:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8015760:	2400      	movs	r4, #0
 8015762:	802c      	strh	r4, [r5, #0]
 8015764:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8015766:	4606      	mov	r6, r0
 8015768:	802c      	strh	r4, [r5, #0]
 801576a:	601c      	str	r4, [r3, #0]
 801576c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8015770:	9303      	str	r3, [sp, #12]
 8015772:	f7ff ffbd 	bl	80156f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8015776:	f1b9 0f03 	cmp.w	r9, #3
 801577a:	f340 80bf 	ble.w	80158fc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 801577e:	4631      	mov	r1, r6
 8015780:	a80c      	add	r0, sp, #48	; 0x30
 8015782:	f003 fa2b 	bl	8018bdc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015786:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801578a:	9306      	str	r3, [sp, #24]
 801578c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015790:	9307      	str	r3, [sp, #28]
 8015792:	9b03      	ldr	r3, [sp, #12]
 8015794:	f8d3 a000 	ldr.w	sl, [r3]
 8015798:	f1ba 0f00 	cmp.w	sl, #0
 801579c:	f000 80b1 	beq.w	8015902 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 80157a0:	4651      	mov	r1, sl
 80157a2:	a810      	add	r0, sp, #64	; 0x40
 80157a4:	f003 fa1a 	bl	8018bdc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80157a8:	2002      	movs	r0, #2
 80157aa:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80157ae:	9b01      	ldr	r3, [sp, #4]
 80157b0:	fb91 f1f0 	sdiv	r1, r1, r0
 80157b4:	9a06      	ldr	r2, [sp, #24]
 80157b6:	189d      	adds	r5, r3, r2
 80157b8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80157bc:	9a07      	ldr	r2, [sp, #28]
 80157be:	4419      	add	r1, r3
 80157c0:	9b02      	ldr	r3, [sp, #8]
 80157c2:	1a6d      	subs	r5, r5, r1
 80157c4:	4413      	add	r3, r2
 80157c6:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80157ca:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80157ce:	fb92 f2f0 	sdiv	r2, r2, r0
 80157d2:	440a      	add	r2, r1
 80157d4:	1a9b      	subs	r3, r3, r2
 80157d6:	435b      	muls	r3, r3
 80157d8:	fb05 3505 	mla	r5, r5, r5, r3
 80157dc:	4f4b      	ldr	r7, [pc, #300]	; (801590c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80157de:	ac10      	add	r4, sp, #64	; 0x40
 80157e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80157e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80157e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80157ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157ec:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80157f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80157f4:	2303      	movs	r3, #3
 80157f6:	f1b9 0f0c 	cmp.w	r9, #12
 80157fa:	bfda      	itte	le
 80157fc:	f109 32ff 	addle.w	r2, r9, #4294967295
 8015800:	fb92 f8f3 	sdivle	r8, r2, r3
 8015804:	4698      	movgt	r8, r3
 8015806:	2400      	movs	r4, #0
 8015808:	f8cd 9000 	str.w	r9, [sp]
 801580c:	1c63      	adds	r3, r4, #1
 801580e:	9308      	str	r3, [sp, #32]
 8015810:	9b00      	ldr	r3, [sp, #0]
 8015812:	f04f 0b00 	mov.w	fp, #0
 8015816:	fb93 f3f8 	sdiv	r3, r3, r8
 801581a:	f004 0401 	and.w	r4, r4, #1
 801581e:	aa10      	add	r2, sp, #64	; 0x40
 8015820:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8015824:	b29b      	uxth	r3, r3
 8015826:	3404      	adds	r4, #4
 8015828:	9304      	str	r3, [sp, #16]
 801582a:	9a04      	ldr	r2, [sp, #16]
 801582c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015830:	fb13 f302 	smulbb	r3, r3, r2
 8015834:	9a01      	ldr	r2, [sp, #4]
 8015836:	b29b      	uxth	r3, r3
 8015838:	1899      	adds	r1, r3, r2
 801583a:	9305      	str	r3, [sp, #20]
 801583c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8015840:	b209      	sxth	r1, r1
 8015842:	4299      	cmp	r1, r3
 8015844:	db4d      	blt.n	80158e2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8015846:	8932      	ldrh	r2, [r6, #8]
 8015848:	4413      	add	r3, r2
 801584a:	b21b      	sxth	r3, r3
 801584c:	4299      	cmp	r1, r3
 801584e:	da48      	bge.n	80158e2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8015850:	9b04      	ldr	r3, [sp, #16]
 8015852:	6827      	ldr	r7, [r4, #0]
 8015854:	fb17 f703 	smulbb	r7, r7, r3
 8015858:	9b02      	ldr	r3, [sp, #8]
 801585a:	b2bf      	uxth	r7, r7
 801585c:	18fa      	adds	r2, r7, r3
 801585e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8015862:	b212      	sxth	r2, r2
 8015864:	429a      	cmp	r2, r3
 8015866:	db3c      	blt.n	80158e2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8015868:	8970      	ldrh	r0, [r6, #10]
 801586a:	4403      	add	r3, r0
 801586c:	b21b      	sxth	r3, r3
 801586e:	429a      	cmp	r2, r3
 8015870:	da37      	bge.n	80158e2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8015872:	2300      	movs	r3, #0
 8015874:	4630      	mov	r0, r6
 8015876:	930b      	str	r3, [sp, #44]	; 0x2c
 8015878:	ab0b      	add	r3, sp, #44	; 0x2c
 801587a:	f7ff ff39 	bl	80156f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801587e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015880:	b37a      	cbz	r2, 80158e2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8015882:	4552      	cmp	r2, sl
 8015884:	d02d      	beq.n	80158e2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8015886:	4611      	mov	r1, r2
 8015888:	a80e      	add	r0, sp, #56	; 0x38
 801588a:	9209      	str	r2, [sp, #36]	; 0x24
 801588c:	f003 f9a6 	bl	8018bdc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015890:	f04f 0e02 	mov.w	lr, #2
 8015894:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8015898:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801589c:	fb91 f1fe 	sdiv	r1, r1, lr
 80158a0:	fb9c fcfe 	sdiv	ip, ip, lr
 80158a4:	9a06      	ldr	r2, [sp, #24]
 80158a6:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80158aa:	9b01      	ldr	r3, [sp, #4]
 80158ac:	4401      	add	r1, r0
 80158ae:	4413      	add	r3, r2
 80158b0:	1a58      	subs	r0, r3, r1
 80158b2:	9a07      	ldr	r2, [sp, #28]
 80158b4:	9b02      	ldr	r3, [sp, #8]
 80158b6:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80158ba:	4413      	add	r3, r2
 80158bc:	448c      	add	ip, r1
 80158be:	eba3 030c 	sub.w	r3, r3, ip
 80158c2:	435b      	muls	r3, r3
 80158c4:	fb00 3300 	mla	r3, r0, r0, r3
 80158c8:	42ab      	cmp	r3, r5
 80158ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80158cc:	d208      	bcs.n	80158e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 80158ce:	461d      	mov	r5, r3
 80158d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80158d2:	9803      	ldr	r0, [sp, #12]
 80158d4:	6001      	str	r1, [r0, #0]
 80158d6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80158d8:	9805      	ldr	r0, [sp, #20]
 80158da:	8008      	strh	r0, [r1, #0]
 80158dc:	992b      	ldr	r1, [sp, #172]	; 0xac
 80158de:	800f      	strh	r7, [r1, #0]
 80158e0:	4692      	mov	sl, r2
 80158e2:	f10b 0b01 	add.w	fp, fp, #1
 80158e6:	f1bb 0f04 	cmp.w	fp, #4
 80158ea:	f104 0408 	add.w	r4, r4, #8
 80158ee:	d19c      	bne.n	801582a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 80158f0:	9b00      	ldr	r3, [sp, #0]
 80158f2:	9c08      	ldr	r4, [sp, #32]
 80158f4:	444b      	add	r3, r9
 80158f6:	4544      	cmp	r4, r8
 80158f8:	9300      	str	r3, [sp, #0]
 80158fa:	d187      	bne.n	801580c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 80158fc:	b021      	add	sp, #132	; 0x84
 80158fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015902:	f04f 35ff 	mov.w	r5, #4294967295
 8015906:	e769      	b.n	80157dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8015908:	20198158 	.word	0x20198158
 801590c:	0802972c 	.word	0x0802972c

08015910 <_ZN8touchgfx4RectaNERKS0_>:
 8015910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015914:	f9b1 7000 	ldrsh.w	r7, [r1]
 8015918:	888c      	ldrh	r4, [r1, #4]
 801591a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801591e:	443c      	add	r4, r7
 8015920:	b2a4      	uxth	r4, r4
 8015922:	fa0f f884 	sxth.w	r8, r4
 8015926:	45c1      	cmp	r9, r8
 8015928:	da2f      	bge.n	801598a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801592a:	8882      	ldrh	r2, [r0, #4]
 801592c:	444a      	add	r2, r9
 801592e:	b292      	uxth	r2, r2
 8015930:	fa0f fe82 	sxth.w	lr, r2
 8015934:	4577      	cmp	r7, lr
 8015936:	da28      	bge.n	801598a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015938:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801593c:	88cb      	ldrh	r3, [r1, #6]
 801593e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015942:	442b      	add	r3, r5
 8015944:	b21b      	sxth	r3, r3
 8015946:	429e      	cmp	r6, r3
 8015948:	da1f      	bge.n	801598a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801594a:	88c3      	ldrh	r3, [r0, #6]
 801594c:	4433      	add	r3, r6
 801594e:	b29b      	uxth	r3, r3
 8015950:	fa0f fc83 	sxth.w	ip, r3
 8015954:	4565      	cmp	r5, ip
 8015956:	da18      	bge.n	801598a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015958:	454f      	cmp	r7, r9
 801595a:	bfb8      	it	lt
 801595c:	464f      	movlt	r7, r9
 801595e:	42b5      	cmp	r5, r6
 8015960:	bfb8      	it	lt
 8015962:	4635      	movlt	r5, r6
 8015964:	45f0      	cmp	r8, lr
 8015966:	bfd8      	it	le
 8015968:	4622      	movle	r2, r4
 801596a:	1bd2      	subs	r2, r2, r7
 801596c:	8082      	strh	r2, [r0, #4]
 801596e:	884a      	ldrh	r2, [r1, #2]
 8015970:	88c9      	ldrh	r1, [r1, #6]
 8015972:	8007      	strh	r7, [r0, #0]
 8015974:	440a      	add	r2, r1
 8015976:	b292      	uxth	r2, r2
 8015978:	b211      	sxth	r1, r2
 801597a:	458c      	cmp	ip, r1
 801597c:	bfa8      	it	ge
 801597e:	4613      	movge	r3, r2
 8015980:	1b5b      	subs	r3, r3, r5
 8015982:	80c3      	strh	r3, [r0, #6]
 8015984:	8045      	strh	r5, [r0, #2]
 8015986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801598a:	2300      	movs	r3, #0
 801598c:	8003      	strh	r3, [r0, #0]
 801598e:	8043      	strh	r3, [r0, #2]
 8015990:	8083      	strh	r3, [r0, #4]
 8015992:	80c3      	strh	r3, [r0, #6]
 8015994:	e7f7      	b.n	8015986 <_ZN8touchgfx4RectaNERKS0_+0x76>

08015996 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015996:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801599a:	2b00      	cmp	r3, #0
 801599c:	dd06      	ble.n	80159ac <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801599e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80159a2:	2800      	cmp	r0, #0
 80159a4:	bfcc      	ite	gt
 80159a6:	2000      	movgt	r0, #0
 80159a8:	2001      	movle	r0, #1
 80159aa:	4770      	bx	lr
 80159ac:	2001      	movs	r0, #1
 80159ae:	4770      	bx	lr

080159b0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80159b0:	2300      	movs	r3, #0
 80159b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159b6:	4604      	mov	r4, r0
 80159b8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80159ba:	8003      	strh	r3, [r0, #0]
 80159bc:	8043      	strh	r3, [r0, #2]
 80159be:	8083      	strh	r3, [r0, #4]
 80159c0:	80c3      	strh	r3, [r0, #6]
 80159c2:	2d00      	cmp	r5, #0
 80159c4:	d040      	beq.n	8015a48 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80159c6:	1d28      	adds	r0, r5, #4
 80159c8:	f7ff ffe5 	bl	8015996 <_ZNK8touchgfx4Rect7isEmptyEv>
 80159cc:	b988      	cbnz	r0, 80159f2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80159ce:	4620      	mov	r0, r4
 80159d0:	f7ff ffe1 	bl	8015996 <_ZNK8touchgfx4Rect7isEmptyEv>
 80159d4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80159d8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80159dc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80159e0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80159e4:	b138      	cbz	r0, 80159f6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80159e6:	8022      	strh	r2, [r4, #0]
 80159e8:	8063      	strh	r3, [r4, #2]
 80159ea:	f8a4 e004 	strh.w	lr, [r4, #4]
 80159ee:	f8a4 c006 	strh.w	ip, [r4, #6]
 80159f2:	69ad      	ldr	r5, [r5, #24]
 80159f4:	e7e5      	b.n	80159c2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80159f6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80159fa:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80159fe:	4290      	cmp	r0, r2
 8015a00:	4607      	mov	r7, r0
 8015a02:	bfa8      	it	ge
 8015a04:	4617      	movge	r7, r2
 8015a06:	4299      	cmp	r1, r3
 8015a08:	460e      	mov	r6, r1
 8015a0a:	bfa8      	it	ge
 8015a0c:	461e      	movge	r6, r3
 8015a0e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015a12:	4472      	add	r2, lr
 8015a14:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015a18:	4440      	add	r0, r8
 8015a1a:	4471      	add	r1, lr
 8015a1c:	4463      	add	r3, ip
 8015a1e:	b200      	sxth	r0, r0
 8015a20:	b212      	sxth	r2, r2
 8015a22:	b209      	sxth	r1, r1
 8015a24:	b21b      	sxth	r3, r3
 8015a26:	4290      	cmp	r0, r2
 8015a28:	bfac      	ite	ge
 8015a2a:	ebc7 0200 	rsbge	r2, r7, r0
 8015a2e:	ebc7 0202 	rsblt	r2, r7, r2
 8015a32:	4299      	cmp	r1, r3
 8015a34:	bfac      	ite	ge
 8015a36:	ebc6 0301 	rsbge	r3, r6, r1
 8015a3a:	ebc6 0303 	rsblt	r3, r6, r3
 8015a3e:	8027      	strh	r7, [r4, #0]
 8015a40:	8066      	strh	r6, [r4, #2]
 8015a42:	80a2      	strh	r2, [r4, #4]
 8015a44:	80e3      	strh	r3, [r4, #6]
 8015a46:	e7d4      	b.n	80159f2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015a48:	4620      	mov	r0, r4
 8015a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015a4e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015a4e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015a52:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015a56:	b383      	cbz	r3, 8015aba <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015a58:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015a5a:	b374      	cbz	r4, 8015aba <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015a5c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015a60:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015a64:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015a68:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015a6c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015a70:	b303      	cbz	r3, 8015ab4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015a72:	4668      	mov	r0, sp
 8015a74:	1d21      	adds	r1, r4, #4
 8015a76:	f8ad 5000 	strh.w	r5, [sp]
 8015a7a:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015a7e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015a82:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015a86:	f7ff ff43 	bl	8015910 <_ZN8touchgfx4RectaNERKS0_>
 8015a8a:	4668      	mov	r0, sp
 8015a8c:	f7ff ff83 	bl	8015996 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015a90:	b980      	cbnz	r0, 8015ab4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015a92:	f8bd 3000 	ldrh.w	r3, [sp]
 8015a96:	88a2      	ldrh	r2, [r4, #4]
 8015a98:	4669      	mov	r1, sp
 8015a9a:	1a9b      	subs	r3, r3, r2
 8015a9c:	f8ad 3000 	strh.w	r3, [sp]
 8015aa0:	88e2      	ldrh	r2, [r4, #6]
 8015aa2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015aa6:	4620      	mov	r0, r4
 8015aa8:	1a9b      	subs	r3, r3, r2
 8015aaa:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015aae:	6823      	ldr	r3, [r4, #0]
 8015ab0:	689b      	ldr	r3, [r3, #8]
 8015ab2:	4798      	blx	r3
 8015ab4:	69a4      	ldr	r4, [r4, #24]
 8015ab6:	2c00      	cmp	r4, #0
 8015ab8:	d1d8      	bne.n	8015a6c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015aba:	b002      	add	sp, #8
 8015abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015ac0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015ac0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ac2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015ac6:	460d      	mov	r5, r1
 8015ac8:	4616      	mov	r6, r2
 8015aca:	b323      	cbz	r3, 8015b16 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015acc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015ace:	b314      	cbz	r4, 8015b16 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015ad0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015ad4:	b1eb      	cbz	r3, 8015b12 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015ad6:	466b      	mov	r3, sp
 8015ad8:	6828      	ldr	r0, [r5, #0]
 8015ada:	6869      	ldr	r1, [r5, #4]
 8015adc:	c303      	stmia	r3!, {r0, r1}
 8015ade:	4668      	mov	r0, sp
 8015ae0:	1d21      	adds	r1, r4, #4
 8015ae2:	f7ff ff15 	bl	8015910 <_ZN8touchgfx4RectaNERKS0_>
 8015ae6:	4668      	mov	r0, sp
 8015ae8:	f7ff ff55 	bl	8015996 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015aec:	b988      	cbnz	r0, 8015b12 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015aee:	f8bd 3000 	ldrh.w	r3, [sp]
 8015af2:	88a2      	ldrh	r2, [r4, #4]
 8015af4:	4669      	mov	r1, sp
 8015af6:	1a9b      	subs	r3, r3, r2
 8015af8:	f8ad 3000 	strh.w	r3, [sp]
 8015afc:	88e2      	ldrh	r2, [r4, #6]
 8015afe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015b02:	4620      	mov	r0, r4
 8015b04:	1a9b      	subs	r3, r3, r2
 8015b06:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015b0a:	6823      	ldr	r3, [r4, #0]
 8015b0c:	4632      	mov	r2, r6
 8015b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015b10:	4798      	blx	r3
 8015b12:	69a4      	ldr	r4, [r4, #24]
 8015b14:	e7db      	b.n	8015ace <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015b16:	b002      	add	sp, #8
 8015b18:	bd70      	pop	{r4, r5, r6, pc}

08015b1a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015b1a:	b513      	push	{r0, r1, r4, lr}
 8015b1c:	6803      	ldr	r3, [r0, #0]
 8015b1e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8015b22:	2300      	movs	r3, #0
 8015b24:	e9cd 3300 	strd	r3, r3, [sp]
 8015b28:	466b      	mov	r3, sp
 8015b2a:	47a0      	blx	r4
 8015b2c:	b002      	add	sp, #8
 8015b2e:	bd10      	pop	{r4, pc}

08015b30 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015b30:	2301      	movs	r3, #1
 8015b32:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015b36:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015b3a:	4770      	bx	lr

08015b3c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015b42:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015b46:	4770      	bx	lr

08015b48 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015b48:	2201      	movs	r2, #1
 8015b4a:	6843      	ldr	r3, [r0, #4]
 8015b4c:	725a      	strb	r2, [r3, #9]
 8015b4e:	6840      	ldr	r0, [r0, #4]
 8015b50:	6803      	ldr	r3, [r0, #0]
 8015b52:	691b      	ldr	r3, [r3, #16]
 8015b54:	4718      	bx	r3

08015b56 <_ZN8touchgfx3HAL8flushDMAEv>:
 8015b56:	6840      	ldr	r0, [r0, #4]
 8015b58:	6803      	ldr	r3, [r0, #0]
 8015b5a:	689b      	ldr	r3, [r3, #8]
 8015b5c:	4718      	bx	r3

08015b5e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8015b5e:	b530      	push	{r4, r5, lr}
 8015b60:	b08b      	sub	sp, #44	; 0x2c
 8015b62:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8015b66:	6804      	ldr	r4, [r0, #0]
 8015b68:	9509      	str	r5, [sp, #36]	; 0x24
 8015b6a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8015b6e:	9508      	str	r5, [sp, #32]
 8015b70:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8015b74:	9507      	str	r5, [sp, #28]
 8015b76:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8015b7a:	9506      	str	r5, [sp, #24]
 8015b7c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8015b80:	9505      	str	r5, [sp, #20]
 8015b82:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8015b86:	9504      	str	r5, [sp, #16]
 8015b88:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8015b8c:	9503      	str	r5, [sp, #12]
 8015b8e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015b92:	9502      	str	r5, [sp, #8]
 8015b94:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8015b98:	e9cd 3500 	strd	r3, r5, [sp]
 8015b9c:	4613      	mov	r3, r2
 8015b9e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	47a0      	blx	r4
 8015ba4:	b00b      	add	sp, #44	; 0x2c
 8015ba6:	bd30      	pop	{r4, r5, pc}

08015ba8 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015ba8:	4b04      	ldr	r3, [pc, #16]	; (8015bbc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015baa:	781b      	ldrb	r3, [r3, #0]
 8015bac:	b123      	cbz	r3, 8015bb8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015bae:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015bb2:	f080 0001 	eor.w	r0, r0, #1
 8015bb6:	4770      	bx	lr
 8015bb8:	2001      	movs	r0, #1
 8015bba:	4770      	bx	lr
 8015bbc:	20198156 	.word	0x20198156

08015bc0 <_ZN8touchgfx3HAL8endFrameEv>:
 8015bc0:	b510      	push	{r4, lr}
 8015bc2:	4604      	mov	r4, r0
 8015bc4:	6840      	ldr	r0, [r0, #4]
 8015bc6:	6803      	ldr	r3, [r0, #0]
 8015bc8:	689b      	ldr	r3, [r3, #8]
 8015bca:	4798      	blx	r3
 8015bcc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015bd0:	b113      	cbz	r3, 8015bd8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015bd2:	2301      	movs	r3, #1
 8015bd4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015bd8:	bd10      	pop	{r4, pc}

08015bda <_ZN8touchgfx3HAL10initializeEv>:
 8015bda:	b510      	push	{r4, lr}
 8015bdc:	4604      	mov	r4, r0
 8015bde:	f7ec fadb 	bl	8002198 <_ZN8touchgfx10OSWrappers10initializeEv>
 8015be2:	f7ec f90d 	bl	8001e00 <_ZN8touchgfx4GPIO4initEv>
 8015be6:	6860      	ldr	r0, [r4, #4]
 8015be8:	6803      	ldr	r3, [r0, #0]
 8015bea:	68db      	ldr	r3, [r3, #12]
 8015bec:	4798      	blx	r3
 8015bee:	68e0      	ldr	r0, [r4, #12]
 8015bf0:	6803      	ldr	r3, [r0, #0]
 8015bf2:	689b      	ldr	r3, [r3, #8]
 8015bf4:	4798      	blx	r3
 8015bf6:	6823      	ldr	r3, [r4, #0]
 8015bf8:	4620      	mov	r0, r4
 8015bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015c00:	4718      	bx	r3

08015c02 <_ZN8touchgfx3HAL9taskEntryEv>:
 8015c02:	4604      	mov	r4, r0
 8015c04:	b508      	push	{r3, lr}
 8015c06:	6803      	ldr	r3, [r0, #0]
 8015c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015c0c:	4798      	blx	r3
 8015c0e:	6823      	ldr	r3, [r4, #0]
 8015c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015c12:	4620      	mov	r0, r4
 8015c14:	4798      	blx	r3
 8015c16:	f7ec fb85 	bl	8002324 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015c1a:	6823      	ldr	r3, [r4, #0]
 8015c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c1e:	e7f8      	b.n	8015c12 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08015c20 <_ZN8touchgfx3HAL4tickEv>:
 8015c20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015c22:	6803      	ldr	r3, [r0, #0]
 8015c24:	4604      	mov	r4, r0
 8015c26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015c2a:	4798      	blx	r3
 8015c2c:	4d59      	ldr	r5, [pc, #356]	; (8015d94 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8015c2e:	2800      	cmp	r0, #0
 8015c30:	f000 8095 	beq.w	8015d5e <_ZN8touchgfx3HAL4tickEv+0x13e>
 8015c34:	2600      	movs	r6, #0
 8015c36:	2001      	movs	r0, #1
 8015c38:	f7ec f8e4 	bl	8001e04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015c3c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015c40:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015c44:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015c48:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015c4c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015c50:	b133      	cbz	r3, 8015c60 <_ZN8touchgfx3HAL4tickEv+0x40>
 8015c52:	6823      	ldr	r3, [r4, #0]
 8015c54:	4620      	mov	r0, r4
 8015c56:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8015c5a:	4798      	blx	r3
 8015c5c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015c60:	2601      	movs	r6, #1
 8015c62:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015c66:	6862      	ldr	r2, [r4, #4]
 8015c68:	f083 0301 	eor.w	r3, r3, #1
 8015c6c:	7253      	strb	r3, [r2, #9]
 8015c6e:	702e      	strb	r6, [r5, #0]
 8015c70:	f001 fed4 	bl	8017a1c <_ZN8touchgfx11Application11getInstanceEv>
 8015c74:	6803      	ldr	r3, [r0, #0]
 8015c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c78:	4798      	blx	r3
 8015c7a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015c7e:	b90b      	cbnz	r3, 8015c84 <_ZN8touchgfx3HAL4tickEv+0x64>
 8015c80:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015c84:	f001 feca 	bl	8017a1c <_ZN8touchgfx11Application11getInstanceEv>
 8015c88:	6803      	ldr	r3, [r0, #0]
 8015c8a:	695b      	ldr	r3, [r3, #20]
 8015c8c:	4798      	blx	r3
 8015c8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c90:	6803      	ldr	r3, [r0, #0]
 8015c92:	691b      	ldr	r3, [r3, #16]
 8015c94:	4798      	blx	r3
 8015c96:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015c9a:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8015c9e:	3b01      	subs	r3, #1
 8015ca0:	b2db      	uxtb	r3, r3
 8015ca2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015ca6:	b10a      	cbz	r2, 8015cac <_ZN8touchgfx3HAL4tickEv+0x8c>
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d1eb      	bne.n	8015c84 <_ZN8touchgfx3HAL4tickEv+0x64>
 8015cac:	4a3a      	ldr	r2, [pc, #232]	; (8015d98 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015cae:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015cb2:	7813      	ldrb	r3, [r2, #0]
 8015cb4:	3301      	adds	r3, #1
 8015cb6:	b25b      	sxtb	r3, r3
 8015cb8:	4299      	cmp	r1, r3
 8015cba:	7013      	strb	r3, [r2, #0]
 8015cbc:	dc10      	bgt.n	8015ce0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	68e0      	ldr	r0, [r4, #12]
 8015cc2:	7013      	strb	r3, [r2, #0]
 8015cc4:	6803      	ldr	r3, [r0, #0]
 8015cc6:	aa03      	add	r2, sp, #12
 8015cc8:	68db      	ldr	r3, [r3, #12]
 8015cca:	a902      	add	r1, sp, #8
 8015ccc:	4798      	blx	r3
 8015cce:	6823      	ldr	r3, [r4, #0]
 8015cd0:	2800      	cmp	r0, #0
 8015cd2:	d050      	beq.n	8015d76 <_ZN8touchgfx3HAL4tickEv+0x156>
 8015cd4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015cd8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8015cdc:	4620      	mov	r0, r4
 8015cde:	4798      	blx	r3
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	6960      	ldr	r0, [r4, #20]
 8015ce4:	f88d 3007 	strb.w	r3, [sp, #7]
 8015ce8:	b158      	cbz	r0, 8015d02 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8015cea:	6803      	ldr	r3, [r0, #0]
 8015cec:	f10d 0107 	add.w	r1, sp, #7
 8015cf0:	68db      	ldr	r3, [r3, #12]
 8015cf2:	4798      	blx	r3
 8015cf4:	b128      	cbz	r0, 8015d02 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8015cf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015cf8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015cfc:	6803      	ldr	r3, [r0, #0]
 8015cfe:	68db      	ldr	r3, [r3, #12]
 8015d00:	4798      	blx	r3
 8015d02:	f104 001c 	add.w	r0, r4, #28
 8015d06:	f004 fc49 	bl	801a59c <_ZN8touchgfx8Gestures4tickEv>
 8015d0a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015d0e:	b30b      	cbz	r3, 8015d54 <_ZN8touchgfx3HAL4tickEv+0x134>
 8015d10:	6920      	ldr	r0, [r4, #16]
 8015d12:	6803      	ldr	r3, [r0, #0]
 8015d14:	691b      	ldr	r3, [r3, #16]
 8015d16:	4798      	blx	r3
 8015d18:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015d1a:	4606      	mov	r6, r0
 8015d1c:	b903      	cbnz	r3, 8015d20 <_ZN8touchgfx3HAL4tickEv+0x100>
 8015d1e:	6720      	str	r0, [r4, #112]	; 0x70
 8015d20:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015d22:	4a1e      	ldr	r2, [pc, #120]	; (8015d9c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015d24:	1af3      	subs	r3, r6, r3
 8015d26:	4293      	cmp	r3, r2
 8015d28:	d914      	bls.n	8015d54 <_ZN8touchgfx3HAL4tickEv+0x134>
 8015d2a:	6920      	ldr	r0, [r4, #16]
 8015d2c:	6803      	ldr	r3, [r0, #0]
 8015d2e:	699b      	ldr	r3, [r3, #24]
 8015d30:	4798      	blx	r3
 8015d32:	2264      	movs	r2, #100	; 0x64
 8015d34:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015d36:	1af3      	subs	r3, r6, r3
 8015d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d3c:	fbb0 f0f3 	udiv	r0, r0, r3
 8015d40:	2800      	cmp	r0, #0
 8015d42:	dc1d      	bgt.n	8015d80 <_ZN8touchgfx3HAL4tickEv+0x160>
 8015d44:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015d48:	6920      	ldr	r0, [r4, #16]
 8015d4a:	2100      	movs	r1, #0
 8015d4c:	6803      	ldr	r3, [r0, #0]
 8015d4e:	69db      	ldr	r3, [r3, #28]
 8015d50:	4798      	blx	r3
 8015d52:	6726      	str	r6, [r4, #112]	; 0x70
 8015d54:	f001 fe62 	bl	8017a1c <_ZN8touchgfx11Application11getInstanceEv>
 8015d58:	6803      	ldr	r3, [r0, #0]
 8015d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d5c:	4798      	blx	r3
 8015d5e:	6823      	ldr	r3, [r4, #0]
 8015d60:	4620      	mov	r0, r4
 8015d62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015d66:	4798      	blx	r3
 8015d68:	2001      	movs	r0, #1
 8015d6a:	f7ec f867 	bl	8001e3c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015d6e:	2300      	movs	r3, #0
 8015d70:	702b      	strb	r3, [r5, #0]
 8015d72:	b004      	add	sp, #16
 8015d74:	bd70      	pop	{r4, r5, r6, pc}
 8015d76:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8015d7a:	4620      	mov	r0, r4
 8015d7c:	4798      	blx	r3
 8015d7e:	e7af      	b.n	8015ce0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8015d80:	2863      	cmp	r0, #99	; 0x63
 8015d82:	bfcb      	itete	gt
 8015d84:	2300      	movgt	r3, #0
 8015d86:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015d8a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015d8e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015d92:	e7d9      	b.n	8015d48 <_ZN8touchgfx3HAL4tickEv+0x128>
 8015d94:	2019815c 	.word	0x2019815c
 8015d98:	2019815d 	.word	0x2019815d
 8015d9c:	05f5e100 	.word	0x05f5e100

08015da0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015da0:	f7ec ba62 	b.w	8002268 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015da4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015da4:	6581      	str	r1, [r0, #88]	; 0x58
 8015da6:	301c      	adds	r0, #28
 8015da8:	f004 bbf6 	b.w	801a598 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015dac <_ZN8touchgfx3HAL5touchEll>:
 8015dac:	b530      	push	{r4, r5, lr}
 8015dae:	4604      	mov	r4, r0
 8015db0:	b087      	sub	sp, #28
 8015db2:	a804      	add	r0, sp, #16
 8015db4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015db8:	f001 fc30 	bl	801761c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015dbc:	9b04      	ldr	r3, [sp, #16]
 8015dbe:	a906      	add	r1, sp, #24
 8015dc0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015dc4:	9b05      	ldr	r3, [sp, #20]
 8015dc6:	a803      	add	r0, sp, #12
 8015dc8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015dcc:	f001 fc78 	bl	80176c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015dd0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015dd4:	f104 001c 	add.w	r0, r4, #28
 8015dd8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015ddc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015de0:	b189      	cbz	r1, 8015e06 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015de2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015de6:	9300      	str	r3, [sp, #0]
 8015de8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015dec:	4613      	mov	r3, r2
 8015dee:	462a      	mov	r2, r5
 8015df0:	f004 fbe2 	bl	801a5b8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015df4:	b128      	cbz	r0, 8015e02 <_ZN8touchgfx3HAL5touchEll+0x56>
 8015df6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015dfa:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015dfc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015e00:	6623      	str	r3, [r4, #96]	; 0x60
 8015e02:	b007      	add	sp, #28
 8015e04:	bd30      	pop	{r4, r5, pc}
 8015e06:	f004 fc17 	bl	801a638 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015e0a:	2301      	movs	r3, #1
 8015e0c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015e10:	e7f1      	b.n	8015df6 <_ZN8touchgfx3HAL5touchEll+0x4a>

08015e12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015e12:	b510      	push	{r4, lr}
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d046      	beq.n	8015ea6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015e18:	ea81 0002 	eor.w	r0, r1, r2
 8015e1c:	07c4      	lsls	r4, r0, #31
 8015e1e:	d508      	bpl.n	8015e32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015e20:	440b      	add	r3, r1
 8015e22:	3a01      	subs	r2, #1
 8015e24:	428b      	cmp	r3, r1
 8015e26:	d93e      	bls.n	8015ea6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015e28:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015e2c:	f801 0b01 	strb.w	r0, [r1], #1
 8015e30:	e7f8      	b.n	8015e24 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015e32:	07d0      	lsls	r0, r2, #31
 8015e34:	bf42      	ittt	mi
 8015e36:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015e3a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015e3e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015e42:	2b01      	cmp	r3, #1
 8015e44:	d911      	bls.n	8015e6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015e46:	ea81 0402 	eor.w	r4, r1, r2
 8015e4a:	07a4      	lsls	r4, r4, #30
 8015e4c:	4610      	mov	r0, r2
 8015e4e:	d022      	beq.n	8015e96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8015e50:	f023 0401 	bic.w	r4, r3, #1
 8015e54:	440c      	add	r4, r1
 8015e56:	428c      	cmp	r4, r1
 8015e58:	4602      	mov	r2, r0
 8015e5a:	d904      	bls.n	8015e66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8015e5c:	8812      	ldrh	r2, [r2, #0]
 8015e5e:	3002      	adds	r0, #2
 8015e60:	f821 2b02 	strh.w	r2, [r1], #2
 8015e64:	e7f7      	b.n	8015e56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8015e66:	f003 0301 	and.w	r3, r3, #1
 8015e6a:	f023 0003 	bic.w	r0, r3, #3
 8015e6e:	4408      	add	r0, r1
 8015e70:	4288      	cmp	r0, r1
 8015e72:	4614      	mov	r4, r2
 8015e74:	d904      	bls.n	8015e80 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8015e76:	6824      	ldr	r4, [r4, #0]
 8015e78:	3204      	adds	r2, #4
 8015e7a:	f841 4b04 	str.w	r4, [r1], #4
 8015e7e:	e7f7      	b.n	8015e70 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8015e80:	f003 0303 	and.w	r3, r3, #3
 8015e84:	440b      	add	r3, r1
 8015e86:	3a01      	subs	r2, #1
 8015e88:	428b      	cmp	r3, r1
 8015e8a:	d90c      	bls.n	8015ea6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015e8c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015e90:	f801 0b01 	strb.w	r0, [r1], #1
 8015e94:	e7f8      	b.n	8015e88 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8015e96:	0790      	lsls	r0, r2, #30
 8015e98:	d0e7      	beq.n	8015e6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015e9a:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015e9e:	3b02      	subs	r3, #2
 8015ea0:	f821 0b02 	strh.w	r0, [r1], #2
 8015ea4:	e7e1      	b.n	8015e6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015ea6:	2001      	movs	r0, #1
 8015ea8:	bd10      	pop	{r4, pc}

08015eaa <_ZN8touchgfx3HAL7noTouchEv>:
 8015eaa:	b510      	push	{r4, lr}
 8015eac:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8015eb0:	4604      	mov	r4, r0
 8015eb2:	b153      	cbz	r3, 8015eca <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015eb4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8015eb8:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8015ebc:	2101      	movs	r1, #1
 8015ebe:	301c      	adds	r0, #28
 8015ec0:	f004 fbba 	bl	801a638 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015eca:	bd10      	pop	{r4, pc}

08015ecc <_ZN8touchgfx8Drawable5setXYEss>:
 8015ecc:	b570      	push	{r4, r5, r6, lr}
 8015ece:	4604      	mov	r4, r0
 8015ed0:	4615      	mov	r5, r2
 8015ed2:	6803      	ldr	r3, [r0, #0]
 8015ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ed6:	4798      	blx	r3
 8015ed8:	6823      	ldr	r3, [r4, #0]
 8015eda:	4629      	mov	r1, r5
 8015edc:	4620      	mov	r0, r4
 8015ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ee4:	4718      	bx	r3
	...

08015ee8 <_ZN8touchgfx3HAL3lcdEv>:
 8015ee8:	4b04      	ldr	r3, [pc, #16]	; (8015efc <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015ef0:	b10a      	cbz	r2, 8015ef6 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8015ef2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015ef4:	b900      	cbnz	r0, 8015ef8 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8015ef6:	6898      	ldr	r0, [r3, #8]
 8015ef8:	4770      	bx	lr
 8015efa:	bf00      	nop
 8015efc:	20198158 	.word	0x20198158

08015f00 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f04:	4604      	mov	r4, r0
 8015f06:	2000      	movs	r0, #0
 8015f08:	b085      	sub	sp, #20
 8015f0a:	ad04      	add	r5, sp, #16
 8015f0c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8015f10:	69a0      	ldr	r0, [r4, #24]
 8015f12:	4699      	mov	r9, r3
 8015f14:	6806      	ldr	r6, [r0, #0]
 8015f16:	9501      	str	r5, [sp, #4]
 8015f18:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8015f1c:	460f      	mov	r7, r1
 8015f1e:	9500      	str	r5, [sp, #0]
 8015f20:	6835      	ldr	r5, [r6, #0]
 8015f22:	4690      	mov	r8, r2
 8015f24:	47a8      	blx	r5
 8015f26:	4d10      	ldr	r5, [pc, #64]	; (8015f68 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8015f28:	4606      	mov	r6, r0
 8015f2a:	f8a5 9000 	strh.w	r9, [r5]
 8015f2e:	f7ff ffdb 	bl	8015ee8 <_ZN8touchgfx3HAL3lcdEv>
 8015f32:	6803      	ldr	r3, [r0, #0]
 8015f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f36:	4798      	blx	r3
 8015f38:	b128      	cbz	r0, 8015f46 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8015f3a:	2801      	cmp	r0, #1
 8015f3c:	d00b      	beq.n	8015f56 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8015f3e:	4630      	mov	r0, r6
 8015f40:	b005      	add	sp, #20
 8015f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f46:	882b      	ldrh	r3, [r5, #0]
 8015f48:	fb08 7203 	mla	r2, r8, r3, r7
 8015f4c:	9b03      	ldr	r3, [sp, #12]
 8015f4e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015f52:	63e3      	str	r3, [r4, #60]	; 0x3c
 8015f54:	e7f3      	b.n	8015f3e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015f56:	882a      	ldrh	r2, [r5, #0]
 8015f58:	9b03      	ldr	r3, [sp, #12]
 8015f5a:	fb08 7202 	mla	r2, r8, r2, r7
 8015f5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015f62:	1a9a      	subs	r2, r3, r2
 8015f64:	63e2      	str	r2, [r4, #60]	; 0x3c
 8015f66:	e7ea      	b.n	8015f3e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015f68:	20198152 	.word	0x20198152

08015f6c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8015f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f6e:	b08b      	sub	sp, #44	; 0x2c
 8015f70:	4617      	mov	r7, r2
 8015f72:	4604      	mov	r4, r0
 8015f74:	460e      	mov	r6, r1
 8015f76:	461d      	mov	r5, r3
 8015f78:	f7ff ffb6 	bl	8015ee8 <_ZN8touchgfx3HAL3lcdEv>
 8015f7c:	6803      	ldr	r3, [r0, #0]
 8015f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f80:	4798      	blx	r3
 8015f82:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8015f86:	9007      	str	r0, [sp, #28]
 8015f88:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015f8c:	4b0d      	ldr	r3, [pc, #52]	; (8015fc4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8015f8e:	6822      	ldr	r2, [r4, #0]
 8015f90:	881b      	ldrh	r3, [r3, #0]
 8015f92:	4631      	mov	r1, r6
 8015f94:	9306      	str	r3, [sp, #24]
 8015f96:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	9305      	str	r3, [sp, #20]
 8015f9e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015fa2:	9304      	str	r3, [sp, #16]
 8015fa4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015fa8:	9303      	str	r3, [sp, #12]
 8015faa:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015fae:	9302      	str	r3, [sp, #8]
 8015fb0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015fb4:	e9cd 5300 	strd	r5, r3, [sp]
 8015fb8:	463b      	mov	r3, r7
 8015fba:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	47a8      	blx	r5
 8015fc0:	b00b      	add	sp, #44	; 0x2c
 8015fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fc4:	20198152 	.word	0x20198152

08015fc8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8015fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015fcc:	4698      	mov	r8, r3
 8015fce:	6803      	ldr	r3, [r0, #0]
 8015fd0:	b08b      	sub	sp, #44	; 0x2c
 8015fd2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8015fd4:	4b14      	ldr	r3, [pc, #80]	; (8016028 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8015fd6:	4617      	mov	r7, r2
 8015fd8:	f8b3 9000 	ldrh.w	r9, [r3]
 8015fdc:	460e      	mov	r6, r1
 8015fde:	4604      	mov	r4, r0
 8015fe0:	f7ff ff82 	bl	8015ee8 <_ZN8touchgfx3HAL3lcdEv>
 8015fe4:	6803      	ldr	r3, [r0, #0]
 8015fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fe8:	4798      	blx	r3
 8015fea:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015fee:	2200      	movs	r2, #0
 8015ff0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015ff4:	2302      	movs	r3, #2
 8015ff6:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8015ffa:	2301      	movs	r3, #1
 8015ffc:	9305      	str	r3, [sp, #20]
 8015ffe:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8016002:	4631      	mov	r1, r6
 8016004:	9304      	str	r3, [sp, #16]
 8016006:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801600a:	4620      	mov	r0, r4
 801600c:	9303      	str	r3, [sp, #12]
 801600e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016012:	9302      	str	r3, [sp, #8]
 8016014:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016018:	e9cd 8300 	strd	r8, r3, [sp]
 801601c:	463b      	mov	r3, r7
 801601e:	47a8      	blx	r5
 8016020:	b00b      	add	sp, #44	; 0x2c
 8016022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016026:	bf00      	nop
 8016028:	20198152 	.word	0x20198152

0801602c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801602c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016030:	4698      	mov	r8, r3
 8016032:	6803      	ldr	r3, [r0, #0]
 8016034:	b087      	sub	sp, #28
 8016036:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8016038:	4b10      	ldr	r3, [pc, #64]	; (801607c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801603a:	460e      	mov	r6, r1
 801603c:	f8b3 9000 	ldrh.w	r9, [r3]
 8016040:	4617      	mov	r7, r2
 8016042:	4604      	mov	r4, r0
 8016044:	f7ff ff50 	bl	8015ee8 <_ZN8touchgfx3HAL3lcdEv>
 8016048:	6803      	ldr	r3, [r0, #0]
 801604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801604c:	4798      	blx	r3
 801604e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8016052:	f8cd 900c 	str.w	r9, [sp, #12]
 8016056:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801605a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801605e:	463a      	mov	r2, r7
 8016060:	9302      	str	r3, [sp, #8]
 8016062:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016066:	4631      	mov	r1, r6
 8016068:	9301      	str	r3, [sp, #4]
 801606a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801606e:	4620      	mov	r0, r4
 8016070:	9300      	str	r3, [sp, #0]
 8016072:	4643      	mov	r3, r8
 8016074:	47a8      	blx	r5
 8016076:	b007      	add	sp, #28
 8016078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801607c:	20198152 	.word	0x20198152

08016080 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016084:	4604      	mov	r4, r0
 8016086:	b08f      	sub	sp, #60	; 0x3c
 8016088:	4610      	mov	r0, r2
 801608a:	460d      	mov	r5, r1
 801608c:	4691      	mov	r9, r2
 801608e:	461e      	mov	r6, r3
 8016090:	f004 f878 	bl	801a184 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016094:	2800      	cmp	r0, #0
 8016096:	f000 809d 	beq.w	80161d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801609a:	6823      	ldr	r3, [r4, #0]
 801609c:	4620      	mov	r0, r4
 801609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160a0:	4798      	blx	r3
 80160a2:	6823      	ldr	r3, [r4, #0]
 80160a4:	f8df b190 	ldr.w	fp, [pc, #400]	; 8016238 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80160a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160aa:	4620      	mov	r0, r4
 80160ac:	4798      	blx	r3
 80160ae:	f8df a18c 	ldr.w	sl, [pc, #396]	; 801623c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80160b2:	f8bb 3000 	ldrh.w	r3, [fp]
 80160b6:	4f5d      	ldr	r7, [pc, #372]	; (801622c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80160b8:	9301      	str	r3, [sp, #4]
 80160ba:	f8ba 3000 	ldrh.w	r3, [sl]
 80160be:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80160c2:	9302      	str	r3, [sp, #8]
 80160c4:	883b      	ldrh	r3, [r7, #0]
 80160c6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80160ca:	9303      	str	r3, [sp, #12]
 80160cc:	4b58      	ldr	r3, [pc, #352]	; (8016230 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80160ce:	4640      	mov	r0, r8
 80160d0:	881a      	ldrh	r2, [r3, #0]
 80160d2:	9305      	str	r3, [sp, #20]
 80160d4:	9204      	str	r2, [sp, #16]
 80160d6:	f004 f8e9 	bl	801a2ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 80160da:	8038      	strh	r0, [r7, #0]
 80160dc:	4640      	mov	r0, r8
 80160de:	f004 f919 	bl	801a314 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80160e2:	9b05      	ldr	r3, [sp, #20]
 80160e4:	b280      	uxth	r0, r0
 80160e6:	8018      	strh	r0, [r3, #0]
 80160e8:	4b52      	ldr	r3, [pc, #328]	; (8016234 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80160ea:	781b      	ldrb	r3, [r3, #0]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d174      	bne.n	80161da <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80160f0:	883b      	ldrh	r3, [r7, #0]
 80160f2:	f8aa 0000 	strh.w	r0, [sl]
 80160f6:	f8ab 3000 	strh.w	r3, [fp]
 80160fa:	4648      	mov	r0, r9
 80160fc:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8016100:	f004 f840 	bl	801a184 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016104:	2200      	movs	r2, #0
 8016106:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801610a:	4611      	mov	r1, r2
 801610c:	4628      	mov	r0, r5
 801610e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8016112:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8016116:	f7ff fed9 	bl	8015ecc <_ZN8touchgfx8Drawable5setXYEss>
 801611a:	2301      	movs	r3, #1
 801611c:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8016120:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8016124:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016128:	2b00      	cmp	r3, #0
 801612a:	dd5c      	ble.n	80161e6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801612c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016130:	2b00      	cmp	r3, #0
 8016132:	dd58      	ble.n	80161e6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8016134:	462a      	mov	r2, r5
 8016136:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801613a:	ab0a      	add	r3, sp, #40	; 0x28
 801613c:	6851      	ldr	r1, [r2, #4]
 801613e:	c303      	stmia	r3!, {r0, r1}
 8016140:	4631      	mov	r1, r6
 8016142:	a80a      	add	r0, sp, #40	; 0x28
 8016144:	f7ff fbe4 	bl	8015910 <_ZN8touchgfx4RectaNERKS0_>
 8016148:	2100      	movs	r1, #0
 801614a:	4b38      	ldr	r3, [pc, #224]	; (801622c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801614c:	910c      	str	r1, [sp, #48]	; 0x30
 801614e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016152:	4b37      	ldr	r3, [pc, #220]	; (8016230 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016154:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8016158:	f9b3 3000 	ldrsh.w	r3, [r3]
 801615c:	aa0a      	add	r2, sp, #40	; 0x28
 801615e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8016162:	ab08      	add	r3, sp, #32
 8016164:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016168:	e883 0003 	stmia.w	r3, {r0, r1}
 801616c:	4618      	mov	r0, r3
 801616e:	a90c      	add	r1, sp, #48	; 0x30
 8016170:	f7ff fbce 	bl	8015910 <_ZN8touchgfx4RectaNERKS0_>
 8016174:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8016176:	2b00      	cmp	r3, #0
 8016178:	d13c      	bne.n	80161f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801617a:	2000      	movs	r0, #0
 801617c:	2600      	movs	r6, #0
 801617e:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8016182:	696b      	ldr	r3, [r5, #20]
 8016184:	682a      	ldr	r2, [r5, #0]
 8016186:	616e      	str	r6, [r5, #20]
 8016188:	9305      	str	r3, [sp, #20]
 801618a:	6892      	ldr	r2, [r2, #8]
 801618c:	a908      	add	r1, sp, #32
 801618e:	4628      	mov	r0, r5
 8016190:	4790      	blx	r2
 8016192:	9b05      	ldr	r3, [sp, #20]
 8016194:	4652      	mov	r2, sl
 8016196:	616b      	str	r3, [r5, #20]
 8016198:	4649      	mov	r1, r9
 801619a:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801619e:	4628      	mov	r0, r5
 80161a0:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80161a4:	f7ff fe92 	bl	8015ecc <_ZN8touchgfx8Drawable5setXYEss>
 80161a8:	9a01      	ldr	r2, [sp, #4]
 80161aa:	4b23      	ldr	r3, [pc, #140]	; (8016238 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80161ac:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80161b0:	801a      	strh	r2, [r3, #0]
 80161b2:	9a02      	ldr	r2, [sp, #8]
 80161b4:	4b21      	ldr	r3, [pc, #132]	; (801623c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80161b6:	4620      	mov	r0, r4
 80161b8:	801a      	strh	r2, [r3, #0]
 80161ba:	9a03      	ldr	r2, [sp, #12]
 80161bc:	4b1b      	ldr	r3, [pc, #108]	; (801622c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80161be:	801a      	strh	r2, [r3, #0]
 80161c0:	4b1b      	ldr	r3, [pc, #108]	; (8016230 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80161c2:	9a04      	ldr	r2, [sp, #16]
 80161c4:	801a      	strh	r2, [r3, #0]
 80161c6:	6823      	ldr	r3, [r4, #0]
 80161c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161ca:	4798      	blx	r3
 80161cc:	6823      	ldr	r3, [r4, #0]
 80161ce:	4620      	mov	r0, r4
 80161d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161d2:	4798      	blx	r3
 80161d4:	b00f      	add	sp, #60	; 0x3c
 80161d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161da:	883b      	ldrh	r3, [r7, #0]
 80161dc:	f8ab 0000 	strh.w	r0, [fp]
 80161e0:	f8aa 3000 	strh.w	r3, [sl]
 80161e4:	e789      	b.n	80160fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80161e6:	462a      	mov	r2, r5
 80161e8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80161ec:	ab0a      	add	r3, sp, #40	; 0x28
 80161ee:	6851      	ldr	r1, [r2, #4]
 80161f0:	c303      	stmia	r3!, {r0, r1}
 80161f2:	e7a9      	b.n	8016148 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80161f4:	a807      	add	r0, sp, #28
 80161f6:	f004 f945 	bl	801a484 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80161fa:	4606      	mov	r6, r0
 80161fc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80161fe:	6803      	ldr	r3, [r0, #0]
 8016200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016202:	4798      	blx	r3
 8016204:	4286      	cmp	r6, r0
 8016206:	d1b8      	bne.n	801617a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8016208:	f7ff fe6e 	bl	8015ee8 <_ZN8touchgfx3HAL3lcdEv>
 801620c:	6803      	ldr	r3, [r0, #0]
 801620e:	4606      	mov	r6, r0
 8016210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016212:	a807      	add	r0, sp, #28
 8016214:	9305      	str	r3, [sp, #20]
 8016216:	f004 f935 	bl	801a484 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801621a:	9b05      	ldr	r3, [sp, #20]
 801621c:	4601      	mov	r1, r0
 801621e:	4630      	mov	r0, r6
 8016220:	4798      	blx	r3
 8016222:	f080 0001 	eor.w	r0, r0, #1
 8016226:	b2c0      	uxtb	r0, r0
 8016228:	e7a8      	b.n	801617c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801622a:	bf00      	nop
 801622c:	2019814c 	.word	0x2019814c
 8016230:	2019814e 	.word	0x2019814e
 8016234:	20198150 	.word	0x20198150
 8016238:	20198152 	.word	0x20198152
 801623c:	20198154 	.word	0x20198154

08016240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8016240:	b510      	push	{r4, lr}
 8016242:	4b07      	ldr	r3, [pc, #28]	; (8016260 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8016244:	4604      	mov	r4, r0
 8016246:	781b      	ldrb	r3, [r3, #0]
 8016248:	b13b      	cbz	r3, 801625a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801624a:	6803      	ldr	r3, [r0, #0]
 801624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801624e:	4798      	blx	r3
 8016250:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016252:	4283      	cmp	r3, r0
 8016254:	d101      	bne.n	801625a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016256:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016258:	bd10      	pop	{r4, pc}
 801625a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801625c:	e7fc      	b.n	8016258 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801625e:	bf00      	nop
 8016260:	20198156 	.word	0x20198156

08016264 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8016264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016268:	461d      	mov	r5, r3
 801626a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801626e:	2400      	movs	r4, #0
 8016270:	b08a      	sub	sp, #40	; 0x28
 8016272:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016276:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801627a:	4690      	mov	r8, r2
 801627c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016280:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016284:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8016288:	f8ad 301a 	strh.w	r3, [sp, #26]
 801628c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016290:	4607      	mov	r7, r0
 8016292:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016296:	9404      	str	r4, [sp, #16]
 8016298:	f88d 4020 	strb.w	r4, [sp, #32]
 801629c:	f7ff ffd0 	bl	8016240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80162a0:	fb06 8505 	mla	r5, r6, r5, r8
 80162a4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80162a8:	6878      	ldr	r0, [r7, #4]
 80162aa:	9505      	str	r5, [sp, #20]
 80162ac:	f8ad 601e 	strh.w	r6, [sp, #30]
 80162b0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80162b4:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80162b8:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80162bc:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80162c0:	6803      	ldr	r3, [r0, #0]
 80162c2:	a901      	add	r1, sp, #4
 80162c4:	685b      	ldr	r3, [r3, #4]
 80162c6:	4798      	blx	r3
 80162c8:	b00a      	add	sp, #40	; 0x28
 80162ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080162ce <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80162ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80162d2:	2400      	movs	r4, #0
 80162d4:	461d      	mov	r5, r3
 80162d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80162da:	4691      	mov	r9, r2
 80162dc:	b08b      	sub	sp, #44	; 0x2c
 80162de:	4688      	mov	r8, r1
 80162e0:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80162e4:	4607      	mov	r7, r0
 80162e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80162ea:	9404      	str	r4, [sp, #16]
 80162ec:	f7ff ffa8 	bl	8016240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80162f0:	fb06 9505 	mla	r5, r6, r5, r9
 80162f4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80162f8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80162fc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016300:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016304:	6878      	ldr	r0, [r7, #4]
 8016306:	9505      	str	r5, [sp, #20]
 8016308:	f8ad 301a 	strh.w	r3, [sp, #26]
 801630c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8016310:	f8ad 601e 	strh.w	r6, [sp, #30]
 8016314:	f8cd 8010 	str.w	r8, [sp, #16]
 8016318:	f8ad 4020 	strh.w	r4, [sp, #32]
 801631c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8016320:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8016324:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8016328:	6803      	ldr	r3, [r0, #0]
 801632a:	a901      	add	r1, sp, #4
 801632c:	685b      	ldr	r3, [r3, #4]
 801632e:	4798      	blx	r3
 8016330:	b00b      	add	sp, #44	; 0x2c
 8016332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08016338 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8016338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801633c:	4698      	mov	r8, r3
 801633e:	2300      	movs	r3, #0
 8016340:	b08a      	sub	sp, #40	; 0x28
 8016342:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8016346:	4606      	mov	r6, r0
 8016348:	2d0b      	cmp	r5, #11
 801634a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801634e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8016352:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8016356:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801635a:	9304      	str	r3, [sp, #16]
 801635c:	d137      	bne.n	80163ce <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801635e:	2380      	movs	r3, #128	; 0x80
 8016360:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016364:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016368:	f88d 0020 	strb.w	r0, [sp, #32]
 801636c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016370:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016374:	4630      	mov	r0, r6
 8016376:	f8ad 301a 	strh.w	r3, [sp, #26]
 801637a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801637e:	9203      	str	r2, [sp, #12]
 8016380:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016384:	f7ff ff5c 	bl	8016240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016388:	2c0b      	cmp	r4, #11
 801638a:	bf8c      	ite	hi
 801638c:	2100      	movhi	r1, #0
 801638e:	4b1b      	ldrls	r3, [pc, #108]	; (80163fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8016390:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8016394:	bf98      	it	ls
 8016396:	5d19      	ldrbls	r1, [r3, r4]
 8016398:	fb02 8307 	mla	r3, r2, r7, r8
 801639c:	10c9      	asrs	r1, r1, #3
 801639e:	fb01 0003 	mla	r0, r1, r3, r0
 80163a2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80163a6:	9005      	str	r0, [sp, #20]
 80163a8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80163ac:	2300      	movs	r3, #0
 80163ae:	6870      	ldr	r0, [r6, #4]
 80163b0:	f8ad 701e 	strh.w	r7, [sp, #30]
 80163b4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80163b8:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80163bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80163c0:	6803      	ldr	r3, [r0, #0]
 80163c2:	a901      	add	r1, sp, #4
 80163c4:	685b      	ldr	r3, [r3, #4]
 80163c6:	4798      	blx	r3
 80163c8:	b00a      	add	sp, #40	; 0x28
 80163ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163ce:	2d02      	cmp	r5, #2
 80163d0:	d109      	bne.n	80163e6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80163d2:	28ff      	cmp	r0, #255	; 0xff
 80163d4:	d105      	bne.n	80163e2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80163d6:	f1bc 0f00 	cmp.w	ip, #0
 80163da:	bf14      	ite	ne
 80163dc:	2340      	movne	r3, #64	; 0x40
 80163de:	2320      	moveq	r3, #32
 80163e0:	e7be      	b.n	8016360 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80163e2:	2340      	movs	r3, #64	; 0x40
 80163e4:	e7bc      	b.n	8016360 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80163e6:	28ff      	cmp	r0, #255	; 0xff
 80163e8:	d105      	bne.n	80163f6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80163ea:	f1bc 0f00 	cmp.w	ip, #0
 80163ee:	bf14      	ite	ne
 80163f0:	2304      	movne	r3, #4
 80163f2:	2301      	moveq	r3, #1
 80163f4:	e7b4      	b.n	8016360 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80163f6:	2304      	movs	r3, #4
 80163f8:	e7b2      	b.n	8016360 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80163fa:	bf00      	nop
 80163fc:	0802a980 	.word	0x0802a980

08016400 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8016400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016404:	b08b      	sub	sp, #44	; 0x2c
 8016406:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801640a:	461d      	mov	r5, r3
 801640c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8016410:	bf14      	ite	ne
 8016412:	2308      	movne	r3, #8
 8016414:	2302      	moveq	r3, #2
 8016416:	2400      	movs	r4, #0
 8016418:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801641c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016420:	4688      	mov	r8, r1
 8016422:	4693      	mov	fp, r2
 8016424:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8016428:	9404      	str	r4, [sp, #16]
 801642a:	4607      	mov	r7, r0
 801642c:	f7ff ff08 	bl	8016240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016430:	2e0b      	cmp	r6, #11
 8016432:	bf98      	it	ls
 8016434:	4b15      	ldrls	r3, [pc, #84]	; (801648c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8016436:	fb05 b50a 	mla	r5, r5, sl, fp
 801643a:	bf98      	it	ls
 801643c:	5d9c      	ldrbls	r4, [r3, r6]
 801643e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016442:	10e4      	asrs	r4, r4, #3
 8016444:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016448:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801644c:	fb04 0405 	mla	r4, r4, r5, r0
 8016450:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016454:	2300      	movs	r3, #0
 8016456:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801645a:	6878      	ldr	r0, [r7, #4]
 801645c:	9405      	str	r4, [sp, #20]
 801645e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016462:	f8ad a01e 	strh.w	sl, [sp, #30]
 8016466:	f8cd 8010 	str.w	r8, [sp, #16]
 801646a:	f88d 9020 	strb.w	r9, [sp, #32]
 801646e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8016472:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016476:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 801647a:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 801647e:	6803      	ldr	r3, [r0, #0]
 8016480:	a901      	add	r1, sp, #4
 8016482:	685b      	ldr	r3, [r3, #4]
 8016484:	4798      	blx	r3
 8016486:	b00b      	add	sp, #44	; 0x2c
 8016488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801648c:	0802a980 	.word	0x0802a980

08016490 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016494:	461e      	mov	r6, r3
 8016496:	4b0a      	ldr	r3, [pc, #40]	; (80164c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8016498:	460f      	mov	r7, r1
 801649a:	881d      	ldrh	r5, [r3, #0]
 801649c:	4690      	mov	r8, r2
 801649e:	f7ff fd23 	bl	8015ee8 <_ZN8touchgfx3HAL3lcdEv>
 80164a2:	6803      	ldr	r3, [r0, #0]
 80164a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164a6:	4798      	blx	r3
 80164a8:	280b      	cmp	r0, #11
 80164aa:	bf8e      	itee	hi
 80164ac:	2400      	movhi	r4, #0
 80164ae:	4b05      	ldrls	r3, [pc, #20]	; (80164c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80164b0:	5c1c      	ldrbls	r4, [r3, r0]
 80164b2:	fb08 7005 	mla	r0, r8, r5, r7
 80164b6:	10e4      	asrs	r4, r4, #3
 80164b8:	fb04 6000 	mla	r0, r4, r0, r6
 80164bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164c0:	20198152 	.word	0x20198152
 80164c4:	0802a980 	.word	0x0802a980

080164c8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80164c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164ca:	2500      	movs	r5, #0
 80164cc:	b08b      	sub	sp, #44	; 0x2c
 80164ce:	461f      	mov	r7, r3
 80164d0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80164d4:	4604      	mov	r4, r0
 80164d6:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80164da:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80164de:	4616      	mov	r6, r2
 80164e0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80164e4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80164e8:	9504      	str	r5, [sp, #16]
 80164ea:	f8ad 301a 	strh.w	r3, [sp, #26]
 80164ee:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80164f2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80164f6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80164fa:	f88d 3020 	strb.w	r3, [sp, #32]
 80164fe:	f7ff fe9f 	bl	8016240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016502:	463a      	mov	r2, r7
 8016504:	4631      	mov	r1, r6
 8016506:	4603      	mov	r3, r0
 8016508:	4620      	mov	r0, r4
 801650a:	f7ff ffc1 	bl	8016490 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801650e:	4b0e      	ldr	r3, [pc, #56]	; (8016548 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8016510:	9005      	str	r0, [sp, #20]
 8016512:	881b      	ldrh	r3, [r3, #0]
 8016514:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016518:	f7ff fce6 	bl	8015ee8 <_ZN8touchgfx3HAL3lcdEv>
 801651c:	6803      	ldr	r3, [r0, #0]
 801651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016520:	4798      	blx	r3
 8016522:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016524:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8016528:	9304      	str	r3, [sp, #16]
 801652a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801652e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8016532:	6860      	ldr	r0, [r4, #4]
 8016534:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8016538:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801653c:	6803      	ldr	r3, [r0, #0]
 801653e:	a901      	add	r1, sp, #4
 8016540:	685b      	ldr	r3, [r3, #4]
 8016542:	4798      	blx	r3
 8016544:	b00b      	add	sp, #44	; 0x2c
 8016546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016548:	20198152 	.word	0x20198152

0801654c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801654c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801654e:	b08d      	sub	sp, #52	; 0x34
 8016550:	466b      	mov	r3, sp
 8016552:	e883 0006 	stmia.w	r3, {r1, r2}
 8016556:	2300      	movs	r3, #0
 8016558:	2501      	movs	r5, #1
 801655a:	9306      	str	r3, [sp, #24]
 801655c:	6803      	ldr	r3, [r0, #0]
 801655e:	9503      	str	r5, [sp, #12]
 8016560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016562:	4604      	mov	r4, r0
 8016564:	f8bd 6000 	ldrh.w	r6, [sp]
 8016568:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801656c:	4798      	blx	r3
 801656e:	463a      	mov	r2, r7
 8016570:	4631      	mov	r1, r6
 8016572:	4603      	mov	r3, r0
 8016574:	4620      	mov	r0, r4
 8016576:	f7ff ff8b 	bl	8016490 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801657a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801657c:	9004      	str	r0, [sp, #16]
 801657e:	9307      	str	r3, [sp, #28]
 8016580:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016584:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016588:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801658c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016590:	4b0e      	ldr	r3, [pc, #56]	; (80165cc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8016592:	881b      	ldrh	r3, [r3, #0]
 8016594:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8016598:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801659c:	f7ff fca4 	bl	8015ee8 <_ZN8touchgfx3HAL3lcdEv>
 80165a0:	6803      	ldr	r3, [r0, #0]
 80165a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165a4:	4798      	blx	r3
 80165a6:	23ff      	movs	r3, #255	; 0xff
 80165a8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80165ac:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80165b0:	6860      	ldr	r0, [r4, #4]
 80165b2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80165b6:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80165ba:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80165be:	6803      	ldr	r3, [r0, #0]
 80165c0:	a903      	add	r1, sp, #12
 80165c2:	685b      	ldr	r3, [r3, #4]
 80165c4:	4798      	blx	r3
 80165c6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80165c8:	b00d      	add	sp, #52	; 0x34
 80165ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165cc:	20198152 	.word	0x20198152

080165d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80165d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165d4:	b08c      	sub	sp, #48	; 0x30
 80165d6:	466d      	mov	r5, sp
 80165d8:	461e      	mov	r6, r3
 80165da:	2300      	movs	r3, #0
 80165dc:	e885 0006 	stmia.w	r5, {r1, r2}
 80165e0:	2501      	movs	r5, #1
 80165e2:	9306      	str	r3, [sp, #24]
 80165e4:	6803      	ldr	r3, [r0, #0]
 80165e6:	9503      	str	r5, [sp, #12]
 80165e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165ea:	4604      	mov	r4, r0
 80165ec:	f8bd 7000 	ldrh.w	r7, [sp]
 80165f0:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80165f4:	4798      	blx	r3
 80165f6:	4642      	mov	r2, r8
 80165f8:	4639      	mov	r1, r7
 80165fa:	4603      	mov	r3, r0
 80165fc:	4620      	mov	r0, r4
 80165fe:	f7ff ff47 	bl	8016490 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016602:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016606:	9004      	str	r0, [sp, #16]
 8016608:	f8ad 3020 	strh.w	r3, [sp, #32]
 801660c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016610:	9607      	str	r6, [sp, #28]
 8016612:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016616:	4b10      	ldr	r3, [pc, #64]	; (8016658 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8016618:	881b      	ldrh	r3, [r3, #0]
 801661a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801661e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016620:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8016624:	f7ff fc60 	bl	8015ee8 <_ZN8touchgfx3HAL3lcdEv>
 8016628:	6803      	ldr	r3, [r0, #0]
 801662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801662c:	4798      	blx	r3
 801662e:	23ff      	movs	r3, #255	; 0xff
 8016630:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8016634:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8016638:	6860      	ldr	r0, [r4, #4]
 801663a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801663e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8016642:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8016646:	6803      	ldr	r3, [r0, #0]
 8016648:	a903      	add	r1, sp, #12
 801664a:	685b      	ldr	r3, [r3, #4]
 801664c:	4798      	blx	r3
 801664e:	4630      	mov	r0, r6
 8016650:	b00c      	add	sp, #48	; 0x30
 8016652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016656:	bf00      	nop
 8016658:	20198152 	.word	0x20198152

0801665c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801665c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801665e:	b085      	sub	sp, #20
 8016660:	ac02      	add	r4, sp, #8
 8016662:	e884 0006 	stmia.w	r4, {r1, r2}
 8016666:	4605      	mov	r5, r0
 8016668:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801666c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8016670:	f7ff fde6 	bl	8016240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016674:	463a      	mov	r2, r7
 8016676:	4603      	mov	r3, r0
 8016678:	4631      	mov	r1, r6
 801667a:	4628      	mov	r0, r5
 801667c:	f7ff ff08 	bl	8016490 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016680:	4a05      	ldr	r2, [pc, #20]	; (8016698 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8016682:	682b      	ldr	r3, [r5, #0]
 8016684:	8812      	ldrh	r2, [r2, #0]
 8016686:	9200      	str	r2, [sp, #0]
 8016688:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801668a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801668e:	4603      	mov	r3, r0
 8016690:	4628      	mov	r0, r5
 8016692:	47b0      	blx	r6
 8016694:	b005      	add	sp, #20
 8016696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016698:	20198152 	.word	0x20198152

0801669c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801669c:	b570      	push	{r4, r5, r6, lr}
 801669e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80166a2:	4604      	mov	r4, r0
 80166a4:	b19b      	cbz	r3, 80166ce <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80166a6:	2002      	movs	r0, #2
 80166a8:	f7eb fbe4 	bl	8001e74 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80166ac:	2300      	movs	r3, #0
 80166ae:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80166b2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80166b6:	6823      	ldr	r3, [r4, #0]
 80166b8:	4620      	mov	r0, r4
 80166ba:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 80166be:	f7ff fdbf 	bl	8016240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80166c2:	462b      	mov	r3, r5
 80166c4:	4601      	mov	r1, r0
 80166c6:	4620      	mov	r0, r4
 80166c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80166cc:	4718      	bx	r3
 80166ce:	bd70      	pop	{r4, r5, r6, pc}

080166d0 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 80166d0:	b570      	push	{r4, r5, r6, lr}
 80166d2:	4605      	mov	r5, r0
 80166d4:	460c      	mov	r4, r1
 80166d6:	2003      	movs	r0, #3
 80166d8:	b149      	cbz	r1, 80166ee <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 80166da:	f7eb fb93 	bl	8001e04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80166de:	6928      	ldr	r0, [r5, #16]
 80166e0:	b168      	cbz	r0, 80166fe <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80166e2:	2101      	movs	r1, #1
 80166e4:	6803      	ldr	r3, [r0, #0]
 80166e6:	695b      	ldr	r3, [r3, #20]
 80166e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80166ec:	4718      	bx	r3
 80166ee:	f7eb fba5 	bl	8001e3c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80166f2:	6928      	ldr	r0, [r5, #16]
 80166f4:	b118      	cbz	r0, 80166fe <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80166f6:	6803      	ldr	r3, [r0, #0]
 80166f8:	4621      	mov	r1, r4
 80166fa:	695b      	ldr	r3, [r3, #20]
 80166fc:	e7f4      	b.n	80166e8 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 80166fe:	bd70      	pop	{r4, r5, r6, pc}

08016700 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8016700:	b538      	push	{r3, r4, r5, lr}
 8016702:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8016706:	4604      	mov	r4, r0
 8016708:	428b      	cmp	r3, r1
 801670a:	460d      	mov	r5, r1
 801670c:	d006      	beq.n	801671c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801670e:	6803      	ldr	r3, [r0, #0]
 8016710:	b929      	cbnz	r1, 801671e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8016712:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8016716:	4798      	blx	r3
 8016718:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801671c:	bd38      	pop	{r3, r4, r5, pc}
 801671e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8016722:	e7f8      	b.n	8016716 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08016724 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8016724:	b510      	push	{r4, lr}
 8016726:	4b0d      	ldr	r3, [pc, #52]	; (801675c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8016728:	4604      	mov	r4, r0
 801672a:	781b      	ldrb	r3, [r3, #0]
 801672c:	b95b      	cbnz	r3, 8016746 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801672e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8016732:	2b02      	cmp	r3, #2
 8016734:	d007      	beq.n	8016746 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016736:	6840      	ldr	r0, [r0, #4]
 8016738:	f000 f914 	bl	8016964 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801673c:	b118      	cbz	r0, 8016746 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801673e:	6862      	ldr	r2, [r4, #4]
 8016740:	7a53      	ldrb	r3, [r2, #9]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d0fc      	beq.n	8016740 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016746:	f7eb fd79 	bl	800223c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801674a:	4620      	mov	r0, r4
 801674c:	2100      	movs	r1, #0
 801674e:	f7ff ffd7 	bl	8016700 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016752:	4620      	mov	r0, r4
 8016754:	f7ff fd74 	bl	8016240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016758:	bd10      	pop	{r4, pc}
 801675a:	bf00      	nop
 801675c:	20198156 	.word	0x20198156

08016760 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8016760:	2000      	movs	r0, #0
 8016762:	4770      	bx	lr

08016764 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016764:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016768:	1a13      	subs	r3, r2, r0
 801676a:	4258      	negs	r0, r3
 801676c:	4158      	adcs	r0, r3
 801676e:	4770      	bx	lr

08016770 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016770:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016774:	1a9b      	subs	r3, r3, r2
 8016776:	2b00      	cmp	r3, #0
 8016778:	bfdc      	itt	le
 801677a:	6882      	ldrle	r2, [r0, #8]
 801677c:	189b      	addle	r3, r3, r2
 801677e:	2b01      	cmp	r3, #1
 8016780:	bfcc      	ite	gt
 8016782:	2000      	movgt	r0, #0
 8016784:	2001      	movle	r0, #1
 8016786:	4770      	bx	lr

08016788 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016788:	6902      	ldr	r2, [r0, #16]
 801678a:	6843      	ldr	r3, [r0, #4]
 801678c:	2024      	movs	r0, #36	; 0x24
 801678e:	fb00 3002 	mla	r0, r0, r2, r3
 8016792:	4770      	bx	lr

08016794 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016794:	6803      	ldr	r3, [r0, #0]
 8016796:	691b      	ldr	r3, [r3, #16]
 8016798:	4718      	bx	r3

0801679a <_ZN8touchgfx13DMA_Interface7executeEv>:
 801679a:	2301      	movs	r3, #1
 801679c:	b570      	push	{r4, r5, r6, lr}
 801679e:	7203      	strb	r3, [r0, #8]
 80167a0:	4604      	mov	r4, r0
 80167a2:	6840      	ldr	r0, [r0, #4]
 80167a4:	6803      	ldr	r3, [r0, #0]
 80167a6:	699b      	ldr	r3, [r3, #24]
 80167a8:	4798      	blx	r3
 80167aa:	6803      	ldr	r3, [r0, #0]
 80167ac:	4605      	mov	r5, r0
 80167ae:	2b40      	cmp	r3, #64	; 0x40
 80167b0:	d00c      	beq.n	80167cc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80167b2:	d810      	bhi.n	80167d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80167b4:	2b04      	cmp	r3, #4
 80167b6:	d01d      	beq.n	80167f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80167b8:	d804      	bhi.n	80167c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80167ba:	2b01      	cmp	r3, #1
 80167bc:	d006      	beq.n	80167cc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80167be:	2b02      	cmp	r3, #2
 80167c0:	d02c      	beq.n	801681c <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80167c2:	bd70      	pop	{r4, r5, r6, pc}
 80167c4:	2b08      	cmp	r3, #8
 80167c6:	d01d      	beq.n	8016804 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80167c8:	2b20      	cmp	r3, #32
 80167ca:	d1fa      	bne.n	80167c2 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80167cc:	6823      	ldr	r3, [r4, #0]
 80167ce:	4620      	mov	r0, r4
 80167d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80167d2:	4798      	blx	r3
 80167d4:	e013      	b.n	80167fe <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80167d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80167da:	d0f7      	beq.n	80167cc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80167dc:	d804      	bhi.n	80167e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80167de:	2b80      	cmp	r3, #128	; 0x80
 80167e0:	d0f4      	beq.n	80167cc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80167e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80167e6:	e7f0      	b.n	80167ca <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80167e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80167ec:	d0ee      	beq.n	80167cc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80167ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80167f2:	e7e5      	b.n	80167c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80167f4:	6823      	ldr	r3, [r4, #0]
 80167f6:	7f01      	ldrb	r1, [r0, #28]
 80167f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167fa:	4620      	mov	r0, r4
 80167fc:	4798      	blx	r3
 80167fe:	6823      	ldr	r3, [r4, #0]
 8016800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016802:	e006      	b.n	8016812 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016804:	6823      	ldr	r3, [r4, #0]
 8016806:	7f01      	ldrb	r1, [r0, #28]
 8016808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801680a:	4620      	mov	r0, r4
 801680c:	4798      	blx	r3
 801680e:	6823      	ldr	r3, [r4, #0]
 8016810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016812:	4629      	mov	r1, r5
 8016814:	4620      	mov	r0, r4
 8016816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801681a:	4718      	bx	r3
 801681c:	6823      	ldr	r3, [r4, #0]
 801681e:	4620      	mov	r0, r4
 8016820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016822:	4798      	blx	r3
 8016824:	e7f3      	b.n	801680e <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08016826 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016826:	4770      	bx	lr

08016828 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016828:	4770      	bx	lr

0801682a <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 801682a:	4770      	bx	lr

0801682c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801682c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8016830:	1ad2      	subs	r2, r2, r3
 8016832:	2a00      	cmp	r2, #0
 8016834:	b510      	push	{r4, lr}
 8016836:	bfdc      	itt	le
 8016838:	6884      	ldrle	r4, [r0, #8]
 801683a:	1912      	addle	r2, r2, r4
 801683c:	2a01      	cmp	r2, #1
 801683e:	dd16      	ble.n	801686e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8016840:	2424      	movs	r4, #36	; 0x24
 8016842:	6842      	ldr	r2, [r0, #4]
 8016844:	fb04 2303 	mla	r3, r4, r3, r2
 8016848:	f101 0220 	add.w	r2, r1, #32
 801684c:	f851 4b04 	ldr.w	r4, [r1], #4
 8016850:	4291      	cmp	r1, r2
 8016852:	f843 4b04 	str.w	r4, [r3], #4
 8016856:	d1f9      	bne.n	801684c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8016858:	780a      	ldrb	r2, [r1, #0]
 801685a:	701a      	strb	r2, [r3, #0]
 801685c:	68c3      	ldr	r3, [r0, #12]
 801685e:	6882      	ldr	r2, [r0, #8]
 8016860:	3301      	adds	r3, #1
 8016862:	429a      	cmp	r2, r3
 8016864:	bfd8      	it	le
 8016866:	1a9b      	suble	r3, r3, r2
 8016868:	f3bf 8f5b 	dmb	ish
 801686c:	60c3      	str	r3, [r0, #12]
 801686e:	bd10      	pop	{r4, pc}

08016870 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016870:	6903      	ldr	r3, [r0, #16]
 8016872:	6882      	ldr	r2, [r0, #8]
 8016874:	3301      	adds	r3, #1
 8016876:	429a      	cmp	r2, r3
 8016878:	bfd8      	it	le
 801687a:	1a9b      	suble	r3, r3, r2
 801687c:	f3bf 8f5b 	dmb	ish
 8016880:	6103      	str	r3, [r0, #16]
 8016882:	4770      	bx	lr

08016884 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016884:	b570      	push	{r4, r5, r6, lr}
 8016886:	4604      	mov	r4, r0
 8016888:	460e      	mov	r6, r1
 801688a:	6860      	ldr	r0, [r4, #4]
 801688c:	6803      	ldr	r3, [r0, #0]
 801688e:	685b      	ldr	r3, [r3, #4]
 8016890:	4798      	blx	r3
 8016892:	2800      	cmp	r0, #0
 8016894:	d1f9      	bne.n	801688a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016896:	4d0d      	ldr	r5, [pc, #52]	; (80168cc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016898:	6828      	ldr	r0, [r5, #0]
 801689a:	6803      	ldr	r3, [r0, #0]
 801689c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801689e:	4798      	blx	r3
 80168a0:	f7eb fcf8 	bl	8002294 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80168a4:	6828      	ldr	r0, [r5, #0]
 80168a6:	2101      	movs	r1, #1
 80168a8:	f7ff ff2a 	bl	8016700 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80168ac:	6860      	ldr	r0, [r4, #4]
 80168ae:	4631      	mov	r1, r6
 80168b0:	6803      	ldr	r3, [r0, #0]
 80168b2:	689b      	ldr	r3, [r3, #8]
 80168b4:	4798      	blx	r3
 80168b6:	6823      	ldr	r3, [r4, #0]
 80168b8:	4620      	mov	r0, r4
 80168ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168bc:	4798      	blx	r3
 80168be:	6828      	ldr	r0, [r5, #0]
 80168c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80168c4:	6803      	ldr	r3, [r0, #0]
 80168c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80168c8:	4718      	bx	r3
 80168ca:	bf00      	nop
 80168cc:	20198158 	.word	0x20198158

080168d0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80168d0:	b508      	push	{r3, lr}
 80168d2:	f7eb fcb3 	bl	800223c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80168d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80168da:	f7eb bcc5 	b.w	8002268 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080168de <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80168de:	b510      	push	{r4, lr}
 80168e0:	4604      	mov	r4, r0
 80168e2:	2114      	movs	r1, #20
 80168e4:	f011 fbb5 	bl	8028052 <_ZdlPvj>
 80168e8:	4620      	mov	r0, r4
 80168ea:	bd10      	pop	{r4, pc}

080168ec <_ZN8touchgfx13DMA_Interface5startEv>:
 80168ec:	b510      	push	{r4, lr}
 80168ee:	4604      	mov	r4, r0
 80168f0:	6840      	ldr	r0, [r0, #4]
 80168f2:	6803      	ldr	r3, [r0, #0]
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	4798      	blx	r3
 80168f8:	b948      	cbnz	r0, 801690e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80168fa:	7a63      	ldrb	r3, [r4, #9]
 80168fc:	b13b      	cbz	r3, 801690e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80168fe:	7a23      	ldrb	r3, [r4, #8]
 8016900:	b92b      	cbnz	r3, 801690e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016902:	6823      	ldr	r3, [r4, #0]
 8016904:	4620      	mov	r0, r4
 8016906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801690c:	4718      	bx	r3
 801690e:	bd10      	pop	{r4, pc}

08016910 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016910:	b570      	push	{r4, r5, r6, lr}
 8016912:	4604      	mov	r4, r0
 8016914:	6840      	ldr	r0, [r0, #4]
 8016916:	6803      	ldr	r3, [r0, #0]
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	4798      	blx	r3
 801691c:	4605      	mov	r5, r0
 801691e:	b930      	cbnz	r0, 801692e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016920:	7a23      	ldrb	r3, [r4, #8]
 8016922:	b123      	cbz	r3, 801692e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016924:	6860      	ldr	r0, [r4, #4]
 8016926:	6803      	ldr	r3, [r0, #0]
 8016928:	695b      	ldr	r3, [r3, #20]
 801692a:	4798      	blx	r3
 801692c:	7225      	strb	r5, [r4, #8]
 801692e:	6860      	ldr	r0, [r4, #4]
 8016930:	6803      	ldr	r3, [r0, #0]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	4798      	blx	r3
 8016936:	b928      	cbnz	r0, 8016944 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016938:	6823      	ldr	r3, [r4, #0]
 801693a:	4620      	mov	r0, r4
 801693c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016942:	4718      	bx	r3
 8016944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016948:	f7eb bcaa 	b.w	80022a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801694c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801694c:	6082      	str	r2, [r0, #8]
 801694e:	2200      	movs	r2, #0
 8016950:	b510      	push	{r4, lr}
 8016952:	4c03      	ldr	r4, [pc, #12]	; (8016960 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016954:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016958:	e9c0 4100 	strd	r4, r1, [r0]
 801695c:	bd10      	pop	{r4, pc}
 801695e:	bf00      	nop
 8016960:	0802a994 	.word	0x0802a994

08016964 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016964:	6840      	ldr	r0, [r0, #4]
 8016966:	6803      	ldr	r3, [r0, #0]
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	4718      	bx	r3

0801696c <_ZNK8touchgfx3Box12getSolidRectEv>:
 801696c:	2300      	movs	r3, #0
 801696e:	8083      	strh	r3, [r0, #4]
 8016970:	80c3      	strh	r3, [r0, #6]
 8016972:	8003      	strh	r3, [r0, #0]
 8016974:	8043      	strh	r3, [r0, #2]
 8016976:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801697a:	2bff      	cmp	r3, #255	; 0xff
 801697c:	bf01      	itttt	eq
 801697e:	890b      	ldrheq	r3, [r1, #8]
 8016980:	8083      	strheq	r3, [r0, #4]
 8016982:	894b      	ldrheq	r3, [r1, #10]
 8016984:	80c3      	strheq	r3, [r0, #6]
 8016986:	4770      	bx	lr

08016988 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8016988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801698a:	4604      	mov	r4, r0
 801698c:	466b      	mov	r3, sp
 801698e:	6808      	ldr	r0, [r1, #0]
 8016990:	6849      	ldr	r1, [r1, #4]
 8016992:	c303      	stmia	r3!, {r0, r1}
 8016994:	6823      	ldr	r3, [r4, #0]
 8016996:	4669      	mov	r1, sp
 8016998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801699a:	4620      	mov	r0, r4
 801699c:	4798      	blx	r3
 801699e:	4b08      	ldr	r3, [pc, #32]	; (80169c0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80169a6:	b10a      	cbz	r2, 80169ac <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80169a8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80169aa:	b900      	cbnz	r0, 80169ae <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80169ac:	6898      	ldr	r0, [r3, #8]
 80169ae:	6803      	ldr	r3, [r0, #0]
 80169b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80169b2:	6a1d      	ldr	r5, [r3, #32]
 80169b4:	4669      	mov	r1, sp
 80169b6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80169ba:	47a8      	blx	r5
 80169bc:	b003      	add	sp, #12
 80169be:	bd30      	pop	{r4, r5, pc}
 80169c0:	20198158 	.word	0x20198158

080169c4 <_ZN8touchgfx3BoxD1Ev>:
 80169c4:	4770      	bx	lr

080169c6 <_ZN8touchgfx3BoxD0Ev>:
 80169c6:	b510      	push	{r4, lr}
 80169c8:	4604      	mov	r4, r0
 80169ca:	212c      	movs	r1, #44	; 0x2c
 80169cc:	f011 fb41 	bl	8028052 <_ZdlPvj>
 80169d0:	4620      	mov	r0, r4
 80169d2:	bd10      	pop	{r4, pc}

080169d4 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80169d4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80169d8:	b12a      	cbz	r2, 80169e6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80169da:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80169de:	b112      	cbz	r2, 80169e6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80169e0:	6803      	ldr	r3, [r0, #0]
 80169e2:	695b      	ldr	r3, [r3, #20]
 80169e4:	4718      	bx	r3
 80169e6:	4770      	bx	lr

080169e8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80169e8:	b510      	push	{r4, lr}
 80169ea:	6803      	ldr	r3, [r0, #0]
 80169ec:	460c      	mov	r4, r1
 80169ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169f0:	4798      	blx	r3
 80169f2:	1b03      	subs	r3, r0, r4
 80169f4:	4258      	negs	r0, r3
 80169f6:	4158      	adcs	r0, r3
 80169f8:	bd10      	pop	{r4, pc}
	...

080169fc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80169fc:	4b01      	ldr	r3, [pc, #4]	; (8016a04 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80169fe:	6019      	str	r1, [r3, #0]
 8016a00:	4770      	bx	lr
 8016a02:	bf00      	nop
 8016a04:	20198160 	.word	0x20198160

08016a08 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a0c:	4696      	mov	lr, r2
 8016a0e:	4614      	mov	r4, r2
 8016a10:	4605      	mov	r5, r0
 8016a12:	460e      	mov	r6, r1
 8016a14:	461f      	mov	r7, r3
 8016a16:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a1a:	b097      	sub	sp, #92	; 0x5c
 8016a1c:	f10d 0c1c 	add.w	ip, sp, #28
 8016a20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a24:	f8de 3000 	ldr.w	r3, [lr]
 8016a28:	f104 0e14 	add.w	lr, r4, #20
 8016a2c:	f8cc 3000 	str.w	r3, [ip]
 8016a30:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016a34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a3c:	f8de 3000 	ldr.w	r3, [lr]
 8016a40:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8016a44:	f8cc 3000 	str.w	r3, [ip]
 8016a48:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016a4c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a54:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8016a58:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8016a5c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8016a60:	f8de 3000 	ldr.w	r3, [lr]
 8016a64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016a66:	f8cc 3000 	str.w	r3, [ip]
 8016a6a:	9201      	str	r2, [sp, #4]
 8016a6c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016a70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016a72:	682b      	ldr	r3, [r5, #0]
 8016a74:	9200      	str	r2, [sp, #0]
 8016a76:	f8cd 8008 	str.w	r8, [sp, #8]
 8016a7a:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8016a7e:	aa07      	add	r2, sp, #28
 8016a80:	463b      	mov	r3, r7
 8016a82:	4631      	mov	r1, r6
 8016a84:	4628      	mov	r0, r5
 8016a86:	47d8      	blx	fp
 8016a88:	46a6      	mov	lr, r4
 8016a8a:	f10d 0c1c 	add.w	ip, sp, #28
 8016a8e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a96:	f8de 3000 	ldr.w	r3, [lr]
 8016a9a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8016a9e:	f8cc 3000 	str.w	r3, [ip]
 8016aa2:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016aa6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016aaa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016aae:	f8de 3000 	ldr.w	r3, [lr]
 8016ab2:	343c      	adds	r4, #60	; 0x3c
 8016ab4:	f8cc 3000 	str.w	r3, [ip]
 8016ab8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016abe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ac2:	6823      	ldr	r3, [r4, #0]
 8016ac4:	4631      	mov	r1, r6
 8016ac6:	f8cc 3000 	str.w	r3, [ip]
 8016aca:	682b      	ldr	r3, [r5, #0]
 8016acc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016ad0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016ad2:	f8cd 8008 	str.w	r8, [sp, #8]
 8016ad6:	9201      	str	r2, [sp, #4]
 8016ad8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016ada:	4628      	mov	r0, r5
 8016adc:	9200      	str	r2, [sp, #0]
 8016ade:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8016ae0:	aa07      	add	r2, sp, #28
 8016ae2:	463b      	mov	r3, r7
 8016ae4:	47a0      	blx	r4
 8016ae6:	b017      	add	sp, #92	; 0x5c
 8016ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016aec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8016aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016af0:	b08d      	sub	sp, #52	; 0x34
 8016af2:	4688      	mov	r8, r1
 8016af4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016af6:	f8d3 c000 	ldr.w	ip, [r3]
 8016afa:	680f      	ldr	r7, [r1, #0]
 8016afc:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8016b00:	eba7 070c 	sub.w	r7, r7, ip
 8016b04:	42bc      	cmp	r4, r7
 8016b06:	bfa8      	it	ge
 8016b08:	463c      	movge	r4, r7
 8016b0a:	ee07 4a90 	vmov	s15, r4
 8016b0e:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8016b12:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016b16:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8016b1a:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8016b1e:	edd3 6a07 	vldr	s13, [r3, #28]
 8016b22:	ee25 4a04 	vmul.f32	s8, s10, s8
 8016b26:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016b2a:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016b2e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016b32:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8016b36:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8016b3a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016b3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016b40:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8016b44:	f9b1 9000 	ldrsh.w	r9, [r1]
 8016b48:	f9ba 1000 	ldrsh.w	r1, [sl]
 8016b4c:	eb09 0e0c 	add.w	lr, r9, ip
 8016b50:	4571      	cmp	r1, lr
 8016b52:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8016b56:	ee32 1a05 	vadd.f32	s2, s4, s10
 8016b5a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8016b5e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016b62:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016b66:	f340 808c 	ble.w	8016c82 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8016b6a:	eba1 060e 	sub.w	r6, r1, lr
 8016b6e:	fb96 f5f4 	sdiv	r5, r6, r4
 8016b72:	ee07 5a10 	vmov	s14, r5
 8016b76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016b7a:	2d00      	cmp	r5, #0
 8016b7c:	fb04 6615 	mls	r6, r4, r5, r6
 8016b80:	eea7 0a04 	vfma.f32	s0, s14, s8
 8016b84:	eee7 0a24 	vfma.f32	s1, s14, s9
 8016b88:	eea7 1a05 	vfma.f32	s2, s14, s10
 8016b8c:	dd12      	ble.n	8016bb4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8016b8e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8016b92:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b9a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8016b9e:	bf14      	ite	ne
 8016ba0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016ba4:	eeb0 7a67 	vmoveq.f32	s14, s15
 8016ba8:	ee31 2a45 	vsub.f32	s4, s2, s10
 8016bac:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016bb0:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016bb4:	fb05 f204 	mul.w	r2, r5, r4
 8016bb8:	1abf      	subs	r7, r7, r2
 8016bba:	4494      	add	ip, r2
 8016bbc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8016bc0:	4411      	add	r1, r2
 8016bc2:	eb09 020c 	add.w	r2, r9, ip
 8016bc6:	443a      	add	r2, r7
 8016bc8:	b209      	sxth	r1, r1
 8016bca:	428a      	cmp	r2, r1
 8016bcc:	bfc4      	itt	gt
 8016bce:	eba1 0209 	subgt.w	r2, r1, r9
 8016bd2:	eba2 070c 	subgt.w	r7, r2, ip
 8016bd6:	2f00      	cmp	r7, #0
 8016bd8:	dd50      	ble.n	8016c7c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8016bda:	fb97 f1f4 	sdiv	r1, r7, r4
 8016bde:	fb04 7211 	mls	r2, r4, r1, r7
 8016be2:	b90a      	cbnz	r2, 8016be8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8016be4:	4622      	mov	r2, r4
 8016be6:	3901      	subs	r1, #1
 8016be8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016bec:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016bf0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016bf4:	ee21 3a23 	vmul.f32	s6, s2, s7
 8016bf8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016bfc:	ee17 7a90 	vmov	r7, s15
 8016c00:	ee73 7a42 	vsub.f32	s15, s6, s4
 8016c04:	eef0 6a42 	vmov.f32	s13, s4
 8016c08:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016c0c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016c10:	ee17 ca90 	vmov	ip, s15
 8016c14:	eeb0 7a61 	vmov.f32	s14, s3
 8016c18:	6840      	ldr	r0, [r0, #4]
 8016c1a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8016c1e:	f8d0 a000 	ldr.w	sl, [r0]
 8016c22:	900b      	str	r0, [sp, #44]	; 0x2c
 8016c24:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016c26:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8016c2a:	9008      	str	r0, [sp, #32]
 8016c2c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016c2e:	695b      	ldr	r3, [r3, #20]
 8016c30:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8016c34:	fb9c fcf4 	sdiv	ip, ip, r4
 8016c38:	445b      	add	r3, fp
 8016c3a:	9307      	str	r3, [sp, #28]
 8016c3c:	ee16 3a90 	vmov	r3, s13
 8016c40:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016c44:	fb0c 3306 	mla	r3, ip, r6, r3
 8016c48:	fb97 f7f4 	sdiv	r7, r7, r4
 8016c4c:	9302      	str	r3, [sp, #8]
 8016c4e:	ee17 3a10 	vmov	r3, s14
 8016c52:	2900      	cmp	r1, #0
 8016c54:	bfcc      	ite	gt
 8016c56:	46a1      	movgt	r9, r4
 8016c58:	4691      	movle	r9, r2
 8016c5a:	44b6      	add	lr, r6
 8016c5c:	fb04 e505 	mla	r5, r4, r5, lr
 8016c60:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8016c64:	fb07 3706 	mla	r7, r7, r6, r3
 8016c68:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8016c6c:	e9cd 4700 	strd	r4, r7, [sp]
 8016c70:	eba9 0306 	sub.w	r3, r9, r6
 8016c74:	f8da 4008 	ldr.w	r4, [sl, #8]
 8016c78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016c7a:	47a0      	blx	r4
 8016c7c:	b00d      	add	sp, #52	; 0x34
 8016c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c82:	2500      	movs	r5, #0
 8016c84:	462e      	mov	r6, r5
 8016c86:	e799      	b.n	8016bbc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08016c88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c8c:	461d      	mov	r5, r3
 8016c8e:	b0db      	sub	sp, #364	; 0x16c
 8016c90:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8016c94:	910f      	str	r1, [sp, #60]	; 0x3c
 8016c96:	930a      	str	r3, [sp, #40]	; 0x28
 8016c98:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8016c9c:	9009      	str	r0, [sp, #36]	; 0x24
 8016c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ca0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8016ca4:	4614      	mov	r4, r2
 8016ca6:	9310      	str	r3, [sp, #64]	; 0x40
 8016ca8:	6803      	ldr	r3, [r0, #0]
 8016caa:	4629      	mov	r1, r5
 8016cac:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8016cae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016cb2:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8016cb6:	47b8      	blx	r7
 8016cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cba:	6058      	str	r0, [r3, #4]
 8016cbc:	2800      	cmp	r0, #0
 8016cbe:	f000 83a1 	beq.w	8017404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016cc2:	ed94 7a02 	vldr	s14, [r4, #8]
 8016cc6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016cca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016cce:	682b      	ldr	r3, [r5, #0]
 8016cd0:	9314      	str	r3, [sp, #80]	; 0x50
 8016cd2:	686b      	ldr	r3, [r5, #4]
 8016cd4:	9315      	str	r3, [sp, #84]	; 0x54
 8016cd6:	4bc1      	ldr	r3, [pc, #772]	; (8016fdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8016cd8:	7819      	ldrb	r1, [r3, #0]
 8016cda:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8016cde:	2900      	cmp	r1, #0
 8016ce0:	bf16      	itet	ne
 8016ce2:	4619      	movne	r1, r3
 8016ce4:	4611      	moveq	r1, r2
 8016ce6:	4613      	movne	r3, r2
 8016ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cec:	9116      	str	r1, [sp, #88]	; 0x58
 8016cee:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8016cf2:	f240 8387 	bls.w	8017404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016cf6:	ed94 7a07 	vldr	s14, [r4, #28]
 8016cfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d02:	f240 837f 	bls.w	8017404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d06:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8016d0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d12:	f240 8377 	bls.w	8017404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d16:	6822      	ldr	r2, [r4, #0]
 8016d18:	4bb1      	ldr	r3, [pc, #708]	; (8016fe0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8016d1a:	429a      	cmp	r2, r3
 8016d1c:	f2c0 8372 	blt.w	8017404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d20:	49b0      	ldr	r1, [pc, #704]	; (8016fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8016d22:	6963      	ldr	r3, [r4, #20]
 8016d24:	428a      	cmp	r2, r1
 8016d26:	f300 836d 	bgt.w	8017404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d2a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016d2e:	48ae      	ldr	r0, [pc, #696]	; (8016fe8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8016d30:	33ff      	adds	r3, #255	; 0xff
 8016d32:	4283      	cmp	r3, r0
 8016d34:	f200 8366 	bhi.w	8017404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016d3a:	4dac      	ldr	r5, [pc, #688]	; (8016fec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8016d3c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016d40:	33ff      	adds	r3, #255	; 0xff
 8016d42:	42ab      	cmp	r3, r5
 8016d44:	f200 835e 	bhi.w	8017404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d48:	6862      	ldr	r2, [r4, #4]
 8016d4a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8016d4e:	33ff      	adds	r3, #255	; 0xff
 8016d50:	4283      	cmp	r3, r0
 8016d52:	f200 8357 	bhi.w	8017404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d56:	69a1      	ldr	r1, [r4, #24]
 8016d58:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8016d5c:	33ff      	adds	r3, #255	; 0xff
 8016d5e:	4283      	cmp	r3, r0
 8016d60:	f200 8350 	bhi.w	8017404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016d66:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8016d6a:	30ff      	adds	r0, #255	; 0xff
 8016d6c:	42a8      	cmp	r0, r5
 8016d6e:	f200 8349 	bhi.w	8017404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d72:	428a      	cmp	r2, r1
 8016d74:	f280 8110 	bge.w	8016f98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8016d78:	429a      	cmp	r2, r3
 8016d7a:	f300 8119 	bgt.w	8016fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8016d7e:	4299      	cmp	r1, r3
 8016d80:	f280 811d 	bge.w	8016fbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8016d84:	2502      	movs	r5, #2
 8016d86:	2701      	movs	r7, #1
 8016d88:	46a9      	mov	r9, r5
 8016d8a:	46b8      	mov	r8, r7
 8016d8c:	f04f 0a00 	mov.w	sl, #0
 8016d90:	4621      	mov	r1, r4
 8016d92:	a849      	add	r0, sp, #292	; 0x124
 8016d94:	f002 ffc0 	bl	8019d18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8016d98:	4622      	mov	r2, r4
 8016d9a:	4653      	mov	r3, sl
 8016d9c:	a949      	add	r1, sp, #292	; 0x124
 8016d9e:	f8cd 9000 	str.w	r9, [sp]
 8016da2:	a819      	add	r0, sp, #100	; 0x64
 8016da4:	f003 f8ea 	bl	8019f7c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016da8:	4622      	mov	r2, r4
 8016daa:	4653      	mov	r3, sl
 8016dac:	a949      	add	r1, sp, #292	; 0x124
 8016dae:	f8cd 8000 	str.w	r8, [sp]
 8016db2:	a829      	add	r0, sp, #164	; 0xa4
 8016db4:	f003 f8e2 	bl	8019f7c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016db8:	4643      	mov	r3, r8
 8016dba:	4622      	mov	r2, r4
 8016dbc:	a949      	add	r1, sp, #292	; 0x124
 8016dbe:	f8cd 9000 	str.w	r9, [sp]
 8016dc2:	a839      	add	r0, sp, #228	; 0xe4
 8016dc4:	f003 f8da 	bl	8019f7c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016dc8:	42af      	cmp	r7, r5
 8016dca:	bfb5      	itete	lt
 8016dcc:	2300      	movlt	r3, #0
 8016dce:	2301      	movge	r3, #1
 8016dd0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016dd2:	930e      	strge	r3, [sp, #56]	; 0x38
 8016dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016dd6:	af12      	add	r7, sp, #72	; 0x48
 8016dd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016ddc:	bfb9      	ittee	lt
 8016dde:	ad29      	addlt	r5, sp, #164	; 0xa4
 8016de0:	ac19      	addlt	r4, sp, #100	; 0x64
 8016de2:	ad19      	addge	r5, sp, #100	; 0x64
 8016de4:	ac29      	addge	r4, sp, #164	; 0xa4
 8016de6:	e887 0003 	stmia.w	r7, {r0, r1}
 8016dea:	b928      	cbnz	r0, 8016df8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8016dec:	4b80      	ldr	r3, [pc, #512]	; (8016ff0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8016dee:	6818      	ldr	r0, [r3, #0]
 8016df0:	6803      	ldr	r3, [r0, #0]
 8016df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016df4:	4798      	blx	r3
 8016df6:	6038      	str	r0, [r7, #0]
 8016df8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016dfa:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016dfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016e02:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016e04:	930c      	str	r3, [sp, #48]	; 0x30
 8016e06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016e08:	6963      	ldr	r3, [r4, #20]
 8016e0a:	440b      	add	r3, r1
 8016e0c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016e10:	4408      	add	r0, r1
 8016e12:	b200      	sxth	r0, r0
 8016e14:	4283      	cmp	r3, r0
 8016e16:	900d      	str	r0, [sp, #52]	; 0x34
 8016e18:	f280 80dd 	bge.w	8016fd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8016e1c:	428b      	cmp	r3, r1
 8016e1e:	da08      	bge.n	8016e32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016e20:	2a00      	cmp	r2, #0
 8016e22:	dd06      	ble.n	8016e32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016e24:	1acb      	subs	r3, r1, r3
 8016e26:	429a      	cmp	r2, r3
 8016e28:	f2c0 80e4 	blt.w	8016ff4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	f300 80e2 	bgt.w	8016ff6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8016e32:	6967      	ldr	r7, [r4, #20]
 8016e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e36:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016e3a:	443b      	add	r3, r7
 8016e3c:	461f      	mov	r7, r3
 8016e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e40:	1bdf      	subs	r7, r3, r7
 8016e42:	4297      	cmp	r7, r2
 8016e44:	bfa8      	it	ge
 8016e46:	4617      	movge	r7, r2
 8016e48:	2f00      	cmp	r7, #0
 8016e4a:	f340 8166 	ble.w	801711a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8016e4e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016e50:	6829      	ldr	r1, [r5, #0]
 8016e52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016e56:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016e5a:	4411      	add	r1, r2
 8016e5c:	4299      	cmp	r1, r3
 8016e5e:	6820      	ldr	r0, [r4, #0]
 8016e60:	dd1a      	ble.n	8016e98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016e62:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016e66:	4402      	add	r2, r0
 8016e68:	440b      	add	r3, r1
 8016e6a:	b21b      	sxth	r3, r3
 8016e6c:	429a      	cmp	r2, r3
 8016e6e:	dc13      	bgt.n	8016e98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016e70:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e74:	a912      	add	r1, sp, #72	; 0x48
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	9206      	str	r2, [sp, #24]
 8016e7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016e7c:	9500      	str	r5, [sp, #0]
 8016e7e:	9205      	str	r2, [sp, #20]
 8016e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016e82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e84:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016e88:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016e8a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016e8e:	aa49      	add	r2, sp, #292	; 0x124
 8016e90:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016e94:	4623      	mov	r3, r4
 8016e96:	47c8      	blx	r9
 8016e98:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016e9c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016ea0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016ea4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016ea8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016eac:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016eb0:	ed94 6a08 	vldr	s12, [r4, #32]
 8016eb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016eb8:	edd4 6a07 	vldr	s13, [r4, #28]
 8016ebc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016ec0:	441a      	add	r2, r3
 8016ec2:	6963      	ldr	r3, [r4, #20]
 8016ec4:	68a1      	ldr	r1, [r4, #8]
 8016ec6:	3301      	adds	r3, #1
 8016ec8:	6163      	str	r3, [r4, #20]
 8016eca:	69a3      	ldr	r3, [r4, #24]
 8016ecc:	6022      	str	r2, [r4, #0]
 8016ece:	3b01      	subs	r3, #1
 8016ed0:	61a3      	str	r3, [r4, #24]
 8016ed2:	6923      	ldr	r3, [r4, #16]
 8016ed4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016ed8:	440b      	add	r3, r1
 8016eda:	68e1      	ldr	r1, [r4, #12]
 8016edc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016ee0:	428b      	cmp	r3, r1
 8016ee2:	edc4 6a07 	vstr	s13, [r4, #28]
 8016ee6:	6123      	str	r3, [r4, #16]
 8016ee8:	db15      	blt.n	8016f16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8016eea:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016eee:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016ef2:	edc4 6a07 	vstr	s13, [r4, #28]
 8016ef6:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016efa:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016efe:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016f02:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016f0a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016f0e:	3201      	adds	r2, #1
 8016f10:	1a5b      	subs	r3, r3, r1
 8016f12:	6022      	str	r2, [r4, #0]
 8016f14:	6123      	str	r3, [r4, #16]
 8016f16:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016f1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016f1e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016f22:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016f26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016f2a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016f2e:	ed95 6a08 	vldr	s12, [r5, #32]
 8016f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016f36:	edd5 6a07 	vldr	s13, [r5, #28]
 8016f3a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016f3e:	441a      	add	r2, r3
 8016f40:	696b      	ldr	r3, [r5, #20]
 8016f42:	68a9      	ldr	r1, [r5, #8]
 8016f44:	3301      	adds	r3, #1
 8016f46:	616b      	str	r3, [r5, #20]
 8016f48:	69ab      	ldr	r3, [r5, #24]
 8016f4a:	602a      	str	r2, [r5, #0]
 8016f4c:	3b01      	subs	r3, #1
 8016f4e:	61ab      	str	r3, [r5, #24]
 8016f50:	692b      	ldr	r3, [r5, #16]
 8016f52:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016f56:	440b      	add	r3, r1
 8016f58:	68e9      	ldr	r1, [r5, #12]
 8016f5a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016f5e:	428b      	cmp	r3, r1
 8016f60:	edc5 6a07 	vstr	s13, [r5, #28]
 8016f64:	612b      	str	r3, [r5, #16]
 8016f66:	db15      	blt.n	8016f94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8016f68:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016f6c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016f70:	edc5 6a07 	vstr	s13, [r5, #28]
 8016f74:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016f78:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016f7c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016f80:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016f88:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016f8c:	3201      	adds	r2, #1
 8016f8e:	1a5b      	subs	r3, r3, r1
 8016f90:	602a      	str	r2, [r5, #0]
 8016f92:	612b      	str	r3, [r5, #16]
 8016f94:	3f01      	subs	r7, #1
 8016f96:	e757      	b.n	8016e48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016f98:	4299      	cmp	r1, r3
 8016f9a:	dc13      	bgt.n	8016fc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016f9c:	429a      	cmp	r2, r3
 8016f9e:	da14      	bge.n	8016fca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8016fa0:	2502      	movs	r5, #2
 8016fa2:	2703      	movs	r7, #3
 8016fa4:	46a9      	mov	r9, r5
 8016fa6:	f04f 0800 	mov.w	r8, #0
 8016faa:	f04f 0a01 	mov.w	sl, #1
 8016fae:	e6ef      	b.n	8016d90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016fb0:	2501      	movs	r5, #1
 8016fb2:	2700      	movs	r7, #0
 8016fb4:	46a9      	mov	r9, r5
 8016fb6:	46b8      	mov	r8, r7
 8016fb8:	f04f 0a02 	mov.w	sl, #2
 8016fbc:	e6e8      	b.n	8016d90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016fbe:	2501      	movs	r5, #1
 8016fc0:	2702      	movs	r7, #2
 8016fc2:	e6e1      	b.n	8016d88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016fc4:	2500      	movs	r5, #0
 8016fc6:	2701      	movs	r7, #1
 8016fc8:	e7f4      	b.n	8016fb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8016fca:	2702      	movs	r7, #2
 8016fcc:	2503      	movs	r5, #3
 8016fce:	f04f 0900 	mov.w	r9, #0
 8016fd2:	46b8      	mov	r8, r7
 8016fd4:	e7e9      	b.n	8016faa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8016fd6:	4613      	mov	r3, r2
 8016fd8:	e728      	b.n	8016e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8016fda:	bf00      	nop
 8016fdc:	20198150 	.word	0x20198150
 8016fe0:	fffd8f01 	.word	0xfffd8f01
 8016fe4:	00027100 	.word	0x00027100
 8016fe8:	0004e1ff 	.word	0x0004e1ff
 8016fec:	0004e1fe 	.word	0x0004e1fe
 8016ff0:	20198158 	.word	0x20198158
 8016ff4:	4613      	mov	r3, r2
 8016ff6:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8016ffa:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8016ffe:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8017002:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8017006:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801700a:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801700e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8017012:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8017016:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801701a:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801701e:	469e      	mov	lr, r3
 8017020:	469c      	mov	ip, r3
 8017022:	f04f 0900 	mov.w	r9, #0
 8017026:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017028:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801702a:	9111      	str	r1, [sp, #68]	; 0x44
 801702c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8017030:	f1bc 0f00 	cmp.w	ip, #0
 8017034:	d147      	bne.n	80170c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8017036:	eb03 0c07 	add.w	ip, r3, r7
 801703a:	1ad7      	subs	r7, r2, r3
 801703c:	f1b9 0f00 	cmp.w	r9, #0
 8017040:	d009      	beq.n	8017056 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8017042:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8017046:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801704a:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801704e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8017052:	9029      	str	r0, [sp, #164]	; 0xa4
 8017054:	912d      	str	r1, [sp, #180]	; 0xb4
 8017056:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801705a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801705e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017062:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017066:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801706a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801706e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017072:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017076:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801707a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801707e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8017082:	f04f 0800 	mov.w	r8, #0
 8017086:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017088:	9111      	str	r1, [sp, #68]	; 0x44
 801708a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801708e:	f1be 0f00 	cmp.w	lr, #0
 8017092:	d031      	beq.n	80170f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8017094:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017096:	4450      	add	r0, sl
 8017098:	4431      	add	r1, r6
 801709a:	4549      	cmp	r1, r9
 801709c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80170a0:	ee37 7a04 	vadd.f32	s14, s14, s8
 80170a4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80170a8:	db08      	blt.n	80170bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80170aa:	ee77 7a85 	vadd.f32	s15, s15, s10
 80170ae:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80170b2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80170b6:	3001      	adds	r0, #1
 80170b8:	eba1 0109 	sub.w	r1, r1, r9
 80170bc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80170c0:	f04f 0801 	mov.w	r8, #1
 80170c4:	e7e3      	b.n	801708e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80170c6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80170c8:	4450      	add	r0, sl
 80170ca:	4431      	add	r1, r6
 80170cc:	4541      	cmp	r1, r8
 80170ce:	ee37 7a24 	vadd.f32	s14, s14, s9
 80170d2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80170d6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80170da:	db08      	blt.n	80170ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80170dc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80170e0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80170e4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80170e8:	3001      	adds	r0, #1
 80170ea:	eba1 0108 	sub.w	r1, r1, r8
 80170ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80170f2:	f04f 0901 	mov.w	r9, #1
 80170f6:	e79b      	b.n	8017030 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80170f8:	449c      	add	ip, r3
 80170fa:	1aff      	subs	r7, r7, r3
 80170fc:	f1b8 0f00 	cmp.w	r8, #0
 8017100:	d009      	beq.n	8017116 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8017102:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017106:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801710a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801710e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017112:	9019      	str	r0, [sp, #100]	; 0x64
 8017114:	911d      	str	r1, [sp, #116]	; 0x74
 8017116:	1ad2      	subs	r2, r2, r3
 8017118:	e68b      	b.n	8016e32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801711a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801711c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801711e:	2b00      	cmp	r3, #0
 8017120:	f000 80d1 	beq.w	80172c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8017124:	ad19      	add	r5, sp, #100	; 0x64
 8017126:	ac39      	add	r4, sp, #228	; 0xe4
 8017128:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801712a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801712e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017132:	930c      	str	r3, [sp, #48]	; 0x30
 8017134:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017136:	6963      	ldr	r3, [r4, #20]
 8017138:	440b      	add	r3, r1
 801713a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801713e:	4408      	add	r0, r1
 8017140:	b200      	sxth	r0, r0
 8017142:	4283      	cmp	r3, r0
 8017144:	900d      	str	r0, [sp, #52]	; 0x34
 8017146:	f280 80c1 	bge.w	80172cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801714a:	428b      	cmp	r3, r1
 801714c:	da08      	bge.n	8017160 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801714e:	2a00      	cmp	r2, #0
 8017150:	dd06      	ble.n	8017160 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017152:	1acb      	subs	r3, r1, r3
 8017154:	429a      	cmp	r2, r3
 8017156:	f2c0 80bb 	blt.w	80172d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801715a:	2b00      	cmp	r3, #0
 801715c:	f300 80b9 	bgt.w	80172d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8017160:	6967      	ldr	r7, [r4, #20]
 8017162:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017164:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8017168:	443b      	add	r3, r7
 801716a:	461f      	mov	r7, r3
 801716c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801716e:	1bdf      	subs	r7, r3, r7
 8017170:	4297      	cmp	r7, r2
 8017172:	bfa8      	it	ge
 8017174:	4617      	movge	r7, r2
 8017176:	2f00      	cmp	r7, #0
 8017178:	f340 813c 	ble.w	80173f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801717c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801717e:	6829      	ldr	r1, [r5, #0]
 8017180:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017184:	f9bb 3000 	ldrsh.w	r3, [fp]
 8017188:	4411      	add	r1, r2
 801718a:	4299      	cmp	r1, r3
 801718c:	6820      	ldr	r0, [r4, #0]
 801718e:	dd1a      	ble.n	80171c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017190:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017194:	4402      	add	r2, r0
 8017196:	440b      	add	r3, r1
 8017198:	b21b      	sxth	r3, r3
 801719a:	429a      	cmp	r2, r3
 801719c:	dc13      	bgt.n	80171c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801719e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80171a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171a2:	a912      	add	r1, sp, #72	; 0x48
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	9206      	str	r2, [sp, #24]
 80171a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80171aa:	9500      	str	r5, [sp, #0]
 80171ac:	9205      	str	r2, [sp, #20]
 80171ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80171b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80171b2:	e9cd b203 	strd	fp, r2, [sp, #12]
 80171b6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80171b8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80171bc:	aa49      	add	r2, sp, #292	; 0x124
 80171be:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80171c2:	4623      	mov	r3, r4
 80171c4:	47c8      	blx	r9
 80171c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80171ca:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80171ce:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80171d2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80171d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80171da:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80171de:	ed94 6a08 	vldr	s12, [r4, #32]
 80171e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80171e6:	edd4 6a07 	vldr	s13, [r4, #28]
 80171ea:	ee76 6a86 	vadd.f32	s13, s13, s12
 80171ee:	441a      	add	r2, r3
 80171f0:	6963      	ldr	r3, [r4, #20]
 80171f2:	68a1      	ldr	r1, [r4, #8]
 80171f4:	3301      	adds	r3, #1
 80171f6:	6163      	str	r3, [r4, #20]
 80171f8:	69a3      	ldr	r3, [r4, #24]
 80171fa:	6022      	str	r2, [r4, #0]
 80171fc:	3b01      	subs	r3, #1
 80171fe:	61a3      	str	r3, [r4, #24]
 8017200:	6923      	ldr	r3, [r4, #16]
 8017202:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017206:	440b      	add	r3, r1
 8017208:	68e1      	ldr	r1, [r4, #12]
 801720a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801720e:	428b      	cmp	r3, r1
 8017210:	edc4 6a07 	vstr	s13, [r4, #28]
 8017214:	6123      	str	r3, [r4, #16]
 8017216:	db15      	blt.n	8017244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8017218:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801721c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017220:	edc4 6a07 	vstr	s13, [r4, #28]
 8017224:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017228:	ee36 7a87 	vadd.f32	s14, s13, s14
 801722c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017230:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017238:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801723c:	3201      	adds	r2, #1
 801723e:	1a5b      	subs	r3, r3, r1
 8017240:	6022      	str	r2, [r4, #0]
 8017242:	6123      	str	r3, [r4, #16]
 8017244:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017248:	e9d5 2300 	ldrd	r2, r3, [r5]
 801724c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017250:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017254:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017258:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801725c:	ed95 6a08 	vldr	s12, [r5, #32]
 8017260:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017264:	edd5 6a07 	vldr	s13, [r5, #28]
 8017268:	ee76 6a86 	vadd.f32	s13, s13, s12
 801726c:	441a      	add	r2, r3
 801726e:	696b      	ldr	r3, [r5, #20]
 8017270:	68a9      	ldr	r1, [r5, #8]
 8017272:	3301      	adds	r3, #1
 8017274:	616b      	str	r3, [r5, #20]
 8017276:	69ab      	ldr	r3, [r5, #24]
 8017278:	602a      	str	r2, [r5, #0]
 801727a:	3b01      	subs	r3, #1
 801727c:	61ab      	str	r3, [r5, #24]
 801727e:	692b      	ldr	r3, [r5, #16]
 8017280:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017284:	440b      	add	r3, r1
 8017286:	68e9      	ldr	r1, [r5, #12]
 8017288:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801728c:	428b      	cmp	r3, r1
 801728e:	edc5 6a07 	vstr	s13, [r5, #28]
 8017292:	612b      	str	r3, [r5, #16]
 8017294:	db15      	blt.n	80172c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8017296:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801729a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801729e:	edc5 6a07 	vstr	s13, [r5, #28]
 80172a2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80172a6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80172aa:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80172ae:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80172b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80172b6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80172ba:	3201      	adds	r2, #1
 80172bc:	1a5b      	subs	r3, r3, r1
 80172be:	602a      	str	r2, [r5, #0]
 80172c0:	612b      	str	r3, [r5, #16]
 80172c2:	3f01      	subs	r7, #1
 80172c4:	e757      	b.n	8017176 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80172c6:	ad39      	add	r5, sp, #228	; 0xe4
 80172c8:	ac19      	add	r4, sp, #100	; 0x64
 80172ca:	e72d      	b.n	8017128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80172cc:	4613      	mov	r3, r2
 80172ce:	e744      	b.n	801715a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80172d0:	4613      	mov	r3, r2
 80172d2:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80172d6:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80172da:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80172de:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80172e2:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80172e6:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80172ea:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80172ee:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80172f2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80172f6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80172fa:	469e      	mov	lr, r3
 80172fc:	461f      	mov	r7, r3
 80172fe:	f04f 0900 	mov.w	r9, #0
 8017302:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8017304:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8017308:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801730a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801730e:	960e      	str	r6, [sp, #56]	; 0x38
 8017310:	2f00      	cmp	r7, #0
 8017312:	d146      	bne.n	80173a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8017314:	449c      	add	ip, r3
 8017316:	1ad7      	subs	r7, r2, r3
 8017318:	f1b9 0f00 	cmp.w	r9, #0
 801731c:	d009      	beq.n	8017332 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801731e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8017322:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8017326:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801732a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801732e:	9039      	str	r0, [sp, #228]	; 0xe4
 8017330:	913d      	str	r1, [sp, #244]	; 0xf4
 8017332:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8017336:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801733a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801733e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017342:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8017346:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801734a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801734e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017352:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8017356:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801735a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801735e:	f04f 0800 	mov.w	r8, #0
 8017362:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017364:	910e      	str	r1, [sp, #56]	; 0x38
 8017366:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801736a:	f1be 0f00 	cmp.w	lr, #0
 801736e:	d030      	beq.n	80173d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8017370:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017372:	4450      	add	r0, sl
 8017374:	4431      	add	r1, r6
 8017376:	4549      	cmp	r1, r9
 8017378:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801737c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017380:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017384:	db08      	blt.n	8017398 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8017386:	ee77 7a85 	vadd.f32	s15, s15, s10
 801738a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801738e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017392:	3001      	adds	r0, #1
 8017394:	eba1 0109 	sub.w	r1, r1, r9
 8017398:	f10e 3eff 	add.w	lr, lr, #4294967295
 801739c:	f04f 0801 	mov.w	r8, #1
 80173a0:	e7e3      	b.n	801736a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80173a2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80173a4:	4450      	add	r0, sl
 80173a6:	4431      	add	r1, r6
 80173a8:	4541      	cmp	r1, r8
 80173aa:	ee37 7a24 	vadd.f32	s14, s14, s9
 80173ae:	ee77 7a84 	vadd.f32	s15, s15, s8
 80173b2:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80173b6:	db08      	blt.n	80173ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80173b8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80173bc:	ee37 7a25 	vadd.f32	s14, s14, s11
 80173c0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80173c4:	3001      	adds	r0, #1
 80173c6:	eba1 0108 	sub.w	r1, r1, r8
 80173ca:	3f01      	subs	r7, #1
 80173cc:	f04f 0901 	mov.w	r9, #1
 80173d0:	e79e      	b.n	8017310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80173d2:	449c      	add	ip, r3
 80173d4:	1aff      	subs	r7, r7, r3
 80173d6:	f1b8 0f00 	cmp.w	r8, #0
 80173da:	d009      	beq.n	80173f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80173dc:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80173e0:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80173e4:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80173e8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80173ec:	9019      	str	r0, [sp, #100]	; 0x64
 80173ee:	911d      	str	r1, [sp, #116]	; 0x74
 80173f0:	1ad2      	subs	r2, r2, r3
 80173f2:	e6b5      	b.n	8017160 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80173f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	b923      	cbnz	r3, 8017404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80173fa:	4b04      	ldr	r3, [pc, #16]	; (801740c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80173fc:	6818      	ldr	r0, [r3, #0]
 80173fe:	6803      	ldr	r3, [r0, #0]
 8017400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017402:	4798      	blx	r3
 8017404:	b05b      	add	sp, #364	; 0x16c
 8017406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801740a:	bf00      	nop
 801740c:	20198158 	.word	0x20198158

08017410 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8017410:	2b03      	cmp	r3, #3
 8017412:	d818      	bhi.n	8017446 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8017414:	e8df f003 	tbb	[pc, r3]
 8017418:	130d0602 	.word	0x130d0602
 801741c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017420:	1850      	adds	r0, r2, r1
 8017422:	4770      	bx	lr
 8017424:	8803      	ldrh	r3, [r0, #0]
 8017426:	8880      	ldrh	r0, [r0, #4]
 8017428:	4418      	add	r0, r3
 801742a:	b200      	sxth	r0, r0
 801742c:	1a80      	subs	r0, r0, r2
 801742e:	3801      	subs	r0, #1
 8017430:	4770      	bx	lr
 8017432:	8803      	ldrh	r3, [r0, #0]
 8017434:	8880      	ldrh	r0, [r0, #4]
 8017436:	4418      	add	r0, r3
 8017438:	b200      	sxth	r0, r0
 801743a:	1a40      	subs	r0, r0, r1
 801743c:	e7f7      	b.n	801742e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801743e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8017442:	4410      	add	r0, r2
 8017444:	4770      	bx	lr
 8017446:	2000      	movs	r0, #0
 8017448:	4770      	bx	lr

0801744a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801744a:	2b03      	cmp	r3, #3
 801744c:	d817      	bhi.n	801747e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801744e:	e8df f003 	tbb	[pc, r3]
 8017452:	0602      	.short	0x0602
 8017454:	1009      	.short	0x1009
 8017456:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801745a:	1850      	adds	r0, r2, r1
 801745c:	4770      	bx	lr
 801745e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017462:	e7fa      	b.n	801745a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8017464:	8843      	ldrh	r3, [r0, #2]
 8017466:	88c0      	ldrh	r0, [r0, #6]
 8017468:	4418      	add	r0, r3
 801746a:	b200      	sxth	r0, r0
 801746c:	1a80      	subs	r0, r0, r2
 801746e:	3801      	subs	r0, #1
 8017470:	4770      	bx	lr
 8017472:	8843      	ldrh	r3, [r0, #2]
 8017474:	88c0      	ldrh	r0, [r0, #6]
 8017476:	4418      	add	r0, r3
 8017478:	b200      	sxth	r0, r0
 801747a:	1a40      	subs	r0, r0, r1
 801747c:	e7f7      	b.n	801746e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801747e:	2000      	movs	r0, #0
 8017480:	4770      	bx	lr
	...

08017484 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8017484:	2200      	movs	r2, #0
 8017486:	4b01      	ldr	r3, [pc, #4]	; (801748c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8017488:	601a      	str	r2, [r3, #0]
 801748a:	4770      	bx	lr
 801748c:	20198160 	.word	0x20198160

08017490 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8017490:	4603      	mov	r3, r0
 8017492:	b1c8      	cbz	r0, 80174c8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8017494:	0c02      	lsrs	r2, r0, #16
 8017496:	0412      	lsls	r2, r2, #16
 8017498:	b9a2      	cbnz	r2, 80174c4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801749a:	0403      	lsls	r3, r0, #16
 801749c:	2010      	movs	r0, #16
 801749e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80174a2:	bf04      	itt	eq
 80174a4:	021b      	lsleq	r3, r3, #8
 80174a6:	3008      	addeq	r0, #8
 80174a8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80174ac:	bf04      	itt	eq
 80174ae:	011b      	lsleq	r3, r3, #4
 80174b0:	3004      	addeq	r0, #4
 80174b2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80174b6:	bf04      	itt	eq
 80174b8:	009b      	lsleq	r3, r3, #2
 80174ba:	3002      	addeq	r0, #2
 80174bc:	2b00      	cmp	r3, #0
 80174be:	db04      	blt.n	80174ca <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80174c0:	3001      	adds	r0, #1
 80174c2:	4770      	bx	lr
 80174c4:	2000      	movs	r0, #0
 80174c6:	e7ea      	b.n	801749e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80174c8:	2020      	movs	r0, #32
 80174ca:	4770      	bx	lr

080174cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80174cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174d0:	b087      	sub	sp, #28
 80174d2:	4681      	mov	r9, r0
 80174d4:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80174d8:	4610      	mov	r0, r2
 80174da:	4698      	mov	r8, r3
 80174dc:	460d      	mov	r5, r1
 80174de:	b981      	cbnz	r1, 8017502 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 80174e0:	b14b      	cbz	r3, 80174f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 80174e2:	460b      	mov	r3, r1
 80174e4:	e9cd 4700 	strd	r4, r7, [sp]
 80174e8:	464a      	mov	r2, r9
 80174ea:	4641      	mov	r1, r8
 80174ec:	f7ff ffee 	bl	80174cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80174f0:	b007      	add	sp, #28
 80174f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174f6:	f04f 33ff 	mov.w	r3, #4294967295
 80174fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80174fe:	603b      	str	r3, [r7, #0]
 8017500:	e7f6      	b.n	80174f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017502:	fa32 fa01 	lsrs.w	sl, r2, r1
 8017506:	d107      	bne.n	8017518 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8017508:	fb09 f602 	mul.w	r6, r9, r2
 801750c:	fbb6 f0f4 	udiv	r0, r6, r4
 8017510:	fb04 6610 	mls	r6, r4, r0, r6
 8017514:	603e      	str	r6, [r7, #0]
 8017516:	e7eb      	b.n	80174f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017518:	fa09 fb01 	lsl.w	fp, r9, r1
 801751c:	fbbb f3f4 	udiv	r3, fp, r4
 8017520:	2601      	movs	r6, #1
 8017522:	9302      	str	r3, [sp, #8]
 8017524:	408e      	lsls	r6, r1
 8017526:	fb0a f303 	mul.w	r3, sl, r3
 801752a:	3e01      	subs	r6, #1
 801752c:	4016      	ands	r6, r2
 801752e:	4630      	mov	r0, r6
 8017530:	9303      	str	r3, [sp, #12]
 8017532:	f7ff ffad 	bl	8017490 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017536:	464a      	mov	r2, r9
 8017538:	460b      	mov	r3, r1
 801753a:	e9cd 4700 	strd	r4, r7, [sp]
 801753e:	4601      	mov	r1, r0
 8017540:	4630      	mov	r0, r6
 8017542:	f7ff ffc3 	bl	80174cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017546:	9b02      	ldr	r3, [sp, #8]
 8017548:	4606      	mov	r6, r0
 801754a:	fb04 bb13 	mls	fp, r4, r3, fp
 801754e:	4658      	mov	r0, fp
 8017550:	eb05 0108 	add.w	r1, r5, r8
 8017554:	f7ff ff9c 	bl	8017490 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017558:	ab05      	add	r3, sp, #20
 801755a:	e9cd 4300 	strd	r4, r3, [sp]
 801755e:	465a      	mov	r2, fp
 8017560:	4603      	mov	r3, r0
 8017562:	4650      	mov	r0, sl
 8017564:	f7ff ffb2 	bl	80174cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017568:	6839      	ldr	r1, [r7, #0]
 801756a:	9a05      	ldr	r2, [sp, #20]
 801756c:	9b03      	ldr	r3, [sp, #12]
 801756e:	4411      	add	r1, r2
 8017570:	fbb1 f2f4 	udiv	r2, r1, r4
 8017574:	fb04 1412 	mls	r4, r4, r2, r1
 8017578:	18d3      	adds	r3, r2, r3
 801757a:	441e      	add	r6, r3
 801757c:	4430      	add	r0, r6
 801757e:	603c      	str	r4, [r7, #0]
 8017580:	e7b6      	b.n	80174f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08017582 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8017582:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017586:	b085      	sub	sp, #20
 8017588:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801758a:	f1b0 0900 	subs.w	r9, r0, #0
 801758e:	461d      	mov	r5, r3
 8017590:	bfbf      	itttt	lt
 8017592:	6823      	ldrlt	r3, [r4, #0]
 8017594:	f1c9 0900 	rsblt	r9, r9, #0
 8017598:	425b      	neglt	r3, r3
 801759a:	6023      	strlt	r3, [r4, #0]
 801759c:	bfb4      	ite	lt
 801759e:	f04f 36ff 	movlt.w	r6, #4294967295
 80175a2:	2601      	movge	r6, #1
 80175a4:	2a00      	cmp	r2, #0
 80175a6:	4617      	mov	r7, r2
 80175a8:	da04      	bge.n	80175b4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80175aa:	6823      	ldr	r3, [r4, #0]
 80175ac:	4257      	negs	r7, r2
 80175ae:	425b      	negs	r3, r3
 80175b0:	4276      	negs	r6, r6
 80175b2:	6023      	str	r3, [r4, #0]
 80175b4:	2d00      	cmp	r5, #0
 80175b6:	4638      	mov	r0, r7
 80175b8:	bfba      	itte	lt
 80175ba:	426d      	neglt	r5, r5
 80175bc:	f04f 38ff 	movlt.w	r8, #4294967295
 80175c0:	f04f 0801 	movge.w	r8, #1
 80175c4:	f7ff ff64 	bl	8017490 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80175c8:	ab03      	add	r3, sp, #12
 80175ca:	e9cd 5300 	strd	r5, r3, [sp]
 80175ce:	463a      	mov	r2, r7
 80175d0:	4603      	mov	r3, r0
 80175d2:	4648      	mov	r0, r9
 80175d4:	f7ff ff7a 	bl	80174cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80175d8:	6823      	ldr	r3, [r4, #0]
 80175da:	9a03      	ldr	r2, [sp, #12]
 80175dc:	4546      	cmp	r6, r8
 80175de:	441a      	add	r2, r3
 80175e0:	fb92 f3f5 	sdiv	r3, r2, r5
 80175e4:	4418      	add	r0, r3
 80175e6:	fb05 2313 	mls	r3, r5, r3, r2
 80175ea:	bf18      	it	ne
 80175ec:	4240      	negne	r0, r0
 80175ee:	1c72      	adds	r2, r6, #1
 80175f0:	6023      	str	r3, [r4, #0]
 80175f2:	d105      	bne.n	8017600 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	f1c3 0200 	rsb	r2, r3, #0
 80175fa:	db0b      	blt.n	8017614 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80175fc:	6022      	str	r2, [r4, #0]
 80175fe:	e006      	b.n	801760e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017600:	2e01      	cmp	r6, #1
 8017602:	d104      	bne.n	801760e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017604:	2b00      	cmp	r3, #0
 8017606:	da02      	bge.n	801760e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017608:	442b      	add	r3, r5
 801760a:	3801      	subs	r0, #1
 801760c:	6023      	str	r3, [r4, #0]
 801760e:	b005      	add	sp, #20
 8017610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017614:	3801      	subs	r0, #1
 8017616:	1b52      	subs	r2, r2, r5
 8017618:	e7f0      	b.n	80175fc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801761c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801761c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017620:	4c1c      	ldr	r4, [pc, #112]	; (8017694 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8017622:	4605      	mov	r5, r0
 8017624:	69a3      	ldr	r3, [r4, #24]
 8017626:	6807      	ldr	r7, [r0, #0]
 8017628:	b92b      	cbnz	r3, 8017636 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801762a:	6840      	ldr	r0, [r0, #4]
 801762c:	e9c5 7000 	strd	r7, r0, [r5]
 8017630:	b004      	add	sp, #16
 8017632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017636:	f04f 0802 	mov.w	r8, #2
 801763a:	fb93 f1f8 	sdiv	r1, r3, r8
 801763e:	68a2      	ldr	r2, [r4, #8]
 8017640:	ae04      	add	r6, sp, #16
 8017642:	440a      	add	r2, r1
 8017644:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017648:	69e1      	ldr	r1, [r4, #28]
 801764a:	463a      	mov	r2, r7
 801764c:	9600      	str	r6, [sp, #0]
 801764e:	6820      	ldr	r0, [r4, #0]
 8017650:	f7ff ff97 	bl	8017582 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017654:	69a3      	ldr	r3, [r4, #24]
 8017656:	4607      	mov	r7, r0
 8017658:	686a      	ldr	r2, [r5, #4]
 801765a:	6a21      	ldr	r1, [r4, #32]
 801765c:	9600      	str	r6, [sp, #0]
 801765e:	6860      	ldr	r0, [r4, #4]
 8017660:	f7ff ff8f 	bl	8017582 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017664:	69a3      	ldr	r3, [r4, #24]
 8017666:	6962      	ldr	r2, [r4, #20]
 8017668:	fb93 f8f8 	sdiv	r8, r3, r8
 801766c:	4442      	add	r2, r8
 801766e:	9203      	str	r2, [sp, #12]
 8017670:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017672:	682a      	ldr	r2, [r5, #0]
 8017674:	4407      	add	r7, r0
 8017676:	9600      	str	r6, [sp, #0]
 8017678:	68e0      	ldr	r0, [r4, #12]
 801767a:	f7ff ff82 	bl	8017582 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801767e:	9600      	str	r6, [sp, #0]
 8017680:	4680      	mov	r8, r0
 8017682:	69a3      	ldr	r3, [r4, #24]
 8017684:	686a      	ldr	r2, [r5, #4]
 8017686:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8017688:	6920      	ldr	r0, [r4, #16]
 801768a:	f7ff ff7a 	bl	8017582 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801768e:	4440      	add	r0, r8
 8017690:	e7cc      	b.n	801762c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8017692:	bf00      	nop
 8017694:	20198164 	.word	0x20198164

08017698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8017698:	4b07      	ldr	r3, [pc, #28]	; (80176b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801769a:	781b      	ldrb	r3, [r3, #0]
 801769c:	2b01      	cmp	r3, #1
 801769e:	d109      	bne.n	80176b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80176a0:	f9b1 3000 	ldrsh.w	r3, [r1]
 80176a4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80176a8:	8003      	strh	r3, [r0, #0]
 80176aa:	4b04      	ldr	r3, [pc, #16]	; (80176bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80176ac:	881b      	ldrh	r3, [r3, #0]
 80176ae:	3b01      	subs	r3, #1
 80176b0:	1a9b      	subs	r3, r3, r2
 80176b2:	800b      	strh	r3, [r1, #0]
 80176b4:	4770      	bx	lr
 80176b6:	bf00      	nop
 80176b8:	20198150 	.word	0x20198150
 80176bc:	2019814c 	.word	0x2019814c

080176c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80176c0:	b510      	push	{r4, lr}
 80176c2:	4b07      	ldr	r3, [pc, #28]	; (80176e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80176c4:	781b      	ldrb	r3, [r3, #0]
 80176c6:	2b01      	cmp	r3, #1
 80176c8:	d108      	bne.n	80176dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80176ca:	4b06      	ldr	r3, [pc, #24]	; (80176e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80176cc:	880c      	ldrh	r4, [r1, #0]
 80176ce:	881b      	ldrh	r3, [r3, #0]
 80176d0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80176d4:	3b01      	subs	r3, #1
 80176d6:	1b1b      	subs	r3, r3, r4
 80176d8:	8003      	strh	r3, [r0, #0]
 80176da:	800a      	strh	r2, [r1, #0]
 80176dc:	bd10      	pop	{r4, pc}
 80176de:	bf00      	nop
 80176e0:	20198150 	.word	0x20198150
 80176e4:	2019814c 	.word	0x2019814c

080176e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80176e8:	b510      	push	{r4, lr}
 80176ea:	4b0a      	ldr	r3, [pc, #40]	; (8017714 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80176ec:	781b      	ldrb	r3, [r3, #0]
 80176ee:	2b01      	cmp	r3, #1
 80176f0:	d10e      	bne.n	8017710 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80176f2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80176f6:	8843      	ldrh	r3, [r0, #2]
 80176f8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80176fc:	18ca      	adds	r2, r1, r3
 80176fe:	4b06      	ldr	r3, [pc, #24]	; (8017718 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8017700:	8044      	strh	r4, [r0, #2]
 8017702:	881b      	ldrh	r3, [r3, #0]
 8017704:	1a9b      	subs	r3, r3, r2
 8017706:	8003      	strh	r3, [r0, #0]
 8017708:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801770c:	8081      	strh	r1, [r0, #4]
 801770e:	80c3      	strh	r3, [r0, #6]
 8017710:	bd10      	pop	{r4, pc}
 8017712:	bf00      	nop
 8017714:	20198150 	.word	0x20198150
 8017718:	2019814c 	.word	0x2019814c

0801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801771c:	4b08      	ldr	r3, [pc, #32]	; (8017740 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801771e:	781b      	ldrb	r3, [r3, #0]
 8017720:	2b01      	cmp	r3, #1
 8017722:	d10c      	bne.n	801773e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8017724:	8803      	ldrh	r3, [r0, #0]
 8017726:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801772a:	8842      	ldrh	r2, [r0, #2]
 801772c:	8002      	strh	r2, [r0, #0]
 801772e:	185a      	adds	r2, r3, r1
 8017730:	4b04      	ldr	r3, [pc, #16]	; (8017744 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8017732:	881b      	ldrh	r3, [r3, #0]
 8017734:	1a9b      	subs	r3, r3, r2
 8017736:	8043      	strh	r3, [r0, #2]
 8017738:	88c3      	ldrh	r3, [r0, #6]
 801773a:	80c1      	strh	r1, [r0, #6]
 801773c:	8083      	strh	r3, [r0, #4]
 801773e:	4770      	bx	lr
 8017740:	20198150 	.word	0x20198150
 8017744:	2019814c 	.word	0x2019814c

08017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017748:	b510      	push	{r4, lr}
 801774a:	4b07      	ldr	r3, [pc, #28]	; (8017768 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801774c:	781b      	ldrb	r3, [r3, #0]
 801774e:	2b01      	cmp	r3, #1
 8017750:	d108      	bne.n	8017764 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017752:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017756:	f9b0 4000 	ldrsh.w	r4, [r0]
 801775a:	8003      	strh	r3, [r0, #0]
 801775c:	8893      	ldrh	r3, [r2, #4]
 801775e:	3b01      	subs	r3, #1
 8017760:	1b1b      	subs	r3, r3, r4
 8017762:	800b      	strh	r3, [r1, #0]
 8017764:	bd10      	pop	{r4, pc}
 8017766:	bf00      	nop
 8017768:	20198150 	.word	0x20198150

0801776c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801776c:	b510      	push	{r4, lr}
 801776e:	4b0a      	ldr	r3, [pc, #40]	; (8017798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017770:	460a      	mov	r2, r1
 8017772:	781b      	ldrb	r3, [r3, #0]
 8017774:	2b01      	cmp	r3, #1
 8017776:	d10d      	bne.n	8017794 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8017778:	8881      	ldrh	r1, [r0, #4]
 801777a:	8803      	ldrh	r3, [r0, #0]
 801777c:	440b      	add	r3, r1
 801777e:	4601      	mov	r1, r0
 8017780:	3b01      	subs	r3, #1
 8017782:	f821 3b02 	strh.w	r3, [r1], #2
 8017786:	f7ff ffdf 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801778a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801778e:	88c2      	ldrh	r2, [r0, #6]
 8017790:	80c3      	strh	r3, [r0, #6]
 8017792:	8082      	strh	r2, [r0, #4]
 8017794:	bd10      	pop	{r4, pc}
 8017796:	bf00      	nop
 8017798:	20198150 	.word	0x20198150

0801779c <_ZN8touchgfx11Application13requestRedrawEv>:
 801779c:	2100      	movs	r1, #0
 801779e:	4b06      	ldr	r3, [pc, #24]	; (80177b8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80177a0:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 80177a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80177a8:	4b04      	ldr	r3, [pc, #16]	; (80177bc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80177aa:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 80177ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80177b2:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 80177b6:	4770      	bx	lr
 80177b8:	2019814c 	.word	0x2019814c
 80177bc:	2019814e 	.word	0x2019814e

080177c0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80177c0:	4b03      	ldr	r3, [pc, #12]	; (80177d0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80177c2:	6818      	ldr	r0, [r3, #0]
 80177c4:	b110      	cbz	r0, 80177cc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80177c6:	6803      	ldr	r3, [r0, #0]
 80177c8:	699b      	ldr	r3, [r3, #24]
 80177ca:	4718      	bx	r3
 80177cc:	4770      	bx	lr
 80177ce:	bf00      	nop
 80177d0:	20198194 	.word	0x20198194

080177d4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80177d4:	4770      	bx	lr
	...

080177d8 <_ZN8touchgfx11Application4drawEv>:
 80177d8:	b507      	push	{r0, r1, r2, lr}
 80177da:	2100      	movs	r1, #0
 80177dc:	4b08      	ldr	r3, [pc, #32]	; (8017800 <_ZN8touchgfx11Application4drawEv+0x28>)
 80177de:	9100      	str	r1, [sp, #0]
 80177e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80177e4:	4b07      	ldr	r3, [pc, #28]	; (8017804 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80177e6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80177ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80177ee:	4669      	mov	r1, sp
 80177f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80177f4:	6803      	ldr	r3, [r0, #0]
 80177f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177f8:	4798      	blx	r3
 80177fa:	b003      	add	sp, #12
 80177fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8017800:	2019814c 	.word	0x2019814c
 8017804:	2019814e 	.word	0x2019814e

08017808 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017808:	4b03      	ldr	r3, [pc, #12]	; (8017818 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801780a:	6818      	ldr	r0, [r3, #0]
 801780c:	b110      	cbz	r0, 8017814 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801780e:	6803      	ldr	r3, [r0, #0]
 8017810:	69db      	ldr	r3, [r3, #28]
 8017812:	4718      	bx	r3
 8017814:	4770      	bx	lr
 8017816:	bf00      	nop
 8017818:	20198194 	.word	0x20198194

0801781c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801781c:	4b03      	ldr	r3, [pc, #12]	; (801782c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801781e:	6818      	ldr	r0, [r3, #0]
 8017820:	b110      	cbz	r0, 8017828 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8017822:	6803      	ldr	r3, [r0, #0]
 8017824:	6a1b      	ldr	r3, [r3, #32]
 8017826:	4718      	bx	r3
 8017828:	4770      	bx	lr
 801782a:	bf00      	nop
 801782c:	20198194 	.word	0x20198194

08017830 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8017830:	2300      	movs	r3, #0
 8017832:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8017836:	4770      	bx	lr

08017838 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017838:	4b03      	ldr	r3, [pc, #12]	; (8017848 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801783a:	6818      	ldr	r0, [r3, #0]
 801783c:	b110      	cbz	r0, 8017844 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801783e:	6803      	ldr	r3, [r0, #0]
 8017840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017842:	4718      	bx	r3
 8017844:	4770      	bx	lr
 8017846:	bf00      	nop
 8017848:	20198194 	.word	0x20198194

0801784c <_ZN8touchgfx11ApplicationD1Ev>:
 801784c:	4770      	bx	lr

0801784e <_ZN8touchgfx11ApplicationD0Ev>:
 801784e:	b510      	push	{r4, lr}
 8017850:	4604      	mov	r4, r0
 8017852:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8017856:	f010 fbfc 	bl	8028052 <_ZdlPvj>
 801785a:	4620      	mov	r0, r4
 801785c:	bd10      	pop	{r4, pc}

0801785e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801785e:	b510      	push	{r4, lr}
 8017860:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017864:	888a      	ldrh	r2, [r1, #4]
 8017866:	f9b0 3000 	ldrsh.w	r3, [r0]
 801786a:	4422      	add	r2, r4
 801786c:	b212      	sxth	r2, r2
 801786e:	4293      	cmp	r3, r2
 8017870:	da15      	bge.n	801789e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017872:	8882      	ldrh	r2, [r0, #4]
 8017874:	4413      	add	r3, r2
 8017876:	b21b      	sxth	r3, r3
 8017878:	429c      	cmp	r4, r3
 801787a:	da10      	bge.n	801789e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801787c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017880:	88c9      	ldrh	r1, [r1, #6]
 8017882:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017886:	4419      	add	r1, r3
 8017888:	b209      	sxth	r1, r1
 801788a:	428a      	cmp	r2, r1
 801788c:	da07      	bge.n	801789e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801788e:	88c0      	ldrh	r0, [r0, #6]
 8017890:	4410      	add	r0, r2
 8017892:	b200      	sxth	r0, r0
 8017894:	4283      	cmp	r3, r0
 8017896:	bfac      	ite	ge
 8017898:	2000      	movge	r0, #0
 801789a:	2001      	movlt	r0, #1
 801789c:	bd10      	pop	{r4, pc}
 801789e:	2000      	movs	r0, #0
 80178a0:	e7fc      	b.n	801789c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080178a2 <_ZN8touchgfx4Rect10restrictToEss>:
 80178a2:	f9b0 3000 	ldrsh.w	r3, [r0]
 80178a6:	b510      	push	{r4, lr}
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	da04      	bge.n	80178b6 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80178ac:	8884      	ldrh	r4, [r0, #4]
 80178ae:	4423      	add	r3, r4
 80178b0:	8083      	strh	r3, [r0, #4]
 80178b2:	2300      	movs	r3, #0
 80178b4:	8003      	strh	r3, [r0, #0]
 80178b6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80178ba:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80178be:	1b09      	subs	r1, r1, r4
 80178c0:	428b      	cmp	r3, r1
 80178c2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80178c6:	bfc8      	it	gt
 80178c8:	8081      	strhgt	r1, [r0, #4]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	da04      	bge.n	80178d8 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80178ce:	88c1      	ldrh	r1, [r0, #6]
 80178d0:	440b      	add	r3, r1
 80178d2:	80c3      	strh	r3, [r0, #6]
 80178d4:	2300      	movs	r3, #0
 80178d6:	8043      	strh	r3, [r0, #2]
 80178d8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80178dc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80178e0:	1a52      	subs	r2, r2, r1
 80178e2:	4293      	cmp	r3, r2
 80178e4:	bfc8      	it	gt
 80178e6:	80c2      	strhgt	r2, [r0, #6]
 80178e8:	bd10      	pop	{r4, pc}
	...

080178ec <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80178ec:	b510      	push	{r4, lr}
 80178ee:	460c      	mov	r4, r1
 80178f0:	4b0f      	ldr	r3, [pc, #60]	; (8017930 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80178f2:	4620      	mov	r0, r4
 80178f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80178f8:	4b0e      	ldr	r3, [pc, #56]	; (8017934 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80178fa:	f9b3 1000 	ldrsh.w	r1, [r3]
 80178fe:	f7ff ffd0 	bl	80178a2 <_ZN8touchgfx4Rect10restrictToEss>
 8017902:	4b0d      	ldr	r3, [pc, #52]	; (8017938 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8017904:	6818      	ldr	r0, [r3, #0]
 8017906:	b190      	cbz	r0, 801792e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8017908:	6803      	ldr	r3, [r0, #0]
 801790a:	4621      	mov	r1, r4
 801790c:	689b      	ldr	r3, [r3, #8]
 801790e:	4798      	blx	r3
 8017910:	4b0a      	ldr	r3, [pc, #40]	; (801793c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8017912:	6818      	ldr	r0, [r3, #0]
 8017914:	b118      	cbz	r0, 801791e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8017916:	6803      	ldr	r3, [r0, #0]
 8017918:	4621      	mov	r1, r4
 801791a:	689b      	ldr	r3, [r3, #8]
 801791c:	4798      	blx	r3
 801791e:	4b08      	ldr	r3, [pc, #32]	; (8017940 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8017920:	4621      	mov	r1, r4
 8017922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017926:	6818      	ldr	r0, [r3, #0]
 8017928:	6803      	ldr	r3, [r0, #0]
 801792a:	69db      	ldr	r3, [r3, #28]
 801792c:	4718      	bx	r3
 801792e:	bd10      	pop	{r4, pc}
 8017930:	2019814e 	.word	0x2019814e
 8017934:	2019814c 	.word	0x2019814c
 8017938:	20198194 	.word	0x20198194
 801793c:	20198190 	.word	0x20198190
 8017940:	20198158 	.word	0x20198158

08017944 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8017944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017946:	4606      	mov	r6, r0
 8017948:	4608      	mov	r0, r1
 801794a:	460f      	mov	r7, r1
 801794c:	f7fe f823 	bl	8015996 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017950:	b9e8      	cbnz	r0, 801798e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017952:	f9b7 5000 	ldrsh.w	r5, [r7]
 8017956:	f9b6 4000 	ldrsh.w	r4, [r6]
 801795a:	42a5      	cmp	r5, r4
 801795c:	db17      	blt.n	801798e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801795e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017962:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017966:	429a      	cmp	r2, r3
 8017968:	db11      	blt.n	801798e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801796a:	88b9      	ldrh	r1, [r7, #4]
 801796c:	440d      	add	r5, r1
 801796e:	88b1      	ldrh	r1, [r6, #4]
 8017970:	b22d      	sxth	r5, r5
 8017972:	440c      	add	r4, r1
 8017974:	b224      	sxth	r4, r4
 8017976:	42a5      	cmp	r5, r4
 8017978:	dc09      	bgt.n	801798e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801797a:	88f8      	ldrh	r0, [r7, #6]
 801797c:	4410      	add	r0, r2
 801797e:	88f2      	ldrh	r2, [r6, #6]
 8017980:	b200      	sxth	r0, r0
 8017982:	4413      	add	r3, r2
 8017984:	b21b      	sxth	r3, r3
 8017986:	4298      	cmp	r0, r3
 8017988:	bfcc      	ite	gt
 801798a:	2000      	movgt	r0, #0
 801798c:	2001      	movle	r0, #1
 801798e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017990 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8017990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017992:	4604      	mov	r4, r0
 8017994:	4608      	mov	r0, r1
 8017996:	460d      	mov	r5, r1
 8017998:	f7fd fffd 	bl	8015996 <_ZNK8touchgfx4Rect7isEmptyEv>
 801799c:	b978      	cbnz	r0, 80179be <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801799e:	4620      	mov	r0, r4
 80179a0:	f7fd fff9 	bl	8015996 <_ZNK8touchgfx4Rect7isEmptyEv>
 80179a4:	f9b5 6000 	ldrsh.w	r6, [r5]
 80179a8:	b150      	cbz	r0, 80179c0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80179aa:	8026      	strh	r6, [r4, #0]
 80179ac:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80179b0:	8063      	strh	r3, [r4, #2]
 80179b2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80179b6:	80a3      	strh	r3, [r4, #4]
 80179b8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80179bc:	80e3      	strh	r3, [r4, #6]
 80179be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179c0:	f9b4 1000 	ldrsh.w	r1, [r4]
 80179c4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80179c8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80179cc:	42b1      	cmp	r1, r6
 80179ce:	460f      	mov	r7, r1
 80179d0:	bfa8      	it	ge
 80179d2:	4637      	movge	r7, r6
 80179d4:	4293      	cmp	r3, r2
 80179d6:	4618      	mov	r0, r3
 80179d8:	bfa8      	it	ge
 80179da:	4610      	movge	r0, r2
 80179dc:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80179e0:	88ed      	ldrh	r5, [r5, #6]
 80179e2:	4466      	add	r6, ip
 80179e4:	442a      	add	r2, r5
 80179e6:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80179ea:	88e5      	ldrh	r5, [r4, #6]
 80179ec:	4461      	add	r1, ip
 80179ee:	442b      	add	r3, r5
 80179f0:	b236      	sxth	r6, r6
 80179f2:	b209      	sxth	r1, r1
 80179f4:	b212      	sxth	r2, r2
 80179f6:	b21b      	sxth	r3, r3
 80179f8:	428e      	cmp	r6, r1
 80179fa:	bfac      	ite	ge
 80179fc:	ebc7 0106 	rsbge	r1, r7, r6
 8017a00:	ebc7 0101 	rsblt	r1, r7, r1
 8017a04:	429a      	cmp	r2, r3
 8017a06:	bfac      	ite	ge
 8017a08:	ebc0 0202 	rsbge	r2, r0, r2
 8017a0c:	ebc0 0203 	rsblt	r2, r0, r3
 8017a10:	8027      	strh	r7, [r4, #0]
 8017a12:	8060      	strh	r0, [r4, #2]
 8017a14:	80a1      	strh	r1, [r4, #4]
 8017a16:	80e2      	strh	r2, [r4, #6]
 8017a18:	e7d1      	b.n	80179be <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08017a1c <_ZN8touchgfx11Application11getInstanceEv>:
 8017a1c:	4b01      	ldr	r3, [pc, #4]	; (8017a24 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8017a1e:	6818      	ldr	r0, [r3, #0]
 8017a20:	4770      	bx	lr
 8017a22:	bf00      	nop
 8017a24:	201981a4 	.word	0x201981a4

08017a28 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8017a28:	2300      	movs	r3, #0
 8017a2a:	b510      	push	{r4, lr}
 8017a2c:	4604      	mov	r4, r0
 8017a2e:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8017a32:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8017a36:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8017a3a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8017a3e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8017a42:	429a      	cmp	r2, r3
 8017a44:	d90e      	bls.n	8017a64 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8017a46:	18e2      	adds	r2, r4, r3
 8017a48:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8017a4c:	b122      	cbz	r2, 8017a58 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8017a4e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8017a52:	6803      	ldr	r3, [r0, #0]
 8017a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a56:	4798      	blx	r3
 8017a58:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8017a5c:	3301      	adds	r3, #1
 8017a5e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8017a62:	e7ea      	b.n	8017a3a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8017a64:	bd10      	pop	{r4, pc}

08017a66 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8017a66:	2300      	movs	r3, #0
 8017a68:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8017a6c:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8017a70:	30a4      	adds	r0, #164	; 0xa4
 8017a72:	f802 3b01 	strb.w	r3, [r2], #1
 8017a76:	4282      	cmp	r2, r0
 8017a78:	d1fb      	bne.n	8017a72 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8017a7a:	4770      	bx	lr

08017a7c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017a7c:	b570      	push	{r4, r5, r6, lr}
 8017a7e:	4c0b      	ldr	r4, [pc, #44]	; (8017aac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8017a80:	4605      	mov	r5, r0
 8017a82:	6820      	ldr	r0, [r4, #0]
 8017a84:	460e      	mov	r6, r1
 8017a86:	b110      	cbz	r0, 8017a8e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8017a88:	6803      	ldr	r3, [r0, #0]
 8017a8a:	695b      	ldr	r3, [r3, #20]
 8017a8c:	4798      	blx	r3
 8017a8e:	1d28      	adds	r0, r5, #4
 8017a90:	f7ff ffe9 	bl	8017a66 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8017a94:	6026      	str	r6, [r4, #0]
 8017a96:	6833      	ldr	r3, [r6, #0]
 8017a98:	4630      	mov	r0, r6
 8017a9a:	68db      	ldr	r3, [r3, #12]
 8017a9c:	4798      	blx	r3
 8017a9e:	682b      	ldr	r3, [r5, #0]
 8017aa0:	4628      	mov	r0, r5
 8017aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017aa8:	4718      	bx	r3
 8017aaa:	bf00      	nop
 8017aac:	20198194 	.word	0x20198194

08017ab0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8017ab0:	2300      	movs	r3, #0
 8017ab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ab4:	461a      	mov	r2, r3
 8017ab6:	461c      	mov	r4, r3
 8017ab8:	461d      	mov	r5, r3
 8017aba:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8017abe:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8017ac2:	459c      	cmp	ip, r3
 8017ac4:	dd1a      	ble.n	8017afc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8017ac6:	18c6      	adds	r6, r0, r3
 8017ac8:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8017acc:	b16e      	cbz	r6, 8017aea <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8017ace:	429a      	cmp	r2, r3
 8017ad0:	d008      	beq.n	8017ae4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8017ad2:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8017ad6:	fa1f fe82 	uxth.w	lr, r2
 8017ada:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8017ade:	1887      	adds	r7, r0, r2
 8017ae0:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8017ae4:	3201      	adds	r2, #1
 8017ae6:	3301      	adds	r3, #1
 8017ae8:	e7eb      	b.n	8017ac2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8017aea:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8017aee:	4299      	cmp	r1, r3
 8017af0:	bfa8      	it	ge
 8017af2:	3501      	addge	r5, #1
 8017af4:	429e      	cmp	r6, r3
 8017af6:	bfc8      	it	gt
 8017af8:	3401      	addgt	r4, #1
 8017afa:	e7f4      	b.n	8017ae6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8017afc:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8017b00:	1b49      	subs	r1, r1, r5
 8017b02:	1b1b      	subs	r3, r3, r4
 8017b04:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8017b08:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8017b0c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8017b10:	4293      	cmp	r3, r2
 8017b12:	dd03      	ble.n	8017b1c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8017b14:	3b01      	subs	r3, #1
 8017b16:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8017b1a:	e7f7      	b.n	8017b0c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8017b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017b20 <_ZN8touchgfx11Application15handleTickEventEv>:
 8017b20:	b570      	push	{r4, r5, r6, lr}
 8017b22:	4d16      	ldr	r5, [pc, #88]	; (8017b7c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8017b24:	4604      	mov	r4, r0
 8017b26:	6828      	ldr	r0, [r5, #0]
 8017b28:	b140      	cbz	r0, 8017b3c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017b2a:	7a03      	ldrb	r3, [r0, #8]
 8017b2c:	b933      	cbnz	r3, 8017b3c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017b2e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8017b32:	6803      	ldr	r3, [r0, #0]
 8017b34:	689b      	ldr	r3, [r3, #8]
 8017b36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b3a:	4718      	bx	r3
 8017b3c:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8017b40:	4e0f      	ldr	r6, [pc, #60]	; (8017b80 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8017b42:	b973      	cbnz	r3, 8017b62 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017b44:	b168      	cbz	r0, 8017b62 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017b46:	7a03      	ldrb	r3, [r0, #8]
 8017b48:	b15b      	cbz	r3, 8017b62 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017b4a:	6830      	ldr	r0, [r6, #0]
 8017b4c:	b110      	cbz	r0, 8017b54 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8017b4e:	6803      	ldr	r3, [r0, #0]
 8017b50:	691b      	ldr	r3, [r3, #16]
 8017b52:	4798      	blx	r3
 8017b54:	6828      	ldr	r0, [r5, #0]
 8017b56:	6803      	ldr	r3, [r0, #0]
 8017b58:	68db      	ldr	r3, [r3, #12]
 8017b5a:	4798      	blx	r3
 8017b5c:	2301      	movs	r3, #1
 8017b5e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8017b62:	3404      	adds	r4, #4
 8017b64:	4620      	mov	r0, r4
 8017b66:	f7ff ff5f 	bl	8017a28 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8017b6a:	4620      	mov	r0, r4
 8017b6c:	f7ff ffa0 	bl	8017ab0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8017b70:	6830      	ldr	r0, [r6, #0]
 8017b72:	b110      	cbz	r0, 8017b7a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8017b74:	6803      	ldr	r3, [r0, #0]
 8017b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b78:	e7dd      	b.n	8017b36 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8017b7a:	bd70      	pop	{r4, r5, r6, pc}
 8017b7c:	20198198 	.word	0x20198198
 8017b80:	20198194 	.word	0x20198194

08017b84 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8017b84:	4603      	mov	r3, r0
 8017b86:	2200      	movs	r2, #0
 8017b88:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8017b8c:	801a      	strh	r2, [r3, #0]
 8017b8e:	805a      	strh	r2, [r3, #2]
 8017b90:	809a      	strh	r2, [r3, #4]
 8017b92:	80da      	strh	r2, [r3, #6]
 8017b94:	3308      	adds	r3, #8
 8017b96:	428b      	cmp	r3, r1
 8017b98:	d1f8      	bne.n	8017b8c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8017b9a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8017b9e:	4770      	bx	lr

08017ba0 <_ZN8touchgfx11ApplicationC1Ev>:
 8017ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ba2:	4606      	mov	r6, r0
 8017ba4:	4604      	mov	r4, r0
 8017ba6:	2500      	movs	r5, #0
 8017ba8:	4b1b      	ldr	r3, [pc, #108]	; (8017c18 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8017baa:	22a8      	movs	r2, #168	; 0xa8
 8017bac:	f846 3b04 	str.w	r3, [r6], #4
 8017bb0:	2100      	movs	r1, #0
 8017bb2:	4630      	mov	r0, r6
 8017bb4:	f010 fb05 	bl	80281c2 <memset>
 8017bb8:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8017bbc:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8017bc0:	f7ff ffe0 	bl	8017b84 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017bc4:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8017bc8:	f7ff ffdc 	bl	8017b84 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017bcc:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8017bd0:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8017bd4:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8017bd8:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8017bdc:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8017be0:	490e      	ldr	r1, [pc, #56]	; (8017c1c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8017be2:	480f      	ldr	r0, [pc, #60]	; (8017c20 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8017be4:	f002 fc86 	bl	801a4f4 <CRC_Lock>
 8017be8:	4f0e      	ldr	r7, [pc, #56]	; (8017c24 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8017bea:	4b0f      	ldr	r3, [pc, #60]	; (8017c28 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8017bec:	b158      	cbz	r0, 8017c06 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8017bee:	801d      	strh	r5, [r3, #0]
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	4a0e      	ldr	r2, [pc, #56]	; (8017c2c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8017bf4:	4630      	mov	r0, r6
 8017bf6:	6013      	str	r3, [r2, #0]
 8017bf8:	4a0d      	ldr	r2, [pc, #52]	; (8017c30 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8017bfa:	603b      	str	r3, [r7, #0]
 8017bfc:	6013      	str	r3, [r2, #0]
 8017bfe:	f7ff ff32 	bl	8017a66 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8017c02:	4620      	mov	r0, r4
 8017c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017c0a:	2002      	movs	r0, #2
 8017c0c:	801a      	strh	r2, [r3, #0]
 8017c0e:	6038      	str	r0, [r7, #0]
 8017c10:	f001 fa28 	bl	8019064 <_ZN8touchgfx6Screen4drawEv>
 8017c14:	e7ec      	b.n	8017bf0 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8017c16:	bf00      	nop
 8017c18:	0802aa20 	.word	0x0802aa20
 8017c1c:	b5e8b5cd 	.word	0xb5e8b5cd
 8017c20:	f407a5c2 	.word	0xf407a5c2
 8017c24:	20198194 	.word	0x20198194
 8017c28:	20000058 	.word	0x20000058
 8017c2c:	201981a4 	.word	0x201981a4
 8017c30:	20198198 	.word	0x20198198

08017c34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8017c34:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8017c38:	b510      	push	{r4, lr}
 8017c3a:	3b01      	subs	r3, #1
 8017c3c:	b29b      	uxth	r3, r3
 8017c3e:	428b      	cmp	r3, r1
 8017c40:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8017c44:	d908      	bls.n	8017c58 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8017c46:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8017c4a:	681a      	ldr	r2, [r3, #0]
 8017c4c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8017c50:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8017c54:	685a      	ldr	r2, [r3, #4]
 8017c56:	6062      	str	r2, [r4, #4]
 8017c58:	bd10      	pop	{r4, pc}
	...

08017c5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8017c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c60:	4b8f      	ldr	r3, [pc, #572]	; (8017ea0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8017c62:	b08f      	sub	sp, #60	; 0x3c
 8017c64:	ac0a      	add	r4, sp, #40	; 0x28
 8017c66:	e884 0006 	stmia.w	r4, {r1, r2}
 8017c6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017c6e:	4b8d      	ldr	r3, [pc, #564]	; (8017ea4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8017c70:	4683      	mov	fp, r0
 8017c72:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017c76:	4620      	mov	r0, r4
 8017c78:	f7ff fe13 	bl	80178a2 <_ZN8touchgfx4Rect10restrictToEss>
 8017c7c:	4620      	mov	r0, r4
 8017c7e:	f7fd fe8a 	bl	8015996 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017c82:	2800      	cmp	r0, #0
 8017c84:	d16a      	bne.n	8017d5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017c86:	9403      	str	r4, [sp, #12]
 8017c88:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8017c8c:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8017c90:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8017c94:	35a4      	adds	r5, #164	; 0xa4
 8017c96:	9301      	str	r3, [sp, #4]
 8017c98:	b15c      	cbz	r4, 8017cb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8017c9a:	4629      	mov	r1, r5
 8017c9c:	9803      	ldr	r0, [sp, #12]
 8017c9e:	f7ff fe51 	bl	8017944 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017ca2:	3c01      	subs	r4, #1
 8017ca4:	b118      	cbz	r0, 8017cae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8017ca6:	b2a1      	uxth	r1, r4
 8017ca8:	9801      	ldr	r0, [sp, #4]
 8017caa:	f7ff ffc3 	bl	8017c34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017cae:	3d08      	subs	r5, #8
 8017cb0:	e7f2      	b.n	8017c98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8017cb2:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 8017cb6:	f108 33ff 	add.w	r3, r8, #4294967295
 8017cba:	9302      	str	r3, [sp, #8]
 8017cbc:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8017cc0:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8017cc4:	f8cd 8010 	str.w	r8, [sp, #16]
 8017cc8:	9306      	str	r3, [sp, #24]
 8017cca:	445c      	add	r4, fp
 8017ccc:	2500      	movs	r5, #0
 8017cce:	4626      	mov	r6, r4
 8017cd0:	462f      	mov	r7, r5
 8017cd2:	f8cd 8014 	str.w	r8, [sp, #20]
 8017cd6:	9b05      	ldr	r3, [sp, #20]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d073      	beq.n	8017dc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017cdc:	9903      	ldr	r1, [sp, #12]
 8017cde:	4630      	mov	r0, r6
 8017ce0:	f7ff fdbd 	bl	801785e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017ce4:	b350      	cbz	r0, 8017d3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017ce6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8017cea:	f9b6 c000 	ldrsh.w	ip, [r6]
 8017cee:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8017cf2:	45e6      	cmp	lr, ip
 8017cf4:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8017cf8:	db33      	blt.n	8017d62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8017cfa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8017cfe:	88b3      	ldrh	r3, [r6, #4]
 8017d00:	4472      	add	r2, lr
 8017d02:	4463      	add	r3, ip
 8017d04:	b212      	sxth	r2, r2
 8017d06:	b21b      	sxth	r3, r3
 8017d08:	429a      	cmp	r2, r3
 8017d0a:	dc2a      	bgt.n	8017d62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8017d0c:	88f3      	ldrh	r3, [r6, #6]
 8017d0e:	fa1f f289 	uxth.w	r2, r9
 8017d12:	4413      	add	r3, r2
 8017d14:	b29b      	uxth	r3, r3
 8017d16:	45ca      	cmp	sl, r9
 8017d18:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8017d1c:	fa0f fe83 	sxth.w	lr, r3
 8017d20:	fa1f fc8a 	uxth.w	ip, sl
 8017d24:	db0f      	blt.n	8017d46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8017d26:	eba3 030c 	sub.w	r3, r3, ip
 8017d2a:	1ac9      	subs	r1, r1, r3
 8017d2c:	b209      	sxth	r1, r1
 8017d2e:	2900      	cmp	r1, #0
 8017d30:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017d34:	dd12      	ble.n	8017d5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017d36:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8017d3a:	4605      	mov	r5, r0
 8017d3c:	9b05      	ldr	r3, [sp, #20]
 8017d3e:	3e08      	subs	r6, #8
 8017d40:	3b01      	subs	r3, #1
 8017d42:	9305      	str	r3, [sp, #20]
 8017d44:	e7c7      	b.n	8017cd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8017d46:	4461      	add	r1, ip
 8017d48:	b209      	sxth	r1, r1
 8017d4a:	4571      	cmp	r1, lr
 8017d4c:	dc38      	bgt.n	8017dc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017d4e:	eba2 020c 	sub.w	r2, r2, ip
 8017d52:	b212      	sxth	r2, r2
 8017d54:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8017d58:	2a00      	cmp	r2, #0
 8017d5a:	dcee      	bgt.n	8017d3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8017d5c:	b00f      	add	sp, #60	; 0x3c
 8017d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d62:	45ca      	cmp	sl, r9
 8017d64:	db2c      	blt.n	8017dc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017d66:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8017d6a:	449a      	add	sl, r3
 8017d6c:	88f3      	ldrh	r3, [r6, #6]
 8017d6e:	fa0f fa8a 	sxth.w	sl, sl
 8017d72:	4499      	add	r9, r3
 8017d74:	fa0f f989 	sxth.w	r9, r9
 8017d78:	45ca      	cmp	sl, r9
 8017d7a:	dc21      	bgt.n	8017dc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017d7c:	88b3      	ldrh	r3, [r6, #4]
 8017d7e:	fa1f f28c 	uxth.w	r2, ip
 8017d82:	4413      	add	r3, r2
 8017d84:	b29b      	uxth	r3, r3
 8017d86:	45e6      	cmp	lr, ip
 8017d88:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8017d8c:	fa1f f98e 	uxth.w	r9, lr
 8017d90:	fa0f fa83 	sxth.w	sl, r3
 8017d94:	db0a      	blt.n	8017dac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8017d96:	eba3 0309 	sub.w	r3, r3, r9
 8017d9a:	1ac9      	subs	r1, r1, r3
 8017d9c:	b209      	sxth	r1, r1
 8017d9e:	2900      	cmp	r1, #0
 8017da0:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8017da4:	ddda      	ble.n	8017d5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017da6:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8017daa:	e7c6      	b.n	8017d3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8017dac:	4449      	add	r1, r9
 8017dae:	b209      	sxth	r1, r1
 8017db0:	4551      	cmp	r1, sl
 8017db2:	dc05      	bgt.n	8017dc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017db4:	eba2 0209 	sub.w	r2, r2, r9
 8017db8:	b212      	sxth	r2, r2
 8017dba:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8017dbe:	e7cb      	b.n	8017d58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8017dc0:	4607      	mov	r7, r0
 8017dc2:	e7bb      	b.n	8017d3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017dc4:	2d00      	cmp	r5, #0
 8017dc6:	d181      	bne.n	8017ccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8017dc8:	2f00      	cmp	r7, #0
 8017dca:	f000 81de 	beq.w	801818a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8017dce:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8017dd2:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8017dd6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8017dda:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8017dde:	b2b9      	uxth	r1, r7
 8017de0:	b2b3      	uxth	r3, r6
 8017de2:	441a      	add	r2, r3
 8017de4:	448a      	add	sl, r1
 8017de6:	b292      	uxth	r2, r2
 8017de8:	fa1f fa8a 	uxth.w	sl, sl
 8017dec:	fa0f f882 	sxth.w	r8, r2
 8017df0:	9105      	str	r1, [sp, #20]
 8017df2:	fa0f f98a 	sxth.w	r9, sl
 8017df6:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8017dfa:	9b04      	ldr	r3, [sp, #16]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d053      	beq.n	8017ea8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8017e00:	9903      	ldr	r1, [sp, #12]
 8017e02:	4620      	mov	r0, r4
 8017e04:	f7ff fd2b 	bl	801785e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017e08:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017e0c:	b1c0      	cbz	r0, 8017e40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017e0e:	f9b4 e000 	ldrsh.w	lr, [r4]
 8017e12:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017e16:	4576      	cmp	r6, lr
 8017e18:	dc23      	bgt.n	8017e62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8017e1a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017e1e:	44f4      	add	ip, lr
 8017e20:	fa0f fc8c 	sxth.w	ip, ip
 8017e24:	45e0      	cmp	r8, ip
 8017e26:	db1c      	blt.n	8017e62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8017e28:	428f      	cmp	r7, r1
 8017e2a:	fa1f fc81 	uxth.w	ip, r1
 8017e2e:	88e1      	ldrh	r1, [r4, #6]
 8017e30:	dc0d      	bgt.n	8017e4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8017e32:	ebaa 0c0c 	sub.w	ip, sl, ip
 8017e36:	eba1 010c 	sub.w	r1, r1, ip
 8017e3a:	f8a4 9002 	strh.w	r9, [r4, #2]
 8017e3e:	80e1      	strh	r1, [r4, #6]
 8017e40:	4628      	mov	r0, r5
 8017e42:	9904      	ldr	r1, [sp, #16]
 8017e44:	3c08      	subs	r4, #8
 8017e46:	3901      	subs	r1, #1
 8017e48:	9104      	str	r1, [sp, #16]
 8017e4a:	4605      	mov	r5, r0
 8017e4c:	e7d3      	b.n	8017df6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 8017e4e:	4461      	add	r1, ip
 8017e50:	b209      	sxth	r1, r1
 8017e52:	4549      	cmp	r1, r9
 8017e54:	dcf5      	bgt.n	8017e42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017e56:	9905      	ldr	r1, [sp, #20]
 8017e58:	eba1 0c0c 	sub.w	ip, r1, ip
 8017e5c:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017e60:	e7ee      	b.n	8017e40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017e62:	428f      	cmp	r7, r1
 8017e64:	dced      	bgt.n	8017e42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017e66:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8017e6a:	4461      	add	r1, ip
 8017e6c:	b209      	sxth	r1, r1
 8017e6e:	4589      	cmp	r9, r1
 8017e70:	dbe7      	blt.n	8017e42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017e72:	4576      	cmp	r6, lr
 8017e74:	fa1f fc8e 	uxth.w	ip, lr
 8017e78:	88a1      	ldrh	r1, [r4, #4]
 8017e7a:	dc07      	bgt.n	8017e8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8017e7c:	eba2 0c0c 	sub.w	ip, r2, ip
 8017e80:	eba1 010c 	sub.w	r1, r1, ip
 8017e84:	f8a4 8000 	strh.w	r8, [r4]
 8017e88:	80a1      	strh	r1, [r4, #4]
 8017e8a:	e7d9      	b.n	8017e40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017e8c:	4461      	add	r1, ip
 8017e8e:	b209      	sxth	r1, r1
 8017e90:	4588      	cmp	r8, r1
 8017e92:	dbd6      	blt.n	8017e42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017e94:	eba3 0c0c 	sub.w	ip, r3, ip
 8017e98:	f8a4 c004 	strh.w	ip, [r4, #4]
 8017e9c:	e7d0      	b.n	8017e40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017e9e:	bf00      	nop
 8017ea0:	2019814e 	.word	0x2019814e
 8017ea4:	2019814c 	.word	0x2019814c
 8017ea8:	2d00      	cmp	r5, #0
 8017eaa:	f000 816e 	beq.w	801818a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8017eae:	9b06      	ldr	r3, [sp, #24]
 8017eb0:	445b      	add	r3, fp
 8017eb2:	461c      	mov	r4, r3
 8017eb4:	9b02      	ldr	r3, [sp, #8]
 8017eb6:	3301      	adds	r3, #1
 8017eb8:	f000 8167 	beq.w	801818a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8017ebc:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8017ec0:	4629      	mov	r1, r5
 8017ec2:	9803      	ldr	r0, [sp, #12]
 8017ec4:	f7ff fd3e 	bl	8017944 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017ec8:	b120      	cbz	r0, 8017ed4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8017eca:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8017ece:	9801      	ldr	r0, [sp, #4]
 8017ed0:	f7ff feb0 	bl	8017c34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017ed4:	9903      	ldr	r1, [sp, #12]
 8017ed6:	4628      	mov	r0, r5
 8017ed8:	f7ff fcc1 	bl	801785e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017edc:	2800      	cmp	r0, #0
 8017ede:	f000 809c 	beq.w	801801a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8017ee2:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8017ee6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8017eea:	fa1f f189 	uxth.w	r1, r9
 8017eee:	eb01 0c03 	add.w	ip, r1, r3
 8017ef2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8017ef6:	fa1f fa8c 	uxth.w	sl, ip
 8017efa:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8017efe:	9309      	str	r3, [sp, #36]	; 0x24
 8017f00:	b283      	uxth	r3, r0
 8017f02:	eb03 050c 	add.w	r5, r3, ip
 8017f06:	b2ad      	uxth	r5, r5
 8017f08:	9505      	str	r5, [sp, #20]
 8017f0a:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8017f0e:	4548      	cmp	r0, r9
 8017f10:	9504      	str	r5, [sp, #16]
 8017f12:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8017f16:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8017f1a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8017f1e:	f340 8099 	ble.w	8018054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8017f22:	1a5b      	subs	r3, r3, r1
 8017f24:	b29b      	uxth	r3, r3
 8017f26:	4596      	cmp	lr, r2
 8017f28:	fa0f f08a 	sxth.w	r0, sl
 8017f2c:	b21e      	sxth	r6, r3
 8017f2e:	dd2e      	ble.n	8017f8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8017f30:	9f02      	ldr	r7, [sp, #8]
 8017f32:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8017f36:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8017f3a:	9f04      	ldr	r7, [sp, #16]
 8017f3c:	fa1f fe8e 	uxth.w	lr, lr
 8017f40:	1a3f      	subs	r7, r7, r0
 8017f42:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8017f46:	b292      	uxth	r2, r2
 8017f48:	ebae 0102 	sub.w	r1, lr, r2
 8017f4c:	44a6      	add	lr, r4
 8017f4e:	4402      	add	r2, r0
 8017f50:	b289      	uxth	r1, r1
 8017f52:	fa0f fe8e 	sxth.w	lr, lr
 8017f56:	b212      	sxth	r2, r2
 8017f58:	b20d      	sxth	r5, r1
 8017f5a:	ebae 0202 	sub.w	r2, lr, r2
 8017f5e:	436f      	muls	r7, r5
 8017f60:	4372      	muls	r2, r6
 8017f62:	4297      	cmp	r7, r2
 8017f64:	db09      	blt.n	8017f7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8017f66:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8017f6a:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 8017f6e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8017f72:	449c      	add	ip, r3
 8017f74:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8017f78:	e686      	b.n	8017c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017f7a:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8017f7e:	4421      	add	r1, r4
 8017f80:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8017f84:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017f88:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8017f8c:	e67c      	b.n	8017c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017f8e:	9f04      	ldr	r7, [sp, #16]
 8017f90:	42b8      	cmp	r0, r7
 8017f92:	da27      	bge.n	8017fe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8017f94:	9902      	ldr	r1, [sp, #8]
 8017f96:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8017f9a:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8017f9e:	eb05 010e 	add.w	r1, r5, lr
 8017fa2:	fa1f f881 	uxth.w	r8, r1
 8017fa6:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8017faa:	fa0f f988 	sxth.w	r9, r8
 8017fae:	4411      	add	r1, r2
 8017fb0:	eba1 0108 	sub.w	r1, r1, r8
 8017fb4:	b289      	uxth	r1, r1
 8017fb6:	fa0f f881 	sxth.w	r8, r1
 8017fba:	eba2 020e 	sub.w	r2, r2, lr
 8017fbe:	1a3f      	subs	r7, r7, r0
 8017fc0:	4372      	muls	r2, r6
 8017fc2:	fb08 f707 	mul.w	r7, r8, r7
 8017fc6:	42ba      	cmp	r2, r7
 8017fc8:	dc06      	bgt.n	8017fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8017fca:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 8017fce:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8017fd2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8017fd6:	e7ca      	b.n	8017f6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8017fd8:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8017fdc:	4429      	add	r1, r5
 8017fde:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017fe2:	e651      	b.n	8017c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017fe4:	9805      	ldr	r0, [sp, #20]
 8017fe6:	2d06      	cmp	r5, #6
 8017fe8:	ebaa 0000 	sub.w	r0, sl, r0
 8017fec:	b280      	uxth	r0, r0
 8017fee:	fa0f fe80 	sxth.w	lr, r0
 8017ff2:	d817      	bhi.n	8018024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8017ff4:	9b04      	ldr	r3, [sp, #16]
 8017ff6:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8017ffa:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8017ffe:	1c6b      	adds	r3, r5, #1
 8018000:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8018004:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8018008:	9b01      	ldr	r3, [sp, #4]
 801800a:	9801      	ldr	r0, [sp, #4]
 801800c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018010:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8018014:	805a      	strh	r2, [r3, #2]
 8018016:	809e      	strh	r6, [r3, #4]
 8018018:	80d9      	strh	r1, [r3, #6]
 801801a:	9b02      	ldr	r3, [sp, #8]
 801801c:	3c08      	subs	r4, #8
 801801e:	3b01      	subs	r3, #1
 8018020:	9302      	str	r3, [sp, #8]
 8018022:	e747      	b.n	8017eb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8018024:	9a02      	ldr	r2, [sp, #8]
 8018026:	45b6      	cmp	lr, r6
 8018028:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801802c:	db0d      	blt.n	801804a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801802e:	449c      	add	ip, r3
 8018030:	fa1f fc8c 	uxth.w	ip, ip
 8018034:	445a      	add	r2, fp
 8018036:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801803a:	448c      	add	ip, r1
 801803c:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8018040:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8018044:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8018048:	e61e      	b.n	8017c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801804a:	445a      	add	r2, fp
 801804c:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8018050:	4484      	add	ip, r0
 8018052:	e78f      	b.n	8017f74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8018054:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8018058:	fa1f f18e 	uxth.w	r1, lr
 801805c:	eb01 0806 	add.w	r8, r1, r6
 8018060:	b293      	uxth	r3, r2
 8018062:	fa1f f888 	uxth.w	r8, r8
 8018066:	9306      	str	r3, [sp, #24]
 8018068:	fa0f f388 	sxth.w	r3, r8
 801806c:	9307      	str	r3, [sp, #28]
 801806e:	9f06      	ldr	r7, [sp, #24]
 8018070:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8018074:	4596      	cmp	lr, r2
 8018076:	443b      	add	r3, r7
 8018078:	b29b      	uxth	r3, r3
 801807a:	9308      	str	r3, [sp, #32]
 801807c:	da24      	bge.n	80180c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801807e:	9905      	ldr	r1, [sp, #20]
 8018080:	eba3 0308 	sub.w	r3, r3, r8
 8018084:	ebaa 0401 	sub.w	r4, sl, r1
 8018088:	b2a4      	uxth	r4, r4
 801808a:	b29b      	uxth	r3, r3
 801808c:	b225      	sxth	r5, r4
 801808e:	b219      	sxth	r1, r3
 8018090:	eba2 020e 	sub.w	r2, r2, lr
 8018094:	eba9 0000 	sub.w	r0, r9, r0
 8018098:	436a      	muls	r2, r5
 801809a:	4348      	muls	r0, r1
 801809c:	4282      	cmp	r2, r0
 801809e:	9a02      	ldr	r2, [sp, #8]
 80180a0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80180a4:	445a      	add	r2, fp
 80180a6:	dc06      	bgt.n	80180b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80180a8:	9b07      	ldr	r3, [sp, #28]
 80180aa:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 80180ae:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 80180b2:	44a4      	add	ip, r4
 80180b4:	e75e      	b.n	8017f74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80180b6:	9904      	ldr	r1, [sp, #16]
 80180b8:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 80180bc:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 80180c0:	4433      	add	r3, r6
 80180c2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80180c6:	e5df      	b.n	8017c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80180c8:	9f06      	ldr	r7, [sp, #24]
 80180ca:	9b04      	ldr	r3, [sp, #16]
 80180cc:	1bc9      	subs	r1, r1, r7
 80180ce:	fa0f f78a 	sxth.w	r7, sl
 80180d2:	b289      	uxth	r1, r1
 80180d4:	429f      	cmp	r7, r3
 80180d6:	fa0f fe81 	sxth.w	lr, r1
 80180da:	dd24      	ble.n	8018126 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4ca>
 80180dc:	9a05      	ldr	r2, [sp, #20]
 80180de:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80180e2:	ebaa 0202 	sub.w	r2, sl, r2
 80180e6:	9d07      	ldr	r5, [sp, #28]
 80180e8:	b292      	uxth	r2, r2
 80180ea:	eba5 0a03 	sub.w	sl, r5, r3
 80180ee:	b214      	sxth	r4, r2
 80180f0:	eba9 0000 	sub.w	r0, r9, r0
 80180f4:	fb0e f000 	mul.w	r0, lr, r0
 80180f8:	fb04 fa0a 	mul.w	sl, r4, sl
 80180fc:	9b02      	ldr	r3, [sp, #8]
 80180fe:	4550      	cmp	r0, sl
 8018100:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8018104:	445b      	add	r3, fp
 8018106:	db03      	blt.n	8018110 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b4>
 8018108:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801810c:	4494      	add	ip, r2
 801810e:	e731      	b.n	8017f74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8018110:	9a04      	ldr	r2, [sp, #16]
 8018112:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8018116:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801811a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801811e:	4431      	add	r1, r6
 8018120:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018124:	e75b      	b.n	8017fde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8018126:	9b08      	ldr	r3, [sp, #32]
 8018128:	2d06      	cmp	r5, #6
 801812a:	eba3 0308 	sub.w	r3, r3, r8
 801812e:	b29b      	uxth	r3, r3
 8018130:	b218      	sxth	r0, r3
 8018132:	d813      	bhi.n	801815c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x500>
 8018134:	9b07      	ldr	r3, [sp, #28]
 8018136:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801813a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801813e:	1c6b      	adds	r3, r5, #1
 8018140:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8018144:	9b01      	ldr	r3, [sp, #4]
 8018146:	9901      	ldr	r1, [sp, #4]
 8018148:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801814c:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8018150:	805a      	strh	r2, [r3, #2]
 8018152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018154:	f8a3 e006 	strh.w	lr, [r3, #6]
 8018158:	809a      	strh	r2, [r3, #4]
 801815a:	e75e      	b.n	801801a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801815c:	9c02      	ldr	r4, [sp, #8]
 801815e:	4570      	cmp	r0, lr
 8018160:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8018164:	db0d      	blt.n	8018182 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x526>
 8018166:	4431      	add	r1, r6
 8018168:	9b06      	ldr	r3, [sp, #24]
 801816a:	b289      	uxth	r1, r1
 801816c:	445c      	add	r4, fp
 801816e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8018172:	4419      	add	r1, r3
 8018174:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8018178:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801817c:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8018180:	e582      	b.n	8017c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018182:	445c      	add	r4, fp
 8018184:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8018188:	e79a      	b.n	80180c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801818a:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801818e:	2e07      	cmp	r6, #7
 8018190:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8018194:	d812      	bhi.n	80181bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x560>
 8018196:	1c75      	adds	r5, r6, #1
 8018198:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801819c:	9d01      	ldr	r5, [sp, #4]
 801819e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80181a2:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80181a6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80181aa:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80181ae:	442c      	add	r4, r5
 80181b0:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80181b4:	8061      	strh	r1, [r4, #2]
 80181b6:	80a2      	strh	r2, [r4, #4]
 80181b8:	80e3      	strh	r3, [r4, #6]
 80181ba:	e5cf      	b.n	8017d5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80181bc:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80181c0:	f04f 37ff 	mov.w	r7, #4294967295
 80181c4:	2500      	movs	r5, #0
 80181c6:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80181ca:	3e01      	subs	r6, #1
 80181cc:	445c      	add	r4, fp
 80181ce:	9305      	str	r3, [sp, #20]
 80181d0:	1e72      	subs	r2, r6, #1
 80181d2:	4691      	mov	r9, r2
 80181d4:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80181d8:	9302      	str	r3, [sp, #8]
 80181da:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 80181de:	9304      	str	r3, [sp, #16]
 80181e0:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 80181e4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80181e8:	bf16      	itet	ne
 80181ea:	9905      	ldrne	r1, [sp, #20]
 80181ec:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80181f0:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80181f4:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80181f8:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80181fc:	6818      	ldr	r0, [r3, #0]
 80181fe:	fb18 f801 	smulbb	r8, r8, r1
 8018202:	6859      	ldr	r1, [r3, #4]
 8018204:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018208:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801820c:	4671      	mov	r1, lr
 801820e:	a80c      	add	r0, sp, #48	; 0x30
 8018210:	9207      	str	r2, [sp, #28]
 8018212:	9306      	str	r3, [sp, #24]
 8018214:	f7ff fbbc 	bl	8017990 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018218:	f04f 0c08 	mov.w	ip, #8
 801821c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8018220:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8018224:	9b04      	ldr	r3, [sp, #16]
 8018226:	9a02      	ldr	r2, [sp, #8]
 8018228:	fb10 f001 	smulbb	r0, r0, r1
 801822c:	fb02 8803 	mla	r8, r2, r3, r8
 8018230:	eba0 0108 	sub.w	r1, r0, r8
 8018234:	fb90 f0fc 	sdiv	r0, r0, ip
 8018238:	4288      	cmp	r0, r1
 801823a:	dc20      	bgt.n	801827e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 801823c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8018240:	4551      	cmp	r1, sl
 8018242:	da03      	bge.n	801824c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
 8018244:	b1d9      	cbz	r1, 801827e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 8018246:	468a      	mov	sl, r1
 8018248:	464f      	mov	r7, r9
 801824a:	4635      	mov	r5, r6
 801824c:	f109 39ff 	add.w	r9, r9, #4294967295
 8018250:	f119 0f02 	cmn.w	r9, #2
 8018254:	d1c6      	bne.n	80181e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x588>
 8018256:	4616      	mov	r6, r2
 8018258:	3201      	adds	r2, #1
 801825a:	f1a4 0408 	sub.w	r4, r4, #8
 801825e:	d1b7      	bne.n	80181d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8018260:	9b01      	ldr	r3, [sp, #4]
 8018262:	b2ac      	uxth	r4, r5
 8018264:	00ed      	lsls	r5, r5, #3
 8018266:	1958      	adds	r0, r3, r5
 8018268:	1c7b      	adds	r3, r7, #1
 801826a:	d10b      	bne.n	8018284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x628>
 801826c:	4601      	mov	r1, r0
 801826e:	9803      	ldr	r0, [sp, #12]
 8018270:	f7ff fb8e 	bl	8017990 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018274:	4621      	mov	r1, r4
 8018276:	9801      	ldr	r0, [sp, #4]
 8018278:	f7ff fcdc 	bl	8017c34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801827c:	e504      	b.n	8017c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801827e:	464f      	mov	r7, r9
 8018280:	4635      	mov	r5, r6
 8018282:	e7ed      	b.n	8018260 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 8018284:	9b01      	ldr	r3, [sp, #4]
 8018286:	00ff      	lsls	r7, r7, #3
 8018288:	19d9      	adds	r1, r3, r7
 801828a:	f7ff fb81 	bl	8017990 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801828e:	9b03      	ldr	r3, [sp, #12]
 8018290:	445f      	add	r7, fp
 8018292:	cb03      	ldmia	r3!, {r0, r1}
 8018294:	445d      	add	r5, fp
 8018296:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801829a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801829e:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80182a2:	9b03      	ldr	r3, [sp, #12]
 80182a4:	6869      	ldr	r1, [r5, #4]
 80182a6:	c303      	stmia	r3!, {r0, r1}
 80182a8:	e7e4      	b.n	8018274 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x618>
 80182aa:	bf00      	nop

080182ac <_ZN8touchgfx11Application10invalidateEv>:
 80182ac:	2100      	movs	r1, #0
 80182ae:	4b09      	ldr	r3, [pc, #36]	; (80182d4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80182b0:	b082      	sub	sp, #8
 80182b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80182b6:	4b08      	ldr	r3, [pc, #32]	; (80182d8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80182b8:	9100      	str	r1, [sp, #0]
 80182ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80182be:	f8ad 2004 	strh.w	r2, [sp, #4]
 80182c2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80182c6:	ab02      	add	r3, sp, #8
 80182c8:	e913 0006 	ldmdb	r3, {r1, r2}
 80182cc:	b002      	add	sp, #8
 80182ce:	f7ff bcc5 	b.w	8017c5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80182d2:	bf00      	nop
 80182d4:	2019814c 	.word	0x2019814c
 80182d8:	2019814e 	.word	0x2019814e

080182dc <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80182dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182e0:	f500 7698 	add.w	r6, r0, #304	; 0x130
 80182e4:	b09b      	sub	sp, #108	; 0x6c
 80182e6:	4604      	mov	r4, r0
 80182e8:	4630      	mov	r0, r6
 80182ea:	f7fd fb54 	bl	8015996 <_ZNK8touchgfx4Rect7isEmptyEv>
 80182ee:	4605      	mov	r5, r0
 80182f0:	b940      	cbnz	r0, 8018304 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 80182f2:	e896 0006 	ldmia.w	r6, {r1, r2}
 80182f6:	4620      	mov	r0, r4
 80182f8:	f7ff fcb0 	bl	8017c5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80182fc:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8018300:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8018304:	4bc9      	ldr	r3, [pc, #804]	; (801862c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d03e      	beq.n	801838a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801830c:	4dc8      	ldr	r5, [pc, #800]	; (8018630 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801830e:	4628      	mov	r0, r5
 8018310:	f7fd fb41 	bl	8015996 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018314:	4606      	mov	r6, r0
 8018316:	2800      	cmp	r0, #0
 8018318:	d137      	bne.n	801838a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801831a:	4628      	mov	r0, r5
 801831c:	f7ff f9e4 	bl	80176e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018320:	6829      	ldr	r1, [r5, #0]
 8018322:	686a      	ldr	r2, [r5, #4]
 8018324:	4620      	mov	r0, r4
 8018326:	f7ff fc99 	bl	8017c5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801832a:	802e      	strh	r6, [r5, #0]
 801832c:	806e      	strh	r6, [r5, #2]
 801832e:	80ae      	strh	r6, [r5, #4]
 8018330:	80ee      	strh	r6, [r5, #6]
 8018332:	ae09      	add	r6, sp, #36	; 0x24
 8018334:	4630      	mov	r0, r6
 8018336:	f7ff fc25 	bl	8017b84 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801833a:	4abe      	ldr	r2, [pc, #760]	; (8018634 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801833c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8018340:	8815      	ldrh	r5, [r2, #0]
 8018342:	9202      	str	r2, [sp, #8]
 8018344:	462b      	mov	r3, r5
 8018346:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801834a:	429f      	cmp	r7, r3
 801834c:	d924      	bls.n	8018398 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801834e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8018352:	2907      	cmp	r1, #7
 8018354:	d816      	bhi.n	8018384 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8018356:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801835a:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801835e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8018362:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8018366:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801836a:	1c4a      	adds	r2, r1, #1
 801836c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8018370:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8018374:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8018378:	f8a2 9002 	strh.w	r9, [r2, #2]
 801837c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8018380:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018384:	3301      	adds	r3, #1
 8018386:	b29b      	uxth	r3, r3
 8018388:	e7df      	b.n	801834a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801838a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801838e:	2b00      	cmp	r3, #0
 8018390:	d1cf      	bne.n	8018332 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8018392:	b01b      	add	sp, #108	; 0x6c
 8018394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018398:	462f      	mov	r7, r5
 801839a:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801839e:	42bb      	cmp	r3, r7
 80183a0:	d90b      	bls.n	80183ba <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 80183a2:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80183a6:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 80183aa:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 80183ae:	4620      	mov	r0, r4
 80183b0:	3701      	adds	r7, #1
 80183b2:	f7ff fc53 	bl	8017c5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80183b6:	b2bf      	uxth	r7, r7
 80183b8:	e7ef      	b.n	801839a <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 80183ba:	4a9f      	ldr	r2, [pc, #636]	; (8018638 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80183bc:	6813      	ldr	r3, [r2, #0]
 80183be:	4690      	mov	r8, r2
 80183c0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80183c4:	2b01      	cmp	r3, #1
 80183c6:	f040 80e6 	bne.w	8018596 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 80183ca:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80183ce:	4629      	mov	r1, r5
 80183d0:	2500      	movs	r5, #0
 80183d2:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 80183d6:	33ae      	adds	r3, #174	; 0xae
 80183d8:	428f      	cmp	r7, r1
 80183da:	f103 0308 	add.w	r3, r3, #8
 80183de:	dd0a      	ble.n	80183f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 80183e0:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80183e4:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 80183e8:	3101      	adds	r1, #1
 80183ea:	4402      	add	r2, r0
 80183ec:	b212      	sxth	r2, r2
 80183ee:	4295      	cmp	r5, r2
 80183f0:	bfb8      	it	lt
 80183f2:	4615      	movlt	r5, r2
 80183f4:	e7f0      	b.n	80183d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 80183f6:	4b91      	ldr	r3, [pc, #580]	; (801863c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 80183f8:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8018638 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 80183fc:	881b      	ldrh	r3, [r3, #0]
 80183fe:	46d8      	mov	r8, fp
 8018400:	2b0f      	cmp	r3, #15
 8018402:	bf88      	it	hi
 8018404:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8018408:	f04f 0300 	mov.w	r3, #0
 801840c:	bf98      	it	ls
 801840e:	f04f 0a01 	movls.w	sl, #1
 8018412:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018416:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801841a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801841e:	4438      	add	r0, r7
 8018420:	b207      	sxth	r7, r0
 8018422:	f8db 0000 	ldr.w	r0, [fp]
 8018426:	42bd      	cmp	r5, r7
 8018428:	6803      	ldr	r3, [r0, #0]
 801842a:	f340 8084 	ble.w	8018536 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801842e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018432:	4798      	blx	r3
 8018434:	eb07 030a 	add.w	r3, r7, sl
 8018438:	4298      	cmp	r0, r3
 801843a:	da07      	bge.n	801844c <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 801843c:	4285      	cmp	r5, r0
 801843e:	dd05      	ble.n	801844c <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8018440:	4287      	cmp	r7, r0
 8018442:	dd6d      	ble.n	8018520 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8018444:	2f00      	cmp	r7, #0
 8018446:	dd6b      	ble.n	8018520 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8018448:	4628      	mov	r0, r5
 801844a:	e004      	b.n	8018456 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 801844c:	4287      	cmp	r7, r0
 801844e:	dcfb      	bgt.n	8018448 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8018450:	42a8      	cmp	r0, r5
 8018452:	bfa8      	it	ge
 8018454:	4628      	movge	r0, r5
 8018456:	2200      	movs	r2, #0
 8018458:	4b79      	ldr	r3, [pc, #484]	; (8018640 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801845a:	1bc0      	subs	r0, r0, r7
 801845c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018460:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018464:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018468:	9b02      	ldr	r3, [sp, #8]
 801846a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801846e:	881f      	ldrh	r7, [r3, #0]
 8018470:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018474:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8018478:	42bb      	cmp	r3, r7
 801847a:	d9cc      	bls.n	8018416 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 801847c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8018480:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8018484:	ab07      	add	r3, sp, #28
 8018486:	6851      	ldr	r1, [r2, #4]
 8018488:	c303      	stmia	r3!, {r0, r1}
 801848a:	a905      	add	r1, sp, #20
 801848c:	a807      	add	r0, sp, #28
 801848e:	f7ff f9e6 	bl	801785e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018492:	2800      	cmp	r0, #0
 8018494:	d04c      	beq.n	8018530 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 8018496:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801849a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801849e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 80184a2:	4686      	mov	lr, r0
 80184a4:	4290      	cmp	r0, r2
 80184a6:	4448      	add	r0, r9
 80184a8:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 80184ac:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80184b0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80184b4:	bfb8      	it	lt
 80184b6:	4696      	movlt	lr, r2
 80184b8:	444a      	add	r2, r9
 80184ba:	4299      	cmp	r1, r3
 80184bc:	b280      	uxth	r0, r0
 80184be:	b292      	uxth	r2, r2
 80184c0:	468c      	mov	ip, r1
 80184c2:	9303      	str	r3, [sp, #12]
 80184c4:	bfb8      	it	lt
 80184c6:	469c      	movlt	ip, r3
 80184c8:	fa0f f982 	sxth.w	r9, r2
 80184cc:	b203      	sxth	r3, r0
 80184ce:	454b      	cmp	r3, r9
 80184d0:	bfb8      	it	lt
 80184d2:	4602      	movlt	r2, r0
 80184d4:	eba2 020e 	sub.w	r2, r2, lr
 80184d8:	f8ad 2020 	strh.w	r2, [sp, #32]
 80184dc:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80184e0:	9b03      	ldr	r3, [sp, #12]
 80184e2:	4411      	add	r1, r2
 80184e4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80184e8:	b289      	uxth	r1, r1
 80184ea:	4413      	add	r3, r2
 80184ec:	b29b      	uxth	r3, r3
 80184ee:	b208      	sxth	r0, r1
 80184f0:	b21a      	sxth	r2, r3
 80184f2:	4290      	cmp	r0, r2
 80184f4:	bfb8      	it	lt
 80184f6:	460b      	movlt	r3, r1
 80184f8:	eba3 030c 	sub.w	r3, r3, ip
 80184fc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018500:	f8ad e01c 	strh.w	lr, [sp, #28]
 8018504:	f8ad c01e 	strh.w	ip, [sp, #30]
 8018508:	a807      	add	r0, sp, #28
 801850a:	f7fd fa44 	bl	8015996 <_ZNK8touchgfx4Rect7isEmptyEv>
 801850e:	b920      	cbnz	r0, 801851a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 8018510:	6823      	ldr	r3, [r4, #0]
 8018512:	a907      	add	r1, sp, #28
 8018514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018516:	4620      	mov	r0, r4
 8018518:	4798      	blx	r3
 801851a:	3701      	adds	r7, #1
 801851c:	b2bf      	uxth	r7, r7
 801851e:	e7a9      	b.n	8018474 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 8018520:	f8d8 0000 	ldr.w	r0, [r8]
 8018524:	2101      	movs	r1, #1
 8018526:	6803      	ldr	r3, [r0, #0]
 8018528:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801852c:	4798      	blx	r3
 801852e:	e772      	b.n	8018416 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8018530:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8018534:	e7e8      	b.n	8018508 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8018536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018538:	4798      	blx	r3
 801853a:	4b42      	ldr	r3, [pc, #264]	; (8018644 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801853c:	781b      	ldrb	r3, [r3, #0]
 801853e:	2b00      	cmp	r3, #0
 8018540:	f43f af27 	beq.w	8018392 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8018544:	2300      	movs	r3, #0
 8018546:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801854a:	9b02      	ldr	r3, [sp, #8]
 801854c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8018550:	881b      	ldrh	r3, [r3, #0]
 8018552:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8018556:	429d      	cmp	r5, r3
 8018558:	f67f af1b 	bls.w	8018392 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801855c:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8018560:	2907      	cmp	r1, #7
 8018562:	d815      	bhi.n	8018590 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 8018564:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8018568:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801856c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8018570:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8018574:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8018578:	1c4a      	adds	r2, r1, #1
 801857a:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801857e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8018582:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8018586:	f8a2 e002 	strh.w	lr, [r2, #2]
 801858a:	f8a2 c004 	strh.w	ip, [r2, #4]
 801858e:	80d7      	strh	r7, [r2, #6]
 8018590:	3301      	adds	r3, #1
 8018592:	b29b      	uxth	r3, r3
 8018594:	e7df      	b.n	8018556 <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 8018596:	2b02      	cmp	r3, #2
 8018598:	f040 8136 	bne.w	8018808 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 801859c:	4b2a      	ldr	r3, [pc, #168]	; (8018648 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 801859e:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 80185a2:	781b      	ldrb	r3, [r3, #0]
 80185a4:	2b01      	cmp	r3, #1
 80185a6:	f000 809c 	beq.w	80186e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 80185aa:	9b02      	ldr	r3, [sp, #8]
 80185ac:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 80185b0:	f8b3 b000 	ldrh.w	fp, [r3]
 80185b4:	f10b 0b01 	add.w	fp, fp, #1
 80185b8:	fa1f fb8b 	uxth.w	fp, fp
 80185bc:	2a00      	cmp	r2, #0
 80185be:	d0bc      	beq.n	801853a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80185c0:	4659      	mov	r1, fp
 80185c2:	f04f 0800 	mov.w	r8, #0
 80185c6:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 80185ca:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80185ce:	441d      	add	r5, r3
 80185d0:	b22d      	sxth	r5, r5
 80185d2:	b28b      	uxth	r3, r1
 80185d4:	429a      	cmp	r2, r3
 80185d6:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80185da:	f240 80c1 	bls.w	8018760 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 80185de:	4427      	add	r7, r4
 80185e0:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 80185e4:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80185e8:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 80185ec:	4608      	mov	r0, r1
 80185ee:	4563      	cmp	r3, ip
 80185f0:	f340 80a3 	ble.w	801873a <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 80185f4:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 80185f8:	4465      	add	r5, ip
 80185fa:	b22d      	sxth	r5, r5
 80185fc:	429d      	cmp	r5, r3
 80185fe:	bfa8      	it	ge
 8018600:	461d      	movge	r5, r3
 8018602:	3101      	adds	r1, #1
 8018604:	4680      	mov	r8, r0
 8018606:	e7e4      	b.n	80185d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8018608:	d10b      	bne.n	8018622 <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 801860a:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 801860e:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 8018612:	458c      	cmp	ip, r1
 8018614:	bfb4      	ite	lt
 8018616:	469c      	movlt	ip, r3
 8018618:	46bc      	movge	ip, r7
 801861a:	4572      	cmp	r2, lr
 801861c:	bfb8      	it	lt
 801861e:	4672      	movlt	r2, lr
 8018620:	e088      	b.n	8018734 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8018622:	428a      	cmp	r2, r1
 8018624:	bfb8      	it	lt
 8018626:	460a      	movlt	r2, r1
 8018628:	46bc      	mov	ip, r7
 801862a:	e083      	b.n	8018734 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801862c:	20198190 	.word	0x20198190
 8018630:	2019819c 	.word	0x2019819c
 8018634:	20000058 	.word	0x20000058
 8018638:	20198158 	.word	0x20198158
 801863c:	2019814e 	.word	0x2019814e
 8018640:	2019814c 	.word	0x2019814c
 8018644:	20198156 	.word	0x20198156
 8018648:	20198150 	.word	0x20198150
 801864c:	1961      	adds	r1, r4, r5
 801864e:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8018652:	ab07      	add	r3, sp, #28
 8018654:	6849      	ldr	r1, [r1, #4]
 8018656:	c303      	stmia	r3!, {r0, r1}
 8018658:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801865c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018660:	2b13      	cmp	r3, #19
 8018662:	bfd8      	it	le
 8018664:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8018668:	440b      	add	r3, r1
 801866a:	1a9b      	subs	r3, r3, r2
 801866c:	a807      	add	r0, sp, #28
 801866e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018672:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018676:	f7ff f851 	bl	801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801867a:	a807      	add	r0, sp, #28
 801867c:	f7fd f98b 	bl	8015996 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018680:	bb78      	cbnz	r0, 80186e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8018682:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8018686:	f8d8 0000 	ldr.w	r0, [r8]
 801868a:	f1bc 0f14 	cmp.w	ip, #20
 801868e:	bfa8      	it	ge
 8018690:	f04f 0c14 	movge.w	ip, #20
 8018694:	f8d0 e000 	ldr.w	lr, [r0]
 8018698:	fa1f fc8c 	uxth.w	ip, ip
 801869c:	f8cd c000 	str.w	ip, [sp]
 80186a0:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 80186a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80186a8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80186ac:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80186b0:	47d0      	blx	sl
 80186b2:	4682      	mov	sl, r0
 80186b4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80186b8:	a807      	add	r0, sp, #28
 80186ba:	f7ff f815 	bl	80176e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80186be:	6823      	ldr	r3, [r4, #0]
 80186c0:	4620      	mov	r0, r4
 80186c2:	4425      	add	r5, r4
 80186c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186c6:	a907      	add	r1, sp, #28
 80186c8:	4798      	blx	r3
 80186ca:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 80186ce:	eba0 000a 	sub.w	r0, r0, sl
 80186d2:	b200      	sxth	r0, r0
 80186d4:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 80186d8:	b918      	cbnz	r0, 80186e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 80186da:	b2b9      	uxth	r1, r7
 80186dc:	4648      	mov	r0, r9
 80186de:	f7ff faa9 	bl	8017c34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80186e2:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 80186e6:	f1bb 0f00 	cmp.w	fp, #0
 80186ea:	f43f af26 	beq.w	801853a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80186ee:	2700      	movs	r7, #0
 80186f0:	9b02      	ldr	r3, [sp, #8]
 80186f2:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 80186f6:	881b      	ldrh	r3, [r3, #0]
 80186f8:	3301      	adds	r3, #1
 80186fa:	b29b      	uxth	r3, r3
 80186fc:	b299      	uxth	r1, r3
 80186fe:	458b      	cmp	fp, r1
 8018700:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 8018704:	d9a2      	bls.n	801864c <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 8018706:	4425      	add	r5, r4
 8018708:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 801870c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8018710:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8018714:	4408      	add	r0, r1
 8018716:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 801871a:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 801871e:	b200      	sxth	r0, r0
 8018720:	4471      	add	r1, lr
 8018722:	b209      	sxth	r1, r1
 8018724:	4288      	cmp	r0, r1
 8018726:	469c      	mov	ip, r3
 8018728:	f6bf af6e 	bge.w	8018608 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 801872c:	4586      	cmp	lr, r0
 801872e:	4672      	mov	r2, lr
 8018730:	bfb8      	it	lt
 8018732:	4602      	movlt	r2, r0
 8018734:	3301      	adds	r3, #1
 8018736:	4667      	mov	r7, ip
 8018738:	e7e0      	b.n	80186fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 801873a:	d10c      	bne.n	8018756 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 801873c:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8018740:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8018744:	4287      	cmp	r7, r0
 8018746:	bfb4      	ite	lt
 8018748:	4608      	movlt	r0, r1
 801874a:	4640      	movge	r0, r8
 801874c:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8018750:	443b      	add	r3, r7
 8018752:	b21b      	sxth	r3, r3
 8018754:	e752      	b.n	80185fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8018756:	4565      	cmp	r5, ip
 8018758:	bfa8      	it	ge
 801875a:	4665      	movge	r5, ip
 801875c:	4640      	mov	r0, r8
 801875e:	e750      	b.n	8018602 <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 8018760:	eb09 0007 	add.w	r0, r9, r7
 8018764:	4427      	add	r7, r4
 8018766:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 801876a:	9203      	str	r2, [sp, #12]
 801876c:	f1ba 0f13 	cmp.w	sl, #19
 8018770:	bfde      	ittt	le
 8018772:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 8018776:	4455      	addle	r5, sl
 8018778:	b22d      	sxthle	r5, r5
 801877a:	f7fd f90c 	bl	8015996 <_ZNK8touchgfx4Rect7isEmptyEv>
 801877e:	9a03      	ldr	r2, [sp, #12]
 8018780:	2800      	cmp	r0, #0
 8018782:	f47f af1b 	bne.w	80185bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 8018786:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801878a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801878e:	1aad      	subs	r5, r5, r2
 8018790:	2d14      	cmp	r5, #20
 8018792:	bfa8      	it	ge
 8018794:	2514      	movge	r5, #20
 8018796:	4828      	ldr	r0, [pc, #160]	; (8018838 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 8018798:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801879c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80187a0:	6800      	ldr	r0, [r0, #0]
 80187a2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80187a6:	f8ad 201e 	strh.w	r2, [sp, #30]
 80187aa:	f8ad 3020 	strh.w	r3, [sp, #32]
 80187ae:	f8d0 c000 	ldr.w	ip, [r0]
 80187b2:	b2ad      	uxth	r5, r5
 80187b4:	fa1f fa8a 	uxth.w	sl, sl
 80187b8:	4555      	cmp	r5, sl
 80187ba:	bf94      	ite	ls
 80187bc:	9500      	strls	r5, [sp, #0]
 80187be:	f8cd a000 	strhi.w	sl, [sp]
 80187c2:	b292      	uxth	r2, r2
 80187c4:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 80187c8:	b29b      	uxth	r3, r3
 80187ca:	b289      	uxth	r1, r1
 80187cc:	47a8      	blx	r5
 80187ce:	6823      	ldr	r3, [r4, #0]
 80187d0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80187d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187d6:	a907      	add	r1, sp, #28
 80187d8:	4620      	mov	r0, r4
 80187da:	4798      	blx	r3
 80187dc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80187e0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80187e4:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80187e8:	1a5b      	subs	r3, r3, r1
 80187ea:	440a      	add	r2, r1
 80187ec:	b21b      	sxth	r3, r3
 80187ee:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 80187f2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	f47f aed7 	bne.w	80185aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 80187fc:	fa1f f188 	uxth.w	r1, r8
 8018800:	4648      	mov	r0, r9
 8018802:	f7ff fa17 	bl	8017c34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018806:	e6d0      	b.n	80185aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8018808:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801880c:	42ab      	cmp	r3, r5
 801880e:	f67f ae94 	bls.w	801853a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8018812:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8018816:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801881a:	ab07      	add	r3, sp, #28
 801881c:	6851      	ldr	r1, [r2, #4]
 801881e:	c303      	stmia	r3!, {r0, r1}
 8018820:	a807      	add	r0, sp, #28
 8018822:	f7fd f8b8 	bl	8015996 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018826:	b920      	cbnz	r0, 8018832 <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 8018828:	6823      	ldr	r3, [r4, #0]
 801882a:	a907      	add	r1, sp, #28
 801882c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801882e:	4620      	mov	r0, r4
 8018830:	4798      	blx	r3
 8018832:	3501      	adds	r5, #1
 8018834:	b2ad      	uxth	r5, r5
 8018836:	e7e7      	b.n	8018808 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8018838:	20198158 	.word	0x20198158

0801883c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801883c:	2200      	movs	r2, #0
 801883e:	4b03      	ldr	r3, [pc, #12]	; (801884c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018840:	801a      	strh	r2, [r3, #0]
 8018842:	805a      	strh	r2, [r3, #2]
 8018844:	809a      	strh	r2, [r3, #4]
 8018846:	80da      	strh	r2, [r3, #6]
 8018848:	4770      	bx	lr
 801884a:	bf00      	nop
 801884c:	2019819c 	.word	0x2019819c

08018850 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018854:	4606      	mov	r6, r0
 8018856:	b09d      	sub	sp, #116	; 0x74
 8018858:	a803      	add	r0, sp, #12
 801885a:	4614      	mov	r4, r2
 801885c:	468a      	mov	sl, r1
 801885e:	461d      	mov	r5, r3
 8018860:	f000 fd7a 	bl	8019358 <_ZN8touchgfx12TextProviderC1Ev>
 8018864:	6833      	ldr	r3, [r6, #0]
 8018866:	4630      	mov	r0, r6
 8018868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801886a:	4798      	blx	r3
 801886c:	6833      	ldr	r3, [r6, #0]
 801886e:	4607      	mov	r7, r0
 8018870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018872:	4630      	mov	r0, r6
 8018874:	4798      	blx	r3
 8018876:	462a      	mov	r2, r5
 8018878:	2500      	movs	r5, #0
 801887a:	9000      	str	r0, [sp, #0]
 801887c:	4621      	mov	r1, r4
 801887e:	463b      	mov	r3, r7
 8018880:	a803      	add	r0, sp, #12
 8018882:	f000 fdbc 	bl	80193fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018886:	462c      	mov	r4, r5
 8018888:	46a9      	mov	r9, r5
 801888a:	46a8      	mov	r8, r5
 801888c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8018890:	2300      	movs	r3, #0
 8018892:	9302      	str	r3, [sp, #8]
 8018894:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018898:	429c      	cmp	r4, r3
 801889a:	d002      	beq.n	80188a2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801889c:	455c      	cmp	r4, fp
 801889e:	bf18      	it	ne
 80188a0:	4625      	movne	r5, r4
 80188a2:	ab02      	add	r3, sp, #8
 80188a4:	4632      	mov	r2, r6
 80188a6:	4651      	mov	r1, sl
 80188a8:	a803      	add	r0, sp, #12
 80188aa:	f001 f897 	bl	80199dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80188ae:	4604      	mov	r4, r0
 80188b0:	b108      	cbz	r0, 80188b6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80188b2:	280a      	cmp	r0, #10
 80188b4:	d10a      	bne.n	80188cc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80188b6:	45c1      	cmp	r9, r8
 80188b8:	bf38      	it	cc
 80188ba:	46c1      	movcc	r9, r8
 80188bc:	f04f 0800 	mov.w	r8, #0
 80188c0:	2c00      	cmp	r4, #0
 80188c2:	d1e5      	bne.n	8018890 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80188c4:	4648      	mov	r0, r9
 80188c6:	b01d      	add	sp, #116	; 0x74
 80188c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188cc:	9a02      	ldr	r2, [sp, #8]
 80188ce:	2a00      	cmp	r2, #0
 80188d0:	d0de      	beq.n	8018890 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80188d2:	7b57      	ldrb	r7, [r2, #13]
 80188d4:	6833      	ldr	r3, [r6, #0]
 80188d6:	007f      	lsls	r7, r7, #1
 80188d8:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80188dc:	7a97      	ldrb	r7, [r2, #10]
 80188de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80188e0:	4307      	orrs	r7, r0
 80188e2:	4629      	mov	r1, r5
 80188e4:	4630      	mov	r0, r6
 80188e6:	8894      	ldrh	r4, [r2, #4]
 80188e8:	4798      	blx	r3
 80188ea:	4438      	add	r0, r7
 80188ec:	4480      	add	r8, r0
 80188ee:	fa1f f888 	uxth.w	r8, r8
 80188f2:	e7e5      	b.n	80188c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080188f4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80188f4:	b508      	push	{r3, lr}
 80188f6:	6803      	ldr	r3, [r0, #0]
 80188f8:	68db      	ldr	r3, [r3, #12]
 80188fa:	4798      	blx	r3
 80188fc:	b128      	cbz	r0, 801890a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80188fe:	7b43      	ldrb	r3, [r0, #13]
 8018900:	7a80      	ldrb	r0, [r0, #10]
 8018902:	005b      	lsls	r3, r3, #1
 8018904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018908:	4318      	orrs	r0, r3
 801890a:	bd08      	pop	{r3, pc}

0801890c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801890c:	b40e      	push	{r1, r2, r3}
 801890e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018910:	4605      	mov	r5, r0
 8018912:	b09e      	sub	sp, #120	; 0x78
 8018914:	ab23      	add	r3, sp, #140	; 0x8c
 8018916:	f853 4b04 	ldr.w	r4, [r3], #4
 801891a:	a805      	add	r0, sp, #20
 801891c:	9303      	str	r3, [sp, #12]
 801891e:	f000 fd1b 	bl	8019358 <_ZN8touchgfx12TextProviderC1Ev>
 8018922:	682b      	ldr	r3, [r5, #0]
 8018924:	4628      	mov	r0, r5
 8018926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018928:	4798      	blx	r3
 801892a:	682b      	ldr	r3, [r5, #0]
 801892c:	4606      	mov	r6, r0
 801892e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018930:	4628      	mov	r0, r5
 8018932:	4798      	blx	r3
 8018934:	4621      	mov	r1, r4
 8018936:	2400      	movs	r4, #0
 8018938:	4633      	mov	r3, r6
 801893a:	9000      	str	r0, [sp, #0]
 801893c:	9a03      	ldr	r2, [sp, #12]
 801893e:	ae1e      	add	r6, sp, #120	; 0x78
 8018940:	a805      	add	r0, sp, #20
 8018942:	f000 fd5c 	bl	80193fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018946:	f846 4d68 	str.w	r4, [r6, #-104]!
 801894a:	4633      	mov	r3, r6
 801894c:	462a      	mov	r2, r5
 801894e:	4621      	mov	r1, r4
 8018950:	a805      	add	r0, sp, #20
 8018952:	f001 f843 	bl	80199dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018956:	b1f0      	cbz	r0, 8018996 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8018958:	280a      	cmp	r0, #10
 801895a:	d018      	beq.n	801898e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801895c:	9f04      	ldr	r7, [sp, #16]
 801895e:	b1b7      	cbz	r7, 801898e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8018960:	7b78      	ldrb	r0, [r7, #13]
 8018962:	7a3b      	ldrb	r3, [r7, #8]
 8018964:	00c1      	lsls	r1, r0, #3
 8018966:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801896a:	4319      	orrs	r1, r3
 801896c:	0643      	lsls	r3, r0, #25
 801896e:	bf44      	itt	mi
 8018970:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8018974:	b219      	sxthmi	r1, r3
 8018976:	0100      	lsls	r0, r0, #4
 8018978:	79fb      	ldrb	r3, [r7, #7]
 801897a:	88ea      	ldrh	r2, [r5, #6]
 801897c:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018980:	4303      	orrs	r3, r0
 8018982:	4413      	add	r3, r2
 8018984:	1a5b      	subs	r3, r3, r1
 8018986:	b21b      	sxth	r3, r3
 8018988:	429c      	cmp	r4, r3
 801898a:	bfb8      	it	lt
 801898c:	461c      	movlt	r4, r3
 801898e:	4633      	mov	r3, r6
 8018990:	462a      	mov	r2, r5
 8018992:	2100      	movs	r1, #0
 8018994:	e7dc      	b.n	8018950 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8018996:	b2a0      	uxth	r0, r4
 8018998:	b01e      	add	sp, #120	; 0x78
 801899a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801899e:	b003      	add	sp, #12
 80189a0:	4770      	bx	lr

080189a2 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80189a2:	7a43      	ldrb	r3, [r0, #9]
 80189a4:	8880      	ldrh	r0, [r0, #4]
 80189a6:	4418      	add	r0, r3
 80189a8:	b280      	uxth	r0, r0
 80189aa:	4770      	bx	lr

080189ac <_ZNK8touchgfx4Font13getFontHeightEv>:
 80189ac:	6803      	ldr	r3, [r0, #0]
 80189ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189b0:	4718      	bx	r3

080189b2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80189b2:	b40e      	push	{r1, r2, r3}
 80189b4:	b570      	push	{r4, r5, r6, lr}
 80189b6:	4604      	mov	r4, r0
 80189b8:	b09d      	sub	sp, #116	; 0x74
 80189ba:	ab21      	add	r3, sp, #132	; 0x84
 80189bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80189c0:	a803      	add	r0, sp, #12
 80189c2:	9302      	str	r3, [sp, #8]
 80189c4:	f000 fcc8 	bl	8019358 <_ZN8touchgfx12TextProviderC1Ev>
 80189c8:	6823      	ldr	r3, [r4, #0]
 80189ca:	4620      	mov	r0, r4
 80189cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80189ce:	4798      	blx	r3
 80189d0:	6823      	ldr	r3, [r4, #0]
 80189d2:	4606      	mov	r6, r0
 80189d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189d6:	4620      	mov	r0, r4
 80189d8:	4798      	blx	r3
 80189da:	4633      	mov	r3, r6
 80189dc:	9000      	str	r0, [sp, #0]
 80189de:	9a02      	ldr	r2, [sp, #8]
 80189e0:	4629      	mov	r1, r5
 80189e2:	a803      	add	r0, sp, #12
 80189e4:	f000 fd0b 	bl	80193fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80189e8:	a803      	add	r0, sp, #12
 80189ea:	f001 f879 	bl	8019ae0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80189ee:	2401      	movs	r4, #1
 80189f0:	b2a3      	uxth	r3, r4
 80189f2:	b140      	cbz	r0, 8018a06 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 80189f4:	280a      	cmp	r0, #10
 80189f6:	bf08      	it	eq
 80189f8:	3301      	addeq	r3, #1
 80189fa:	a803      	add	r0, sp, #12
 80189fc:	bf08      	it	eq
 80189fe:	b21c      	sxtheq	r4, r3
 8018a00:	f001 f86e 	bl	8019ae0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018a04:	e7f4      	b.n	80189f0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8018a06:	4618      	mov	r0, r3
 8018a08:	b01d      	add	sp, #116	; 0x74
 8018a0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a0e:	b003      	add	sp, #12
 8018a10:	4770      	bx	lr

08018a12 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018a12:	b40e      	push	{r1, r2, r3}
 8018a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a16:	4604      	mov	r4, r0
 8018a18:	b09e      	sub	sp, #120	; 0x78
 8018a1a:	ab23      	add	r3, sp, #140	; 0x8c
 8018a1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018a20:	a805      	add	r0, sp, #20
 8018a22:	9303      	str	r3, [sp, #12]
 8018a24:	f000 fc98 	bl	8019358 <_ZN8touchgfx12TextProviderC1Ev>
 8018a28:	6823      	ldr	r3, [r4, #0]
 8018a2a:	4620      	mov	r0, r4
 8018a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018a2e:	4798      	blx	r3
 8018a30:	6823      	ldr	r3, [r4, #0]
 8018a32:	4606      	mov	r6, r0
 8018a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a36:	4620      	mov	r0, r4
 8018a38:	4798      	blx	r3
 8018a3a:	4633      	mov	r3, r6
 8018a3c:	4629      	mov	r1, r5
 8018a3e:	9000      	str	r0, [sp, #0]
 8018a40:	9a03      	ldr	r2, [sp, #12]
 8018a42:	a805      	add	r0, sp, #20
 8018a44:	f000 fcdb 	bl	80193fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018a48:	2100      	movs	r1, #0
 8018a4a:	ad1e      	add	r5, sp, #120	; 0x78
 8018a4c:	f845 1d68 	str.w	r1, [r5, #-104]!
 8018a50:	462b      	mov	r3, r5
 8018a52:	4622      	mov	r2, r4
 8018a54:	a805      	add	r0, sp, #20
 8018a56:	f000 ffc1 	bl	80199dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018a5a:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8018a5e:	b1d8      	cbz	r0, 8018a98 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8018a60:	280a      	cmp	r0, #10
 8018a62:	d012      	beq.n	8018a8a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8018a64:	9804      	ldr	r0, [sp, #16]
 8018a66:	b180      	cbz	r0, 8018a8a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8018a68:	7b47      	ldrb	r7, [r0, #13]
 8018a6a:	88e2      	ldrh	r2, [r4, #6]
 8018a6c:	00fb      	lsls	r3, r7, #3
 8018a6e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018a72:	7a03      	ldrb	r3, [r0, #8]
 8018a74:	430b      	orrs	r3, r1
 8018a76:	0679      	lsls	r1, r7, #25
 8018a78:	bf44      	itt	mi
 8018a7a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018a7e:	b21b      	sxthmi	r3, r3
 8018a80:	1ad3      	subs	r3, r2, r3
 8018a82:	b21b      	sxth	r3, r3
 8018a84:	429e      	cmp	r6, r3
 8018a86:	bfa8      	it	ge
 8018a88:	461e      	movge	r6, r3
 8018a8a:	462b      	mov	r3, r5
 8018a8c:	4622      	mov	r2, r4
 8018a8e:	2100      	movs	r1, #0
 8018a90:	a805      	add	r0, sp, #20
 8018a92:	f000 ffa3 	bl	80199dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018a96:	e7e2      	b.n	8018a5e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8018a98:	4630      	mov	r0, r6
 8018a9a:	b01e      	add	sp, #120	; 0x78
 8018a9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018aa0:	b003      	add	sp, #12
 8018aa2:	4770      	bx	lr

08018aa4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8018aa4:	b513      	push	{r0, r1, r4, lr}
 8018aa6:	2400      	movs	r4, #0
 8018aa8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018aac:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018ab0:	6803      	ldr	r3, [r0, #0]
 8018ab2:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018ab6:	9400      	str	r4, [sp, #0]
 8018ab8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018abc:	691b      	ldr	r3, [r3, #16]
 8018abe:	4669      	mov	r1, sp
 8018ac0:	4798      	blx	r3
 8018ac2:	b002      	add	sp, #8
 8018ac4:	bd10      	pop	{r4, pc}

08018ac6 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8018ac6:	b538      	push	{r3, r4, r5, lr}
 8018ac8:	460c      	mov	r4, r1
 8018aca:	4605      	mov	r5, r0
 8018acc:	680b      	ldr	r3, [r1, #0]
 8018ace:	68db      	ldr	r3, [r3, #12]
 8018ad0:	4798      	blx	r3
 8018ad2:	6823      	ldr	r3, [r4, #0]
 8018ad4:	4620      	mov	r0, r4
 8018ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ad8:	4629      	mov	r1, r5
 8018ada:	4798      	blx	r3
 8018adc:	4628      	mov	r0, r5
 8018ade:	bd38      	pop	{r3, r4, r5, pc}

08018ae0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8018ae0:	b410      	push	{r4}
 8018ae2:	880a      	ldrh	r2, [r1, #0]
 8018ae4:	8884      	ldrh	r4, [r0, #4]
 8018ae6:	4422      	add	r2, r4
 8018ae8:	800a      	strh	r2, [r1, #0]
 8018aea:	88c4      	ldrh	r4, [r0, #6]
 8018aec:	884a      	ldrh	r2, [r1, #2]
 8018aee:	4422      	add	r2, r4
 8018af0:	804a      	strh	r2, [r1, #2]
 8018af2:	6940      	ldr	r0, [r0, #20]
 8018af4:	b120      	cbz	r0, 8018b00 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8018af6:	6803      	ldr	r3, [r0, #0]
 8018af8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018afe:	4718      	bx	r3
 8018b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b04:	4770      	bx	lr

08018b06 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8018b06:	b570      	push	{r4, r5, r6, lr}
 8018b08:	460c      	mov	r4, r1
 8018b0a:	8882      	ldrh	r2, [r0, #4]
 8018b0c:	880b      	ldrh	r3, [r1, #0]
 8018b0e:	4605      	mov	r5, r0
 8018b10:	4413      	add	r3, r2
 8018b12:	800b      	strh	r3, [r1, #0]
 8018b14:	88c2      	ldrh	r2, [r0, #6]
 8018b16:	884b      	ldrh	r3, [r1, #2]
 8018b18:	4413      	add	r3, r2
 8018b1a:	804b      	strh	r3, [r1, #2]
 8018b1c:	1d01      	adds	r1, r0, #4
 8018b1e:	4620      	mov	r0, r4
 8018b20:	f7fc fef6 	bl	8015910 <_ZN8touchgfx4RectaNERKS0_>
 8018b24:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	dd0b      	ble.n	8018b44 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018b2c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	dd07      	ble.n	8018b44 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018b34:	6968      	ldr	r0, [r5, #20]
 8018b36:	b128      	cbz	r0, 8018b44 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018b38:	6803      	ldr	r3, [r0, #0]
 8018b3a:	4621      	mov	r1, r4
 8018b3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b42:	4718      	bx	r3
 8018b44:	bd70      	pop	{r4, r5, r6, pc}
	...

08018b48 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8018b48:	b570      	push	{r4, r5, r6, lr}
 8018b4a:	460c      	mov	r4, r1
 8018b4c:	8882      	ldrh	r2, [r0, #4]
 8018b4e:	880b      	ldrh	r3, [r1, #0]
 8018b50:	4605      	mov	r5, r0
 8018b52:	4413      	add	r3, r2
 8018b54:	800b      	strh	r3, [r1, #0]
 8018b56:	88c2      	ldrh	r2, [r0, #6]
 8018b58:	884b      	ldrh	r3, [r1, #2]
 8018b5a:	4413      	add	r3, r2
 8018b5c:	804b      	strh	r3, [r1, #2]
 8018b5e:	1d01      	adds	r1, r0, #4
 8018b60:	4620      	mov	r0, r4
 8018b62:	f7fc fed5 	bl	8015910 <_ZN8touchgfx4RectaNERKS0_>
 8018b66:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	dd18      	ble.n	8018ba0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018b6e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	dd14      	ble.n	8018ba0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018b76:	6968      	ldr	r0, [r5, #20]
 8018b78:	b128      	cbz	r0, 8018b86 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8018b7a:	6803      	ldr	r3, [r0, #0]
 8018b7c:	4621      	mov	r1, r4
 8018b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b82:	691b      	ldr	r3, [r3, #16]
 8018b84:	4718      	bx	r3
 8018b86:	4b07      	ldr	r3, [pc, #28]	; (8018ba4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	3304      	adds	r3, #4
 8018b8c:	429d      	cmp	r5, r3
 8018b8e:	d107      	bne.n	8018ba0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018b90:	f7fe ff44 	bl	8017a1c <_ZN8touchgfx11Application11getInstanceEv>
 8018b94:	6821      	ldr	r1, [r4, #0]
 8018b96:	6862      	ldr	r2, [r4, #4]
 8018b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b9c:	f7ff b85e 	b.w	8017c5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018ba0:	bd70      	pop	{r4, r5, r6, pc}
 8018ba2:	bf00      	nop
 8018ba4:	20198194 	.word	0x20198194

08018ba8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8018ba8:	b570      	push	{r4, r5, r6, lr}
 8018baa:	4604      	mov	r4, r0
 8018bac:	4616      	mov	r6, r2
 8018bae:	460d      	mov	r5, r1
 8018bb0:	b901      	cbnz	r1, 8018bb4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8018bb2:	b192      	cbz	r2, 8018bda <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8018bb4:	6823      	ldr	r3, [r4, #0]
 8018bb6:	4620      	mov	r0, r4
 8018bb8:	699b      	ldr	r3, [r3, #24]
 8018bba:	4798      	blx	r3
 8018bbc:	88e2      	ldrh	r2, [r4, #6]
 8018bbe:	88a1      	ldrh	r1, [r4, #4]
 8018bc0:	4432      	add	r2, r6
 8018bc2:	4429      	add	r1, r5
 8018bc4:	4620      	mov	r0, r4
 8018bc6:	b212      	sxth	r2, r2
 8018bc8:	b209      	sxth	r1, r1
 8018bca:	f7fd f97f 	bl	8015ecc <_ZN8touchgfx8Drawable5setXYEss>
 8018bce:	6823      	ldr	r3, [r4, #0]
 8018bd0:	4620      	mov	r0, r4
 8018bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018bd6:	699b      	ldr	r3, [r3, #24]
 8018bd8:	4718      	bx	r3
 8018bda:	bd70      	pop	{r4, r5, r6, pc}

08018bdc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8018bdc:	b510      	push	{r4, lr}
 8018bde:	2300      	movs	r3, #0
 8018be0:	4604      	mov	r4, r0
 8018be2:	4608      	mov	r0, r1
 8018be4:	8023      	strh	r3, [r4, #0]
 8018be6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018bea:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8018bee:	8063      	strh	r3, [r4, #2]
 8018bf0:	6803      	ldr	r3, [r0, #0]
 8018bf2:	80a1      	strh	r1, [r4, #4]
 8018bf4:	80e2      	strh	r2, [r4, #6]
 8018bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bf8:	4621      	mov	r1, r4
 8018bfa:	4798      	blx	r3
 8018bfc:	4620      	mov	r0, r4
 8018bfe:	bd10      	pop	{r4, pc}

08018c00 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8018c00:	b530      	push	{r4, r5, lr}
 8018c02:	8083      	strh	r3, [r0, #4]
 8018c04:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018c08:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8018c0c:	80c3      	strh	r3, [r0, #6]
 8018c0e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8018c12:	6141      	str	r1, [r0, #20]
 8018c14:	7203      	strb	r3, [r0, #8]
 8018c16:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018c1a:	8302      	strh	r2, [r0, #24]
 8018c1c:	7243      	strb	r3, [r0, #9]
 8018c1e:	7a83      	ldrb	r3, [r0, #10]
 8018c20:	f365 0306 	bfi	r3, r5, #0, #7
 8018c24:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8018c28:	f365 13c7 	bfi	r3, r5, #7, #1
 8018c2c:	7283      	strb	r3, [r0, #10]
 8018c2e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8018c32:	72c3      	strb	r3, [r0, #11]
 8018c34:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018c38:	7303      	strb	r3, [r0, #12]
 8018c3a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8018c3e:	81c3      	strh	r3, [r0, #14]
 8018c40:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8018c44:	8203      	strh	r3, [r0, #16]
 8018c46:	4b01      	ldr	r3, [pc, #4]	; (8018c4c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8018c48:	6003      	str	r3, [r0, #0]
 8018c4a:	bd30      	pop	{r4, r5, pc}
 8018c4c:	0802aa6c 	.word	0x0802aa6c

08018c50 <_ZNK8touchgfx9ConstFont4findEt>:
 8018c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c52:	6944      	ldr	r4, [r0, #20]
 8018c54:	b3bc      	cbz	r4, 8018cc6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c56:	88a3      	ldrh	r3, [r4, #4]
 8018c58:	8b02      	ldrh	r2, [r0, #24]
 8018c5a:	1acb      	subs	r3, r1, r3
 8018c5c:	f102 32ff 	add.w	r2, r2, #4294967295
 8018c60:	d431      	bmi.n	8018cc6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c62:	4293      	cmp	r3, r2
 8018c64:	dd0c      	ble.n	8018c80 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8018c66:	230e      	movs	r3, #14
 8018c68:	fb03 4302 	mla	r3, r3, r2, r4
 8018c6c:	889b      	ldrh	r3, [r3, #4]
 8018c6e:	1a5b      	subs	r3, r3, r1
 8018c70:	1ad3      	subs	r3, r2, r3
 8018c72:	429a      	cmp	r2, r3
 8018c74:	db27      	blt.n	8018cc6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	bfbc      	itt	lt
 8018c7a:	2302      	movlt	r3, #2
 8018c7c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8018c80:	2500      	movs	r5, #0
 8018c82:	260e      	movs	r6, #14
 8018c84:	4295      	cmp	r5, r2
 8018c86:	dc1e      	bgt.n	8018cc6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c88:	fb06 4003 	mla	r0, r6, r3, r4
 8018c8c:	8887      	ldrh	r7, [r0, #4]
 8018c8e:	42b9      	cmp	r1, r7
 8018c90:	d01a      	beq.n	8018cc8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8018c92:	d20d      	bcs.n	8018cb0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8018c94:	1e5a      	subs	r2, r3, #1
 8018c96:	4295      	cmp	r5, r2
 8018c98:	dc15      	bgt.n	8018cc6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c9a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8018c9e:	1a5b      	subs	r3, r3, r1
 8018ca0:	1ad3      	subs	r3, r2, r3
 8018ca2:	429a      	cmp	r2, r3
 8018ca4:	db0f      	blt.n	8018cc6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018ca6:	429d      	cmp	r5, r3
 8018ca8:	ddec      	ble.n	8018c84 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018caa:	1953      	adds	r3, r2, r5
 8018cac:	105b      	asrs	r3, r3, #1
 8018cae:	e7e9      	b.n	8018c84 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018cb0:	1c5d      	adds	r5, r3, #1
 8018cb2:	42aa      	cmp	r2, r5
 8018cb4:	db07      	blt.n	8018cc6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018cb6:	8a43      	ldrh	r3, [r0, #18]
 8018cb8:	1acb      	subs	r3, r1, r3
 8018cba:	442b      	add	r3, r5
 8018cbc:	429d      	cmp	r5, r3
 8018cbe:	dc02      	bgt.n	8018cc6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018cc0:	429a      	cmp	r2, r3
 8018cc2:	dadf      	bge.n	8018c84 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018cc4:	e7f1      	b.n	8018caa <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8018cc6:	2000      	movs	r0, #0
 8018cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018cca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8018cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ccc:	4604      	mov	r4, r0
 8018cce:	4617      	mov	r7, r2
 8018cd0:	461e      	mov	r6, r3
 8018cd2:	b911      	cbnz	r1, 8018cda <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018cd4:	2500      	movs	r5, #0
 8018cd6:	4628      	mov	r0, r5
 8018cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cda:	290a      	cmp	r1, #10
 8018cdc:	d0fa      	beq.n	8018cd4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018cde:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018ce2:	4291      	cmp	r1, r2
 8018ce4:	d0f6      	beq.n	8018cd4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018ce6:	f242 020b 	movw	r2, #8203	; 0x200b
 8018cea:	4291      	cmp	r1, r2
 8018cec:	d0f2      	beq.n	8018cd4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018cee:	f7ff ffaf 	bl	8018c50 <_ZNK8touchgfx9ConstFont4findEt>
 8018cf2:	4605      	mov	r5, r0
 8018cf4:	b950      	cbnz	r0, 8018d0c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8018cf6:	6823      	ldr	r3, [r4, #0]
 8018cf8:	4620      	mov	r0, r4
 8018cfa:	691b      	ldr	r3, [r3, #16]
 8018cfc:	4798      	blx	r3
 8018cfe:	4601      	mov	r1, r0
 8018d00:	4620      	mov	r0, r4
 8018d02:	f7ff ffa5 	bl	8018c50 <_ZNK8touchgfx9ConstFont4findEt>
 8018d06:	4605      	mov	r5, r0
 8018d08:	2800      	cmp	r0, #0
 8018d0a:	d0e3      	beq.n	8018cd4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018d0c:	6823      	ldr	r3, [r4, #0]
 8018d0e:	4629      	mov	r1, r5
 8018d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018d12:	4620      	mov	r0, r4
 8018d14:	4798      	blx	r3
 8018d16:	6038      	str	r0, [r7, #0]
 8018d18:	6823      	ldr	r3, [r4, #0]
 8018d1a:	4620      	mov	r0, r4
 8018d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d1e:	4798      	blx	r3
 8018d20:	7030      	strb	r0, [r6, #0]
 8018d22:	e7d8      	b.n	8018cd6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08018d24 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8018d24:	2000      	movs	r0, #0
 8018d26:	4770      	bx	lr

08018d28 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8018d28:	2001      	movs	r0, #1
 8018d2a:	4770      	bx	lr

08018d2c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8018d2c:	2002      	movs	r0, #2
 8018d2e:	4770      	bx	lr

08018d30 <_ZN8touchgfx6ScreenD1Ev>:
 8018d30:	4770      	bx	lr

08018d32 <_ZN8touchgfx12GestureEventD1Ev>:
 8018d32:	4770      	bx	lr

08018d34 <_ZN8touchgfx9DragEventD1Ev>:
 8018d34:	4770      	bx	lr

08018d36 <_ZN8touchgfx10ClickEventD1Ev>:
 8018d36:	4770      	bx	lr

08018d38 <_ZN8touchgfx10ClickEventD0Ev>:
 8018d38:	b510      	push	{r4, lr}
 8018d3a:	4604      	mov	r4, r0
 8018d3c:	210c      	movs	r1, #12
 8018d3e:	f00f f988 	bl	8028052 <_ZdlPvj>
 8018d42:	4620      	mov	r0, r4
 8018d44:	bd10      	pop	{r4, pc}

08018d46 <_ZN8touchgfx9DragEventD0Ev>:
 8018d46:	b510      	push	{r4, lr}
 8018d48:	4604      	mov	r4, r0
 8018d4a:	2110      	movs	r1, #16
 8018d4c:	f00f f981 	bl	8028052 <_ZdlPvj>
 8018d50:	4620      	mov	r0, r4
 8018d52:	bd10      	pop	{r4, pc}

08018d54 <_ZN8touchgfx12GestureEventD0Ev>:
 8018d54:	b510      	push	{r4, lr}
 8018d56:	4604      	mov	r4, r0
 8018d58:	210c      	movs	r1, #12
 8018d5a:	f00f f97a 	bl	8028052 <_ZdlPvj>
 8018d5e:	4620      	mov	r0, r4
 8018d60:	bd10      	pop	{r4, pc}

08018d62 <_ZN8touchgfx6ScreenD0Ev>:
 8018d62:	b510      	push	{r4, lr}
 8018d64:	4604      	mov	r4, r0
 8018d66:	213c      	movs	r1, #60	; 0x3c
 8018d68:	f00f f973 	bl	8028052 <_ZdlPvj>
 8018d6c:	4620      	mov	r0, r4
 8018d6e:	bd10      	pop	{r4, pc}

08018d70 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018d70:	b530      	push	{r4, r5, lr}
 8018d72:	460d      	mov	r5, r1
 8018d74:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018d76:	b087      	sub	sp, #28
 8018d78:	4604      	mov	r4, r0
 8018d7a:	b301      	cbz	r1, 8018dbe <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8018d7c:	a801      	add	r0, sp, #4
 8018d7e:	f7ff ff2d 	bl	8018bdc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018d82:	892a      	ldrh	r2, [r5, #8]
 8018d84:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018d88:	7928      	ldrb	r0, [r5, #4]
 8018d8a:	1ad2      	subs	r2, r2, r3
 8018d8c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018d8e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018d92:	441a      	add	r2, r3
 8018d94:	896b      	ldrh	r3, [r5, #10]
 8018d96:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8018d9a:	f88d 0010 	strb.w	r0, [sp, #16]
 8018d9e:	1b5b      	subs	r3, r3, r5
 8018da0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8018da2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018da4:	442b      	add	r3, r5
 8018da6:	4d07      	ldr	r5, [pc, #28]	; (8018dc4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018da8:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018dac:	9503      	str	r5, [sp, #12]
 8018dae:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018db2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018db6:	6803      	ldr	r3, [r0, #0]
 8018db8:	a903      	add	r1, sp, #12
 8018dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018dbc:	4798      	blx	r3
 8018dbe:	b007      	add	sp, #28
 8018dc0:	bd30      	pop	{r4, r5, pc}
 8018dc2:	bf00      	nop
 8018dc4:	0802aaf4 	.word	0x0802aaf4

08018dc8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dcc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018dce:	b08a      	sub	sp, #40	; 0x28
 8018dd0:	4604      	mov	r4, r0
 8018dd2:	460d      	mov	r5, r1
 8018dd4:	b113      	cbz	r3, 8018ddc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8018dd6:	790b      	ldrb	r3, [r1, #4]
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d044      	beq.n	8018e66 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018ddc:	f104 0804 	add.w	r8, r4, #4
 8018de0:	4641      	mov	r1, r8
 8018de2:	a803      	add	r0, sp, #12
 8018de4:	f7ff fefa 	bl	8018bdc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018de8:	792b      	ldrb	r3, [r5, #4]
 8018dea:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8018dee:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8018df2:	b983      	cbnz	r3, 8018e16 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8018df4:	892a      	ldrh	r2, [r5, #8]
 8018df6:	88e9      	ldrh	r1, [r5, #6]
 8018df8:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8018dfc:	1b92      	subs	r2, r2, r6
 8018dfe:	1bc9      	subs	r1, r1, r7
 8018e00:	9301      	str	r3, [sp, #4]
 8018e02:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8018e06:	9300      	str	r3, [sp, #0]
 8018e08:	b212      	sxth	r2, r2
 8018e0a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8018e0e:	b209      	sxth	r1, r1
 8018e10:	4640      	mov	r0, r8
 8018e12:	f7fc fc9d 	bl	8015750 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8018e16:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018e18:	b329      	cbz	r1, 8018e66 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018e1a:	a805      	add	r0, sp, #20
 8018e1c:	f7ff fede 	bl	8018bdc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018e20:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018e24:	792b      	ldrb	r3, [r5, #4]
 8018e26:	1abf      	subs	r7, r7, r2
 8018e28:	88ea      	ldrh	r2, [r5, #6]
 8018e2a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018e2c:	4417      	add	r7, r2
 8018e2e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8018e30:	f88d 3020 	strb.w	r3, [sp, #32]
 8018e34:	4417      	add	r7, r2
 8018e36:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018e3a:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8018e3e:	1ab6      	subs	r6, r6, r2
 8018e40:	892a      	ldrh	r2, [r5, #8]
 8018e42:	a907      	add	r1, sp, #28
 8018e44:	4416      	add	r6, r2
 8018e46:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018e48:	4416      	add	r6, r2
 8018e4a:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8018e4e:	2600      	movs	r6, #0
 8018e50:	4a06      	ldr	r2, [pc, #24]	; (8018e6c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8018e52:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8018e56:	9207      	str	r2, [sp, #28]
 8018e58:	6803      	ldr	r3, [r0, #0]
 8018e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e5c:	4798      	blx	r3
 8018e5e:	792b      	ldrb	r3, [r5, #4]
 8018e60:	b10b      	cbz	r3, 8018e66 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018e62:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8018e66:	b00a      	add	sp, #40	; 0x28
 8018e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e6c:	0802aacc 	.word	0x0802aacc

08018e70 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e74:	460c      	mov	r4, r1
 8018e76:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018e78:	b088      	sub	sp, #32
 8018e7a:	4605      	mov	r5, r0
 8018e7c:	2900      	cmp	r1, #0
 8018e7e:	d06d      	beq.n	8018f5c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8018e80:	4668      	mov	r0, sp
 8018e82:	f7ff feab 	bl	8018bdc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018e86:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8018e88:	88e3      	ldrh	r3, [r4, #6]
 8018e8a:	f9bd 8000 	ldrsh.w	r8, [sp]
 8018e8e:	440b      	add	r3, r1
 8018e90:	b21b      	sxth	r3, r3
 8018e92:	4543      	cmp	r3, r8
 8018e94:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8018e98:	db31      	blt.n	8018efe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018e9a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8018e9e:	44c4      	add	ip, r8
 8018ea0:	fa0f fc8c 	sxth.w	ip, ip
 8018ea4:	4563      	cmp	r3, ip
 8018ea6:	da2a      	bge.n	8018efe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018ea8:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8018eaa:	8926      	ldrh	r6, [r4, #8]
 8018eac:	4416      	add	r6, r2
 8018eae:	b236      	sxth	r6, r6
 8018eb0:	42be      	cmp	r6, r7
 8018eb2:	db24      	blt.n	8018efe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018eb4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018eb8:	4438      	add	r0, r7
 8018eba:	b200      	sxth	r0, r0
 8018ebc:	4286      	cmp	r6, r0
 8018ebe:	da1e      	bge.n	8018efe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018ec0:	8963      	ldrh	r3, [r4, #10]
 8018ec2:	4419      	add	r1, r3
 8018ec4:	b209      	sxth	r1, r1
 8018ec6:	4541      	cmp	r1, r8
 8018ec8:	db08      	blt.n	8018edc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018eca:	4561      	cmp	r1, ip
 8018ecc:	da06      	bge.n	8018edc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018ece:	89a3      	ldrh	r3, [r4, #12]
 8018ed0:	441a      	add	r2, r3
 8018ed2:	b212      	sxth	r2, r2
 8018ed4:	42ba      	cmp	r2, r7
 8018ed6:	db01      	blt.n	8018edc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018ed8:	4282      	cmp	r2, r0
 8018eda:	db10      	blt.n	8018efe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018edc:	4b21      	ldr	r3, [pc, #132]	; (8018f64 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8018ede:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018ee0:	9304      	str	r3, [sp, #16]
 8018ee2:	2302      	movs	r3, #2
 8018ee4:	f88d 3014 	strb.w	r3, [sp, #20]
 8018ee8:	2300      	movs	r3, #0
 8018eea:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018eee:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018ef2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018ef6:	6803      	ldr	r3, [r0, #0]
 8018ef8:	a904      	add	r1, sp, #16
 8018efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018efc:	4798      	blx	r3
 8018efe:	1d29      	adds	r1, r5, #4
 8018f00:	a802      	add	r0, sp, #8
 8018f02:	f7ff fe6b 	bl	8018bdc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018f06:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018f0a:	88e0      	ldrh	r0, [r4, #6]
 8018f0c:	eba3 0808 	sub.w	r8, r3, r8
 8018f10:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018f14:	7921      	ldrb	r1, [r4, #4]
 8018f16:	1bdf      	subs	r7, r3, r7
 8018f18:	b2bb      	uxth	r3, r7
 8018f1a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8018f1e:	fa1f f888 	uxth.w	r8, r8
 8018f22:	8922      	ldrh	r2, [r4, #8]
 8018f24:	8967      	ldrh	r7, [r4, #10]
 8018f26:	89a4      	ldrh	r4, [r4, #12]
 8018f28:	4440      	add	r0, r8
 8018f2a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8018f2c:	4460      	add	r0, ip
 8018f2e:	441a      	add	r2, r3
 8018f30:	44b8      	add	r8, r7
 8018f32:	4423      	add	r3, r4
 8018f34:	4c0c      	ldr	r4, [pc, #48]	; (8018f68 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8018f36:	f8ad 0016 	strh.w	r0, [sp, #22]
 8018f3a:	4433      	add	r3, r6
 8018f3c:	4432      	add	r2, r6
 8018f3e:	44e0      	add	r8, ip
 8018f40:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018f42:	f88d 1014 	strb.w	r1, [sp, #20]
 8018f46:	9404      	str	r4, [sp, #16]
 8018f48:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018f4c:	f8ad 801a 	strh.w	r8, [sp, #26]
 8018f50:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018f54:	6803      	ldr	r3, [r0, #0]
 8018f56:	a904      	add	r1, sp, #16
 8018f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018f5a:	4798      	blx	r3
 8018f5c:	b008      	add	sp, #32
 8018f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f62:	bf00      	nop
 8018f64:	0802aacc 	.word	0x0802aacc
 8018f68:	0802aae0 	.word	0x0802aae0

08018f6c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8018f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f6e:	4604      	mov	r4, r0
 8018f70:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8018f74:	3201      	adds	r2, #1
 8018f76:	d112      	bne.n	8018f9e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018f78:	2500      	movs	r5, #0
 8018f7a:	9500      	str	r5, [sp, #0]
 8018f7c:	466d      	mov	r5, sp
 8018f7e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018f82:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018f86:	6803      	ldr	r3, [r0, #0]
 8018f88:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018f8c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018f90:	4629      	mov	r1, r5
 8018f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f94:	4798      	blx	r3
 8018f96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018f9a:	e884 0003 	stmia.w	r4, {r0, r1}
 8018f9e:	4620      	mov	r0, r4
 8018fa0:	b003      	add	sp, #12
 8018fa2:	bd30      	pop	{r4, r5, pc}

08018fa4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018fa4:	b513      	push	{r0, r1, r4, lr}
 8018fa6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8018faa:	4604      	mov	r4, r0
 8018fac:	3301      	adds	r3, #1
 8018fae:	d109      	bne.n	8018fc4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018fb0:	4601      	mov	r1, r0
 8018fb2:	4668      	mov	r0, sp
 8018fb4:	f7ff fe12 	bl	8018bdc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018fb8:	f8bd 3000 	ldrh.w	r3, [sp]
 8018fbc:	8423      	strh	r3, [r4, #32]
 8018fbe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018fc2:	8463      	strh	r3, [r4, #34]	; 0x22
 8018fc4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018fc8:	b002      	add	sp, #8
 8018fca:	bd10      	pop	{r4, pc}

08018fcc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018fcc:	b513      	push	{r0, r1, r4, lr}
 8018fce:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8018fd2:	4604      	mov	r4, r0
 8018fd4:	3301      	adds	r3, #1
 8018fd6:	d109      	bne.n	8018fec <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8018fd8:	4601      	mov	r1, r0
 8018fda:	4668      	mov	r0, sp
 8018fdc:	f7ff fdfe 	bl	8018bdc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018fe0:	f8bd 3000 	ldrh.w	r3, [sp]
 8018fe4:	8423      	strh	r3, [r4, #32]
 8018fe6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018fea:	8463      	strh	r3, [r4, #34]	; 0x22
 8018fec:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8018ff0:	b002      	add	sp, #8
 8018ff2:	bd10      	pop	{r4, pc}

08018ff4 <_ZN8touchgfx6ScreenC1Ev>:
 8018ff4:	b570      	push	{r4, r5, r6, lr}
 8018ff6:	4605      	mov	r5, r0
 8018ff8:	4b16      	ldr	r3, [pc, #88]	; (8019054 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8018ffa:	2101      	movs	r1, #1
 8018ffc:	f845 3b04 	str.w	r3, [r5], #4
 8019000:	2300      	movs	r3, #0
 8019002:	4604      	mov	r4, r0
 8019004:	8103      	strh	r3, [r0, #8]
 8019006:	8143      	strh	r3, [r0, #10]
 8019008:	8183      	strh	r3, [r0, #12]
 801900a:	81c3      	strh	r3, [r0, #14]
 801900c:	8203      	strh	r3, [r0, #16]
 801900e:	8243      	strh	r3, [r0, #18]
 8019010:	8283      	strh	r3, [r0, #20]
 8019012:	82c3      	strh	r3, [r0, #22]
 8019014:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8019018:	6203      	str	r3, [r0, #32]
 801901a:	8483      	strh	r3, [r0, #36]	; 0x24
 801901c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801901e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8019022:	4a0d      	ldr	r2, [pc, #52]	; (8019058 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019024:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8019028:	6343      	str	r3, [r0, #52]	; 0x34
 801902a:	4b0c      	ldr	r3, [pc, #48]	; (801905c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801902c:	6042      	str	r2, [r0, #4]
 801902e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019032:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8019034:	4a0a      	ldr	r2, [pc, #40]	; (8019060 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019036:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801903a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801903e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8019042:	4628      	mov	r0, r5
 8019044:	4798      	blx	r3
 8019046:	6863      	ldr	r3, [r4, #4]
 8019048:	4628      	mov	r0, r5
 801904a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801904c:	4631      	mov	r1, r6
 801904e:	4798      	blx	r3
 8019050:	4620      	mov	r0, r4
 8019052:	bd70      	pop	{r4, r5, r6, pc}
 8019054:	0802ab08 	.word	0x0802ab08
 8019058:	0802a8f8 	.word	0x0802a8f8
 801905c:	2019814e 	.word	0x2019814e
 8019060:	2019814c 	.word	0x2019814c

08019064 <_ZN8touchgfx6Screen4drawEv>:
 8019064:	b507      	push	{r0, r1, r2, lr}
 8019066:	2100      	movs	r1, #0
 8019068:	4b08      	ldr	r3, [pc, #32]	; (801908c <_ZN8touchgfx6Screen4drawEv+0x28>)
 801906a:	9100      	str	r1, [sp, #0]
 801906c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019070:	4b07      	ldr	r3, [pc, #28]	; (8019090 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8019072:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019076:	f9b3 3000 	ldrsh.w	r3, [r3]
 801907a:	4669      	mov	r1, sp
 801907c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019080:	6803      	ldr	r3, [r0, #0]
 8019082:	689b      	ldr	r3, [r3, #8]
 8019084:	4798      	blx	r3
 8019086:	b003      	add	sp, #12
 8019088:	f85d fb04 	ldr.w	pc, [sp], #4
 801908c:	2019814c 	.word	0x2019814c
 8019090:	2019814e 	.word	0x2019814e

08019094 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8019094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019098:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801909c:	b089      	sub	sp, #36	; 0x24
 801909e:	2b00      	cmp	r3, #0
 80190a0:	4680      	mov	r8, r0
 80190a2:	460c      	mov	r4, r1
 80190a4:	4615      	mov	r5, r2
 80190a6:	dd0e      	ble.n	80190c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80190a8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	dd0a      	ble.n	80190c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80190b0:	4628      	mov	r0, r5
 80190b2:	f7ff ff5b 	bl	8018f6c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80190b6:	4621      	mov	r1, r4
 80190b8:	f7fe fbd1 	bl	801785e <_ZNK8touchgfx4Rect9intersectERKS0_>
 80190bc:	69eb      	ldr	r3, [r5, #28]
 80190be:	b928      	cbnz	r0, 80190cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80190c0:	461d      	mov	r5, r3
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d1f4      	bne.n	80190b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80190c6:	b009      	add	sp, #36	; 0x24
 80190c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190cc:	ae04      	add	r6, sp, #16
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	f000 80b5 	beq.w	801923e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80190d4:	682b      	ldr	r3, [r5, #0]
 80190d6:	4629      	mov	r1, r5
 80190d8:	68db      	ldr	r3, [r3, #12]
 80190da:	a802      	add	r0, sp, #8
 80190dc:	4798      	blx	r3
 80190de:	4628      	mov	r0, r5
 80190e0:	f7ff ff60 	bl	8018fa4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80190e4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80190e8:	4407      	add	r7, r0
 80190ea:	4628      	mov	r0, r5
 80190ec:	f7ff ff6e 	bl	8018fcc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80190f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80190f4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80190f8:	4418      	add	r0, r3
 80190fa:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80190fe:	4621      	mov	r1, r4
 8019100:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019104:	b23f      	sxth	r7, r7
 8019106:	4630      	mov	r0, r6
 8019108:	f8ad 2014 	strh.w	r2, [sp, #20]
 801910c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019110:	f8ad 7010 	strh.w	r7, [sp, #16]
 8019114:	f7fc fbfc 	bl	8015910 <_ZN8touchgfx4RectaNERKS0_>
 8019118:	4628      	mov	r0, r5
 801911a:	f7ff ff27 	bl	8018f6c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801911e:	4602      	mov	r2, r0
 8019120:	e896 0003 	ldmia.w	r6, {r0, r1}
 8019124:	ab06      	add	r3, sp, #24
 8019126:	e883 0003 	stmia.w	r3, {r0, r1}
 801912a:	4611      	mov	r1, r2
 801912c:	4618      	mov	r0, r3
 801912e:	f7fc fbef 	bl	8015910 <_ZN8touchgfx4RectaNERKS0_>
 8019132:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019136:	f9b4 1000 	ldrsh.w	r1, [r4]
 801913a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801913e:	4299      	cmp	r1, r3
 8019140:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8019144:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8019148:	d10b      	bne.n	8019162 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801914a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801914e:	4552      	cmp	r2, sl
 8019150:	d107      	bne.n	8019162 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019152:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019156:	455a      	cmp	r2, fp
 8019158:	d103      	bne.n	8019162 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801915a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801915e:	454a      	cmp	r2, r9
 8019160:	d06d      	beq.n	801923e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019162:	f1bb 0f00 	cmp.w	fp, #0
 8019166:	dd65      	ble.n	8019234 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8019168:	f1b9 0f00 	cmp.w	r9, #0
 801916c:	dd62      	ble.n	8019234 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801916e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019172:	fa1f f08a 	uxth.w	r0, sl
 8019176:	4552      	cmp	r2, sl
 8019178:	9000      	str	r0, [sp, #0]
 801917a:	da12      	bge.n	80191a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801917c:	9301      	str	r3, [sp, #4]
 801917e:	9b00      	ldr	r3, [sp, #0]
 8019180:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019184:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019188:	1a9a      	subs	r2, r3, r2
 801918a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801918e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019192:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019196:	69ea      	ldr	r2, [r5, #28]
 8019198:	4631      	mov	r1, r6
 801919a:	4640      	mov	r0, r8
 801919c:	f7ff ff7a 	bl	8019094 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80191a0:	9b01      	ldr	r3, [sp, #4]
 80191a2:	f9b4 2000 	ldrsh.w	r2, [r4]
 80191a6:	b29f      	uxth	r7, r3
 80191a8:	429a      	cmp	r2, r3
 80191aa:	da0d      	bge.n	80191c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80191ac:	f8ad 2010 	strh.w	r2, [sp, #16]
 80191b0:	1aba      	subs	r2, r7, r2
 80191b2:	f8ad a012 	strh.w	sl, [sp, #18]
 80191b6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80191ba:	f8ad 9016 	strh.w	r9, [sp, #22]
 80191be:	69ea      	ldr	r2, [r5, #28]
 80191c0:	4631      	mov	r1, r6
 80191c2:	4640      	mov	r0, r8
 80191c4:	f7ff ff66 	bl	8019094 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80191c8:	8822      	ldrh	r2, [r4, #0]
 80191ca:	88a3      	ldrh	r3, [r4, #4]
 80191cc:	445f      	add	r7, fp
 80191ce:	4413      	add	r3, r2
 80191d0:	b29b      	uxth	r3, r3
 80191d2:	b2bf      	uxth	r7, r7
 80191d4:	b23a      	sxth	r2, r7
 80191d6:	b219      	sxth	r1, r3
 80191d8:	4291      	cmp	r1, r2
 80191da:	dd0d      	ble.n	80191f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80191dc:	1bdb      	subs	r3, r3, r7
 80191de:	f8ad 2010 	strh.w	r2, [sp, #16]
 80191e2:	f8ad a012 	strh.w	sl, [sp, #18]
 80191e6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80191ea:	f8ad 9016 	strh.w	r9, [sp, #22]
 80191ee:	69ea      	ldr	r2, [r5, #28]
 80191f0:	4631      	mov	r1, r6
 80191f2:	4640      	mov	r0, r8
 80191f4:	f7ff ff4e 	bl	8019094 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80191f8:	88e2      	ldrh	r2, [r4, #6]
 80191fa:	8863      	ldrh	r3, [r4, #2]
 80191fc:	4413      	add	r3, r2
 80191fe:	9a00      	ldr	r2, [sp, #0]
 8019200:	b29b      	uxth	r3, r3
 8019202:	444a      	add	r2, r9
 8019204:	fa1f f982 	uxth.w	r9, r2
 8019208:	fa0f f289 	sxth.w	r2, r9
 801920c:	b219      	sxth	r1, r3
 801920e:	428a      	cmp	r2, r1
 8019210:	da15      	bge.n	801923e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019212:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019216:	f9b4 0000 	ldrsh.w	r0, [r4]
 801921a:	eba3 0309 	sub.w	r3, r3, r9
 801921e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019222:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019226:	f8ad 2012 	strh.w	r2, [sp, #18]
 801922a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801922e:	69ea      	ldr	r2, [r5, #28]
 8019230:	4631      	mov	r1, r6
 8019232:	e001      	b.n	8019238 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8019234:	4621      	mov	r1, r4
 8019236:	69ea      	ldr	r2, [r5, #28]
 8019238:	4640      	mov	r0, r8
 801923a:	f7ff ff2b 	bl	8019094 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801923e:	4628      	mov	r0, r5
 8019240:	f7ff fe94 	bl	8018f6c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019244:	4633      	mov	r3, r6
 8019246:	4602      	mov	r2, r0
 8019248:	6861      	ldr	r1, [r4, #4]
 801924a:	6820      	ldr	r0, [r4, #0]
 801924c:	c303      	stmia	r3!, {r0, r1}
 801924e:	4611      	mov	r1, r2
 8019250:	4630      	mov	r0, r6
 8019252:	f7fc fb5d 	bl	8015910 <_ZN8touchgfx4RectaNERKS0_>
 8019256:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801925a:	2b00      	cmp	r3, #0
 801925c:	f77f af33 	ble.w	80190c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019260:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019264:	2b00      	cmp	r3, #0
 8019266:	f77f af2e 	ble.w	80190c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801926a:	4628      	mov	r0, r5
 801926c:	f7ff fe9a 	bl	8018fa4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019270:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019274:	1a18      	subs	r0, r3, r0
 8019276:	f8ad 0010 	strh.w	r0, [sp, #16]
 801927a:	4628      	mov	r0, r5
 801927c:	f7ff fea6 	bl	8018fcc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019280:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019284:	4631      	mov	r1, r6
 8019286:	1a18      	subs	r0, r3, r0
 8019288:	f8ad 0012 	strh.w	r0, [sp, #18]
 801928c:	682b      	ldr	r3, [r5, #0]
 801928e:	4628      	mov	r0, r5
 8019290:	689b      	ldr	r3, [r3, #8]
 8019292:	4798      	blx	r3
 8019294:	e717      	b.n	80190c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08019296 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8019296:	b570      	push	{r4, r5, r6, lr}
 8019298:	2300      	movs	r3, #0
 801929a:	460c      	mov	r4, r1
 801929c:	b086      	sub	sp, #24
 801929e:	1d06      	adds	r6, r0, #4
 80192a0:	4631      	mov	r1, r6
 80192a2:	4605      	mov	r5, r0
 80192a4:	a802      	add	r0, sp, #8
 80192a6:	9301      	str	r3, [sp, #4]
 80192a8:	f7ff fc98 	bl	8018bdc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80192ac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80192b0:	8822      	ldrh	r2, [r4, #0]
 80192b2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80192b6:	1ad2      	subs	r2, r2, r3
 80192b8:	8863      	ldrh	r3, [r4, #2]
 80192ba:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80192be:	1a5b      	subs	r3, r3, r1
 80192c0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80192c4:	f8ad 2010 	strh.w	r2, [sp, #16]
 80192c8:	f8ad 0014 	strh.w	r0, [sp, #20]
 80192cc:	f8ad 1016 	strh.w	r1, [sp, #22]
 80192d0:	aa01      	add	r2, sp, #4
 80192d2:	a904      	add	r1, sp, #16
 80192d4:	4630      	mov	r0, r6
 80192d6:	f8ad 3012 	strh.w	r3, [sp, #18]
 80192da:	f7fc fbf1 	bl	8015ac0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80192de:	9a01      	ldr	r2, [sp, #4]
 80192e0:	b11a      	cbz	r2, 80192ea <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80192e2:	4621      	mov	r1, r4
 80192e4:	4628      	mov	r0, r5
 80192e6:	f7ff fed5 	bl	8019094 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80192ea:	b006      	add	sp, #24
 80192ec:	bd70      	pop	{r4, r5, r6, pc}

080192ee <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80192ee:	b530      	push	{r4, r5, lr}
 80192f0:	4602      	mov	r2, r0
 80192f2:	b085      	sub	sp, #20
 80192f4:	460d      	mov	r5, r1
 80192f6:	466b      	mov	r3, sp
 80192f8:	4604      	mov	r4, r0
 80192fa:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80192fe:	6851      	ldr	r1, [r2, #4]
 8019300:	c303      	stmia	r3!, {r0, r1}
 8019302:	4629      	mov	r1, r5
 8019304:	4668      	mov	r0, sp
 8019306:	f7fc fb03 	bl	8015910 <_ZN8touchgfx4RectaNERKS0_>
 801930a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801930e:	b12b      	cbz	r3, 801931c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8019310:	4669      	mov	r1, sp
 8019312:	4620      	mov	r0, r4
 8019314:	f7ff ffbf 	bl	8019296 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8019318:	b005      	add	sp, #20
 801931a:	bd30      	pop	{r4, r5, pc}
 801931c:	3404      	adds	r4, #4
 801931e:	4621      	mov	r1, r4
 8019320:	a802      	add	r0, sp, #8
 8019322:	f7ff fc5b 	bl	8018bdc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019326:	f8bd 3000 	ldrh.w	r3, [sp]
 801932a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801932e:	4669      	mov	r1, sp
 8019330:	1a9b      	subs	r3, r3, r2
 8019332:	f8ad 3000 	strh.w	r3, [sp]
 8019336:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801933a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801933e:	4620      	mov	r0, r4
 8019340:	1a9b      	subs	r3, r3, r2
 8019342:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019346:	f7fc fb82 	bl	8015a4e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801934a:	e7e5      	b.n	8019318 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801934c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801934c:	460b      	mov	r3, r1
 801934e:	680a      	ldr	r2, [r1, #0]
 8019350:	1d01      	adds	r1, r0, #4
 8019352:	6992      	ldr	r2, [r2, #24]
 8019354:	4618      	mov	r0, r3
 8019356:	4710      	bx	r2

08019358 <_ZN8touchgfx12TextProviderC1Ev>:
 8019358:	b538      	push	{r3, r4, r5, lr}
 801935a:	2500      	movs	r5, #0
 801935c:	2302      	movs	r3, #2
 801935e:	4604      	mov	r4, r0
 8019360:	e9c0 5500 	strd	r5, r5, [r0]
 8019364:	7403      	strb	r3, [r0, #16]
 8019366:	6145      	str	r5, [r0, #20]
 8019368:	7605      	strb	r5, [r0, #24]
 801936a:	83c5      	strh	r5, [r0, #30]
 801936c:	8405      	strh	r5, [r0, #32]
 801936e:	86c5      	strh	r5, [r0, #54]	; 0x36
 8019370:	8705      	strh	r5, [r0, #56]	; 0x38
 8019372:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8019374:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8019378:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801937c:	220e      	movs	r2, #14
 801937e:	4629      	mov	r1, r5
 8019380:	304c      	adds	r0, #76	; 0x4c
 8019382:	f00e ff1e 	bl	80281c2 <memset>
 8019386:	2301      	movs	r3, #1
 8019388:	4620      	mov	r0, r4
 801938a:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801938e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019392:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8019396:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801939a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801939e:	f7ea f877 	bl	8003490 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80193a2:	4620      	mov	r0, r4
 80193a4:	bd38      	pop	{r3, r4, r5, pc}

080193a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80193a6:	b530      	push	{r4, r5, lr}
 80193a8:	2500      	movs	r5, #0
 80193aa:	2401      	movs	r4, #1
 80193ac:	6843      	ldr	r3, [r0, #4]
 80193ae:	b913      	cbnz	r3, 80193b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80193b0:	6803      	ldr	r3, [r0, #0]
 80193b2:	b313      	cbz	r3, 80193fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80193b4:	6043      	str	r3, [r0, #4]
 80193b6:	7e03      	ldrb	r3, [r0, #24]
 80193b8:	b143      	cbz	r3, 80193cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80193ba:	6943      	ldr	r3, [r0, #20]
 80193bc:	b12b      	cbz	r3, 80193ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80193be:	881a      	ldrh	r2, [r3, #0]
 80193c0:	b11a      	cbz	r2, 80193ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80193c2:	1c9a      	adds	r2, r3, #2
 80193c4:	6142      	str	r2, [r0, #20]
 80193c6:	8818      	ldrh	r0, [r3, #0]
 80193c8:	bd30      	pop	{r4, r5, pc}
 80193ca:	7605      	strb	r5, [r0, #24]
 80193cc:	6843      	ldr	r3, [r0, #4]
 80193ce:	8819      	ldrh	r1, [r3, #0]
 80193d0:	b199      	cbz	r1, 80193fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80193d2:	1c9a      	adds	r2, r3, #2
 80193d4:	2902      	cmp	r1, #2
 80193d6:	6042      	str	r2, [r0, #4]
 80193d8:	d1f5      	bne.n	80193c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80193da:	7c03      	ldrb	r3, [r0, #16]
 80193dc:	2b01      	cmp	r3, #1
 80193de:	d8e5      	bhi.n	80193ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80193e0:	1c5a      	adds	r2, r3, #1
 80193e2:	7402      	strb	r2, [r0, #16]
 80193e4:	3302      	adds	r3, #2
 80193e6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80193ea:	6143      	str	r3, [r0, #20]
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d0dd      	beq.n	80193ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80193f0:	881b      	ldrh	r3, [r3, #0]
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d0da      	beq.n	80193ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80193f6:	7604      	strb	r4, [r0, #24]
 80193f8:	e7d8      	b.n	80193ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80193fa:	2000      	movs	r0, #0
 80193fc:	e7e4      	b.n	80193c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080193fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80193fe:	6001      	str	r1, [r0, #0]
 8019400:	2100      	movs	r1, #0
 8019402:	b430      	push	{r4, r5}
 8019404:	6041      	str	r1, [r0, #4]
 8019406:	6815      	ldr	r5, [r2, #0]
 8019408:	6085      	str	r5, [r0, #8]
 801940a:	6852      	ldr	r2, [r2, #4]
 801940c:	6443      	str	r3, [r0, #68]	; 0x44
 801940e:	9b02      	ldr	r3, [sp, #8]
 8019410:	60c2      	str	r2, [r0, #12]
 8019412:	7401      	strb	r1, [r0, #16]
 8019414:	6141      	str	r1, [r0, #20]
 8019416:	7601      	strb	r1, [r0, #24]
 8019418:	8701      	strh	r1, [r0, #56]	; 0x38
 801941a:	8401      	strh	r1, [r0, #32]
 801941c:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8019420:	6483      	str	r3, [r0, #72]	; 0x48
 8019422:	bc30      	pop	{r4, r5}
 8019424:	f7ea b834 	b.w	8003490 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08019428 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8019428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801942a:	4605      	mov	r5, r0
 801942c:	4608      	mov	r0, r1
 801942e:	b1e9      	cbz	r1, 801946c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8019430:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8019434:	460b      	mov	r3, r1
 8019436:	4622      	mov	r2, r4
 8019438:	f101 0708 	add.w	r7, r1, #8
 801943c:	4626      	mov	r6, r4
 801943e:	6818      	ldr	r0, [r3, #0]
 8019440:	6859      	ldr	r1, [r3, #4]
 8019442:	3308      	adds	r3, #8
 8019444:	c603      	stmia	r6!, {r0, r1}
 8019446:	42bb      	cmp	r3, r7
 8019448:	4634      	mov	r4, r6
 801944a:	d1f7      	bne.n	801943c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801944c:	6818      	ldr	r0, [r3, #0]
 801944e:	6030      	str	r0, [r6, #0]
 8019450:	4610      	mov	r0, r2
 8019452:	889b      	ldrh	r3, [r3, #4]
 8019454:	80b3      	strh	r3, [r6, #4]
 8019456:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801945a:	015b      	lsls	r3, r3, #5
 801945c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019460:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8019464:	430b      	orrs	r3, r1
 8019466:	425b      	negs	r3, r3
 8019468:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801946c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801946e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801946e:	b538      	push	{r3, r4, r5, lr}
 8019470:	460c      	mov	r4, r1
 8019472:	6811      	ldr	r1, [r2, #0]
 8019474:	4610      	mov	r0, r2
 8019476:	68cd      	ldr	r5, [r1, #12]
 8019478:	4619      	mov	r1, r3
 801947a:	47a8      	blx	r5
 801947c:	2800      	cmp	r0, #0
 801947e:	bf08      	it	eq
 8019480:	4620      	moveq	r0, r4
 8019482:	bd38      	pop	{r3, r4, r5, pc}

08019484 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8019484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019486:	4604      	mov	r4, r0
 8019488:	4615      	mov	r5, r2
 801948a:	4608      	mov	r0, r1
 801948c:	b93a      	cbnz	r2, 801949e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801948e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8019492:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8019496:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801949a:	4628      	mov	r0, r5
 801949c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801949e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 80194a2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80194a6:	8893      	ldrh	r3, [r2, #4]
 80194a8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80194ac:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80194b0:	79ee      	ldrb	r6, [r5, #7]
 80194b2:	4316      	orrs	r6, r2
 80194b4:	19da      	adds	r2, r3, r7
 80194b6:	b291      	uxth	r1, r2
 80194b8:	291d      	cmp	r1, #29
 80194ba:	b2b7      	uxth	r7, r6
 80194bc:	d879      	bhi.n	80195b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 80194be:	2201      	movs	r2, #1
 80194c0:	408a      	lsls	r2, r1
 80194c2:	4974      	ldr	r1, [pc, #464]	; (8019694 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 80194c4:	10f6      	asrs	r6, r6, #3
 80194c6:	420a      	tst	r2, r1
 80194c8:	d12d      	bne.n	8019526 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 80194ca:	f412 7f60 	tst.w	r2, #896	; 0x380
 80194ce:	d070      	beq.n	80195b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 80194d0:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80194d4:	462b      	mov	r3, r5
 80194d6:	f105 0e08 	add.w	lr, r5, #8
 80194da:	4615      	mov	r5, r2
 80194dc:	4694      	mov	ip, r2
 80194de:	6818      	ldr	r0, [r3, #0]
 80194e0:	6859      	ldr	r1, [r3, #4]
 80194e2:	3308      	adds	r3, #8
 80194e4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80194e8:	4573      	cmp	r3, lr
 80194ea:	4662      	mov	r2, ip
 80194ec:	d1f6      	bne.n	80194dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80194ee:	6818      	ldr	r0, [r3, #0]
 80194f0:	f8cc 0000 	str.w	r0, [ip]
 80194f4:	889b      	ldrh	r3, [r3, #4]
 80194f6:	f8ac 3004 	strh.w	r3, [ip, #4]
 80194fa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80194fe:	b2b3      	uxth	r3, r6
 8019500:	1aca      	subs	r2, r1, r3
 8019502:	b292      	uxth	r2, r2
 8019504:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8019508:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801950c:	10d2      	asrs	r2, r2, #3
 801950e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8019512:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8019516:	4302      	orrs	r2, r0
 8019518:	1bcf      	subs	r7, r1, r7
 801951a:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801951e:	1afb      	subs	r3, r7, r3
 8019520:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8019524:	e7b9      	b.n	801949a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8019526:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019528:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801952c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801952e:	f640 6333 	movw	r3, #3635	; 0xe33
 8019532:	4299      	cmp	r1, r3
 8019534:	d110      	bne.n	8019558 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 8019536:	6803      	ldr	r3, [r0, #0]
 8019538:	68db      	ldr	r3, [r3, #12]
 801953a:	4798      	blx	r3
 801953c:	7b41      	ldrb	r1, [r0, #13]
 801953e:	00cb      	lsls	r3, r1, #3
 8019540:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019544:	7a03      	ldrb	r3, [r0, #8]
 8019546:	0648      	lsls	r0, r1, #25
 8019548:	ea43 0302 	orr.w	r3, r3, r2
 801954c:	bf44      	itt	mi
 801954e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019552:	b21b      	sxthmi	r3, r3
 8019554:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019558:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801955c:	462a      	mov	r2, r5
 801955e:	443b      	add	r3, r7
 8019560:	4433      	add	r3, r6
 8019562:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8019566:	f105 0c08 	add.w	ip, r5, #8
 801956a:	4635      	mov	r5, r6
 801956c:	b29b      	uxth	r3, r3
 801956e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019572:	4637      	mov	r7, r6
 8019574:	6810      	ldr	r0, [r2, #0]
 8019576:	6851      	ldr	r1, [r2, #4]
 8019578:	3208      	adds	r2, #8
 801957a:	c703      	stmia	r7!, {r0, r1}
 801957c:	4562      	cmp	r2, ip
 801957e:	463e      	mov	r6, r7
 8019580:	d1f7      	bne.n	8019572 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 8019582:	6810      	ldr	r0, [r2, #0]
 8019584:	6038      	str	r0, [r7, #0]
 8019586:	8892      	ldrh	r2, [r2, #4]
 8019588:	80ba      	strh	r2, [r7, #4]
 801958a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801958e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019592:	10db      	asrs	r3, r3, #3
 8019594:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019598:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801959c:	4313      	orrs	r3, r2
 801959e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80195a2:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80195a6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80195aa:	1a9b      	subs	r3, r3, r2
 80195ac:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80195b0:	e773      	b.n	801949a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80195b2:	f640 611b 	movw	r1, #3611	; 0xe1b
 80195b6:	f023 0204 	bic.w	r2, r3, #4
 80195ba:	428a      	cmp	r2, r1
 80195bc:	d003      	beq.n	80195c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 80195be:	f640 621d 	movw	r2, #3613	; 0xe1d
 80195c2:	4293      	cmp	r3, r2
 80195c4:	d120      	bne.n	8019608 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 80195c6:	3b01      	subs	r3, #1
 80195c8:	4602      	mov	r2, r0
 80195ca:	b29b      	uxth	r3, r3
 80195cc:	4629      	mov	r1, r5
 80195ce:	4620      	mov	r0, r4
 80195d0:	f7ff ff4d 	bl	801946e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80195d4:	7b41      	ldrb	r1, [r0, #13]
 80195d6:	00cb      	lsls	r3, r1, #3
 80195d8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80195dc:	7a03      	ldrb	r3, [r0, #8]
 80195de:	0649      	lsls	r1, r1, #25
 80195e0:	ea43 0302 	orr.w	r3, r3, r2
 80195e4:	bf44      	itt	mi
 80195e6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80195ea:	b21b      	sxthmi	r3, r3
 80195ec:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80195f0:	7b6b      	ldrb	r3, [r5, #13]
 80195f2:	7aaa      	ldrb	r2, [r5, #10]
 80195f4:	005b      	lsls	r3, r3, #1
 80195f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80195fa:	4313      	orrs	r3, r2
 80195fc:	115a      	asrs	r2, r3, #5
 80195fe:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8019602:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8019606:	e036      	b.n	8019676 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 8019608:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801960c:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8019610:	7a2a      	ldrb	r2, [r5, #8]
 8019612:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8019616:	ea42 0201 	orr.w	r2, r2, r1
 801961a:	f640 6109 	movw	r1, #3593	; 0xe09
 801961e:	bf1c      	itt	ne
 8019620:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8019624:	b212      	sxthne	r2, r2
 8019626:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801962a:	f023 0210 	bic.w	r2, r3, #16
 801962e:	428a      	cmp	r2, r1
 8019630:	d003      	beq.n	801963a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 8019632:	f640 6213 	movw	r2, #3603	; 0xe13
 8019636:	4293      	cmp	r3, r2
 8019638:	d12a      	bne.n	8019690 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 801963a:	7b6e      	ldrb	r6, [r5, #13]
 801963c:	4629      	mov	r1, r5
 801963e:	0076      	lsls	r6, r6, #1
 8019640:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019644:	7aae      	ldrb	r6, [r5, #10]
 8019646:	4316      	orrs	r6, r2
 8019648:	f640 6213 	movw	r2, #3603	; 0xe13
 801964c:	4293      	cmp	r3, r2
 801964e:	bf18      	it	ne
 8019650:	f103 33ff 	addne.w	r3, r3, #4294967295
 8019654:	4602      	mov	r2, r0
 8019656:	bf14      	ite	ne
 8019658:	b29b      	uxthne	r3, r3
 801965a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801965e:	4620      	mov	r0, r4
 8019660:	f7ff ff05 	bl	801946e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019664:	7b43      	ldrb	r3, [r0, #13]
 8019666:	7a82      	ldrb	r2, [r0, #10]
 8019668:	005b      	lsls	r3, r3, #1
 801966a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801966e:	4313      	orrs	r3, r2
 8019670:	1af6      	subs	r6, r6, r3
 8019672:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8019676:	7b69      	ldrb	r1, [r5, #13]
 8019678:	00cb      	lsls	r3, r1, #3
 801967a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801967e:	7a2b      	ldrb	r3, [r5, #8]
 8019680:	4313      	orrs	r3, r2
 8019682:	064a      	lsls	r2, r1, #25
 8019684:	bf44      	itt	mi
 8019686:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801968a:	b21b      	sxthmi	r3, r3
 801968c:	1bdb      	subs	r3, r3, r7
 801968e:	e747      	b.n	8019520 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 8019690:	2300      	movs	r3, #0
 8019692:	e7b6      	b.n	8019602 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 8019694:	3fc00079 	.word	0x3fc00079

08019698 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8019698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801969c:	4604      	mov	r4, r0
 801969e:	b942      	cbnz	r2, 80196b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80196a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80196a4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80196a8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80196ac:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80196b0:	e047      	b.n	8019742 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80196b2:	7b51      	ldrb	r1, [r2, #13]
 80196b4:	8893      	ldrh	r3, [r2, #4]
 80196b6:	010d      	lsls	r5, r1, #4
 80196b8:	f405 7080 	and.w	r0, r5, #256	; 0x100
 80196bc:	79d5      	ldrb	r5, [r2, #7]
 80196be:	4305      	orrs	r5, r0
 80196c0:	2d04      	cmp	r5, #4
 80196c2:	bfcc      	ite	gt
 80196c4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80196c8:	f04f 0e01 	movle.w	lr, #1
 80196cc:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80196d0:	f200 80ab 	bhi.w	801982a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80196d4:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80196d8:	4283      	cmp	r3, r0
 80196da:	d216      	bcs.n	801970a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80196dc:	f240 605b 	movw	r0, #1627	; 0x65b
 80196e0:	4283      	cmp	r3, r0
 80196e2:	d859      	bhi.n	8019798 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80196e4:	f240 6057 	movw	r0, #1623	; 0x657
 80196e8:	4283      	cmp	r3, r0
 80196ea:	d20e      	bcs.n	801970a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80196ec:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80196f0:	d24a      	bcs.n	8019788 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80196f2:	f240 604e 	movw	r0, #1614	; 0x64e
 80196f6:	4283      	cmp	r3, r0
 80196f8:	d207      	bcs.n	801970a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80196fa:	f240 601a 	movw	r0, #1562	; 0x61a
 80196fe:	4283      	cmp	r3, r0
 8019700:	d02a      	beq.n	8019758 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019702:	d821      	bhi.n	8019748 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8019704:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8019708:	d35b      	bcc.n	80197c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801970a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801970e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019712:	f040 80d0 	bne.w	80198b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019716:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801971a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801971e:	f040 80ca 	bne.w	80198b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019722:	00cb      	lsls	r3, r1, #3
 8019724:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019728:	7a13      	ldrb	r3, [r2, #8]
 801972a:	0649      	lsls	r1, r1, #25
 801972c:	ea43 0300 	orr.w	r3, r3, r0
 8019730:	bf44      	itt	mi
 8019732:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019736:	b21b      	sxthmi	r3, r3
 8019738:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801973c:	1b5d      	subs	r5, r3, r5
 801973e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019742:	4610      	mov	r0, r2
 8019744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019748:	f240 604b 	movw	r0, #1611	; 0x64b
 801974c:	4283      	cmp	r3, r0
 801974e:	d338      	bcc.n	80197c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019750:	f240 604c 	movw	r0, #1612	; 0x64c
 8019754:	4283      	cmp	r3, r0
 8019756:	d9d8      	bls.n	801970a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019758:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801975c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8019760:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019764:	f040 80f2 	bne.w	801994c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8019768:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801976c:	f040 80ee 	bne.w	801994c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8019770:	00cb      	lsls	r3, r1, #3
 8019772:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019776:	7a13      	ldrb	r3, [r2, #8]
 8019778:	064e      	lsls	r6, r1, #25
 801977a:	ea43 0300 	orr.w	r3, r3, r0
 801977e:	bf44      	itt	mi
 8019780:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019784:	b21b      	sxthmi	r3, r3
 8019786:	e7d9      	b.n	801973c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8019788:	f240 6054 	movw	r0, #1620	; 0x654
 801978c:	4283      	cmp	r3, r0
 801978e:	d8e3      	bhi.n	8019758 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019790:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8019794:	d9e0      	bls.n	8019758 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019796:	e7b8      	b.n	801970a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019798:	f240 6074 	movw	r0, #1652	; 0x674
 801979c:	4283      	cmp	r3, r0
 801979e:	d0b4      	beq.n	801970a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80197a0:	d82d      	bhi.n	80197fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80197a2:	f240 605e 	movw	r0, #1630	; 0x65e
 80197a6:	4283      	cmp	r3, r0
 80197a8:	d804      	bhi.n	80197b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80197aa:	f240 605d 	movw	r0, #1629	; 0x65d
 80197ae:	4283      	cmp	r3, r0
 80197b0:	d3d2      	bcc.n	8019758 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80197b2:	e7aa      	b.n	801970a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80197b4:	f240 605f 	movw	r0, #1631	; 0x65f
 80197b8:	4283      	cmp	r3, r0
 80197ba:	d0cd      	beq.n	8019758 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80197bc:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80197c0:	d0a3      	beq.n	801970a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80197c2:	00cb      	lsls	r3, r1, #3
 80197c4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80197c8:	7a13      	ldrb	r3, [r2, #8]
 80197ca:	0649      	lsls	r1, r1, #25
 80197cc:	ea43 0300 	orr.w	r3, r3, r0
 80197d0:	bf44      	itt	mi
 80197d2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80197d6:	b21b      	sxthmi	r3, r3
 80197d8:	1b5d      	subs	r5, r3, r5
 80197da:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80197de:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80197e2:	7b53      	ldrb	r3, [r2, #13]
 80197e4:	015b      	lsls	r3, r3, #5
 80197e6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80197ea:	7993      	ldrb	r3, [r2, #6]
 80197ec:	430b      	orrs	r3, r1
 80197ee:	2105      	movs	r1, #5
 80197f0:	005b      	lsls	r3, r3, #1
 80197f2:	fb93 f3f1 	sdiv	r3, r3, r1
 80197f6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80197fa:	440b      	add	r3, r1
 80197fc:	e756      	b.n	80196ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80197fe:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8019802:	4283      	cmp	r3, r0
 8019804:	d809      	bhi.n	801981a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8019806:	f240 60df 	movw	r0, #1759	; 0x6df
 801980a:	4283      	cmp	r3, r0
 801980c:	f4bf af7d 	bcs.w	801970a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019810:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8019814:	2b05      	cmp	r3, #5
 8019816:	d8d4      	bhi.n	80197c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019818:	e777      	b.n	801970a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801981a:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801981e:	4283      	cmp	r3, r0
 8019820:	d09a      	beq.n	8019758 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019822:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8019826:	4283      	cmp	r3, r0
 8019828:	e7ca      	b.n	80197c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801982a:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801982e:	d22b      	bcs.n	8019888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8019830:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8019834:	4283      	cmp	r3, r0
 8019836:	d28f      	bcs.n	8019758 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019838:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801983c:	4283      	cmp	r3, r0
 801983e:	d816      	bhi.n	801986e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8019840:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8019844:	4283      	cmp	r3, r0
 8019846:	f4bf af60 	bcs.w	801970a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801984a:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801984e:	4283      	cmp	r3, r0
 8019850:	d80a      	bhi.n	8019868 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8019852:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8019856:	4283      	cmp	r3, r0
 8019858:	f4bf af57 	bcs.w	801970a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801985c:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8019860:	4283      	cmp	r3, r0
 8019862:	f43f af79 	beq.w	8019758 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019866:	e7ac      	b.n	80197c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019868:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801986c:	e7f8      	b.n	8019860 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801986e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8019872:	4283      	cmp	r3, r0
 8019874:	d802      	bhi.n	801987c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8019876:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801987a:	e798      	b.n	80197ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801987c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8019880:	4283      	cmp	r3, r0
 8019882:	f47f af42 	bne.w	801970a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019886:	e767      	b.n	8019758 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019888:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801988c:	4283      	cmp	r3, r0
 801988e:	f43f af63 	beq.w	8019758 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019892:	d802      	bhi.n	801989a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8019894:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8019898:	e7f2      	b.n	8019880 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801989a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801989e:	4283      	cmp	r3, r0
 80198a0:	d805      	bhi.n	80198ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80198a2:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80198a6:	4283      	cmp	r3, r0
 80198a8:	f4ff af2f 	bcc.w	801970a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80198ac:	e754      	b.n	8019758 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80198ae:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80198b2:	4283      	cmp	r3, r0
 80198b4:	e7af      	b.n	8019816 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80198b6:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80198ba:	4617      	mov	r7, r2
 80198bc:	4666      	mov	r6, ip
 80198be:	f102 0808 	add.w	r8, r2, #8
 80198c2:	46e6      	mov	lr, ip
 80198c4:	6838      	ldr	r0, [r7, #0]
 80198c6:	6879      	ldr	r1, [r7, #4]
 80198c8:	3708      	adds	r7, #8
 80198ca:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80198ce:	4547      	cmp	r7, r8
 80198d0:	46f4      	mov	ip, lr
 80198d2:	d1f6      	bne.n	80198c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80198d4:	6838      	ldr	r0, [r7, #0]
 80198d6:	f8ce 0000 	str.w	r0, [lr]
 80198da:	88b9      	ldrh	r1, [r7, #4]
 80198dc:	f8ae 1004 	strh.w	r1, [lr, #4]
 80198e0:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80198e4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80198e8:	d009      	beq.n	80198fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80198ea:	7b51      	ldrb	r1, [r2, #13]
 80198ec:	7992      	ldrb	r2, [r2, #6]
 80198ee:	0149      	lsls	r1, r1, #5
 80198f0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80198f4:	4311      	orrs	r1, r2
 80198f6:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80198fa:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80198fe:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019902:	b2ad      	uxth	r5, r5
 8019904:	d00d      	beq.n	8019922 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 8019906:	442b      	add	r3, r5
 8019908:	b29b      	uxth	r3, r3
 801990a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801990e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019912:	10db      	asrs	r3, r3, #3
 8019914:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019918:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801991c:	4313      	orrs	r3, r2
 801991e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019922:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8019926:	00cb      	lsls	r3, r1, #3
 8019928:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801992c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8019930:	064f      	lsls	r7, r1, #25
 8019932:	ea43 0302 	orr.w	r3, r3, r2
 8019936:	bf44      	itt	mi
 8019938:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801993c:	b21b      	sxthmi	r3, r3
 801993e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019942:	1b5b      	subs	r3, r3, r5
 8019944:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8019948:	4632      	mov	r2, r6
 801994a:	e6fa      	b.n	8019742 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801994c:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8019950:	4617      	mov	r7, r2
 8019952:	4666      	mov	r6, ip
 8019954:	f102 0908 	add.w	r9, r2, #8
 8019958:	46e0      	mov	r8, ip
 801995a:	6838      	ldr	r0, [r7, #0]
 801995c:	6879      	ldr	r1, [r7, #4]
 801995e:	3708      	adds	r7, #8
 8019960:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8019964:	454f      	cmp	r7, r9
 8019966:	46c4      	mov	ip, r8
 8019968:	d1f6      	bne.n	8019958 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801996a:	6838      	ldr	r0, [r7, #0]
 801996c:	f8c8 0000 	str.w	r0, [r8]
 8019970:	88b9      	ldrh	r1, [r7, #4]
 8019972:	f8a8 1004 	strh.w	r1, [r8, #4]
 8019976:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801997a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801997e:	d009      	beq.n	8019994 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8019980:	7b51      	ldrb	r1, [r2, #13]
 8019982:	7992      	ldrb	r2, [r2, #6]
 8019984:	0149      	lsls	r1, r1, #5
 8019986:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801998a:	4311      	orrs	r1, r2
 801998c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019990:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8019994:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019998:	d00e      	beq.n	80199b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801999a:	eba3 030e 	sub.w	r3, r3, lr
 801999e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80199a2:	b29b      	uxth	r3, r3
 80199a4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80199a8:	10db      	asrs	r3, r3, #3
 80199aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80199ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80199b2:	4313      	orrs	r3, r2
 80199b4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80199b8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80199bc:	00cb      	lsls	r3, r1, #3
 80199be:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80199c2:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80199c6:	0648      	lsls	r0, r1, #25
 80199c8:	ea43 0302 	orr.w	r3, r3, r2
 80199cc:	bf44      	itt	mi
 80199ce:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80199d2:	b21b      	sxthmi	r3, r3
 80199d4:	1b5d      	subs	r5, r3, r5
 80199d6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80199da:	e7b5      	b.n	8019948 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

080199dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80199dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199e0:	461e      	mov	r6, r3
 80199e2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80199e4:	4604      	mov	r4, r0
 80199e6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80199ea:	4617      	mov	r7, r2
 80199ec:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80199f0:	f7e9 fd0c 	bl	800340c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80199f4:	4605      	mov	r5, r0
 80199f6:	b918      	cbnz	r0, 8019a00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80199f8:	6030      	str	r0, [r6, #0]
 80199fa:	4628      	mov	r0, r5
 80199fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a00:	683b      	ldr	r3, [r7, #0]
 8019a02:	4601      	mov	r1, r0
 8019a04:	68db      	ldr	r3, [r3, #12]
 8019a06:	4638      	mov	r0, r7
 8019a08:	4798      	blx	r3
 8019a0a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8019a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019a12:	4602      	mov	r2, r0
 8019a14:	6030      	str	r0, [r6, #0]
 8019a16:	d213      	bcs.n	8019a40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8019a18:	4643      	mov	r3, r8
 8019a1a:	4639      	mov	r1, r7
 8019a1c:	4620      	mov	r0, r4
 8019a1e:	f7ff fe3b 	bl	8019698 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019a22:	6030      	str	r0, [r6, #0]
 8019a24:	6833      	ldr	r3, [r6, #0]
 8019a26:	b143      	cbz	r3, 8019a3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8019a28:	7b5a      	ldrb	r2, [r3, #13]
 8019a2a:	7a9b      	ldrb	r3, [r3, #10]
 8019a2c:	0052      	lsls	r2, r2, #1
 8019a2e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019a32:	4313      	orrs	r3, r2
 8019a34:	bf0c      	ite	eq
 8019a36:	2301      	moveq	r3, #1
 8019a38:	2300      	movne	r3, #0
 8019a3a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8019a3e:	e7dc      	b.n	80199fa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8019a40:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8019a44:	b29b      	uxth	r3, r3
 8019a46:	2b7f      	cmp	r3, #127	; 0x7f
 8019a48:	d804      	bhi.n	8019a54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8019a4a:	4639      	mov	r1, r7
 8019a4c:	4620      	mov	r0, r4
 8019a4e:	f7ff fd19 	bl	8019484 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019a52:	e7e6      	b.n	8019a22 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8019a54:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d0e3      	beq.n	8019a24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019a5c:	f640 1302 	movw	r3, #2306	; 0x902
 8019a60:	429d      	cmp	r5, r3
 8019a62:	d1df      	bne.n	8019a24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019a64:	4601      	mov	r1, r0
 8019a66:	4620      	mov	r0, r4
 8019a68:	f7ff fcde 	bl	8019428 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019a6c:	e7d9      	b.n	8019a22 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08019a6e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8019a6e:	b510      	push	{r4, lr}
 8019a70:	4604      	mov	r4, r0
 8019a72:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8019a76:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019a78:	b1f1      	cbz	r1, 8019ab8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8019a7a:	2b0a      	cmp	r3, #10
 8019a7c:	d02f      	beq.n	8019ade <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8019a7e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8019a80:	3901      	subs	r1, #1
 8019a82:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8019a86:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8019a88:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8019a8c:	1c51      	adds	r1, r2, #1
 8019a8e:	b289      	uxth	r1, r1
 8019a90:	2901      	cmp	r1, #1
 8019a92:	bf84      	itt	hi
 8019a94:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019a98:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8019a9a:	f103 0201 	add.w	r2, r3, #1
 8019a9e:	8722      	strh	r2, [r4, #56]	; 0x38
 8019aa0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019aa2:	bf98      	it	ls
 8019aa4:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8019aa6:	4413      	add	r3, r2
 8019aa8:	b29b      	uxth	r3, r3
 8019aaa:	2b09      	cmp	r3, #9
 8019aac:	bf88      	it	hi
 8019aae:	3b0a      	subhi	r3, #10
 8019ab0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019ab4:	8458      	strh	r0, [r3, #34]	; 0x22
 8019ab6:	e7dc      	b.n	8019a72 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8019ab8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019aba:	2b0a      	cmp	r3, #10
 8019abc:	d00f      	beq.n	8019ade <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8019abe:	4620      	mov	r0, r4
 8019ac0:	f7ff fc71 	bl	80193a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8019ac4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019ac6:	1c5a      	adds	r2, r3, #1
 8019ac8:	8722      	strh	r2, [r4, #56]	; 0x38
 8019aca:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019acc:	4413      	add	r3, r2
 8019ace:	b29b      	uxth	r3, r3
 8019ad0:	2b09      	cmp	r3, #9
 8019ad2:	bf88      	it	hi
 8019ad4:	3b0a      	subhi	r3, #10
 8019ad6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019ada:	8458      	strh	r0, [r3, #34]	; 0x22
 8019adc:	e7ec      	b.n	8019ab8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8019ade:	bd10      	pop	{r4, pc}

08019ae0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019ae0:	b538      	push	{r3, r4, r5, lr}
 8019ae2:	4604      	mov	r4, r0
 8019ae4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019ae6:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8019aea:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8019aec:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8019aee:	3a01      	subs	r2, #1
 8019af0:	8702      	strh	r2, [r0, #56]	; 0x38
 8019af2:	1c5a      	adds	r2, r3, #1
 8019af4:	b292      	uxth	r2, r2
 8019af6:	2a09      	cmp	r2, #9
 8019af8:	bf86      	itte	hi
 8019afa:	3b09      	subhi	r3, #9
 8019afc:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8019afe:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8019b00:	f7ff ffb5 	bl	8019a6e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019b04:	8c23      	ldrh	r3, [r4, #32]
 8019b06:	2b01      	cmp	r3, #1
 8019b08:	bf9c      	itt	ls
 8019b0a:	3301      	addls	r3, #1
 8019b0c:	8423      	strhls	r3, [r4, #32]
 8019b0e:	8be3      	ldrh	r3, [r4, #30]
 8019b10:	b90b      	cbnz	r3, 8019b16 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8019b12:	2302      	movs	r3, #2
 8019b14:	83e3      	strh	r3, [r4, #30]
 8019b16:	8be3      	ldrh	r3, [r4, #30]
 8019b18:	4628      	mov	r0, r5
 8019b1a:	3b01      	subs	r3, #1
 8019b1c:	b29b      	uxth	r3, r3
 8019b1e:	83e3      	strh	r3, [r4, #30]
 8019b20:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019b24:	8365      	strh	r5, [r4, #26]
 8019b26:	bd38      	pop	{r3, r4, r5, pc}

08019b28 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8019b28:	428a      	cmp	r2, r1
 8019b2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b2e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8019b30:	d931      	bls.n	8019b96 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 8019b32:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8019b34:	1a54      	subs	r4, r2, r1
 8019b36:	19ee      	adds	r6, r5, r7
 8019b38:	3e01      	subs	r6, #1
 8019b3a:	fa1f fe84 	uxth.w	lr, r4
 8019b3e:	b2b4      	uxth	r4, r6
 8019b40:	eba4 090e 	sub.w	r9, r4, lr
 8019b44:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8019b48:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8019b4c:	fa1f f989 	uxth.w	r9, r9
 8019b50:	2c09      	cmp	r4, #9
 8019b52:	4626      	mov	r6, r4
 8019b54:	bf88      	it	hi
 8019b56:	f1a4 060a 	subhi.w	r6, r4, #10
 8019b5a:	f1bc 0f00 	cmp.w	ip, #0
 8019b5e:	bf08      	it	eq
 8019b60:	f04f 0c02 	moveq.w	ip, #2
 8019b64:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8019b68:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019b6c:	3c01      	subs	r4, #1
 8019b6e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8019b72:	fa1f fc8c 	uxth.w	ip, ip
 8019b76:	b2a4      	uxth	r4, r4
 8019b78:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8019b7c:	454c      	cmp	r4, r9
 8019b7e:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8019b82:	d1e5      	bne.n	8019b50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8019b84:	eba5 050e 	sub.w	r5, r5, lr
 8019b88:	eb0e 0408 	add.w	r4, lr, r8
 8019b8c:	8705      	strh	r5, [r0, #56]	; 0x38
 8019b8e:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8019b92:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8019b96:	250a      	movs	r5, #10
 8019b98:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8019b9a:	1a64      	subs	r4, r4, r1
 8019b9c:	4439      	add	r1, r7
 8019b9e:	b289      	uxth	r1, r1
 8019ba0:	2909      	cmp	r1, #9
 8019ba2:	bf88      	it	hi
 8019ba4:	390a      	subhi	r1, #10
 8019ba6:	8704      	strh	r4, [r0, #56]	; 0x38
 8019ba8:	86c1      	strh	r1, [r0, #54]	; 0x36
 8019baa:	b18a      	cbz	r2, 8019bd0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8019bac:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8019bae:	3a01      	subs	r2, #1
 8019bb0:	3101      	adds	r1, #1
 8019bb2:	b292      	uxth	r2, r2
 8019bb4:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8019bb8:	8701      	strh	r1, [r0, #56]	; 0x38
 8019bba:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8019bbc:	b901      	cbnz	r1, 8019bc0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8019bbe:	86c5      	strh	r5, [r0, #54]	; 0x36
 8019bc0:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8019bc2:	3901      	subs	r1, #1
 8019bc4:	b289      	uxth	r1, r1
 8019bc6:	86c1      	strh	r1, [r0, #54]	; 0x36
 8019bc8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8019bcc:	844c      	strh	r4, [r1, #34]	; 0x22
 8019bce:	e7ec      	b.n	8019baa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8019bd0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019bd4:	f7ff bf4b 	b.w	8019a6e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08019bd8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8019bd8:	b570      	push	{r4, r5, r6, lr}
 8019bda:	2500      	movs	r5, #0
 8019bdc:	4295      	cmp	r5, r2
 8019bde:	d011      	beq.n	8019c04 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8019be0:	8bc4      	ldrh	r4, [r0, #30]
 8019be2:	f831 6b02 	ldrh.w	r6, [r1], #2
 8019be6:	4414      	add	r4, r2
 8019be8:	3c01      	subs	r4, #1
 8019bea:	1b64      	subs	r4, r4, r5
 8019bec:	b2a4      	uxth	r4, r4
 8019bee:	2c01      	cmp	r4, #1
 8019bf0:	bf88      	it	hi
 8019bf2:	3c02      	subhi	r4, #2
 8019bf4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019bf8:	8b64      	ldrh	r4, [r4, #26]
 8019bfa:	42b4      	cmp	r4, r6
 8019bfc:	d117      	bne.n	8019c2e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8019bfe:	3501      	adds	r5, #1
 8019c00:	b2ad      	uxth	r5, r5
 8019c02:	e7eb      	b.n	8019bdc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8019c04:	2400      	movs	r4, #0
 8019c06:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019c0a:	4413      	add	r3, r2
 8019c0c:	b2a2      	uxth	r2, r4
 8019c0e:	429a      	cmp	r2, r3
 8019c10:	da0f      	bge.n	8019c32 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8019c12:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8019c14:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8019c18:	4432      	add	r2, r6
 8019c1a:	b292      	uxth	r2, r2
 8019c1c:	2a09      	cmp	r2, #9
 8019c1e:	bf88      	it	hi
 8019c20:	3a0a      	subhi	r2, #10
 8019c22:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8019c26:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8019c28:	3401      	adds	r4, #1
 8019c2a:	42aa      	cmp	r2, r5
 8019c2c:	d0ee      	beq.n	8019c0c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8019c2e:	2000      	movs	r0, #0
 8019c30:	bd70      	pop	{r4, r5, r6, pc}
 8019c32:	2001      	movs	r0, #1
 8019c34:	e7fc      	b.n	8019c30 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08019c36 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8019c36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c3a:	4605      	mov	r5, r0
 8019c3c:	4616      	mov	r6, r2
 8019c3e:	1c8c      	adds	r4, r1, #2
 8019c40:	8809      	ldrh	r1, [r1, #0]
 8019c42:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019c46:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019c4a:	42b3      	cmp	r3, r6
 8019c4c:	d124      	bne.n	8019c98 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8019c4e:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019c52:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019c56:	f001 070f 	and.w	r7, r1, #15
 8019c5a:	f8cd 8000 	str.w	r8, [sp]
 8019c5e:	464b      	mov	r3, r9
 8019c60:	4652      	mov	r2, sl
 8019c62:	4621      	mov	r1, r4
 8019c64:	4628      	mov	r0, r5
 8019c66:	f7ff ffb7 	bl	8019bd8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8019c6a:	4683      	mov	fp, r0
 8019c6c:	b168      	cbz	r0, 8019c8a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8019c6e:	eb0a 0109 	add.w	r1, sl, r9
 8019c72:	4441      	add	r1, r8
 8019c74:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8019c78:	463a      	mov	r2, r7
 8019c7a:	4649      	mov	r1, r9
 8019c7c:	4628      	mov	r0, r5
 8019c7e:	f7ff ff53 	bl	8019b28 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019c82:	4658      	mov	r0, fp
 8019c84:	b003      	add	sp, #12
 8019c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c8a:	eb07 010a 	add.w	r1, r7, sl
 8019c8e:	4449      	add	r1, r9
 8019c90:	4441      	add	r1, r8
 8019c92:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019c96:	e7d2      	b.n	8019c3e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8019c98:	f04f 0b00 	mov.w	fp, #0
 8019c9c:	e7f1      	b.n	8019c82 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08019c9e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019c9e:	b570      	push	{r4, r5, r6, lr}
 8019ca0:	8810      	ldrh	r0, [r2, #0]
 8019ca2:	4298      	cmp	r0, r3
 8019ca4:	d817      	bhi.n	8019cd6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019ca6:	1e48      	subs	r0, r1, #1
 8019ca8:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8019cac:	4298      	cmp	r0, r3
 8019cae:	d312      	bcc.n	8019cd6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019cb0:	2400      	movs	r4, #0
 8019cb2:	428c      	cmp	r4, r1
 8019cb4:	d20f      	bcs.n	8019cd6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019cb6:	1860      	adds	r0, r4, r1
 8019cb8:	1040      	asrs	r0, r0, #1
 8019cba:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8019cbe:	0085      	lsls	r5, r0, #2
 8019cc0:	42b3      	cmp	r3, r6
 8019cc2:	d902      	bls.n	8019cca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019cc4:	3001      	adds	r0, #1
 8019cc6:	b284      	uxth	r4, r0
 8019cc8:	e7f3      	b.n	8019cb2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019cca:	d201      	bcs.n	8019cd0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8019ccc:	b281      	uxth	r1, r0
 8019cce:	e7f0      	b.n	8019cb2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019cd0:	442a      	add	r2, r5
 8019cd2:	8850      	ldrh	r0, [r2, #2]
 8019cd4:	bd70      	pop	{r4, r5, r6, pc}
 8019cd6:	2000      	movs	r0, #0
 8019cd8:	e7fc      	b.n	8019cd4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08019cda <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8019cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cde:	4604      	mov	r4, r0
 8019ce0:	260b      	movs	r6, #11
 8019ce2:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8019ce4:	886f      	ldrh	r7, [r5, #2]
 8019ce6:	087f      	lsrs	r7, r7, #1
 8019ce8:	3e01      	subs	r6, #1
 8019cea:	d013      	beq.n	8019d14 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019cec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019cee:	462a      	mov	r2, r5
 8019cf0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019cf4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8019cf8:	4639      	mov	r1, r7
 8019cfa:	4643      	mov	r3, r8
 8019cfc:	4620      	mov	r0, r4
 8019cfe:	f7ff ffce 	bl	8019c9e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019d02:	b138      	cbz	r0, 8019d14 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019d04:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8019d08:	4642      	mov	r2, r8
 8019d0a:	4620      	mov	r0, r4
 8019d0c:	f7ff ff93 	bl	8019c36 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019d10:	2800      	cmp	r0, #0
 8019d12:	d1e9      	bne.n	8019ce8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8019d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019d18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8019d18:	b570      	push	{r4, r5, r6, lr}
 8019d1a:	694a      	ldr	r2, [r1, #20]
 8019d1c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8019d1e:	684b      	ldr	r3, [r1, #4]
 8019d20:	1b54      	subs	r4, r2, r5
 8019d22:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8019d24:	f000 8107 	beq.w	8019f36 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 8019d28:	1b9b      	subs	r3, r3, r6
 8019d2a:	d003      	beq.n	8019d34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019d2c:	2210      	movs	r2, #16
 8019d2e:	4363      	muls	r3, r4
 8019d30:	fb93 f3f2 	sdiv	r3, r3, r2
 8019d34:	680c      	ldr	r4, [r1, #0]
 8019d36:	698a      	ldr	r2, [r1, #24]
 8019d38:	1b65      	subs	r5, r4, r5
 8019d3a:	f000 80fe 	beq.w	8019f3a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 8019d3e:	1b92      	subs	r2, r2, r6
 8019d40:	d003      	beq.n	8019d4a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019d42:	2410      	movs	r4, #16
 8019d44:	436a      	muls	r2, r5
 8019d46:	fb92 f2f4 	sdiv	r2, r2, r4
 8019d4a:	1a9b      	subs	r3, r3, r2
 8019d4c:	ee07 3a90 	vmov	s15, r3
 8019d50:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8019f78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 8019d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019d5c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019d60:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8019d64:	460a      	mov	r2, r1
 8019d66:	eeb1 6a43 	vneg.f32	s12, s6
 8019d6a:	4603      	mov	r3, r0
 8019d6c:	f100 040c 	add.w	r4, r0, #12
 8019d70:	edd2 7a02 	vldr	s15, [r2, #8]
 8019d74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019d78:	ece3 6a01 	vstmia	r3!, {s13}
 8019d7c:	edd2 7a03 	vldr	s15, [r2, #12]
 8019d80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019d84:	edc3 7a02 	vstr	s15, [r3, #8]
 8019d88:	edd2 7a04 	vldr	s15, [r2, #16]
 8019d8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019d90:	429c      	cmp	r4, r3
 8019d92:	edc3 7a05 	vstr	s15, [r3, #20]
 8019d96:	f102 0214 	add.w	r2, r2, #20
 8019d9a:	d1e9      	bne.n	8019d70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8019d9c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019d9e:	698b      	ldr	r3, [r1, #24]
 8019da0:	edd0 4a02 	vldr	s9, [r0, #8]
 8019da4:	1a9b      	subs	r3, r3, r2
 8019da6:	ee07 3a90 	vmov	s15, r3
 8019daa:	684b      	ldr	r3, [r1, #4]
 8019dac:	edd0 3a00 	vldr	s7, [r0]
 8019db0:	1a9b      	subs	r3, r3, r2
 8019db2:	edd0 6a01 	vldr	s13, [r0, #4]
 8019db6:	ee07 3a10 	vmov	s14, r3
 8019dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019dbe:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8019dc2:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019dc6:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8019dca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019dce:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8019dd2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019dd6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019dda:	ee67 7a83 	vmul.f32	s15, s15, s6
 8019dde:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8019de2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019de4:	694a      	ldr	r2, [r1, #20]
 8019de6:	ed90 5a05 	vldr	s10, [r0, #20]
 8019dea:	1b13      	subs	r3, r2, r4
 8019dec:	ee07 3a10 	vmov	s14, r3
 8019df0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019df4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019df8:	680b      	ldr	r3, [r1, #0]
 8019dfa:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8019dfe:	1b1b      	subs	r3, r3, r4
 8019e00:	ee07 3a10 	vmov	s14, r3
 8019e04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e08:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e0c:	eee6 4a87 	vfma.f32	s9, s13, s14
 8019e10:	ee64 4a86 	vmul.f32	s9, s9, s12
 8019e14:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8019e18:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019e1a:	698b      	ldr	r3, [r1, #24]
 8019e1c:	ed90 2a03 	vldr	s4, [r0, #12]
 8019e20:	1a9b      	subs	r3, r3, r2
 8019e22:	ee06 3a90 	vmov	s13, r3
 8019e26:	684b      	ldr	r3, [r1, #4]
 8019e28:	edd0 5a04 	vldr	s11, [r0, #16]
 8019e2c:	1a9b      	subs	r3, r3, r2
 8019e2e:	ee07 3a10 	vmov	s14, r3
 8019e32:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019e36:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019e3a:	ee66 6a84 	vmul.f32	s13, s13, s8
 8019e3e:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019e42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e46:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8019e4a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e4e:	eee5 6a87 	vfma.f32	s13, s11, s14
 8019e52:	ee66 6a83 	vmul.f32	s13, s13, s6
 8019e56:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8019e5a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019e5c:	694a      	ldr	r2, [r1, #20]
 8019e5e:	ed90 1a07 	vldr	s2, [r0, #28]
 8019e62:	1b13      	subs	r3, r2, r4
 8019e64:	ee07 3a10 	vmov	s14, r3
 8019e68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e6c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e70:	680b      	ldr	r3, [r1, #0]
 8019e72:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8019e76:	1b1b      	subs	r3, r3, r4
 8019e78:	ee07 3a10 	vmov	s14, r3
 8019e7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e80:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e84:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019e88:	ee25 5a06 	vmul.f32	s10, s10, s12
 8019e8c:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8019e90:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019e92:	698b      	ldr	r3, [r1, #24]
 8019e94:	edd0 5a08 	vldr	s11, [r0, #32]
 8019e98:	1a9b      	subs	r3, r3, r2
 8019e9a:	ee07 3a10 	vmov	s14, r3
 8019e9e:	684b      	ldr	r3, [r1, #4]
 8019ea0:	edd0 2a06 	vldr	s5, [r0, #24]
 8019ea4:	1a9b      	subs	r3, r3, r2
 8019ea6:	ee01 3a90 	vmov	s3, r3
 8019eaa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019eae:	ee31 1a65 	vsub.f32	s2, s2, s11
 8019eb2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019eb6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8019eba:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019ebe:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8019ec2:	ee61 1a84 	vmul.f32	s3, s3, s8
 8019ec6:	eea1 7a21 	vfma.f32	s14, s2, s3
 8019eca:	ee27 7a03 	vmul.f32	s14, s14, s6
 8019ece:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8019ed2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019ed4:	694a      	ldr	r2, [r1, #20]
 8019ed6:	1b13      	subs	r3, r2, r4
 8019ed8:	ee03 3a10 	vmov	s6, r3
 8019edc:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019ee0:	ee23 3a04 	vmul.f32	s6, s6, s8
 8019ee4:	680b      	ldr	r3, [r1, #0]
 8019ee6:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8019eea:	1b1b      	subs	r3, r3, r4
 8019eec:	ee03 3a10 	vmov	s6, r3
 8019ef0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019ef4:	ee23 4a04 	vmul.f32	s8, s6, s8
 8019ef8:	eee1 5a04 	vfma.f32	s11, s2, s8
 8019efc:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019f00:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8019f04:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8019f08:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f10:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8019f14:	dd13      	ble.n	8019f3e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8019f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019f1a:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8019f1e:	eee3 7a87 	vfma.f32	s15, s7, s14
 8019f22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f2a:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019f2c:	dd15      	ble.n	8019f5a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8019f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019f32:	6403      	str	r3, [r0, #64]	; 0x40
 8019f34:	bd70      	pop	{r4, r5, r6, pc}
 8019f36:	4623      	mov	r3, r4
 8019f38:	e6fc      	b.n	8019d34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019f3a:	462a      	mov	r2, r5
 8019f3c:	e705      	b.n	8019d4a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019f3e:	d502      	bpl.n	8019f46 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 8019f40:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019f44:	e7e9      	b.n	8019f1a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 8019f46:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8019f4a:	eea3 2a85 	vfma.f32	s4, s7, s10
 8019f4e:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8019f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f56:	dade      	bge.n	8019f16 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 8019f58:	e7f2      	b.n	8019f40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 8019f5a:	d502      	bpl.n	8019f62 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 8019f5c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019f60:	e7e7      	b.n	8019f32 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 8019f62:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8019f66:	eee3 4a86 	vfma.f32	s9, s7, s12
 8019f6a:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f72:	dadc      	bge.n	8019f2e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 8019f74:	e7f2      	b.n	8019f5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 8019f76:	bf00      	nop
 8019f78:	3d800000 	.word	0x3d800000

08019f7c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8019f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f80:	2714      	movs	r7, #20
 8019f82:	435f      	muls	r7, r3
 8019f84:	eb02 0c07 	add.w	ip, r2, r7
 8019f88:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8019f8c:	f115 0e0f 	adds.w	lr, r5, #15
 8019f90:	f100 80a2 	bmi.w	801a0d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019f94:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8019f98:	2614      	movs	r6, #20
 8019f9a:	9c08      	ldr	r4, [sp, #32]
 8019f9c:	f8c0 e014 	str.w	lr, [r0, #20]
 8019fa0:	4366      	muls	r6, r4
 8019fa2:	eb02 0806 	add.w	r8, r2, r6
 8019fa6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019faa:	f115 040f 	adds.w	r4, r5, #15
 8019fae:	f100 809f 	bmi.w	801a0f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8019fb2:	1124      	asrs	r4, r4, #4
 8019fb4:	eba4 040e 	sub.w	r4, r4, lr
 8019fb8:	6184      	str	r4, [r0, #24]
 8019fba:	2c00      	cmp	r4, #0
 8019fbc:	f000 808a 	beq.w	801a0d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8019fc0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8019fc4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019fc8:	5995      	ldr	r5, [r2, r6]
 8019fca:	eba4 0809 	sub.w	r8, r4, r9
 8019fce:	59d4      	ldr	r4, [r2, r7]
 8019fd0:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8019fd4:	eba5 0a04 	sub.w	sl, r5, r4
 8019fd8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8019fdc:	fb0e fe05 	mul.w	lr, lr, r5
 8019fe0:	fb0a ee19 	mls	lr, sl, r9, lr
 8019fe4:	fb08 e404 	mla	r4, r8, r4, lr
 8019fe8:	3c01      	subs	r4, #1
 8019fea:	19a4      	adds	r4, r4, r6
 8019fec:	f100 808c 	bmi.w	801a108 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8019ff0:	fb94 fef6 	sdiv	lr, r4, r6
 8019ff4:	fb06 441e 	mls	r4, r6, lr, r4
 8019ff8:	f8c0 e000 	str.w	lr, [r0]
 8019ffc:	6104      	str	r4, [r0, #16]
 8019ffe:	2d00      	cmp	r5, #0
 801a000:	f2c0 8095 	blt.w	801a12e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801a004:	fb95 f4f6 	sdiv	r4, r5, r6
 801a008:	fb06 5514 	mls	r5, r6, r4, r5
 801a00c:	6044      	str	r4, [r0, #4]
 801a00e:	6085      	str	r5, [r0, #8]
 801a010:	60c6      	str	r6, [r0, #12]
 801a012:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801a016:	6945      	ldr	r5, [r0, #20]
 801a018:	59d2      	ldr	r2, [r2, r7]
 801a01a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801a01e:	ee07 4a10 	vmov	s14, r4
 801a022:	6804      	ldr	r4, [r0, #0]
 801a024:	eddf 6a4a 	vldr	s13, [pc, #296]	; 801a150 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801a028:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801a02c:	ee07 2a90 	vmov	s15, r2
 801a030:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a038:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a03c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a040:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a044:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a048:	edd3 6a00 	vldr	s13, [r3]
 801a04c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801a050:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801a054:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a058:	edc0 6a07 	vstr	s13, [r0, #28]
 801a05c:	edd0 6a01 	vldr	s13, [r0, #4]
 801a060:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801a064:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a068:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a06c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a070:	ed80 6a08 	vstr	s12, [r0, #32]
 801a074:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801a076:	6242      	str	r2, [r0, #36]	; 0x24
 801a078:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801a07c:	ed93 6a03 	vldr	s12, [r3, #12]
 801a080:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a084:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a088:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801a08c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801a090:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a094:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801a098:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a09c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801a0a0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a0a2:	6302      	str	r2, [r0, #48]	; 0x30
 801a0a4:	ed93 6a06 	vldr	s12, [r3, #24]
 801a0a8:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801a0ac:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a0b0:	eeb0 7a46 	vmov.f32	s14, s12
 801a0b4:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801a0b8:	eea6 7a27 	vfma.f32	s14, s12, s15
 801a0bc:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a0c0:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801a0c4:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801a0c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a0cc:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801a0d0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801a0d2:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0d8:	2410      	movs	r4, #16
 801a0da:	f1c5 0501 	rsb	r5, r5, #1
 801a0de:	f015 050f 	ands.w	r5, r5, #15
 801a0e2:	fb9e fef4 	sdiv	lr, lr, r4
 801a0e6:	bf18      	it	ne
 801a0e8:	2501      	movne	r5, #1
 801a0ea:	ebae 0e05 	sub.w	lr, lr, r5
 801a0ee:	e753      	b.n	8019f98 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801a0f0:	f04f 0910 	mov.w	r9, #16
 801a0f4:	f1c5 0501 	rsb	r5, r5, #1
 801a0f8:	f015 050f 	ands.w	r5, r5, #15
 801a0fc:	fb94 f4f9 	sdiv	r4, r4, r9
 801a100:	bf18      	it	ne
 801a102:	2501      	movne	r5, #1
 801a104:	1b64      	subs	r4, r4, r5
 801a106:	e755      	b.n	8019fb4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801a108:	4264      	negs	r4, r4
 801a10a:	fb94 fef6 	sdiv	lr, r4, r6
 801a10e:	fb06 441e 	mls	r4, r6, lr, r4
 801a112:	f1ce 0800 	rsb	r8, lr, #0
 801a116:	f8c0 8000 	str.w	r8, [r0]
 801a11a:	6104      	str	r4, [r0, #16]
 801a11c:	2c00      	cmp	r4, #0
 801a11e:	f43f af6e 	beq.w	8019ffe <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801a122:	ea6f 0e0e 	mvn.w	lr, lr
 801a126:	1b34      	subs	r4, r6, r4
 801a128:	f8c0 e000 	str.w	lr, [r0]
 801a12c:	e766      	b.n	8019ffc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801a12e:	426d      	negs	r5, r5
 801a130:	fb95 f4f6 	sdiv	r4, r5, r6
 801a134:	fb06 5514 	mls	r5, r6, r4, r5
 801a138:	f1c4 0e00 	rsb	lr, r4, #0
 801a13c:	f8c0 e004 	str.w	lr, [r0, #4]
 801a140:	6085      	str	r5, [r0, #8]
 801a142:	2d00      	cmp	r5, #0
 801a144:	f43f af64 	beq.w	801a010 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801a148:	43e4      	mvns	r4, r4
 801a14a:	1b75      	subs	r5, r6, r5
 801a14c:	6044      	str	r4, [r0, #4]
 801a14e:	e75e      	b.n	801a00e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801a150:	3d800000 	.word	0x3d800000

0801a154 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801a154:	4b01      	ldr	r3, [pc, #4]	; (801a15c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801a156:	6018      	str	r0, [r3, #0]
 801a158:	4770      	bx	lr
 801a15a:	bf00      	nop
 801a15c:	201981b8 	.word	0x201981b8

0801a160 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801a160:	4b06      	ldr	r3, [pc, #24]	; (801a17c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801a162:	881a      	ldrh	r2, [r3, #0]
 801a164:	4282      	cmp	r2, r0
 801a166:	d807      	bhi.n	801a178 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801a168:	4b05      	ldr	r3, [pc, #20]	; (801a180 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801a16a:	881b      	ldrh	r3, [r3, #0]
 801a16c:	4413      	add	r3, r2
 801a16e:	4298      	cmp	r0, r3
 801a170:	bfac      	ite	ge
 801a172:	2000      	movge	r0, #0
 801a174:	2001      	movlt	r0, #1
 801a176:	4770      	bx	lr
 801a178:	2000      	movs	r0, #0
 801a17a:	4770      	bx	lr
 801a17c:	201981d8 	.word	0x201981d8
 801a180:	201981dc 	.word	0x201981dc

0801a184 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801a184:	b508      	push	{r3, lr}
 801a186:	4601      	mov	r1, r0
 801a188:	f7ff ffea 	bl	801a160 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a18c:	b118      	cbz	r0, 801a196 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801a18e:	4b02      	ldr	r3, [pc, #8]	; (801a198 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801a196:	bd08      	pop	{r3, pc}
 801a198:	201981bc 	.word	0x201981bc

0801a19c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801a19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a19e:	4c24      	ldr	r4, [pc, #144]	; (801a230 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801a1a0:	6823      	ldr	r3, [r4, #0]
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d042      	beq.n	801a22c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a1a6:	4a23      	ldr	r2, [pc, #140]	; (801a234 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801a1a8:	4d23      	ldr	r5, [pc, #140]	; (801a238 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801a1aa:	8811      	ldrh	r1, [r2, #0]
 801a1ac:	f8b5 c000 	ldrh.w	ip, [r5]
 801a1b0:	4822      	ldr	r0, [pc, #136]	; (801a23c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801a1b2:	4461      	add	r1, ip
 801a1b4:	1c4a      	adds	r2, r1, #1
 801a1b6:	f022 0201 	bic.w	r2, r2, #1
 801a1ba:	008f      	lsls	r7, r1, #2
 801a1bc:	0412      	lsls	r2, r2, #16
 801a1be:	19de      	adds	r6, r3, r7
 801a1c0:	0c12      	lsrs	r2, r2, #16
 801a1c2:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801a1c6:	6006      	str	r6, [r0, #0]
 801a1c8:	4e1d      	ldr	r6, [pc, #116]	; (801a240 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801a1ca:	19da      	adds	r2, r3, r7
 801a1cc:	6032      	str	r2, [r6, #0]
 801a1ce:	220e      	movs	r2, #14
 801a1d0:	fb02 f20c 	mul.w	r2, r2, ip
 801a1d4:	3203      	adds	r2, #3
 801a1d6:	f022 0203 	bic.w	r2, r2, #3
 801a1da:	443a      	add	r2, r7
 801a1dc:	4f19      	ldr	r7, [pc, #100]	; (801a244 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801a1de:	4413      	add	r3, r2
 801a1e0:	603b      	str	r3, [r7, #0]
 801a1e2:	2300      	movs	r3, #0
 801a1e4:	4f18      	ldr	r7, [pc, #96]	; (801a248 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801a1e6:	469c      	mov	ip, r3
 801a1e8:	803b      	strh	r3, [r7, #0]
 801a1ea:	4f18      	ldr	r7, [pc, #96]	; (801a24c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801a1ec:	683f      	ldr	r7, [r7, #0]
 801a1ee:	1aba      	subs	r2, r7, r2
 801a1f0:	4f17      	ldr	r7, [pc, #92]	; (801a250 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801a1f2:	603a      	str	r2, [r7, #0]
 801a1f4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801a1f8:	4a16      	ldr	r2, [pc, #88]	; (801a254 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801a1fa:	8013      	strh	r3, [r2, #0]
 801a1fc:	428b      	cmp	r3, r1
 801a1fe:	d10d      	bne.n	801a21c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801a200:	2300      	movs	r3, #0
 801a202:	240e      	movs	r4, #14
 801a204:	882d      	ldrh	r5, [r5, #0]
 801a206:	6830      	ldr	r0, [r6, #0]
 801a208:	429d      	cmp	r5, r3
 801a20a:	d90f      	bls.n	801a22c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a20c:	fb04 0203 	mla	r2, r4, r3, r0
 801a210:	7b11      	ldrb	r1, [r2, #12]
 801a212:	3301      	adds	r3, #1
 801a214:	f36f 1145 	bfc	r1, #5, #1
 801a218:	7311      	strb	r1, [r2, #12]
 801a21a:	e7f5      	b.n	801a208 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801a21c:	6822      	ldr	r2, [r4, #0]
 801a21e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801a222:	6802      	ldr	r2, [r0, #0]
 801a224:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801a228:	3301      	adds	r3, #1
 801a22a:	e7e7      	b.n	801a1fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801a22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a22e:	bf00      	nop
 801a230:	201981bc 	.word	0x201981bc
 801a234:	201981d8 	.word	0x201981d8
 801a238:	201981dc 	.word	0x201981dc
 801a23c:	201981d0 	.word	0x201981d0
 801a240:	201981c0 	.word	0x201981c0
 801a244:	201981c8 	.word	0x201981c8
 801a248:	201981da 	.word	0x201981da
 801a24c:	201981c4 	.word	0x201981c4
 801a250:	201981d4 	.word	0x201981d4
 801a254:	201981cc 	.word	0x201981cc

0801a258 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801a258:	4b06      	ldr	r3, [pc, #24]	; (801a274 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	b943      	cbnz	r3, 801a270 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a25e:	b139      	cbz	r1, 801a270 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a260:	4b05      	ldr	r3, [pc, #20]	; (801a278 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801a262:	801a      	strh	r2, [r3, #0]
 801a264:	4b05      	ldr	r3, [pc, #20]	; (801a27c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801a266:	6019      	str	r1, [r3, #0]
 801a268:	4b05      	ldr	r3, [pc, #20]	; (801a280 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801a26a:	6018      	str	r0, [r3, #0]
 801a26c:	f7ff bf96 	b.w	801a19c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801a270:	4770      	bx	lr
 801a272:	bf00      	nop
 801a274:	201981c8 	.word	0x201981c8
 801a278:	201981dc 	.word	0x201981dc
 801a27c:	201981c4 	.word	0x201981c4
 801a280:	201981bc 	.word	0x201981bc

0801a284 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801a284:	b470      	push	{r4, r5, r6}
 801a286:	4c07      	ldr	r4, [pc, #28]	; (801a2a4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801a288:	4605      	mov	r5, r0
 801a28a:	6826      	ldr	r6, [r4, #0]
 801a28c:	4610      	mov	r0, r2
 801a28e:	9a03      	ldr	r2, [sp, #12]
 801a290:	b936      	cbnz	r6, 801a2a0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801a292:	6025      	str	r5, [r4, #0]
 801a294:	4c04      	ldr	r4, [pc, #16]	; (801a2a8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801a296:	8021      	strh	r1, [r4, #0]
 801a298:	bc70      	pop	{r4, r5, r6}
 801a29a:	4619      	mov	r1, r3
 801a29c:	f7ff bfdc 	b.w	801a258 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801a2a0:	bc70      	pop	{r4, r5, r6}
 801a2a2:	4770      	bx	lr
 801a2a4:	201981e0 	.word	0x201981e0
 801a2a8:	201981d8 	.word	0x201981d8

0801a2ac <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801a2ac:	4a12      	ldr	r2, [pc, #72]	; (801a2f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801a2ae:	8803      	ldrh	r3, [r0, #0]
 801a2b0:	8812      	ldrh	r2, [r2, #0]
 801a2b2:	4293      	cmp	r3, r2
 801a2b4:	d207      	bcs.n	801a2c6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801a2b6:	2114      	movs	r1, #20
 801a2b8:	4a10      	ldr	r2, [pc, #64]	; (801a2fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801a2ba:	6812      	ldr	r2, [r2, #0]
 801a2bc:	fb01 2303 	mla	r3, r1, r3, r2
 801a2c0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801a2c4:	4770      	bx	lr
 801a2c6:	490e      	ldr	r1, [pc, #56]	; (801a300 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801a2c8:	8809      	ldrh	r1, [r1, #0]
 801a2ca:	4411      	add	r1, r2
 801a2cc:	428b      	cmp	r3, r1
 801a2ce:	da04      	bge.n	801a2da <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801a2d0:	1a9b      	subs	r3, r3, r2
 801a2d2:	4a0c      	ldr	r2, [pc, #48]	; (801a304 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801a2d4:	210e      	movs	r1, #14
 801a2d6:	6812      	ldr	r2, [r2, #0]
 801a2d8:	e7f0      	b.n	801a2bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801a2da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a2de:	4293      	cmp	r3, r2
 801a2e0:	d108      	bne.n	801a2f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801a2e2:	4b09      	ldr	r3, [pc, #36]	; (801a308 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801a2e4:	781b      	ldrb	r3, [r3, #0]
 801a2e6:	b91b      	cbnz	r3, 801a2f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801a2e8:	4b08      	ldr	r3, [pc, #32]	; (801a30c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801a2ea:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a2ee:	4770      	bx	lr
 801a2f0:	4b07      	ldr	r3, [pc, #28]	; (801a310 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801a2f2:	e7fa      	b.n	801a2ea <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801a2f4:	2000      	movs	r0, #0
 801a2f6:	4770      	bx	lr
 801a2f8:	201981d8 	.word	0x201981d8
 801a2fc:	201981e0 	.word	0x201981e0
 801a300:	201981dc 	.word	0x201981dc
 801a304:	201981c0 	.word	0x201981c0
 801a308:	20198150 	.word	0x20198150
 801a30c:	20198152 	.word	0x20198152
 801a310:	20198154 	.word	0x20198154

0801a314 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801a314:	4a12      	ldr	r2, [pc, #72]	; (801a360 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801a316:	8803      	ldrh	r3, [r0, #0]
 801a318:	8812      	ldrh	r2, [r2, #0]
 801a31a:	4293      	cmp	r3, r2
 801a31c:	d207      	bcs.n	801a32e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801a31e:	2114      	movs	r1, #20
 801a320:	4a10      	ldr	r2, [pc, #64]	; (801a364 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801a322:	6812      	ldr	r2, [r2, #0]
 801a324:	fb01 2303 	mla	r3, r1, r3, r2
 801a328:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801a32c:	4770      	bx	lr
 801a32e:	490e      	ldr	r1, [pc, #56]	; (801a368 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801a330:	8809      	ldrh	r1, [r1, #0]
 801a332:	4411      	add	r1, r2
 801a334:	428b      	cmp	r3, r1
 801a336:	da04      	bge.n	801a342 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801a338:	1a9b      	subs	r3, r3, r2
 801a33a:	4a0c      	ldr	r2, [pc, #48]	; (801a36c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801a33c:	210e      	movs	r1, #14
 801a33e:	6812      	ldr	r2, [r2, #0]
 801a340:	e7f0      	b.n	801a324 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801a342:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a346:	4293      	cmp	r3, r2
 801a348:	d108      	bne.n	801a35c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801a34a:	4b09      	ldr	r3, [pc, #36]	; (801a370 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801a34c:	781b      	ldrb	r3, [r3, #0]
 801a34e:	b91b      	cbnz	r3, 801a358 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801a350:	4b08      	ldr	r3, [pc, #32]	; (801a374 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801a352:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a356:	4770      	bx	lr
 801a358:	4b07      	ldr	r3, [pc, #28]	; (801a378 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801a35a:	e7fa      	b.n	801a352 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801a35c:	2000      	movs	r0, #0
 801a35e:	4770      	bx	lr
 801a360:	201981d8 	.word	0x201981d8
 801a364:	201981e0 	.word	0x201981e0
 801a368:	201981dc 	.word	0x201981dc
 801a36c:	201981c0 	.word	0x201981c0
 801a370:	20198150 	.word	0x20198150
 801a374:	20198154 	.word	0x20198154
 801a378:	20198152 	.word	0x20198152

0801a37c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801a37c:	4a12      	ldr	r2, [pc, #72]	; (801a3c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801a37e:	8803      	ldrh	r3, [r0, #0]
 801a380:	8811      	ldrh	r1, [r2, #0]
 801a382:	428b      	cmp	r3, r1
 801a384:	d20b      	bcs.n	801a39e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801a386:	4a11      	ldr	r2, [pc, #68]	; (801a3cc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a388:	6812      	ldr	r2, [r2, #0]
 801a38a:	b112      	cbz	r2, 801a392 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801a38c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a390:	b9c0      	cbnz	r0, 801a3c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801a392:	4a0f      	ldr	r2, [pc, #60]	; (801a3d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801a394:	6811      	ldr	r1, [r2, #0]
 801a396:	2214      	movs	r2, #20
 801a398:	4353      	muls	r3, r2
 801a39a:	58c8      	ldr	r0, [r1, r3]
 801a39c:	4770      	bx	lr
 801a39e:	4a0d      	ldr	r2, [pc, #52]	; (801a3d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801a3a0:	8812      	ldrh	r2, [r2, #0]
 801a3a2:	440a      	add	r2, r1
 801a3a4:	4293      	cmp	r3, r2
 801a3a6:	da04      	bge.n	801a3b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801a3a8:	4a08      	ldr	r2, [pc, #32]	; (801a3cc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a3aa:	6812      	ldr	r2, [r2, #0]
 801a3ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a3b0:	4770      	bx	lr
 801a3b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a3b6:	4293      	cmp	r3, r2
 801a3b8:	d103      	bne.n	801a3c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801a3ba:	4b07      	ldr	r3, [pc, #28]	; (801a3d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801a3c0:	4770      	bx	lr
 801a3c2:	2000      	movs	r0, #0
 801a3c4:	4770      	bx	lr
 801a3c6:	bf00      	nop
 801a3c8:	201981d8 	.word	0x201981d8
 801a3cc:	201981bc 	.word	0x201981bc
 801a3d0:	201981e0 	.word	0x201981e0
 801a3d4:	201981dc 	.word	0x201981dc
 801a3d8:	20198158 	.word	0x20198158

0801a3dc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801a3dc:	4b24      	ldr	r3, [pc, #144]	; (801a470 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801a3de:	8802      	ldrh	r2, [r0, #0]
 801a3e0:	8818      	ldrh	r0, [r3, #0]
 801a3e2:	4282      	cmp	r2, r0
 801a3e4:	d221      	bcs.n	801a42a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801a3e6:	4b23      	ldr	r3, [pc, #140]	; (801a474 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801a3e8:	6819      	ldr	r1, [r3, #0]
 801a3ea:	2314      	movs	r3, #20
 801a3ec:	fb03 1302 	mla	r3, r3, r2, r1
 801a3f0:	6858      	ldr	r0, [r3, #4]
 801a3f2:	2800      	cmp	r0, #0
 801a3f4:	d03a      	beq.n	801a46c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a3f6:	4920      	ldr	r1, [pc, #128]	; (801a478 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a3f8:	6809      	ldr	r1, [r1, #0]
 801a3fa:	2900      	cmp	r1, #0
 801a3fc:	d036      	beq.n	801a46c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a3fe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a402:	2900      	cmp	r1, #0
 801a404:	d032      	beq.n	801a46c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a406:	891a      	ldrh	r2, [r3, #8]
 801a408:	8958      	ldrh	r0, [r3, #10]
 801a40a:	4350      	muls	r0, r2
 801a40c:	7c5a      	ldrb	r2, [r3, #17]
 801a40e:	7cdb      	ldrb	r3, [r3, #19]
 801a410:	0952      	lsrs	r2, r2, #5
 801a412:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801a416:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801a41a:	2b0b      	cmp	r3, #11
 801a41c:	bf18      	it	ne
 801a41e:	0040      	lslne	r0, r0, #1
 801a420:	3003      	adds	r0, #3
 801a422:	f020 0003 	bic.w	r0, r0, #3
 801a426:	4408      	add	r0, r1
 801a428:	4770      	bx	lr
 801a42a:	4b14      	ldr	r3, [pc, #80]	; (801a47c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801a42c:	881b      	ldrh	r3, [r3, #0]
 801a42e:	4403      	add	r3, r0
 801a430:	429a      	cmp	r2, r3
 801a432:	da1a      	bge.n	801a46a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a434:	210e      	movs	r1, #14
 801a436:	4b12      	ldr	r3, [pc, #72]	; (801a480 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801a438:	1a10      	subs	r0, r2, r0
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	fb01 3000 	mla	r0, r1, r0, r3
 801a440:	7b03      	ldrb	r3, [r0, #12]
 801a442:	f003 031f 	and.w	r3, r3, #31
 801a446:	2b0b      	cmp	r3, #11
 801a448:	d10b      	bne.n	801a462 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801a44a:	8903      	ldrh	r3, [r0, #8]
 801a44c:	8940      	ldrh	r0, [r0, #10]
 801a44e:	4358      	muls	r0, r3
 801a450:	4b09      	ldr	r3, [pc, #36]	; (801a478 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a452:	3003      	adds	r0, #3
 801a454:	6819      	ldr	r1, [r3, #0]
 801a456:	f020 0303 	bic.w	r3, r0, #3
 801a45a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801a45e:	4418      	add	r0, r3
 801a460:	4770      	bx	lr
 801a462:	2b0d      	cmp	r3, #13
 801a464:	d101      	bne.n	801a46a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a466:	300d      	adds	r0, #13
 801a468:	4770      	bx	lr
 801a46a:	2000      	movs	r0, #0
 801a46c:	4770      	bx	lr
 801a46e:	bf00      	nop
 801a470:	201981d8 	.word	0x201981d8
 801a474:	201981e0 	.word	0x201981e0
 801a478:	201981bc 	.word	0x201981bc
 801a47c:	201981dc 	.word	0x201981dc
 801a480:	201981c0 	.word	0x201981c0

0801a484 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801a484:	b510      	push	{r4, lr}
 801a486:	4a17      	ldr	r2, [pc, #92]	; (801a4e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801a488:	8803      	ldrh	r3, [r0, #0]
 801a48a:	8812      	ldrh	r2, [r2, #0]
 801a48c:	4293      	cmp	r3, r2
 801a48e:	d20c      	bcs.n	801a4aa <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801a490:	2114      	movs	r1, #20
 801a492:	4a15      	ldr	r2, [pc, #84]	; (801a4e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801a494:	6812      	ldr	r2, [r2, #0]
 801a496:	fb01 2303 	mla	r3, r1, r3, r2
 801a49a:	7c58      	ldrb	r0, [r3, #17]
 801a49c:	0942      	lsrs	r2, r0, #5
 801a49e:	7cd8      	ldrb	r0, [r3, #19]
 801a4a0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801a4a4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801a4a8:	bd10      	pop	{r4, pc}
 801a4aa:	4910      	ldr	r1, [pc, #64]	; (801a4ec <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801a4ac:	8809      	ldrh	r1, [r1, #0]
 801a4ae:	4411      	add	r1, r2
 801a4b0:	428b      	cmp	r3, r1
 801a4b2:	da09      	bge.n	801a4c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801a4b4:	210e      	movs	r1, #14
 801a4b6:	1a9b      	subs	r3, r3, r2
 801a4b8:	4a0d      	ldr	r2, [pc, #52]	; (801a4f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801a4ba:	6812      	ldr	r2, [r2, #0]
 801a4bc:	fb01 2303 	mla	r3, r1, r3, r2
 801a4c0:	7b18      	ldrb	r0, [r3, #12]
 801a4c2:	f000 001f 	and.w	r0, r0, #31
 801a4c6:	e7ef      	b.n	801a4a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801a4c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a4cc:	4293      	cmp	r3, r2
 801a4ce:	d106      	bne.n	801a4de <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801a4d0:	f7fb fd0a 	bl	8015ee8 <_ZN8touchgfx3HAL3lcdEv>
 801a4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4d8:	6803      	ldr	r3, [r0, #0]
 801a4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4dc:	4718      	bx	r3
 801a4de:	2000      	movs	r0, #0
 801a4e0:	e7e2      	b.n	801a4a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801a4e2:	bf00      	nop
 801a4e4:	201981d8 	.word	0x201981d8
 801a4e8:	201981e0 	.word	0x201981e0
 801a4ec:	201981dc 	.word	0x201981dc
 801a4f0:	201981c0 	.word	0x201981c0

0801a4f4 <CRC_Lock>:
 801a4f4:	b530      	push	{r4, r5, lr}
 801a4f6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801a4fa:	f24c 2540 	movw	r5, #49728	; 0xc240
 801a4fe:	4a1e      	ldr	r2, [pc, #120]	; (801a578 <CRC_Lock+0x84>)
 801a500:	6813      	ldr	r3, [r2, #0]
 801a502:	f023 0301 	bic.w	r3, r3, #1
 801a506:	6013      	str	r3, [r2, #0]
 801a508:	4b1c      	ldr	r3, [pc, #112]	; (801a57c <CRC_Lock+0x88>)
 801a50a:	681a      	ldr	r2, [r3, #0]
 801a50c:	4022      	ands	r2, r4
 801a50e:	42aa      	cmp	r2, r5
 801a510:	d005      	beq.n	801a51e <CRC_Lock+0x2a>
 801a512:	f24c 2270 	movw	r2, #49776	; 0xc270
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	4023      	ands	r3, r4
 801a51a:	4293      	cmp	r3, r2
 801a51c:	d124      	bne.n	801a568 <CRC_Lock+0x74>
 801a51e:	4b18      	ldr	r3, [pc, #96]	; (801a580 <CRC_Lock+0x8c>)
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	bb0b      	cbnz	r3, 801a568 <CRC_Lock+0x74>
 801a524:	4b17      	ldr	r3, [pc, #92]	; (801a584 <CRC_Lock+0x90>)
 801a526:	681a      	ldr	r2, [r3, #0]
 801a528:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801a52c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801a530:	d00d      	beq.n	801a54e <CRC_Lock+0x5a>
 801a532:	f240 4483 	movw	r4, #1155	; 0x483
 801a536:	681a      	ldr	r2, [r3, #0]
 801a538:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801a53c:	42a2      	cmp	r2, r4
 801a53e:	d006      	beq.n	801a54e <CRC_Lock+0x5a>
 801a540:	f240 4285 	movw	r2, #1157	; 0x485
 801a544:	681b      	ldr	r3, [r3, #0]
 801a546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a54a:	4293      	cmp	r3, r2
 801a54c:	d10c      	bne.n	801a568 <CRC_Lock+0x74>
 801a54e:	2201      	movs	r2, #1
 801a550:	4b0d      	ldr	r3, [pc, #52]	; (801a588 <CRC_Lock+0x94>)
 801a552:	601a      	str	r2, [r3, #0]
 801a554:	681a      	ldr	r2, [r3, #0]
 801a556:	2a00      	cmp	r2, #0
 801a558:	d1fc      	bne.n	801a554 <CRC_Lock+0x60>
 801a55a:	4b0c      	ldr	r3, [pc, #48]	; (801a58c <CRC_Lock+0x98>)
 801a55c:	6018      	str	r0, [r3, #0]
 801a55e:	6818      	ldr	r0, [r3, #0]
 801a560:	1a43      	subs	r3, r0, r1
 801a562:	4258      	negs	r0, r3
 801a564:	4158      	adcs	r0, r3
 801a566:	bd30      	pop	{r4, r5, pc}
 801a568:	2201      	movs	r2, #1
 801a56a:	4b09      	ldr	r3, [pc, #36]	; (801a590 <CRC_Lock+0x9c>)
 801a56c:	601a      	str	r2, [r3, #0]
 801a56e:	681a      	ldr	r2, [r3, #0]
 801a570:	2a00      	cmp	r2, #0
 801a572:	d1fc      	bne.n	801a56e <CRC_Lock+0x7a>
 801a574:	4b07      	ldr	r3, [pc, #28]	; (801a594 <CRC_Lock+0xa0>)
 801a576:	e7f1      	b.n	801a55c <CRC_Lock+0x68>
 801a578:	e0002000 	.word	0xe0002000
 801a57c:	e000ed00 	.word	0xe000ed00
 801a580:	e0042000 	.word	0xe0042000
 801a584:	5c001000 	.word	0x5c001000
 801a588:	58024c08 	.word	0x58024c08
 801a58c:	58024c00 	.word	0x58024c00
 801a590:	40023008 	.word	0x40023008
 801a594:	40023000 	.word	0x40023000

0801a598 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801a598:	6101      	str	r1, [r0, #16]
 801a59a:	4770      	bx	lr

0801a59c <_ZN8touchgfx8Gestures4tickEv>:
 801a59c:	7b83      	ldrb	r3, [r0, #14]
 801a59e:	b14b      	cbz	r3, 801a5b4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801a5a0:	8903      	ldrh	r3, [r0, #8]
 801a5a2:	3301      	adds	r3, #1
 801a5a4:	b29b      	uxth	r3, r3
 801a5a6:	2b07      	cmp	r3, #7
 801a5a8:	8103      	strh	r3, [r0, #8]
 801a5aa:	bf81      	itttt	hi
 801a5ac:	2300      	movhi	r3, #0
 801a5ae:	8143      	strhhi	r3, [r0, #10]
 801a5b0:	8183      	strhhi	r3, [r0, #12]
 801a5b2:	7383      	strbhi	r3, [r0, #14]
 801a5b4:	4770      	bx	lr
	...

0801a5b8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801a5b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a5bc:	4698      	mov	r8, r3
 801a5be:	4604      	mov	r4, r0
 801a5c0:	8883      	ldrh	r3, [r0, #4]
 801a5c2:	460e      	mov	r6, r1
 801a5c4:	88c1      	ldrh	r1, [r0, #6]
 801a5c6:	2000      	movs	r0, #0
 801a5c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a5cc:	eba8 0303 	sub.w	r3, r8, r3
 801a5d0:	b21b      	sxth	r3, r3
 801a5d2:	4617      	mov	r7, r2
 801a5d4:	4a17      	ldr	r2, [pc, #92]	; (801a634 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	bfb8      	it	lt
 801a5da:	425b      	neglt	r3, r3
 801a5dc:	9200      	str	r2, [sp, #0]
 801a5de:	8aa2      	ldrh	r2, [r4, #20]
 801a5e0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801a5e4:	b21b      	sxth	r3, r3
 801a5e6:	4293      	cmp	r3, r2
 801a5e8:	f88d 0004 	strb.w	r0, [sp, #4]
 801a5ec:	f8ad 1008 	strh.w	r1, [sp, #8]
 801a5f0:	f8ad 800a 	strh.w	r8, [sp, #10]
 801a5f4:	f8ad 500c 	strh.w	r5, [sp, #12]
 801a5f8:	dc07      	bgt.n	801a60a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801a5fa:	1a69      	subs	r1, r5, r1
 801a5fc:	b209      	sxth	r1, r1
 801a5fe:	2900      	cmp	r1, #0
 801a600:	bfb8      	it	lt
 801a602:	4249      	neglt	r1, r1
 801a604:	b209      	sxth	r1, r1
 801a606:	428a      	cmp	r2, r1
 801a608:	da10      	bge.n	801a62c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801a60a:	6920      	ldr	r0, [r4, #16]
 801a60c:	4669      	mov	r1, sp
 801a60e:	6803      	ldr	r3, [r0, #0]
 801a610:	eba8 0606 	sub.w	r6, r8, r6
 801a614:	685b      	ldr	r3, [r3, #4]
 801a616:	4798      	blx	r3
 801a618:	2300      	movs	r3, #0
 801a61a:	2001      	movs	r0, #1
 801a61c:	1bef      	subs	r7, r5, r7
 801a61e:	8123      	strh	r3, [r4, #8]
 801a620:	8166      	strh	r6, [r4, #10]
 801a622:	81a7      	strh	r7, [r4, #12]
 801a624:	f8a4 8004 	strh.w	r8, [r4, #4]
 801a628:	80e5      	strh	r5, [r4, #6]
 801a62a:	73a0      	strb	r0, [r4, #14]
 801a62c:	b004      	add	sp, #16
 801a62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a632:	bf00      	nop
 801a634:	0802aae0 	.word	0x0802aae0

0801a638 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801a638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a63a:	461e      	mov	r6, r3
 801a63c:	1e4b      	subs	r3, r1, #1
 801a63e:	2b01      	cmp	r3, #1
 801a640:	b085      	sub	sp, #20
 801a642:	4604      	mov	r4, r0
 801a644:	460d      	mov	r5, r1
 801a646:	4617      	mov	r7, r2
 801a648:	d84b      	bhi.n	801a6e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801a64a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a64e:	1cd3      	adds	r3, r2, #3
 801a650:	b29b      	uxth	r3, r3
 801a652:	2b06      	cmp	r3, #6
 801a654:	d916      	bls.n	801a684 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801a656:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801a6f8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801a65a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a65e:	f8cd c004 	str.w	ip, [sp, #4]
 801a662:	f04f 0c00 	mov.w	ip, #0
 801a666:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a66a:	6900      	ldr	r0, [r0, #16]
 801a66c:	f8ad 100c 	strh.w	r1, [sp, #12]
 801a670:	f88d c008 	strb.w	ip, [sp, #8]
 801a674:	f8ad 200a 	strh.w	r2, [sp, #10]
 801a678:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a67c:	6803      	ldr	r3, [r0, #0]
 801a67e:	a901      	add	r1, sp, #4
 801a680:	689b      	ldr	r3, [r3, #8]
 801a682:	4798      	blx	r3
 801a684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a688:	1cd3      	adds	r3, r2, #3
 801a68a:	b29b      	uxth	r3, r3
 801a68c:	2b06      	cmp	r3, #6
 801a68e:	d916      	bls.n	801a6be <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801a690:	f8df c064 	ldr.w	ip, [pc, #100]	; 801a6f8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801a694:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a698:	f8cd c004 	str.w	ip, [sp, #4]
 801a69c:	f04f 0c01 	mov.w	ip, #1
 801a6a0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a6a4:	6920      	ldr	r0, [r4, #16]
 801a6a6:	f8ad 100c 	strh.w	r1, [sp, #12]
 801a6aa:	f88d c008 	strb.w	ip, [sp, #8]
 801a6ae:	f8ad 200a 	strh.w	r2, [sp, #10]
 801a6b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a6b6:	6803      	ldr	r3, [r0, #0]
 801a6b8:	a901      	add	r1, sp, #4
 801a6ba:	689b      	ldr	r3, [r3, #8]
 801a6bc:	4798      	blx	r3
 801a6be:	4b0d      	ldr	r3, [pc, #52]	; (801a6f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801a6c0:	6920      	ldr	r0, [r4, #16]
 801a6c2:	9301      	str	r3, [sp, #4]
 801a6c4:	2300      	movs	r3, #0
 801a6c6:	f88d 5008 	strb.w	r5, [sp, #8]
 801a6ca:	f8ad 700a 	strh.w	r7, [sp, #10]
 801a6ce:	f8ad 600c 	strh.w	r6, [sp, #12]
 801a6d2:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a6d6:	6803      	ldr	r3, [r0, #0]
 801a6d8:	a901      	add	r1, sp, #4
 801a6da:	681b      	ldr	r3, [r3, #0]
 801a6dc:	4798      	blx	r3
 801a6de:	b005      	add	sp, #20
 801a6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6e2:	2900      	cmp	r1, #0
 801a6e4:	d1eb      	bne.n	801a6be <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801a6e6:	80a2      	strh	r2, [r4, #4]
 801a6e8:	80c6      	strh	r6, [r0, #6]
 801a6ea:	60a1      	str	r1, [r4, #8]
 801a6ec:	81a1      	strh	r1, [r4, #12]
 801a6ee:	73a1      	strb	r1, [r4, #14]
 801a6f0:	e7e5      	b.n	801a6be <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801a6f2:	bf00      	nop
 801a6f4:	0802aacc 	.word	0x0802aacc
 801a6f8:	0802aaf4 	.word	0x0802aaf4

0801a6fc <nema_rb_init>:
 801a6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a700:	6805      	ldr	r5, [r0, #0]
 801a702:	4f23      	ldr	r7, [pc, #140]	; (801a790 <nema_rb_init+0x94>)
 801a704:	2d00      	cmp	r5, #0
 801a706:	603d      	str	r5, [r7, #0]
 801a708:	dd3c      	ble.n	801a784 <nema_rb_init+0x88>
 801a70a:	f8df c090 	ldr.w	ip, [pc, #144]	; 801a79c <nema_rb_init+0xa0>
 801a70e:	10ab      	asrs	r3, r5, #2
 801a710:	3b04      	subs	r3, #4
 801a712:	f8df e08c 	ldr.w	lr, [pc, #140]	; 801a7a0 <nema_rb_init+0xa4>
 801a716:	6886      	ldr	r6, [r0, #8]
 801a718:	4c1e      	ldr	r4, [pc, #120]	; (801a794 <nema_rb_init+0x98>)
 801a71a:	f8cc 3000 	str.w	r3, [ip]
 801a71e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 801a7a4 <nema_rb_init+0xa8>
 801a722:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801a726:	f8ce 0000 	str.w	r0, [lr]
 801a72a:	6026      	str	r6, [r4, #0]
 801a72c:	f8c8 c000 	str.w	ip, [r8]
 801a730:	b329      	cbz	r1, 801a77e <nema_rb_init+0x82>
 801a732:	2400      	movs	r4, #0
 801a734:	f8df e070 	ldr.w	lr, [pc, #112]	; 801a7a8 <nema_rb_init+0xac>
 801a738:	4917      	ldr	r1, [pc, #92]	; (801a798 <nema_rb_init+0x9c>)
 801a73a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801a73e:	f846 e023 	str.w	lr, [r6, r3, lsl #2]
 801a742:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801a746:	e9c3 1502 	strd	r1, r5, [r3, #8]
 801a74a:	f8c3 c004 	str.w	ip, [r3, #4]
 801a74e:	f7e8 fb02 	bl	8002d56 <nema_buffer_flush>
 801a752:	4621      	mov	r1, r4
 801a754:	f44f 70a4 	mov.w	r0, #328	; 0x148
 801a758:	f7e8 fa48 	bl	8002bec <nema_reg_write>
 801a75c:	f8d8 1000 	ldr.w	r1, [r8]
 801a760:	20ec      	movs	r0, #236	; 0xec
 801a762:	f041 0106 	orr.w	r1, r1, #6
 801a766:	f7e8 fa41 	bl	8002bec <nema_reg_write>
 801a76a:	f8d8 1000 	ldr.w	r1, [r8]
 801a76e:	20f0      	movs	r0, #240	; 0xf0
 801a770:	f7e8 fa3c 	bl	8002bec <nema_reg_write>
 801a774:	6839      	ldr	r1, [r7, #0]
 801a776:	20f4      	movs	r0, #244	; 0xf4
 801a778:	f7e8 fa38 	bl	8002bec <nema_reg_write>
 801a77c:	4621      	mov	r1, r4
 801a77e:	4608      	mov	r0, r1
 801a780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a784:	2004      	movs	r0, #4
 801a786:	f000 fa25 	bl	801abd4 <nema_set_error>
 801a78a:	f04f 31ff 	mov.w	r1, #4294967295
 801a78e:	e7f6      	b.n	801a77e <nema_rb_init+0x82>
 801a790:	201981f4 	.word	0x201981f4
 801a794:	201981ec 	.word	0x201981ec
 801a798:	ff0000f4 	.word	0xff0000f4
 801a79c:	201981f0 	.word	0x201981f0
 801a7a0:	201981e4 	.word	0x201981e4
 801a7a4:	201981e8 	.word	0x201981e8
 801a7a8:	ff0000f0 	.word	0xff0000f0

0801a7ac <nema_rb_submit_cmdlist2>:
 801a7ac:	2900      	cmp	r1, #0
 801a7ae:	d074      	beq.n	801a89a <nema_rb_submit_cmdlist2+0xee>
 801a7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7b4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 801a8b0 <nema_rb_submit_cmdlist2+0x104>
 801a7b8:	4b39      	ldr	r3, [pc, #228]	; (801a8a0 <nema_rb_submit_cmdlist2+0xf4>)
 801a7ba:	f8d8 2000 	ldr.w	r2, [r8]
 801a7be:	681d      	ldr	r5, [r3, #0]
 801a7c0:	6913      	ldr	r3, [r2, #16]
 801a7c2:	468c      	mov	ip, r1
 801a7c4:	4c37      	ldr	r4, [pc, #220]	; (801a8a4 <nema_rb_submit_cmdlist2+0xf8>)
 801a7c6:	1d19      	adds	r1, r3, #4
 801a7c8:	42a9      	cmp	r1, r5
 801a7ca:	6824      	ldr	r4, [r4, #0]
 801a7cc:	db0a      	blt.n	801a7e4 <nema_rb_submit_cmdlist2+0x38>
 801a7ce:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801a7d2:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 801a7d6:	6913      	ldr	r3, [r2, #16]
 801a7d8:	3301      	adds	r3, #1
 801a7da:	429d      	cmp	r5, r3
 801a7dc:	6113      	str	r3, [r2, #16]
 801a7de:	dc59      	bgt.n	801a894 <nema_rb_submit_cmdlist2+0xe8>
 801a7e0:	2300      	movs	r3, #0
 801a7e2:	6113      	str	r3, [r2, #16]
 801a7e4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801a7e8:	f04f 0e00 	mov.w	lr, #0
 801a7ec:	e009      	b.n	801a802 <nema_rb_submit_cmdlist2+0x56>
 801a7ee:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 801a7f2:	6913      	ldr	r3, [r2, #16]
 801a7f4:	3301      	adds	r3, #1
 801a7f6:	429d      	cmp	r5, r3
 801a7f8:	6113      	str	r3, [r2, #16]
 801a7fa:	bfdc      	itt	le
 801a7fc:	2300      	movle	r3, #0
 801a7fe:	f8c2 e010 	strle.w	lr, [r2, #16]
 801a802:	f013 0703 	ands.w	r7, r3, #3
 801a806:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a80a:	d1f0      	bne.n	801a7ee <nema_rb_submit_cmdlist2+0x42>
 801a80c:	23f0      	movs	r3, #240	; 0xf0
 801a80e:	6033      	str	r3, [r6, #0]
 801a810:	6913      	ldr	r3, [r2, #16]
 801a812:	3301      	adds	r3, #1
 801a814:	429d      	cmp	r5, r3
 801a816:	bfd3      	iteet	le
 801a818:	4623      	movle	r3, r4
 801a81a:	6113      	strgt	r3, [r2, #16]
 801a81c:	eb04 0383 	addgt.w	r3, r4, r3, lsl #2
 801a820:	6117      	strle	r7, [r2, #16]
 801a822:	6018      	str	r0, [r3, #0]
 801a824:	6913      	ldr	r3, [r2, #16]
 801a826:	3301      	adds	r3, #1
 801a828:	429d      	cmp	r5, r3
 801a82a:	dd2f      	ble.n	801a88c <nema_rb_submit_cmdlist2+0xe0>
 801a82c:	6113      	str	r3, [r2, #16]
 801a82e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a832:	491d      	ldr	r1, [pc, #116]	; (801a8a8 <nema_rb_submit_cmdlist2+0xfc>)
 801a834:	4610      	mov	r0, r2
 801a836:	6019      	str	r1, [r3, #0]
 801a838:	6913      	ldr	r3, [r2, #16]
 801a83a:	3301      	adds	r3, #1
 801a83c:	429d      	cmp	r5, r3
 801a83e:	bfd3      	iteet	le
 801a840:	2300      	movle	r3, #0
 801a842:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
 801a846:	6113      	strgt	r3, [r2, #16]
 801a848:	6113      	strle	r3, [r2, #16]
 801a84a:	f8c4 c000 	str.w	ip, [r4]
 801a84e:	6913      	ldr	r3, [r2, #16]
 801a850:	3301      	adds	r3, #1
 801a852:	429d      	cmp	r5, r3
 801a854:	bfd8      	it	le
 801a856:	2300      	movle	r3, #0
 801a858:	6113      	str	r3, [r2, #16]
 801a85a:	f7e8 fa7c 	bl	8002d56 <nema_buffer_flush>
 801a85e:	4a13      	ldr	r2, [pc, #76]	; (801a8ac <nema_rb_submit_cmdlist2+0x100>)
 801a860:	f8d8 3000 	ldr.w	r3, [r8]
 801a864:	6811      	ldr	r1, [r2, #0]
 801a866:	691b      	ldr	r3, [r3, #16]
 801a868:	20ec      	movs	r0, #236	; 0xec
 801a86a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801a86e:	f041 0104 	orr.w	r1, r1, #4
 801a872:	f7e8 f9bb 	bl	8002bec <nema_reg_write>
 801a876:	f8d8 3000 	ldr.w	r3, [r8]
 801a87a:	6958      	ldr	r0, [r3, #20]
 801a87c:	3001      	adds	r0, #1
 801a87e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 801a882:	bfa8      	it	ge
 801a884:	2000      	movge	r0, #0
 801a886:	6158      	str	r0, [r3, #20]
 801a888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a88c:	2100      	movs	r1, #0
 801a88e:	4623      	mov	r3, r4
 801a890:	6111      	str	r1, [r2, #16]
 801a892:	e7ce      	b.n	801a832 <nema_rb_submit_cmdlist2+0x86>
 801a894:	2b00      	cmp	r3, #0
 801a896:	d19c      	bne.n	801a7d2 <nema_rb_submit_cmdlist2+0x26>
 801a898:	e7a4      	b.n	801a7e4 <nema_rb_submit_cmdlist2+0x38>
 801a89a:	f04f 30ff 	mov.w	r0, #4294967295
 801a89e:	4770      	bx	lr
 801a8a0:	201981f0 	.word	0x201981f0
 801a8a4:	201981ec 	.word	0x201981ec
 801a8a8:	000200f4 	.word	0x000200f4
 801a8ac:	201981e8 	.word	0x201981e8
 801a8b0:	201981e4 	.word	0x201981e4

0801a8b4 <nema_rb_submit_cmdlist>:
 801a8b4:	68c0      	ldr	r0, [r0, #12]
 801a8b6:	f7ff bf79 	b.w	801a7ac <nema_rb_submit_cmdlist2>
 801a8ba:	bf00      	nop

0801a8bc <nema_rb_inline_cmd>:
 801a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8be:	4e21      	ldr	r6, [pc, #132]	; (801a944 <nema_rb_inline_cmd+0x88>)
 801a8c0:	4b21      	ldr	r3, [pc, #132]	; (801a948 <nema_rb_inline_cmd+0x8c>)
 801a8c2:	6832      	ldr	r2, [r6, #0]
 801a8c4:	681d      	ldr	r5, [r3, #0]
 801a8c6:	6913      	ldr	r3, [r2, #16]
 801a8c8:	4c20      	ldr	r4, [pc, #128]	; (801a94c <nema_rb_inline_cmd+0x90>)
 801a8ca:	1c5f      	adds	r7, r3, #1
 801a8cc:	42af      	cmp	r7, r5
 801a8ce:	6824      	ldr	r4, [r4, #0]
 801a8d0:	db24      	blt.n	801a91c <nema_rb_inline_cmd+0x60>
 801a8d2:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 801a8d6:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 801a8da:	6913      	ldr	r3, [r2, #16]
 801a8dc:	3301      	adds	r3, #1
 801a8de:	429d      	cmp	r5, r3
 801a8e0:	6113      	str	r3, [r2, #16]
 801a8e2:	dc17      	bgt.n	801a914 <nema_rb_inline_cmd+0x58>
 801a8e4:	2700      	movs	r7, #0
 801a8e6:	4623      	mov	r3, r4
 801a8e8:	6117      	str	r7, [r2, #16]
 801a8ea:	6018      	str	r0, [r3, #0]
 801a8ec:	6913      	ldr	r3, [r2, #16]
 801a8ee:	3301      	adds	r3, #1
 801a8f0:	429d      	cmp	r5, r3
 801a8f2:	bfd3      	iteet	le
 801a8f4:	2300      	movle	r3, #0
 801a8f6:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
 801a8fa:	6113      	strgt	r3, [r2, #16]
 801a8fc:	6113      	strle	r3, [r2, #16]
 801a8fe:	6021      	str	r1, [r4, #0]
 801a900:	6913      	ldr	r3, [r2, #16]
 801a902:	3301      	adds	r3, #1
 801a904:	429d      	cmp	r5, r3
 801a906:	bfd8      	it	le
 801a908:	2300      	movle	r3, #0
 801a90a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a90e:	6113      	str	r3, [r2, #16]
 801a910:	d107      	bne.n	801a922 <nema_rb_inline_cmd+0x66>
 801a912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a914:	2b00      	cmp	r3, #0
 801a916:	d1de      	bne.n	801a8d6 <nema_rb_inline_cmd+0x1a>
 801a918:	4623      	mov	r3, r4
 801a91a:	e7e6      	b.n	801a8ea <nema_rb_inline_cmd+0x2e>
 801a91c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a920:	e7e3      	b.n	801a8ea <nema_rb_inline_cmd+0x2e>
 801a922:	4610      	mov	r0, r2
 801a924:	f7e8 fa17 	bl	8002d56 <nema_buffer_flush>
 801a928:	6833      	ldr	r3, [r6, #0]
 801a92a:	4a09      	ldr	r2, [pc, #36]	; (801a950 <nema_rb_inline_cmd+0x94>)
 801a92c:	691b      	ldr	r3, [r3, #16]
 801a92e:	6811      	ldr	r1, [r2, #0]
 801a930:	20ec      	movs	r0, #236	; 0xec
 801a932:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801a936:	f041 0104 	orr.w	r1, r1, #4
 801a93a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a93e:	f7e8 b955 	b.w	8002bec <nema_reg_write>
 801a942:	bf00      	nop
 801a944:	201981e4 	.word	0x201981e4
 801a948:	201981f0 	.word	0x201981f0
 801a94c:	201981ec 	.word	0x201981ec
 801a950:	201981e8 	.word	0x201981e8

0801a954 <nema_rb_force_flush>:
 801a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a956:	4e36      	ldr	r6, [pc, #216]	; (801aa30 <nema_rb_force_flush+0xdc>)
 801a958:	4b36      	ldr	r3, [pc, #216]	; (801aa34 <nema_rb_force_flush+0xe0>)
 801a95a:	6830      	ldr	r0, [r6, #0]
 801a95c:	6819      	ldr	r1, [r3, #0]
 801a95e:	6903      	ldr	r3, [r0, #16]
 801a960:	4a35      	ldr	r2, [pc, #212]	; (801aa38 <nema_rb_force_flush+0xe4>)
 801a962:	1d1c      	adds	r4, r3, #4
 801a964:	428c      	cmp	r4, r1
 801a966:	6812      	ldr	r2, [r2, #0]
 801a968:	db0a      	blt.n	801a980 <nema_rb_force_flush+0x2c>
 801a96a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801a96e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 801a972:	6903      	ldr	r3, [r0, #16]
 801a974:	3301      	adds	r3, #1
 801a976:	4299      	cmp	r1, r3
 801a978:	6103      	str	r3, [r0, #16]
 801a97a:	dc51      	bgt.n	801aa20 <nema_rb_force_flush+0xcc>
 801a97c:	2300      	movs	r3, #0
 801a97e:	6103      	str	r3, [r0, #16]
 801a980:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 801a984:	2700      	movs	r7, #0
 801a986:	e008      	b.n	801a99a <nema_rb_force_flush+0x46>
 801a988:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 801a98c:	6903      	ldr	r3, [r0, #16]
 801a98e:	3301      	adds	r3, #1
 801a990:	4299      	cmp	r1, r3
 801a992:	6103      	str	r3, [r0, #16]
 801a994:	bfdc      	itt	le
 801a996:	2300      	movle	r3, #0
 801a998:	6107      	strle	r7, [r0, #16]
 801a99a:	f013 0c03 	ands.w	ip, r3, #3
 801a99e:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 801a9a2:	d1f1      	bne.n	801a988 <nema_rb_force_flush+0x34>
 801a9a4:	4d25      	ldr	r5, [pc, #148]	; (801aa3c <nema_rb_force_flush+0xe8>)
 801a9a6:	4f26      	ldr	r7, [pc, #152]	; (801aa40 <nema_rb_force_flush+0xec>)
 801a9a8:	6025      	str	r5, [r4, #0]
 801a9aa:	6904      	ldr	r4, [r0, #16]
 801a9ac:	683d      	ldr	r5, [r7, #0]
 801a9ae:	3401      	adds	r4, #1
 801a9b0:	42a1      	cmp	r1, r4
 801a9b2:	bfd8      	it	le
 801a9b4:	4614      	movle	r4, r2
 801a9b6:	f103 0304 	add.w	r3, r3, #4
 801a9ba:	bfc8      	it	gt
 801a9bc:	6104      	strgt	r4, [r0, #16]
 801a9be:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801a9c2:	bfcc      	ite	gt
 801a9c4:	eb02 0484 	addgt.w	r4, r2, r4, lsl #2
 801a9c8:	f8c0 c010 	strle.w	ip, [r0, #16]
 801a9cc:	6023      	str	r3, [r4, #0]
 801a9ce:	6903      	ldr	r3, [r0, #16]
 801a9d0:	3301      	adds	r3, #1
 801a9d2:	4299      	cmp	r1, r3
 801a9d4:	dd27      	ble.n	801aa26 <nema_rb_force_flush+0xd2>
 801a9d6:	6103      	str	r3, [r0, #16]
 801a9d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a9dc:	4c19      	ldr	r4, [pc, #100]	; (801aa44 <nema_rb_force_flush+0xf0>)
 801a9de:	601c      	str	r4, [r3, #0]
 801a9e0:	6903      	ldr	r3, [r0, #16]
 801a9e2:	3301      	adds	r3, #1
 801a9e4:	4299      	cmp	r1, r3
 801a9e6:	bfd5      	itete	le
 801a9e8:	2300      	movle	r3, #0
 801a9ea:	6103      	strgt	r3, [r0, #16]
 801a9ec:	6103      	strle	r3, [r0, #16]
 801a9ee:	eb02 0283 	addgt.w	r2, r2, r3, lsl #2
 801a9f2:	4b15      	ldr	r3, [pc, #84]	; (801aa48 <nema_rb_force_flush+0xf4>)
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	6013      	str	r3, [r2, #0]
 801a9f8:	6903      	ldr	r3, [r0, #16]
 801a9fa:	3301      	adds	r3, #1
 801a9fc:	4299      	cmp	r1, r3
 801a9fe:	bfd8      	it	le
 801aa00:	2300      	movle	r3, #0
 801aa02:	6103      	str	r3, [r0, #16]
 801aa04:	f7e8 f9a7 	bl	8002d56 <nema_buffer_flush>
 801aa08:	6833      	ldr	r3, [r6, #0]
 801aa0a:	6839      	ldr	r1, [r7, #0]
 801aa0c:	691b      	ldr	r3, [r3, #16]
 801aa0e:	20ec      	movs	r0, #236	; 0xec
 801aa10:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801aa14:	f041 0104 	orr.w	r1, r1, #4
 801aa18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801aa1c:	f7e8 b8e6 	b.w	8002bec <nema_reg_write>
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d1a4      	bne.n	801a96e <nema_rb_force_flush+0x1a>
 801aa24:	e7ac      	b.n	801a980 <nema_rb_force_flush+0x2c>
 801aa26:	2400      	movs	r4, #0
 801aa28:	4613      	mov	r3, r2
 801aa2a:	6104      	str	r4, [r0, #16]
 801aa2c:	e7d6      	b.n	801a9dc <nema_rb_force_flush+0x88>
 801aa2e:	bf00      	nop
 801aa30:	201981e4 	.word	0x201981e4
 801aa34:	201981f0 	.word	0x201981f0
 801aa38:	201981ec 	.word	0x201981ec
 801aa3c:	ff0000f0 	.word	0xff0000f0
 801aa40:	201981e8 	.word	0x201981e8
 801aa44:	ff0000f4 	.word	0xff0000f4
 801aa48:	201981f4 	.word	0x201981f4

0801aa4c <nema_rb_submit_cl_id>:
 801aa4c:	b510      	push	{r4, lr}
 801aa4e:	1e04      	subs	r4, r0, #0
 801aa50:	dd40      	ble.n	801aad4 <nema_rb_submit_cl_id+0x88>
 801aa52:	2000      	movs	r0, #0
 801aa54:	f7e8 f989 	bl	8002d6a <nema_mutex_lock>
 801aa58:	4621      	mov	r1, r4
 801aa5a:	f44f 70a4 	mov.w	r0, #328	; 0x148
 801aa5e:	f7ff ff2d 	bl	801a8bc <nema_rb_inline_cmd>
 801aa62:	4a1d      	ldr	r2, [pc, #116]	; (801aad8 <nema_rb_submit_cl_id+0x8c>)
 801aa64:	4b1d      	ldr	r3, [pc, #116]	; (801aadc <nema_rb_submit_cl_id+0x90>)
 801aa66:	6812      	ldr	r2, [r2, #0]
 801aa68:	6818      	ldr	r0, [r3, #0]
 801aa6a:	6913      	ldr	r3, [r2, #16]
 801aa6c:	1c59      	adds	r1, r3, #1
 801aa6e:	4281      	cmp	r1, r0
 801aa70:	db0e      	blt.n	801aa90 <nema_rb_submit_cl_id+0x44>
 801aa72:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801aa76:	491a      	ldr	r1, [pc, #104]	; (801aae0 <nema_rb_submit_cl_id+0x94>)
 801aa78:	6809      	ldr	r1, [r1, #0]
 801aa7a:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 801aa7e:	6913      	ldr	r3, [r2, #16]
 801aa80:	3301      	adds	r3, #1
 801aa82:	4298      	cmp	r0, r3
 801aa84:	6113      	str	r3, [r2, #16]
 801aa86:	dc21      	bgt.n	801aacc <nema_rb_submit_cl_id+0x80>
 801aa88:	2400      	movs	r4, #0
 801aa8a:	460b      	mov	r3, r1
 801aa8c:	6114      	str	r4, [r2, #16]
 801aa8e:	e003      	b.n	801aa98 <nema_rb_submit_cl_id+0x4c>
 801aa90:	4913      	ldr	r1, [pc, #76]	; (801aae0 <nema_rb_submit_cl_id+0x94>)
 801aa92:	6809      	ldr	r1, [r1, #0]
 801aa94:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801aa98:	24f8      	movs	r4, #248	; 0xf8
 801aa9a:	601c      	str	r4, [r3, #0]
 801aa9c:	6913      	ldr	r3, [r2, #16]
 801aa9e:	3301      	adds	r3, #1
 801aaa0:	4298      	cmp	r0, r3
 801aaa2:	bfd5      	itete	le
 801aaa4:	2300      	movle	r3, #0
 801aaa6:	6113      	strgt	r3, [r2, #16]
 801aaa8:	6113      	strle	r3, [r2, #16]
 801aaaa:	eb01 0183 	addgt.w	r1, r1, r3, lsl #2
 801aaae:	2301      	movs	r3, #1
 801aab0:	600b      	str	r3, [r1, #0]
 801aab2:	6913      	ldr	r3, [r2, #16]
 801aab4:	3301      	adds	r3, #1
 801aab6:	4298      	cmp	r0, r3
 801aab8:	bfd8      	it	le
 801aaba:	2300      	movle	r3, #0
 801aabc:	6113      	str	r3, [r2, #16]
 801aabe:	f7ff ff49 	bl	801a954 <nema_rb_force_flush>
 801aac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aac6:	2000      	movs	r0, #0
 801aac8:	f7e8 b95c 	b.w	8002d84 <nema_mutex_unlock>
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d1d4      	bne.n	801aa7a <nema_rb_submit_cl_id+0x2e>
 801aad0:	460b      	mov	r3, r1
 801aad2:	e7e1      	b.n	801aa98 <nema_rb_submit_cl_id+0x4c>
 801aad4:	bd10      	pop	{r4, pc}
 801aad6:	bf00      	nop
 801aad8:	201981e4 	.word	0x201981e4
 801aadc:	201981f0 	.word	0x201981f0
 801aae0:	201981ec 	.word	0x201981ec

0801aae4 <init_nema_regs>:
 801aae4:	b538      	push	{r3, r4, r5, lr}
 801aae6:	2100      	movs	r1, #0
 801aae8:	20e8      	movs	r0, #232	; 0xe8
 801aaea:	f7e8 f87f 	bl	8002bec <nema_reg_write>
 801aaee:	2100      	movs	r1, #0
 801aaf0:	20fc      	movs	r0, #252	; 0xfc
 801aaf2:	f7e8 f87b 	bl	8002bec <nema_reg_write>
 801aaf6:	2101      	movs	r1, #1
 801aaf8:	f44f 7062 	mov.w	r0, #904	; 0x388
 801aafc:	f7e8 f876 	bl	8002bec <nema_reg_write>
 801ab00:	2000      	movs	r0, #0
 801ab02:	f001 f8f7 	bl	801bcf4 <nema_set_interrupt_ctrl>
 801ab06:	f001 fe93 	bl	801c830 <nema_blender_init>
 801ab0a:	2100      	movs	r1, #0
 801ab0c:	f44f 7000 	mov.w	r0, #512	; 0x200
 801ab10:	f001 fda0 	bl	801c654 <nema_cl_add_cmd>
 801ab14:	f04f 31ff 	mov.w	r1, #4294967295
 801ab18:	f44f 7001 	mov.w	r0, #516	; 0x204
 801ab1c:	f001 fd9a 	bl	801c654 <nema_cl_add_cmd>
 801ab20:	f000 fec6 	bl	801b8b0 <nema_readHwConfig>
 801ab24:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
 801ab28:	d015      	beq.n	801ab56 <init_nema_regs+0x72>
 801ab2a:	2007      	movs	r0, #7
 801ab2c:	f001 f82e 	bl	801bb8c <nema_set_depth_ctrl>
 801ab30:	2300      	movs	r3, #0
 801ab32:	4c10      	ldr	r4, [pc, #64]	; (801ab74 <init_nema_regs+0x90>)
 801ab34:	7820      	ldrb	r0, [r4, #0]
 801ab36:	7063      	strb	r3, [r4, #1]
 801ab38:	f000 fecc 	bl	801b8d4 <nema_enable_tiling>
 801ab3c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801ab40:	2500      	movs	r5, #0
 801ab42:	6962      	ldr	r2, [r4, #20]
 801ab44:	430b      	orrs	r3, r1
 801ab46:	4313      	orrs	r3, r2
 801ab48:	e9c4 5303 	strd	r5, r3, [r4, #12]
 801ab4c:	f000 febe 	bl	801b8cc <nema_readHwConfigH>
 801ab50:	0583      	lsls	r3, r0, #22
 801ab52:	d403      	bmi.n	801ab5c <init_nema_regs+0x78>
 801ab54:	bd38      	pop	{r3, r4, r5, pc}
 801ab56:	4c07      	ldr	r4, [pc, #28]	; (801ab74 <init_nema_regs+0x90>)
 801ab58:	70a0      	strb	r0, [r4, #2]
 801ab5a:	e7ef      	b.n	801ab3c <init_nema_regs+0x58>
 801ab5c:	4629      	mov	r1, r5
 801ab5e:	f44f 705d 	mov.w	r0, #884	; 0x374
 801ab62:	f7e8 f843 	bl	8002bec <nema_reg_write>
 801ab66:	4629      	mov	r1, r5
 801ab68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ab6c:	f44f 705a 	mov.w	r0, #872	; 0x368
 801ab70:	f7e8 b83c 	b.w	8002bec <nema_reg_write>
 801ab74:	20198594 	.word	0x20198594

0801ab78 <nema_init>:
 801ab78:	b510      	push	{r4, lr}
 801ab7a:	f7e7 ffc1 	bl	8002b00 <nema_sys_init>
 801ab7e:	1e04      	subs	r4, r0, #0
 801ab80:	db11      	blt.n	801aba6 <nema_init+0x2e>
 801ab82:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
 801ab86:	f7e8 f821 	bl	8002bcc <nema_reg_read>
 801ab8a:	4b10      	ldr	r3, [pc, #64]	; (801abcc <nema_init+0x54>)
 801ab8c:	4298      	cmp	r0, r3
 801ab8e:	d114      	bne.n	801abba <nema_init+0x42>
 801ab90:	f001 fc7e 	bl	801c490 <nema_cl_unbind>
 801ab94:	22d0      	movs	r2, #208	; 0xd0
 801ab96:	2100      	movs	r1, #0
 801ab98:	480d      	ldr	r0, [pc, #52]	; (801abd0 <nema_init+0x58>)
 801ab9a:	f00d fb12 	bl	80281c2 <memset>
 801ab9e:	b14c      	cbz	r4, 801abb4 <nema_init+0x3c>
 801aba0:	2400      	movs	r4, #0
 801aba2:	4620      	mov	r0, r4
 801aba4:	bd10      	pop	{r4, pc}
 801aba6:	4a0a      	ldr	r2, [pc, #40]	; (801abd0 <nema_init+0x58>)
 801aba8:	4620      	mov	r0, r4
 801abaa:	6993      	ldr	r3, [r2, #24]
 801abac:	f043 0301 	orr.w	r3, r3, #1
 801abb0:	6193      	str	r3, [r2, #24]
 801abb2:	bd10      	pop	{r4, pc}
 801abb4:	f7ff ff96 	bl	801aae4 <init_nema_regs>
 801abb8:	e7f3      	b.n	801aba2 <nema_init+0x2a>
 801abba:	4a05      	ldr	r2, [pc, #20]	; (801abd0 <nema_init+0x58>)
 801abbc:	f04f 34ff 	mov.w	r4, #4294967295
 801abc0:	6993      	ldr	r3, [r2, #24]
 801abc2:	f043 0302 	orr.w	r3, r3, #2
 801abc6:	6193      	str	r3, [r2, #24]
 801abc8:	e7eb      	b.n	801aba2 <nema_init+0x2a>
 801abca:	bf00      	nop
 801abcc:	86362000 	.word	0x86362000
 801abd0:	20198594 	.word	0x20198594

0801abd4 <nema_set_error>:
 801abd4:	4a02      	ldr	r2, [pc, #8]	; (801abe0 <nema_set_error+0xc>)
 801abd6:	6993      	ldr	r3, [r2, #24]
 801abd8:	4318      	orrs	r0, r3
 801abda:	6190      	str	r0, [r2, #24]
 801abdc:	4770      	bx	lr
 801abde:	bf00      	nop
 801abe0:	20198594 	.word	0x20198594

0801abe4 <nema_set_tex_color>:
 801abe4:	4601      	mov	r1, r0
 801abe6:	201c      	movs	r0, #28
 801abe8:	f001 bd34 	b.w	801c654 <nema_cl_add_cmd>

0801abec <nema_set_const_reg>:
 801abec:	3080      	adds	r0, #128	; 0x80
 801abee:	0080      	lsls	r0, r0, #2
 801abf0:	f5b0 7f03 	cmp.w	r0, #524	; 0x20c
 801abf4:	d900      	bls.n	801abf8 <nema_set_const_reg+0xc>
 801abf6:	4770      	bx	lr
 801abf8:	f001 bd2c 	b.w	801c654 <nema_cl_add_cmd>

0801abfc <nema_set_clip>:
 801abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abfe:	460c      	mov	r4, r1
 801ac00:	4607      	mov	r7, r0
 801ac02:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 801ac06:	4d0c      	ldr	r5, [pc, #48]	; (801ac38 <nema_set_clip+0x3c>)
 801ac08:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 801ac0c:	b289      	uxth	r1, r1
 801ac0e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801ac12:	19d6      	adds	r6, r2, r7
 801ac14:	f44f 7088 	mov.w	r0, #272	; 0x110
 801ac18:	e9c5 7407 	strd	r7, r4, [r5, #28]
 801ac1c:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
 801ac20:	441c      	add	r4, r3
 801ac22:	f001 fd17 	bl	801c654 <nema_cl_add_cmd>
 801ac26:	b2b1      	uxth	r1, r6
 801ac28:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801ac2c:	f44f 708a 	mov.w	r0, #276	; 0x114
 801ac30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ac34:	f001 bd0e 	b.w	801c654 <nema_cl_add_cmd>
 801ac38:	20198594 	.word	0x20198594

0801ac3c <nema_enable_gradient>:
 801ac3c:	2800      	cmp	r0, #0
 801ac3e:	bf14      	ite	ne
 801ac40:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 801ac44:	2100      	moveq	r1, #0
 801ac46:	b410      	push	{r4}
 801ac48:	4a05      	ldr	r2, [pc, #20]	; (801ac60 <nema_enable_gradient+0x24>)
 801ac4a:	6950      	ldr	r0, [r2, #20]
 801ac4c:	e9d2 3401 	ldrd	r3, r4, [r2, #4]
 801ac50:	4323      	orrs	r3, r4
 801ac52:	4303      	orrs	r3, r0
 801ac54:	430b      	orrs	r3, r1
 801ac56:	e9c2 1303 	strd	r1, r3, [r2, #12]
 801ac5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac5e:	4770      	bx	lr
 801ac60:	20198594 	.word	0x20198594

0801ac64 <nema_rgba>:
 801ac64:	061b      	lsls	r3, r3, #24
 801ac66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ac6a:	4318      	orrs	r0, r3
 801ac6c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801ac70:	4770      	bx	lr
 801ac72:	bf00      	nop

0801ac74 <nema_bind_src_tex>:
 801ac74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac78:	9c06      	ldr	r4, [sp, #24]
 801ac7a:	460e      	mov	r6, r1
 801ac7c:	1c61      	adds	r1, r4, #1
 801ac7e:	4605      	mov	r5, r0
 801ac80:	4617      	mov	r7, r2
 801ac82:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801ac86:	d022      	beq.n	801acce <nema_bind_src_tex+0x5a>
 801ac88:	2201      	movs	r2, #1
 801ac8a:	0400      	lsls	r0, r0, #16
 801ac8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801ad60 <nema_bind_src_tex+0xec>
 801ac90:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 801ac94:	b2a4      	uxth	r4, r4
 801ac96:	4323      	orrs	r3, r4
 801ac98:	2003      	movs	r0, #3
 801ac9a:	f8c8 3050 	str.w	r3, [r8, #80]	; 0x50
 801ac9e:	e9c8 5611 	strd	r5, r6, [r8, #68]	; 0x44
 801aca2:	f8c8 704c 	str.w	r7, [r8, #76]	; 0x4c
 801aca6:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 801acaa:	f001 fc75 	bl	801c598 <nema_cl_get_space>
 801acae:	b160      	cbz	r0, 801acca <nema_bind_src_tex+0x56>
 801acb0:	2110      	movs	r1, #16
 801acb2:	2214      	movs	r2, #20
 801acb4:	2318      	movs	r3, #24
 801acb6:	e9c0 1500 	strd	r1, r5, [r0]
 801acba:	6082      	str	r2, [r0, #8]
 801acbc:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 801acc0:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 801acc4:	e9c0 2303 	strd	r2, r3, [r0, #12]
 801acc8:	6146      	str	r6, [r0, #20]
 801acca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801acce:	06c2      	lsls	r2, r0, #27
 801acd0:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 801acd4:	d41c      	bmi.n	801ad10 <nema_bind_src_tex+0x9c>
 801acd6:	4634      	mov	r4, r6
 801acd8:	f1a1 020b 	sub.w	r2, r1, #11
 801acdc:	2a2a      	cmp	r2, #42	; 0x2a
 801acde:	d833      	bhi.n	801ad48 <nema_bind_src_tex+0xd4>
 801ace0:	e8df f002 	tbb	[pc, r2]
 801ace4:	32322a2a 	.word	0x32322a2a
 801ace8:	30323232 	.word	0x30323232
 801acec:	1c323232 	.word	0x1c323232
 801acf0:	3232321c 	.word	0x3232321c
 801acf4:	32323232 	.word	0x32323232
 801acf8:	32323232 	.word	0x32323232
 801acfc:	32323232 	.word	0x32323232
 801ad00:	2a241f2a 	.word	0x2a241f2a
 801ad04:	3232241f 	.word	0x3232241f
 801ad08:	321f1f32 	.word	0x321f1f32
 801ad0c:	2432      	.short	0x2432
 801ad0e:	24          	.byte	0x24
 801ad0f:	00          	.byte	0x00
 801ad10:	1cf4      	adds	r4, r6, #3
 801ad12:	bf48      	it	mi
 801ad14:	1db4      	addmi	r4, r6, #6
 801ad16:	f024 0403 	bic.w	r4, r4, #3
 801ad1a:	e7dd      	b.n	801acd8 <nema_bind_src_tex+0x64>
 801ad1c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ad20:	e7b2      	b.n	801ac88 <nema_bind_src_tex+0x14>
 801ad22:	0062      	lsls	r2, r4, #1
 801ad24:	1dd4      	adds	r4, r2, #7
 801ad26:	d404      	bmi.n	801ad32 <nema_bind_src_tex+0xbe>
 801ad28:	10e4      	asrs	r4, r4, #3
 801ad2a:	e7ad      	b.n	801ac88 <nema_bind_src_tex+0x14>
 801ad2c:	00a2      	lsls	r2, r4, #2
 801ad2e:	1dd4      	adds	r4, r2, #7
 801ad30:	d5fa      	bpl.n	801ad28 <nema_bind_src_tex+0xb4>
 801ad32:	f102 040e 	add.w	r4, r2, #14
 801ad36:	e7f7      	b.n	801ad28 <nema_bind_src_tex+0xb4>
 801ad38:	1de2      	adds	r2, r4, #7
 801ad3a:	bf48      	it	mi
 801ad3c:	f104 020e 	addmi.w	r2, r4, #14
 801ad40:	10d4      	asrs	r4, r2, #3
 801ad42:	e7a1      	b.n	801ac88 <nema_bind_src_tex+0x14>
 801ad44:	0064      	lsls	r4, r4, #1
 801ad46:	e79f      	b.n	801ac88 <nema_bind_src_tex+0x14>
 801ad48:	3904      	subs	r1, #4
 801ad4a:	2947      	cmp	r1, #71	; 0x47
 801ad4c:	bf8e      	itee	hi
 801ad4e:	2204      	movhi	r2, #4
 801ad50:	4a02      	ldrls	r2, [pc, #8]	; (801ad5c <nema_bind_src_tex+0xe8>)
 801ad52:	5652      	ldrsbls	r2, [r2, r1]
 801ad54:	fb02 f404 	mul.w	r4, r2, r4
 801ad58:	e796      	b.n	801ac88 <nema_bind_src_tex+0x14>
 801ad5a:	bf00      	nop
 801ad5c:	0802ab34 	.word	0x0802ab34
 801ad60:	20198594 	.word	0x20198594

0801ad64 <nema_bind_dst_tex>:
 801ad64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad68:	9c08      	ldr	r4, [sp, #32]
 801ad6a:	4699      	mov	r9, r3
 801ad6c:	4617      	mov	r7, r2
 801ad6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ad72:	1c63      	adds	r3, r4, #1
 801ad74:	4680      	mov	r8, r0
 801ad76:	460e      	mov	r6, r1
 801ad78:	d02c      	beq.n	801add4 <nema_bind_dst_tex+0x70>
 801ad7a:	2a12      	cmp	r2, #18
 801ad7c:	d009      	beq.n	801ad92 <nema_bind_dst_tex+0x2e>
 801ad7e:	3a16      	subs	r2, #22
 801ad80:	2a01      	cmp	r2, #1
 801ad82:	d906      	bls.n	801ad92 <nema_bind_dst_tex+0x2e>
 801ad84:	4d50      	ldr	r5, [pc, #320]	; (801aec8 <nema_bind_dst_tex+0x164>)
 801ad86:	7868      	ldrb	r0, [r5, #1]
 801ad88:	f000 fda4 	bl	801b8d4 <nema_enable_tiling>
 801ad8c:	e007      	b.n	801ad9e <nema_bind_dst_tex+0x3a>
 801ad8e:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 801ad92:	2301      	movs	r3, #1
 801ad94:	4d4c      	ldr	r5, [pc, #304]	; (801aec8 <nema_bind_dst_tex+0x164>)
 801ad96:	4618      	mov	r0, r3
 801ad98:	702b      	strb	r3, [r5, #0]
 801ad9a:	f000 fd9b 	bl	801b8d4 <nema_enable_tiling>
 801ad9e:	2201      	movs	r2, #1
 801ada0:	b2a4      	uxth	r4, r4
 801ada2:	ea44 6409 	orr.w	r4, r4, r9, lsl #24
 801ada6:	2003      	movs	r0, #3
 801ada8:	63ec      	str	r4, [r5, #60]	; 0x3c
 801adaa:	e9c5 860c 	strd	r8, r6, [r5, #48]	; 0x30
 801adae:	63af      	str	r7, [r5, #56]	; 0x38
 801adb0:	642a      	str	r2, [r5, #64]	; 0x40
 801adb2:	f001 fbf1 	bl	801c598 <nema_cl_get_space>
 801adb6:	b158      	cbz	r0, 801add0 <nema_bind_dst_tex+0x6c>
 801adb8:	2100      	movs	r1, #0
 801adba:	2204      	movs	r2, #4
 801adbc:	2308      	movs	r3, #8
 801adbe:	e9c0 1800 	strd	r1, r8, [r0]
 801adc2:	6082      	str	r2, [r0, #8]
 801adc4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 801adc6:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 801adca:	e9c0 2303 	strd	r2, r3, [r0, #12]
 801adce:	6146      	str	r6, [r0, #20]
 801add0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801add4:	f1a2 030b 	sub.w	r3, r2, #11
 801add8:	2b2a      	cmp	r3, #42	; 0x2a
 801adda:	d86b      	bhi.n	801aeb4 <nema_bind_dst_tex+0x150>
 801addc:	a101      	add	r1, pc, #4	; (adr r1, 801ade4 <nema_bind_dst_tex+0x80>)
 801adde:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ade2:	bf00      	nop
 801ade4:	0801aea7 	.word	0x0801aea7
 801ade8:	0801aea7 	.word	0x0801aea7
 801adec:	0801aeb5 	.word	0x0801aeb5
 801adf0:	0801aeb5 	.word	0x0801aeb5
 801adf4:	0801aeb5 	.word	0x0801aeb5
 801adf8:	0801aeb5 	.word	0x0801aeb5
 801adfc:	0801aeb5 	.word	0x0801aeb5
 801ae00:	0801aeb1 	.word	0x0801aeb1
 801ae04:	0801aeb5 	.word	0x0801aeb5
 801ae08:	0801aeb5 	.word	0x0801aeb5
 801ae0c:	0801aeb5 	.word	0x0801aeb5
 801ae10:	0801ad8f 	.word	0x0801ad8f
 801ae14:	0801ad8f 	.word	0x0801ad8f
 801ae18:	0801aeb5 	.word	0x0801aeb5
 801ae1c:	0801aeb5 	.word	0x0801aeb5
 801ae20:	0801aeb5 	.word	0x0801aeb5
 801ae24:	0801aeb5 	.word	0x0801aeb5
 801ae28:	0801aeb5 	.word	0x0801aeb5
 801ae2c:	0801aeb5 	.word	0x0801aeb5
 801ae30:	0801aeb5 	.word	0x0801aeb5
 801ae34:	0801aeb5 	.word	0x0801aeb5
 801ae38:	0801aeb5 	.word	0x0801aeb5
 801ae3c:	0801aeb5 	.word	0x0801aeb5
 801ae40:	0801aeb5 	.word	0x0801aeb5
 801ae44:	0801aeb5 	.word	0x0801aeb5
 801ae48:	0801aeb5 	.word	0x0801aeb5
 801ae4c:	0801aeb5 	.word	0x0801aeb5
 801ae50:	0801aeb5 	.word	0x0801aeb5
 801ae54:	0801aea7 	.word	0x0801aea7
 801ae58:	0801ae9b 	.word	0x0801ae9b
 801ae5c:	0801ae91 	.word	0x0801ae91
 801ae60:	0801aea7 	.word	0x0801aea7
 801ae64:	0801ae9b 	.word	0x0801ae9b
 801ae68:	0801ae91 	.word	0x0801ae91
 801ae6c:	0801aeb5 	.word	0x0801aeb5
 801ae70:	0801aeb5 	.word	0x0801aeb5
 801ae74:	0801aeb5 	.word	0x0801aeb5
 801ae78:	0801ae9b 	.word	0x0801ae9b
 801ae7c:	0801ae9b 	.word	0x0801ae9b
 801ae80:	0801aeb5 	.word	0x0801aeb5
 801ae84:	0801aeb5 	.word	0x0801aeb5
 801ae88:	0801ae91 	.word	0x0801ae91
 801ae8c:	0801ae91 	.word	0x0801ae91
 801ae90:	00b3      	lsls	r3, r6, #2
 801ae92:	1ddc      	adds	r4, r3, #7
 801ae94:	d404      	bmi.n	801aea0 <nema_bind_dst_tex+0x13c>
 801ae96:	10e4      	asrs	r4, r4, #3
 801ae98:	e76f      	b.n	801ad7a <nema_bind_dst_tex+0x16>
 801ae9a:	0073      	lsls	r3, r6, #1
 801ae9c:	1ddc      	adds	r4, r3, #7
 801ae9e:	d5fa      	bpl.n	801ae96 <nema_bind_dst_tex+0x132>
 801aea0:	f103 040e 	add.w	r4, r3, #14
 801aea4:	e7f7      	b.n	801ae96 <nema_bind_dst_tex+0x132>
 801aea6:	1df4      	adds	r4, r6, #7
 801aea8:	d5f5      	bpl.n	801ae96 <nema_bind_dst_tex+0x132>
 801aeaa:	f106 040e 	add.w	r4, r6, #14
 801aeae:	e7f2      	b.n	801ae96 <nema_bind_dst_tex+0x132>
 801aeb0:	0074      	lsls	r4, r6, #1
 801aeb2:	e76e      	b.n	801ad92 <nema_bind_dst_tex+0x2e>
 801aeb4:	1f13      	subs	r3, r2, #4
 801aeb6:	2b47      	cmp	r3, #71	; 0x47
 801aeb8:	bf8e      	itee	hi
 801aeba:	2404      	movhi	r4, #4
 801aebc:	4903      	ldrls	r1, [pc, #12]	; (801aecc <nema_bind_dst_tex+0x168>)
 801aebe:	56cc      	ldrsbls	r4, [r1, r3]
 801aec0:	fb06 f404 	mul.w	r4, r6, r4
 801aec4:	e759      	b.n	801ad7a <nema_bind_dst_tex+0x16>
 801aec6:	bf00      	nop
 801aec8:	20198594 	.word	0x20198594
 801aecc:	0802ab34 	.word	0x0802ab34

0801aed0 <nema_fill_rect>:
 801aed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aed4:	4604      	mov	r4, r0
 801aed6:	460d      	mov	r5, r1
 801aed8:	4616      	mov	r6, r2
 801aeda:	461f      	mov	r7, r3
 801aedc:	9806      	ldr	r0, [sp, #24]
 801aede:	f000 fe5b 	bl	801bb98 <nema_set_raster_color>
 801aee2:	463b      	mov	r3, r7
 801aee4:	4632      	mov	r2, r6
 801aee6:	4629      	mov	r1, r5
 801aee8:	4620      	mov	r0, r4
 801aeea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aeee:	f000 be95 	b.w	801bc1c <nema_raster_rect>
 801aef2:	bf00      	nop

0801aef4 <nema_blit>:
 801aef4:	ee07 0a90 	vmov	s15, r0
 801aef8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801aefc:	ee07 1a90 	vmov	s15, r1
 801af00:	b500      	push	{lr}
 801af02:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801af06:	b083      	sub	sp, #12
 801af08:	e9cd 0100 	strd	r0, r1, [sp]
 801af0c:	f000 fdde 	bl	801bacc <nema_set_matrix_translate>
 801af10:	e9dd 0100 	ldrd	r0, r1, [sp]
 801af14:	4a03      	ldr	r2, [pc, #12]	; (801af24 <nema_blit+0x30>)
 801af16:	e9d2 2312 	ldrd	r2, r3, [r2, #72]	; 0x48
 801af1a:	b003      	add	sp, #12
 801af1c:	f85d eb04 	ldr.w	lr, [sp], #4
 801af20:	f000 be7c 	b.w	801bc1c <nema_raster_rect>
 801af24:	20198594 	.word	0x20198594

0801af28 <nema_blit_rotate>:
 801af28:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af2a:	2600      	movs	r6, #0
 801af2c:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 801af30:	4b68      	ldr	r3, [pc, #416]	; (801b0d4 <nema_blit_rotate+0x1ac>)
 801af32:	b08b      	sub	sp, #44	; 0x2c
 801af34:	3a01      	subs	r2, #1
 801af36:	9607      	str	r6, [sp, #28]
 801af38:	9608      	str	r6, [sp, #32]
 801af3a:	9709      	str	r7, [sp, #36]	; 0x24
 801af3c:	4604      	mov	r4, r0
 801af3e:	e9d3 6712 	ldrd	r6, r7, [r3, #72]	; 0x48
 801af42:	460d      	mov	r5, r1
 801af44:	2a0e      	cmp	r2, #14
 801af46:	f200 80b0 	bhi.w	801b0aa <nema_blit_rotate+0x182>
 801af4a:	e8df f002 	tbb	[pc, r2]
 801af4e:	4730      	.short	0x4730
 801af50:	9a836f58 	.word	0x9a836f58
 801af54:	6f089a08 	.word	0x6f089a08
 801af58:	ae584783 	.word	0xae584783
 801af5c:	30          	.byte	0x30
 801af5d:	00          	.byte	0x00
 801af5e:	1970      	adds	r0, r6, r5
 801af60:	ee07 0a10 	vmov	s14, r0
 801af64:	1938      	adds	r0, r7, r4
 801af66:	4631      	mov	r1, r6
 801af68:	ee07 0a90 	vmov	s15, r0
 801af6c:	2200      	movs	r2, #0
 801af6e:	463e      	mov	r6, r7
 801af70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801af74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af78:	460f      	mov	r7, r1
 801af7a:	4b57      	ldr	r3, [pc, #348]	; (801b0d8 <nema_blit_rotate+0x1b0>)
 801af7c:	9201      	str	r2, [sp, #4]
 801af7e:	9205      	str	r2, [sp, #20]
 801af80:	9302      	str	r3, [sp, #8]
 801af82:	9304      	str	r3, [sp, #16]
 801af84:	eddf 6a55 	vldr	s13, [pc, #340]	; 801b0dc <nema_blit_rotate+0x1b4>
 801af88:	ee37 7a26 	vadd.f32	s14, s14, s13
 801af8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801af90:	a801      	add	r0, sp, #4
 801af92:	ed8d 7a03 	vstr	s14, [sp, #12]
 801af96:	edcd 7a06 	vstr	s15, [sp, #24]
 801af9a:	f000 fcdd 	bl	801b958 <nema_set_matrix>
 801af9e:	463b      	mov	r3, r7
 801afa0:	4632      	mov	r2, r6
 801afa2:	4629      	mov	r1, r5
 801afa4:	4620      	mov	r0, r4
 801afa6:	f000 fe39 	bl	801bc1c <nema_raster_rect>
 801afaa:	b00b      	add	sp, #44	; 0x2c
 801afac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801afae:	ee07 4a90 	vmov	s15, r4
 801afb2:	4630      	mov	r0, r6
 801afb4:	442e      	add	r6, r5
 801afb6:	2300      	movs	r3, #0
 801afb8:	ee07 6a10 	vmov	s14, r6
 801afbc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801afc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801afc4:	4944      	ldr	r1, [pc, #272]	; (801b0d8 <nema_blit_rotate+0x1b0>)
 801afc6:	463e      	mov	r6, r7
 801afc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801afcc:	9301      	str	r3, [sp, #4]
 801afce:	4607      	mov	r7, r0
 801afd0:	9305      	str	r3, [sp, #20]
 801afd2:	9102      	str	r1, [sp, #8]
 801afd4:	9204      	str	r2, [sp, #16]
 801afd6:	eef1 7a67 	vneg.f32	s15, s15
 801afda:	e7d3      	b.n	801af84 <nema_blit_rotate+0x5c>
 801afdc:	4b3e      	ldr	r3, [pc, #248]	; (801b0d8 <nema_blit_rotate+0x1b0>)
 801afde:	2200      	movs	r2, #0
 801afe0:	9301      	str	r3, [sp, #4]
 801afe2:	9305      	str	r3, [sp, #20]
 801afe4:	1833      	adds	r3, r6, r0
 801afe6:	ee07 3a90 	vmov	s15, r3
 801afea:	1878      	adds	r0, r7, r1
 801afec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801aff0:	ee07 0a90 	vmov	s15, r0
 801aff4:	9202      	str	r2, [sp, #8]
 801aff6:	9204      	str	r2, [sp, #16]
 801aff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801affc:	e7c2      	b.n	801af84 <nema_blit_rotate+0x5c>
 801affe:	ee07 5a10 	vmov	s14, r5
 801b002:	4630      	mov	r0, r6
 801b004:	193e      	adds	r6, r7, r4
 801b006:	2300      	movs	r3, #0
 801b008:	ee07 6a90 	vmov	s15, r6
 801b00c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801b010:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b014:	4a30      	ldr	r2, [pc, #192]	; (801b0d8 <nema_blit_rotate+0x1b0>)
 801b016:	463e      	mov	r6, r7
 801b018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b01c:	4607      	mov	r7, r0
 801b01e:	9301      	str	r3, [sp, #4]
 801b020:	9305      	str	r3, [sp, #20]
 801b022:	9102      	str	r1, [sp, #8]
 801b024:	eeb1 7a47 	vneg.f32	s14, s14
 801b028:	9204      	str	r2, [sp, #16]
 801b02a:	e7ab      	b.n	801af84 <nema_blit_rotate+0x5c>
 801b02c:	ee07 4a90 	vmov	s15, r4
 801b030:	1978      	adds	r0, r7, r5
 801b032:	2300      	movs	r3, #0
 801b034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b038:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801b03c:	ee07 0a90 	vmov	s15, r0
 801b040:	4a25      	ldr	r2, [pc, #148]	; (801b0d8 <nema_blit_rotate+0x1b0>)
 801b042:	9101      	str	r1, [sp, #4]
 801b044:	9302      	str	r3, [sp, #8]
 801b046:	9304      	str	r3, [sp, #16]
 801b048:	eeb1 7a47 	vneg.f32	s14, s14
 801b04c:	9205      	str	r2, [sp, #20]
 801b04e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b052:	e797      	b.n	801af84 <nema_blit_rotate+0x5c>
 801b054:	ee07 5a90 	vmov	s15, r5
 801b058:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b05c:	ee07 0a90 	vmov	s15, r0
 801b060:	4631      	mov	r1, r6
 801b062:	2200      	movs	r2, #0
 801b064:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801b068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b06c:	463e      	mov	r6, r7
 801b06e:	eeb1 7a47 	vneg.f32	s14, s14
 801b072:	460f      	mov	r7, r1
 801b074:	eef1 7a67 	vneg.f32	s15, s15
 801b078:	9201      	str	r2, [sp, #4]
 801b07a:	9205      	str	r2, [sp, #20]
 801b07c:	9302      	str	r3, [sp, #8]
 801b07e:	9304      	str	r3, [sp, #16]
 801b080:	e780      	b.n	801af84 <nema_blit_rotate+0x5c>
 801b082:	ee07 5a90 	vmov	s15, r5
 801b086:	1830      	adds	r0, r6, r0
 801b088:	2300      	movs	r3, #0
 801b08a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801b08e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b092:	ee07 0a10 	vmov	s14, r0
 801b096:	4910      	ldr	r1, [pc, #64]	; (801b0d8 <nema_blit_rotate+0x1b0>)
 801b098:	9302      	str	r3, [sp, #8]
 801b09a:	9101      	str	r1, [sp, #4]
 801b09c:	9304      	str	r3, [sp, #16]
 801b09e:	9205      	str	r2, [sp, #20]
 801b0a0:	eef1 7a67 	vneg.f32	s15, s15
 801b0a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b0a8:	e76c      	b.n	801af84 <nema_blit_rotate+0x5c>
 801b0aa:	ee07 0a90 	vmov	s15, r0
 801b0ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b0b2:	ee07 1a90 	vmov	s15, r1
 801b0b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801b0ba:	2300      	movs	r3, #0
 801b0bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b0c0:	9201      	str	r2, [sp, #4]
 801b0c2:	9205      	str	r2, [sp, #20]
 801b0c4:	9302      	str	r3, [sp, #8]
 801b0c6:	9304      	str	r3, [sp, #16]
 801b0c8:	eeb1 7a47 	vneg.f32	s14, s14
 801b0cc:	eef1 7a67 	vneg.f32	s15, s15
 801b0d0:	e758      	b.n	801af84 <nema_blit_rotate+0x5c>
 801b0d2:	bf00      	nop
 801b0d4:	20198594 	.word	0x20198594
 801b0d8:	bf800000 	.word	0xbf800000
 801b0dc:	00000000 	.word	0x00000000

0801b0e0 <nema_blit_tri_fit>:
 801b0e0:	2803      	cmp	r0, #3
 801b0e2:	d801      	bhi.n	801b0e8 <nema_blit_tri_fit+0x8>
 801b0e4:	2903      	cmp	r1, #3
 801b0e6:	d900      	bls.n	801b0ea <nema_blit_tri_fit+0xa>
 801b0e8:	4770      	bx	lr
 801b0ea:	2a03      	cmp	r2, #3
 801b0ec:	d8fc      	bhi.n	801b0e8 <nema_blit_tri_fit+0x8>
 801b0ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0f2:	460c      	mov	r4, r1
 801b0f4:	493b      	ldr	r1, [pc, #236]	; (801b1e4 <nema_blit_tri_fit+0x104>)
 801b0f6:	4603      	mov	r3, r0
 801b0f8:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 801b0fc:	ee07 0a90 	vmov	s15, r0
 801b100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b104:	ee07 1a90 	vmov	s15, r1
 801b108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b10c:	b08a      	sub	sp, #40	; 0x28
 801b10e:	f04f 0c00 	mov.w	ip, #0
 801b112:	edcd 7a08 	vstr	s15, [sp, #32]
 801b116:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 801b11a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801b11e:	ed8d 7a03 	vstr	s14, [sp, #12]
 801b122:	ed8d 7a04 	vstr	s14, [sp, #16]
 801b126:	ee12 8a10 	vmov	r8, s4
 801b12a:	ee11 9a90 	vmov	r9, s3
 801b12e:	ee11 aa10 	vmov	sl, s2
 801b132:	ee10 6a10 	vmov	r6, s0
 801b136:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 801b13a:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 801b13e:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
 801b142:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 801b146:	f8cd c008 	str.w	ip, [sp, #8]
 801b14a:	f8cd c014 	str.w	ip, [sp, #20]
 801b14e:	f8cd c018 	str.w	ip, [sp, #24]
 801b152:	f8cd c01c 	str.w	ip, [sp, #28]
 801b156:	ed52 6a08 	vldr	s13, [r2, #-32]	; 0xffffffe0
 801b15a:	ed14 4a08 	vldr	s8, [r4, #-32]	; 0xffffffe0
 801b15e:	ed53 1a08 	vldr	s3, [r3, #-32]	; 0xffffffe0
 801b162:	ed12 7a04 	vldr	s14, [r2, #-16]
 801b166:	ed54 4a04 	vldr	s9, [r4, #-16]
 801b16a:	ed13 2a04 	vldr	s4, [r3, #-16]
 801b16e:	eef0 5a62 	vmov.f32	s11, s5
 801b172:	ee05 8a10 	vmov	s10, r8
 801b176:	ee03 9a10 	vmov	s6, r9
 801b17a:	eef0 3a46 	vmov.f32	s7, s12
 801b17e:	eeb0 1a46 	vmov.f32	s2, s12
 801b182:	ee12 7a90 	vmov	r7, s5
 801b186:	ee02 aa90 	vmov	s5, sl
 801b18a:	ee10 5a90 	vmov	r5, s1
 801b18e:	f000 f889 	bl	801b2a4 <nema_interpolate_tx_ty>
 801b192:	ee00 6a10 	vmov	s0, r6
 801b196:	f000 f90f 	bl	801b3b8 <nema_f2fx>
 801b19a:	ee00 5a10 	vmov	s0, r5
 801b19e:	4604      	mov	r4, r0
 801b1a0:	f000 f90a 	bl	801b3b8 <nema_f2fx>
 801b1a4:	ee00 aa10 	vmov	s0, sl
 801b1a8:	4605      	mov	r5, r0
 801b1aa:	f000 f905 	bl	801b3b8 <nema_f2fx>
 801b1ae:	ee00 9a10 	vmov	s0, r9
 801b1b2:	4606      	mov	r6, r0
 801b1b4:	f000 f900 	bl	801b3b8 <nema_f2fx>
 801b1b8:	ee00 8a10 	vmov	s0, r8
 801b1bc:	4681      	mov	r9, r0
 801b1be:	f000 f8fb 	bl	801b3b8 <nema_f2fx>
 801b1c2:	ee00 7a10 	vmov	s0, r7
 801b1c6:	4680      	mov	r8, r0
 801b1c8:	f000 f8f6 	bl	801b3b8 <nema_f2fx>
 801b1cc:	464b      	mov	r3, r9
 801b1ce:	e9cd 8000 	strd	r8, r0, [sp]
 801b1d2:	4632      	mov	r2, r6
 801b1d4:	4629      	mov	r1, r5
 801b1d6:	4620      	mov	r0, r4
 801b1d8:	f000 fce4 	bl	801bba4 <nema_raster_triangle_fx>
 801b1dc:	b00a      	add	sp, #40	; 0x28
 801b1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1e2:	bf00      	nop
 801b1e4:	20198594 	.word	0x20198594

0801b1e8 <nema_blit_quad_fit>:
 801b1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b1ec:	ed2d 8b08 	vpush	{d8-d11}
 801b1f0:	4b2b      	ldr	r3, [pc, #172]	; (801b2a0 <nema_blit_quad_fit+0xb8>)
 801b1f2:	b08e      	sub	sp, #56	; 0x38
 801b1f4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 801b1f8:	aa05      	add	r2, sp, #20
 801b1fa:	eef0 ba40 	vmov.f32	s23, s0
 801b1fe:	eeb0 ba60 	vmov.f32	s22, s1
 801b202:	eef0 aa41 	vmov.f32	s21, s2
 801b206:	eeb0 aa61 	vmov.f32	s20, s3
 801b20a:	eef0 9a42 	vmov.f32	s19, s4
 801b20e:	eeb0 9a62 	vmov.f32	s18, s5
 801b212:	eef0 8a43 	vmov.f32	s17, s6
 801b216:	eeb0 8a63 	vmov.f32	s16, s7
 801b21a:	f000 f9e1 	bl	801b5e0 <nema_mat3x3_quad_to_rect>
 801b21e:	b120      	cbz	r0, 801b22a <nema_blit_quad_fit+0x42>
 801b220:	b00e      	add	sp, #56	; 0x38
 801b222:	ecbd 8b08 	vpop	{d8-d11}
 801b226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b22a:	a805      	add	r0, sp, #20
 801b22c:	f000 fb94 	bl	801b958 <nema_set_matrix>
 801b230:	eeb0 0a6b 	vmov.f32	s0, s23
 801b234:	f000 f8c0 	bl	801b3b8 <nema_f2fx>
 801b238:	eeb0 0a4b 	vmov.f32	s0, s22
 801b23c:	4604      	mov	r4, r0
 801b23e:	f000 f8bb 	bl	801b3b8 <nema_f2fx>
 801b242:	eeb0 0a6a 	vmov.f32	s0, s21
 801b246:	4605      	mov	r5, r0
 801b248:	f000 f8b6 	bl	801b3b8 <nema_f2fx>
 801b24c:	eeb0 0a4a 	vmov.f32	s0, s20
 801b250:	4606      	mov	r6, r0
 801b252:	f000 f8b1 	bl	801b3b8 <nema_f2fx>
 801b256:	eeb0 0a69 	vmov.f32	s0, s19
 801b25a:	4607      	mov	r7, r0
 801b25c:	f000 f8ac 	bl	801b3b8 <nema_f2fx>
 801b260:	eeb0 0a49 	vmov.f32	s0, s18
 801b264:	4682      	mov	sl, r0
 801b266:	f000 f8a7 	bl	801b3b8 <nema_f2fx>
 801b26a:	eeb0 0a68 	vmov.f32	s0, s17
 801b26e:	4680      	mov	r8, r0
 801b270:	f000 f8a2 	bl	801b3b8 <nema_f2fx>
 801b274:	eeb0 0a48 	vmov.f32	s0, s16
 801b278:	4681      	mov	r9, r0
 801b27a:	f000 f89d 	bl	801b3b8 <nema_f2fx>
 801b27e:	f8cd a000 	str.w	sl, [sp]
 801b282:	e9cd 9002 	strd	r9, r0, [sp, #8]
 801b286:	f8cd 8004 	str.w	r8, [sp, #4]
 801b28a:	463b      	mov	r3, r7
 801b28c:	4632      	mov	r2, r6
 801b28e:	4629      	mov	r1, r5
 801b290:	4620      	mov	r0, r4
 801b292:	f000 fced 	bl	801bc70 <nema_raster_quad_fx>
 801b296:	b00e      	add	sp, #56	; 0x38
 801b298:	ecbd 8b08 	vpop	{d8-d11}
 801b29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2a0:	20198594 	.word	0x20198594

0801b2a4 <nema_interpolate_tx_ty>:
 801b2a4:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 801b2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2ac:	d407      	bmi.n	801b2be <nema_interpolate_tx_ty+0x1a>
 801b2ae:	eddf 7a40 	vldr	s15, [pc, #256]	; 801b3b0 <nema_interpolate_tx_ty+0x10c>
 801b2b2:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801b2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2ba:	d807      	bhi.n	801b2cc <nema_interpolate_tx_ty+0x28>
 801b2bc:	4770      	bx	lr
 801b2be:	eddf 7a3d 	vldr	s15, [pc, #244]	; 801b3b4 <nema_interpolate_tx_ty+0x110>
 801b2c2:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801b2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2ca:	daf7      	bge.n	801b2bc <nema_interpolate_tx_ty+0x18>
 801b2cc:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 801b2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2d4:	d45b      	bmi.n	801b38e <nema_interpolate_tx_ty+0xea>
 801b2d6:	eddf 7a36 	vldr	s15, [pc, #216]	; 801b3b0 <nema_interpolate_tx_ty+0x10c>
 801b2da:	eef4 3ae7 	vcmpe.f32	s7, s15
 801b2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2e2:	d9eb      	bls.n	801b2bc <nema_interpolate_tx_ty+0x18>
 801b2e4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801b2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2ec:	d457      	bmi.n	801b39e <nema_interpolate_tx_ty+0xfa>
 801b2ee:	eddf 7a30 	vldr	s15, [pc, #192]	; 801b3b0 <nema_interpolate_tx_ty+0x10c>
 801b2f2:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801b2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2fa:	d9df      	bls.n	801b2bc <nema_interpolate_tx_ty+0x18>
 801b2fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b300:	b570      	push	{r4, r5, r6, lr}
 801b302:	ee15 3a90 	vmov	r3, s11
 801b306:	ee13 2a10 	vmov	r2, s6
 801b30a:	eec7 5a86 	vdiv.f32	s11, s15, s12
 801b30e:	ee87 3a81 	vdiv.f32	s6, s15, s2
 801b312:	ee15 4a10 	vmov	r4, s10
 801b316:	ee87 5aa3 	vdiv.f32	s10, s15, s7
 801b31a:	ee63 1a21 	vmul.f32	s3, s6, s3
 801b31e:	ee23 2a02 	vmul.f32	s4, s6, s4
 801b322:	ee25 4a04 	vmul.f32	s8, s10, s8
 801b326:	ee65 4a24 	vmul.f32	s9, s10, s9
 801b32a:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801b32e:	ee25 7a87 	vmul.f32	s14, s11, s14
 801b332:	b092      	sub	sp, #72	; 0x48
 801b334:	a809      	add	r0, sp, #36	; 0x24
 801b336:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 801b33a:	edcd 2a0a 	vstr	s5, [sp, #40]	; 0x28
 801b33e:	edcd 0a0c 	vstr	s1, [sp, #48]	; 0x30
 801b342:	920d      	str	r2, [sp, #52]	; 0x34
 801b344:	930e      	str	r3, [sp, #56]	; 0x38
 801b346:	edcd 1a00 	vstr	s3, [sp]
 801b34a:	ed8d 2a03 	vstr	s4, [sp, #12]
 801b34e:	ed8d 4a01 	vstr	s8, [sp, #4]
 801b352:	edcd 4a04 	vstr	s9, [sp, #16]
 801b356:	edcd 6a02 	vstr	s13, [sp, #8]
 801b35a:	ed8d 7a05 	vstr	s14, [sp, #20]
 801b35e:	ed8d 3a06 	vstr	s6, [sp, #24]
 801b362:	ed8d 5a07 	vstr	s10, [sp, #28]
 801b366:	edcd 5a08 	vstr	s11, [sp, #32]
 801b36a:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 801b36e:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801b372:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 801b376:	940b      	str	r4, [sp, #44]	; 0x2c
 801b378:	f000 f8d2 	bl	801b520 <nema_mat3x3_adj>
 801b37c:	a909      	add	r1, sp, #36	; 0x24
 801b37e:	4668      	mov	r0, sp
 801b380:	f000 f838 	bl	801b3f4 <nema_mat3x3_mul>
 801b384:	4668      	mov	r0, sp
 801b386:	f000 fae7 	bl	801b958 <nema_set_matrix>
 801b38a:	b012      	add	sp, #72	; 0x48
 801b38c:	bd70      	pop	{r4, r5, r6, pc}
 801b38e:	eddf 7a09 	vldr	s15, [pc, #36]	; 801b3b4 <nema_interpolate_tx_ty+0x110>
 801b392:	eef4 3ae7 	vcmpe.f32	s7, s15
 801b396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b39a:	da8f      	bge.n	801b2bc <nema_interpolate_tx_ty+0x18>
 801b39c:	e7a2      	b.n	801b2e4 <nema_interpolate_tx_ty+0x40>
 801b39e:	eddf 7a05 	vldr	s15, [pc, #20]	; 801b3b4 <nema_interpolate_tx_ty+0x110>
 801b3a2:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801b3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3aa:	da87      	bge.n	801b2bc <nema_interpolate_tx_ty+0x18>
 801b3ac:	e7a6      	b.n	801b2fc <nema_interpolate_tx_ty+0x58>
 801b3ae:	bf00      	nop
 801b3b0:	3727c5ac 	.word	0x3727c5ac
 801b3b4:	b727c5ac 	.word	0xb727c5ac

0801b3b8 <nema_f2fx>:
 801b3b8:	eddf 7a06 	vldr	s15, [pc, #24]	; 801b3d4 <nema_f2fx+0x1c>
 801b3bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801b3c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b3c4:	ee30 0a07 	vadd.f32	s0, s0, s14
 801b3c8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801b3cc:	ee17 0a90 	vmov	r0, s15
 801b3d0:	4770      	bx	lr
 801b3d2:	bf00      	nop
 801b3d4:	47800000 	.word	0x47800000

0801b3d8 <nema_mat3x3_load_identity>:
 801b3d8:	2300      	movs	r3, #0
 801b3da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801b3de:	61c3      	str	r3, [r0, #28]
 801b3e0:	6202      	str	r2, [r0, #32]
 801b3e2:	6102      	str	r2, [r0, #16]
 801b3e4:	6002      	str	r2, [r0, #0]
 801b3e6:	6183      	str	r3, [r0, #24]
 801b3e8:	6143      	str	r3, [r0, #20]
 801b3ea:	60c3      	str	r3, [r0, #12]
 801b3ec:	6083      	str	r3, [r0, #8]
 801b3ee:	6043      	str	r3, [r0, #4]
 801b3f0:	4770      	bx	lr
 801b3f2:	bf00      	nop

0801b3f4 <nema_mat3x3_mul>:
 801b3f4:	edd1 4a01 	vldr	s9, [r1, #4]
 801b3f8:	ed91 0a04 	vldr	s0, [r1, #16]
 801b3fc:	edd1 0a05 	vldr	s1, [r1, #20]
 801b400:	ed2d 8b0c 	vpush	{d8-d13}
 801b404:	ed91 6a00 	vldr	s12, [r1]
 801b408:	ed91 4a03 	vldr	s8, [r1, #12]
 801b40c:	ed91 aa02 	vldr	s20, [r1, #8]
 801b410:	edd0 3a03 	vldr	s7, [r0, #12]
 801b414:	ed90 8a04 	vldr	s16, [r0, #16]
 801b418:	ed90 9a00 	vldr	s18, [r0]
 801b41c:	edd0 8a01 	vldr	s17, [r0, #4]
 801b420:	edd0 9a06 	vldr	s19, [r0, #24]
 801b424:	ed90 1a07 	vldr	s2, [r0, #28]
 801b428:	edd1 aa06 	vldr	s21, [r1, #24]
 801b42c:	edd1 6a07 	vldr	s13, [r1, #28]
 801b430:	ed91 7a08 	vldr	s14, [r1, #32]
 801b434:	ed90 5a02 	vldr	s10, [r0, #8]
 801b438:	edd0 5a05 	vldr	s11, [r0, #20]
 801b43c:	ee69 da06 	vmul.f32	s27, s18, s12
 801b440:	ee29 da24 	vmul.f32	s26, s18, s9
 801b444:	ee66 ca23 	vmul.f32	s25, s12, s7
 801b448:	ee24 caa3 	vmul.f32	s24, s9, s7
 801b44c:	ee68 1a84 	vmul.f32	s3, s17, s8
 801b450:	ee29 9a0a 	vmul.f32	s18, s18, s20
 801b454:	ee28 2a80 	vmul.f32	s4, s17, s0
 801b458:	ee26 6a29 	vmul.f32	s12, s12, s19
 801b45c:	ee64 2a08 	vmul.f32	s5, s8, s16
 801b460:	ee6a ba23 	vmul.f32	s23, s20, s7
 801b464:	ee24 baa9 	vmul.f32	s22, s9, s19
 801b468:	ee20 3a08 	vmul.f32	s6, s0, s16
 801b46c:	ee60 3a88 	vmul.f32	s7, s1, s16
 801b470:	ee60 4a01 	vmul.f32	s9, s0, s2
 801b474:	ee68 8aa0 	vmul.f32	s17, s17, s1
 801b478:	ee24 4a01 	vmul.f32	s8, s8, s2
 801b47c:	ee6a 7a29 	vmul.f32	s15, s20, s19
 801b480:	ee20 1a81 	vmul.f32	s2, s1, s2
 801b484:	edd0 0a08 	vldr	s1, [r0, #32]
 801b488:	ee25 0a2a 	vmul.f32	s0, s10, s21
 801b48c:	ee79 8a28 	vadd.f32	s17, s18, s17
 801b490:	ee2a 8aa5 	vmul.f32	s16, s21, s11
 801b494:	ee25 9a26 	vmul.f32	s18, s10, s13
 801b498:	ee7d 1aa1 	vadd.f32	s3, s27, s3
 801b49c:	ee3d 2a02 	vadd.f32	s4, s26, s4
 801b4a0:	ee7c 2aa2 	vadd.f32	s5, s25, s5
 801b4a4:	ee3c 3a03 	vadd.f32	s6, s24, s6
 801b4a8:	ee7b 3aa3 	vadd.f32	s7, s23, s7
 801b4ac:	ee36 4a04 	vadd.f32	s8, s12, s8
 801b4b0:	ee7b 4a24 	vadd.f32	s9, s22, s9
 801b4b4:	ee77 7a81 	vadd.f32	s15, s15, s2
 801b4b8:	ee25 5a07 	vmul.f32	s10, s10, s14
 801b4bc:	ee26 1aa5 	vmul.f32	s2, s13, s11
 801b4c0:	ee2a 6aa0 	vmul.f32	s12, s21, s1
 801b4c4:	ee67 5a25 	vmul.f32	s11, s14, s11
 801b4c8:	ee66 6aa0 	vmul.f32	s13, s13, s1
 801b4cc:	ee27 7a20 	vmul.f32	s14, s14, s1
 801b4d0:	ee32 2a09 	vadd.f32	s4, s4, s18
 801b4d4:	ee38 5a85 	vadd.f32	s10, s17, s10
 801b4d8:	ee72 2a88 	vadd.f32	s5, s5, s16
 801b4dc:	ee71 1a80 	vadd.f32	s3, s3, s0
 801b4e0:	ee33 3a01 	vadd.f32	s6, s6, s2
 801b4e4:	ee73 5aa5 	vadd.f32	s11, s7, s11
 801b4e8:	ee34 6a06 	vadd.f32	s12, s8, s12
 801b4ec:	ee74 6aa6 	vadd.f32	s13, s9, s13
 801b4f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b4f4:	edc0 1a00 	vstr	s3, [r0]
 801b4f8:	ed80 2a01 	vstr	s4, [r0, #4]
 801b4fc:	ed80 5a02 	vstr	s10, [r0, #8]
 801b500:	edc0 2a03 	vstr	s5, [r0, #12]
 801b504:	ed80 3a04 	vstr	s6, [r0, #16]
 801b508:	edc0 5a05 	vstr	s11, [r0, #20]
 801b50c:	ed80 6a06 	vstr	s12, [r0, #24]
 801b510:	edc0 6a07 	vstr	s13, [r0, #28]
 801b514:	edc0 7a08 	vstr	s15, [r0, #32]
 801b518:	ecbd 8b0c 	vpop	{d8-d13}
 801b51c:	4770      	bx	lr
 801b51e:	bf00      	nop

0801b520 <nema_mat3x3_adj>:
 801b520:	edd0 3a03 	vldr	s7, [r0, #12]
 801b524:	edd0 4a04 	vldr	s9, [r0, #16]
 801b528:	ed90 6a08 	vldr	s12, [r0, #32]
 801b52c:	ed90 5a07 	vldr	s10, [r0, #28]
 801b530:	ed90 4a05 	vldr	s8, [r0, #20]
 801b534:	edd0 7a00 	vldr	s15, [r0]
 801b538:	edd0 6a02 	vldr	s13, [r0, #8]
 801b53c:	edd0 5a01 	vldr	s11, [r0, #4]
 801b540:	ed90 7a06 	vldr	s14, [r0, #24]
 801b544:	ed2d 8b04 	vpush	{d8-d9}
 801b548:	ee24 1a86 	vmul.f32	s2, s9, s12
 801b54c:	ee25 9a04 	vmul.f32	s18, s10, s8
 801b550:	ee66 8a25 	vmul.f32	s17, s12, s11
 801b554:	ee24 8aa6 	vmul.f32	s16, s9, s13
 801b558:	ee65 1a26 	vmul.f32	s3, s10, s13
 801b55c:	ee24 2a25 	vmul.f32	s4, s8, s11
 801b560:	ee64 2a07 	vmul.f32	s5, s8, s14
 801b564:	ee66 0a87 	vmul.f32	s1, s13, s14
 801b568:	ee25 3a23 	vmul.f32	s6, s10, s7
 801b56c:	ee24 4a27 	vmul.f32	s8, s8, s15
 801b570:	ee26 0a23 	vmul.f32	s0, s12, s7
 801b574:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801b578:	ee26 6a27 	vmul.f32	s12, s12, s15
 801b57c:	ee25 5a27 	vmul.f32	s10, s10, s15
 801b580:	ee64 7aa7 	vmul.f32	s15, s9, s15
 801b584:	ee64 4a87 	vmul.f32	s9, s9, s14
 801b588:	ee25 7a87 	vmul.f32	s14, s11, s14
 801b58c:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801b590:	ee31 1a49 	vsub.f32	s2, s2, s18
 801b594:	ee71 1ae8 	vsub.f32	s3, s3, s17
 801b598:	ee32 2a48 	vsub.f32	s4, s4, s16
 801b59c:	ecbd 8b04 	vpop	{d8-d9}
 801b5a0:	ee72 3ac0 	vsub.f32	s7, s5, s0
 801b5a4:	ee36 6a60 	vsub.f32	s12, s12, s1
 801b5a8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 801b5ac:	ee73 4a64 	vsub.f32	s9, s6, s9
 801b5b0:	ee37 7a45 	vsub.f32	s14, s14, s10
 801b5b4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801b5b8:	ed80 1a00 	vstr	s2, [r0]
 801b5bc:	edc0 1a01 	vstr	s3, [r0, #4]
 801b5c0:	ed80 2a02 	vstr	s4, [r0, #8]
 801b5c4:	edc0 3a03 	vstr	s7, [r0, #12]
 801b5c8:	ed80 6a04 	vstr	s12, [r0, #16]
 801b5cc:	edc0 6a05 	vstr	s13, [r0, #20]
 801b5d0:	edc0 4a06 	vstr	s9, [r0, #24]
 801b5d4:	ed80 7a07 	vstr	s14, [r0, #28]
 801b5d8:	edc0 7a08 	vstr	s15, [r0, #32]
 801b5dc:	4770      	bx	lr
 801b5de:	bf00      	nop

0801b5e0 <nema_mat3x3_quad_to_rect>:
 801b5e0:	ee70 6a41 	vsub.f32	s13, s0, s2
 801b5e4:	ee76 6a82 	vadd.f32	s13, s13, s4
 801b5e8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801b5ec:	ee30 6ae1 	vsub.f32	s12, s1, s3
 801b5f0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801b5f4:	ee36 6a22 	vadd.f32	s12, s12, s5
 801b5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5fc:	ed2d 8b06 	vpush	{d8-d10}
 801b600:	ee36 6a63 	vsub.f32	s12, s12, s7
 801b604:	ee09 0a10 	vmov	s18, r0
 801b608:	ee08 1a90 	vmov	s17, r1
 801b60c:	f100 812e 	bmi.w	801b86c <nema_mat3x3_quad_to_rect+0x28c>
 801b610:	eddf 7aa4 	vldr	s15, [pc, #656]	; 801b8a4 <nema_mat3x3_quad_to_rect+0x2c4>
 801b614:	eef4 6ae7 	vcmpe.f32	s13, s15
 801b618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b61c:	d80d      	bhi.n	801b63a <nema_mat3x3_quad_to_rect+0x5a>
 801b61e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801b622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b626:	f100 80f7 	bmi.w	801b818 <nema_mat3x3_quad_to_rect+0x238>
 801b62a:	eddf 7a9e 	vldr	s15, [pc, #632]	; 801b8a4 <nema_mat3x3_quad_to_rect+0x2c4>
 801b62e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801b632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b636:	f240 80f7 	bls.w	801b828 <nema_mat3x3_quad_to_rect+0x248>
 801b63a:	ee31 7a42 	vsub.f32	s14, s2, s4
 801b63e:	ee73 7ae2 	vsub.f32	s15, s7, s5
 801b642:	ee33 2a42 	vsub.f32	s4, s6, s4
 801b646:	ee71 2ae2 	vsub.f32	s5, s3, s5
 801b64a:	ee67 5a27 	vmul.f32	s11, s14, s15
 801b64e:	ee22 5a22 	vmul.f32	s10, s4, s5
 801b652:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801b656:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b65a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b65e:	ee26 7a07 	vmul.f32	s14, s12, s14
 801b662:	ee66 6aa2 	vmul.f32	s13, s13, s5
 801b666:	ee26 6a02 	vmul.f32	s12, s12, s4
 801b66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b66e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801b672:	ee77 6a66 	vsub.f32	s13, s14, s13
 801b676:	f100 80c5 	bmi.w	801b804 <nema_mat3x3_quad_to_rect+0x224>
 801b67a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801b8a4 <nema_mat3x3_quad_to_rect+0x2c4>
 801b67e:	eef4 5ac7 	vcmpe.f32	s11, s14
 801b682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b686:	bf94      	ite	ls
 801b688:	2301      	movls	r3, #1
 801b68a:	2300      	movhi	r3, #0
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	f040 8106 	bne.w	801b89e <nema_mat3x3_quad_to_rect+0x2be>
 801b692:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b696:	ee87 6a25 	vdiv.f32	s12, s14, s11
 801b69a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b69e:	ee66 6a86 	vmul.f32	s13, s13, s12
 801b6a2:	ee21 5a27 	vmul.f32	s10, s2, s15
 801b6a6:	ee61 5aa7 	vmul.f32	s11, s3, s15
 801b6aa:	ee63 2aa6 	vmul.f32	s5, s7, s13
 801b6ae:	ee31 1a40 	vsub.f32	s2, s2, s0
 801b6b2:	ee23 6a26 	vmul.f32	s12, s6, s13
 801b6b6:	ee33 2a40 	vsub.f32	s4, s6, s0
 801b6ba:	ee71 1ae0 	vsub.f32	s3, s3, s1
 801b6be:	ee73 3ae0 	vsub.f32	s7, s7, s1
 801b6c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b6c6:	ee32 2a06 	vadd.f32	s4, s4, s12
 801b6ca:	ee71 1aa5 	vadd.f32	s3, s3, s11
 801b6ce:	ee73 2aa2 	vadd.f32	s5, s7, s5
 801b6d2:	ed82 0a02 	vstr	s0, [r2, #8]
 801b6d6:	edc2 0a05 	vstr	s1, [r2, #20]
 801b6da:	edc2 7a06 	vstr	s15, [r2, #24]
 801b6de:	edc2 6a07 	vstr	s13, [r2, #28]
 801b6e2:	ed82 7a08 	vstr	s14, [r2, #32]
 801b6e6:	ed82 1a00 	vstr	s2, [r2]
 801b6ea:	ed82 2a01 	vstr	s4, [r2, #4]
 801b6ee:	edc2 1a03 	vstr	s3, [r2, #12]
 801b6f2:	edc2 2a04 	vstr	s5, [r2, #16]
 801b6f6:	ee20 4aa6 	vmul.f32	s8, s1, s13
 801b6fa:	ee60 5aa7 	vmul.f32	s11, s1, s15
 801b6fe:	ee32 3ac4 	vsub.f32	s6, s5, s8
 801b702:	ee31 7ae5 	vsub.f32	s14, s3, s11
 801b706:	ee21 8aa6 	vmul.f32	s16, s3, s13
 801b70a:	ee22 6aa7 	vmul.f32	s12, s5, s15
 801b70e:	ee27 7a02 	vmul.f32	s14, s14, s4
 801b712:	ee23 4a01 	vmul.f32	s8, s6, s2
 801b716:	ee38 8a46 	vsub.f32	s16, s16, s12
 801b71a:	ee34 4a47 	vsub.f32	s8, s8, s14
 801b71e:	ee20 7a08 	vmul.f32	s14, s0, s16
 801b722:	ee34 4a07 	vadd.f32	s8, s8, s14
 801b726:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 801b72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b72e:	f100 80ac 	bmi.w	801b88a <nema_mat3x3_quad_to_rect+0x2aa>
 801b732:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 801b8a4 <nema_mat3x3_quad_to_rect+0x2c4>
 801b736:	eeb4 4ac7 	vcmpe.f32	s8, s14
 801b73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b73e:	bf94      	ite	ls
 801b740:	2001      	movls	r0, #1
 801b742:	2000      	movhi	r0, #0
 801b744:	2800      	cmp	r0, #0
 801b746:	f040 80aa 	bne.w	801b89e <nema_mat3x3_quad_to_rect+0x2be>
 801b74a:	ee20 5a82 	vmul.f32	s10, s1, s4
 801b74e:	ee60 4a26 	vmul.f32	s9, s0, s13
 801b752:	ee20 6a27 	vmul.f32	s12, s0, s15
 801b756:	ee60 9a22 	vmul.f32	s19, s0, s5
 801b75a:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 801b75e:	ee60 0a81 	vmul.f32	s1, s1, s2
 801b762:	ee20 7a21 	vmul.f32	s14, s0, s3
 801b766:	eeca 3a04 	vdiv.f32	s7, s20, s8
 801b76a:	ee74 4ac2 	vsub.f32	s9, s9, s4
 801b76e:	ee61 6a26 	vmul.f32	s13, s2, s13
 801b772:	ee67 7a82 	vmul.f32	s15, s15, s4
 801b776:	ee35 5a69 	vsub.f32	s10, s10, s19
 801b77a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 801b77e:	ee31 6a46 	vsub.f32	s12, s2, s12
 801b782:	ee62 2a81 	vmul.f32	s5, s5, s2
 801b786:	ee37 7a60 	vsub.f32	s14, s14, s1
 801b78a:	ee21 2a82 	vmul.f32	s4, s3, s4
 801b78e:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801b792:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801b796:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b79a:	ee23 4a23 	vmul.f32	s8, s6, s7
 801b79e:	ee65 6a23 	vmul.f32	s13, s10, s7
 801b7a2:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801b7a6:	ee64 4aa3 	vmul.f32	s9, s9, s7
 801b7aa:	ee26 6a23 	vmul.f32	s12, s12, s7
 801b7ae:	ee27 7a23 	vmul.f32	s14, s14, s7
 801b7b2:	ee72 2ac2 	vsub.f32	s5, s5, s4
 801b7b6:	ee24 4a09 	vmul.f32	s8, s8, s18
 801b7ba:	ee65 5aa8 	vmul.f32	s11, s11, s17
 801b7be:	ee28 8a23 	vmul.f32	s16, s16, s7
 801b7c2:	ee24 5a89 	vmul.f32	s10, s9, s18
 801b7c6:	ee26 6a28 	vmul.f32	s12, s12, s17
 801b7ca:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801b7ce:	ee66 6a89 	vmul.f32	s13, s13, s18
 801b7d2:	ee27 7a28 	vmul.f32	s14, s14, s17
 801b7d6:	ee62 2aa3 	vmul.f32	s5, s5, s7
 801b7da:	ed82 4a00 	vstr	s8, [r2]
 801b7de:	edc2 5a03 	vstr	s11, [r2, #12]
 801b7e2:	ed82 8a06 	vstr	s16, [r2, #24]
 801b7e6:	ed82 5a01 	vstr	s10, [r2, #4]
 801b7ea:	ed82 6a04 	vstr	s12, [r2, #16]
 801b7ee:	edc2 7a07 	vstr	s15, [r2, #28]
 801b7f2:	edc2 6a02 	vstr	s13, [r2, #8]
 801b7f6:	ed82 7a05 	vstr	s14, [r2, #20]
 801b7fa:	edc2 2a08 	vstr	s5, [r2, #32]
 801b7fe:	ecbd 8b06 	vpop	{d8-d10}
 801b802:	4770      	bx	lr
 801b804:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801b8a8 <nema_mat3x3_quad_to_rect+0x2c8>
 801b808:	eef4 5ac7 	vcmpe.f32	s11, s14
 801b80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b810:	bfac      	ite	ge
 801b812:	2301      	movge	r3, #1
 801b814:	2300      	movlt	r3, #0
 801b816:	e739      	b.n	801b68c <nema_mat3x3_quad_to_rect+0xac>
 801b818:	eddf 7a23 	vldr	s15, [pc, #140]	; 801b8a8 <nema_mat3x3_quad_to_rect+0x2c8>
 801b81c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801b820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b824:	f6ff af09 	blt.w	801b63a <nema_mat3x3_quad_to_rect+0x5a>
 801b828:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801b8ac <nema_mat3x3_quad_to_rect+0x2cc>
 801b82c:	ee32 2a41 	vsub.f32	s4, s4, s2
 801b830:	ee72 2ae1 	vsub.f32	s5, s5, s3
 801b834:	ee31 1a40 	vsub.f32	s2, s2, s0
 801b838:	ee71 1ae0 	vsub.f32	s3, s3, s1
 801b83c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801b840:	eef0 7a47 	vmov.f32	s15, s14
 801b844:	ed82 2a01 	vstr	s4, [r2, #4]
 801b848:	ed82 1a00 	vstr	s2, [r2]
 801b84c:	edc2 2a04 	vstr	s5, [r2, #16]
 801b850:	edc2 1a03 	vstr	s3, [r2, #12]
 801b854:	ed82 0a02 	vstr	s0, [r2, #8]
 801b858:	edc2 0a05 	vstr	s1, [r2, #20]
 801b85c:	ed82 7a06 	vstr	s14, [r2, #24]
 801b860:	ed82 7a07 	vstr	s14, [r2, #28]
 801b864:	eef0 6a47 	vmov.f32	s13, s14
 801b868:	6213      	str	r3, [r2, #32]
 801b86a:	e744      	b.n	801b6f6 <nema_mat3x3_quad_to_rect+0x116>
 801b86c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801b8a8 <nema_mat3x3_quad_to_rect+0x2c8>
 801b870:	eef4 6ae7 	vcmpe.f32	s13, s15
 801b874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b878:	f6ff aedf 	blt.w	801b63a <nema_mat3x3_quad_to_rect+0x5a>
 801b87c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801b880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b884:	f57f aed1 	bpl.w	801b62a <nema_mat3x3_quad_to_rect+0x4a>
 801b888:	e7c6      	b.n	801b818 <nema_mat3x3_quad_to_rect+0x238>
 801b88a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 801b8a8 <nema_mat3x3_quad_to_rect+0x2c8>
 801b88e:	eeb4 4ac7 	vcmpe.f32	s8, s14
 801b892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b896:	bfac      	ite	ge
 801b898:	2001      	movge	r0, #1
 801b89a:	2000      	movlt	r0, #0
 801b89c:	e752      	b.n	801b744 <nema_mat3x3_quad_to_rect+0x164>
 801b89e:	f04f 30ff 	mov.w	r0, #4294967295
 801b8a2:	e7ac      	b.n	801b7fe <nema_mat3x3_quad_to_rect+0x21e>
 801b8a4:	3727c5ac 	.word	0x3727c5ac
 801b8a8:	b727c5ac 	.word	0xb727c5ac
 801b8ac:	00000000 	.word	0x00000000

0801b8b0 <nema_readHwConfig>:
 801b8b0:	b510      	push	{r4, lr}
 801b8b2:	4c05      	ldr	r4, [pc, #20]	; (801b8c8 <nema_readHwConfig+0x18>)
 801b8b4:	6820      	ldr	r0, [r4, #0]
 801b8b6:	b100      	cbz	r0, 801b8ba <nema_readHwConfig+0xa>
 801b8b8:	bd10      	pop	{r4, pc}
 801b8ba:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 801b8be:	f7e7 f985 	bl	8002bcc <nema_reg_read>
 801b8c2:	6020      	str	r0, [r4, #0]
 801b8c4:	bd10      	pop	{r4, pc}
 801b8c6:	bf00      	nop
 801b8c8:	201981f8 	.word	0x201981f8

0801b8cc <nema_readHwConfigH>:
 801b8cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801b8d0:	f7e7 b97c 	b.w	8002bcc <nema_reg_read>

0801b8d4 <nema_enable_tiling>:
 801b8d4:	2800      	cmp	r0, #0
 801b8d6:	bf14      	ite	ne
 801b8d8:	f04f 4080 	movne.w	r0, #1073741824	; 0x40000000
 801b8dc:	2000      	moveq	r0, #0
 801b8de:	b410      	push	{r4}
 801b8e0:	4a05      	ldr	r2, [pc, #20]	; (801b8f8 <nema_enable_tiling+0x24>)
 801b8e2:	6951      	ldr	r1, [r2, #20]
 801b8e4:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
 801b8e8:	4323      	orrs	r3, r4
 801b8ea:	430b      	orrs	r3, r1
 801b8ec:	4303      	orrs	r3, r0
 801b8ee:	6050      	str	r0, [r2, #4]
 801b8f0:	6113      	str	r3, [r2, #16]
 801b8f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b8f6:	4770      	bx	lr
 801b8f8:	20198594 	.word	0x20198594

0801b8fc <nema_enable_aa>:
 801b8fc:	2800      	cmp	r0, #0
 801b8fe:	b410      	push	{r4}
 801b900:	bf19      	ittee	ne
 801b902:	f04f 6080 	movne.w	r0, #67108864	; 0x4000000
 801b906:	f04f 64c0 	movne.w	r4, #100663296	; 0x6000000
 801b90a:	f04f 7400 	moveq.w	r4, #33554432	; 0x2000000
 801b90e:	2000      	moveq	r0, #0
 801b910:	2900      	cmp	r1, #0
 801b912:	bf08      	it	eq
 801b914:	4604      	moveq	r4, r0
 801b916:	b10a      	cbz	r2, 801b91c <nema_enable_aa+0x20>
 801b918:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 801b91c:	b10b      	cbz	r3, 801b922 <nema_enable_aa+0x26>
 801b91e:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 801b922:	4a06      	ldr	r2, [pc, #24]	; (801b93c <nema_enable_aa+0x40>)
 801b924:	6853      	ldr	r3, [r2, #4]
 801b926:	e9d2 1002 	ldrd	r1, r0, [r2, #8]
 801b92a:	4303      	orrs	r3, r0
 801b92c:	430b      	orrs	r3, r1
 801b92e:	4323      	orrs	r3, r4
 801b930:	6950      	ldr	r0, [r2, #20]
 801b932:	e9c2 3404 	strd	r3, r4, [r2, #16]
 801b936:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b93a:	4770      	bx	lr
 801b93c:	20198594 	.word	0x20198594

0801b940 <nema_matmul_bypass>:
 801b940:	b920      	cbnz	r0, 801b94c <nema_matmul_bypass+0xc>
 801b942:	4601      	mov	r1, r0
 801b944:	f44f 708c 	mov.w	r0, #280	; 0x118
 801b948:	f000 be84 	b.w	801c654 <nema_cl_add_cmd>
 801b94c:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
 801b950:	f44f 708c 	mov.w	r0, #280	; 0x118
 801b954:	f000 be7e 	b.w	801c654 <nema_cl_add_cmd>

0801b958 <nema_set_matrix>:
 801b958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b95c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801bac4 <nema_set_matrix+0x16c>
 801b960:	edd0 7a06 	vldr	s15, [r0, #24]
 801b964:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b96c:	4604      	mov	r4, r0
 801b96e:	d506      	bpl.n	801b97e <nema_set_matrix+0x26>
 801b970:	eddf 6a55 	vldr	s13, [pc, #340]	; 801bac8 <nema_set_matrix+0x170>
 801b974:	eef4 7ae6 	vcmpe.f32	s15, s13
 801b978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b97c:	dc47      	bgt.n	801ba0e <nema_set_matrix+0xb6>
 801b97e:	2009      	movs	r0, #9
 801b980:	f000 fe0a 	bl	801c598 <nema_cl_get_space>
 801b984:	2800      	cmp	r0, #0
 801b986:	d040      	beq.n	801ba0a <nema_set_matrix+0xb2>
 801b988:	f44f 73ba 	mov.w	r3, #372	; 0x174
 801b98c:	6003      	str	r3, [r0, #0]
 801b98e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801b992:	6962      	ldr	r2, [r4, #20]
 801b994:	6083      	str	r3, [r0, #8]
 801b996:	f44f 73bc 	mov.w	r3, #376	; 0x178
 801b99a:	6042      	str	r2, [r0, #4]
 801b99c:	68a2      	ldr	r2, [r4, #8]
 801b99e:	6103      	str	r3, [r0, #16]
 801b9a0:	f44f 73be 	mov.w	r3, #380	; 0x17c
 801b9a4:	60c2      	str	r2, [r0, #12]
 801b9a6:	69a2      	ldr	r2, [r4, #24]
 801b9a8:	6183      	str	r3, [r0, #24]
 801b9aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801b9ae:	6142      	str	r2, [r0, #20]
 801b9b0:	69e2      	ldr	r2, [r4, #28]
 801b9b2:	6203      	str	r3, [r0, #32]
 801b9b4:	61c2      	str	r2, [r0, #28]
 801b9b6:	6a23      	ldr	r3, [r4, #32]
 801b9b8:	2544      	movs	r5, #68	; 0x44
 801b9ba:	6243      	str	r3, [r0, #36]	; 0x24
 801b9bc:	2640      	movs	r6, #64	; 0x40
 801b9be:	233c      	movs	r3, #60	; 0x3c
 801b9c0:	2738      	movs	r7, #56	; 0x38
 801b9c2:	2234      	movs	r2, #52	; 0x34
 801b9c4:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801b9c8:	212c      	movs	r1, #44	; 0x2c
 801b9ca:	f04f 0e28 	mov.w	lr, #40	; 0x28
 801b9ce:	f44f 78b0 	mov.w	r8, #352	; 0x160
 801b9d2:	f840 800e 	str.w	r8, [r0, lr]
 801b9d6:	f44f 7eb2 	mov.w	lr, #356	; 0x164
 801b9da:	f8d4 8000 	ldr.w	r8, [r4]
 801b9de:	4401      	add	r1, r0
 801b9e0:	f8c1 8000 	str.w	r8, [r1]
 801b9e4:	f840 e00c 	str.w	lr, [r0, ip]
 801b9e8:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 801b9ec:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801b9f0:	4402      	add	r2, r0
 801b9f2:	f8c2 c000 	str.w	ip, [r2]
 801b9f6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801b9fa:	51c1      	str	r1, [r0, r7]
 801b9fc:	68e1      	ldr	r1, [r4, #12]
 801b9fe:	4403      	add	r3, r0
 801ba00:	6019      	str	r1, [r3, #0]
 801ba02:	5182      	str	r2, [r0, r6]
 801ba04:	6923      	ldr	r3, [r4, #16]
 801ba06:	4428      	add	r0, r5
 801ba08:	6003      	str	r3, [r0, #0]
 801ba0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba0e:	ed90 6a07 	vldr	s12, [r0, #28]
 801ba12:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801ba16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba1a:	d5b0      	bpl.n	801b97e <nema_set_matrix+0x26>
 801ba1c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801ba20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba24:	ddab      	ble.n	801b97e <nema_set_matrix+0x26>
 801ba26:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801ba2a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801ba2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ba32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba36:	d43f      	bmi.n	801bab8 <nema_set_matrix+0x160>
 801ba38:	edd4 7a08 	vldr	s15, [r4, #32]
 801ba3c:	ed94 5a00 	vldr	s10, [r4]
 801ba40:	edd4 5a01 	vldr	s11, [r4, #4]
 801ba44:	ed94 6a02 	vldr	s12, [r4, #8]
 801ba48:	edd4 6a03 	vldr	s13, [r4, #12]
 801ba4c:	ed94 7a04 	vldr	s14, [r4, #16]
 801ba50:	ed94 4a05 	vldr	s8, [r4, #20]
 801ba54:	eec5 4a27 	vdiv.f32	s9, s10, s15
 801ba58:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 801ba5c:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801ba60:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801ba64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801ba68:	ee84 7a27 	vdiv.f32	s14, s8, s15
 801ba6c:	edc4 4a00 	vstr	s9, [r4]
 801ba70:	ed84 5a01 	vstr	s10, [r4, #4]
 801ba74:	edc4 5a02 	vstr	s11, [r4, #8]
 801ba78:	ed84 6a03 	vstr	s12, [r4, #12]
 801ba7c:	edc4 6a04 	vstr	s13, [r4, #16]
 801ba80:	ed84 7a05 	vstr	s14, [r4, #20]
 801ba84:	2006      	movs	r0, #6
 801ba86:	f000 fd87 	bl	801c598 <nema_cl_get_space>
 801ba8a:	2800      	cmp	r0, #0
 801ba8c:	d0bd      	beq.n	801ba0a <nema_set_matrix+0xb2>
 801ba8e:	f44f 73ba 	mov.w	r3, #372	; 0x174
 801ba92:	6003      	str	r3, [r0, #0]
 801ba94:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801ba98:	6962      	ldr	r2, [r4, #20]
 801ba9a:	6083      	str	r3, [r0, #8]
 801ba9c:	6042      	str	r2, [r0, #4]
 801ba9e:	68a3      	ldr	r3, [r4, #8]
 801baa0:	252c      	movs	r5, #44	; 0x2c
 801baa2:	60c3      	str	r3, [r0, #12]
 801baa4:	2628      	movs	r6, #40	; 0x28
 801baa6:	2324      	movs	r3, #36	; 0x24
 801baa8:	2720      	movs	r7, #32
 801baaa:	221c      	movs	r2, #28
 801baac:	f04f 0c18 	mov.w	ip, #24
 801bab0:	2114      	movs	r1, #20
 801bab2:	f04f 0e10 	mov.w	lr, #16
 801bab6:	e78a      	b.n	801b9ce <nema_set_matrix+0x76>
 801bab8:	eef4 7ae6 	vcmpe.f32	s15, s13
 801babc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bac0:	dce0      	bgt.n	801ba84 <nema_set_matrix+0x12c>
 801bac2:	e7b9      	b.n	801ba38 <nema_set_matrix+0xe0>
 801bac4:	33d6bf95 	.word	0x33d6bf95
 801bac8:	b3d6bf95 	.word	0xb3d6bf95

0801bacc <nema_set_matrix_translate>:
 801bacc:	b508      	push	{r3, lr}
 801bace:	2002      	movs	r0, #2
 801bad0:	ed2d 8b02 	vpush	{d8}
 801bad4:	eeb0 8a40 	vmov.f32	s16, s0
 801bad8:	eef0 8a60 	vmov.f32	s17, s1
 801badc:	f000 fd5c 	bl	801c598 <nema_cl_get_space>
 801bae0:	b1c8      	cbz	r0, 801bb16 <nema_set_matrix_translate+0x4a>
 801bae2:	eddf 7a13 	vldr	s15, [pc, #76]	; 801bb30 <nema_set_matrix_translate+0x64>
 801bae6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801baea:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801baee:	eef1 6a68 	vneg.f32	s13, s17
 801baf2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801baf6:	eeb1 7a48 	vneg.f32	s14, s16
 801bafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bafe:	6002      	str	r2, [r0, #0]
 801bb00:	edc0 6a01 	vstr	s13, [r0, #4]
 801bb04:	6083      	str	r3, [r0, #8]
 801bb06:	ed80 7a03 	vstr	s14, [r0, #12]
 801bb0a:	dc07      	bgt.n	801bb1c <nema_set_matrix_translate+0x50>
 801bb0c:	eef4 8ae7 	vcmpe.f32	s17, s15
 801bb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb14:	dc02      	bgt.n	801bb1c <nema_set_matrix_translate+0x50>
 801bb16:	ecbd 8b02 	vpop	{d8}
 801bb1a:	bd08      	pop	{r3, pc}
 801bb1c:	ecbd 8b02 	vpop	{d8}
 801bb20:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801bb24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801bb28:	f44f 708c 	mov.w	r0, #280	; 0x118
 801bb2c:	f000 bd92 	b.w	801c654 <nema_cl_add_cmd>
 801bb30:	45000000 	.word	0x45000000

0801bb34 <nema_load_frag_shader>:
 801bb34:	b570      	push	{r4, r5, r6, lr}
 801bb36:	460e      	mov	r6, r1
 801bb38:	4604      	mov	r4, r0
 801bb3a:	4611      	mov	r1, r2
 801bb3c:	20c4      	movs	r0, #196	; 0xc4
 801bb3e:	f000 fd89 	bl	801c654 <nema_cl_add_cmd>
 801bb42:	b186      	cbz	r6, 801bb66 <nema_load_frag_shader+0x32>
 801bb44:	2500      	movs	r5, #0
 801bb46:	3408      	adds	r4, #8
 801bb48:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801bb4c:	20c8      	movs	r0, #200	; 0xc8
 801bb4e:	f000 fd81 	bl	801c654 <nema_cl_add_cmd>
 801bb52:	3501      	adds	r5, #1
 801bb54:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801bb58:	20cc      	movs	r0, #204	; 0xcc
 801bb5a:	f000 fd7b 	bl	801c654 <nema_cl_add_cmd>
 801bb5e:	42ae      	cmp	r6, r5
 801bb60:	f104 0408 	add.w	r4, r4, #8
 801bb64:	d1f0      	bne.n	801bb48 <nema_load_frag_shader+0x14>
 801bb66:	bd70      	pop	{r4, r5, r6, pc}

0801bb68 <nema_set_frag_ptr>:
 801bb68:	4601      	mov	r1, r0
 801bb6a:	f44f 708e 	mov.w	r0, #284	; 0x11c
 801bb6e:	f000 bd71 	b.w	801c654 <nema_cl_add_cmd>
 801bb72:	bf00      	nop

0801bb74 <nema_set_rop_blend_mode>:
 801bb74:	4601      	mov	r1, r0
 801bb76:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
 801bb7a:	f000 bd6b 	b.w	801c654 <nema_cl_add_cmd>
 801bb7e:	bf00      	nop

0801bb80 <nema_set_rop_const_color>:
 801bb80:	4601      	mov	r1, r0
 801bb82:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 801bb86:	f000 bd65 	b.w	801c654 <nema_cl_add_cmd>
 801bb8a:	bf00      	nop

0801bb8c <nema_set_depth_ctrl>:
 801bb8c:	4601      	mov	r1, r0
 801bb8e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 801bb92:	f000 bd5f 	b.w	801c654 <nema_cl_add_cmd>
 801bb96:	bf00      	nop

0801bb98 <nema_set_raster_color>:
 801bb98:	4601      	mov	r1, r0
 801bb9a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801bb9e:	f000 bd59 	b.w	801c654 <nema_cl_add_cmd>
 801bba2:	bf00      	nop

0801bba4 <nema_raster_triangle_fx>:
 801bba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bba8:	4607      	mov	r7, r0
 801bbaa:	2007      	movs	r0, #7
 801bbac:	460e      	mov	r6, r1
 801bbae:	4615      	mov	r5, r2
 801bbb0:	461c      	mov	r4, r3
 801bbb2:	f000 fcf1 	bl	801c598 <nema_cl_get_space>
 801bbb6:	b350      	cbz	r0, 801bc0e <nema_raster_triangle_fx+0x6a>
 801bbb8:	f44f 7398 	mov.w	r3, #304	; 0x130
 801bbbc:	f44f 7292 	mov.w	r2, #292	; 0x124
 801bbc0:	f44f 7890 	mov.w	r8, #288	; 0x120
 801bbc4:	f44f 7e9a 	mov.w	lr, #308	; 0x134
 801bbc8:	f44f 7ca0 	mov.w	ip, #320	; 0x140
 801bbcc:	f44f 71a2 	mov.w	r1, #324	; 0x144
 801bbd0:	6103      	str	r3, [r0, #16]
 801bbd2:	4b10      	ldr	r3, [pc, #64]	; (801bc14 <nema_raster_triangle_fx+0x70>)
 801bbd4:	6047      	str	r7, [r0, #4]
 801bbd6:	60c6      	str	r6, [r0, #12]
 801bbd8:	f8c0 8000 	str.w	r8, [r0]
 801bbdc:	6082      	str	r2, [r0, #8]
 801bbde:	691a      	ldr	r2, [r3, #16]
 801bbe0:	4b0d      	ldr	r3, [pc, #52]	; (801bc18 <nema_raster_triangle_fx+0x74>)
 801bbe2:	61c4      	str	r4, [r0, #28]
 801bbe4:	9c06      	ldr	r4, [sp, #24]
 801bbe6:	6303      	str	r3, [r0, #48]	; 0x30
 801bbe8:	01d3      	lsls	r3, r2, #7
 801bbea:	6244      	str	r4, [r0, #36]	; 0x24
 801bbec:	bf48      	it	mi
 801bbee:	f442 0200 	orrmi.w	r2, r2, #8388608	; 0x800000
 801bbf2:	9c07      	ldr	r4, [sp, #28]
 801bbf4:	bf58      	it	pl
 801bbf6:	f422 0200 	bicpl.w	r2, r2, #8388608	; 0x800000
 801bbfa:	f042 0204 	orr.w	r2, r2, #4
 801bbfe:	6145      	str	r5, [r0, #20]
 801bc00:	62c4      	str	r4, [r0, #44]	; 0x2c
 801bc02:	f8c0 e018 	str.w	lr, [r0, #24]
 801bc06:	f8c0 c020 	str.w	ip, [r0, #32]
 801bc0a:	6281      	str	r1, [r0, #40]	; 0x28
 801bc0c:	6342      	str	r2, [r0, #52]	; 0x34
 801bc0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc12:	bf00      	nop
 801bc14:	20198594 	.word	0x20198594
 801bc18:	ff000100 	.word	0xff000100

0801bc1c <nema_raster_rect>:
 801bc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc1e:	1e17      	subs	r7, r2, #0
 801bc20:	dd20      	ble.n	801bc64 <nema_raster_rect+0x48>
 801bc22:	2b00      	cmp	r3, #0
 801bc24:	dd1e      	ble.n	801bc64 <nema_raster_rect+0x48>
 801bc26:	4604      	mov	r4, r0
 801bc28:	2003      	movs	r0, #3
 801bc2a:	461d      	mov	r5, r3
 801bc2c:	460e      	mov	r6, r1
 801bc2e:	f000 fcb3 	bl	801c598 <nema_cl_get_space>
 801bc32:	b1b8      	cbz	r0, 801bc64 <nema_raster_rect+0x48>
 801bc34:	f44f 7c82 	mov.w	ip, #260	; 0x104
 801bc38:	f44f 7184 	mov.w	r1, #264	; 0x108
 801bc3c:	193a      	adds	r2, r7, r4
 801bc3e:	b292      	uxth	r2, r2
 801bc40:	19ab      	adds	r3, r5, r6
 801bc42:	b2a4      	uxth	r4, r4
 801bc44:	4d08      	ldr	r5, [pc, #32]	; (801bc68 <nema_raster_rect+0x4c>)
 801bc46:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 801bc4a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 801bc4e:	4a07      	ldr	r2, [pc, #28]	; (801bc6c <nema_raster_rect+0x50>)
 801bc50:	6044      	str	r4, [r0, #4]
 801bc52:	60c3      	str	r3, [r0, #12]
 801bc54:	f8c0 c000 	str.w	ip, [r0]
 801bc58:	6081      	str	r1, [r0, #8]
 801bc5a:	6105      	str	r5, [r0, #16]
 801bc5c:	6913      	ldr	r3, [r2, #16]
 801bc5e:	f043 0302 	orr.w	r3, r3, #2
 801bc62:	6143      	str	r3, [r0, #20]
 801bc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc66:	bf00      	nop
 801bc68:	ff000100 	.word	0xff000100
 801bc6c:	20198594 	.word	0x20198594

0801bc70 <nema_raster_quad_fx>:
 801bc70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc74:	4607      	mov	r7, r0
 801bc76:	2009      	movs	r0, #9
 801bc78:	460e      	mov	r6, r1
 801bc7a:	4615      	mov	r5, r2
 801bc7c:	461c      	mov	r4, r3
 801bc7e:	f000 fc8b 	bl	801c598 <nema_cl_get_space>
 801bc82:	2800      	cmp	r0, #0
 801bc84:	d02f      	beq.n	801bce6 <nema_raster_quad_fx+0x76>
 801bc86:	f44f 7398 	mov.w	r3, #304	; 0x130
 801bc8a:	f44f 7292 	mov.w	r2, #292	; 0x124
 801bc8e:	f44f 7a90 	mov.w	sl, #288	; 0x120
 801bc92:	f44f 799a 	mov.w	r9, #308	; 0x134
 801bc96:	f44f 78a0 	mov.w	r8, #320	; 0x140
 801bc9a:	f44f 7ea2 	mov.w	lr, #324	; 0x144
 801bc9e:	f44f 7ca8 	mov.w	ip, #336	; 0x150
 801bca2:	f44f 71aa 	mov.w	r1, #340	; 0x154
 801bca6:	6103      	str	r3, [r0, #16]
 801bca8:	4b10      	ldr	r3, [pc, #64]	; (801bcec <nema_raster_quad_fx+0x7c>)
 801bcaa:	6047      	str	r7, [r0, #4]
 801bcac:	60c6      	str	r6, [r0, #12]
 801bcae:	f8c0 a000 	str.w	sl, [r0]
 801bcb2:	6082      	str	r2, [r0, #8]
 801bcb4:	691a      	ldr	r2, [r3, #16]
 801bcb6:	9b08      	ldr	r3, [sp, #32]
 801bcb8:	f042 0205 	orr.w	r2, r2, #5
 801bcbc:	6243      	str	r3, [r0, #36]	; 0x24
 801bcbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcc0:	6145      	str	r5, [r0, #20]
 801bcc2:	62c3      	str	r3, [r0, #44]	; 0x2c
 801bcc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcc6:	61c4      	str	r4, [r0, #28]
 801bcc8:	6343      	str	r3, [r0, #52]	; 0x34
 801bcca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bccc:	6442      	str	r2, [r0, #68]	; 0x44
 801bcce:	63c3      	str	r3, [r0, #60]	; 0x3c
 801bcd0:	4b07      	ldr	r3, [pc, #28]	; (801bcf0 <nema_raster_quad_fx+0x80>)
 801bcd2:	f8c0 9018 	str.w	r9, [r0, #24]
 801bcd6:	f8c0 8020 	str.w	r8, [r0, #32]
 801bcda:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
 801bcde:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
 801bce2:	6381      	str	r1, [r0, #56]	; 0x38
 801bce4:	6403      	str	r3, [r0, #64]	; 0x40
 801bce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bcea:	bf00      	nop
 801bcec:	20198594 	.word	0x20198594
 801bcf0:	ff000100 	.word	0xff000100

0801bcf4 <nema_set_interrupt_ctrl>:
 801bcf4:	4601      	mov	r1, r0
 801bcf6:	20f8      	movs	r0, #248	; 0xf8
 801bcf8:	f000 bcac 	b.w	801c654 <nema_cl_add_cmd>

0801bcfc <nema_vg_init>:
 801bcfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bcfe:	4606      	mov	r6, r0
 801bd00:	460f      	mov	r7, r1
 801bd02:	b08f      	sub	sp, #60	; 0x3c
 801bd04:	ac02      	add	r4, sp, #8
 801bd06:	460a      	mov	r2, r1
 801bd08:	2300      	movs	r3, #0
 801bd0a:	4601      	mov	r1, r0
 801bd0c:	4620      	mov	r0, r4
 801bd0e:	f000 f889 	bl	801be24 <stencil_buffer_create>
 801bd12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801bd16:	ad0a      	add	r5, sp, #40	; 0x28
 801bd18:	ac06      	add	r4, sp, #24
 801bd1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801bd1e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801bd22:	f000 f827 	bl	801bd74 <context_reset>
 801bd26:	ab0e      	add	r3, sp, #56	; 0x38
 801bd28:	e913 0003 	ldmdb	r3, {r0, r1}
 801bd2c:	e895 000c 	ldmia.w	r5, {r2, r3}
 801bd30:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bd34:	4639      	mov	r1, r7
 801bd36:	4630      	mov	r0, r6
 801bd38:	f000 f888 	bl	801be4c <stencil_buffer_set>
 801bd3c:	f000 f8c2 	bl	801bec4 <lut_buffer_create>
 801bd40:	f000 f94e 	bl	801bfe0 <tsvg_init>
 801bd44:	4639      	mov	r1, r7
 801bd46:	4630      	mov	r0, r6
 801bd48:	f000 f940 	bl	801bfcc <set_tsvg_text_max_size>
 801bd4c:	f000 f866 	bl	801be1c <nema_vg_get_context>
 801bd50:	4c06      	ldr	r4, [pc, #24]	; (801bd6c <nema_vg_init+0x70>)
 801bd52:	6020      	str	r0, [r4, #0]
 801bd54:	f000 f8b0 	bl	801beb8 <nema_vg_get_stencil>
 801bd58:	6822      	ldr	r2, [r4, #0]
 801bd5a:	4905      	ldr	r1, [pc, #20]	; (801bd70 <nema_vg_init+0x74>)
 801bd5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801bd5e:	6008      	str	r0, [r1, #0]
 801bd60:	f043 0320 	orr.w	r3, r3, #32
 801bd64:	6313      	str	r3, [r2, #48]	; 0x30
 801bd66:	b00f      	add	sp, #60	; 0x3c
 801bd68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd6a:	bf00      	nop
 801bd6c:	201981fc 	.word	0x201981fc
 801bd70:	20198200 	.word	0x20198200

0801bd74 <context_reset>:
 801bd74:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 801bd78:	4c26      	ldr	r4, [pc, #152]	; (801be14 <context_reset+0xa0>)
 801bd7a:	6820      	ldr	r0, [r4, #0]
 801bd7c:	b110      	cbz	r0, 801bd84 <context_reset+0x10>
 801bd7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801bd80:	069b      	lsls	r3, r3, #26
 801bd82:	d440      	bmi.n	801be06 <context_reset+0x92>
 801bd84:	2300      	movs	r3, #0
 801bd86:	6962      	ldr	r2, [r4, #20]
 801bd88:	e9c4 3300 	strd	r3, r3, [r4]
 801bd8c:	60a3      	str	r3, [r4, #8]
 801bd8e:	b112      	cbz	r2, 801bd96 <context_reset+0x22>
 801bd90:	4821      	ldr	r0, [pc, #132]	; (801be18 <context_reset+0xa4>)
 801bd92:	f7e6 ffc0 	bl	8002d16 <nema_buffer_destroy>
 801bd96:	2300      	movs	r3, #0
 801bd98:	f04f 0800 	mov.w	r8, #0
 801bd9c:	f240 5901 	movw	r9, #1281	; 0x501
 801bda0:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 801bda4:	f04f 67f0 	mov.w	r7, #125829120	; 0x7800000
 801bda8:	2000      	movs	r0, #0
 801bdaa:	2100      	movs	r1, #0
 801bdac:	6423      	str	r3, [r4, #64]	; 0x40
 801bdae:	6463      	str	r3, [r4, #68]	; 0x44
 801bdb0:	64e3      	str	r3, [r4, #76]	; 0x4c
 801bdb2:	6723      	str	r3, [r4, #112]	; 0x70
 801bdb4:	6523      	str	r3, [r4, #80]	; 0x50
 801bdb6:	6763      	str	r3, [r4, #116]	; 0x74
 801bdb8:	6563      	str	r3, [r4, #84]	; 0x54
 801bdba:	67a3      	str	r3, [r4, #120]	; 0x78
 801bdbc:	65a3      	str	r3, [r4, #88]	; 0x58
 801bdbe:	67e3      	str	r3, [r4, #124]	; 0x7c
 801bdc0:	65e3      	str	r3, [r4, #92]	; 0x5c
 801bdc2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 801bdc6:	6623      	str	r3, [r4, #96]	; 0x60
 801bdc8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 801bdcc:	6663      	str	r3, [r4, #100]	; 0x64
 801bdce:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801bdd2:	66a3      	str	r3, [r4, #104]	; 0x68
 801bdd4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 801bdd8:	66e3      	str	r3, [r4, #108]	; 0x6c
 801bdda:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 801bdde:	2202      	movs	r2, #2
 801bde0:	2300      	movs	r3, #0
 801bde2:	e9c4 8908 	strd	r8, r9, [r4, #32]
 801bde6:	e9c4 670a 	strd	r6, r7, [r4, #40]	; 0x28
 801bdea:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
 801bdee:	e9c4 3303 	strd	r3, r3, [r4, #12]
 801bdf2:	e9c4 3305 	strd	r3, r3, [r4, #20]
 801bdf6:	77a3      	strb	r3, [r4, #30]
 801bdf8:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801bdfc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801be00:	83a2      	strh	r2, [r4, #28]
 801be02:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 801be06:	6883      	ldr	r3, [r0, #8]
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d0bb      	beq.n	801bd84 <context_reset+0x10>
 801be0c:	f7e6 ff83 	bl	8002d16 <nema_buffer_destroy>
 801be10:	e7b8      	b.n	801bd84 <context_reset+0x10>
 801be12:	bf00      	nop
 801be14:	20198208 	.word	0x20198208
 801be18:	20198214 	.word	0x20198214

0801be1c <nema_vg_get_context>:
 801be1c:	4800      	ldr	r0, [pc, #0]	; (801be20 <nema_vg_get_context+0x4>)
 801be1e:	4770      	bx	lr
 801be20:	20198208 	.word	0x20198208

0801be24 <stencil_buffer_create>:
 801be24:	b538      	push	{r3, r4, r5, lr}
 801be26:	4605      	mov	r5, r0
 801be28:	1cc8      	adds	r0, r1, #3
 801be2a:	bf48      	it	mi
 801be2c:	1d88      	addmi	r0, r1, #6
 801be2e:	1cd4      	adds	r4, r2, #3
 801be30:	bf48      	it	mi
 801be32:	1d94      	addmi	r4, r2, #6
 801be34:	1080      	asrs	r0, r0, #2
 801be36:	0080      	lsls	r0, r0, #2
 801be38:	f024 0203 	bic.w	r2, r4, #3
 801be3c:	fb02 f200 	mul.w	r2, r2, r0
 801be40:	4619      	mov	r1, r3
 801be42:	4628      	mov	r0, r5
 801be44:	f7e6 ff4c 	bl	8002ce0 <nema_buffer_create_pool>
 801be48:	4628      	mov	r0, r5
 801be4a:	bd38      	pop	{r3, r4, r5, pc}

0801be4c <stencil_buffer_set>:
 801be4c:	b082      	sub	sp, #8
 801be4e:	b470      	push	{r4, r5, r6}
 801be50:	4606      	mov	r6, r0
 801be52:	460d      	mov	r5, r1
 801be54:	a803      	add	r0, sp, #12
 801be56:	e880 000c 	stmia.w	r0, {r2, r3}
 801be5a:	4c15      	ldr	r4, [pc, #84]	; (801beb0 <stencil_buffer_set+0x64>)
 801be5c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801be5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801be62:	1cf3      	adds	r3, r6, #3
 801be64:	bf48      	it	mi
 801be66:	1db3      	addmi	r3, r6, #6
 801be68:	1cea      	adds	r2, r5, #3
 801be6a:	bf48      	it	mi
 801be6c:	1daa      	addmi	r2, r5, #6
 801be6e:	f022 0203 	bic.w	r2, r2, #3
 801be72:	ee07 2a90 	vmov	s15, r2
 801be76:	f023 0303 	bic.w	r3, r3, #3
 801be7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801be7e:	ee07 3a90 	vmov	s15, r3
 801be82:	2100      	movs	r1, #0
 801be84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801be88:	61a1      	str	r1, [r4, #24]
 801be8a:	61e1      	str	r1, [r4, #28]
 801be8c:	6261      	str	r1, [r4, #36]	; 0x24
 801be8e:	6321      	str	r1, [r4, #48]	; 0x30
 801be90:	4908      	ldr	r1, [pc, #32]	; (801beb4 <stencil_buffer_set+0x68>)
 801be92:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 801be96:	600c      	str	r4, [r1, #0]
 801be98:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801be9c:	edc4 7a08 	vstr	s15, [r4, #32]
 801bea0:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 801bea4:	e9c4 3204 	strd	r3, r2, [r4, #16]
 801bea8:	bc70      	pop	{r4, r5, r6}
 801beaa:	b002      	add	sp, #8
 801beac:	4770      	bx	lr
 801beae:	bf00      	nop
 801beb0:	2019829c 	.word	0x2019829c
 801beb4:	20198208 	.word	0x20198208

0801beb8 <nema_vg_get_stencil>:
 801beb8:	4b01      	ldr	r3, [pc, #4]	; (801bec0 <nema_vg_get_stencil+0x8>)
 801beba:	6818      	ldr	r0, [r3, #0]
 801bebc:	4770      	bx	lr
 801bebe:	bf00      	nop
 801bec0:	20198208 	.word	0x20198208

0801bec4 <lut_buffer_create>:
 801bec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bec6:	4d1a      	ldr	r5, [pc, #104]	; (801bf30 <lut_buffer_create+0x6c>)
 801bec8:	b085      	sub	sp, #20
 801beca:	69ac      	ldr	r4, [r5, #24]
 801becc:	b10c      	cbz	r4, 801bed2 <lut_buffer_create+0xe>
 801bece:	b005      	add	sp, #20
 801bed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bed2:	466e      	mov	r6, sp
 801bed4:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bed8:	4630      	mov	r0, r6
 801beda:	4621      	mov	r1, r4
 801bedc:	f7e6 ff00 	bl	8002ce0 <nema_buffer_create_pool>
 801bee0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801bee4:	f105 060c 	add.w	r6, r5, #12
 801bee8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801beec:	4627      	mov	r7, r4
 801beee:	4623      	mov	r3, r4
 801bef0:	696d      	ldr	r5, [r5, #20]
 801bef2:	26ff      	movs	r6, #255	; 0xff
 801bef4:	e008      	b.n	801bf08 <lut_buffer_create+0x44>
 801bef6:	2880      	cmp	r0, #128	; 0x80
 801bef8:	f1c4 0100 	rsb	r1, r4, #0
 801befc:	d016      	beq.n	801bf2c <lut_buffer_create+0x68>
 801befe:	bfcc      	ite	gt
 801bf00:	b2e1      	uxtbgt	r1, r4
 801bf02:	b2c9      	uxtble	r1, r1
 801bf04:	54a9      	strb	r1, [r5, r2]
 801bf06:	3410      	adds	r4, #16
 801bf08:	ea44 1213 	orr.w	r2, r4, r3, lsr #4
 801bf0c:	3301      	adds	r3, #1
 801bf0e:	f1a3 0172 	sub.w	r1, r3, #114	; 0x72
 801bf12:	291e      	cmp	r1, #30
 801bf14:	f103 30ff 	add.w	r0, r3, #4294967295
 801bf18:	b2d2      	uxtb	r2, r2
 801bf1a:	d9ec      	bls.n	801bef6 <lut_buffer_create+0x32>
 801bf1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bf20:	54ae      	strb	r6, [r5, r2]
 801bf22:	d1f0      	bne.n	801bf06 <lut_buffer_create+0x42>
 801bf24:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 801bf28:	b005      	add	sp, #20
 801bf2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf2c:	54af      	strb	r7, [r5, r2]
 801bf2e:	e7ea      	b.n	801bf06 <lut_buffer_create+0x42>
 801bf30:	20198208 	.word	0x20198208

0801bf34 <nema_vg_set_error>:
 801bf34:	4b01      	ldr	r3, [pc, #4]	; (801bf3c <nema_vg_set_error+0x8>)
 801bf36:	6218      	str	r0, [r3, #32]
 801bf38:	4770      	bx	lr
 801bf3a:	bf00      	nop
 801bf3c:	20198208 	.word	0x20198208

0801bf40 <nema_vg_paint_create>:
 801bf40:	b538      	push	{r3, r4, r5, lr}
 801bf42:	20e0      	movs	r0, #224	; 0xe0
 801bf44:	f7e6 fe8d 	bl	8002c62 <nema_host_malloc>
 801bf48:	4604      	mov	r4, r0
 801bf4a:	b1e8      	cbz	r0, 801bf88 <nema_vg_paint_create+0x48>
 801bf4c:	2500      	movs	r5, #0
 801bf4e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801bf52:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 801bf56:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
 801bf5a:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 801bf5e:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
 801bf62:	f880 50dd 	strb.w	r5, [r0, #221]	; 0xdd
 801bf66:	f880 50d0 	strb.w	r5, [r0, #208]	; 0xd0
 801bf6a:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
 801bf6e:	e9c0 5500 	strd	r5, r5, [r0]
 801bf72:	3038      	adds	r0, #56	; 0x38
 801bf74:	f7ff fa30 	bl	801b3d8 <nema_mat3x3_load_identity>
 801bf78:	f104 0008 	add.w	r0, r4, #8
 801bf7c:	f7ff fa2c 	bl	801b3d8 <nema_mat3x3_load_identity>
 801bf80:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 801bf84:	4620      	mov	r0, r4
 801bf86:	bd38      	pop	{r3, r4, r5, pc}
 801bf88:	2001      	movs	r0, #1
 801bf8a:	f7ff ffd3 	bl	801bf34 <nema_vg_set_error>
 801bf8e:	4620      	mov	r0, r4
 801bf90:	bd38      	pop	{r3, r4, r5, pc}
 801bf92:	bf00      	nop

0801bf94 <nema_vg_grad_create>:
 801bf94:	b530      	push	{r4, r5, lr}
 801bf96:	2010      	movs	r0, #16
 801bf98:	b085      	sub	sp, #20
 801bf9a:	f7e6 fe62 	bl	8002c62 <nema_host_malloc>
 801bf9e:	466d      	mov	r5, sp
 801bfa0:	4604      	mov	r4, r0
 801bfa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bfa6:	4628      	mov	r0, r5
 801bfa8:	2100      	movs	r1, #0
 801bfaa:	f7e6 fe99 	bl	8002ce0 <nema_buffer_create_pool>
 801bfae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801bfb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801bfb6:	4620      	mov	r0, r4
 801bfb8:	b005      	add	sp, #20
 801bfba:	bd30      	pop	{r4, r5, pc}

0801bfbc <nema_vg_path_create>:
 801bfbc:	b508      	push	{r3, lr}
 801bfbe:	2088      	movs	r0, #136	; 0x88
 801bfc0:	f7e6 fe4f 	bl	8002c62 <nema_host_malloc>
 801bfc4:	2200      	movs	r2, #0
 801bfc6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 801bfca:	bd08      	pop	{r3, pc}

0801bfcc <set_tsvg_text_max_size>:
 801bfcc:	4a02      	ldr	r2, [pc, #8]	; (801bfd8 <set_tsvg_text_max_size+0xc>)
 801bfce:	4b03      	ldr	r3, [pc, #12]	; (801bfdc <set_tsvg_text_max_size+0x10>)
 801bfd0:	6010      	str	r0, [r2, #0]
 801bfd2:	6019      	str	r1, [r3, #0]
 801bfd4:	4770      	bx	lr
 801bfd6:	bf00      	nop
 801bfd8:	2000005c 	.word	0x2000005c
 801bfdc:	20000060 	.word	0x20000060

0801bfe0 <tsvg_init>:
 801bfe0:	b508      	push	{r3, lr}
 801bfe2:	f7ff ffad 	bl	801bf40 <nema_vg_paint_create>
 801bfe6:	4b05      	ldr	r3, [pc, #20]	; (801bffc <tsvg_init+0x1c>)
 801bfe8:	6018      	str	r0, [r3, #0]
 801bfea:	f7ff ffe7 	bl	801bfbc <nema_vg_path_create>
 801bfee:	4b04      	ldr	r3, [pc, #16]	; (801c000 <tsvg_init+0x20>)
 801bff0:	6018      	str	r0, [r3, #0]
 801bff2:	f7ff ffcf 	bl	801bf94 <nema_vg_grad_create>
 801bff6:	4b03      	ldr	r3, [pc, #12]	; (801c004 <tsvg_init+0x24>)
 801bff8:	6018      	str	r0, [r3, #0]
 801bffa:	bd08      	pop	{r3, pc}
 801bffc:	201982d8 	.word	0x201982d8
 801c000:	201982dc 	.word	0x201982dc
 801c004:	201982d4 	.word	0x201982d4

0801c008 <tsi_malloc_init_pool>:
 801c008:	b4f0      	push	{r4, r5, r6, r7}
 801c00a:	2807      	cmp	r0, #7
 801c00c:	9e04      	ldr	r6, [sp, #16]
 801c00e:	d81c      	bhi.n	801c04a <tsi_malloc_init_pool+0x42>
 801c010:	4f0f      	ldr	r7, [pc, #60]	; (801c050 <tsi_malloc_init_pool+0x48>)
 801c012:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801c016:	0084      	lsls	r4, r0, #2
 801c018:	193d      	adds	r5, r7, r4
 801c01a:	513a      	str	r2, [r7, r4]
 801c01c:	185a      	adds	r2, r3, r1
 801c01e:	60e9      	str	r1, [r5, #12]
 801c020:	6069      	str	r1, [r5, #4]
 801c022:	612b      	str	r3, [r5, #16]
 801c024:	60aa      	str	r2, [r5, #8]
 801c026:	b16e      	cbz	r6, 801c044 <tsi_malloc_init_pool+0x3c>
 801c028:	2200      	movs	r2, #0
 801c02a:	2010      	movs	r0, #16
 801c02c:	4d09      	ldr	r5, [pc, #36]	; (801c054 <tsi_malloc_init_pool+0x4c>)
 801c02e:	180c      	adds	r4, r1, r0
 801c030:	e9c1 5001 	strd	r5, r0, [r1, #4]
 801c034:	4610      	mov	r0, r2
 801c036:	3b20      	subs	r3, #32
 801c038:	610b      	str	r3, [r1, #16]
 801c03a:	600a      	str	r2, [r1, #0]
 801c03c:	e9c4 5201 	strd	r5, r2, [r4, #4]
 801c040:	bcf0      	pop	{r4, r5, r6, r7}
 801c042:	4770      	bx	lr
 801c044:	4630      	mov	r0, r6
 801c046:	bcf0      	pop	{r4, r5, r6, r7}
 801c048:	4770      	bx	lr
 801c04a:	f04f 30ff 	mov.w	r0, #4294967295
 801c04e:	e7f7      	b.n	801c040 <tsi_malloc_init_pool+0x38>
 801c050:	201982e0 	.word	0x201982e0
 801c054:	000f1fa1 	.word	0x000f1fa1

0801c058 <tsi_malloc_pool>:
 801c058:	2807      	cmp	r0, #7
 801c05a:	d832      	bhi.n	801c0c2 <tsi_malloc_pool+0x6a>
 801c05c:	4b1b      	ldr	r3, [pc, #108]	; (801c0cc <tsi_malloc_pool+0x74>)
 801c05e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801c062:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801c066:	68c2      	ldr	r2, [r0, #12]
 801c068:	b35a      	cbz	r2, 801c0c2 <tsi_malloc_pool+0x6a>
 801c06a:	2910      	cmp	r1, #16
 801c06c:	bfb8      	it	lt
 801c06e:	2110      	movlt	r1, #16
 801c070:	b470      	push	{r4, r5, r6}
 801c072:	310f      	adds	r1, #15
 801c074:	6814      	ldr	r4, [r2, #0]
 801c076:	f021 010f 	bic.w	r1, r1, #15
 801c07a:	42a1      	cmp	r1, r4
 801c07c:	dd23      	ble.n	801c0c6 <tsi_malloc_pool+0x6e>
 801c07e:	6890      	ldr	r0, [r2, #8]
 801c080:	b1d0      	cbz	r0, 801c0b8 <tsi_malloc_pool+0x60>
 801c082:	4615      	mov	r5, r2
 801c084:	e002      	b.n	801c08c <tsi_malloc_pool+0x34>
 801c086:	6898      	ldr	r0, [r3, #8]
 801c088:	461d      	mov	r5, r3
 801c08a:	b1a8      	cbz	r0, 801c0b8 <tsi_malloc_pool+0x60>
 801c08c:	5814      	ldr	r4, [r2, r0]
 801c08e:	1813      	adds	r3, r2, r0
 801c090:	428c      	cmp	r4, r1
 801c092:	dbf8      	blt.n	801c086 <tsi_malloc_pool+0x2e>
 801c094:	f101 0010 	add.w	r0, r1, #16
 801c098:	42a0      	cmp	r0, r4
 801c09a:	da0f      	bge.n	801c0bc <tsi_malloc_pool+0x64>
 801c09c:	4e0c      	ldr	r6, [pc, #48]	; (801c0d0 <tsi_malloc_pool+0x78>)
 801c09e:	1a24      	subs	r4, r4, r0
 801c0a0:	50c4      	str	r4, [r0, r3]
 801c0a2:	18c4      	adds	r4, r0, r3
 801c0a4:	6066      	str	r6, [r4, #4]
 801c0a6:	689e      	ldr	r6, [r3, #8]
 801c0a8:	1aa2      	subs	r2, r4, r2
 801c0aa:	60a6      	str	r6, [r4, #8]
 801c0ac:	60aa      	str	r2, [r5, #8]
 801c0ae:	6019      	str	r1, [r3, #0]
 801c0b0:	4a08      	ldr	r2, [pc, #32]	; (801c0d4 <tsi_malloc_pool+0x7c>)
 801c0b2:	f103 0010 	add.w	r0, r3, #16
 801c0b6:	605a      	str	r2, [r3, #4]
 801c0b8:	bc70      	pop	{r4, r5, r6}
 801c0ba:	4770      	bx	lr
 801c0bc:	689a      	ldr	r2, [r3, #8]
 801c0be:	60aa      	str	r2, [r5, #8]
 801c0c0:	e7f6      	b.n	801c0b0 <tsi_malloc_pool+0x58>
 801c0c2:	2000      	movs	r0, #0
 801c0c4:	4770      	bx	lr
 801c0c6:	4615      	mov	r5, r2
 801c0c8:	4613      	mov	r3, r2
 801c0ca:	e7e3      	b.n	801c094 <tsi_malloc_pool+0x3c>
 801c0cc:	201982e0 	.word	0x201982e0
 801c0d0:	000f1fa1 	.word	0x000f1fa1
 801c0d4:	000f1fa2 	.word	0x000f1fa2

0801c0d8 <tsi_free>:
 801c0d8:	2800      	cmp	r0, #0
 801c0da:	d045      	beq.n	801c168 <tsi_free+0x90>
 801c0dc:	4a45      	ldr	r2, [pc, #276]	; (801c1f4 <tsi_free+0x11c>)
 801c0de:	68d3      	ldr	r3, [r2, #12]
 801c0e0:	b12b      	cbz	r3, 801c0ee <tsi_free+0x16>
 801c0e2:	6851      	ldr	r1, [r2, #4]
 801c0e4:	4281      	cmp	r1, r0
 801c0e6:	d802      	bhi.n	801c0ee <tsi_free+0x16>
 801c0e8:	6891      	ldr	r1, [r2, #8]
 801c0ea:	4288      	cmp	r0, r1
 801c0ec:	d33d      	bcc.n	801c16a <tsi_free+0x92>
 801c0ee:	6a13      	ldr	r3, [r2, #32]
 801c0f0:	b12b      	cbz	r3, 801c0fe <tsi_free+0x26>
 801c0f2:	6991      	ldr	r1, [r2, #24]
 801c0f4:	4288      	cmp	r0, r1
 801c0f6:	d302      	bcc.n	801c0fe <tsi_free+0x26>
 801c0f8:	69d1      	ldr	r1, [r2, #28]
 801c0fa:	4288      	cmp	r0, r1
 801c0fc:	d335      	bcc.n	801c16a <tsi_free+0x92>
 801c0fe:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801c100:	b12b      	cbz	r3, 801c10e <tsi_free+0x36>
 801c102:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801c104:	4281      	cmp	r1, r0
 801c106:	d802      	bhi.n	801c10e <tsi_free+0x36>
 801c108:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801c10a:	4281      	cmp	r1, r0
 801c10c:	d82d      	bhi.n	801c16a <tsi_free+0x92>
 801c10e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 801c110:	b12b      	cbz	r3, 801c11e <tsi_free+0x46>
 801c112:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801c114:	4288      	cmp	r0, r1
 801c116:	d302      	bcc.n	801c11e <tsi_free+0x46>
 801c118:	6c51      	ldr	r1, [r2, #68]	; 0x44
 801c11a:	4288      	cmp	r0, r1
 801c11c:	d325      	bcc.n	801c16a <tsi_free+0x92>
 801c11e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801c120:	b12b      	cbz	r3, 801c12e <tsi_free+0x56>
 801c122:	6d51      	ldr	r1, [r2, #84]	; 0x54
 801c124:	4288      	cmp	r0, r1
 801c126:	d302      	bcc.n	801c12e <tsi_free+0x56>
 801c128:	6d91      	ldr	r1, [r2, #88]	; 0x58
 801c12a:	4288      	cmp	r0, r1
 801c12c:	d31d      	bcc.n	801c16a <tsi_free+0x92>
 801c12e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 801c130:	b12b      	cbz	r3, 801c13e <tsi_free+0x66>
 801c132:	6e91      	ldr	r1, [r2, #104]	; 0x68
 801c134:	4288      	cmp	r0, r1
 801c136:	d302      	bcc.n	801c13e <tsi_free+0x66>
 801c138:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 801c13a:	4288      	cmp	r0, r1
 801c13c:	d315      	bcc.n	801c16a <tsi_free+0x92>
 801c13e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 801c142:	b133      	cbz	r3, 801c152 <tsi_free+0x7a>
 801c144:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 801c146:	4288      	cmp	r0, r1
 801c148:	d303      	bcc.n	801c152 <tsi_free+0x7a>
 801c14a:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 801c14e:	4288      	cmp	r0, r1
 801c150:	d30b      	bcc.n	801c16a <tsi_free+0x92>
 801c152:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 801c156:	b13b      	cbz	r3, 801c168 <tsi_free+0x90>
 801c158:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 801c15c:	4281      	cmp	r1, r0
 801c15e:	d803      	bhi.n	801c168 <tsi_free+0x90>
 801c160:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 801c164:	4282      	cmp	r2, r0
 801c166:	d800      	bhi.n	801c16a <tsi_free+0x92>
 801c168:	4770      	bx	lr
 801c16a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c16c:	f1a0 0410 	sub.w	r4, r0, #16
 801c170:	6861      	ldr	r1, [r4, #4]
 801c172:	4a21      	ldr	r2, [pc, #132]	; (801c1f8 <tsi_free+0x120>)
 801c174:	4291      	cmp	r1, r2
 801c176:	d000      	beq.n	801c17a <tsi_free+0xa2>
 801c178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c17a:	4a20      	ldr	r2, [pc, #128]	; (801c1fc <tsi_free+0x124>)
 801c17c:	6062      	str	r2, [r4, #4]
 801c17e:	6899      	ldr	r1, [r3, #8]
 801c180:	18ca      	adds	r2, r1, r3
 801c182:	4294      	cmp	r4, r2
 801c184:	d929      	bls.n	801c1da <tsi_free+0x102>
 801c186:	b909      	cbnz	r1, 801c18c <tsi_free+0xb4>
 801c188:	e027      	b.n	801c1da <tsi_free+0x102>
 801c18a:	b129      	cbz	r1, 801c198 <tsi_free+0xc0>
 801c18c:	6891      	ldr	r1, [r2, #8]
 801c18e:	4615      	mov	r5, r2
 801c190:	4616      	mov	r6, r2
 801c192:	185a      	adds	r2, r3, r1
 801c194:	4294      	cmp	r4, r2
 801c196:	d8f8      	bhi.n	801c18a <tsi_free+0xb2>
 801c198:	f850 7c10 	ldr.w	r7, [r0, #-16]
 801c19c:	42ab      	cmp	r3, r5
 801c19e:	eba4 0e03 	sub.w	lr, r4, r3
 801c1a2:	4407      	add	r7, r0
 801c1a4:	d01e      	beq.n	801c1e4 <tsi_free+0x10c>
 801c1a6:	682b      	ldr	r3, [r5, #0]
 801c1a8:	f105 0c10 	add.w	ip, r5, #16
 801c1ac:	4463      	add	r3, ip
 801c1ae:	429c      	cmp	r4, r3
 801c1b0:	f8c5 e008 	str.w	lr, [r5, #8]
 801c1b4:	60a1      	str	r1, [r4, #8]
 801c1b6:	d11a      	bne.n	801c1ee <tsi_free+0x116>
 801c1b8:	f850 0c10 	ldr.w	r0, [r0, #-16]
 801c1bc:	682b      	ldr	r3, [r5, #0]
 801c1be:	3010      	adds	r0, #16
 801c1c0:	4403      	add	r3, r0
 801c1c2:	60a9      	str	r1, [r5, #8]
 801c1c4:	602b      	str	r3, [r5, #0]
 801c1c6:	4297      	cmp	r7, r2
 801c1c8:	d1d6      	bne.n	801c178 <tsi_free+0xa0>
 801c1ca:	683a      	ldr	r2, [r7, #0]
 801c1cc:	6833      	ldr	r3, [r6, #0]
 801c1ce:	3210      	adds	r2, #16
 801c1d0:	4413      	add	r3, r2
 801c1d2:	6033      	str	r3, [r6, #0]
 801c1d4:	68bb      	ldr	r3, [r7, #8]
 801c1d6:	60b3      	str	r3, [r6, #8]
 801c1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1da:	f850 7c10 	ldr.w	r7, [r0, #-16]
 801c1de:	eba4 0e03 	sub.w	lr, r4, r3
 801c1e2:	4407      	add	r7, r0
 801c1e4:	f8c3 e008 	str.w	lr, [r3, #8]
 801c1e8:	4626      	mov	r6, r4
 801c1ea:	60a1      	str	r1, [r4, #8]
 801c1ec:	e7eb      	b.n	801c1c6 <tsi_free+0xee>
 801c1ee:	4626      	mov	r6, r4
 801c1f0:	e7e9      	b.n	801c1c6 <tsi_free+0xee>
 801c1f2:	bf00      	nop
 801c1f4:	201982e0 	.word	0x201982e0
 801c1f8:	000f1fa2 	.word	0x000f1fa2
 801c1fc:	000f1fa1 	.word	0x000f1fa1

0801c200 <nema_cl_create_sized>:
 801c200:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c202:	b093      	sub	sp, #76	; 0x4c
 801c204:	466d      	mov	r5, sp
 801c206:	4606      	mov	r6, r0
 801c208:	460a      	mov	r2, r1
 801c20a:	4628      	mov	r0, r5
 801c20c:	2100      	movs	r1, #0
 801c20e:	f7e6 fd67 	bl	8002ce0 <nema_buffer_create_pool>
 801c212:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801c216:	2500      	movs	r5, #0
 801c218:	ac04      	add	r4, sp, #16
 801c21a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801c21e:	4620      	mov	r0, r4
 801c220:	f7e6 fd6d 	bl	8002cfe <nema_buffer_map>
 801c224:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801c228:	ac08      	add	r4, sp, #32
 801c22a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801c22e:	2110      	movs	r1, #16
 801c230:	f04f 32ff 	mov.w	r2, #4294967295
 801c234:	9b04      	ldr	r3, [sp, #16]
 801c236:	950d      	str	r5, [sp, #52]	; 0x34
 801c238:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
 801c23c:	42ab      	cmp	r3, r5
 801c23e:	4635      	mov	r5, r6
 801c240:	bfb8      	it	lt
 801c242:	3307      	addlt	r3, #7
 801c244:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 801c248:	10db      	asrs	r3, r3, #3
 801c24a:	005b      	lsls	r3, r3, #1
 801c24c:	930c      	str	r3, [sp, #48]	; 0x30
 801c24e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c256:	e894 0003 	ldmia.w	r4, {r0, r1}
 801c25a:	2700      	movs	r7, #0
 801c25c:	e885 0003 	stmia.w	r5, {r0, r1}
 801c260:	4630      	mov	r0, r6
 801c262:	61b7      	str	r7, [r6, #24]
 801c264:	b013      	add	sp, #76	; 0x4c
 801c266:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c268 <nema_extend_bound_cl>:
 801c268:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c26a:	4d6e      	ldr	r5, [pc, #440]	; (801c424 <nema_extend_bound_cl+0x1bc>)
 801c26c:	b09f      	sub	sp, #124	; 0x7c
 801c26e:	682b      	ldr	r3, [r5, #0]
 801c270:	2b00      	cmp	r3, #0
 801c272:	f000 80c1 	beq.w	801c3f8 <nema_extend_bound_cl+0x190>
 801c276:	4606      	mov	r6, r0
 801c278:	6998      	ldr	r0, [r3, #24]
 801c27a:	0784      	lsls	r4, r0, #30
 801c27c:	f140 80b6 	bpl.w	801c3ec <nema_extend_bound_cl+0x184>
 801c280:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 801c284:	0680      	lsls	r0, r0, #26
 801c286:	d44e      	bmi.n	801c326 <nema_extend_bound_cl+0xbe>
 801c288:	1a89      	subs	r1, r1, r2
 801c28a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801c28e:	1049      	asrs	r1, r1, #1
 801c290:	2902      	cmp	r1, #2
 801c292:	dd13      	ble.n	801c2bc <nema_extend_bound_cl+0x54>
 801c294:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 801c298:	2700      	movs	r7, #0
 801c29a:	1e94      	subs	r4, r2, #2
 801c29c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801c2a0:	1c91      	adds	r1, r2, #2
 801c2a2:	0092      	lsls	r2, r2, #2
 801c2a4:	6898      	ldr	r0, [r3, #8]
 801c2a6:	f840 c002 	str.w	ip, [r0, r2]
 801c2aa:	6898      	ldr	r0, [r3, #8]
 801c2ac:	4410      	add	r0, r2
 801c2ae:	6047      	str	r7, [r0, #4]
 801c2b0:	6159      	str	r1, [r3, #20]
 801c2b2:	3102      	adds	r1, #2
 801c2b4:	428c      	cmp	r4, r1
 801c2b6:	f102 0208 	add.w	r2, r2, #8
 801c2ba:	d1f3      	bne.n	801c2a4 <nema_extend_bound_cl+0x3c>
 801c2bc:	6a1c      	ldr	r4, [r3, #32]
 801c2be:	2c00      	cmp	r4, #0
 801c2c0:	d050      	beq.n	801c364 <nema_extend_bound_cl+0xfc>
 801c2c2:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
 801c2c6:	26f0      	movs	r6, #240	; 0xf0
 801c2c8:	27f4      	movs	r7, #244	; 0xf4
 801c2ca:	6898      	ldr	r0, [r3, #8]
 801c2cc:	f041 0104 	orr.w	r1, r1, #4
 801c2d0:	6199      	str	r1, [r3, #24]
 801c2d2:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
 801c2d6:	6899      	ldr	r1, [r3, #8]
 801c2d8:	68e6      	ldr	r6, [r4, #12]
 801c2da:	0090      	lsls	r0, r2, #2
 801c2dc:	4401      	add	r1, r0
 801c2de:	604e      	str	r6, [r1, #4]
 801c2e0:	6899      	ldr	r1, [r3, #8]
 801c2e2:	1c96      	adds	r6, r2, #2
 801c2e4:	4401      	add	r1, r0
 801c2e6:	615e      	str	r6, [r3, #20]
 801c2e8:	608f      	str	r7, [r1, #8]
 801c2ea:	6899      	ldr	r1, [r3, #8]
 801c2ec:	6926      	ldr	r6, [r4, #16]
 801c2ee:	4401      	add	r1, r0
 801c2f0:	1d17      	adds	r7, r2, #4
 801c2f2:	60ce      	str	r6, [r1, #12]
 801c2f4:	621c      	str	r4, [r3, #32]
 801c2f6:	615f      	str	r7, [r3, #20]
 801c2f8:	68e1      	ldr	r1, [r4, #12]
 801c2fa:	f011 0107 	ands.w	r1, r1, #7
 801c2fe:	d120      	bne.n	801c342 <nema_extend_bound_cl+0xda>
 801c300:	691e      	ldr	r6, [r3, #16]
 801c302:	3205      	adds	r2, #5
 801c304:	42b2      	cmp	r2, r6
 801c306:	db23      	blt.n	801c350 <nema_extend_bound_cl+0xe8>
 801c308:	699a      	ldr	r2, [r3, #24]
 801c30a:	f022 0220 	bic.w	r2, r2, #32
 801c30e:	619a      	str	r2, [r3, #24]
 801c310:	69a3      	ldr	r3, [r4, #24]
 801c312:	075a      	lsls	r2, r3, #29
 801c314:	d503      	bpl.n	801c31e <nema_extend_bound_cl+0xb6>
 801c316:	6a24      	ldr	r4, [r4, #32]
 801c318:	69a3      	ldr	r3, [r4, #24]
 801c31a:	075b      	lsls	r3, r3, #29
 801c31c:	d4fb      	bmi.n	801c316 <nema_extend_bound_cl+0xae>
 801c31e:	2000      	movs	r0, #0
 801c320:	602c      	str	r4, [r5, #0]
 801c322:	b01f      	add	sp, #124	; 0x7c
 801c324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c326:	2900      	cmp	r1, #0
 801c328:	bfb8      	it	lt
 801c32a:	3103      	addlt	r1, #3
 801c32c:	1089      	asrs	r1, r1, #2
 801c32e:	0049      	lsls	r1, r1, #1
 801c330:	4291      	cmp	r1, r2
 801c332:	bfcc      	ite	gt
 801c334:	4610      	movgt	r0, r2
 801c336:	1a50      	suble	r0, r2, r1
 801c338:	1a09      	subs	r1, r1, r0
 801c33a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801c33e:	1049      	asrs	r1, r1, #1
 801c340:	e7a6      	b.n	801c290 <nema_extend_bound_cl+0x28>
 801c342:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801c346:	f7fe fc45 	bl	801abd4 <nema_set_error>
 801c34a:	2000      	movs	r0, #0
 801c34c:	b01f      	add	sp, #124	; 0x7c
 801c34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c350:	f44f 26a0 	mov.w	r6, #327680	; 0x50000
 801c354:	689a      	ldr	r2, [r3, #8]
 801c356:	4410      	add	r0, r2
 801c358:	e9c0 6104 	strd	r6, r1, [r0, #16]
 801c35c:	699a      	ldr	r2, [r3, #24]
 801c35e:	f022 0208 	bic.w	r2, r2, #8
 801c362:	e7d2      	b.n	801c30a <nema_extend_bound_cl+0xa2>
 801c364:	2028      	movs	r0, #40	; 0x28
 801c366:	f7e6 fc7c 	bl	8002c62 <nema_host_malloc>
 801c36a:	4604      	mov	r4, r0
 801c36c:	2800      	cmp	r0, #0
 801c36e:	d052      	beq.n	801c416 <nema_extend_bound_cl+0x1ae>
 801c370:	1cb1      	adds	r1, r6, #2
 801c372:	00c9      	lsls	r1, r1, #3
 801c374:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801c378:	dd1a      	ble.n	801c3b0 <nema_extend_bound_cl+0x148>
 801c37a:	466e      	mov	r6, sp
 801c37c:	4627      	mov	r7, r4
 801c37e:	4668      	mov	r0, sp
 801c380:	f7ff ff3e 	bl	801c200 <nema_cl_create_sized>
 801c384:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c386:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c388:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c38a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c38c:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c390:	e887 0003 	stmia.w	r7, {r0, r1}
 801c394:	68a3      	ldr	r3, [r4, #8]
 801c396:	2b00      	cmp	r3, #0
 801c398:	d034      	beq.n	801c404 <nema_extend_bound_cl+0x19c>
 801c39a:	682b      	ldr	r3, [r5, #0]
 801c39c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c39e:	2a00      	cmp	r2, #0
 801c3a0:	bf08      	it	eq
 801c3a2:	461a      	moveq	r2, r3
 801c3a4:	6262      	str	r2, [r4, #36]	; 0x24
 801c3a6:	699a      	ldr	r2, [r3, #24]
 801c3a8:	f022 020c 	bic.w	r2, r2, #12
 801c3ac:	61a2      	str	r2, [r4, #24]
 801c3ae:	e788      	b.n	801c2c2 <nema_extend_bound_cl+0x5a>
 801c3b0:	a80a      	add	r0, sp, #40	; 0x28
 801c3b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c3b6:	f7ff ff23 	bl	801c200 <nema_cl_create_sized>
 801c3ba:	2302      	movs	r3, #2
 801c3bc:	46a4      	mov	ip, r4
 801c3be:	9310      	str	r3, [sp, #64]	; 0x40
 801c3c0:	ae0a      	add	r6, sp, #40	; 0x28
 801c3c2:	af14      	add	r7, sp, #80	; 0x50
 801c3c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c3c6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c3c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c3ca:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c3cc:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c3d0:	ae14      	add	r6, sp, #80	; 0x50
 801c3d2:	e887 0003 	stmia.w	r7, {r0, r1}
 801c3d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c3d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c3dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c3de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c3e2:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c3e6:	e88c 0003 	stmia.w	ip, {r0, r1}
 801c3ea:	e7d3      	b.n	801c394 <nema_extend_bound_cl+0x12c>
 801c3ec:	2008      	movs	r0, #8
 801c3ee:	f7fe fbf1 	bl	801abd4 <nema_set_error>
 801c3f2:	f04f 30ff 	mov.w	r0, #4294967295
 801c3f6:	e7a9      	b.n	801c34c <nema_extend_bound_cl+0xe4>
 801c3f8:	2080      	movs	r0, #128	; 0x80
 801c3fa:	f7fe fbeb 	bl	801abd4 <nema_set_error>
 801c3fe:	f04f 30ff 	mov.w	r0, #4294967295
 801c402:	e7a3      	b.n	801c34c <nema_extend_bound_cl+0xe4>
 801c404:	2010      	movs	r0, #16
 801c406:	f7fe fbe5 	bl	801abd4 <nema_set_error>
 801c40a:	4620      	mov	r0, r4
 801c40c:	f7e6 fc1e 	bl	8002c4c <nema_host_free>
 801c410:	f04f 30ff 	mov.w	r0, #4294967295
 801c414:	e79a      	b.n	801c34c <nema_extend_bound_cl+0xe4>
 801c416:	2010      	movs	r0, #16
 801c418:	f7fe fbdc 	bl	801abd4 <nema_set_error>
 801c41c:	f04f 30ff 	mov.w	r0, #4294967295
 801c420:	e794      	b.n	801c34c <nema_extend_bound_cl+0xe4>
 801c422:	bf00      	nop
 801c424:	20198380 	.word	0x20198380

0801c428 <nema_cl_bind_circular>:
 801c428:	b358      	cbz	r0, 801c482 <nema_cl_bind_circular+0x5a>
 801c42a:	68c3      	ldr	r3, [r0, #12]
 801c42c:	f013 0207 	ands.w	r2, r3, #7
 801c430:	d117      	bne.n	801c462 <nema_cl_bind_circular+0x3a>
 801c432:	b4f0      	push	{r4, r5, r6, r7}
 801c434:	4c15      	ldr	r4, [pc, #84]	; (801c48c <nema_cl_bind_circular+0x64>)
 801c436:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c438:	6821      	ldr	r1, [r4, #0]
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	bf08      	it	eq
 801c43e:	4603      	moveq	r3, r0
 801c440:	b141      	cbz	r1, 801c454 <nema_cl_bind_circular+0x2c>
 801c442:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
 801c446:	1c46      	adds	r6, r0, #1
 801c448:	42ae      	cmp	r6, r5
 801c44a:	db0e      	blt.n	801c46a <nema_cl_bind_circular+0x42>
 801c44c:	698a      	ldr	r2, [r1, #24]
 801c44e:	f022 0220 	bic.w	r2, r2, #32
 801c452:	618a      	str	r2, [r1, #24]
 801c454:	699a      	ldr	r2, [r3, #24]
 801c456:	6023      	str	r3, [r4, #0]
 801c458:	f042 0220 	orr.w	r2, r2, #32
 801c45c:	619a      	str	r2, [r3, #24]
 801c45e:	bcf0      	pop	{r4, r5, r6, r7}
 801c460:	4770      	bx	lr
 801c462:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801c466:	f7fe bbb5 	b.w	801abd4 <nema_set_error>
 801c46a:	f44f 27a0 	mov.w	r7, #327680	; 0x50000
 801c46e:	688d      	ldr	r5, [r1, #8]
 801c470:	eb05 0680 	add.w	r6, r5, r0, lsl #2
 801c474:	f845 7020 	str.w	r7, [r5, r0, lsl #2]
 801c478:	6072      	str	r2, [r6, #4]
 801c47a:	698a      	ldr	r2, [r1, #24]
 801c47c:	f022 0208 	bic.w	r2, r2, #8
 801c480:	e7e5      	b.n	801c44e <nema_cl_bind_circular+0x26>
 801c482:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801c486:	f7fe bba5 	b.w	801abd4 <nema_set_error>
 801c48a:	bf00      	nop
 801c48c:	20198380 	.word	0x20198380

0801c490 <nema_cl_unbind>:
 801c490:	4910      	ldr	r1, [pc, #64]	; (801c4d4 <nema_cl_unbind+0x44>)
 801c492:	680b      	ldr	r3, [r1, #0]
 801c494:	b1d3      	cbz	r3, 801c4cc <nema_cl_unbind+0x3c>
 801c496:	b430      	push	{r4, r5}
 801c498:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 801c49c:	1c54      	adds	r4, r2, #1
 801c49e:	4284      	cmp	r4, r0
 801c4a0:	db07      	blt.n	801c4b2 <nema_cl_unbind+0x22>
 801c4a2:	699a      	ldr	r2, [r3, #24]
 801c4a4:	f022 0220 	bic.w	r2, r2, #32
 801c4a8:	619a      	str	r2, [r3, #24]
 801c4aa:	2300      	movs	r3, #0
 801c4ac:	600b      	str	r3, [r1, #0]
 801c4ae:	bc30      	pop	{r4, r5}
 801c4b0:	4770      	bx	lr
 801c4b2:	f44f 25a0 	mov.w	r5, #327680	; 0x50000
 801c4b6:	2400      	movs	r4, #0
 801c4b8:	6898      	ldr	r0, [r3, #8]
 801c4ba:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
 801c4be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801c4c2:	6054      	str	r4, [r2, #4]
 801c4c4:	699a      	ldr	r2, [r3, #24]
 801c4c6:	f022 0208 	bic.w	r2, r2, #8
 801c4ca:	e7eb      	b.n	801c4a4 <nema_cl_unbind+0x14>
 801c4cc:	2300      	movs	r3, #0
 801c4ce:	600b      	str	r3, [r1, #0]
 801c4d0:	4770      	bx	lr
 801c4d2:	bf00      	nop
 801c4d4:	20198380 	.word	0x20198380

0801c4d8 <nema_cl_submit_no_irq>:
 801c4d8:	2800      	cmp	r0, #0
 801c4da:	d059      	beq.n	801c590 <nema_cl_submit_no_irq+0xb8>
 801c4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c4de:	6983      	ldr	r3, [r0, #24]
 801c4e0:	4605      	mov	r5, r0
 801c4e2:	069c      	lsls	r4, r3, #26
 801c4e4:	d429      	bmi.n	801c53a <nema_cl_submit_no_irq+0x62>
 801c4e6:	4604      	mov	r4, r0
 801c4e8:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 801c4ec:	e012      	b.n	801c514 <nema_cl_submit_no_irq+0x3c>
 801c4ee:	6923      	ldr	r3, [r4, #16]
 801c4f0:	6949      	ldr	r1, [r1, #20]
 801c4f2:	4433      	add	r3, r6
 801c4f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801c4f8:	69a3      	ldr	r3, [r4, #24]
 801c4fa:	4620      	mov	r0, r4
 801c4fc:	f023 0308 	bic.w	r3, r3, #8
 801c500:	61a3      	str	r3, [r4, #24]
 801c502:	f7e6 fc28 	bl	8002d56 <nema_buffer_flush>
 801c506:	69a3      	ldr	r3, [r4, #24]
 801c508:	f043 0308 	orr.w	r3, r3, #8
 801c50c:	61a3      	str	r3, [r4, #24]
 801c50e:	6a24      	ldr	r4, [r4, #32]
 801c510:	b134      	cbz	r4, 801c520 <nema_cl_submit_no_irq+0x48>
 801c512:	69a3      	ldr	r3, [r4, #24]
 801c514:	0758      	lsls	r0, r3, #29
 801c516:	68a2      	ldr	r2, [r4, #8]
 801c518:	6a21      	ldr	r1, [r4, #32]
 801c51a:	d4e8      	bmi.n	801c4ee <nema_cl_submit_no_irq+0x16>
 801c51c:	071b      	lsls	r3, r3, #28
 801c51e:	d52a      	bpl.n	801c576 <nema_cl_submit_no_irq+0x9e>
 801c520:	2000      	movs	r0, #0
 801c522:	f7e6 fc22 	bl	8002d6a <nema_mutex_lock>
 801c526:	6969      	ldr	r1, [r5, #20]
 801c528:	4628      	mov	r0, r5
 801c52a:	f7fe f9c3 	bl	801a8b4 <nema_rb_submit_cmdlist>
 801c52e:	61e8      	str	r0, [r5, #28]
 801c530:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c534:	2000      	movs	r0, #0
 801c536:	f7e6 bc25 	b.w	8002d84 <nema_mutex_unlock>
 801c53a:	6903      	ldr	r3, [r0, #16]
 801c53c:	6946      	ldr	r6, [r0, #20]
 801c53e:	2b00      	cmp	r3, #0
 801c540:	bfb8      	it	lt
 801c542:	3303      	addlt	r3, #3
 801c544:	109b      	asrs	r3, r3, #2
 801c546:	005c      	lsls	r4, r3, #1
 801c548:	68c7      	ldr	r7, [r0, #12]
 801c54a:	69c0      	ldr	r0, [r0, #28]
 801c54c:	42a6      	cmp	r6, r4
 801c54e:	bfa4      	itt	ge
 801c550:	1b36      	subge	r6, r6, r4
 801c552:	eb07 07c3 	addge.w	r7, r7, r3, lsl #3
 801c556:	2800      	cmp	r0, #0
 801c558:	da15      	bge.n	801c586 <nema_cl_submit_no_irq+0xae>
 801c55a:	f04f 33ff 	mov.w	r3, #4294967295
 801c55e:	61eb      	str	r3, [r5, #28]
 801c560:	4631      	mov	r1, r6
 801c562:	4638      	mov	r0, r7
 801c564:	f7fe f922 	bl	801a7ac <nema_rb_submit_cmdlist2>
 801c568:	696b      	ldr	r3, [r5, #20]
 801c56a:	61e8      	str	r0, [r5, #28]
 801c56c:	42a3      	cmp	r3, r4
 801c56e:	bfa8      	it	ge
 801c570:	2400      	movge	r4, #0
 801c572:	616c      	str	r4, [r5, #20]
 801c574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c576:	4620      	mov	r0, r4
 801c578:	f7e6 fbed 	bl	8002d56 <nema_buffer_flush>
 801c57c:	69a3      	ldr	r3, [r4, #24]
 801c57e:	f043 0308 	orr.w	r3, r3, #8
 801c582:	61a3      	str	r3, [r4, #24]
 801c584:	e7cc      	b.n	801c520 <nema_cl_submit_no_irq+0x48>
 801c586:	f7e6 fb4d 	bl	8002c24 <nema_wait_irq_cl>
 801c58a:	2800      	cmp	r0, #0
 801c58c:	dae5      	bge.n	801c55a <nema_cl_submit_no_irq+0x82>
 801c58e:	e7e7      	b.n	801c560 <nema_cl_submit_no_irq+0x88>
 801c590:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801c594:	f7fe bb1e 	b.w	801abd4 <nema_set_error>

0801c598 <nema_cl_get_space>:
 801c598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c59a:	4e2d      	ldr	r6, [pc, #180]	; (801c650 <nema_cl_get_space+0xb8>)
 801c59c:	6834      	ldr	r4, [r6, #0]
 801c59e:	2c00      	cmp	r4, #0
 801c5a0:	d039      	beq.n	801c616 <nema_cl_get_space+0x7e>
 801c5a2:	69a7      	ldr	r7, [r4, #24]
 801c5a4:	4605      	mov	r5, r0
 801c5a6:	f027 0208 	bic.w	r2, r7, #8
 801c5aa:	f017 0720 	ands.w	r7, r7, #32
 801c5ae:	61a2      	str	r2, [r4, #24]
 801c5b0:	6923      	ldr	r3, [r4, #16]
 801c5b2:	6962      	ldr	r2, [r4, #20]
 801c5b4:	d016      	beq.n	801c5e4 <nema_cl_get_space+0x4c>
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	bfb8      	it	lt
 801c5ba:	3303      	addlt	r3, #3
 801c5bc:	109b      	asrs	r3, r3, #2
 801c5be:	005b      	lsls	r3, r3, #1
 801c5c0:	4293      	cmp	r3, r2
 801c5c2:	bfcc      	ite	gt
 801c5c4:	4611      	movgt	r1, r2
 801c5c6:	1ad1      	suble	r1, r2, r3
 801c5c8:	1a5b      	subs	r3, r3, r1
 801c5ca:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c5ce:	1c41      	adds	r1, r0, #1
 801c5d0:	ebb1 0f63 	cmp.w	r1, r3, asr #1
 801c5d4:	da1a      	bge.n	801c60c <nema_cl_get_space+0x74>
 801c5d6:	68a0      	ldr	r0, [r4, #8]
 801c5d8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801c5dc:	6165      	str	r5, [r4, #20]
 801c5de:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801c5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c5e4:	1a9b      	subs	r3, r3, r2
 801c5e6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c5ea:	105b      	asrs	r3, r3, #1
 801c5ec:	3b01      	subs	r3, #1
 801c5ee:	4283      	cmp	r3, r0
 801c5f0:	dcf1      	bgt.n	801c5d6 <nema_cl_get_space+0x3e>
 801c5f2:	f7ff fe39 	bl	801c268 <nema_extend_bound_cl>
 801c5f6:	2800      	cmp	r0, #0
 801c5f8:	db27      	blt.n	801c64a <nema_cl_get_space+0xb2>
 801c5fa:	6834      	ldr	r4, [r6, #0]
 801c5fc:	6962      	ldr	r2, [r4, #20]
 801c5fe:	68a0      	ldr	r0, [r4, #8]
 801c600:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801c604:	6165      	str	r5, [r4, #20]
 801c606:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801c60a:	e7ea      	b.n	801c5e2 <nema_cl_get_space+0x4a>
 801c60c:	b942      	cbnz	r2, 801c620 <nema_cl_get_space+0x88>
 801c60e:	f04f 33ff 	mov.w	r3, #4294967295
 801c612:	61e3      	str	r3, [r4, #28]
 801c614:	e7df      	b.n	801c5d6 <nema_cl_get_space+0x3e>
 801c616:	2080      	movs	r0, #128	; 0x80
 801c618:	f7fe fadc 	bl	801abd4 <nema_set_error>
 801c61c:	4620      	mov	r0, r4
 801c61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c620:	4620      	mov	r0, r4
 801c622:	f7ff ff59 	bl	801c4d8 <nema_cl_submit_no_irq>
 801c626:	69e0      	ldr	r0, [r4, #28]
 801c628:	f7fe fa10 	bl	801aa4c <nema_rb_submit_cl_id>
 801c62c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801c630:	69e0      	ldr	r0, [r4, #28]
 801c632:	4298      	cmp	r0, r3
 801c634:	d1e1      	bne.n	801c5fa <nema_cl_get_space+0x62>
 801c636:	f7e6 faf5 	bl	8002c24 <nema_wait_irq_cl>
 801c63a:	2800      	cmp	r0, #0
 801c63c:	dbdd      	blt.n	801c5fa <nema_cl_get_space+0x62>
 801c63e:	f04f 33ff 	mov.w	r3, #4294967295
 801c642:	61e3      	str	r3, [r4, #28]
 801c644:	6834      	ldr	r4, [r6, #0]
 801c646:	6962      	ldr	r2, [r4, #20]
 801c648:	e7c5      	b.n	801c5d6 <nema_cl_get_space+0x3e>
 801c64a:	4638      	mov	r0, r7
 801c64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c64e:	bf00      	nop
 801c650:	20198380 	.word	0x20198380

0801c654 <nema_cl_add_cmd>:
 801c654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c658:	4e30      	ldr	r6, [pc, #192]	; (801c71c <nema_cl_add_cmd+0xc8>)
 801c65a:	4607      	mov	r7, r0
 801c65c:	6834      	ldr	r4, [r6, #0]
 801c65e:	4688      	mov	r8, r1
 801c660:	b35c      	cbz	r4, 801c6ba <nema_cl_add_cmd+0x66>
 801c662:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 801c666:	f025 0308 	bic.w	r3, r5, #8
 801c66a:	f015 0020 	ands.w	r0, r5, #32
 801c66e:	61a3      	str	r3, [r4, #24]
 801c670:	6923      	ldr	r3, [r4, #16]
 801c672:	d016      	beq.n	801c6a2 <nema_cl_add_cmd+0x4e>
 801c674:	2b00      	cmp	r3, #0
 801c676:	bfb8      	it	lt
 801c678:	3303      	addlt	r3, #3
 801c67a:	109b      	asrs	r3, r3, #2
 801c67c:	005b      	lsls	r3, r3, #1
 801c67e:	4293      	cmp	r3, r2
 801c680:	bfcc      	ite	gt
 801c682:	4611      	movgt	r1, r2
 801c684:	1ad1      	suble	r1, r2, r3
 801c686:	1a5b      	subs	r3, r3, r1
 801c688:	2b03      	cmp	r3, #3
 801c68a:	dd2a      	ble.n	801c6e2 <nema_cl_add_cmd+0x8e>
 801c68c:	1c51      	adds	r1, r2, #1
 801c68e:	68a0      	ldr	r0, [r4, #8]
 801c690:	1c93      	adds	r3, r2, #2
 801c692:	f840 7022 	str.w	r7, [r0, r2, lsl #2]
 801c696:	68a2      	ldr	r2, [r4, #8]
 801c698:	f842 8021 	str.w	r8, [r2, r1, lsl #2]
 801c69c:	6163      	str	r3, [r4, #20]
 801c69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6a2:	07a9      	lsls	r1, r5, #30
 801c6a4:	d515      	bpl.n	801c6d2 <nema_cl_add_cmd+0x7e>
 801c6a6:	1d11      	adds	r1, r2, #4
 801c6a8:	4299      	cmp	r1, r3
 801c6aa:	dbef      	blt.n	801c68c <nema_cl_add_cmd+0x38>
 801c6ac:	f7ff fddc 	bl	801c268 <nema_extend_bound_cl>
 801c6b0:	2800      	cmp	r0, #0
 801c6b2:	dbf4      	blt.n	801c69e <nema_cl_add_cmd+0x4a>
 801c6b4:	6834      	ldr	r4, [r6, #0]
 801c6b6:	6962      	ldr	r2, [r4, #20]
 801c6b8:	e7e8      	b.n	801c68c <nema_cl_add_cmd+0x38>
 801c6ba:	4620      	mov	r0, r4
 801c6bc:	f7e6 fb55 	bl	8002d6a <nema_mutex_lock>
 801c6c0:	4638      	mov	r0, r7
 801c6c2:	4641      	mov	r1, r8
 801c6c4:	f7fe f8fa 	bl	801a8bc <nema_rb_inline_cmd>
 801c6c8:	4620      	mov	r0, r4
 801c6ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c6ce:	f7e6 bb59 	b.w	8002d84 <nema_mutex_unlock>
 801c6d2:	1c51      	adds	r1, r2, #1
 801c6d4:	4299      	cmp	r1, r3
 801c6d6:	dbda      	blt.n	801c68e <nema_cl_add_cmd+0x3a>
 801c6d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c6dc:	2008      	movs	r0, #8
 801c6de:	f7fe ba79 	b.w	801abd4 <nema_set_error>
 801c6e2:	b922      	cbnz	r2, 801c6ee <nema_cl_add_cmd+0x9a>
 801c6e4:	f04f 33ff 	mov.w	r3, #4294967295
 801c6e8:	2101      	movs	r1, #1
 801c6ea:	61e3      	str	r3, [r4, #28]
 801c6ec:	e7cf      	b.n	801c68e <nema_cl_add_cmd+0x3a>
 801c6ee:	4620      	mov	r0, r4
 801c6f0:	f7ff fef2 	bl	801c4d8 <nema_cl_submit_no_irq>
 801c6f4:	69e0      	ldr	r0, [r4, #28]
 801c6f6:	f7fe f9a9 	bl	801aa4c <nema_rb_submit_cl_id>
 801c6fa:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801c6fe:	69e0      	ldr	r0, [r4, #28]
 801c700:	4298      	cmp	r0, r3
 801c702:	d1d7      	bne.n	801c6b4 <nema_cl_add_cmd+0x60>
 801c704:	f7e6 fa8e 	bl	8002c24 <nema_wait_irq_cl>
 801c708:	2800      	cmp	r0, #0
 801c70a:	dbd3      	blt.n	801c6b4 <nema_cl_add_cmd+0x60>
 801c70c:	f04f 33ff 	mov.w	r3, #4294967295
 801c710:	61e3      	str	r3, [r4, #28]
 801c712:	6834      	ldr	r4, [r6, #0]
 801c714:	6962      	ldr	r2, [r4, #20]
 801c716:	1c51      	adds	r1, r2, #1
 801c718:	e7b9      	b.n	801c68e <nema_cl_add_cmd+0x3a>
 801c71a:	bf00      	nop
 801c71c:	20198380 	.word	0x20198380

0801c720 <nema_cl_submit>:
 801c720:	2800      	cmp	r0, #0
 801c722:	d05c      	beq.n	801c7de <nema_cl_submit+0xbe>
 801c724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c726:	6944      	ldr	r4, [r0, #20]
 801c728:	4605      	mov	r5, r0
 801c72a:	b91c      	cbnz	r4, 801c734 <nema_cl_submit+0x14>
 801c72c:	f04f 33ff 	mov.w	r3, #4294967295
 801c730:	61eb      	str	r3, [r5, #28]
 801c732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c734:	6983      	ldr	r3, [r0, #24]
 801c736:	069e      	lsls	r6, r3, #26
 801c738:	d527      	bpl.n	801c78a <nema_cl_submit+0x6a>
 801c73a:	6903      	ldr	r3, [r0, #16]
 801c73c:	68c7      	ldr	r7, [r0, #12]
 801c73e:	2b00      	cmp	r3, #0
 801c740:	bfb8      	it	lt
 801c742:	3303      	addlt	r3, #3
 801c744:	109b      	asrs	r3, r3, #2
 801c746:	005e      	lsls	r6, r3, #1
 801c748:	69c0      	ldr	r0, [r0, #28]
 801c74a:	42b4      	cmp	r4, r6
 801c74c:	bfa4      	itt	ge
 801c74e:	1ba4      	subge	r4, r4, r6
 801c750:	eb07 07c3 	addge.w	r7, r7, r3, lsl #3
 801c754:	2800      	cmp	r0, #0
 801c756:	da46      	bge.n	801c7e6 <nema_cl_submit+0xc6>
 801c758:	f04f 33ff 	mov.w	r3, #4294967295
 801c75c:	61eb      	str	r3, [r5, #28]
 801c75e:	4621      	mov	r1, r4
 801c760:	4638      	mov	r0, r7
 801c762:	f7fe f823 	bl	801a7ac <nema_rb_submit_cmdlist2>
 801c766:	696b      	ldr	r3, [r5, #20]
 801c768:	61e8      	str	r0, [r5, #28]
 801c76a:	429e      	cmp	r6, r3
 801c76c:	bfd8      	it	le
 801c76e:	2600      	movle	r6, #0
 801c770:	616e      	str	r6, [r5, #20]
 801c772:	f7fe f96b 	bl	801aa4c <nema_rb_submit_cl_id>
 801c776:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801c77a:	69e8      	ldr	r0, [r5, #28]
 801c77c:	4298      	cmp	r0, r3
 801c77e:	d1d8      	bne.n	801c732 <nema_cl_submit+0x12>
 801c780:	f7e6 fa50 	bl	8002c24 <nema_wait_irq_cl>
 801c784:	2800      	cmp	r0, #0
 801c786:	dad1      	bge.n	801c72c <nema_cl_submit+0xc>
 801c788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c78a:	4604      	mov	r4, r0
 801c78c:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 801c790:	e012      	b.n	801c7b8 <nema_cl_submit+0x98>
 801c792:	6923      	ldr	r3, [r4, #16]
 801c794:	6949      	ldr	r1, [r1, #20]
 801c796:	4433      	add	r3, r6
 801c798:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801c79c:	69a3      	ldr	r3, [r4, #24]
 801c79e:	4620      	mov	r0, r4
 801c7a0:	f023 0308 	bic.w	r3, r3, #8
 801c7a4:	61a3      	str	r3, [r4, #24]
 801c7a6:	f7e6 fad6 	bl	8002d56 <nema_buffer_flush>
 801c7aa:	69a3      	ldr	r3, [r4, #24]
 801c7ac:	f043 0308 	orr.w	r3, r3, #8
 801c7b0:	61a3      	str	r3, [r4, #24]
 801c7b2:	6a24      	ldr	r4, [r4, #32]
 801c7b4:	b134      	cbz	r4, 801c7c4 <nema_cl_submit+0xa4>
 801c7b6:	69a3      	ldr	r3, [r4, #24]
 801c7b8:	0758      	lsls	r0, r3, #29
 801c7ba:	68a2      	ldr	r2, [r4, #8]
 801c7bc:	6a21      	ldr	r1, [r4, #32]
 801c7be:	d4e8      	bmi.n	801c792 <nema_cl_submit+0x72>
 801c7c0:	071b      	lsls	r3, r3, #28
 801c7c2:	d515      	bpl.n	801c7f0 <nema_cl_submit+0xd0>
 801c7c4:	2000      	movs	r0, #0
 801c7c6:	f7e6 fad0 	bl	8002d6a <nema_mutex_lock>
 801c7ca:	6969      	ldr	r1, [r5, #20]
 801c7cc:	4628      	mov	r0, r5
 801c7ce:	f7fe f871 	bl	801a8b4 <nema_rb_submit_cmdlist>
 801c7d2:	61e8      	str	r0, [r5, #28]
 801c7d4:	2000      	movs	r0, #0
 801c7d6:	f7e6 fad5 	bl	8002d84 <nema_mutex_unlock>
 801c7da:	69e8      	ldr	r0, [r5, #28]
 801c7dc:	e7c9      	b.n	801c772 <nema_cl_submit+0x52>
 801c7de:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801c7e2:	f7fe b9f7 	b.w	801abd4 <nema_set_error>
 801c7e6:	f7e6 fa1d 	bl	8002c24 <nema_wait_irq_cl>
 801c7ea:	2800      	cmp	r0, #0
 801c7ec:	dab4      	bge.n	801c758 <nema_cl_submit+0x38>
 801c7ee:	e7b6      	b.n	801c75e <nema_cl_submit+0x3e>
 801c7f0:	4620      	mov	r0, r4
 801c7f2:	f7e6 fab0 	bl	8002d56 <nema_buffer_flush>
 801c7f6:	69a3      	ldr	r3, [r4, #24]
 801c7f8:	f043 0308 	orr.w	r3, r3, #8
 801c7fc:	61a3      	str	r3, [r4, #24]
 801c7fe:	e7e1      	b.n	801c7c4 <nema_cl_submit+0xa4>

0801c800 <nema_cl_wait>:
 801c800:	b510      	push	{r4, lr}
 801c802:	b170      	cbz	r0, 801c822 <nema_cl_wait+0x22>
 801c804:	4604      	mov	r4, r0
 801c806:	69c0      	ldr	r0, [r0, #28]
 801c808:	2800      	cmp	r0, #0
 801c80a:	da04      	bge.n	801c816 <nema_cl_wait+0x16>
 801c80c:	f04f 33ff 	mov.w	r3, #4294967295
 801c810:	61e3      	str	r3, [r4, #28]
 801c812:	2000      	movs	r0, #0
 801c814:	bd10      	pop	{r4, pc}
 801c816:	f7e6 fa05 	bl	8002c24 <nema_wait_irq_cl>
 801c81a:	2800      	cmp	r0, #0
 801c81c:	daf6      	bge.n	801c80c <nema_cl_wait+0xc>
 801c81e:	2000      	movs	r0, #0
 801c820:	bd10      	pop	{r4, pc}
 801c822:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801c826:	f7fe f9d5 	bl	801abd4 <nema_set_error>
 801c82a:	f04f 30ff 	mov.w	r0, #4294967295
 801c82e:	bd10      	pop	{r4, pc}

0801c830 <nema_blender_init>:
 801c830:	b530      	push	{r4, r5, lr}
 801c832:	b085      	sub	sp, #20
 801c834:	466d      	mov	r5, sp
 801c836:	2418      	movs	r4, #24
 801c838:	4b11      	ldr	r3, [pc, #68]	; (801c880 <nema_blender_init+0x50>)
 801c83a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c83c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801c840:	2101      	movs	r1, #1
 801c842:	4622      	mov	r2, r4
 801c844:	4628      	mov	r0, r5
 801c846:	440c      	add	r4, r1
 801c848:	f7ff f974 	bl	801bb34 <nema_load_frag_shader>
 801c84c:	2c1f      	cmp	r4, #31
 801c84e:	d1f7      	bne.n	801c840 <nema_blender_init+0x10>
 801c850:	4622      	mov	r2, r4
 801c852:	2101      	movs	r1, #1
 801c854:	a802      	add	r0, sp, #8
 801c856:	f7ff f96d 	bl	801bb34 <nema_load_frag_shader>
 801c85a:	f7ff f829 	bl	801b8b0 <nema_readHwConfig>
 801c85e:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 801c862:	2800      	cmp	r0, #0
 801c864:	bf14      	ite	ne
 801c866:	2201      	movne	r2, #1
 801c868:	2200      	moveq	r2, #0
 801c86a:	4b06      	ldr	r3, [pc, #24]	; (801c884 <nema_blender_init+0x54>)
 801c86c:	701a      	strb	r2, [r3, #0]
 801c86e:	d005      	beq.n	801c87c <nema_blender_init+0x4c>
 801c870:	2200      	movs	r2, #0
 801c872:	4b05      	ldr	r3, [pc, #20]	; (801c888 <nema_blender_init+0x58>)
 801c874:	2001      	movs	r0, #1
 801c876:	601a      	str	r2, [r3, #0]
 801c878:	f7ff f97c 	bl	801bb74 <nema_set_rop_blend_mode>
 801c87c:	b005      	add	sp, #20
 801c87e:	bd30      	pop	{r4, r5, pc}
 801c880:	0802976c 	.word	0x0802976c
 801c884:	20198385 	.word	0x20198385
 801c888:	20000064 	.word	0x20000064

0801c88c <nema_set_blend>:
 801c88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c890:	4ca5      	ldr	r4, [pc, #660]	; (801cb28 <nema_set_blend+0x29c>)
 801c892:	4683      	mov	fp, r0
 801c894:	7820      	ldrb	r0, [r4, #0]
 801c896:	b0a7      	sub	sp, #156	; 0x9c
 801c898:	9102      	str	r1, [sp, #8]
 801c89a:	9200      	str	r2, [sp, #0]
 801c89c:	2800      	cmp	r0, #0
 801c89e:	f040 8233 	bne.w	801cd08 <nema_set_blend+0x47c>
 801c8a2:	469a      	mov	sl, r3
 801c8a4:	465c      	mov	r4, fp
 801c8a6:	ea4f 535b 	mov.w	r3, fp, lsr #21
 801c8aa:	055b      	lsls	r3, r3, #21
 801c8ac:	930e      	str	r3, [sp, #56]	; 0x38
 801c8ae:	f40b 0300 	and.w	r3, fp, #8388608	; 0x800000
 801c8b2:	930c      	str	r3, [sp, #48]	; 0x30
 801c8b4:	f40b 0380 	and.w	r3, fp, #4194304	; 0x400000
 801c8b8:	f00b 010f 	and.w	r1, fp, #15
 801c8bc:	930d      	str	r3, [sp, #52]	; 0x34
 801c8be:	f40b 1300 	and.w	r3, fp, #2097152	; 0x200000
 801c8c2:	930b      	str	r3, [sp, #44]	; 0x2c
 801c8c4:	9101      	str	r1, [sp, #4]
 801c8c6:	b2d2      	uxtb	r2, r2
 801c8c8:	fa5f f38a 	uxtb.w	r3, sl
 801c8cc:	f3cb 2903 	ubfx	r9, fp, #8, #4
 801c8d0:	f00b 7100 	and.w	r1, fp, #33554432	; 0x2000000
 801c8d4:	f3cb 6840 	ubfx	r8, fp, #25, #1
 801c8d8:	9d02      	ldr	r5, [sp, #8]
 801c8da:	b2e8      	uxtb	r0, r5
 801c8dc:	2804      	cmp	r0, #4
 801c8de:	4628      	mov	r0, r5
 801c8e0:	bf28      	it	cs
 801c8e2:	2000      	movcs	r0, #0
 801c8e4:	2a04      	cmp	r2, #4
 801c8e6:	9a00      	ldr	r2, [sp, #0]
 801c8e8:	bf28      	it	cs
 801c8ea:	f04f 32ff 	movcs.w	r2, #4294967295
 801c8ee:	2b04      	cmp	r3, #4
 801c8f0:	9002      	str	r0, [sp, #8]
 801c8f2:	9200      	str	r2, [sp, #0]
 801c8f4:	bf28      	it	cs
 801c8f6:	4682      	movcs	sl, r0
 801c8f8:	4602      	mov	r2, r0
 801c8fa:	bf34      	ite	cc
 801c8fc:	4650      	movcc	r0, sl
 801c8fe:	2002      	movcs	r0, #2
 801c900:	4b8a      	ldr	r3, [pc, #552]	; (801cb2c <nema_set_blend+0x2a0>)
 801c902:	9010      	str	r0, [sp, #64]	; 0x40
 801c904:	781b      	ldrb	r3, [r3, #0]
 801c906:	b14b      	cbz	r3, 801c91c <nema_set_blend+0x90>
 801c908:	f01b 7380 	ands.w	r3, fp, #16777216	; 0x1000000
 801c90c:	9303      	str	r3, [sp, #12]
 801c90e:	d102      	bne.n	801c916 <nema_set_blend+0x8a>
 801c910:	4552      	cmp	r2, sl
 801c912:	f000 830c 	beq.w	801cf2e <nema_set_blend+0x6a2>
 801c916:	2001      	movs	r0, #1
 801c918:	f7ff f92c 	bl	801bb74 <nema_set_rop_blend_mode>
 801c91c:	2c00      	cmp	r4, #0
 801c91e:	bfac      	ite	ge
 801c920:	4642      	movge	r2, r8
 801c922:	2201      	movlt	r2, #1
 801c924:	4b82      	ldr	r3, [pc, #520]	; (801cb30 <nema_set_blend+0x2a4>)
 801c926:	f1bb 0f01 	cmp.w	fp, #1
 801c92a:	789b      	ldrb	r3, [r3, #2]
 801c92c:	9207      	str	r2, [sp, #28]
 801c92e:	9305      	str	r3, [sp, #20]
 801c930:	f000 80e0 	beq.w	801caf4 <nema_set_blend+0x268>
 801c934:	f00b 4380 	and.w	r3, fp, #1073741824	; 0x40000000
 801c938:	9315      	str	r3, [sp, #84]	; 0x54
 801c93a:	f3cb 7380 	ubfx	r3, fp, #30, #1
 801c93e:	9306      	str	r3, [sp, #24]
 801c940:	f00b 5300 	and.w	r3, fp, #536870912	; 0x20000000
 801c944:	9309      	str	r3, [sp, #36]	; 0x24
 801c946:	9b01      	ldr	r3, [sp, #4]
 801c948:	f00b 5280 	and.w	r2, fp, #268435456	; 0x10000000
 801c94c:	2b05      	cmp	r3, #5
 801c94e:	f240 80df 	bls.w	801cb10 <nema_set_blend+0x284>
 801c952:	2301      	movs	r3, #1
 801c954:	930a      	str	r3, [sp, #40]	; 0x28
 801c956:	9304      	str	r3, [sp, #16]
 801c958:	2303      	movs	r3, #3
 801c95a:	4976      	ldr	r1, [pc, #472]	; (801cb34 <nema_set_blend+0x2a8>)
 801c95c:	9303      	str	r3, [sp, #12]
 801c95e:	9108      	str	r1, [sp, #32]
 801c960:	4d75      	ldr	r5, [pc, #468]	; (801cb38 <nema_set_blend+0x2ac>)
 801c962:	2a00      	cmp	r2, #0
 801c964:	4b75      	ldr	r3, [pc, #468]	; (801cb3c <nema_set_blend+0x2b0>)
 801c966:	bf18      	it	ne
 801c968:	462b      	movne	r3, r5
 801c96a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 801c96e:	f105 0502 	add.w	r5, r5, #2
 801c972:	9312      	str	r3, [sp, #72]	; 0x48
 801c974:	4b72      	ldr	r3, [pc, #456]	; (801cb40 <nema_set_blend+0x2b4>)
 801c976:	bf08      	it	eq
 801c978:	462b      	moveq	r3, r5
 801c97a:	f8df e20c 	ldr.w	lr, [pc, #524]	; 801cb88 <nema_set_blend+0x2fc>
 801c97e:	f8df c20c 	ldr.w	ip, [pc, #524]	; 801cb8c <nema_set_blend+0x300>
 801c982:	9311      	str	r3, [sp, #68]	; 0x44
 801c984:	bf14      	ite	ne
 801c986:	4673      	movne	r3, lr
 801c988:	4663      	moveq	r3, ip
 801c98a:	4f6e      	ldr	r7, [pc, #440]	; (801cb44 <nema_set_blend+0x2b8>)
 801c98c:	9314      	str	r3, [sp, #80]	; 0x50
 801c98e:	4b6e      	ldr	r3, [pc, #440]	; (801cb48 <nema_set_blend+0x2bc>)
 801c990:	bf18      	it	ne
 801c992:	463b      	movne	r3, r7
 801c994:	f5a5 25c8 	sub.w	r5, r5, #409600	; 0x64000
 801c998:	9313      	str	r3, [sp, #76]	; 0x4c
 801c99a:	4b6c      	ldr	r3, [pc, #432]	; (801cb4c <nema_set_blend+0x2c0>)
 801c99c:	f1a5 0542 	sub.w	r5, r5, #66	; 0x42
 801c9a0:	496b      	ldr	r1, [pc, #428]	; (801cb50 <nema_set_blend+0x2c4>)
 801c9a2:	bf18      	it	ne
 801c9a4:	4619      	movne	r1, r3
 801c9a6:	f1a3 033e 	sub.w	r3, r3, #62	; 0x3e
 801c9aa:	bf18      	it	ne
 801c9ac:	462b      	movne	r3, r5
 801c9ae:	4e69      	ldr	r6, [pc, #420]	; (801cb54 <nema_set_blend+0x2c8>)
 801c9b0:	4f69      	ldr	r7, [pc, #420]	; (801cb58 <nema_set_blend+0x2cc>)
 801c9b2:	461d      	mov	r5, r3
 801c9b4:	4b69      	ldr	r3, [pc, #420]	; (801cb5c <nema_set_blend+0x2d0>)
 801c9b6:	486a      	ldr	r0, [pc, #424]	; (801cb60 <nema_set_blend+0x2d4>)
 801c9b8:	bf18      	it	ne
 801c9ba:	4630      	movne	r0, r6
 801c9bc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 801c9c0:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 801cb90 <nema_set_blend+0x304>
 801c9c4:	f506 3650 	add.w	r6, r6, #212992	; 0x34000
 801c9c8:	bf04      	itt	eq
 801c9ca:	46bc      	moveq	ip, r7
 801c9cc:	461e      	moveq	r6, r3
 801c9ce:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 801c9d2:	f1a3 0340 	sub.w	r3, r3, #64	; 0x40
 801c9d6:	f1a7 0742 	sub.w	r7, r7, #66	; 0x42
 801c9da:	bf08      	it	eq
 801c9dc:	461f      	moveq	r7, r3
 801c9de:	4c61      	ldr	r4, [pc, #388]	; (801cb64 <nema_set_blend+0x2d8>)
 801c9e0:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 801cb94 <nema_set_blend+0x308>
 801c9e4:	4a60      	ldr	r2, [pc, #384]	; (801cb68 <nema_set_blend+0x2dc>)
 801c9e6:	bf18      	it	ne
 801c9e8:	4622      	movne	r2, r4
 801c9ea:	f504 3450 	add.w	r4, r4, #212992	; 0x34000
 801c9ee:	bf08      	it	eq
 801c9f0:	4674      	moveq	r4, lr
 801c9f2:	f8dd e018 	ldr.w	lr, [sp, #24]
 801c9f6:	f1b8 0f00 	cmp.w	r8, #0
 801c9fa:	f040 8109 	bne.w	801cc10 <nema_set_blend+0x384>
 801c9fe:	9b07      	ldr	r3, [sp, #28]
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	bf0c      	ite	eq
 801ca04:	2300      	moveq	r3, #0
 801ca06:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 801ca0a:	930f      	str	r3, [sp, #60]	; 0x3c
 801ca0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	f040 8105 	bne.w	801cc1e <nema_set_blend+0x392>
 801ca14:	f01b 6f80 	tst.w	fp, #67108864	; 0x4000000
 801ca18:	f000 81b4 	beq.w	801cd84 <nema_set_blend+0x4f8>
 801ca1c:	4684      	mov	ip, r0
 801ca1e:	460e      	mov	r6, r1
 801ca20:	4614      	mov	r4, r2
 801ca22:	462f      	mov	r7, r5
 801ca24:	f04f 0804 	mov.w	r8, #4
 801ca28:	2200      	movs	r2, #0
 801ca2a:	4850      	ldr	r0, [pc, #320]	; (801cb6c <nema_set_blend+0x2e0>)
 801ca2c:	f00b 53c0 	and.w	r3, fp, #402653184	; 0x18000000
 801ca30:	4293      	cmp	r3, r2
 801ca32:	f850 302a 	ldr.w	r3, [r0, sl, lsl #2]
 801ca36:	bf18      	it	ne
 801ca38:	463e      	movne	r6, r7
 801ca3a:	9309      	str	r3, [sp, #36]	; 0x24
 801ca3c:	9b05      	ldr	r3, [sp, #20]
 801ca3e:	bf16      	itet	ne
 801ca40:	46a4      	movne	ip, r4
 801ca42:	270e      	moveq	r7, #14
 801ca44:	270c      	movne	r7, #12
 801ca46:	9216      	str	r2, [sp, #88]	; 0x58
 801ca48:	2b00      	cmp	r3, #0
 801ca4a:	f000 80eb 	beq.w	801cc24 <nema_set_blend+0x398>
 801ca4e:	4b48      	ldr	r3, [pc, #288]	; (801cb70 <nema_set_blend+0x2e4>)
 801ca50:	4948      	ldr	r1, [pc, #288]	; (801cb74 <nema_set_blend+0x2e8>)
 801ca52:	9800      	ldr	r0, [sp, #0]
 801ca54:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
 801ca58:	1c43      	adds	r3, r0, #1
 801ca5a:	f000 8257 	beq.w	801cf0c <nema_set_blend+0x680>
 801ca5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801ca62:	4b45      	ldr	r3, [pc, #276]	; (801cb78 <nema_set_blend+0x2ec>)
 801ca64:	9204      	str	r2, [sp, #16]
 801ca66:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801ca6a:	e9cd 3118 	strd	r3, r1, [sp, #96]	; 0x60
 801ca6e:	2203      	movs	r2, #3
 801ca70:	2102      	movs	r1, #2
 801ca72:	4c42      	ldr	r4, [pc, #264]	; (801cb7c <nema_set_blend+0x2f0>)
 801ca74:	f1b9 0f01 	cmp.w	r9, #1
 801ca78:	f240 8110 	bls.w	801cc9c <nema_set_blend+0x410>
 801ca7c:	9b01      	ldr	r3, [sp, #4]
 801ca7e:	2b05      	cmp	r3, #5
 801ca80:	d803      	bhi.n	801ca8a <nema_set_blend+0x1fe>
 801ca82:	f01b 5f70 	tst.w	fp, #1006632960	; 0x3c000000
 801ca86:	f000 8087 	beq.w	801cb98 <nema_set_blend+0x30c>
 801ca8a:	9b03      	ldr	r3, [sp, #12]
 801ca8c:	b933      	cbnz	r3, 801ca9c <nema_set_blend+0x210>
 801ca8e:	f1b9 0f00 	cmp.w	r9, #0
 801ca92:	d103      	bne.n	801ca9c <nema_set_blend+0x210>
 801ca94:	9b07      	ldr	r3, [sp, #28]
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	f000 81ca 	beq.w	801ce30 <nema_set_blend+0x5a4>
 801ca9c:	f1b8 0f1d 	cmp.w	r8, #29
 801caa0:	f000 8150 	beq.w	801cd44 <nema_set_blend+0x4b8>
 801caa4:	4b36      	ldr	r3, [pc, #216]	; (801cb80 <nema_set_blend+0x2f4>)
 801caa6:	a826      	add	r0, sp, #152	; 0x98
 801caa8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801caac:	ea43 13ca 	orr.w	r3, r3, sl, lsl #7
 801cab0:	9803      	ldr	r0, [sp, #12]
 801cab2:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 801cab6:	4303      	orrs	r3, r0
 801cab8:	e941 3c10 	strd	r3, ip, [r1, #-64]	; 0x40
 801cabc:	1c55      	adds	r5, r2, #1
 801cabe:	f1b9 0f00 	cmp.w	r9, #0
 801cac2:	f040 8150 	bne.w	801cd66 <nema_set_blend+0x4da>
 801cac6:	46ce      	mov	lr, r9
 801cac8:	4b2d      	ldr	r3, [pc, #180]	; (801cb80 <nema_set_blend+0x2f4>)
 801caca:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801cace:	f8cd 9018 	str.w	r9, [sp, #24]
 801cad2:	9308      	str	r3, [sp, #32]
 801cad4:	9b07      	ldr	r3, [sp, #28]
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d163      	bne.n	801cba2 <nema_set_blend+0x316>
 801cada:	4b2a      	ldr	r3, [pc, #168]	; (801cb84 <nema_set_blend+0x2f8>)
 801cadc:	f8dd a008 	ldr.w	sl, [sp, #8]
 801cae0:	9308      	str	r3, [sp, #32]
 801cae2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801cae6:	9f01      	ldr	r7, [sp, #4]
 801cae8:	e061      	b.n	801cbae <nema_set_blend+0x322>
 801caea:	f04f 0900 	mov.w	r9, #0
 801caee:	46c8      	mov	r8, r9
 801caf0:	f8cd 901c 	str.w	r9, [sp, #28]
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	f000 8153 	beq.w	801cda0 <nema_set_blend+0x514>
 801cafa:	9b01      	ldr	r3, [sp, #4]
 801cafc:	2b05      	cmp	r3, #5
 801cafe:	f200 8169 	bhi.w	801cdd4 <nema_set_blend+0x548>
 801cb02:	2300      	movs	r3, #0
 801cb04:	f04f 0b01 	mov.w	fp, #1
 801cb08:	461a      	mov	r2, r3
 801cb0a:	9306      	str	r3, [sp, #24]
 801cb0c:	9309      	str	r3, [sp, #36]	; 0x24
 801cb0e:	9315      	str	r3, [sp, #84]	; 0x54
 801cb10:	9b07      	ldr	r3, [sp, #28]
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	f000 8200 	beq.w	801cf18 <nema_set_blend+0x68c>
 801cb18:	930a      	str	r3, [sp, #40]	; 0x28
 801cb1a:	4b06      	ldr	r3, [pc, #24]	; (801cb34 <nema_set_blend+0x2a8>)
 801cb1c:	2001      	movs	r0, #1
 801cb1e:	9308      	str	r3, [sp, #32]
 801cb20:	2303      	movs	r3, #3
 801cb22:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801cb26:	e71b      	b.n	801c960 <nema_set_blend+0xd4>
 801cb28:	20198384 	.word	0x20198384
 801cb2c:	20198385 	.word	0x20198385
 801cb30:	20198594 	.word	0x20198594
 801cb34:	080c0003 	.word	0x080c0003
 801cb38:	000761c5 	.word	0x000761c5
 801cb3c:	000761c7 	.word	0x000761c7
 801cb40:	800761c5 	.word	0x800761c5
 801cb44:	80076185 	.word	0x80076185
 801cb48:	80076187 	.word	0x80076187
 801cb4c:	800121c5 	.word	0x800121c5
 801cb50:	800121c7 	.word	0x800121c7
 801cb54:	000121c5 	.word	0x000121c5
 801cb58:	000461c7 	.word	0x000461c7
 801cb5c:	800461c7 	.word	0x800461c7
 801cb60:	000121c7 	.word	0x000121c7
 801cb64:	00012185 	.word	0x00012185
 801cb68:	00012187 	.word	0x00012187
 801cb6c:	0802ab7c 	.word	0x0802ab7c
 801cb70:	02009408 	.word	0x02009408
 801cb74:	00f40182 	.word	0x00f40182
 801cb78:	000c100b 	.word	0x000c100b
 801cb7c:	1000fc00 	.word	0x1000fc00
 801cb80:	080c0000 	.word	0x080c0000
 801cb84:	080c0002 	.word	0x080c0002
 801cb88:	00076185 	.word	0x00076185
 801cb8c:	00076187 	.word	0x00076187
 801cb90:	000461c5 	.word	0x000461c5
 801cb94:	00046187 	.word	0x00046187
 801cb98:	4615      	mov	r5, r2
 801cb9a:	460a      	mov	r2, r1
 801cb9c:	f1b9 0f00 	cmp.w	r9, #0
 801cba0:	d098      	beq.n	801cad4 <nema_set_blend+0x248>
 801cba2:	9b06      	ldr	r3, [sp, #24]
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	f000 8202 	beq.w	801cfae <nema_set_blend+0x722>
 801cbaa:	2600      	movs	r6, #0
 801cbac:	9f01      	ldr	r7, [sp, #4]
 801cbae:	48c1      	ldr	r0, [pc, #772]	; (801ceb4 <nema_set_blend+0x628>)
 801cbb0:	49c1      	ldr	r1, [pc, #772]	; (801ceb8 <nema_set_blend+0x62c>)
 801cbb2:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
 801cbb6:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801cbba:	015b      	lsls	r3, r3, #5
 801cbbc:	ea43 3387 	orr.w	r3, r3, r7, lsl #14
 801cbc0:	9f08      	ldr	r7, [sp, #32]
 801cbc2:	ea47 5e0e 	orr.w	lr, r7, lr, lsl #20
 801cbc6:	4fbd      	ldr	r7, [pc, #756]	; (801cebc <nema_set_blend+0x630>)
 801cbc8:	ea4e 1eca 	orr.w	lr, lr, sl, lsl #7
 801cbcc:	431f      	orrs	r7, r3
 801cbce:	ab26      	add	r3, sp, #152	; 0x98
 801cbd0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801cbd4:	4337      	orrs	r7, r6
 801cbd6:	e942 e710 	strd	lr, r7, [r2, #-64]	; 0x40
 801cbda:	2e00      	cmp	r6, #0
 801cbdc:	f000 813f 	beq.w	801ce5e <nema_set_blend+0x5d2>
 801cbe0:	9804      	ldr	r0, [sp, #16]
 801cbe2:	f7fe fead 	bl	801b940 <nema_matmul_bypass>
 801cbe6:	4629      	mov	r1, r5
 801cbe8:	2200      	movs	r2, #0
 801cbea:	a816      	add	r0, sp, #88	; 0x58
 801cbec:	f7fe ffa2 	bl	801bb34 <nema_load_frag_shader>
 801cbf0:	4bb3      	ldr	r3, [pc, #716]	; (801cec0 <nema_set_blend+0x634>)
 801cbf2:	f1c5 0520 	rsb	r5, r5, #32
 801cbf6:	6818      	ldr	r0, [r3, #0]
 801cbf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cbfa:	ea43 0800 	orr.w	r8, r3, r0
 801cbfe:	ea48 0005 	orr.w	r0, r8, r5
 801cc02:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 801cc06:	f7fe ffaf 	bl	801bb68 <nema_set_frag_ptr>
 801cc0a:	b027      	add	sp, #156	; 0x9c
 801cc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801cc14:	930f      	str	r3, [sp, #60]	; 0x3c
 801cc16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	f43f aefb 	beq.w	801ca14 <nema_set_blend+0x188>
 801cc1e:	f04f 0811 	mov.w	r8, #17
 801cc22:	e701      	b.n	801ca28 <nema_set_blend+0x19c>
 801cc24:	9b00      	ldr	r3, [sp, #0]
 801cc26:	1c5a      	adds	r2, r3, #1
 801cc28:	f000 8136 	beq.w	801ce98 <nema_set_blend+0x60c>
 801cc2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801cc30:	9a05      	ldr	r2, [sp, #20]
 801cc32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801cc36:	9204      	str	r2, [sp, #16]
 801cc38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cc3a:	2a00      	cmp	r2, #0
 801cc3c:	f000 80a9 	beq.w	801cd92 <nema_set_blend+0x506>
 801cc40:	f44f 2440 	mov.w	r4, #786432	; 0xc0000
 801cc44:	499f      	ldr	r1, [pc, #636]	; (801cec4 <nema_set_blend+0x638>)
 801cc46:	4aa0      	ldr	r2, [pc, #640]	; (801cec8 <nema_set_blend+0x63c>)
 801cc48:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 801cc4c:	9219      	str	r2, [sp, #100]	; 0x64
 801cc4e:	2204      	movs	r2, #4
 801cc50:	9116      	str	r1, [sp, #88]	; 0x58
 801cc52:	9205      	str	r2, [sp, #20]
 801cc54:	2102      	movs	r1, #2
 801cc56:	2203      	movs	r2, #3
 801cc58:	e9cd 5417 	strd	r5, r4, [sp, #92]	; 0x5c
 801cc5c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cc5e:	2c00      	cmp	r4, #0
 801cc60:	d04f      	beq.n	801cd02 <nema_set_blend+0x476>
 801cc62:	9c00      	ldr	r4, [sp, #0]
 801cc64:	f1b4 3fff 	cmp.w	r4, #4294967295
 801cc68:	d04b      	beq.n	801cd02 <nema_set_blend+0x476>
 801cc6a:	f241 050b 	movw	r5, #4107	; 0x100b
 801cc6e:	2300      	movs	r3, #0
 801cc70:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 801cc74:	a826      	add	r0, sp, #152	; 0x98
 801cc76:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801cc7a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801cc7c:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 801cc80:	ea45 11c1 	orr.w	r1, r5, r1, lsl #7
 801cc84:	f1b9 0f01 	cmp.w	r9, #1
 801cc88:	f840 1c40 	str.w	r1, [r0, #-64]
 801cc8c:	f444 4420 	orr.w	r4, r4, #40960	; 0xa000
 801cc90:	4611      	mov	r1, r2
 801cc92:	f840 3c3c 	str.w	r3, [r0, #-60]
 801cc96:	9a05      	ldr	r2, [sp, #20]
 801cc98:	f63f aef0 	bhi.w	801ca7c <nema_set_blend+0x1f0>
 801cc9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	f47f aeec 	bne.w	801ca7c <nema_set_blend+0x1f0>
 801cca4:	9b00      	ldr	r3, [sp, #0]
 801cca6:	3301      	adds	r3, #1
 801cca8:	f47f aee8 	bne.w	801ca7c <nema_set_blend+0x1f0>
 801ccac:	9b02      	ldr	r3, [sp, #8]
 801ccae:	4553      	cmp	r3, sl
 801ccb0:	f47f aee4 	bne.w	801ca7c <nema_set_blend+0x1f0>
 801ccb4:	f1b9 0f00 	cmp.w	r9, #0
 801ccb8:	bf15      	itete	ne
 801ccba:	f44f 6600 	movne.w	r6, #2048	; 0x800
 801ccbe:	f44f 5600 	moveq.w	r6, #8192	; 0x2000
 801ccc2:	f44f 1500 	movne.w	r5, #2097152	; 0x200000
 801ccc6:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
 801ccca:	9f01      	ldr	r7, [sp, #4]
 801cccc:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 801ceb4 <nema_set_blend+0x628>
 801ccd0:	4879      	ldr	r0, [pc, #484]	; (801ceb8 <nema_set_blend+0x62c>)
 801ccd2:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 801ccd6:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
 801ccda:	015b      	lsls	r3, r3, #5
 801ccdc:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 801cce0:	f043 430a 	orr.w	r3, r3, #2315255808	; 0x8a000000
 801cce4:	f043 0306 	orr.w	r3, r3, #6
 801cce8:	4333      	orrs	r3, r6
 801ccea:	432b      	orrs	r3, r5
 801ccec:	4877      	ldr	r0, [pc, #476]	; (801cecc <nema_set_blend+0x640>)
 801ccee:	9d02      	ldr	r5, [sp, #8]
 801ccf0:	ae26      	add	r6, sp, #152	; 0x98
 801ccf2:	ea40 10c5 	orr.w	r0, r0, r5, lsl #7
 801ccf6:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 801ccfa:	4615      	mov	r5, r2
 801ccfc:	e941 0310 	strd	r0, r3, [r1, #-64]	; 0x40
 801cd00:	e76e      	b.n	801cbe0 <nema_set_blend+0x354>
 801cd02:	f043 5480 	orr.w	r4, r3, #268435456	; 0x10000000
 801cd06:	e6b5      	b.n	801ca74 <nema_set_blend+0x1e8>
 801cd08:	f04f 3020 	mov.w	r0, #538976288	; 0x20202020
 801cd0c:	f7fe ff44 	bl	801bb98 <nema_set_raster_color>
 801cd10:	2000      	movs	r0, #0
 801cd12:	f7fd ff93 	bl	801ac3c <nema_enable_gradient>
 801cd16:	f04f 0800 	mov.w	r8, #0
 801cd1a:	f04f 0901 	mov.w	r9, #1
 801cd1e:	23ff      	movs	r3, #255	; 0xff
 801cd20:	f240 1401 	movw	r4, #257	; 0x101
 801cd24:	f04f 3aff 	mov.w	sl, #4294967295
 801cd28:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801cd2c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801cd30:	e9cd 880c 	strd	r8, r8, [sp, #48]	; 0x30
 801cd34:	4641      	mov	r1, r8
 801cd36:	f8cd 9004 	str.w	r9, [sp, #4]
 801cd3a:	461a      	mov	r2, r3
 801cd3c:	46a3      	mov	fp, r4
 801cd3e:	f8cd a000 	str.w	sl, [sp]
 801cd42:	e5c9      	b.n	801c8d8 <nema_set_blend+0x4c>
 801cd44:	2f0e      	cmp	r7, #14
 801cd46:	f47f aead 	bne.w	801caa4 <nema_set_blend+0x218>
 801cd4a:	9b03      	ldr	r3, [sp, #12]
 801cd4c:	2b00      	cmp	r3, #0
 801cd4e:	f47f aea9 	bne.w	801caa4 <nema_set_blend+0x218>
 801cd52:	9b06      	ldr	r3, [sp, #24]
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	f47f aea5 	bne.w	801caa4 <nema_set_blend+0x218>
 801cd5a:	4615      	mov	r5, r2
 801cd5c:	460a      	mov	r2, r1
 801cd5e:	f1b9 0f00 	cmp.w	r9, #0
 801cd62:	f43f aeb0 	beq.w	801cac6 <nema_set_blend+0x23a>
 801cd66:	f04f 0e00 	mov.w	lr, #0
 801cd6a:	4b59      	ldr	r3, [pc, #356]	; (801ced0 <nema_set_blend+0x644>)
 801cd6c:	9308      	str	r3, [sp, #32]
 801cd6e:	9b01      	ldr	r3, [sp, #4]
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	f000 8123 	beq.w	801cfbc <nema_set_blend+0x730>
 801cd76:	2b01      	cmp	r3, #1
 801cd78:	f04f 0600 	mov.w	r6, #0
 801cd7c:	f000 8137 	beq.w	801cfee <nema_set_blend+0x762>
 801cd80:	461f      	mov	r7, r3
 801cd82:	e714      	b.n	801cbae <nema_set_blend+0x322>
 801cd84:	e9dd 6c11 	ldrd	r6, ip, [sp, #68]	; 0x44
 801cd88:	e9dd 7413 	ldrd	r7, r4, [sp, #76]	; 0x4c
 801cd8c:	f04f 081d 	mov.w	r8, #29
 801cd90:	e64a      	b.n	801ca28 <nema_set_blend+0x19c>
 801cd92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cd94:	2a00      	cmp	r2, #0
 801cd96:	d046      	beq.n	801ce26 <nema_set_blend+0x59a>
 801cd98:	f44f 2440 	mov.w	r4, #786432	; 0xc0000
 801cd9c:	494d      	ldr	r1, [pc, #308]	; (801ced4 <nema_set_blend+0x648>)
 801cd9e:	e752      	b.n	801cc46 <nema_set_blend+0x3ba>
 801cda0:	9b02      	ldr	r3, [sp, #8]
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	f47f aea9 	bne.w	801cafa <nema_set_blend+0x26e>
 801cda8:	9b00      	ldr	r3, [sp, #0]
 801cdaa:	3301      	adds	r3, #1
 801cdac:	f000 8114 	beq.w	801cfd8 <nema_set_blend+0x74c>
 801cdb0:	9802      	ldr	r0, [sp, #8]
 801cdb2:	f7fe fdc5 	bl	801b940 <nema_matmul_bypass>
 801cdb6:	4b42      	ldr	r3, [pc, #264]	; (801cec0 <nema_set_blend+0x634>)
 801cdb8:	4947      	ldr	r1, [pc, #284]	; (801ced8 <nema_set_blend+0x64c>)
 801cdba:	9800      	ldr	r0, [sp, #0]
 801cdbc:	681a      	ldr	r2, [r3, #0]
 801cdbe:	4b47      	ldr	r3, [pc, #284]	; (801cedc <nema_set_blend+0x650>)
 801cdc0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 801cdc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cdc8:	4318      	orrs	r0, r3
 801cdca:	f7fe fecd 	bl	801bb68 <nema_set_frag_ptr>
 801cdce:	b027      	add	sp, #156	; 0x9c
 801cdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdd4:	2301      	movs	r3, #1
 801cdd6:	930a      	str	r3, [sp, #40]	; 0x28
 801cdd8:	9304      	str	r3, [sp, #16]
 801cdda:	469b      	mov	fp, r3
 801cddc:	2303      	movs	r3, #3
 801cdde:	f04f 0e00 	mov.w	lr, #0
 801cde2:	9303      	str	r3, [sp, #12]
 801cde4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801cde8:	f503 2340 	add.w	r3, r3, #786432	; 0xc0000
 801cdec:	9308      	str	r3, [sp, #32]
 801cdee:	4b3c      	ldr	r3, [pc, #240]	; (801cee0 <nema_set_blend+0x654>)
 801cdf0:	f8cd e018 	str.w	lr, [sp, #24]
 801cdf4:	9312      	str	r3, [sp, #72]	; 0x48
 801cdf6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801cdfa:	9311      	str	r3, [sp, #68]	; 0x44
 801cdfc:	4b39      	ldr	r3, [pc, #228]	; (801cee4 <nema_set_blend+0x658>)
 801cdfe:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 801ce02:	9314      	str	r3, [sp, #80]	; 0x50
 801ce04:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ce08:	9313      	str	r3, [sp, #76]	; 0x4c
 801ce0a:	f5a3 23c8 	sub.w	r3, r3, #409600	; 0x64000
 801ce0e:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 801ce12:	4835      	ldr	r0, [pc, #212]	; (801cee8 <nema_set_blend+0x65c>)
 801ce14:	4935      	ldr	r1, [pc, #212]	; (801ceec <nema_set_blend+0x660>)
 801ce16:	4a36      	ldr	r2, [pc, #216]	; (801cef0 <nema_set_blend+0x664>)
 801ce18:	461d      	mov	r5, r3
 801ce1a:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 801cf08 <nema_set_blend+0x67c>
 801ce1e:	4e35      	ldr	r6, [pc, #212]	; (801cef4 <nema_set_blend+0x668>)
 801ce20:	4c35      	ldr	r4, [pc, #212]	; (801cef8 <nema_set_blend+0x66c>)
 801ce22:	4f36      	ldr	r7, [pc, #216]	; (801cefc <nema_set_blend+0x670>)
 801ce24:	e5e7      	b.n	801c9f6 <nema_set_blend+0x16a>
 801ce26:	4611      	mov	r1, r2
 801ce28:	2202      	movs	r2, #2
 801ce2a:	9205      	str	r2, [sp, #20]
 801ce2c:	2201      	movs	r2, #1
 801ce2e:	e715      	b.n	801cc5c <nema_set_blend+0x3d0>
 801ce30:	9b01      	ldr	r3, [sp, #4]
 801ce32:	2b01      	cmp	r3, #1
 801ce34:	f47f ae32 	bne.w	801ca9c <nema_set_blend+0x210>
 801ce38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	f47f ae2e 	bne.w	801ca9c <nema_set_blend+0x210>
 801ce40:	a826      	add	r0, sp, #152	; 0x98
 801ce42:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801ce46:	4b21      	ldr	r3, [pc, #132]	; (801cecc <nema_set_blend+0x640>)
 801ce48:	9802      	ldr	r0, [sp, #8]
 801ce4a:	f841 6c3c 	str.w	r6, [r1, #-60]
 801ce4e:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801ce52:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 801ce56:	4615      	mov	r5, r2
 801ce58:	f841 3c40 	str.w	r3, [r1, #-64]
 801ce5c:	e6c0      	b.n	801cbe0 <nema_set_blend+0x354>
 801ce5e:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 801ce62:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 801ce66:	462a      	mov	r2, r5
 801ce68:	3501      	adds	r5, #1
 801ce6a:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 801ce6e:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
 801ce72:	0140      	lsls	r0, r0, #5
 801ce74:	4b22      	ldr	r3, [pc, #136]	; (801cf00 <nema_set_blend+0x674>)
 801ce76:	ea40 3081 	orr.w	r0, r0, r1, lsl #14
 801ce7a:	4303      	orrs	r3, r0
 801ce7c:	4921      	ldr	r1, [pc, #132]	; (801cf04 <nema_set_blend+0x678>)
 801ce7e:	9802      	ldr	r0, [sp, #8]
 801ce80:	433b      	orrs	r3, r7
 801ce82:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 801ce86:	a826      	add	r0, sp, #152	; 0x98
 801ce88:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 801ce8c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ce8e:	4333      	orrs	r3, r6
 801ce90:	4301      	orrs	r1, r0
 801ce92:	e942 1310 	strd	r1, r3, [r2, #-64]	; 0x40
 801ce96:	e6a3      	b.n	801cbe0 <nema_set_blend+0x354>
 801ce98:	9b04      	ldr	r3, [sp, #16]
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	f000 8082 	beq.w	801cfa4 <nema_set_blend+0x718>
 801cea0:	9a05      	ldr	r2, [sp, #20]
 801cea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cea4:	9203      	str	r2, [sp, #12]
 801cea6:	920a      	str	r2, [sp, #40]	; 0x28
 801cea8:	4a09      	ldr	r2, [pc, #36]	; (801ced0 <nema_set_blend+0x644>)
 801ceaa:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 801ceae:	9208      	str	r2, [sp, #32]
 801ceb0:	e6c2      	b.n	801cc38 <nema_set_blend+0x3ac>
 801ceb2:	bf00      	nop
 801ceb4:	0802ab8c 	.word	0x0802ab8c
 801ceb8:	0802abbc 	.word	0x0802abbc
 801cebc:	0a002007 	.word	0x0a002007
 801cec0:	20000064 	.word	0x20000064
 801cec4:	100c118b 	.word	0x100c118b
 801cec8:	0081a042 	.word	0x0081a042
 801cecc:	080c0002 	.word	0x080c0002
 801ced0:	080c0000 	.word	0x080c0000
 801ced4:	100c1183 	.word	0x100c1183
 801ced8:	0802ab7c 	.word	0x0802ab7c
 801cedc:	141f801f 	.word	0x141f801f
 801cee0:	000761c7 	.word	0x000761c7
 801cee4:	00076187 	.word	0x00076187
 801cee8:	000121c7 	.word	0x000121c7
 801ceec:	800121c7 	.word	0x800121c7
 801cef0:	00012187 	.word	0x00012187
 801cef4:	800461c7 	.word	0x800461c7
 801cef8:	00046187 	.word	0x00046187
 801cefc:	80046187 	.word	0x80046187
 801cf00:	80080206 	.word	0x80080206
 801cf04:	004e0002 	.word	0x004e0002
 801cf08:	000461c7 	.word	0x000461c7
 801cf0c:	2301      	movs	r3, #1
 801cf0e:	2202      	movs	r2, #2
 801cf10:	9304      	str	r3, [sp, #16]
 801cf12:	4619      	mov	r1, r3
 801cf14:	4c38      	ldr	r4, [pc, #224]	; (801cff8 <nema_set_blend+0x76c>)
 801cf16:	e5ad      	b.n	801ca74 <nema_set_blend+0x1e8>
 801cf18:	f1b9 0f00 	cmp.w	r9, #0
 801cf1c:	d055      	beq.n	801cfca <nema_set_blend+0x73e>
 801cf1e:	2301      	movs	r3, #1
 801cf20:	2103      	movs	r1, #3
 801cf22:	930a      	str	r3, [sp, #40]	; 0x28
 801cf24:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801cf28:	4b34      	ldr	r3, [pc, #208]	; (801cffc <nema_set_blend+0x770>)
 801cf2a:	9308      	str	r3, [sp, #32]
 801cf2c:	e518      	b.n	801c960 <nema_set_blend+0xd4>
 801cf2e:	2c00      	cmp	r4, #0
 801cf30:	bfbd      	ittte	lt
 801cf32:	f02b 4b00 	biclt.w	fp, fp, #2147483648	; 0x80000000
 801cf36:	f04f 4202 	movlt.w	r2, #2181038080	; 0x82000000
 801cf3a:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 801cf3e:	f04f 7200 	movge.w	r2, #33554432	; 0x2000000
 801cf42:	b111      	cbz	r1, 801cf4a <nema_set_blend+0x6be>
 801cf44:	4613      	mov	r3, r2
 801cf46:	f02b 7b00 	bic.w	fp, fp, #33554432	; 0x2000000
 801cf4a:	9a01      	ldr	r2, [sp, #4]
 801cf4c:	ea42 2009 	orr.w	r0, r2, r9, lsl #8
 801cf50:	4318      	orrs	r0, r3
 801cf52:	f7fe fe0f 	bl	801bb74 <nema_set_rop_blend_mode>
 801cf56:	ea4f 505b 	mov.w	r0, fp, lsr #21
 801cf5a:	4b29      	ldr	r3, [pc, #164]	; (801d000 <nema_set_blend+0x774>)
 801cf5c:	0540      	lsls	r0, r0, #21
 801cf5e:	f040 0201 	orr.w	r2, r0, #1
 801cf62:	789b      	ldrb	r3, [r3, #2]
 801cf64:	2a01      	cmp	r2, #1
 801cf66:	9201      	str	r2, [sp, #4]
 801cf68:	9305      	str	r3, [sp, #20]
 801cf6a:	f43f adbe 	beq.w	801caea <nema_set_blend+0x25e>
 801cf6e:	f00b 4380 	and.w	r3, fp, #1073741824	; 0x40000000
 801cf72:	9315      	str	r3, [sp, #84]	; 0x54
 801cf74:	f3cb 7380 	ubfx	r3, fp, #30, #1
 801cf78:	9306      	str	r3, [sp, #24]
 801cf7a:	f00b 5300 	and.w	r3, fp, #536870912	; 0x20000000
 801cf7e:	9309      	str	r3, [sp, #36]	; 0x24
 801cf80:	2301      	movs	r3, #1
 801cf82:	f04f 0900 	mov.w	r9, #0
 801cf86:	f00b 5280 	and.w	r2, fp, #268435456	; 0x10000000
 801cf8a:	f8dd b004 	ldr.w	fp, [sp, #4]
 801cf8e:	9301      	str	r3, [sp, #4]
 801cf90:	4b1c      	ldr	r3, [pc, #112]	; (801d004 <nema_set_blend+0x778>)
 801cf92:	46c8      	mov	r8, r9
 801cf94:	f8cd 901c 	str.w	r9, [sp, #28]
 801cf98:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801cf9c:	f8cd 9010 	str.w	r9, [sp, #16]
 801cfa0:	9308      	str	r3, [sp, #32]
 801cfa2:	e4dd      	b.n	801c960 <nema_set_blend+0xd4>
 801cfa4:	2201      	movs	r2, #1
 801cfa6:	9b05      	ldr	r3, [sp, #20]
 801cfa8:	9204      	str	r2, [sp, #16]
 801cfaa:	930a      	str	r3, [sp, #40]	; 0x28
 801cfac:	e644      	b.n	801cc38 <nema_set_blend+0x3ac>
 801cfae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	f43f aedc 	beq.w	801cd6e <nema_set_blend+0x4e2>
 801cfb6:	9e06      	ldr	r6, [sp, #24]
 801cfb8:	9f01      	ldr	r7, [sp, #4]
 801cfba:	e5f8      	b.n	801cbae <nema_set_blend+0x322>
 801cfbc:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 801cfc0:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 801cfc4:	4910      	ldr	r1, [pc, #64]	; (801d008 <nema_set_blend+0x77c>)
 801cfc6:	4811      	ldr	r0, [pc, #68]	; (801d00c <nema_set_blend+0x780>)
 801cfc8:	e74f      	b.n	801ce6a <nema_set_blend+0x5de>
 801cfca:	4b0e      	ldr	r3, [pc, #56]	; (801d004 <nema_set_blend+0x778>)
 801cfcc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801cfd0:	9308      	str	r3, [sp, #32]
 801cfd2:	e9cd 9903 	strd	r9, r9, [sp, #12]
 801cfd6:	e4c3      	b.n	801c960 <nema_set_blend+0xd4>
 801cfd8:	2001      	movs	r0, #1
 801cfda:	f7fe fcb1 	bl	801b940 <nema_matmul_bypass>
 801cfde:	4a0c      	ldr	r2, [pc, #48]	; (801d010 <nema_set_blend+0x784>)
 801cfe0:	4b0c      	ldr	r3, [pc, #48]	; (801d014 <nema_set_blend+0x788>)
 801cfe2:	6810      	ldr	r0, [r2, #0]
 801cfe4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801cfe8:	f7fe fdbe 	bl	801bb68 <nema_set_frag_ptr>
 801cfec:	e6ef      	b.n	801cdce <nema_set_blend+0x542>
 801cfee:	4637      	mov	r7, r6
 801cff0:	4905      	ldr	r1, [pc, #20]	; (801d008 <nema_set_blend+0x77c>)
 801cff2:	4806      	ldr	r0, [pc, #24]	; (801d00c <nema_set_blend+0x780>)
 801cff4:	e739      	b.n	801ce6a <nema_set_blend+0x5de>
 801cff6:	bf00      	nop
 801cff8:	1000fc00 	.word	0x1000fc00
 801cffc:	080c0003 	.word	0x080c0003
 801d000:	20198594 	.word	0x20198594
 801d004:	080c0000 	.word	0x080c0000
 801d008:	0802abbc 	.word	0x0802abbc
 801d00c:	0802ab8c 	.word	0x0802ab8c
 801d010:	20000064 	.word	0x20000064
 801d014:	141f001f 	.word	0x141f001f

0801d018 <nema_set_const_color>:
 801d018:	b510      	push	{r4, lr}
 801d01a:	4604      	mov	r4, r0
 801d01c:	2001      	movs	r0, #1
 801d01e:	4621      	mov	r1, r4
 801d020:	f7fd fde4 	bl	801abec <nema_set_const_reg>
 801d024:	4b04      	ldr	r3, [pc, #16]	; (801d038 <nema_set_const_color+0x20>)
 801d026:	781b      	ldrb	r3, [r3, #0]
 801d028:	b903      	cbnz	r3, 801d02c <nema_set_const_color+0x14>
 801d02a:	bd10      	pop	{r4, pc}
 801d02c:	4620      	mov	r0, r4
 801d02e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d032:	f7fe bda5 	b.w	801bb80 <nema_set_rop_const_color>
 801d036:	bf00      	nop
 801d038:	20198385 	.word	0x20198385

0801d03c <_ZN8touchgfx8HALGPU2D17unlockFrameBufferEv>:
 801d03c:	f7f8 beb0 	b.w	8015da0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>

0801d040 <_ZN8touchgfx8HALGPU2D10beginFrameEv>:
 801d040:	2200      	movs	r2, #0
 801d042:	f880 20a5 	strb.w	r2, [r0, #165]	; 0xa5
 801d046:	f7f8 bdaf 	b.w	8015ba8 <_ZN8touchgfx3HAL10beginFrameEv>
 801d04a:	bf00      	nop

0801d04c <_ZN8touchgfx8HALGPU2D15lockFrameBufferEv>:
 801d04c:	b510      	push	{r4, lr}
 801d04e:	4604      	mov	r4, r0
 801d050:	307c      	adds	r0, #124	; 0x7c
 801d052:	f7ff fbd5 	bl	801c800 <nema_cl_wait>
 801d056:	4620      	mov	r0, r4
 801d058:	f7f9 fb64 	bl	8016724 <_ZN8touchgfx3HAL15lockFrameBufferEv>
 801d05c:	2300      	movs	r3, #0
 801d05e:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 801d062:	bd10      	pop	{r4, pc}

0801d064 <_ZN8touchgfx8HALGPU2D8endFrameEv>:
 801d064:	b510      	push	{r4, lr}
 801d066:	4604      	mov	r4, r0
 801d068:	f7f8 fdaa 	bl	8015bc0 <_ZN8touchgfx3HAL8endFrameEv>
 801d06c:	2200      	movs	r2, #0
 801d06e:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 801d072:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
 801d076:	347c      	adds	r4, #124	; 0x7c
 801d078:	b113      	cbz	r3, 801d080 <_ZN8touchgfx8HALGPU2D8endFrameEv+0x1c>
 801d07a:	4620      	mov	r0, r4
 801d07c:	f7ff fb50 	bl	801c720 <nema_cl_submit>
 801d080:	4620      	mov	r0, r4
 801d082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d086:	f7ff bbbb 	b.w	801c800 <nema_cl_wait>
 801d08a:	bf00      	nop

0801d08c <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>:
 801d08c:	b508      	push	{r3, lr}
 801d08e:	4a03      	ldr	r2, [pc, #12]	; (801d09c <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x10>)
 801d090:	4b03      	ldr	r3, [pc, #12]	; (801d0a0 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x14>)
 801d092:	2118      	movs	r1, #24
 801d094:	4803      	ldr	r0, [pc, #12]	; (801d0a4 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x18>)
 801d096:	f00b f809 	bl	80280ac <__assert_func>
 801d09a:	bf00      	nop
 801d09c:	0802ad40 	.word	0x0802ad40
 801d0a0:	0802abec 	.word	0x0802abec
 801d0a4:	0802ac44 	.word	0x0802ac44

0801d0a8 <_ZN8touchgfx8HALGPU2D10initializeEv>:
 801d0a8:	b570      	push	{r4, r5, r6, lr}
 801d0aa:	4606      	mov	r6, r0
 801d0ac:	b08a      	sub	sp, #40	; 0x28
 801d0ae:	466c      	mov	r4, sp
 801d0b0:	f7f8 fd93 	bl	8015bda <_ZN8touchgfx3HAL10initializeEv>
 801d0b4:	f106 057c 	add.w	r5, r6, #124	; 0x7c
 801d0b8:	4668      	mov	r0, sp
 801d0ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801d0be:	f7ff f89f 	bl	801c200 <nema_cl_create_sized>
 801d0c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d0c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d0c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d0c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d0ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 801d0ce:	e885 0003 	stmia.w	r5, {r0, r1}
 801d0d2:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801d0d6:	b10b      	cbz	r3, 801d0dc <_ZN8touchgfx8HALGPU2D10initializeEv+0x34>
 801d0d8:	b00a      	add	sp, #40	; 0x28
 801d0da:	bd70      	pop	{r4, r5, r6, pc}
 801d0dc:	f7ff ffd6 	bl	801d08c <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>

0801d0e0 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
 801d0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0e2:	f04f 0c01 	mov.w	ip, #1
 801d0e6:	2500      	movs	r5, #0
 801d0e8:	f8bd 7014 	ldrh.w	r7, [sp, #20]
 801d0ec:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 801d0f0:	60c3      	str	r3, [r0, #12]
 801d0f2:	42b7      	cmp	r7, r6
 801d0f4:	bf2c      	ite	cs
 801d0f6:	f04f 0e00 	movcs.w	lr, #0
 801d0fa:	f04f 0e01 	movcc.w	lr, #1
 801d0fe:	4b23      	ldr	r3, [pc, #140]	; (801d18c <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xac>)
 801d100:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801d104:	6643      	str	r3, [r0, #100]	; 0x64
 801d106:	4b22      	ldr	r3, [pc, #136]	; (801d190 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb0>)
 801d108:	6105      	str	r5, [r0, #16]
 801d10a:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801d10e:	61c5      	str	r5, [r0, #28]
 801d110:	6205      	str	r5, [r0, #32]
 801d112:	8485      	strh	r5, [r0, #36]	; 0x24
 801d114:	f8c0 5026 	str.w	r5, [r0, #38]	; 0x26
 801d118:	f880 502a 	strb.w	r5, [r0, #42]	; 0x2a
 801d11c:	62c5      	str	r5, [r0, #44]	; 0x2c
 801d11e:	8605      	strh	r5, [r0, #48]	; 0x30
 801d120:	e9c0 550e 	strd	r5, r5, [r0, #56]	; 0x38
 801d124:	e9c0 5510 	strd	r5, r5, [r0, #64]	; 0x40
 801d128:	f880 5048 	strb.w	r5, [r0, #72]	; 0x48
 801d12c:	f880 504a 	strb.w	r5, [r0, #74]	; 0x4a
 801d130:	f880 504b 	strb.w	r5, [r0, #75]	; 0x4b
 801d134:	e9c0 5513 	strd	r5, r5, [r0, #76]	; 0x4c
 801d138:	e9c0 5515 	strd	r5, r5, [r0, #84]	; 0x54
 801d13c:	e9c0 5517 	strd	r5, r5, [r0, #92]	; 0x5c
 801d140:	6685      	str	r5, [r0, #104]	; 0x68
 801d142:	f880 506c 	strb.w	r5, [r0, #108]	; 0x6c
 801d146:	4a13      	ldr	r2, [pc, #76]	; (801d194 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb4>)
 801d148:	f880 c049 	strb.w	ip, [r0, #73]	; 0x49
 801d14c:	6018      	str	r0, [r3, #0]
 801d14e:	4b12      	ldr	r3, [pc, #72]	; (801d198 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb8>)
 801d150:	8017      	strh	r7, [r2, #0]
 801d152:	801f      	strh	r7, [r3, #0]
 801d154:	4a11      	ldr	r2, [pc, #68]	; (801d19c <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xbc>)
 801d156:	4b12      	ldr	r3, [pc, #72]	; (801d1a0 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc0>)
 801d158:	8016      	strh	r6, [r2, #0]
 801d15a:	801e      	strh	r6, [r3, #0]
 801d15c:	4911      	ldr	r1, [pc, #68]	; (801d1a4 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc4>)
 801d15e:	4a12      	ldr	r2, [pc, #72]	; (801d1a8 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc8>)
 801d160:	4b12      	ldr	r3, [pc, #72]	; (801d1ac <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xcc>)
 801d162:	700d      	strb	r5, [r1, #0]
 801d164:	6002      	str	r2, [r0, #0]
 801d166:	6018      	str	r0, [r3, #0]
 801d168:	6705      	str	r5, [r0, #112]	; 0x70
 801d16a:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
 801d16e:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
 801d172:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
 801d176:	f880 c077 	strb.w	ip, [r0, #119]	; 0x77
 801d17a:	f880 c078 	strb.w	ip, [r0, #120]	; 0x78
 801d17e:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
 801d182:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
 801d186:	f880 e034 	strb.w	lr, [r0, #52]	; 0x34
 801d18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d18c:	01000001 	.word	0x01000001
 801d190:	20198158 	.word	0x20198158
 801d194:	2019814c 	.word	0x2019814c
 801d198:	20198152 	.word	0x20198152
 801d19c:	2019814e 	.word	0x2019814e
 801d1a0:	20198154 	.word	0x20198154
 801d1a4:	20198150 	.word	0x20198150
 801d1a8:	0802ac70 	.word	0x0802ac70
 801d1ac:	20198388 	.word	0x20198388

0801d1b0 <_ZN8touchgfx8HALGPU2D10initializeEi>:
 801d1b0:	b570      	push	{r4, r5, r6, lr}
 801d1b2:	460c      	mov	r4, r1
 801d1b4:	b08a      	sub	sp, #40	; 0x28
 801d1b6:	4606      	mov	r6, r0
 801d1b8:	f7f8 fd0f 	bl	8015bda <_ZN8touchgfx3HAL10initializeEv>
 801d1bc:	4621      	mov	r1, r4
 801d1be:	466c      	mov	r4, sp
 801d1c0:	4668      	mov	r0, sp
 801d1c2:	f106 057c 	add.w	r5, r6, #124	; 0x7c
 801d1c6:	f7ff f81b 	bl	801c200 <nema_cl_create_sized>
 801d1ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d1cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d1ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d1d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d1d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 801d1d6:	e885 0003 	stmia.w	r5, {r0, r1}
 801d1da:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801d1de:	b10b      	cbz	r3, 801d1e4 <_ZN8touchgfx8HALGPU2D10initializeEi+0x34>
 801d1e0:	b00a      	add	sp, #40	; 0x28
 801d1e2:	bd70      	pop	{r4, r5, r6, pc}
 801d1e4:	f7ff ff52 	bl	801d08c <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>

0801d1e8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>:
 801d1e8:	b510      	push	{r4, lr}
 801d1ea:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 801d1ee:	4604      	mov	r4, r0
 801d1f0:	b94b      	cbnz	r3, 801d206 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x1e>
 801d1f2:	4620      	mov	r0, r4
 801d1f4:	2101      	movs	r1, #1
 801d1f6:	f7f9 fa83 	bl	8016700 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801d1fa:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 801d1fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d202:	f7ff b911 	b.w	801c428 <nema_cl_bind_circular>
 801d206:	6840      	ldr	r0, [r0, #4]
 801d208:	4906      	ldr	r1, [pc, #24]	; (801d224 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x3c>)
 801d20a:	6803      	ldr	r3, [r0, #0]
 801d20c:	689a      	ldr	r2, [r3, #8]
 801d20e:	428a      	cmp	r2, r1
 801d210:	d105      	bne.n	801d21e <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x36>
 801d212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d214:	4798      	blx	r3
 801d216:	2300      	movs	r3, #0
 801d218:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 801d21c:	e7e9      	b.n	801d1f2 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0xa>
 801d21e:	4790      	blx	r2
 801d220:	e7f9      	b.n	801d216 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x2e>
 801d222:	bf00      	nop
 801d224:	08002369 	.word	0x08002369

0801d228 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>:
 801d228:	4603      	mov	r3, r0
 801d22a:	2200      	movs	r2, #0
 801d22c:	307c      	adds	r0, #124	; 0x7c
 801d22e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 801d232:	f7ff ba75 	b.w	801c720 <nema_cl_submit>
 801d236:	bf00      	nop

0801d238 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 801d238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d23c:	b091      	sub	sp, #68	; 0x44
 801d23e:	4604      	mov	r4, r0
 801d240:	461d      	mov	r5, r3
 801d242:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801d246:	e9cd 210e 	strd	r2, r1, [sp, #56]	; 0x38
 801d24a:	930d      	str	r3, [sp, #52]	; 0x34
 801d24c:	f89d 2088 	ldrb.w	r2, [sp, #136]	; 0x88
 801d250:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801d254:	307c      	adds	r0, #124	; 0x7c
 801d256:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
 801d25a:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801d25e:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 801d262:	f8bd 9074 	ldrh.w	r9, [sp, #116]	; 0x74
 801d266:	f89d a078 	ldrb.w	sl, [sp, #120]	; 0x78
 801d26a:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801d26e:	930b      	str	r3, [sp, #44]	; 0x2c
 801d270:	920c      	str	r2, [sp, #48]	; 0x30
 801d272:	f7ff fac5 	bl	801c800 <nema_cl_wait>
 801d276:	f04f 0e01 	mov.w	lr, #1
 801d27a:	2000      	movs	r0, #0
 801d27c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d27e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d280:	9208      	str	r2, [sp, #32]
 801d282:	f8d4 c000 	ldr.w	ip, [r4]
 801d286:	9307      	str	r3, [sp, #28]
 801d288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d28a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801d28e:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
 801d292:	e9cd b305 	strd	fp, r3, [sp, #20]
 801d296:	e9cd 7801 	strd	r7, r8, [sp, #4]
 801d29a:	9600      	str	r6, [sp, #0]
 801d29c:	f884 e0a4 	strb.w	lr, [r4, #164]	; 0xa4
 801d2a0:	9009      	str	r0, [sp, #36]	; 0x24
 801d2a2:	462b      	mov	r3, r5
 801d2a4:	4620      	mov	r0, r4
 801d2a6:	f8dc 403c 	ldr.w	r4, [ip, #60]	; 0x3c
 801d2aa:	47a0      	blx	r4
 801d2ac:	b011      	add	sp, #68	; 0x44
 801d2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2b2:	bf00      	nop

0801d2b4 <_ZN8touchgfx8LCDGPU2DD1Ev>:
 801d2b4:	4770      	bx	lr
 801d2b6:	bf00      	nop

0801d2b8 <_ZNK8touchgfx8LCDGPU2D8bitDepthEv>:
 801d2b8:	7a03      	ldrb	r3, [r0, #8]
 801d2ba:	2b02      	cmp	r3, #2
 801d2bc:	d004      	beq.n	801d2c8 <_ZNK8touchgfx8LCDGPU2D8bitDepthEv+0x10>
 801d2be:	2b01      	cmp	r3, #1
 801d2c0:	bf0c      	ite	eq
 801d2c2:	2018      	moveq	r0, #24
 801d2c4:	2010      	movne	r0, #16
 801d2c6:	4770      	bx	lr
 801d2c8:	2020      	movs	r0, #32
 801d2ca:	4770      	bx	lr

0801d2cc <_ZNK8touchgfx8LCDGPU2D17framebufferFormatEv>:
 801d2cc:	7a00      	ldrb	r0, [r0, #8]
 801d2ce:	4770      	bx	lr

0801d2d0 <_ZN8touchgfx8LCDGPU2D4initEv>:
 801d2d0:	4770      	bx	lr
 801d2d2:	bf00      	nop

0801d2d4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2d8:	b087      	sub	sp, #28
 801d2da:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801d2de:	9102      	str	r1, [sp, #8]
 801d2e0:	ea6f 0c05 	mvn.w	ip, r5
 801d2e4:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801d2e8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801d2ea:	9203      	str	r2, [sp, #12]
 801d2ec:	e9dd 4215 	ldrd	r4, r2, [sp, #84]	; 0x54
 801d2f0:	6860      	ldr	r0, [r4, #4]
 801d2f2:	fa5f fc8c 	uxtb.w	ip, ip
 801d2f6:	fb00 2e01 	mla	lr, r0, r1, r2
 801d2fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d2fc:	6820      	ldr	r0, [r4, #0]
 801d2fe:	e9d2 2400 	ldrd	r2, r4, [r2]
 801d302:	3404      	adds	r4, #4
 801d304:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 801d308:	fa1f fb85 	uxth.w	fp, r5
 801d30c:	9405      	str	r4, [sp, #20]
 801d30e:	9200      	str	r2, [sp, #0]
 801d310:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801d314:	9c02      	ldr	r4, [sp, #8]
 801d316:	2c00      	cmp	r4, #0
 801d318:	dc03      	bgt.n	801d322 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801d31a:	9c03      	ldr	r4, [sp, #12]
 801d31c:	2c00      	cmp	r4, #0
 801d31e:	f340 80c2 	ble.w	801d4a6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d322:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d324:	2b00      	cmp	r3, #0
 801d326:	e9d4 ea02 	ldrd	lr, sl, [r4, #8]
 801d32a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d32e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801d332:	fa0f f48e 	sxth.w	r4, lr
 801d336:	fa0f f88a 	sxth.w	r8, sl
 801d33a:	f340 80b7 	ble.w	801d4ac <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801d33e:	1415      	asrs	r5, r2, #16
 801d340:	d406      	bmi.n	801d350 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d342:	42a5      	cmp	r5, r4
 801d344:	da04      	bge.n	801d350 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d346:	ea5f 4921 	movs.w	r9, r1, asr #16
 801d34a:	d401      	bmi.n	801d350 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d34c:	45c1      	cmp	r9, r8
 801d34e:	db3e      	blt.n	801d3ce <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801d350:	3b01      	subs	r3, #1
 801d352:	4432      	add	r2, r6
 801d354:	4439      	add	r1, r7
 801d356:	f100 0002 	add.w	r0, r0, #2
 801d35a:	d1f0      	bne.n	801d33e <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d35c:	9b02      	ldr	r3, [sp, #8]
 801d35e:	2b00      	cmp	r3, #0
 801d360:	f340 80a1 	ble.w	801d4a6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d364:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d368:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d36c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d370:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d374:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d378:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801d37c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d380:	ee76 6a62 	vsub.f32	s13, s12, s5
 801d384:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801d388:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d38c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d390:	ee16 2a90 	vmov	r2, s13
 801d394:	3b01      	subs	r3, #1
 801d396:	9302      	str	r3, [sp, #8]
 801d398:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d39a:	9c03      	ldr	r4, [sp, #12]
 801d39c:	fb92 f6f3 	sdiv	r6, r2, r3
 801d3a0:	ee17 2a10 	vmov	r2, s14
 801d3a4:	eeb0 7a43 	vmov.f32	s14, s6
 801d3a8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d3ac:	ee17 1a10 	vmov	r1, s14
 801d3b0:	eeb0 7a62 	vmov.f32	s14, s5
 801d3b4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d3b8:	fb92 f7f3 	sdiv	r7, r2, r3
 801d3bc:	eeb0 3a67 	vmov.f32	s6, s15
 801d3c0:	ee17 2a10 	vmov	r2, s14
 801d3c4:	eef0 2a46 	vmov.f32	s5, s12
 801d3c8:	bf08      	it	eq
 801d3ca:	4623      	moveq	r3, r4
 801d3cc:	e7a2      	b.n	801d314 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d3ce:	9501      	str	r5, [sp, #4]
 801d3d0:	1e5d      	subs	r5, r3, #1
 801d3d2:	fb05 2906 	mla	r9, r5, r6, r2
 801d3d6:	ea5f 4929 	movs.w	r9, r9, asr #16
 801d3da:	9504      	str	r5, [sp, #16]
 801d3dc:	d570      	bpl.n	801d4c0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801d3de:	4680      	mov	r8, r0
 801d3e0:	9d01      	ldr	r5, [sp, #4]
 801d3e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d3e6:	4654      	mov	r4, sl
 801d3e8:	4673      	mov	r3, lr
 801d3ea:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801d3ee:	e002      	b.n	801d3f6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d3f0:	1415      	asrs	r5, r2, #16
 801d3f2:	e9d9 3402 	ldrd	r3, r4, [r9, #8]
 801d3f6:	2d00      	cmp	r5, #0
 801d3f8:	4432      	add	r2, r6
 801d3fa:	db4b      	blt.n	801d494 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801d3fc:	429d      	cmp	r5, r3
 801d3fe:	da49      	bge.n	801d494 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801d400:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801d404:	d446      	bmi.n	801d494 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801d406:	45a6      	cmp	lr, r4
 801d408:	da44      	bge.n	801d494 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801d40a:	9c00      	ldr	r4, [sp, #0]
 801d40c:	b21b      	sxth	r3, r3
 801d40e:	fb0e 4303 	mla	r3, lr, r3, r4
 801d412:	5d5b      	ldrb	r3, [r3, r5]
 801d414:	9d05      	ldr	r5, [sp, #20]
 801d416:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d41a:	441d      	add	r5, r3
 801d41c:	f895 a002 	ldrb.w	sl, [r5, #2]
 801d420:	786d      	ldrb	r5, [r5, #1]
 801d422:	f8b8 4000 	ldrh.w	r4, [r8]
 801d426:	fb15 f50b 	smulbb	r5, r5, fp
 801d42a:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 801d42e:	fa5f fe8e 	uxtb.w	lr, lr
 801d432:	9501      	str	r5, [sp, #4]
 801d434:	fb1e fe0c 	smulbb	lr, lr, ip
 801d438:	9d05      	ldr	r5, [sp, #20]
 801d43a:	fb1a fa0b 	smulbb	sl, sl, fp
 801d43e:	5ced      	ldrb	r5, [r5, r3]
 801d440:	1223      	asrs	r3, r4, #8
 801d442:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d446:	fb05 ee0b 	mla	lr, r5, fp, lr
 801d44a:	fb03 aa0c 	mla	sl, r3, ip, sl
 801d44e:	9d01      	ldr	r5, [sp, #4]
 801d450:	10e4      	asrs	r4, r4, #3
 801d452:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d456:	fb04 540c 	mla	r4, r4, ip, r5
 801d45a:	fa1f fe8e 	uxth.w	lr, lr
 801d45e:	fa1f fa8a 	uxth.w	sl, sl
 801d462:	f10e 0301 	add.w	r3, lr, #1
 801d466:	f10a 0501 	add.w	r5, sl, #1
 801d46a:	9301      	str	r3, [sp, #4]
 801d46c:	b2a4      	uxth	r4, r4
 801d46e:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801d472:	9d01      	ldr	r5, [sp, #4]
 801d474:	1c63      	adds	r3, r4, #1
 801d476:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801d47a:	eb05 251e 	add.w	r5, r5, lr, lsr #8
 801d47e:	f40a 4378 	and.w	r3, sl, #63488	; 0xf800
 801d482:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d486:	0964      	lsrs	r4, r4, #5
 801d488:	432b      	orrs	r3, r5
 801d48a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d48e:	4323      	orrs	r3, r4
 801d490:	f8a8 3000 	strh.w	r3, [r8]
 801d494:	f108 0802 	add.w	r8, r8, #2
 801d498:	4580      	cmp	r8, r0
 801d49a:	4439      	add	r1, r7
 801d49c:	d1a8      	bne.n	801d3f0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d49e:	9b02      	ldr	r3, [sp, #8]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	f73f af5f 	bgt.w	801d364 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d4a6:	b007      	add	sp, #28
 801d4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4ac:	f43f af56 	beq.w	801d35c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d4b0:	1e5d      	subs	r5, r3, #1
 801d4b2:	fb05 2906 	mla	r9, r5, r6, r2
 801d4b6:	ea5f 4929 	movs.w	r9, r9, asr #16
 801d4ba:	9504      	str	r5, [sp, #16]
 801d4bc:	f53f af4e 	bmi.w	801d35c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d4c0:	454c      	cmp	r4, r9
 801d4c2:	dd5b      	ble.n	801d57c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801d4c4:	9d04      	ldr	r5, [sp, #16]
 801d4c6:	fb05 1507 	mla	r5, r5, r7, r1
 801d4ca:	142d      	asrs	r5, r5, #16
 801d4cc:	d456      	bmi.n	801d57c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801d4ce:	4545      	cmp	r5, r8
 801d4d0:	da54      	bge.n	801d57c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801d4d2:	2b00      	cmp	r3, #0
 801d4d4:	f77f af42 	ble.w	801d35c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d4d8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d4dc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801d4e0:	9301      	str	r3, [sp, #4]
 801d4e2:	e002      	b.n	801d4ea <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d4e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d4e6:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 801d4ea:	9d00      	ldr	r5, [sp, #0]
 801d4ec:	140b      	asrs	r3, r1, #16
 801d4ee:	fb04 5303 	mla	r3, r4, r3, r5
 801d4f2:	1414      	asrs	r4, r2, #16
 801d4f4:	5d1b      	ldrb	r3, [r3, r4]
 801d4f6:	8804      	ldrh	r4, [r0, #0]
 801d4f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d4fc:	eb08 0503 	add.w	r5, r8, r3
 801d500:	f895 a002 	ldrb.w	sl, [r5, #2]
 801d504:	f895 9001 	ldrb.w	r9, [r5, #1]
 801d508:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 801d50c:	fa5f fe8e 	uxtb.w	lr, lr
 801d510:	fb1e fe0c 	smulbb	lr, lr, ip
 801d514:	fb19 f90b 	smulbb	r9, r9, fp
 801d518:	fb1a fa0b 	smulbb	sl, sl, fp
 801d51c:	f818 5003 	ldrb.w	r5, [r8, r3]
 801d520:	1223      	asrs	r3, r4, #8
 801d522:	10e4      	asrs	r4, r4, #3
 801d524:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d528:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d52c:	fb05 e50b 	mla	r5, r5, fp, lr
 801d530:	fb03 aa0c 	mla	sl, r3, ip, sl
 801d534:	fb04 940c 	mla	r4, r4, ip, r9
 801d538:	b2ad      	uxth	r5, r5
 801d53a:	fa1f fa8a 	uxth.w	sl, sl
 801d53e:	b2a4      	uxth	r4, r4
 801d540:	f10a 0301 	add.w	r3, sl, #1
 801d544:	f105 0e01 	add.w	lr, r5, #1
 801d548:	f104 0901 	add.w	r9, r4, #1
 801d54c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801d550:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 801d554:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801d558:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801d55c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d560:	0964      	lsrs	r4, r4, #5
 801d562:	ea43 030e 	orr.w	r3, r3, lr
 801d566:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d56a:	4323      	orrs	r3, r4
 801d56c:	f820 3b02 	strh.w	r3, [r0], #2
 801d570:	9b01      	ldr	r3, [sp, #4]
 801d572:	4439      	add	r1, r7
 801d574:	4298      	cmp	r0, r3
 801d576:	4432      	add	r2, r6
 801d578:	d1b4      	bne.n	801d4e4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801d57a:	e6ef      	b.n	801d35c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	f77f aeed 	ble.w	801d35c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d582:	1414      	asrs	r4, r2, #16
 801d584:	4680      	mov	r8, r0
 801d586:	9401      	str	r4, [sp, #4]
 801d588:	4625      	mov	r5, r4
 801d58a:	e72a      	b.n	801d3e2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>

0801d58c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d590:	4689      	mov	r9, r1
 801d592:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801d596:	46ca      	mov	sl, r9
 801d598:	b087      	sub	sp, #28
 801d59a:	9203      	str	r2, [sp, #12]
 801d59c:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 801d5a0:	6854      	ldr	r4, [r2, #4]
 801d5a2:	e9dd 0c17 	ldrd	r0, ip, [sp, #92]	; 0x5c
 801d5a6:	fb04 1000 	mla	r0, r4, r0, r1
 801d5aa:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801d5ae:	6815      	ldr	r5, [r2, #0]
 801d5b0:	e9dc 2400 	ldrd	r2, r4, [ip]
 801d5b4:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 801d5b8:	f104 0b04 	add.w	fp, r4, #4
 801d5bc:	9205      	str	r2, [sp, #20]
 801d5be:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801d5c2:	f1ba 0f00 	cmp.w	sl, #0
 801d5c6:	dc03      	bgt.n	801d5d0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d5c8:	9c03      	ldr	r4, [sp, #12]
 801d5ca:	2c00      	cmp	r4, #0
 801d5cc:	f340 8095 	ble.w	801d6fa <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801d5d0:	e9dc e802 	ldrd	lr, r8, [ip, #8]
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	fa0f f588 	sxth.w	r5, r8
 801d5da:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d5de:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801d5e2:	fa0f f48e 	sxth.w	r4, lr
 801d5e6:	9502      	str	r5, [sp, #8]
 801d5e8:	f340 808a 	ble.w	801d700 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d5ec:	46f1      	mov	r9, lr
 801d5ee:	9401      	str	r4, [sp, #4]
 801d5f0:	1415      	asrs	r5, r2, #16
 801d5f2:	d408      	bmi.n	801d606 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d5f4:	9c01      	ldr	r4, [sp, #4]
 801d5f6:	42a5      	cmp	r5, r4
 801d5f8:	da05      	bge.n	801d606 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d5fa:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801d5fe:	d402      	bmi.n	801d606 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d600:	9c02      	ldr	r4, [sp, #8]
 801d602:	45a6      	cmp	lr, r4
 801d604:	db3b      	blt.n	801d67e <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf2>
 801d606:	3b01      	subs	r3, #1
 801d608:	4432      	add	r2, r6
 801d60a:	4439      	add	r1, r7
 801d60c:	f100 0002 	add.w	r0, r0, #2
 801d610:	d1ee      	bne.n	801d5f0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d612:	f1ba 0f00 	cmp.w	sl, #0
 801d616:	dd70      	ble.n	801d6fa <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801d618:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d61c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d620:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801d624:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d628:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801d62c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d630:	ee76 6a62 	vsub.f32	s13, s12, s5
 801d634:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801d638:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d63c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d640:	ee16 2a90 	vmov	r2, s13
 801d644:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d646:	9c03      	ldr	r4, [sp, #12]
 801d648:	fb92 f6f3 	sdiv	r6, r2, r3
 801d64c:	ee17 2a10 	vmov	r2, s14
 801d650:	eeb0 7a43 	vmov.f32	s14, s6
 801d654:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d658:	ee17 1a10 	vmov	r1, s14
 801d65c:	eeb0 7a62 	vmov.f32	s14, s5
 801d660:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d664:	f1ba 0a01 	subs.w	sl, sl, #1
 801d668:	fb92 f7f3 	sdiv	r7, r2, r3
 801d66c:	eeb0 3a67 	vmov.f32	s6, s15
 801d670:	ee17 2a10 	vmov	r2, s14
 801d674:	eef0 2a46 	vmov.f32	s5, s12
 801d678:	bf08      	it	eq
 801d67a:	4623      	moveq	r3, r4
 801d67c:	e7a1      	b.n	801d5c2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d67e:	9c01      	ldr	r4, [sp, #4]
 801d680:	9501      	str	r5, [sp, #4]
 801d682:	1e5d      	subs	r5, r3, #1
 801d684:	46ce      	mov	lr, r9
 801d686:	fb05 2906 	mla	r9, r5, r6, r2
 801d68a:	ea5f 4929 	movs.w	r9, r9, asr #16
 801d68e:	9504      	str	r5, [sp, #16]
 801d690:	d53e      	bpl.n	801d710 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801d692:	4604      	mov	r4, r0
 801d694:	9d01      	ldr	r5, [sp, #4]
 801d696:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d69a:	4673      	mov	r3, lr
 801d69c:	46b6      	mov	lr, r6
 801d69e:	4646      	mov	r6, r8
 801d6a0:	e002      	b.n	801d6a8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d6a2:	1415      	asrs	r5, r2, #16
 801d6a4:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801d6a8:	2d00      	cmp	r5, #0
 801d6aa:	4472      	add	r2, lr
 801d6ac:	db1e      	blt.n	801d6ec <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801d6ae:	429d      	cmp	r5, r3
 801d6b0:	da1c      	bge.n	801d6ec <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801d6b2:	ea5f 4821 	movs.w	r8, r1, asr #16
 801d6b6:	d419      	bmi.n	801d6ec <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801d6b8:	45b0      	cmp	r8, r6
 801d6ba:	da17      	bge.n	801d6ec <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801d6bc:	9e05      	ldr	r6, [sp, #20]
 801d6be:	b21b      	sxth	r3, r3
 801d6c0:	fb08 6303 	mla	r3, r8, r3, r6
 801d6c4:	5d5e      	ldrb	r6, [r3, r5]
 801d6c6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d6ca:	eb0b 0306 	add.w	r3, fp, r6
 801d6ce:	785d      	ldrb	r5, [r3, #1]
 801d6d0:	789b      	ldrb	r3, [r3, #2]
 801d6d2:	00ed      	lsls	r5, r5, #3
 801d6d4:	f405 68fc 	and.w	r8, r5, #2016	; 0x7e0
 801d6d8:	4d2d      	ldr	r5, [pc, #180]	; (801d790 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>)
 801d6da:	f81b 6006 	ldrb.w	r6, [fp, r6]
 801d6de:	ea05 2303 	and.w	r3, r5, r3, lsl #8
 801d6e2:	ea43 0308 	orr.w	r3, r3, r8
 801d6e6:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
 801d6ea:	8023      	strh	r3, [r4, #0]
 801d6ec:	3402      	adds	r4, #2
 801d6ee:	4284      	cmp	r4, r0
 801d6f0:	4439      	add	r1, r7
 801d6f2:	d1d6      	bne.n	801d6a2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d6f4:	f1ba 0f00 	cmp.w	sl, #0
 801d6f8:	dc8e      	bgt.n	801d618 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d6fa:	b007      	add	sp, #28
 801d6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d700:	d087      	beq.n	801d612 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d702:	1e5d      	subs	r5, r3, #1
 801d704:	fb05 2906 	mla	r9, r5, r6, r2
 801d708:	ea5f 4929 	movs.w	r9, r9, asr #16
 801d70c:	9504      	str	r5, [sp, #16]
 801d70e:	d480      	bmi.n	801d612 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d710:	454c      	cmp	r4, r9
 801d712:	dd35      	ble.n	801d780 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d714:	9d04      	ldr	r5, [sp, #16]
 801d716:	fb05 1507 	mla	r5, r5, r7, r1
 801d71a:	ea5f 4925 	movs.w	r9, r5, asr #16
 801d71e:	d42f      	bmi.n	801d780 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d720:	9d02      	ldr	r5, [sp, #8]
 801d722:	45a9      	cmp	r9, r5
 801d724:	da2c      	bge.n	801d780 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d726:	2b00      	cmp	r3, #0
 801d728:	f77f af73 	ble.w	801d612 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d72c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d730:	9d05      	ldr	r5, [sp, #20]
 801d732:	4699      	mov	r9, r3
 801d734:	46a6      	mov	lr, r4
 801d736:	e001      	b.n	801d73c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801d738:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d73c:	140c      	asrs	r4, r1, #16
 801d73e:	fb0e 5404 	mla	r4, lr, r4, r5
 801d742:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801d746:	f814 e00e 	ldrb.w	lr, [r4, lr]
 801d74a:	4b11      	ldr	r3, [pc, #68]	; (801d790 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>)
 801d74c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d750:	eb0b 040e 	add.w	r4, fp, lr
 801d754:	f894 8001 	ldrb.w	r8, [r4, #1]
 801d758:	78a4      	ldrb	r4, [r4, #2]
 801d75a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d75e:	f81b e00e 	ldrb.w	lr, [fp, lr]
 801d762:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d766:	ea03 2404 	and.w	r4, r3, r4, lsl #8
 801d76a:	ea44 0408 	orr.w	r4, r4, r8
 801d76e:	ea44 04de 	orr.w	r4, r4, lr, lsr #3
 801d772:	f820 4b02 	strh.w	r4, [r0], #2
 801d776:	4548      	cmp	r0, r9
 801d778:	4439      	add	r1, r7
 801d77a:	4432      	add	r2, r6
 801d77c:	d1dc      	bne.n	801d738 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d77e:	e748      	b.n	801d612 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d780:	2b00      	cmp	r3, #0
 801d782:	f77f af46 	ble.w	801d612 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d786:	1415      	asrs	r5, r2, #16
 801d788:	4604      	mov	r4, r0
 801d78a:	9501      	str	r5, [sp, #4]
 801d78c:	e783      	b.n	801d696 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801d78e:	bf00      	nop
 801d790:	fffff800 	.word	0xfffff800

0801d794 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d794:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801d798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d79c:	b087      	sub	sp, #28
 801d79e:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801d7a2:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 801d7a6:	e9dd 0b17 	ldrd	r0, fp, [sp, #92]	; 0x5c
 801d7aa:	6854      	ldr	r4, [r2, #4]
 801d7ac:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801d7b0:	fb04 1100 	mla	r1, r4, r0, r1
 801d7b4:	e9dd 9a13 	ldrd	r9, sl, [sp, #76]	; 0x4c
 801d7b8:	6810      	ldr	r0, [r2, #0]
 801d7ba:	e9db 2400 	ldrd	r2, r4, [fp]
 801d7be:	eb00 0e41 	add.w	lr, r0, r1, lsl #1
 801d7c2:	1d21      	adds	r1, r4, #4
 801d7c4:	9505      	str	r5, [sp, #20]
 801d7c6:	9102      	str	r1, [sp, #8]
 801d7c8:	9201      	str	r2, [sp, #4]
 801d7ca:	e9dd 7211 	ldrd	r7, r2, [sp, #68]	; 0x44
 801d7ce:	9903      	ldr	r1, [sp, #12]
 801d7d0:	2900      	cmp	r1, #0
 801d7d2:	dc03      	bgt.n	801d7dc <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d7d4:	9904      	ldr	r1, [sp, #16]
 801d7d6:	2900      	cmp	r1, #0
 801d7d8:	f340 80b6 	ble.w	801d948 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801d7dc:	e9db 4602 	ldrd	r4, r6, [fp, #8]
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	f507 4700 	add.w	r7, r7, #32768	; 0x8000
 801d7e6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d7ea:	b221      	sxth	r1, r4
 801d7ec:	b235      	sxth	r5, r6
 801d7ee:	f340 80ae 	ble.w	801d94e <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d7f2:	1438      	asrs	r0, r7, #16
 801d7f4:	d406      	bmi.n	801d804 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d7f6:	4288      	cmp	r0, r1
 801d7f8:	da04      	bge.n	801d804 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d7fa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d7fe:	d401      	bmi.n	801d804 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d800:	45ac      	cmp	ip, r5
 801d802:	db3c      	blt.n	801d87e <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801d804:	3b01      	subs	r3, #1
 801d806:	444f      	add	r7, r9
 801d808:	4452      	add	r2, sl
 801d80a:	f10e 0e02 	add.w	lr, lr, #2
 801d80e:	d1f0      	bne.n	801d7f2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d810:	9b03      	ldr	r3, [sp, #12]
 801d812:	2b00      	cmp	r3, #0
 801d814:	f340 8098 	ble.w	801d948 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801d818:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d81c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d820:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801d824:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d828:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801d82c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d830:	ee76 6a62 	vsub.f32	s13, s12, s5
 801d834:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801d838:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d83c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d840:	ee16 2a90 	vmov	r2, s13
 801d844:	3b01      	subs	r3, #1
 801d846:	9303      	str	r3, [sp, #12]
 801d848:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d84a:	9904      	ldr	r1, [sp, #16]
 801d84c:	fb92 f9f3 	sdiv	r9, r2, r3
 801d850:	ee17 2a10 	vmov	r2, s14
 801d854:	eeb0 7a43 	vmov.f32	s14, s6
 801d858:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d85c:	fb92 faf3 	sdiv	sl, r2, r3
 801d860:	ee17 2a10 	vmov	r2, s14
 801d864:	eeb0 7a62 	vmov.f32	s14, s5
 801d868:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d86c:	eeb0 3a67 	vmov.f32	s6, s15
 801d870:	ee17 7a10 	vmov	r7, s14
 801d874:	eef0 2a46 	vmov.f32	s5, s12
 801d878:	bf08      	it	eq
 801d87a:	460b      	moveq	r3, r1
 801d87c:	e7a7      	b.n	801d7ce <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d87e:	f103 38ff 	add.w	r8, r3, #4294967295
 801d882:	fb08 7c09 	mla	ip, r8, r9, r7
 801d886:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801d88a:	d56a      	bpl.n	801d962 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 801d88c:	4675      	mov	r5, lr
 801d88e:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 801d892:	e002      	b.n	801d89a <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801d894:	1438      	asrs	r0, r7, #16
 801d896:	e9db 4602 	ldrd	r4, r6, [fp, #8]
 801d89a:	2800      	cmp	r0, #0
 801d89c:	444f      	add	r7, r9
 801d89e:	db4b      	blt.n	801d938 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d8a0:	42a0      	cmp	r0, r4
 801d8a2:	da49      	bge.n	801d938 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d8a4:	1413      	asrs	r3, r2, #16
 801d8a6:	d447      	bmi.n	801d938 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d8a8:	42b3      	cmp	r3, r6
 801d8aa:	b224      	sxth	r4, r4
 801d8ac:	da44      	bge.n	801d938 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d8ae:	9901      	ldr	r1, [sp, #4]
 801d8b0:	fb03 1404 	mla	r4, r3, r4, r1
 801d8b4:	9902      	ldr	r1, [sp, #8]
 801d8b6:	5c23      	ldrb	r3, [r4, r0]
 801d8b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801d8bc:	0e0b      	lsrs	r3, r1, #24
 801d8be:	d03b      	beq.n	801d938 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d8c0:	9805      	ldr	r0, [sp, #20]
 801d8c2:	f3c1 4807 	ubfx	r8, r1, #16, #8
 801d8c6:	fb00 f003 	mul.w	r0, r0, r3
 801d8ca:	1c43      	adds	r3, r0, #1
 801d8cc:	eb03 2320 	add.w	r3, r3, r0, asr #8
 801d8d0:	121b      	asrs	r3, r3, #8
 801d8d2:	43d8      	mvns	r0, r3
 801d8d4:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 801d8d8:	b29b      	uxth	r3, r3
 801d8da:	b2c9      	uxtb	r1, r1
 801d8dc:	882e      	ldrh	r6, [r5, #0]
 801d8de:	fb1c fc03 	smulbb	ip, ip, r3
 801d8e2:	fb18 f803 	smulbb	r8, r8, r3
 801d8e6:	fb11 f303 	smulbb	r3, r1, r3
 801d8ea:	10f4      	asrs	r4, r6, #3
 801d8ec:	1231      	asrs	r1, r6, #8
 801d8ee:	00f6      	lsls	r6, r6, #3
 801d8f0:	b2c0      	uxtb	r0, r0
 801d8f2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d8f6:	b2f6      	uxtb	r6, r6
 801d8f8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d8fc:	fb01 8800 	mla	r8, r1, r0, r8
 801d900:	fb04 c400 	mla	r4, r4, r0, ip
 801d904:	fb06 3100 	mla	r1, r6, r0, r3
 801d908:	fa1f fc88 	uxth.w	ip, r8
 801d90c:	b289      	uxth	r1, r1
 801d90e:	b2a4      	uxth	r4, r4
 801d910:	1c4e      	adds	r6, r1, #1
 801d912:	1c60      	adds	r0, r4, #1
 801d914:	f10c 0301 	add.w	r3, ip, #1
 801d918:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801d91c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801d920:	eb00 2114 	add.w	r1, r0, r4, lsr #8
 801d924:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801d928:	f3c6 20c4 	ubfx	r0, r6, #11, #5
 801d92c:	0949      	lsrs	r1, r1, #5
 801d92e:	4303      	orrs	r3, r0
 801d930:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d934:	430b      	orrs	r3, r1
 801d936:	802b      	strh	r3, [r5, #0]
 801d938:	3502      	adds	r5, #2
 801d93a:	4575      	cmp	r5, lr
 801d93c:	4452      	add	r2, sl
 801d93e:	d1a9      	bne.n	801d894 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801d940:	9b03      	ldr	r3, [sp, #12]
 801d942:	2b00      	cmp	r3, #0
 801d944:	f73f af68 	bgt.w	801d818 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d948:	b007      	add	sp, #28
 801d94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d94e:	f43f af5f 	beq.w	801d810 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d952:	f103 38ff 	add.w	r8, r3, #4294967295
 801d956:	fb08 7c09 	mla	ip, r8, r9, r7
 801d95a:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801d95e:	f53f af57 	bmi.w	801d810 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d962:	4561      	cmp	r1, ip
 801d964:	dd5c      	ble.n	801da20 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d966:	fb08 280a 	mla	r8, r8, sl, r2
 801d96a:	ea5f 4828 	movs.w	r8, r8, asr #16
 801d96e:	d457      	bmi.n	801da20 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d970:	45a8      	cmp	r8, r5
 801d972:	da55      	bge.n	801da20 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d974:	2b00      	cmp	r3, #0
 801d976:	f77f af4b 	ble.w	801d810 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d97a:	eb0e 0843 	add.w	r8, lr, r3, lsl #1
 801d97e:	e001      	b.n	801d984 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801d980:	f9bb 1008 	ldrsh.w	r1, [fp, #8]
 801d984:	9801      	ldr	r0, [sp, #4]
 801d986:	1413      	asrs	r3, r2, #16
 801d988:	fb01 0303 	mla	r3, r1, r3, r0
 801d98c:	1439      	asrs	r1, r7, #16
 801d98e:	5c5b      	ldrb	r3, [r3, r1]
 801d990:	9902      	ldr	r1, [sp, #8]
 801d992:	444f      	add	r7, r9
 801d994:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801d998:	4452      	add	r2, sl
 801d99a:	0e18      	lsrs	r0, r3, #24
 801d99c:	d03b      	beq.n	801da16 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801d99e:	9905      	ldr	r1, [sp, #20]
 801d9a0:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801d9a4:	fb01 f100 	mul.w	r1, r1, r0
 801d9a8:	1c48      	adds	r0, r1, #1
 801d9aa:	eb00 2021 	add.w	r0, r0, r1, asr #8
 801d9ae:	1200      	asrs	r0, r0, #8
 801d9b0:	43c1      	mvns	r1, r0
 801d9b2:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801d9b6:	b280      	uxth	r0, r0
 801d9b8:	b2db      	uxtb	r3, r3
 801d9ba:	f8be 5000 	ldrh.w	r5, [lr]
 801d9be:	fb16 f600 	smulbb	r6, r6, r0
 801d9c2:	fb1c fc00 	smulbb	ip, ip, r0
 801d9c6:	fb13 f300 	smulbb	r3, r3, r0
 801d9ca:	122c      	asrs	r4, r5, #8
 801d9cc:	10e8      	asrs	r0, r5, #3
 801d9ce:	00ed      	lsls	r5, r5, #3
 801d9d0:	b2c9      	uxtb	r1, r1
 801d9d2:	b2ed      	uxtb	r5, r5
 801d9d4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801d9d8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801d9dc:	fb00 6001 	mla	r0, r0, r1, r6
 801d9e0:	fb05 3301 	mla	r3, r5, r1, r3
 801d9e4:	fb04 c401 	mla	r4, r4, r1, ip
 801d9e8:	b280      	uxth	r0, r0
 801d9ea:	b2a4      	uxth	r4, r4
 801d9ec:	b29b      	uxth	r3, r3
 801d9ee:	1c65      	adds	r5, r4, #1
 801d9f0:	1c5e      	adds	r6, r3, #1
 801d9f2:	1c41      	adds	r1, r0, #1
 801d9f4:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801d9f8:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801d9fc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801da00:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801da04:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801da08:	0949      	lsrs	r1, r1, #5
 801da0a:	431c      	orrs	r4, r3
 801da0c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801da10:	430c      	orrs	r4, r1
 801da12:	f8ae 4000 	strh.w	r4, [lr]
 801da16:	f10e 0e02 	add.w	lr, lr, #2
 801da1a:	45c6      	cmp	lr, r8
 801da1c:	d1b0      	bne.n	801d980 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801da1e:	e6f7      	b.n	801d810 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801da20:	2b00      	cmp	r3, #0
 801da22:	f77f aef5 	ble.w	801d810 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801da26:	4675      	mov	r5, lr
 801da28:	1438      	asrs	r0, r7, #16
 801da2a:	e730      	b.n	801d88e <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>

0801da2c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801da2c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da34:	b085      	sub	sp, #20
 801da36:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801da3a:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 801da3e:	e9dd 0b15 	ldrd	r0, fp, [sp, #84]	; 0x54
 801da42:	6854      	ldr	r4, [r2, #4]
 801da44:	e9dd 9a11 	ldrd	r9, sl, [sp, #68]	; 0x44
 801da48:	fb04 1000 	mla	r0, r4, r0, r1
 801da4c:	6814      	ldr	r4, [r2, #0]
 801da4e:	e9db 2500 	ldrd	r2, r5, [fp]
 801da52:	eb04 0e40 	add.w	lr, r4, r0, lsl #1
 801da56:	1d28      	adds	r0, r5, #4
 801da58:	9001      	str	r0, [sp, #4]
 801da5a:	9200      	str	r2, [sp, #0]
 801da5c:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
 801da60:	9802      	ldr	r0, [sp, #8]
 801da62:	2800      	cmp	r0, #0
 801da64:	dc03      	bgt.n	801da6e <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801da66:	9803      	ldr	r0, [sp, #12]
 801da68:	2800      	cmp	r0, #0
 801da6a:	f340 80b8 	ble.w	801dbde <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801da6e:	e9db 5602 	ldrd	r5, r6, [fp, #8]
 801da72:	2b00      	cmp	r3, #0
 801da74:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801da78:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801da7c:	b228      	sxth	r0, r5
 801da7e:	b237      	sxth	r7, r6
 801da80:	f340 80b0 	ble.w	801dbe4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801da84:	140c      	asrs	r4, r1, #16
 801da86:	d406      	bmi.n	801da96 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801da88:	4284      	cmp	r4, r0
 801da8a:	da04      	bge.n	801da96 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801da8c:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801da90:	d401      	bmi.n	801da96 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801da92:	45bc      	cmp	ip, r7
 801da94:	db3c      	blt.n	801db10 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801da96:	3b01      	subs	r3, #1
 801da98:	4449      	add	r1, r9
 801da9a:	4452      	add	r2, sl
 801da9c:	f10e 0e02 	add.w	lr, lr, #2
 801daa0:	d1f0      	bne.n	801da84 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801daa2:	9b02      	ldr	r3, [sp, #8]
 801daa4:	2b00      	cmp	r3, #0
 801daa6:	f340 809a 	ble.w	801dbde <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801daaa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801daae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dab2:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801dab6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801daba:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801dabe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dac2:	ee76 6a62 	vsub.f32	s13, s12, s5
 801dac6:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801daca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dace:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801dad2:	ee16 2a90 	vmov	r2, s13
 801dad6:	3b01      	subs	r3, #1
 801dad8:	9302      	str	r3, [sp, #8]
 801dada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dadc:	9803      	ldr	r0, [sp, #12]
 801dade:	fb92 f9f3 	sdiv	r9, r2, r3
 801dae2:	ee17 2a10 	vmov	r2, s14
 801dae6:	eeb0 7a43 	vmov.f32	s14, s6
 801daea:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801daee:	fb92 faf3 	sdiv	sl, r2, r3
 801daf2:	ee17 2a10 	vmov	r2, s14
 801daf6:	eeb0 7a62 	vmov.f32	s14, s5
 801dafa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801dafe:	eeb0 3a67 	vmov.f32	s6, s15
 801db02:	ee17 1a10 	vmov	r1, s14
 801db06:	eef0 2a46 	vmov.f32	s5, s12
 801db0a:	bf08      	it	eq
 801db0c:	4603      	moveq	r3, r0
 801db0e:	e7a7      	b.n	801da60 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801db10:	f103 38ff 	add.w	r8, r3, #4294967295
 801db14:	fb08 1c09 	mla	ip, r8, r9, r1
 801db18:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801db1c:	d56c      	bpl.n	801dbf8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 801db1e:	4677      	mov	r7, lr
 801db20:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 801db24:	e002      	b.n	801db2c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801db26:	140c      	asrs	r4, r1, #16
 801db28:	e9db 5602 	ldrd	r5, r6, [fp, #8]
 801db2c:	2c00      	cmp	r4, #0
 801db2e:	db4d      	blt.n	801dbcc <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801db30:	42ac      	cmp	r4, r5
 801db32:	da4b      	bge.n	801dbcc <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801db34:	1413      	asrs	r3, r2, #16
 801db36:	d449      	bmi.n	801dbcc <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801db38:	42b3      	cmp	r3, r6
 801db3a:	b22d      	sxth	r5, r5
 801db3c:	da46      	bge.n	801dbcc <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801db3e:	9800      	ldr	r0, [sp, #0]
 801db40:	fb03 0505 	mla	r5, r3, r5, r0
 801db44:	9801      	ldr	r0, [sp, #4]
 801db46:	5d2b      	ldrb	r3, [r5, r4]
 801db48:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801db4c:	0e18      	lsrs	r0, r3, #24
 801db4e:	28ff      	cmp	r0, #255	; 0xff
 801db50:	f000 80c0 	beq.w	801dcd4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801db54:	b2c4      	uxtb	r4, r0
 801db56:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801db5a:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801db5e:	b2a5      	uxth	r5, r4
 801db60:	b2db      	uxtb	r3, r3
 801db62:	b398      	cbz	r0, 801dbcc <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801db64:	43e4      	mvns	r4, r4
 801db66:	f8b7 8000 	ldrh.w	r8, [r7]
 801db6a:	fb16 f605 	smulbb	r6, r6, r5
 801db6e:	fb1c fc05 	smulbb	ip, ip, r5
 801db72:	fb13 f505 	smulbb	r5, r3, r5
 801db76:	ea4f 2028 	mov.w	r0, r8, asr #8
 801db7a:	b2e3      	uxtb	r3, r4
 801db7c:	ea4f 04e8 	mov.w	r4, r8, asr #3
 801db80:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801db84:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801db88:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801db8c:	fa5f f888 	uxtb.w	r8, r8
 801db90:	fb04 6403 	mla	r4, r4, r3, r6
 801db94:	fb00 cc03 	mla	ip, r0, r3, ip
 801db98:	fb08 5303 	mla	r3, r8, r3, r5
 801db9c:	fa1f fc8c 	uxth.w	ip, ip
 801dba0:	b298      	uxth	r0, r3
 801dba2:	b2a5      	uxth	r5, r4
 801dba4:	f10c 0301 	add.w	r3, ip, #1
 801dba8:	1c44      	adds	r4, r0, #1
 801dbaa:	1c6e      	adds	r6, r5, #1
 801dbac:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801dbb0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801dbb4:	eb06 2015 	add.w	r0, r6, r5, lsr #8
 801dbb8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801dbbc:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801dbc0:	0940      	lsrs	r0, r0, #5
 801dbc2:	4323      	orrs	r3, r4
 801dbc4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dbc8:	4303      	orrs	r3, r0
 801dbca:	803b      	strh	r3, [r7, #0]
 801dbcc:	3702      	adds	r7, #2
 801dbce:	4577      	cmp	r7, lr
 801dbd0:	4449      	add	r1, r9
 801dbd2:	4452      	add	r2, sl
 801dbd4:	d1a7      	bne.n	801db26 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801dbd6:	9b02      	ldr	r3, [sp, #8]
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	f73f af66 	bgt.w	801daaa <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801dbde:	b005      	add	sp, #20
 801dbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbe4:	f43f af5d 	beq.w	801daa2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dbe8:	f103 38ff 	add.w	r8, r3, #4294967295
 801dbec:	fb08 1c09 	mla	ip, r8, r9, r1
 801dbf0:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801dbf4:	f53f af55 	bmi.w	801daa2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dbf8:	4560      	cmp	r0, ip
 801dbfa:	dd65      	ble.n	801dcc8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801dbfc:	fb08 280a 	mla	r8, r8, sl, r2
 801dc00:	ea5f 4828 	movs.w	r8, r8, asr #16
 801dc04:	d460      	bmi.n	801dcc8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801dc06:	45b8      	cmp	r8, r7
 801dc08:	da5e      	bge.n	801dcc8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801dc0a:	2b00      	cmp	r3, #0
 801dc0c:	f77f af49 	ble.w	801daa2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dc10:	eb0e 0843 	add.w	r8, lr, r3, lsl #1
 801dc14:	e03f      	b.n	801dc96 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801dc16:	b2f0      	uxtb	r0, r6
 801dc18:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801dc1c:	f3c3 2707 	ubfx	r7, r3, #8, #8
 801dc20:	b284      	uxth	r4, r0
 801dc22:	b2db      	uxtb	r3, r3
 801dc24:	b376      	cbz	r6, 801dc84 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801dc26:	43c0      	mvns	r0, r0
 801dc28:	f8be 6000 	ldrh.w	r6, [lr]
 801dc2c:	fb17 f704 	smulbb	r7, r7, r4
 801dc30:	fb1c fc04 	smulbb	ip, ip, r4
 801dc34:	fb13 f304 	smulbb	r3, r3, r4
 801dc38:	1235      	asrs	r5, r6, #8
 801dc3a:	10f4      	asrs	r4, r6, #3
 801dc3c:	00f6      	lsls	r6, r6, #3
 801dc3e:	b2c0      	uxtb	r0, r0
 801dc40:	b2f6      	uxtb	r6, r6
 801dc42:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801dc46:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801dc4a:	fb04 7400 	mla	r4, r4, r0, r7
 801dc4e:	fb06 3300 	mla	r3, r6, r0, r3
 801dc52:	fb05 c500 	mla	r5, r5, r0, ip
 801dc56:	b2a4      	uxth	r4, r4
 801dc58:	b2ad      	uxth	r5, r5
 801dc5a:	b29b      	uxth	r3, r3
 801dc5c:	1c6e      	adds	r6, r5, #1
 801dc5e:	1c5f      	adds	r7, r3, #1
 801dc60:	1c60      	adds	r0, r4, #1
 801dc62:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801dc66:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801dc6a:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801dc6e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801dc72:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801dc76:	0940      	lsrs	r0, r0, #5
 801dc78:	432b      	orrs	r3, r5
 801dc7a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dc7e:	4303      	orrs	r3, r0
 801dc80:	f8ae 3000 	strh.w	r3, [lr]
 801dc84:	f10e 0e02 	add.w	lr, lr, #2
 801dc88:	45c6      	cmp	lr, r8
 801dc8a:	4449      	add	r1, r9
 801dc8c:	4452      	add	r2, sl
 801dc8e:	f43f af08 	beq.w	801daa2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dc92:	f9bb 0008 	ldrsh.w	r0, [fp, #8]
 801dc96:	9c00      	ldr	r4, [sp, #0]
 801dc98:	1413      	asrs	r3, r2, #16
 801dc9a:	fb00 4303 	mla	r3, r0, r3, r4
 801dc9e:	1408      	asrs	r0, r1, #16
 801dca0:	5c1b      	ldrb	r3, [r3, r0]
 801dca2:	9801      	ldr	r0, [sp, #4]
 801dca4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801dca8:	0e1e      	lsrs	r6, r3, #24
 801dcaa:	2eff      	cmp	r6, #255	; 0xff
 801dcac:	d1b3      	bne.n	801dc16 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801dcae:	0958      	lsrs	r0, r3, #5
 801dcb0:	f400 64fc 	and.w	r4, r0, #2016	; 0x7e0
 801dcb4:	480d      	ldr	r0, [pc, #52]	; (801dcec <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801dcb6:	ea00 2013 	and.w	r0, r0, r3, lsr #8
 801dcba:	4320      	orrs	r0, r4
 801dcbc:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801dcc0:	4303      	orrs	r3, r0
 801dcc2:	f8ae 3000 	strh.w	r3, [lr]
 801dcc6:	e7dd      	b.n	801dc84 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801dcc8:	2b00      	cmp	r3, #0
 801dcca:	f77f aeea 	ble.w	801daa2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dcce:	4677      	mov	r7, lr
 801dcd0:	140c      	asrs	r4, r1, #16
 801dcd2:	e725      	b.n	801db20 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801dcd4:	0958      	lsrs	r0, r3, #5
 801dcd6:	f400 64fc 	and.w	r4, r0, #2016	; 0x7e0
 801dcda:	4804      	ldr	r0, [pc, #16]	; (801dcec <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801dcdc:	ea00 2013 	and.w	r0, r0, r3, lsr #8
 801dce0:	4320      	orrs	r0, r4
 801dce2:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801dce6:	4303      	orrs	r3, r0
 801dce8:	803b      	strh	r3, [r7, #0]
 801dcea:	e76f      	b.n	801dbcc <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801dcec:	fffff800 	.word	0xfffff800

0801dcf0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcf4:	b089      	sub	sp, #36	; 0x24
 801dcf6:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 801dcfa:	9104      	str	r1, [sp, #16]
 801dcfc:	ea6f 0c05 	mvn.w	ip, r5
 801dd00:	e9dd 4117 	ldrd	r4, r1, [sp, #92]	; 0x5c
 801dd04:	e9dd 6715 	ldrd	r6, r7, [sp, #84]	; 0x54
 801dd08:	6860      	ldr	r0, [r4, #4]
 801dd0a:	9205      	str	r2, [sp, #20]
 801dd0c:	e9dd 2b19 	ldrd	r2, fp, [sp, #100]	; 0x64
 801dd10:	fb00 1102 	mla	r1, r0, r2, r1
 801dd14:	6824      	ldr	r4, [r4, #0]
 801dd16:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dd1a:	4421      	add	r1, r4
 801dd1c:	f8db 4004 	ldr.w	r4, [fp, #4]
 801dd20:	f8db 2000 	ldr.w	r2, [fp]
 801dd24:	3404      	adds	r4, #4
 801dd26:	fa5f fc8c 	uxtb.w	ip, ip
 801dd2a:	fa1f f985 	uxth.w	r9, r5
 801dd2e:	9407      	str	r4, [sp, #28]
 801dd30:	9202      	str	r2, [sp, #8]
 801dd32:	e9dd 2013 	ldrd	r2, r0, [sp, #76]	; 0x4c
 801dd36:	9c04      	ldr	r4, [sp, #16]
 801dd38:	2c00      	cmp	r4, #0
 801dd3a:	dc03      	bgt.n	801dd44 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801dd3c:	9c05      	ldr	r4, [sp, #20]
 801dd3e:	2c00      	cmp	r4, #0
 801dd40:	f340 80b1 	ble.w	801dea6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801dd44:	e9db e802 	ldrd	lr, r8, [fp, #8]
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	fa0f f588 	sxth.w	r5, r8
 801dd4e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801dd52:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 801dd56:	fa0f f48e 	sxth.w	r4, lr
 801dd5a:	9503      	str	r5, [sp, #12]
 801dd5c:	f340 80a6 	ble.w	801deac <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801dd60:	46f2      	mov	sl, lr
 801dd62:	9401      	str	r4, [sp, #4]
 801dd64:	1415      	asrs	r5, r2, #16
 801dd66:	d408      	bmi.n	801dd7a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801dd68:	9c01      	ldr	r4, [sp, #4]
 801dd6a:	42a5      	cmp	r5, r4
 801dd6c:	da05      	bge.n	801dd7a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801dd6e:	ea5f 4e20 	movs.w	lr, r0, asr #16
 801dd72:	d402      	bmi.n	801dd7a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801dd74:	9c03      	ldr	r4, [sp, #12]
 801dd76:	45a6      	cmp	lr, r4
 801dd78:	db3e      	blt.n	801ddf8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801dd7a:	3b01      	subs	r3, #1
 801dd7c:	4432      	add	r2, r6
 801dd7e:	4438      	add	r0, r7
 801dd80:	f101 0103 	add.w	r1, r1, #3
 801dd84:	d1ee      	bne.n	801dd64 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801dd86:	9b04      	ldr	r3, [sp, #16]
 801dd88:	2b00      	cmp	r3, #0
 801dd8a:	f340 808c 	ble.w	801dea6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801dd8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dd92:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd96:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dd9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dda2:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801dda6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ddaa:	ee76 6a62 	vsub.f32	s13, s12, s5
 801ddae:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801ddb2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ddb6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ddba:	ee16 2a90 	vmov	r2, s13
 801ddbe:	3b01      	subs	r3, #1
 801ddc0:	9304      	str	r3, [sp, #16]
 801ddc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ddc4:	9c05      	ldr	r4, [sp, #20]
 801ddc6:	fb92 f6f3 	sdiv	r6, r2, r3
 801ddca:	ee17 2a10 	vmov	r2, s14
 801ddce:	eeb0 7a43 	vmov.f32	s14, s6
 801ddd2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ddd6:	ee17 0a10 	vmov	r0, s14
 801ddda:	eeb0 7a62 	vmov.f32	s14, s5
 801ddde:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801dde2:	fb92 f7f3 	sdiv	r7, r2, r3
 801dde6:	eeb0 3a67 	vmov.f32	s6, s15
 801ddea:	ee17 2a10 	vmov	r2, s14
 801ddee:	eef0 2a46 	vmov.f32	s5, s12
 801ddf2:	bf08      	it	eq
 801ddf4:	4623      	moveq	r3, r4
 801ddf6:	e79e      	b.n	801dd36 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ddf8:	9506      	str	r5, [sp, #24]
 801ddfa:	1e5d      	subs	r5, r3, #1
 801ddfc:	46d6      	mov	lr, sl
 801ddfe:	fb05 2a06 	mla	sl, r5, r6, r2
 801de02:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801de06:	9c01      	ldr	r4, [sp, #4]
 801de08:	9501      	str	r5, [sp, #4]
 801de0a:	d559      	bpl.n	801dec0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801de0c:	460c      	mov	r4, r1
 801de0e:	9d06      	ldr	r5, [sp, #24]
 801de10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de14:	4419      	add	r1, r3
 801de16:	4673      	mov	r3, lr
 801de18:	46b6      	mov	lr, r6
 801de1a:	4646      	mov	r6, r8
 801de1c:	e002      	b.n	801de24 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801de1e:	1415      	asrs	r5, r2, #16
 801de20:	e9db 3602 	ldrd	r3, r6, [fp, #8]
 801de24:	2d00      	cmp	r5, #0
 801de26:	4472      	add	r2, lr
 801de28:	db35      	blt.n	801de96 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801de2a:	429d      	cmp	r5, r3
 801de2c:	da33      	bge.n	801de96 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801de2e:	ea5f 4820 	movs.w	r8, r0, asr #16
 801de32:	d430      	bmi.n	801de96 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801de34:	45b0      	cmp	r8, r6
 801de36:	b21b      	sxth	r3, r3
 801de38:	da2d      	bge.n	801de96 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801de3a:	9e02      	ldr	r6, [sp, #8]
 801de3c:	fb08 6303 	mla	r3, r8, r3, r6
 801de40:	7826      	ldrb	r6, [r4, #0]
 801de42:	5d5b      	ldrb	r3, [r3, r5]
 801de44:	fb16 f80c 	smulbb	r8, r6, ip
 801de48:	9d07      	ldr	r5, [sp, #28]
 801de4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de4e:	5cee      	ldrb	r6, [r5, r3]
 801de50:	442b      	add	r3, r5
 801de52:	fb06 8609 	mla	r6, r6, r9, r8
 801de56:	b2b6      	uxth	r6, r6
 801de58:	7865      	ldrb	r5, [r4, #1]
 801de5a:	f106 0801 	add.w	r8, r6, #1
 801de5e:	eb08 2616 	add.w	r6, r8, r6, lsr #8
 801de62:	1236      	asrs	r6, r6, #8
 801de64:	fb15 f80c 	smulbb	r8, r5, ip
 801de68:	7026      	strb	r6, [r4, #0]
 801de6a:	785d      	ldrb	r5, [r3, #1]
 801de6c:	78a6      	ldrb	r6, [r4, #2]
 801de6e:	fb05 8509 	mla	r5, r5, r9, r8
 801de72:	b2ad      	uxth	r5, r5
 801de74:	f105 0801 	add.w	r8, r5, #1
 801de78:	eb08 2515 	add.w	r5, r8, r5, lsr #8
 801de7c:	122d      	asrs	r5, r5, #8
 801de7e:	fb16 f60c 	smulbb	r6, r6, ip
 801de82:	7065      	strb	r5, [r4, #1]
 801de84:	789b      	ldrb	r3, [r3, #2]
 801de86:	fb03 6309 	mla	r3, r3, r9, r6
 801de8a:	b29b      	uxth	r3, r3
 801de8c:	1c5d      	adds	r5, r3, #1
 801de8e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801de92:	121b      	asrs	r3, r3, #8
 801de94:	70a3      	strb	r3, [r4, #2]
 801de96:	3403      	adds	r4, #3
 801de98:	428c      	cmp	r4, r1
 801de9a:	4438      	add	r0, r7
 801de9c:	d1bf      	bne.n	801de1e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 801de9e:	9b04      	ldr	r3, [sp, #16]
 801dea0:	2b00      	cmp	r3, #0
 801dea2:	f73f af74 	bgt.w	801dd8e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801dea6:	b009      	add	sp, #36	; 0x24
 801dea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801deac:	f43f af6b 	beq.w	801dd86 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801deb0:	1e5d      	subs	r5, r3, #1
 801deb2:	fb05 2a06 	mla	sl, r5, r6, r2
 801deb6:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801deba:	9501      	str	r5, [sp, #4]
 801debc:	f53f af63 	bmi.w	801dd86 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801dec0:	4554      	cmp	r4, sl
 801dec2:	dd54      	ble.n	801df6e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801dec4:	9d01      	ldr	r5, [sp, #4]
 801dec6:	fb05 0507 	mla	r5, r5, r7, r0
 801deca:	ea5f 4a25 	movs.w	sl, r5, asr #16
 801dece:	d44e      	bmi.n	801df6e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ded0:	9d03      	ldr	r5, [sp, #12]
 801ded2:	45aa      	cmp	sl, r5
 801ded4:	da4b      	bge.n	801df6e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ded6:	2b00      	cmp	r3, #0
 801ded8:	f77f af55 	ble.w	801dd86 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801dedc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dee0:	eb01 0e03 	add.w	lr, r1, r3
 801dee4:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801dee8:	3103      	adds	r1, #3
 801deea:	e002      	b.n	801def2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801deec:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801def0:	3103      	adds	r1, #3
 801def2:	9d02      	ldr	r5, [sp, #8]
 801def4:	1403      	asrs	r3, r0, #16
 801def6:	fb04 5303 	mla	r3, r4, r3, r5
 801defa:	1415      	asrs	r5, r2, #16
 801defc:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 801df00:	5d5b      	ldrb	r3, [r3, r5]
 801df02:	fb14 f40c 	smulbb	r4, r4, ip
 801df06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df0a:	f818 5003 	ldrb.w	r5, [r8, r3]
 801df0e:	4443      	add	r3, r8
 801df10:	fb05 4509 	mla	r5, r5, r9, r4
 801df14:	b2ad      	uxth	r5, r5
 801df16:	f105 0a01 	add.w	sl, r5, #1
 801df1a:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 801df1e:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801df22:	122d      	asrs	r5, r5, #8
 801df24:	fb14 f40c 	smulbb	r4, r4, ip
 801df28:	f801 5c03 	strb.w	r5, [r1, #-3]
 801df2c:	785d      	ldrb	r5, [r3, #1]
 801df2e:	f811 ac01 	ldrb.w	sl, [r1, #-1]
 801df32:	fb05 4409 	mla	r4, r5, r9, r4
 801df36:	b2a4      	uxth	r4, r4
 801df38:	1c65      	adds	r5, r4, #1
 801df3a:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801df3e:	1224      	asrs	r4, r4, #8
 801df40:	fb1a fa0c 	smulbb	sl, sl, ip
 801df44:	f801 4c02 	strb.w	r4, [r1, #-2]
 801df48:	789b      	ldrb	r3, [r3, #2]
 801df4a:	458e      	cmp	lr, r1
 801df4c:	fb03 aa09 	mla	sl, r3, r9, sl
 801df50:	fa1f fa8a 	uxth.w	sl, sl
 801df54:	f10a 0301 	add.w	r3, sl, #1
 801df58:	eb03 2a1a 	add.w	sl, r3, sl, lsr #8
 801df5c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801df60:	4438      	add	r0, r7
 801df62:	4432      	add	r2, r6
 801df64:	f801 ac01 	strb.w	sl, [r1, #-1]
 801df68:	d1c0      	bne.n	801deec <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801df6a:	4671      	mov	r1, lr
 801df6c:	e70b      	b.n	801dd86 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801df6e:	2b00      	cmp	r3, #0
 801df70:	f77f af09 	ble.w	801dd86 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801df74:	1415      	asrs	r5, r2, #16
 801df76:	460c      	mov	r4, r1
 801df78:	9506      	str	r5, [sp, #24]
 801df7a:	e749      	b.n	801de10 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>

0801df7c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801df7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df80:	4689      	mov	r9, r1
 801df82:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801df86:	46c8      	mov	r8, r9
 801df88:	b087      	sub	sp, #28
 801df8a:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801df8e:	684c      	ldr	r4, [r1, #4]
 801df90:	9203      	str	r2, [sp, #12]
 801df92:	e9dd 2c17 	ldrd	r2, ip, [sp, #92]	; 0x5c
 801df96:	fb04 0202 	mla	r2, r4, r2, r0
 801df9a:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801df9e:	680d      	ldr	r5, [r1, #0]
 801dfa0:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801dfa4:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801dfa8:	f8dc 2000 	ldr.w	r2, [ip]
 801dfac:	4428      	add	r0, r5
 801dfae:	f104 0b04 	add.w	fp, r4, #4
 801dfb2:	9205      	str	r2, [sp, #20]
 801dfb4:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801dfb8:	f1b8 0f00 	cmp.w	r8, #0
 801dfbc:	dc03      	bgt.n	801dfc6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801dfbe:	9c03      	ldr	r4, [sp, #12]
 801dfc0:	2c00      	cmp	r4, #0
 801dfc2:	f340 808d 	ble.w	801e0e0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801dfc6:	e9dc ea02 	ldrd	lr, sl, [ip, #8]
 801dfca:	2b00      	cmp	r3, #0
 801dfcc:	fa0f f58a 	sxth.w	r5, sl
 801dfd0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801dfd4:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801dfd8:	fa0f f48e 	sxth.w	r4, lr
 801dfdc:	9502      	str	r5, [sp, #8]
 801dfde:	f340 8082 	ble.w	801e0e6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801dfe2:	46f1      	mov	r9, lr
 801dfe4:	9401      	str	r4, [sp, #4]
 801dfe6:	1415      	asrs	r5, r2, #16
 801dfe8:	d408      	bmi.n	801dffc <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801dfea:	9c01      	ldr	r4, [sp, #4]
 801dfec:	42a5      	cmp	r5, r4
 801dfee:	da05      	bge.n	801dffc <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801dff0:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801dff4:	d402      	bmi.n	801dffc <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801dff6:	9c02      	ldr	r4, [sp, #8]
 801dff8:	45a6      	cmp	lr, r4
 801dffa:	db3b      	blt.n	801e074 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801dffc:	3b01      	subs	r3, #1
 801dffe:	4432      	add	r2, r6
 801e000:	4439      	add	r1, r7
 801e002:	f100 0003 	add.w	r0, r0, #3
 801e006:	d1ee      	bne.n	801dfe6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e008:	f1b8 0f00 	cmp.w	r8, #0
 801e00c:	dd68      	ble.n	801e0e0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e00e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e012:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e016:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801e01a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e01e:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e022:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e026:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e02a:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e02e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e032:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e036:	ee16 2a90 	vmov	r2, s13
 801e03a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e03c:	9c03      	ldr	r4, [sp, #12]
 801e03e:	fb92 f6f3 	sdiv	r6, r2, r3
 801e042:	ee17 2a10 	vmov	r2, s14
 801e046:	eeb0 7a43 	vmov.f32	s14, s6
 801e04a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e04e:	ee17 1a10 	vmov	r1, s14
 801e052:	eeb0 7a62 	vmov.f32	s14, s5
 801e056:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e05a:	f1b8 0801 	subs.w	r8, r8, #1
 801e05e:	fb92 f7f3 	sdiv	r7, r2, r3
 801e062:	eeb0 3a67 	vmov.f32	s6, s15
 801e066:	ee17 2a10 	vmov	r2, s14
 801e06a:	eef0 2a46 	vmov.f32	s5, s12
 801e06e:	bf08      	it	eq
 801e070:	4623      	moveq	r3, r4
 801e072:	e7a1      	b.n	801dfb8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e074:	9c01      	ldr	r4, [sp, #4]
 801e076:	9501      	str	r5, [sp, #4]
 801e078:	1e5d      	subs	r5, r3, #1
 801e07a:	46ce      	mov	lr, r9
 801e07c:	fb06 2905 	mla	r9, r6, r5, r2
 801e080:	ea5f 4929 	movs.w	r9, r9, asr #16
 801e084:	9504      	str	r5, [sp, #16]
 801e086:	d536      	bpl.n	801e0f6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801e088:	4604      	mov	r4, r0
 801e08a:	9d01      	ldr	r5, [sp, #4]
 801e08c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e090:	4418      	add	r0, r3
 801e092:	4673      	mov	r3, lr
 801e094:	46b6      	mov	lr, r6
 801e096:	4656      	mov	r6, sl
 801e098:	e002      	b.n	801e0a0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801e09a:	1415      	asrs	r5, r2, #16
 801e09c:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801e0a0:	2d00      	cmp	r5, #0
 801e0a2:	4472      	add	r2, lr
 801e0a4:	db15      	blt.n	801e0d2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e0a6:	429d      	cmp	r5, r3
 801e0a8:	da13      	bge.n	801e0d2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e0aa:	ea5f 4921 	movs.w	r9, r1, asr #16
 801e0ae:	d410      	bmi.n	801e0d2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e0b0:	45b1      	cmp	r9, r6
 801e0b2:	da0e      	bge.n	801e0d2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e0b4:	9e05      	ldr	r6, [sp, #20]
 801e0b6:	b21b      	sxth	r3, r3
 801e0b8:	fb09 6303 	mla	r3, r9, r3, r6
 801e0bc:	5d5b      	ldrb	r3, [r3, r5]
 801e0be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e0c2:	f81b 5003 	ldrb.w	r5, [fp, r3]
 801e0c6:	445b      	add	r3, fp
 801e0c8:	7025      	strb	r5, [r4, #0]
 801e0ca:	785d      	ldrb	r5, [r3, #1]
 801e0cc:	7065      	strb	r5, [r4, #1]
 801e0ce:	789b      	ldrb	r3, [r3, #2]
 801e0d0:	70a3      	strb	r3, [r4, #2]
 801e0d2:	3403      	adds	r4, #3
 801e0d4:	4284      	cmp	r4, r0
 801e0d6:	4439      	add	r1, r7
 801e0d8:	d1df      	bne.n	801e09a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e0da:	f1b8 0f00 	cmp.w	r8, #0
 801e0de:	dc96      	bgt.n	801e00e <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e0e0:	b007      	add	sp, #28
 801e0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0e6:	d08f      	beq.n	801e008 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e0e8:	1e5d      	subs	r5, r3, #1
 801e0ea:	fb06 2905 	mla	r9, r6, r5, r2
 801e0ee:	ea5f 4929 	movs.w	r9, r9, asr #16
 801e0f2:	9504      	str	r5, [sp, #16]
 801e0f4:	d488      	bmi.n	801e008 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e0f6:	45a1      	cmp	r9, r4
 801e0f8:	da2d      	bge.n	801e156 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801e0fa:	9d04      	ldr	r5, [sp, #16]
 801e0fc:	fb07 1505 	mla	r5, r7, r5, r1
 801e100:	ea5f 4925 	movs.w	r9, r5, asr #16
 801e104:	d427      	bmi.n	801e156 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801e106:	9d02      	ldr	r5, [sp, #8]
 801e108:	454d      	cmp	r5, r9
 801e10a:	dd24      	ble.n	801e156 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	f77f af7b 	ble.w	801e008 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e112:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e116:	18c5      	adds	r5, r0, r3
 801e118:	f8dd e014 	ldr.w	lr, [sp, #20]
 801e11c:	3003      	adds	r0, #3
 801e11e:	e002      	b.n	801e126 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801e120:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 801e124:	3003      	adds	r0, #3
 801e126:	140b      	asrs	r3, r1, #16
 801e128:	fb04 e303 	mla	r3, r4, r3, lr
 801e12c:	1414      	asrs	r4, r2, #16
 801e12e:	5d1b      	ldrb	r3, [r3, r4]
 801e130:	4285      	cmp	r5, r0
 801e132:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e136:	f81b 4003 	ldrb.w	r4, [fp, r3]
 801e13a:	445b      	add	r3, fp
 801e13c:	f800 4c03 	strb.w	r4, [r0, #-3]
 801e140:	785c      	ldrb	r4, [r3, #1]
 801e142:	4439      	add	r1, r7
 801e144:	f800 4c02 	strb.w	r4, [r0, #-2]
 801e148:	789b      	ldrb	r3, [r3, #2]
 801e14a:	4432      	add	r2, r6
 801e14c:	f800 3c01 	strb.w	r3, [r0, #-1]
 801e150:	d1e6      	bne.n	801e120 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e152:	4628      	mov	r0, r5
 801e154:	e758      	b.n	801e008 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e156:	2b00      	cmp	r3, #0
 801e158:	f77f af56 	ble.w	801e008 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e15c:	1415      	asrs	r5, r2, #16
 801e15e:	4604      	mov	r4, r0
 801e160:	9501      	str	r5, [sp, #4]
 801e162:	e793      	b.n	801e08c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>

0801e164 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e168:	b087      	sub	sp, #28
 801e16a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801e16e:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801e172:	e9dd 2c17 	ldrd	r2, ip, [sp, #92]	; 0x5c
 801e176:	684c      	ldr	r4, [r1, #4]
 801e178:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801e17c:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801e180:	fb04 0202 	mla	r2, r4, r2, r0
 801e184:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 801e188:	f8dc 2000 	ldr.w	r2, [ip]
 801e18c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801e190:	9201      	str	r2, [sp, #4]
 801e192:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e196:	6808      	ldr	r0, [r1, #0]
 801e198:	9204      	str	r2, [sp, #16]
 801e19a:	1d22      	adds	r2, r4, #4
 801e19c:	e9dd e111 	ldrd	lr, r1, [sp, #68]	; 0x44
 801e1a0:	9205      	str	r2, [sp, #20]
 801e1a2:	4672      	mov	r2, lr
 801e1a4:	4428      	add	r0, r5
 801e1a6:	9c02      	ldr	r4, [sp, #8]
 801e1a8:	2c00      	cmp	r4, #0
 801e1aa:	dc03      	bgt.n	801e1b4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801e1ac:	9c03      	ldr	r4, [sp, #12]
 801e1ae:	2c00      	cmp	r4, #0
 801e1b0:	f340 80ba 	ble.w	801e328 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801e1b4:	e9dc e802 	ldrd	lr, r8, [ip, #8]
 801e1b8:	2b00      	cmp	r3, #0
 801e1ba:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e1be:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e1c2:	fa0f f48e 	sxth.w	r4, lr
 801e1c6:	fa0f f988 	sxth.w	r9, r8
 801e1ca:	f340 80b0 	ble.w	801e32e <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801e1ce:	1415      	asrs	r5, r2, #16
 801e1d0:	d406      	bmi.n	801e1e0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e1d2:	42a5      	cmp	r5, r4
 801e1d4:	da04      	bge.n	801e1e0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e1d6:	ea5f 4a21 	movs.w	sl, r1, asr #16
 801e1da:	d401      	bmi.n	801e1e0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e1dc:	45ca      	cmp	sl, r9
 801e1de:	db3c      	blt.n	801e25a <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801e1e0:	3b01      	subs	r3, #1
 801e1e2:	4432      	add	r2, r6
 801e1e4:	4439      	add	r1, r7
 801e1e6:	f100 0003 	add.w	r0, r0, #3
 801e1ea:	d1f0      	bne.n	801e1ce <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e1ec:	9b02      	ldr	r3, [sp, #8]
 801e1ee:	2b00      	cmp	r3, #0
 801e1f0:	f340 809a 	ble.w	801e328 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801e1f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e1f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e1fc:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801e200:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e204:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e208:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e20c:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e210:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e214:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e218:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e21c:	ee16 2a90 	vmov	r2, s13
 801e220:	3b01      	subs	r3, #1
 801e222:	9302      	str	r3, [sp, #8]
 801e224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e226:	9c03      	ldr	r4, [sp, #12]
 801e228:	fb92 f6f3 	sdiv	r6, r2, r3
 801e22c:	ee17 2a10 	vmov	r2, s14
 801e230:	eeb0 7a43 	vmov.f32	s14, s6
 801e234:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e238:	ee17 1a10 	vmov	r1, s14
 801e23c:	eeb0 7a62 	vmov.f32	s14, s5
 801e240:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e244:	fb92 f7f3 	sdiv	r7, r2, r3
 801e248:	eeb0 3a67 	vmov.f32	s6, s15
 801e24c:	ee17 2a10 	vmov	r2, s14
 801e250:	eef0 2a46 	vmov.f32	s5, s12
 801e254:	bf08      	it	eq
 801e256:	4623      	moveq	r3, r4
 801e258:	e7a5      	b.n	801e1a6 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801e25a:	f103 3bff 	add.w	fp, r3, #4294967295
 801e25e:	fb0b 2a06 	mla	sl, fp, r6, r2
 801e262:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801e266:	d56c      	bpl.n	801e342 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801e268:	4604      	mov	r4, r0
 801e26a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e26e:	4418      	add	r0, r3
 801e270:	4673      	mov	r3, lr
 801e272:	46b6      	mov	lr, r6
 801e274:	4646      	mov	r6, r8
 801e276:	e002      	b.n	801e27e <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801e278:	1415      	asrs	r5, r2, #16
 801e27a:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801e27e:	2d00      	cmp	r5, #0
 801e280:	4472      	add	r2, lr
 801e282:	db49      	blt.n	801e318 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e284:	429d      	cmp	r5, r3
 801e286:	da47      	bge.n	801e318 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e288:	ea5f 4821 	movs.w	r8, r1, asr #16
 801e28c:	d444      	bmi.n	801e318 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e28e:	45b0      	cmp	r8, r6
 801e290:	b21b      	sxth	r3, r3
 801e292:	da41      	bge.n	801e318 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e294:	9e01      	ldr	r6, [sp, #4]
 801e296:	fb08 6303 	mla	r3, r8, r3, r6
 801e29a:	5d5b      	ldrb	r3, [r3, r5]
 801e29c:	9d05      	ldr	r5, [sp, #20]
 801e29e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801e2a2:	0e1d      	lsrs	r5, r3, #24
 801e2a4:	d038      	beq.n	801e318 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e2a6:	9e04      	ldr	r6, [sp, #16]
 801e2a8:	fa5f f983 	uxtb.w	r9, r3
 801e2ac:	fb06 f605 	mul.w	r6, r6, r5
 801e2b0:	1c75      	adds	r5, r6, #1
 801e2b2:	eb05 2526 	add.w	r5, r5, r6, asr #8
 801e2b6:	122d      	asrs	r5, r5, #8
 801e2b8:	43ee      	mvns	r6, r5
 801e2ba:	b2ad      	uxth	r5, r5
 801e2bc:	fb19 f905 	smulbb	r9, r9, r5
 801e2c0:	f3c3 2807 	ubfx	r8, r3, #8, #8
 801e2c4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e2c8:	f894 a000 	ldrb.w	sl, [r4]
 801e2cc:	fb18 f805 	smulbb	r8, r8, r5
 801e2d0:	fb13 f305 	smulbb	r3, r3, r5
 801e2d4:	b2f5      	uxtb	r5, r6
 801e2d6:	fb0a 9605 	mla	r6, sl, r5, r9
 801e2da:	f894 b001 	ldrb.w	fp, [r4, #1]
 801e2de:	f894 9002 	ldrb.w	r9, [r4, #2]
 801e2e2:	fb0b 8805 	mla	r8, fp, r5, r8
 801e2e6:	fb09 3305 	mla	r3, r9, r5, r3
 801e2ea:	fa1f fa86 	uxth.w	sl, r6
 801e2ee:	fa1f f888 	uxth.w	r8, r8
 801e2f2:	b29b      	uxth	r3, r3
 801e2f4:	f10a 0601 	add.w	r6, sl, #1
 801e2f8:	f108 0501 	add.w	r5, r8, #1
 801e2fc:	f103 0901 	add.w	r9, r3, #1
 801e300:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 801e304:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 801e308:	eb09 2313 	add.w	r3, r9, r3, lsr #8
 801e30c:	1236      	asrs	r6, r6, #8
 801e30e:	122d      	asrs	r5, r5, #8
 801e310:	121b      	asrs	r3, r3, #8
 801e312:	7026      	strb	r6, [r4, #0]
 801e314:	7065      	strb	r5, [r4, #1]
 801e316:	70a3      	strb	r3, [r4, #2]
 801e318:	3403      	adds	r4, #3
 801e31a:	4284      	cmp	r4, r0
 801e31c:	4439      	add	r1, r7
 801e31e:	d1ab      	bne.n	801e278 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e320:	9b02      	ldr	r3, [sp, #8]
 801e322:	2b00      	cmp	r3, #0
 801e324:	f73f af66 	bgt.w	801e1f4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e328:	b007      	add	sp, #28
 801e32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e32e:	f43f af5d 	beq.w	801e1ec <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e332:	f103 3bff 	add.w	fp, r3, #4294967295
 801e336:	fb0b 2a06 	mla	sl, fp, r6, r2
 801e33a:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801e33e:	f53f af55 	bmi.w	801e1ec <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e342:	4554      	cmp	r4, sl
 801e344:	dd64      	ble.n	801e410 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801e346:	fb0b 1b07 	mla	fp, fp, r7, r1
 801e34a:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801e34e:	d45f      	bmi.n	801e410 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801e350:	45cb      	cmp	fp, r9
 801e352:	da5d      	bge.n	801e410 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801e354:	2b00      	cmp	r3, #0
 801e356:	f77f af49 	ble.w	801e1ec <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e35a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e35e:	eb00 0e03 	add.w	lr, r0, r3
 801e362:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801e366:	3003      	adds	r0, #3
 801e368:	e002      	b.n	801e370 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801e36a:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 801e36e:	3003      	adds	r0, #3
 801e370:	9d01      	ldr	r5, [sp, #4]
 801e372:	140b      	asrs	r3, r1, #16
 801e374:	fb04 5303 	mla	r3, r4, r3, r5
 801e378:	1414      	asrs	r4, r2, #16
 801e37a:	5d1b      	ldrb	r3, [r3, r4]
 801e37c:	4432      	add	r2, r6
 801e37e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801e382:	4439      	add	r1, r7
 801e384:	ea5f 6a13 	movs.w	sl, r3, lsr #24
 801e388:	d03e      	beq.n	801e408 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801e38a:	9c04      	ldr	r4, [sp, #16]
 801e38c:	fa5f f983 	uxtb.w	r9, r3
 801e390:	fb04 f40a 	mul.w	r4, r4, sl
 801e394:	f104 0a01 	add.w	sl, r4, #1
 801e398:	eb0a 2a24 	add.w	sl, sl, r4, asr #8
 801e39c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e3a0:	ea6f 040a 	mvn.w	r4, sl
 801e3a4:	fa1f fa8a 	uxth.w	sl, sl
 801e3a8:	fb19 f90a 	smulbb	r9, r9, sl
 801e3ac:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801e3b0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e3b4:	fb15 fb0a 	smulbb	fp, r5, sl
 801e3b8:	fb13 f30a 	smulbb	r3, r3, sl
 801e3bc:	f810 ac03 	ldrb.w	sl, [r0, #-3]
 801e3c0:	b2e4      	uxtb	r4, r4
 801e3c2:	fb0a 9904 	mla	r9, sl, r4, r9
 801e3c6:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 801e3ca:	f810 ac01 	ldrb.w	sl, [r0, #-1]
 801e3ce:	fb05 b504 	mla	r5, r5, r4, fp
 801e3d2:	fb0a 3304 	mla	r3, sl, r4, r3
 801e3d6:	fa1f f989 	uxth.w	r9, r9
 801e3da:	b2ad      	uxth	r5, r5
 801e3dc:	b29b      	uxth	r3, r3
 801e3de:	f109 0b01 	add.w	fp, r9, #1
 801e3e2:	f105 0a01 	add.w	sl, r5, #1
 801e3e6:	1c5c      	adds	r4, r3, #1
 801e3e8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e3ec:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801e3f0:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e3f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e3f8:	122d      	asrs	r5, r5, #8
 801e3fa:	121b      	asrs	r3, r3, #8
 801e3fc:	f800 9c03 	strb.w	r9, [r0, #-3]
 801e400:	f800 5c02 	strb.w	r5, [r0, #-2]
 801e404:	f800 3c01 	strb.w	r3, [r0, #-1]
 801e408:	4586      	cmp	lr, r0
 801e40a:	d1ae      	bne.n	801e36a <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e40c:	4670      	mov	r0, lr
 801e40e:	e6ed      	b.n	801e1ec <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e410:	2b00      	cmp	r3, #0
 801e412:	f77f aeeb 	ble.w	801e1ec <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e416:	4604      	mov	r4, r0
 801e418:	1415      	asrs	r5, r2, #16
 801e41a:	e726      	b.n	801e26a <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>

0801e41c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e41c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801e420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e424:	b087      	sub	sp, #28
 801e426:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801e42a:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801e42e:	e9dd 2b17 	ldrd	r2, fp, [sp, #92]	; 0x5c
 801e432:	684c      	ldr	r4, [r1, #4]
 801e434:	680d      	ldr	r5, [r1, #0]
 801e436:	fb04 0202 	mla	r2, r4, r2, r0
 801e43a:	e9dd 8913 	ldrd	r8, r9, [sp, #76]	; 0x4c
 801e43e:	f8db 4004 	ldr.w	r4, [fp, #4]
 801e442:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801e446:	3404      	adds	r4, #4
 801e448:	f8db 2000 	ldr.w	r2, [fp]
 801e44c:	4428      	add	r0, r5
 801e44e:	9402      	str	r4, [sp, #8]
 801e450:	9201      	str	r2, [sp, #4]
 801e452:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801e456:	9c03      	ldr	r4, [sp, #12]
 801e458:	2c00      	cmp	r4, #0
 801e45a:	dc03      	bgt.n	801e464 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e45c:	9c04      	ldr	r4, [sp, #16]
 801e45e:	2c00      	cmp	r4, #0
 801e460:	f340 80b7 	ble.w	801e5d2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801e464:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801e468:	2b00      	cmp	r3, #0
 801e46a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e46e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e472:	b234      	sxth	r4, r6
 801e474:	fa0f fc87 	sxth.w	ip, r7
 801e478:	f340 80ae 	ble.w	801e5d8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801e47c:	1415      	asrs	r5, r2, #16
 801e47e:	d406      	bmi.n	801e48e <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e480:	42a5      	cmp	r5, r4
 801e482:	da04      	bge.n	801e48e <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e484:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801e488:	d401      	bmi.n	801e48e <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e48a:	45e6      	cmp	lr, ip
 801e48c:	db3c      	blt.n	801e508 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xec>
 801e48e:	3b01      	subs	r3, #1
 801e490:	4442      	add	r2, r8
 801e492:	4449      	add	r1, r9
 801e494:	f100 0003 	add.w	r0, r0, #3
 801e498:	d1f0      	bne.n	801e47c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e49a:	9b03      	ldr	r3, [sp, #12]
 801e49c:	2b00      	cmp	r3, #0
 801e49e:	f340 8098 	ble.w	801e5d2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801e4a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e4a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e4aa:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801e4ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e4b2:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e4b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e4ba:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e4be:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e4c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e4c6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e4ca:	ee16 2a90 	vmov	r2, s13
 801e4ce:	3b01      	subs	r3, #1
 801e4d0:	9303      	str	r3, [sp, #12]
 801e4d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e4d4:	9c04      	ldr	r4, [sp, #16]
 801e4d6:	fb92 f8f3 	sdiv	r8, r2, r3
 801e4da:	ee17 2a10 	vmov	r2, s14
 801e4de:	eeb0 7a43 	vmov.f32	s14, s6
 801e4e2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e4e6:	ee17 1a10 	vmov	r1, s14
 801e4ea:	eeb0 7a62 	vmov.f32	s14, s5
 801e4ee:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e4f2:	fb92 f9f3 	sdiv	r9, r2, r3
 801e4f6:	eeb0 3a67 	vmov.f32	s6, s15
 801e4fa:	ee17 2a10 	vmov	r2, s14
 801e4fe:	eef0 2a46 	vmov.f32	s5, s12
 801e502:	bf08      	it	eq
 801e504:	4623      	moveq	r3, r4
 801e506:	e7a6      	b.n	801e456 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e508:	f103 3aff 	add.w	sl, r3, #4294967295
 801e50c:	fb0a 2e08 	mla	lr, sl, r8, r2
 801e510:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801e514:	d56a      	bpl.n	801e5ec <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801e516:	4604      	mov	r4, r0
 801e518:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e51c:	4418      	add	r0, r3
 801e51e:	e002      	b.n	801e526 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801e520:	1415      	asrs	r5, r2, #16
 801e522:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801e526:	2d00      	cmp	r5, #0
 801e528:	db4a      	blt.n	801e5c0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e52a:	42b5      	cmp	r5, r6
 801e52c:	da48      	bge.n	801e5c0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e52e:	140b      	asrs	r3, r1, #16
 801e530:	d446      	bmi.n	801e5c0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e532:	42bb      	cmp	r3, r7
 801e534:	b236      	sxth	r6, r6
 801e536:	da43      	bge.n	801e5c0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e538:	9f01      	ldr	r7, [sp, #4]
 801e53a:	fb03 7606 	mla	r6, r3, r6, r7
 801e53e:	5d73      	ldrb	r3, [r6, r5]
 801e540:	9d02      	ldr	r5, [sp, #8]
 801e542:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801e546:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e54a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e54e:	f000 80be 	beq.w	801e6ce <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 801e552:	b2df      	uxtb	r7, r3
 801e554:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801e558:	f3c3 4a07 	ubfx	sl, r3, #16, #8
 801e55c:	fa5f f38c 	uxtb.w	r3, ip
 801e560:	b29d      	uxth	r5, r3
 801e562:	f1bc 0f00 	cmp.w	ip, #0
 801e566:	d02b      	beq.n	801e5c0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e568:	43db      	mvns	r3, r3
 801e56a:	b2db      	uxtb	r3, r3
 801e56c:	9305      	str	r3, [sp, #20]
 801e56e:	f894 e001 	ldrb.w	lr, [r4, #1]
 801e572:	fb17 f305 	smulbb	r3, r7, r5
 801e576:	9f05      	ldr	r7, [sp, #20]
 801e578:	f894 c002 	ldrb.w	ip, [r4, #2]
 801e57c:	fb1e fe07 	smulbb	lr, lr, r7
 801e580:	fb1c fc07 	smulbb	ip, ip, r7
 801e584:	fb06 ee05 	mla	lr, r6, r5, lr
 801e588:	7827      	ldrb	r7, [r4, #0]
 801e58a:	9e05      	ldr	r6, [sp, #20]
 801e58c:	fb0a c505 	mla	r5, sl, r5, ip
 801e590:	fb07 3706 	mla	r7, r7, r6, r3
 801e594:	b2ab      	uxth	r3, r5
 801e596:	b2bf      	uxth	r7, r7
 801e598:	fa1f f68e 	uxth.w	r6, lr
 801e59c:	1c7d      	adds	r5, r7, #1
 801e59e:	f106 0e01 	add.w	lr, r6, #1
 801e5a2:	f103 0c01 	add.w	ip, r3, #1
 801e5a6:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801e5aa:	eb0c 2613 	add.w	r6, ip, r3, lsr #8
 801e5ae:	eb05 2317 	add.w	r3, r5, r7, lsr #8
 801e5b2:	121b      	asrs	r3, r3, #8
 801e5b4:	ea4f 272e 	mov.w	r7, lr, asr #8
 801e5b8:	1235      	asrs	r5, r6, #8
 801e5ba:	7067      	strb	r7, [r4, #1]
 801e5bc:	70a5      	strb	r5, [r4, #2]
 801e5be:	7023      	strb	r3, [r4, #0]
 801e5c0:	3403      	adds	r4, #3
 801e5c2:	4284      	cmp	r4, r0
 801e5c4:	4442      	add	r2, r8
 801e5c6:	4449      	add	r1, r9
 801e5c8:	d1aa      	bne.n	801e520 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e5ca:	9b03      	ldr	r3, [sp, #12]
 801e5cc:	2b00      	cmp	r3, #0
 801e5ce:	f73f af68 	bgt.w	801e4a2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e5d2:	b007      	add	sp, #28
 801e5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5d8:	f43f af5f 	beq.w	801e49a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e5dc:	f103 3aff 	add.w	sl, r3, #4294967295
 801e5e0:	fb0a 2e08 	mla	lr, sl, r8, r2
 801e5e4:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801e5e8:	f53f af57 	bmi.w	801e49a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e5ec:	4574      	cmp	r4, lr
 801e5ee:	dd68      	ble.n	801e6c2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e5f0:	fb0a 1a09 	mla	sl, sl, r9, r1
 801e5f4:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801e5f8:	d463      	bmi.n	801e6c2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e5fa:	45e2      	cmp	sl, ip
 801e5fc:	da61      	bge.n	801e6c2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	f77f af4b 	ble.w	801e49a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e604:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e608:	eb00 0e03 	add.w	lr, r0, r3
 801e60c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801e610:	3003      	adds	r0, #3
 801e612:	e03b      	b.n	801e68c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 801e614:	b2fc      	uxtb	r4, r7
 801e616:	fa5f fc83 	uxtb.w	ip, r3
 801e61a:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801e61e:	b2a5      	uxth	r5, r4
 801e620:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e624:	b357      	cbz	r7, 801e67c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801e626:	43e4      	mvns	r4, r4
 801e628:	f810 ac02 	ldrb.w	sl, [r0, #-2]
 801e62c:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801e630:	b2e4      	uxtb	r4, r4
 801e632:	fb1c fc05 	smulbb	ip, ip, r5
 801e636:	fb18 f804 	smulbb	r8, r8, r4
 801e63a:	fb1a fa04 	smulbb	sl, sl, r4
 801e63e:	f810 7c03 	ldrb.w	r7, [r0, #-3]
 801e642:	fb03 8305 	mla	r3, r3, r5, r8
 801e646:	fb06 a605 	mla	r6, r6, r5, sl
 801e64a:	fb07 c404 	mla	r4, r7, r4, ip
 801e64e:	b2b6      	uxth	r6, r6
 801e650:	b2a4      	uxth	r4, r4
 801e652:	b29b      	uxth	r3, r3
 801e654:	f106 0c01 	add.w	ip, r6, #1
 801e658:	f103 0801 	add.w	r8, r3, #1
 801e65c:	1c65      	adds	r5, r4, #1
 801e65e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e662:	eb08 2313 	add.w	r3, r8, r3, lsr #8
 801e666:	eb05 2514 	add.w	r5, r5, r4, lsr #8
 801e66a:	1236      	asrs	r6, r6, #8
 801e66c:	121b      	asrs	r3, r3, #8
 801e66e:	122d      	asrs	r5, r5, #8
 801e670:	f800 6c02 	strb.w	r6, [r0, #-2]
 801e674:	f800 3c01 	strb.w	r3, [r0, #-1]
 801e678:	f800 5c03 	strb.w	r5, [r0, #-3]
 801e67c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e67e:	4586      	cmp	lr, r0
 801e680:	441a      	add	r2, r3
 801e682:	4449      	add	r1, r9
 801e684:	d01b      	beq.n	801e6be <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e686:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801e68a:	3003      	adds	r0, #3
 801e68c:	9d01      	ldr	r5, [sp, #4]
 801e68e:	140b      	asrs	r3, r1, #16
 801e690:	fb04 5303 	mla	r3, r4, r3, r5
 801e694:	1414      	asrs	r4, r2, #16
 801e696:	5d1b      	ldrb	r3, [r3, r4]
 801e698:	9c02      	ldr	r4, [sp, #8]
 801e69a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801e69e:	0e1f      	lsrs	r7, r3, #24
 801e6a0:	2fff      	cmp	r7, #255	; 0xff
 801e6a2:	d1b7      	bne.n	801e614 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801e6a4:	0a1d      	lsrs	r5, r3, #8
 801e6a6:	0c1c      	lsrs	r4, r3, #16
 801e6a8:	f800 3c03 	strb.w	r3, [r0, #-3]
 801e6ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e6ae:	4586      	cmp	lr, r0
 801e6b0:	f800 5c02 	strb.w	r5, [r0, #-2]
 801e6b4:	f800 4c01 	strb.w	r4, [r0, #-1]
 801e6b8:	441a      	add	r2, r3
 801e6ba:	4449      	add	r1, r9
 801e6bc:	d1e3      	bne.n	801e686 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e6be:	4670      	mov	r0, lr
 801e6c0:	e6eb      	b.n	801e49a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e6c2:	2b00      	cmp	r3, #0
 801e6c4:	f77f aee9 	ble.w	801e49a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e6c8:	4604      	mov	r4, r0
 801e6ca:	1415      	asrs	r5, r2, #16
 801e6cc:	e724      	b.n	801e518 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801e6ce:	0a1e      	lsrs	r6, r3, #8
 801e6d0:	0c1d      	lsrs	r5, r3, #16
 801e6d2:	7023      	strb	r3, [r4, #0]
 801e6d4:	7066      	strb	r6, [r4, #1]
 801e6d6:	70a5      	strb	r5, [r4, #2]
 801e6d8:	e772      	b.n	801e5c0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e6da:	bf00      	nop

0801e6dc <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6e0:	b089      	sub	sp, #36	; 0x24
 801e6e2:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 801e6e6:	9101      	str	r1, [sp, #4]
 801e6e8:	ea6f 0a00 	mvn.w	sl, r0
 801e6ec:	e9dd e815 	ldrd	lr, r8, [sp, #84]	; 0x54
 801e6f0:	9919      	ldr	r1, [sp, #100]	; 0x64
 801e6f2:	9202      	str	r2, [sp, #8]
 801e6f4:	e9dd 5217 	ldrd	r5, r2, [sp, #92]	; 0x5c
 801e6f8:	686c      	ldr	r4, [r5, #4]
 801e6fa:	682f      	ldr	r7, [r5, #0]
 801e6fc:	fb04 2401 	mla	r4, r4, r1, r2
 801e700:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e702:	b280      	uxth	r0, r0
 801e704:	e9d2 2100 	ldrd	r2, r1, [r2]
 801e708:	3104      	adds	r1, #4
 801e70a:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 801e70e:	fa5f fa8a 	uxtb.w	sl, sl
 801e712:	9007      	str	r0, [sp, #28]
 801e714:	9105      	str	r1, [sp, #20]
 801e716:	9200      	str	r2, [sp, #0]
 801e718:	e9dd 2513 	ldrd	r2, r5, [sp, #76]	; 0x4c
 801e71c:	9901      	ldr	r1, [sp, #4]
 801e71e:	2900      	cmp	r1, #0
 801e720:	dc03      	bgt.n	801e72a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801e722:	9902      	ldr	r1, [sp, #8]
 801e724:	2900      	cmp	r1, #0
 801e726:	f340 80b6 	ble.w	801e896 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e72a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	e9d1 4602 	ldrd	r4, r6, [r1, #8]
 801e732:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e736:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 801e73a:	b221      	sxth	r1, r4
 801e73c:	fa0f fc86 	sxth.w	ip, r6
 801e740:	f340 80ac 	ble.w	801e89c <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801e744:	1410      	asrs	r0, r2, #16
 801e746:	d406      	bmi.n	801e756 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e748:	4288      	cmp	r0, r1
 801e74a:	da04      	bge.n	801e756 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e74c:	ea5f 4925 	movs.w	r9, r5, asr #16
 801e750:	d401      	bmi.n	801e756 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e752:	45e1      	cmp	r9, ip
 801e754:	db3e      	blt.n	801e7d4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801e756:	3b01      	subs	r3, #1
 801e758:	4472      	add	r2, lr
 801e75a:	4445      	add	r5, r8
 801e75c:	f107 0704 	add.w	r7, r7, #4
 801e760:	d1f0      	bne.n	801e744 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e762:	9b01      	ldr	r3, [sp, #4]
 801e764:	2b00      	cmp	r3, #0
 801e766:	f340 8096 	ble.w	801e896 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e76a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e76e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e772:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e776:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e77a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e77e:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e782:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e786:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e78a:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e78e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e792:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e796:	ee16 2a90 	vmov	r2, s13
 801e79a:	3b01      	subs	r3, #1
 801e79c:	9301      	str	r3, [sp, #4]
 801e79e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e7a0:	9902      	ldr	r1, [sp, #8]
 801e7a2:	fb92 fef3 	sdiv	lr, r2, r3
 801e7a6:	ee17 2a10 	vmov	r2, s14
 801e7aa:	eeb0 7a43 	vmov.f32	s14, s6
 801e7ae:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e7b2:	ee17 5a10 	vmov	r5, s14
 801e7b6:	eeb0 7a62 	vmov.f32	s14, s5
 801e7ba:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e7be:	fb92 f8f3 	sdiv	r8, r2, r3
 801e7c2:	eeb0 3a67 	vmov.f32	s6, s15
 801e7c6:	ee17 2a10 	vmov	r2, s14
 801e7ca:	eef0 2a46 	vmov.f32	s5, s12
 801e7ce:	bf08      	it	eq
 801e7d0:	460b      	moveq	r3, r1
 801e7d2:	e7a3      	b.n	801e71c <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e7d4:	f103 39ff 	add.w	r9, r3, #4294967295
 801e7d8:	fb09 2b0e 	mla	fp, r9, lr, r2
 801e7dc:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801e7e0:	d566      	bpl.n	801e8b0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e7e2:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801e7e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e7e8:	e002      	b.n	801e7f0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e7ea:	1410      	asrs	r0, r2, #16
 801e7ec:	e9d1 4602 	ldrd	r4, r6, [r1, #8]
 801e7f0:	2800      	cmp	r0, #0
 801e7f2:	f109 39ff 	add.w	r9, r9, #4294967295
 801e7f6:	4472      	add	r2, lr
 801e7f8:	db3f      	blt.n	801e87a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e7fa:	42a0      	cmp	r0, r4
 801e7fc:	da3d      	bge.n	801e87a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e7fe:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801e802:	d43a      	bmi.n	801e87a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e804:	45b4      	cmp	ip, r6
 801e806:	da38      	bge.n	801e87a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e808:	9e00      	ldr	r6, [sp, #0]
 801e80a:	b224      	sxth	r4, r4
 801e80c:	fb0c 6404 	mla	r4, ip, r4, r6
 801e810:	f814 b000 	ldrb.w	fp, [r4, r0]
 801e814:	7838      	ldrb	r0, [r7, #0]
 801e816:	9c05      	ldr	r4, [sp, #20]
 801e818:	fb10 f30a 	smulbb	r3, r0, sl
 801e81c:	9306      	str	r3, [sp, #24]
 801e81e:	9b07      	ldr	r3, [sp, #28]
 801e820:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801e824:	4618      	mov	r0, r3
 801e826:	eb04 060b 	add.w	r6, r4, fp
 801e82a:	78b4      	ldrb	r4, [r6, #2]
 801e82c:	7876      	ldrb	r6, [r6, #1]
 801e82e:	fb14 fc03 	smulbb	ip, r4, r3
 801e832:	9c05      	ldr	r4, [sp, #20]
 801e834:	fb16 f603 	smulbb	r6, r6, r3
 801e838:	f814 400b 	ldrb.w	r4, [r4, fp]
 801e83c:	9b06      	ldr	r3, [sp, #24]
 801e83e:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e842:	fb04 3000 	mla	r0, r4, r0, r3
 801e846:	78bc      	ldrb	r4, [r7, #2]
 801e848:	fb0b 660a 	mla	r6, fp, sl, r6
 801e84c:	fb04 c40a 	mla	r4, r4, sl, ip
 801e850:	b2b6      	uxth	r6, r6
 801e852:	b280      	uxth	r0, r0
 801e854:	b2a4      	uxth	r4, r4
 801e856:	f106 0c01 	add.w	ip, r6, #1
 801e85a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e85e:	f104 0b01 	add.w	fp, r4, #1
 801e862:	f100 0c01 	add.w	ip, r0, #1
 801e866:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801e86a:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 801e86e:	1236      	asrs	r6, r6, #8
 801e870:	1224      	asrs	r4, r4, #8
 801e872:	1200      	asrs	r0, r0, #8
 801e874:	707e      	strb	r6, [r7, #1]
 801e876:	70bc      	strb	r4, [r7, #2]
 801e878:	7038      	strb	r0, [r7, #0]
 801e87a:	f1b9 3fff 	cmp.w	r9, #4294967295
 801e87e:	f107 0704 	add.w	r7, r7, #4
 801e882:	4445      	add	r5, r8
 801e884:	d1b1      	bne.n	801e7ea <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801e886:	e9dd b303 	ldrd	fp, r3, [sp, #12]
 801e88a:	eb0b 0783 	add.w	r7, fp, r3, lsl #2
 801e88e:	9b01      	ldr	r3, [sp, #4]
 801e890:	2b00      	cmp	r3, #0
 801e892:	f73f af6a 	bgt.w	801e76a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e896:	b009      	add	sp, #36	; 0x24
 801e898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e89c:	f43f af61 	beq.w	801e762 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e8a0:	f103 39ff 	add.w	r9, r3, #4294967295
 801e8a4:	fb09 2b0e 	mla	fp, r9, lr, r2
 801e8a8:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801e8ac:	f53f af59 	bmi.w	801e762 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e8b0:	4559      	cmp	r1, fp
 801e8b2:	dd57      	ble.n	801e964 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e8b4:	fb09 5008 	mla	r0, r9, r8, r5
 801e8b8:	1400      	asrs	r0, r0, #16
 801e8ba:	d453      	bmi.n	801e964 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e8bc:	4560      	cmp	r0, ip
 801e8be:	da51      	bge.n	801e964 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e8c0:	2b00      	cmp	r3, #0
 801e8c2:	f77f af4e 	ble.w	801e762 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e8c6:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801e8ca:	f107 0c04 	add.w	ip, r7, #4
 801e8ce:	f8dd b014 	ldr.w	fp, [sp, #20]
 801e8d2:	460b      	mov	r3, r1
 801e8d4:	9f07      	ldr	r7, [sp, #28]
 801e8d6:	e002      	b.n	801e8de <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801e8d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e8da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801e8de:	9800      	ldr	r0, [sp, #0]
 801e8e0:	1429      	asrs	r1, r5, #16
 801e8e2:	fb03 0301 	mla	r3, r3, r1, r0
 801e8e6:	1411      	asrs	r1, r2, #16
 801e8e8:	5c5e      	ldrb	r6, [r3, r1]
 801e8ea:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801e8ee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e8f2:	eb0b 0006 	add.w	r0, fp, r6
 801e8f6:	7881      	ldrb	r1, [r0, #2]
 801e8f8:	7840      	ldrb	r0, [r0, #1]
 801e8fa:	fb13 f30a 	smulbb	r3, r3, sl
 801e8fe:	fb10 f007 	smulbb	r0, r0, r7
 801e902:	fb11 f407 	smulbb	r4, r1, r7
 801e906:	f81b 1006 	ldrb.w	r1, [fp, r6]
 801e90a:	f81c 6c03 	ldrb.w	r6, [ip, #-3]
 801e90e:	fb01 3307 	mla	r3, r1, r7, r3
 801e912:	f81c 1c02 	ldrb.w	r1, [ip, #-2]
 801e916:	fb06 000a 	mla	r0, r6, sl, r0
 801e91a:	fb01 410a 	mla	r1, r1, sl, r4
 801e91e:	b280      	uxth	r0, r0
 801e920:	b29b      	uxth	r3, r3
 801e922:	b289      	uxth	r1, r1
 801e924:	1c44      	adds	r4, r0, #1
 801e926:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801e92a:	1c4e      	adds	r6, r1, #1
 801e92c:	1c5c      	adds	r4, r3, #1
 801e92e:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801e932:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e936:	f109 39ff 	add.w	r9, r9, #4294967295
 801e93a:	1200      	asrs	r0, r0, #8
 801e93c:	1209      	asrs	r1, r1, #8
 801e93e:	121b      	asrs	r3, r3, #8
 801e940:	f1b9 3fff 	cmp.w	r9, #4294967295
 801e944:	f80c 0c03 	strb.w	r0, [ip, #-3]
 801e948:	f80c 1c02 	strb.w	r1, [ip, #-2]
 801e94c:	f80c 3c04 	strb.w	r3, [ip, #-4]
 801e950:	4445      	add	r5, r8
 801e952:	4472      	add	r2, lr
 801e954:	f10c 0c04 	add.w	ip, ip, #4
 801e958:	d1be      	bne.n	801e8d8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801e95a:	e9dd 7303 	ldrd	r7, r3, [sp, #12]
 801e95e:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 801e962:	e6fe      	b.n	801e762 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e964:	2b00      	cmp	r3, #0
 801e966:	f77f aefc 	ble.w	801e762 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e96a:	1410      	asrs	r0, r2, #16
 801e96c:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801e970:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e972:	e73d      	b.n	801e7f0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>

0801e974 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e978:	468a      	mov	sl, r1
 801e97a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801e97e:	46d1      	mov	r9, sl
 801e980:	b087      	sub	sp, #28
 801e982:	e9dd 1415 	ldrd	r1, r4, [sp, #84]	; 0x54
 801e986:	684d      	ldr	r5, [r1, #4]
 801e988:	9203      	str	r2, [sp, #12]
 801e98a:	e9dd 2e17 	ldrd	r2, lr, [sp, #92]	; 0x5c
 801e98e:	fb05 4402 	mla	r4, r5, r2, r4
 801e992:	e9de 2000 	ldrd	r2, r0, [lr]
 801e996:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801e99a:	680d      	ldr	r5, [r1, #0]
 801e99c:	f100 0b04 	add.w	fp, r0, #4
 801e9a0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801e9a4:	9205      	str	r2, [sp, #20]
 801e9a6:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801e9aa:	f1b9 0f00 	cmp.w	r9, #0
 801e9ae:	dc03      	bgt.n	801e9b8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e9b0:	9803      	ldr	r0, [sp, #12]
 801e9b2:	2800      	cmp	r0, #0
 801e9b4:	f340 8091 	ble.w	801eada <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801e9b8:	e9de 8a02 	ldrd	r8, sl, [lr, #8]
 801e9bc:	2b00      	cmp	r3, #0
 801e9be:	fa0f f088 	sxth.w	r0, r8
 801e9c2:	fa0f f48a 	sxth.w	r4, sl
 801e9c6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e9ca:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e9ce:	9001      	str	r0, [sp, #4]
 801e9d0:	9402      	str	r4, [sp, #8]
 801e9d2:	f340 8085 	ble.w	801eae0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801e9d6:	1414      	asrs	r4, r2, #16
 801e9d8:	d408      	bmi.n	801e9ec <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e9da:	9801      	ldr	r0, [sp, #4]
 801e9dc:	4284      	cmp	r4, r0
 801e9de:	da05      	bge.n	801e9ec <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e9e0:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801e9e4:	d402      	bmi.n	801e9ec <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e9e6:	9802      	ldr	r0, [sp, #8]
 801e9e8:	4584      	cmp	ip, r0
 801e9ea:	db3b      	blt.n	801ea64 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801e9ec:	3b01      	subs	r3, #1
 801e9ee:	4432      	add	r2, r6
 801e9f0:	4439      	add	r1, r7
 801e9f2:	f105 0504 	add.w	r5, r5, #4
 801e9f6:	d1ee      	bne.n	801e9d6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e9f8:	f1b9 0f00 	cmp.w	r9, #0
 801e9fc:	dd6d      	ble.n	801eada <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801e9fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ea02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ea06:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801ea0a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ea0e:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801ea12:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ea16:	ee76 6a62 	vsub.f32	s13, s12, s5
 801ea1a:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801ea1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ea22:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ea26:	ee16 2a90 	vmov	r2, s13
 801ea2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea2c:	9803      	ldr	r0, [sp, #12]
 801ea2e:	fb92 f6f3 	sdiv	r6, r2, r3
 801ea32:	ee17 2a10 	vmov	r2, s14
 801ea36:	eeb0 7a43 	vmov.f32	s14, s6
 801ea3a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ea3e:	ee17 1a10 	vmov	r1, s14
 801ea42:	eeb0 7a62 	vmov.f32	s14, s5
 801ea46:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ea4a:	f1b9 0901 	subs.w	r9, r9, #1
 801ea4e:	fb92 f7f3 	sdiv	r7, r2, r3
 801ea52:	eeb0 3a67 	vmov.f32	s6, s15
 801ea56:	ee17 2a10 	vmov	r2, s14
 801ea5a:	eef0 2a46 	vmov.f32	s5, s12
 801ea5e:	bf08      	it	eq
 801ea60:	4603      	moveq	r3, r0
 801ea62:	e7a2      	b.n	801e9aa <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ea64:	f103 3cff 	add.w	ip, r3, #4294967295
 801ea68:	9404      	str	r4, [sp, #16]
 801ea6a:	fb06 240c 	mla	r4, r6, ip, r2
 801ea6e:	1424      	asrs	r4, r4, #16
 801ea70:	d578      	bpl.n	801eb64 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ea72:	9613      	str	r6, [sp, #76]	; 0x4c
 801ea74:	2000      	movs	r0, #0
 801ea76:	4646      	mov	r6, r8
 801ea78:	46d4      	mov	ip, sl
 801ea7a:	9c04      	ldr	r4, [sp, #16]
 801ea7c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 801ea80:	e002      	b.n	801ea88 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801ea82:	1414      	asrs	r4, r2, #16
 801ea84:	e9de 6c02 	ldrd	r6, ip, [lr, #8]
 801ea88:	2c00      	cmp	r4, #0
 801ea8a:	4442      	add	r2, r8
 801ea8c:	db1c      	blt.n	801eac8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ea8e:	42b4      	cmp	r4, r6
 801ea90:	da1a      	bge.n	801eac8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ea92:	ea5f 4a21 	movs.w	sl, r1, asr #16
 801ea96:	d417      	bmi.n	801eac8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ea98:	45e2      	cmp	sl, ip
 801ea9a:	da15      	bge.n	801eac8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ea9c:	fa0f fc86 	sxth.w	ip, r6
 801eaa0:	9e05      	ldr	r6, [sp, #20]
 801eaa2:	fb0a 6c0c 	mla	ip, sl, ip, r6
 801eaa6:	f81c 4004 	ldrb.w	r4, [ip, r4]
 801eaaa:	eb05 0680 	add.w	r6, r5, r0, lsl #2
 801eaae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801eab2:	f81b c004 	ldrb.w	ip, [fp, r4]
 801eab6:	445c      	add	r4, fp
 801eab8:	f805 c020 	strb.w	ip, [r5, r0, lsl #2]
 801eabc:	f894 c001 	ldrb.w	ip, [r4, #1]
 801eac0:	f886 c001 	strb.w	ip, [r6, #1]
 801eac4:	78a4      	ldrb	r4, [r4, #2]
 801eac6:	70b4      	strb	r4, [r6, #2]
 801eac8:	3001      	adds	r0, #1
 801eaca:	4283      	cmp	r3, r0
 801eacc:	4439      	add	r1, r7
 801eace:	d1d8      	bne.n	801ea82 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801ead0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801ead4:	f1b9 0f00 	cmp.w	r9, #0
 801ead8:	dc91      	bgt.n	801e9fe <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801eada:	b007      	add	sp, #28
 801eadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eae0:	d08a      	beq.n	801e9f8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eae2:	f103 3cff 	add.w	ip, r3, #4294967295
 801eae6:	fb0c 2406 	mla	r4, ip, r6, r2
 801eaea:	1424      	asrs	r4, r4, #16
 801eaec:	d484      	bmi.n	801e9f8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eaee:	42a0      	cmp	r0, r4
 801eaf0:	dd32      	ble.n	801eb58 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801eaf2:	fb07 140c 	mla	r4, r7, ip, r1
 801eaf6:	1420      	asrs	r0, r4, #16
 801eaf8:	d42e      	bmi.n	801eb58 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801eafa:	9c02      	ldr	r4, [sp, #8]
 801eafc:	4284      	cmp	r4, r0
 801eafe:	dd2b      	ble.n	801eb58 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801eb00:	2b00      	cmp	r3, #0
 801eb02:	f77f af79 	ble.w	801e9f8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eb06:	1d2c      	adds	r4, r5, #4
 801eb08:	f8dd a014 	ldr.w	sl, [sp, #20]
 801eb0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801eb10:	e001      	b.n	801eb16 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801eb12:	f9be 8008 	ldrsh.w	r8, [lr, #8]
 801eb16:	1408      	asrs	r0, r1, #16
 801eb18:	fb08 a000 	mla	r0, r8, r0, sl
 801eb1c:	ea4f 4822 	mov.w	r8, r2, asr #16
 801eb20:	f810 0008 	ldrb.w	r0, [r0, r8]
 801eb24:	f10c 3cff 	add.w	ip, ip, #4294967295
 801eb28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eb2c:	f81b 8000 	ldrb.w	r8, [fp, r0]
 801eb30:	4458      	add	r0, fp
 801eb32:	f804 8c04 	strb.w	r8, [r4, #-4]
 801eb36:	f890 8001 	ldrb.w	r8, [r0, #1]
 801eb3a:	f1bc 3fff 	cmp.w	ip, #4294967295
 801eb3e:	f804 8c03 	strb.w	r8, [r4, #-3]
 801eb42:	7880      	ldrb	r0, [r0, #2]
 801eb44:	4439      	add	r1, r7
 801eb46:	f804 0c02 	strb.w	r0, [r4, #-2]
 801eb4a:	4432      	add	r2, r6
 801eb4c:	f104 0404 	add.w	r4, r4, #4
 801eb50:	d1df      	bne.n	801eb12 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801eb52:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801eb56:	e7bd      	b.n	801ead4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801eb58:	2b00      	cmp	r3, #0
 801eb5a:	f77f af4d 	ble.w	801e9f8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eb5e:	1410      	asrs	r0, r2, #16
 801eb60:	9004      	str	r0, [sp, #16]
 801eb62:	e786      	b.n	801ea72 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfe>
 801eb64:	9801      	ldr	r0, [sp, #4]
 801eb66:	e7c2      	b.n	801eaee <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>

0801eb68 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb68:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801eb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb70:	b08b      	sub	sp, #44	; 0x2c
 801eb72:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801eb76:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
 801eb7a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801eb7c:	6854      	ldr	r4, [r2, #4]
 801eb7e:	6816      	ldr	r6, [r2, #0]
 801eb80:	fb04 1000 	mla	r0, r4, r0, r1
 801eb84:	e9dd 4b17 	ldrd	r4, fp, [sp, #92]	; 0x5c
 801eb88:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801eb8a:	f89d 7074 	ldrb.w	r7, [sp, #116]	; 0x74
 801eb8e:	e9d2 2500 	ldrd	r2, r5, [r2]
 801eb92:	3504      	adds	r5, #4
 801eb94:	9703      	str	r7, [sp, #12]
 801eb96:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 801eb9a:	9507      	str	r5, [sp, #28]
 801eb9c:	9206      	str	r2, [sp, #24]
 801eb9e:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 801eba2:	9d01      	ldr	r5, [sp, #4]
 801eba4:	2d00      	cmp	r5, #0
 801eba6:	dc03      	bgt.n	801ebb0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801eba8:	9d02      	ldr	r5, [sp, #8]
 801ebaa:	2d00      	cmp	r5, #0
 801ebac:	f340 80d5 	ble.w	801ed5a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801ebb0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801ebb2:	2b00      	cmp	r3, #0
 801ebb4:	e9d5 7c02 	ldrd	r7, ip, [r5, #8]
 801ebb8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ebbc:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801ebc0:	b23d      	sxth	r5, r7
 801ebc2:	fa0f fe8c 	sxth.w	lr, ip
 801ebc6:	f340 80cb 	ble.w	801ed60 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801ebca:	1416      	asrs	r6, r2, #16
 801ebcc:	d406      	bmi.n	801ebdc <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ebce:	42ae      	cmp	r6, r5
 801ebd0:	da04      	bge.n	801ebdc <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ebd2:	ea5f 4821 	movs.w	r8, r1, asr #16
 801ebd6:	d401      	bmi.n	801ebdc <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ebd8:	45f0      	cmp	r8, lr
 801ebda:	db3c      	blt.n	801ec56 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 801ebdc:	3b01      	subs	r3, #1
 801ebde:	4422      	add	r2, r4
 801ebe0:	4459      	add	r1, fp
 801ebe2:	f100 0004 	add.w	r0, r0, #4
 801ebe6:	d1f0      	bne.n	801ebca <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ebe8:	9b01      	ldr	r3, [sp, #4]
 801ebea:	2b00      	cmp	r3, #0
 801ebec:	f340 80b5 	ble.w	801ed5a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801ebf0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ebf4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ebf8:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801ebfc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ec00:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801ec04:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ec08:	ee76 6a62 	vsub.f32	s13, s12, s5
 801ec0c:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801ec10:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ec14:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ec18:	ee16 2a90 	vmov	r2, s13
 801ec1c:	3b01      	subs	r3, #1
 801ec1e:	9301      	str	r3, [sp, #4]
 801ec20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ec22:	9d02      	ldr	r5, [sp, #8]
 801ec24:	fb92 f4f3 	sdiv	r4, r2, r3
 801ec28:	ee17 2a10 	vmov	r2, s14
 801ec2c:	eeb0 7a43 	vmov.f32	s14, s6
 801ec30:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ec34:	ee17 1a10 	vmov	r1, s14
 801ec38:	eeb0 7a62 	vmov.f32	s14, s5
 801ec3c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ec40:	fb92 fbf3 	sdiv	fp, r2, r3
 801ec44:	eeb0 3a67 	vmov.f32	s6, s15
 801ec48:	ee17 2a10 	vmov	r2, s14
 801ec4c:	eef0 2a46 	vmov.f32	s5, s12
 801ec50:	bf08      	it	eq
 801ec52:	462b      	moveq	r3, r5
 801ec54:	e7a5      	b.n	801eba2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ec56:	f103 38ff 	add.w	r8, r3, #4294967295
 801ec5a:	fb08 2904 	mla	r9, r8, r4, r2
 801ec5e:	ea5f 4929 	movs.w	r9, r9, asr #16
 801ec62:	f140 8087 	bpl.w	801ed74 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801ec66:	f1c3 0900 	rsb	r9, r3, #0
 801ec6a:	4698      	mov	r8, r3
 801ec6c:	2500      	movs	r5, #0
 801ec6e:	9004      	str	r0, [sp, #16]
 801ec70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ec72:	e002      	b.n	801ec7a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801ec74:	1416      	asrs	r6, r2, #16
 801ec76:	e9d3 7c02 	ldrd	r7, ip, [r3, #8]
 801ec7a:	2e00      	cmp	r6, #0
 801ec7c:	4422      	add	r2, r4
 801ec7e:	db61      	blt.n	801ed44 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ec80:	42be      	cmp	r6, r7
 801ec82:	da5f      	bge.n	801ed44 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ec84:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801ec88:	d45c      	bmi.n	801ed44 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ec8a:	45e6      	cmp	lr, ip
 801ec8c:	b23f      	sxth	r7, r7
 801ec8e:	da59      	bge.n	801ed44 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ec90:	9806      	ldr	r0, [sp, #24]
 801ec92:	fb0e 0707 	mla	r7, lr, r7, r0
 801ec96:	9807      	ldr	r0, [sp, #28]
 801ec98:	5dbe      	ldrb	r6, [r7, r6]
 801ec9a:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 801ec9e:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
 801eca2:	9804      	ldr	r0, [sp, #16]
 801eca4:	9705      	str	r7, [sp, #20]
 801eca6:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 801ecaa:	0e37      	lsrs	r7, r6, #24
 801ecac:	9008      	str	r0, [sp, #32]
 801ecae:	d049      	beq.n	801ed44 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ecb0:	9803      	ldr	r0, [sp, #12]
 801ecb2:	fa5f fa86 	uxtb.w	sl, r6
 801ecb6:	fb00 f707 	mul.w	r7, r0, r7
 801ecba:	9805      	ldr	r0, [sp, #20]
 801ecbc:	f107 0c01 	add.w	ip, r7, #1
 801ecc0:	eb0c 2c27 	add.w	ip, ip, r7, asr #8
 801ecc4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ecc8:	4686      	mov	lr, r0
 801ecca:	ea6f 070c 	mvn.w	r7, ip
 801ecce:	fa1f fc8c 	uxth.w	ip, ip
 801ecd2:	fb1a fa0c 	smulbb	sl, sl, ip
 801ecd6:	9804      	ldr	r0, [sp, #16]
 801ecd8:	b2ff      	uxtb	r7, r7
 801ecda:	f810 e02e 	ldrb.w	lr, [r0, lr, lsl #2]
 801ecde:	9805      	ldr	r0, [sp, #20]
 801ece0:	fb0e ae07 	mla	lr, lr, r7, sl
 801ece4:	fa1f fe8e 	uxth.w	lr, lr
 801ece8:	f10e 0a01 	add.w	sl, lr, #1
 801ecec:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801ecf0:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 801ecf4:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ecf8:	fb16 f60c 	smulbb	r6, r6, ip
 801ecfc:	9609      	str	r6, [sp, #36]	; 0x24
 801ecfe:	4606      	mov	r6, r0
 801ed00:	9804      	ldr	r0, [sp, #16]
 801ed02:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ed06:	f800 e026 	strb.w	lr, [r0, r6, lsl #2]
 801ed0a:	fb1a fa0c 	smulbb	sl, sl, ip
 801ed0e:	9808      	ldr	r0, [sp, #32]
 801ed10:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ed12:	f890 e002 	ldrb.w	lr, [r0, #2]
 801ed16:	f890 c001 	ldrb.w	ip, [r0, #1]
 801ed1a:	fb0e 6607 	mla	r6, lr, r7, r6
 801ed1e:	fb0c ac07 	mla	ip, ip, r7, sl
 801ed22:	b2b6      	uxth	r6, r6
 801ed24:	fa1f fe8c 	uxth.w	lr, ip
 801ed28:	1c77      	adds	r7, r6, #1
 801ed2a:	f10e 0c01 	add.w	ip, lr, #1
 801ed2e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ed32:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801ed36:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ed3a:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801ed3e:	7047      	strb	r7, [r0, #1]
 801ed40:	f880 c002 	strb.w	ip, [r0, #2]
 801ed44:	3d01      	subs	r5, #1
 801ed46:	45a9      	cmp	r9, r5
 801ed48:	4459      	add	r1, fp
 801ed4a:	d193      	bne.n	801ec74 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ed4c:	9b01      	ldr	r3, [sp, #4]
 801ed4e:	9804      	ldr	r0, [sp, #16]
 801ed50:	2b00      	cmp	r3, #0
 801ed52:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801ed56:	f73f af4b 	bgt.w	801ebf0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801ed5a:	b00b      	add	sp, #44	; 0x2c
 801ed5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed60:	f43f af42 	beq.w	801ebe8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ed64:	f103 38ff 	add.w	r8, r3, #4294967295
 801ed68:	fb08 2904 	mla	r9, r8, r4, r2
 801ed6c:	ea5f 4929 	movs.w	r9, r9, asr #16
 801ed70:	f53f af3a 	bmi.w	801ebe8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ed74:	454d      	cmp	r5, r9
 801ed76:	dd68      	ble.n	801ee4a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801ed78:	fb08 160b 	mla	r6, r8, fp, r1
 801ed7c:	1436      	asrs	r6, r6, #16
 801ed7e:	d464      	bmi.n	801ee4a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801ed80:	4576      	cmp	r6, lr
 801ed82:	da62      	bge.n	801ee4a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801ed84:	2b00      	cmp	r3, #0
 801ed86:	f77f af2f 	ble.w	801ebe8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ed8a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 801ed8e:	f100 0e04 	add.w	lr, r0, #4
 801ed92:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801ed96:	e002      	b.n	801ed9e <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801ed98:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ed9a:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 801ed9e:	140b      	asrs	r3, r1, #16
 801eda0:	fb05 6303 	mla	r3, r5, r3, r6
 801eda4:	1410      	asrs	r0, r2, #16
 801eda6:	5c1b      	ldrb	r3, [r3, r0]
 801eda8:	f108 38ff 	add.w	r8, r8, #4294967295
 801edac:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801edb0:	4422      	add	r2, r4
 801edb2:	0e18      	lsrs	r0, r3, #24
 801edb4:	4459      	add	r1, fp
 801edb6:	d03e      	beq.n	801ee36 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 801edb8:	9d03      	ldr	r5, [sp, #12]
 801edba:	fa5f fc83 	uxtb.w	ip, r3
 801edbe:	fb05 f000 	mul.w	r0, r5, r0
 801edc2:	f100 0901 	add.w	r9, r0, #1
 801edc6:	eb09 2920 	add.w	r9, r9, r0, asr #8
 801edca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801edce:	ea6f 0009 	mvn.w	r0, r9
 801edd2:	fa1f f989 	uxth.w	r9, r9
 801edd6:	fb1c fc09 	smulbb	ip, ip, r9
 801edda:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801edde:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801ede2:	fb15 fa09 	smulbb	sl, r5, r9
 801ede6:	fb13 f309 	smulbb	r3, r3, r9
 801edea:	f81e 9c04 	ldrb.w	r9, [lr, #-4]
 801edee:	b2c0      	uxtb	r0, r0
 801edf0:	fb09 cc00 	mla	ip, r9, r0, ip
 801edf4:	f81e 5c03 	ldrb.w	r5, [lr, #-3]
 801edf8:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 801edfc:	fb05 a500 	mla	r5, r5, r0, sl
 801ee00:	fb09 3300 	mla	r3, r9, r0, r3
 801ee04:	fa1f fc8c 	uxth.w	ip, ip
 801ee08:	b2ad      	uxth	r5, r5
 801ee0a:	b29b      	uxth	r3, r3
 801ee0c:	f10c 0a01 	add.w	sl, ip, #1
 801ee10:	f105 0901 	add.w	r9, r5, #1
 801ee14:	1c58      	adds	r0, r3, #1
 801ee16:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801ee1a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801ee1e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801ee22:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ee26:	122d      	asrs	r5, r5, #8
 801ee28:	121b      	asrs	r3, r3, #8
 801ee2a:	f80e cc04 	strb.w	ip, [lr, #-4]
 801ee2e:	f80e 5c03 	strb.w	r5, [lr, #-3]
 801ee32:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ee36:	f1b8 3fff 	cmp.w	r8, #4294967295
 801ee3a:	f10e 0e04 	add.w	lr, lr, #4
 801ee3e:	d1ab      	bne.n	801ed98 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801ee40:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 801ee44:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801ee48:	e6ce      	b.n	801ebe8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ee4a:	2b00      	cmp	r3, #0
 801ee4c:	f77f aecc 	ble.w	801ebe8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ee50:	1416      	asrs	r6, r2, #16
 801ee52:	e708      	b.n	801ec66 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfe>

0801ee54 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ee54:	4770      	bx	lr
 801ee56:	bf00      	nop

0801ee58 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ee58:	4770      	bx	lr
 801ee5a:	bf00      	nop

0801ee5c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ee5c:	4770      	bx	lr
 801ee5e:	bf00      	nop

0801ee60 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801ee60:	4770      	bx	lr
 801ee62:	bf00      	nop

0801ee64 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ee64:	4770      	bx	lr
 801ee66:	bf00      	nop

0801ee68 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801ee68:	4770      	bx	lr
 801ee6a:	bf00      	nop

0801ee6c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ee6c:	4770      	bx	lr
 801ee6e:	bf00      	nop

0801ee70 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ee70:	4770      	bx	lr
 801ee72:	bf00      	nop

0801ee74 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801ee74:	4770      	bx	lr
 801ee76:	bf00      	nop

0801ee78 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ee78:	4770      	bx	lr
 801ee7a:	bf00      	nop

0801ee7c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ee7c:	4770      	bx	lr
 801ee7e:	bf00      	nop

0801ee80 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801ee80:	4770      	bx	lr
 801ee82:	bf00      	nop

0801ee84 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ee84:	4770      	bx	lr
 801ee86:	bf00      	nop

0801ee88 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801ee88:	4770      	bx	lr
 801ee8a:	bf00      	nop

0801ee8c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ee8c:	4770      	bx	lr
 801ee8e:	bf00      	nop

0801ee90 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ee90:	4770      	bx	lr
 801ee92:	bf00      	nop

0801ee94 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801ee94:	4770      	bx	lr
 801ee96:	bf00      	nop

0801ee98 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ee98:	4770      	bx	lr
 801ee9a:	bf00      	nop

0801ee9c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ee9c:	4770      	bx	lr
 801ee9e:	bf00      	nop

0801eea0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801eea0:	4770      	bx	lr
 801eea2:	bf00      	nop

0801eea4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801eea4:	4770      	bx	lr
 801eea6:	bf00      	nop

0801eea8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801eea8:	4770      	bx	lr
 801eeaa:	bf00      	nop

0801eeac <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv>:
 801eeac:	b508      	push	{r3, lr}
 801eeae:	4b0d      	ldr	r3, [pc, #52]	; (801eee4 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x38>)
 801eeb0:	881b      	ldrh	r3, [r3, #0]
 801eeb2:	b17b      	cbz	r3, 801eed4 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x28>
 801eeb4:	7a02      	ldrb	r2, [r0, #8]
 801eeb6:	2a02      	cmp	r2, #2
 801eeb8:	d007      	beq.n	801eeca <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x1e>
 801eeba:	2a01      	cmp	r2, #1
 801eebc:	bf0c      	ite	eq
 801eebe:	2003      	moveq	r0, #3
 801eec0:	2002      	movne	r0, #2
 801eec2:	fb13 f000 	smulbb	r0, r3, r0
 801eec6:	b280      	uxth	r0, r0
 801eec8:	bd08      	pop	{r3, pc}
 801eeca:	2004      	movs	r0, #4
 801eecc:	fb13 f000 	smulbb	r0, r3, r0
 801eed0:	b280      	uxth	r0, r0
 801eed2:	bd08      	pop	{r3, pc}
 801eed4:	4b04      	ldr	r3, [pc, #16]	; (801eee8 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x3c>)
 801eed6:	4a05      	ldr	r2, [pc, #20]	; (801eeec <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x40>)
 801eed8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 801eedc:	4804      	ldr	r0, [pc, #16]	; (801eef0 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x44>)
 801eede:	f009 f8e5 	bl	80280ac <__assert_func>
 801eee2:	bf00      	nop
 801eee4:	20198152 	.word	0x20198152
 801eee8:	0802b464 	.word	0x0802b464
 801eeec:	0802c220 	.word	0x0802c220
 801eef0:	0802b4a8 	.word	0x0802b4a8

0801eef4 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv>:
 801eef4:	b530      	push	{r4, r5, lr}
 801eef6:	4b26      	ldr	r3, [pc, #152]	; (801ef90 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x9c>)
 801eef8:	b083      	sub	sp, #12
 801eefa:	681c      	ldr	r4, [r3, #0]
 801eefc:	2c00      	cmp	r4, #0
 801eefe:	d040      	beq.n	801ef82 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x8e>
 801ef00:	4b24      	ldr	r3, [pc, #144]	; (801ef94 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa0>)
 801ef02:	4605      	mov	r5, r0
 801ef04:	781b      	ldrb	r3, [r3, #0]
 801ef06:	b9f3      	cbnz	r3, 801ef46 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x52>
 801ef08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ef0a:	7a2a      	ldrb	r2, [r5, #8]
 801ef0c:	2a01      	cmp	r2, #1
 801ef0e:	d025      	beq.n	801ef5c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x68>
 801ef10:	d30d      	bcc.n	801ef2e <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x3a>
 801ef12:	2a02      	cmp	r2, #2
 801ef14:	d12f      	bne.n	801ef76 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x82>
 801ef16:	4920      	ldr	r1, [pc, #128]	; (801ef98 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801ef18:	4a20      	ldr	r2, [pc, #128]	; (801ef9c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801ef1a:	8809      	ldrh	r1, [r1, #0]
 801ef1c:	8812      	ldrh	r2, [r2, #0]
 801ef1e:	008c      	lsls	r4, r1, #2
 801ef20:	4618      	mov	r0, r3
 801ef22:	9400      	str	r4, [sp, #0]
 801ef24:	2310      	movs	r3, #16
 801ef26:	f7fb ff1d 	bl	801ad64 <nema_bind_dst_tex>
 801ef2a:	b003      	add	sp, #12
 801ef2c:	bd30      	pop	{r4, r5, pc}
 801ef2e:	491a      	ldr	r1, [pc, #104]	; (801ef98 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801ef30:	4a1a      	ldr	r2, [pc, #104]	; (801ef9c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801ef32:	8809      	ldrh	r1, [r1, #0]
 801ef34:	8812      	ldrh	r2, [r2, #0]
 801ef36:	004c      	lsls	r4, r1, #1
 801ef38:	4618      	mov	r0, r3
 801ef3a:	9400      	str	r4, [sp, #0]
 801ef3c:	2304      	movs	r3, #4
 801ef3e:	f7fb ff11 	bl	801ad64 <nema_bind_dst_tex>
 801ef42:	b003      	add	sp, #12
 801ef44:	bd30      	pop	{r4, r5, pc}
 801ef46:	6823      	ldr	r3, [r4, #0]
 801ef48:	4620      	mov	r0, r4
 801ef4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ef4c:	4798      	blx	r3
 801ef4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ef50:	4283      	cmp	r3, r0
 801ef52:	d1da      	bne.n	801ef0a <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x16>
 801ef54:	7a2a      	ldrb	r2, [r5, #8]
 801ef56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ef58:	2a01      	cmp	r2, #1
 801ef5a:	d1d9      	bne.n	801ef10 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x1c>
 801ef5c:	490e      	ldr	r1, [pc, #56]	; (801ef98 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801ef5e:	4a0f      	ldr	r2, [pc, #60]	; (801ef9c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801ef60:	8809      	ldrh	r1, [r1, #0]
 801ef62:	8812      	ldrh	r2, [r2, #0]
 801ef64:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801ef68:	4618      	mov	r0, r3
 801ef6a:	9400      	str	r4, [sp, #0]
 801ef6c:	2339      	movs	r3, #57	; 0x39
 801ef6e:	f7fb fef9 	bl	801ad64 <nema_bind_dst_tex>
 801ef72:	b003      	add	sp, #12
 801ef74:	bd30      	pop	{r4, r5, pc}
 801ef76:	4b0a      	ldr	r3, [pc, #40]	; (801efa0 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xac>)
 801ef78:	4a0a      	ldr	r2, [pc, #40]	; (801efa4 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb0>)
 801ef7a:	2140      	movs	r1, #64	; 0x40
 801ef7c:	480a      	ldr	r0, [pc, #40]	; (801efa8 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb4>)
 801ef7e:	f009 f895 	bl	80280ac <__assert_func>
 801ef82:	4b0a      	ldr	r3, [pc, #40]	; (801efac <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb8>)
 801ef84:	4a0a      	ldr	r2, [pc, #40]	; (801efb0 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xbc>)
 801ef86:	217c      	movs	r1, #124	; 0x7c
 801ef88:	480a      	ldr	r0, [pc, #40]	; (801efb4 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xc0>)
 801ef8a:	f009 f88f 	bl	80280ac <__assert_func>
 801ef8e:	bf00      	nop
 801ef90:	20198388 	.word	0x20198388
 801ef94:	20198156 	.word	0x20198156
 801ef98:	20198152 	.word	0x20198152
 801ef9c:	20198154 	.word	0x20198154
 801efa0:	0802af48 	.word	0x0802af48
 801efa4:	0802ba5c 	.word	0x0802ba5c
 801efa8:	0802af90 	.word	0x0802af90
 801efac:	0802aeec 	.word	0x0802aeec
 801efb0:	0802b6f4 	.word	0x0802b6f4
 801efb4:	0802af14 	.word	0x0802af14

0801efb8 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh>:
 801efb8:	2b00      	cmp	r3, #0
 801efba:	d058      	beq.n	801f06e <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801efbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801efc0:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 801efc4:	b085      	sub	sp, #20
 801efc6:	2c00      	cmp	r4, #0
 801efc8:	dd4e      	ble.n	801f068 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb0>
 801efca:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
 801efce:	2c00      	cmp	r4, #0
 801efd0:	dd4a      	ble.n	801f068 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb0>
 801efd2:	4616      	mov	r6, r2
 801efd4:	4605      	mov	r5, r0
 801efd6:	6808      	ldr	r0, [r1, #0]
 801efd8:	6849      	ldr	r1, [r1, #4]
 801efda:	461c      	mov	r4, r3
 801efdc:	4f27      	ldr	r7, [pc, #156]	; (801f07c <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xc4>)
 801efde:	ab02      	add	r3, sp, #8
 801efe0:	c303      	stmia	r3!, {r0, r1}
 801efe2:	a802      	add	r0, sp, #8
 801efe4:	f7f8 fb9a 	bl	801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801efe8:	6838      	ldr	r0, [r7, #0]
 801efea:	f3c6 4807 	ubfx	r8, r6, #16, #8
 801efee:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801eff2:	b2f6      	uxtb	r6, r6
 801eff4:	2800      	cmp	r0, #0
 801eff6:	d03b      	beq.n	801f070 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb8>
 801eff8:	f7fe f8f6 	bl	801d1e8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801effc:	682b      	ldr	r3, [r5, #0]
 801effe:	4628      	mov	r0, r5
 801f000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f002:	4798      	blx	r3
 801f004:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f008:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801f00c:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 801f010:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 801f014:	f7fb fdf2 	bl	801abfc <nema_set_clip>
 801f018:	f04f 33ff 	mov.w	r3, #4294967295
 801f01c:	2100      	movs	r1, #0
 801f01e:	461a      	mov	r2, r3
 801f020:	4817      	ldr	r0, [pc, #92]	; (801f080 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xc8>)
 801f022:	f7fd fc33 	bl	801c88c <nema_set_blend>
 801f026:	2200      	movs	r2, #0
 801f028:	4623      	mov	r3, r4
 801f02a:	4611      	mov	r1, r2
 801f02c:	4610      	mov	r0, r2
 801f02e:	f7fb fe19 	bl	801ac64 <nema_rgba>
 801f032:	f7fd fff1 	bl	801d018 <nema_set_const_color>
 801f036:	4632      	mov	r2, r6
 801f038:	4649      	mov	r1, r9
 801f03a:	4640      	mov	r0, r8
 801f03c:	23ff      	movs	r3, #255	; 0xff
 801f03e:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 801f042:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 801f046:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801f04a:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801f04e:	f7fb fe09 	bl	801ac64 <nema_rgba>
 801f052:	4643      	mov	r3, r8
 801f054:	9000      	str	r0, [sp, #0]
 801f056:	4632      	mov	r2, r6
 801f058:	4620      	mov	r0, r4
 801f05a:	4629      	mov	r1, r5
 801f05c:	f7fb ff38 	bl	801aed0 <nema_fill_rect>
 801f060:	6838      	ldr	r0, [r7, #0]
 801f062:	b128      	cbz	r0, 801f070 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb8>
 801f064:	f7fe f8e0 	bl	801d228 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801f068:	b005      	add	sp, #20
 801f06a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f06e:	4770      	bx	lr
 801f070:	4b04      	ldr	r3, [pc, #16]	; (801f084 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xcc>)
 801f072:	4a05      	ldr	r2, [pc, #20]	; (801f088 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd0>)
 801f074:	217c      	movs	r1, #124	; 0x7c
 801f076:	4805      	ldr	r0, [pc, #20]	; (801f08c <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd4>)
 801f078:	f009 f818 	bl	80280ac <__assert_func>
 801f07c:	20198388 	.word	0x20198388
 801f080:	08000504 	.word	0x08000504
 801f084:	0802aeec 	.word	0x0802aeec
 801f088:	0802b6f4 	.word	0x0802b6f4
 801f08c:	0802af14 	.word	0x0802af14

0801f090 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801f090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f094:	b085      	sub	sp, #20
 801f096:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 801f09a:	2c00      	cmp	r4, #0
 801f09c:	d063      	beq.n	801f166 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 801f09e:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801f0a2:	2d00      	cmp	r5, #0
 801f0a4:	dd5f      	ble.n	801f166 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 801f0a6:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 801f0aa:	2d00      	cmp	r5, #0
 801f0ac:	dd5b      	ble.n	801f166 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 801f0ae:	460f      	mov	r7, r1
 801f0b0:	4606      	mov	r6, r0
 801f0b2:	6859      	ldr	r1, [r3, #4]
 801f0b4:	6818      	ldr	r0, [r3, #0]
 801f0b6:	f8df 9124 	ldr.w	r9, [pc, #292]	; 801f1dc <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14c>
 801f0ba:	ab02      	add	r3, sp, #8
 801f0bc:	c303      	stmia	r3!, {r0, r1}
 801f0be:	a802      	add	r0, sp, #8
 801f0c0:	4690      	mov	r8, r2
 801f0c2:	f7f8 fb2b 	bl	801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f0c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f0c8:	f8d9 0000 	ldr.w	r0, [r9]
 801f0cc:	f3c3 4a07 	ubfx	sl, r3, #16, #8
 801f0d0:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 801f0d4:	b2dd      	uxtb	r5, r3
 801f0d6:	2800      	cmp	r0, #0
 801f0d8:	d060      	beq.n	801f19c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10c>
 801f0da:	f7fe f885 	bl	801d1e8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801f0de:	7a33      	ldrb	r3, [r6, #8]
 801f0e0:	2b01      	cmp	r3, #1
 801f0e2:	d043      	beq.n	801f16c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xdc>
 801f0e4:	d34e      	bcc.n	801f184 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf4>
 801f0e6:	2b02      	cmp	r3, #2
 801f0e8:	d15e      	bne.n	801f1a8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801f0ea:	4b33      	ldr	r3, [pc, #204]	; (801f1b8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 801f0ec:	4a33      	ldr	r2, [pc, #204]	; (801f1bc <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 801f0ee:	8819      	ldrh	r1, [r3, #0]
 801f0f0:	ea4f 0388 	mov.w	r3, r8, lsl #2
 801f0f4:	8812      	ldrh	r2, [r2, #0]
 801f0f6:	4638      	mov	r0, r7
 801f0f8:	9300      	str	r3, [sp, #0]
 801f0fa:	2310      	movs	r3, #16
 801f0fc:	f7fb fe32 	bl	801ad64 <nema_bind_dst_tex>
 801f100:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f104:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801f108:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 801f10c:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 801f110:	f7fb fd74 	bl	801abfc <nema_set_clip>
 801f114:	f04f 33ff 	mov.w	r3, #4294967295
 801f118:	2100      	movs	r1, #0
 801f11a:	461a      	mov	r2, r3
 801f11c:	4828      	ldr	r0, [pc, #160]	; (801f1c0 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x130>)
 801f11e:	f7fd fbb5 	bl	801c88c <nema_set_blend>
 801f122:	2200      	movs	r2, #0
 801f124:	4623      	mov	r3, r4
 801f126:	4611      	mov	r1, r2
 801f128:	4610      	mov	r0, r2
 801f12a:	f7fb fd9b 	bl	801ac64 <nema_rgba>
 801f12e:	f7fd ff73 	bl	801d018 <nema_set_const_color>
 801f132:	462a      	mov	r2, r5
 801f134:	4659      	mov	r1, fp
 801f136:	23ff      	movs	r3, #255	; 0xff
 801f138:	4650      	mov	r0, sl
 801f13a:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 801f13e:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 801f142:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801f146:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801f14a:	f7fb fd8b 	bl	801ac64 <nema_rgba>
 801f14e:	463b      	mov	r3, r7
 801f150:	9000      	str	r0, [sp, #0]
 801f152:	4632      	mov	r2, r6
 801f154:	4620      	mov	r0, r4
 801f156:	4629      	mov	r1, r5
 801f158:	f7fb feba 	bl	801aed0 <nema_fill_rect>
 801f15c:	f8d9 0000 	ldr.w	r0, [r9]
 801f160:	b1e0      	cbz	r0, 801f19c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10c>
 801f162:	f7fe f861 	bl	801d228 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801f166:	b005      	add	sp, #20
 801f168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f16c:	4b12      	ldr	r3, [pc, #72]	; (801f1b8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 801f16e:	4a13      	ldr	r2, [pc, #76]	; (801f1bc <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 801f170:	8819      	ldrh	r1, [r3, #0]
 801f172:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801f176:	8812      	ldrh	r2, [r2, #0]
 801f178:	4638      	mov	r0, r7
 801f17a:	9300      	str	r3, [sp, #0]
 801f17c:	2339      	movs	r3, #57	; 0x39
 801f17e:	f7fb fdf1 	bl	801ad64 <nema_bind_dst_tex>
 801f182:	e7bd      	b.n	801f100 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801f184:	4b0c      	ldr	r3, [pc, #48]	; (801f1b8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 801f186:	4a0d      	ldr	r2, [pc, #52]	; (801f1bc <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 801f188:	8819      	ldrh	r1, [r3, #0]
 801f18a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801f18e:	8812      	ldrh	r2, [r2, #0]
 801f190:	4638      	mov	r0, r7
 801f192:	9300      	str	r3, [sp, #0]
 801f194:	2304      	movs	r3, #4
 801f196:	f7fb fde5 	bl	801ad64 <nema_bind_dst_tex>
 801f19a:	e7b1      	b.n	801f100 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801f19c:	4b09      	ldr	r3, [pc, #36]	; (801f1c4 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>)
 801f19e:	4a0a      	ldr	r2, [pc, #40]	; (801f1c8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x138>)
 801f1a0:	217c      	movs	r1, #124	; 0x7c
 801f1a2:	480a      	ldr	r0, [pc, #40]	; (801f1cc <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13c>)
 801f1a4:	f008 ff82 	bl	80280ac <__assert_func>
 801f1a8:	4b09      	ldr	r3, [pc, #36]	; (801f1d0 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x140>)
 801f1aa:	4a0a      	ldr	r2, [pc, #40]	; (801f1d4 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>)
 801f1ac:	f44f 71cb 	mov.w	r1, #406	; 0x196
 801f1b0:	4809      	ldr	r0, [pc, #36]	; (801f1d8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>)
 801f1b2:	f008 ff7b 	bl	80280ac <__assert_func>
 801f1b6:	bf00      	nop
 801f1b8:	20198152 	.word	0x20198152
 801f1bc:	20198154 	.word	0x20198154
 801f1c0:	08000504 	.word	0x08000504
 801f1c4:	0802aeec 	.word	0x0802aeec
 801f1c8:	0802b6f4 	.word	0x0802b6f4
 801f1cc:	0802af14 	.word	0x0802af14
 801f1d0:	0802af48 	.word	0x0802af48
 801f1d4:	0802b7b0 	.word	0x0802b7b0
 801f1d8:	0802af90 	.word	0x0802af90
 801f1dc:	20198388 	.word	0x20198388

0801f1e0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801f1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1e4:	b091      	sub	sp, #68	; 0x44
 801f1e6:	f89d 108c 	ldrb.w	r1, [sp, #140]	; 0x8c
 801f1ea:	ac0a      	add	r4, sp, #40	; 0x28
 801f1ec:	e884 000c 	stmia.w	r4, {r2, r3}
 801f1f0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801f1f4:	1e4f      	subs	r7, r1, #1
 801f1f6:	fa5f fc87 	uxtb.w	ip, r7
 801f1fa:	4682      	mov	sl, r0
 801f1fc:	9303      	str	r3, [sp, #12]
 801f1fe:	f89d 0090 	ldrb.w	r0, [sp, #144]	; 0x90
 801f202:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 801f206:	f1bc 0f01 	cmp.w	ip, #1
 801f20a:	9304      	str	r3, [sp, #16]
 801f20c:	f9bd 8068 	ldrsh.w	r8, [sp, #104]	; 0x68
 801f210:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	; 0x6c
 801f214:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f216:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801f21a:	9005      	str	r0, [sp, #20]
 801f21c:	f89d 6094 	ldrb.w	r6, [sp, #148]	; 0x94
 801f220:	d905      	bls.n	801f22e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4e>
 801f222:	2904      	cmp	r1, #4
 801f224:	f000 80d0 	beq.w	801f3c8 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e8>
 801f228:	2908      	cmp	r1, #8
 801f22a:	f040 816f 	bne.w	801f50c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x32c>
 801f22e:	7b53      	ldrb	r3, [r2, #13]
 801f230:	7990      	ldrb	r0, [r2, #6]
 801f232:	0159      	lsls	r1, r3, #5
 801f234:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801f238:	ea50 0901 	orrs.w	r9, r0, r1
 801f23c:	f000 80c1 	beq.w	801f3c2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801f240:	011b      	lsls	r3, r3, #4
 801f242:	79d0      	ldrb	r0, [r2, #7]
 801f244:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801f248:	ea50 0301 	orrs.w	r3, r0, r1
 801f24c:	9306      	str	r3, [sp, #24]
 801f24e:	f000 80b8 	beq.w	801f3c2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801f252:	f992 3009 	ldrsb.w	r3, [r2, #9]
 801f256:	9a03      	ldr	r2, [sp, #12]
 801f258:	b29b      	uxth	r3, r3
 801f25a:	2a00      	cmp	r2, #0
 801f25c:	f040 80be 	bne.w	801f3dc <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fc>
 801f260:	4498      	add	r8, r3
 801f262:	fa0f f888 	sxth.w	r8, r8
 801f266:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f268:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f26c:	4543      	cmp	r3, r8
 801f26e:	dd06      	ble.n	801f27e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x9e>
 801f270:	9a03      	ldr	r2, [sp, #12]
 801f272:	441a      	add	r2, r3
 801f274:	eba2 0508 	sub.w	r5, r2, r8
 801f278:	4698      	mov	r8, r3
 801f27a:	b2ab      	uxth	r3, r5
 801f27c:	9303      	str	r3, [sp, #12]
 801f27e:	f8df c30c 	ldr.w	ip, [pc, #780]	; 801f58c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801f282:	465a      	mov	r2, fp
 801f284:	f89c 5000 	ldrb.w	r5, [ip]
 801f288:	4641      	mov	r1, r8
 801f28a:	4633      	mov	r3, r6
 801f28c:	4620      	mov	r0, r4
 801f28e:	9507      	str	r5, [sp, #28]
 801f290:	f7f8 f8be 	bl	8017410 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801f294:	465a      	mov	r2, fp
 801f296:	4641      	mov	r1, r8
 801f298:	4633      	mov	r3, r6
 801f29a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 801f29e:	4620      	mov	r0, r4
 801f2a0:	f7f8 f8d3 	bl	801744a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801f2a4:	a910      	add	r1, sp, #64	; 0x40
 801f2a6:	f821 0d0a 	strh.w	r0, [r1, #-10]!
 801f2aa:	a80d      	add	r0, sp, #52	; 0x34
 801f2ac:	f7f8 f9f4 	bl	8017698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801f2b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f2b2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f2b6:	9308      	str	r3, [sp, #32]
 801f2b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f2ba:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 801f2be:	fa5f f883 	uxtb.w	r8, r3
 801f2c2:	2f07      	cmp	r7, #7
 801f2c4:	f200 811f 	bhi.w	801f506 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x326>
 801f2c8:	e8df f017 	tbh	[pc, r7, lsl #1]
 801f2cc:	009b00a1 	.word	0x009b00a1
 801f2d0:	0095011d 	.word	0x0095011d
 801f2d4:	011d011d 	.word	0x011d011d
 801f2d8:	0008011d 	.word	0x0008011d
 801f2dc:	2708      	movs	r7, #8
 801f2de:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801f2e2:	4ca1      	ldr	r4, [pc, #644]	; (801f568 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801f2e4:	6820      	ldr	r0, [r4, #0]
 801f2e6:	2800      	cmp	r0, #0
 801f2e8:	f000 8137 	beq.w	801f55a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801f2ec:	f7fd ff7c 	bl	801d1e8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801f2f0:	f8da 3000 	ldr.w	r3, [sl]
 801f2f4:	4650      	mov	r0, sl
 801f2f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f2f8:	4798      	blx	r3
 801f2fa:	2e02      	cmp	r6, #2
 801f2fc:	f000 80e6 	beq.w	801f4cc <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>
 801f300:	2e03      	cmp	r6, #3
 801f302:	f000 80c7 	beq.w	801f494 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b4>
 801f306:	2e01      	cmp	r6, #1
 801f308:	f000 80a8 	beq.w	801f45c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 801f30c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f30e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f312:	8819      	ldrh	r1, [r3, #0]
 801f314:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f318:	440a      	add	r2, r1
 801f31a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f31c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f320:	8848      	ldrh	r0, [r1, #2]
 801f322:	6849      	ldr	r1, [r1, #4]
 801f324:	4403      	add	r3, r0
 801f326:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f32a:	910f      	str	r1, [sp, #60]	; 0x3c
 801f32c:	a80e      	add	r0, sp, #56	; 0x38
 801f32e:	f7f8 f9f5 	bl	801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f332:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801f336:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801f33a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801f33e:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 801f342:	f7fb fc5b 	bl	801abfc <nema_set_clip>
 801f346:	2200      	movs	r2, #0
 801f348:	9d05      	ldr	r5, [sp, #20]
 801f34a:	4611      	mov	r1, r2
 801f34c:	462b      	mov	r3, r5
 801f34e:	4610      	mov	r0, r2
 801f350:	f7fb fc88 	bl	801ac64 <nema_rgba>
 801f354:	f7fd fe60 	bl	801d018 <nema_set_const_color>
 801f358:	462b      	mov	r3, r5
 801f35a:	4642      	mov	r2, r8
 801f35c:	4659      	mov	r1, fp
 801f35e:	9808      	ldr	r0, [sp, #32]
 801f360:	f7fb fc80 	bl	801ac64 <nema_rgba>
 801f364:	f7fb fc3e 	bl	801abe4 <nema_set_tex_color>
 801f368:	f04f 33ff 	mov.w	r3, #4294967295
 801f36c:	2201      	movs	r2, #1
 801f36e:	2100      	movs	r1, #0
 801f370:	487e      	ldr	r0, [pc, #504]	; (801f56c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801f372:	f7fd fa8b 	bl	801c88c <nema_set_blend>
 801f376:	2200      	movs	r2, #0
 801f378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f37a:	9201      	str	r2, [sp, #4]
 801f37c:	9300      	str	r3, [sp, #0]
 801f37e:	4649      	mov	r1, r9
 801f380:	463b      	mov	r3, r7
 801f382:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f384:	9a06      	ldr	r2, [sp, #24]
 801f386:	f7fb fc75 	bl	801ac74 <nema_bind_src_tex>
 801f38a:	9b07      	ldr	r3, [sp, #28]
 801f38c:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 801f390:	2b01      	cmp	r3, #1
 801f392:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801f396:	d040      	beq.n	801f41a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x23a>
 801f398:	2e02      	cmp	r6, #2
 801f39a:	d051      	beq.n	801f440 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 801f39c:	2e03      	cmp	r6, #3
 801f39e:	f000 80c7 	beq.w	801f530 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801f3a2:	2e01      	cmp	r6, #1
 801f3a4:	9b04      	ldr	r3, [sp, #16]
 801f3a6:	f000 80b8 	beq.w	801f51a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 801f3aa:	1ac9      	subs	r1, r1, r3
 801f3ac:	9b03      	ldr	r3, [sp, #12]
 801f3ae:	1ac0      	subs	r0, r0, r3
 801f3b0:	f7fb fda0 	bl	801aef4 <nema_blit>
 801f3b4:	6823      	ldr	r3, [r4, #0]
 801f3b6:	2b00      	cmp	r3, #0
 801f3b8:	f000 80cf 	beq.w	801f55a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801f3bc:	2201      	movs	r2, #1
 801f3be:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 801f3c2:	b011      	add	sp, #68	; 0x44
 801f3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	f47f af30 	bne.w	801f22e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4e>
 801f3ce:	4b68      	ldr	r3, [pc, #416]	; (801f570 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801f3d0:	4a68      	ldr	r2, [pc, #416]	; (801f574 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801f3d2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 801f3d6:	4868      	ldr	r0, [pc, #416]	; (801f578 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 801f3d8:	f008 fe68 	bl	80280ac <__assert_func>
 801f3dc:	1ad5      	subs	r5, r2, r3
 801f3de:	b2ab      	uxth	r3, r5
 801f3e0:	041a      	lsls	r2, r3, #16
 801f3e2:	9303      	str	r3, [sp, #12]
 801f3e4:	f57f af3f 	bpl.w	801f266 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801f3e8:	eba8 0803 	sub.w	r8, r8, r3
 801f3ec:	2300      	movs	r3, #0
 801f3ee:	fa0f f888 	sxth.w	r8, r8
 801f3f2:	9303      	str	r3, [sp, #12]
 801f3f4:	e737      	b.n	801f266 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801f3f6:	f109 0301 	add.w	r3, r9, #1
 801f3fa:	105b      	asrs	r3, r3, #1
 801f3fc:	9309      	str	r3, [sp, #36]	; 0x24
 801f3fe:	2729      	movs	r7, #41	; 0x29
 801f400:	e76f      	b.n	801f2e2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801f402:	f109 0303 	add.w	r3, r9, #3
 801f406:	109b      	asrs	r3, r3, #2
 801f408:	9309      	str	r3, [sp, #36]	; 0x24
 801f40a:	2728      	movs	r7, #40	; 0x28
 801f40c:	e769      	b.n	801f2e2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801f40e:	f109 0307 	add.w	r3, r9, #7
 801f412:	10db      	asrs	r3, r3, #3
 801f414:	9309      	str	r3, [sp, #36]	; 0x24
 801f416:	2727      	movs	r7, #39	; 0x27
 801f418:	e763      	b.n	801f2e2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801f41a:	2e02      	cmp	r6, #2
 801f41c:	f000 8093 	beq.w	801f546 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x366>
 801f420:	2e03      	cmp	r6, #3
 801f422:	d00d      	beq.n	801f440 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 801f424:	2e01      	cmp	r6, #1
 801f426:	f000 8091 	beq.w	801f54c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801f42a:	461a      	mov	r2, r3
 801f42c:	9b03      	ldr	r3, [sp, #12]
 801f42e:	4419      	add	r1, r3
 801f430:	9b04      	ldr	r3, [sp, #16]
 801f432:	eba1 0109 	sub.w	r1, r1, r9
 801f436:	3101      	adds	r1, #1
 801f438:	1ac0      	subs	r0, r0, r3
 801f43a:	f7fb fd75 	bl	801af28 <nema_blit_rotate>
 801f43e:	e7b9      	b.n	801f3b4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801f440:	9b04      	ldr	r3, [sp, #16]
 801f442:	2202      	movs	r2, #2
 801f444:	4419      	add	r1, r3
 801f446:	9b03      	ldr	r3, [sp, #12]
 801f448:	4418      	add	r0, r3
 801f44a:	9b06      	ldr	r3, [sp, #24]
 801f44c:	eba0 0009 	sub.w	r0, r0, r9
 801f450:	1ac9      	subs	r1, r1, r3
 801f452:	3101      	adds	r1, #1
 801f454:	3001      	adds	r0, #1
 801f456:	f7fb fd67 	bl	801af28 <nema_blit_rotate>
 801f45a:	e7ab      	b.n	801f3b4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801f45c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801f460:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801f464:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f466:	440b      	add	r3, r1
 801f468:	8852      	ldrh	r2, [r2, #2]
 801f46a:	981e      	ldr	r0, [sp, #120]	; 0x78
 801f46c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f46e:	1a9b      	subs	r3, r3, r2
 801f470:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 801f474:	f8b0 c000 	ldrh.w	ip, [r0]
 801f478:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801f47c:	8880      	ldrh	r0, [r0, #4]
 801f47e:	1a5b      	subs	r3, r3, r1
 801f480:	4462      	add	r2, ip
 801f482:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801f486:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
 801f48a:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801f48e:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 801f492:	e74b      	b.n	801f32c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 801f494:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801f498:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f49c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f49e:	440b      	add	r3, r1
 801f4a0:	8812      	ldrh	r2, [r2, #0]
 801f4a2:	981e      	ldr	r0, [sp, #120]	; 0x78
 801f4a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f4a6:	1a9b      	subs	r3, r3, r2
 801f4a8:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 801f4ac:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 801f4b0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f4b4:	88c0      	ldrh	r0, [r0, #6]
 801f4b6:	1a5b      	subs	r3, r3, r1
 801f4b8:	4462      	add	r2, ip
 801f4ba:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f4be:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
 801f4c2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f4c6:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 801f4ca:	e72f      	b.n	801f32c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 801f4cc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801f4d0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f4d4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f4d8:	440a      	add	r2, r1
 801f4da:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f4dc:	8808      	ldrh	r0, [r1, #0]
 801f4de:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801f4e2:	1a12      	subs	r2, r2, r0
 801f4e4:	440b      	add	r3, r1
 801f4e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f4e8:	981e      	ldr	r0, [sp, #120]	; 0x78
 801f4ea:	8849      	ldrh	r1, [r1, #2]
 801f4ec:	8880      	ldrh	r0, [r0, #4]
 801f4ee:	1a5b      	subs	r3, r3, r1
 801f4f0:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f4f2:	1a12      	subs	r2, r2, r0
 801f4f4:	88c8      	ldrh	r0, [r1, #6]
 801f4f6:	6849      	ldr	r1, [r1, #4]
 801f4f8:	1a1b      	subs	r3, r3, r0
 801f4fa:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f4fe:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f502:	910f      	str	r1, [sp, #60]	; 0x3c
 801f504:	e712      	b.n	801f32c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 801f506:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801f50a:	e6ea      	b.n	801f2e2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801f50c:	4b1b      	ldr	r3, [pc, #108]	; (801f57c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801f50e:	4a19      	ldr	r2, [pc, #100]	; (801f574 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801f510:	f240 11ab 	movw	r1, #427	; 0x1ab
 801f514:	4818      	ldr	r0, [pc, #96]	; (801f578 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 801f516:	f008 fdc9 	bl	80280ac <__assert_func>
 801f51a:	4403      	add	r3, r0
 801f51c:	4618      	mov	r0, r3
 801f51e:	9b06      	ldr	r3, [sp, #24]
 801f520:	2203      	movs	r2, #3
 801f522:	1ac0      	subs	r0, r0, r3
 801f524:	9b03      	ldr	r3, [sp, #12]
 801f526:	3001      	adds	r0, #1
 801f528:	1ac9      	subs	r1, r1, r3
 801f52a:	f7fb fcfd 	bl	801af28 <nema_blit_rotate>
 801f52e:	e741      	b.n	801f3b4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801f530:	9b03      	ldr	r3, [sp, #12]
 801f532:	2201      	movs	r2, #1
 801f534:	4419      	add	r1, r3
 801f536:	9b04      	ldr	r3, [sp, #16]
 801f538:	eba1 0109 	sub.w	r1, r1, r9
 801f53c:	3101      	adds	r1, #1
 801f53e:	1ac0      	subs	r0, r0, r3
 801f540:	f7fb fcf2 	bl	801af28 <nema_blit_rotate>
 801f544:	e736      	b.n	801f3b4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801f546:	9b04      	ldr	r3, [sp, #16]
 801f548:	4418      	add	r0, r3
 801f54a:	e7e8      	b.n	801f51e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f54c:	9b04      	ldr	r3, [sp, #16]
 801f54e:	1ac9      	subs	r1, r1, r3
 801f550:	9b03      	ldr	r3, [sp, #12]
 801f552:	1ac0      	subs	r0, r0, r3
 801f554:	f7fb fcce 	bl	801aef4 <nema_blit>
 801f558:	e72c      	b.n	801f3b4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801f55a:	4b09      	ldr	r3, [pc, #36]	; (801f580 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801f55c:	4a09      	ldr	r2, [pc, #36]	; (801f584 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801f55e:	217c      	movs	r1, #124	; 0x7c
 801f560:	4809      	ldr	r0, [pc, #36]	; (801f588 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801f562:	f008 fda3 	bl	80280ac <__assert_func>
 801f566:	bf00      	nop
 801f568:	20198388 	.word	0x20198388
 801f56c:	08000504 	.word	0x08000504
 801f570:	0802b400 	.word	0x0802b400
 801f574:	0802c128 	.word	0x0802c128
 801f578:	0802af90 	.word	0x0802af90
 801f57c:	0802b370 	.word	0x0802b370
 801f580:	0802aeec 	.word	0x0802aeec
 801f584:	0802b6f4 	.word	0x0802b6f4
 801f588:	0802af14 	.word	0x0802af14
 801f58c:	20198150 	.word	0x20198150

0801f590 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801f590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f594:	b087      	sub	sp, #28
 801f596:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801f59a:	e9dd 8410 	ldrd	r8, r4, [sp, #64]	; 0x40
 801f59e:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 801f5a2:	f8bd e050 	ldrh.w	lr, [sp, #80]	; 0x50
 801f5a6:	2e00      	cmp	r6, #0
 801f5a8:	d065      	beq.n	801f676 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 801f5aa:	f9b4 a004 	ldrsh.w	sl, [r4, #4]
 801f5ae:	f1ba 0f00 	cmp.w	sl, #0
 801f5b2:	dd60      	ble.n	801f676 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 801f5b4:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 801f5b8:	f1ba 0f00 	cmp.w	sl, #0
 801f5bc:	dd5b      	ble.n	801f676 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 801f5be:	f3c7 0a87 	ubfx	sl, r7, #2, #8
 801f5c2:	f1ba 0f0b 	cmp.w	sl, #11
 801f5c6:	d059      	beq.n	801f67c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xec>
 801f5c8:	469c      	mov	ip, r3
 801f5ca:	4b7e      	ldr	r3, [pc, #504]	; (801f7c4 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x234>)
 801f5cc:	4615      	mov	r5, r2
 801f5ce:	f893 b000 	ldrb.w	fp, [r3]
 801f5d2:	f8dc 3008 	ldr.w	r3, [ip, #8]
 801f5d6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f5da:	9303      	str	r3, [sp, #12]
 801f5dc:	f1bb 0f01 	cmp.w	fp, #1
 801f5e0:	f8dc 300c 	ldr.w	r3, [ip, #12]
 801f5e4:	9205      	str	r2, [sp, #20]
 801f5e6:	bf08      	it	eq
 801f5e8:	9a03      	ldreq	r2, [sp, #12]
 801f5ea:	9302      	str	r3, [sp, #8]
 801f5ec:	bf08      	it	eq
 801f5ee:	e9cd 2302 	strdeq	r2, r3, [sp, #8]
 801f5f2:	f1ba 0f0d 	cmp.w	sl, #13
 801f5f6:	4681      	mov	r9, r0
 801f5f8:	d034      	beq.n	801f664 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd4>
 801f5fa:	4b73      	ldr	r3, [pc, #460]	; (801f7c8 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x238>)
 801f5fc:	6818      	ldr	r0, [r3, #0]
 801f5fe:	2800      	cmp	r0, #0
 801f600:	f000 80d3 	beq.w	801f7aa <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x21a>
 801f604:	f8dc 3000 	ldr.w	r3, [ip]
 801f608:	9304      	str	r3, [sp, #16]
 801f60a:	f7fd fded 	bl	801d1e8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801f60e:	f8d9 3000 	ldr.w	r3, [r9]
 801f612:	4648      	mov	r0, r9
 801f614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f616:	4798      	blx	r3
 801f618:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f61c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f620:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801f624:	f9b4 0000 	ldrsh.w	r0, [r4]
 801f628:	f7fb fae8 	bl	801abfc <nema_set_clip>
 801f62c:	2200      	movs	r2, #0
 801f62e:	4633      	mov	r3, r6
 801f630:	4611      	mov	r1, r2
 801f632:	4610      	mov	r0, r2
 801f634:	f7fb fb16 	bl	801ac64 <nema_rgba>
 801f638:	f7fd fcee 	bl	801d018 <nema_set_const_color>
 801f63c:	f04f 33ff 	mov.w	r3, #4294967295
 801f640:	2201      	movs	r2, #1
 801f642:	2100      	movs	r1, #0
 801f644:	4861      	ldr	r0, [pc, #388]	; (801f7cc <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23c>)
 801f646:	f7fd f921 	bl	801c88c <nema_set_blend>
 801f64a:	f1ba 0f0d 	cmp.w	sl, #13
 801f64e:	f200 80b2 	bhi.w	801f7b6 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x226>
 801f652:	e8df f00a 	tbb	[pc, sl]
 801f656:	8d1b      	.short	0x8d1b
 801f658:	b0b0b08b 	.word	0xb0b0b08b
 801f65c:	b0b0b0b0 	.word	0xb0b0b0b0
 801f660:	888fb0b0 	.word	0x888fb0b0
 801f664:	9b05      	ldr	r3, [sp, #20]
 801f666:	b133      	cbz	r3, 801f676 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 801f668:	781b      	ldrb	r3, [r3, #0]
 801f66a:	f1a3 0216 	sub.w	r2, r3, #22
 801f66e:	2a01      	cmp	r2, #1
 801f670:	d9c3      	bls.n	801f5fa <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6a>
 801f672:	2b12      	cmp	r3, #18
 801f674:	d0c1      	beq.n	801f5fa <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6a>
 801f676:	b007      	add	sp, #28
 801f678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f67c:	e9cd 6e13 	strd	r6, lr, [sp, #76]	; 0x4c
 801f680:	9712      	str	r7, [sp, #72]	; 0x48
 801f682:	b007      	add	sp, #28
 801f684:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f688:	f7f7 b9be 	b.w	8016a08 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 801f68c:	2304      	movs	r3, #4
 801f68e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801f692:	f04f 34ff 	mov.w	r4, #4294967295
 801f696:	f007 0701 	and.w	r7, r7, #1
 801f69a:	9804      	ldr	r0, [sp, #16]
 801f69c:	9701      	str	r7, [sp, #4]
 801f69e:	9400      	str	r4, [sp, #0]
 801f6a0:	f7fb fae8 	bl	801ac74 <nema_bind_src_tex>
 801f6a4:	2001      	movs	r0, #1
 801f6a6:	f7fc f915 	bl	801b8d4 <nema_enable_tiling>
 801f6aa:	2301      	movs	r3, #1
 801f6ac:	461a      	mov	r2, r3
 801f6ae:	4619      	mov	r1, r3
 801f6b0:	4618      	mov	r0, r3
 801f6b2:	f7fc f923 	bl	801b8fc <nema_enable_aa>
 801f6b6:	f1bb 0f01 	cmp.w	fp, #1
 801f6ba:	d069      	beq.n	801f790 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x200>
 801f6bc:	edd5 2a00 	vldr	s5, [r5]
 801f6c0:	ed95 4a01 	vldr	s8, [r5, #4]
 801f6c4:	edd5 4a05 	vldr	s9, [r5, #20]
 801f6c8:	ed95 5a06 	vldr	s10, [r5, #24]
 801f6cc:	edd5 5a0a 	vldr	s11, [r5, #40]	; 0x28
 801f6d0:	ed95 6a0b 	vldr	s12, [r5, #44]	; 0x2c
 801f6d4:	353c      	adds	r5, #60	; 0x3c
 801f6d6:	f9b8 3000 	ldrsh.w	r3, [r8]
 801f6da:	eddf 7a3d 	vldr	s15, [pc, #244]	; 801f7d0 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x240>
 801f6de:	ee00 3a10 	vmov	s0, r3
 801f6e2:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801f6e6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801f6ea:	ee03 3a90 	vmov	s7, r3
 801f6ee:	edd5 6a00 	vldr	s13, [r5]
 801f6f2:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801f6f6:	ed95 7a01 	vldr	s14, [r5, #4]
 801f6fa:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801f6fe:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801f702:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801f706:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801f70a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801f70e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801f712:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f716:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f71a:	eeb0 3a40 	vmov.f32	s6, s0
 801f71e:	eeb0 2a40 	vmov.f32	s4, s0
 801f722:	eeb0 1a40 	vmov.f32	s2, s0
 801f726:	eef0 1a63 	vmov.f32	s3, s7
 801f72a:	eea2 0aa7 	vfma.f32	s0, s5, s15
 801f72e:	eef0 0a63 	vmov.f32	s1, s7
 801f732:	eef0 2a63 	vmov.f32	s5, s7
 801f736:	eea6 3aa7 	vfma.f32	s6, s13, s15
 801f73a:	eea5 2aa7 	vfma.f32	s4, s11, s15
 801f73e:	eea4 1aa7 	vfma.f32	s2, s9, s15
 801f742:	eee6 2a27 	vfma.f32	s5, s12, s15
 801f746:	eee5 1a27 	vfma.f32	s3, s10, s15
 801f74a:	eee4 0a27 	vfma.f32	s1, s8, s15
 801f74e:	eee7 3a27 	vfma.f32	s7, s14, s15
 801f752:	f7fb fd49 	bl	801b1e8 <nema_blit_quad_fit>
 801f756:	4b1c      	ldr	r3, [pc, #112]	; (801f7c8 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x238>)
 801f758:	6818      	ldr	r0, [r3, #0]
 801f75a:	b330      	cbz	r0, 801f7aa <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x21a>
 801f75c:	b007      	add	sp, #28
 801f75e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f762:	f7fd bd61 	b.w	801d228 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801f766:	9b05      	ldr	r3, [sp, #20]
 801f768:	781b      	ldrb	r3, [r3, #0]
 801f76a:	e790      	b.n	801f68e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 801f76c:	2310      	movs	r3, #16
 801f76e:	e78e      	b.n	801f68e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 801f770:	2339      	movs	r3, #57	; 0x39
 801f772:	e78c      	b.n	801f68e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 801f774:	4a17      	ldr	r2, [pc, #92]	; (801f7d4 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x244>)
 801f776:	23ff      	movs	r3, #255	; 0xff
 801f778:	6810      	ldr	r0, [r2, #0]
 801f77a:	b2c2      	uxtb	r2, r0
 801f77c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801f780:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801f784:	f7fb fa6e 	bl	801ac64 <nema_rgba>
 801f788:	f7fb fa2c 	bl	801abe4 <nema_set_tex_color>
 801f78c:	2329      	movs	r3, #41	; 0x29
 801f78e:	e77e      	b.n	801f68e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 801f790:	edd5 2a05 	vldr	s5, [r5, #20]
 801f794:	ed95 4a06 	vldr	s8, [r5, #24]
 801f798:	edd5 4a0a 	vldr	s9, [r5, #40]	; 0x28
 801f79c:	ed95 5a0b 	vldr	s10, [r5, #44]	; 0x2c
 801f7a0:	edd5 5a0f 	vldr	s11, [r5, #60]	; 0x3c
 801f7a4:	ed95 6a10 	vldr	s12, [r5, #64]	; 0x40
 801f7a8:	e795      	b.n	801f6d6 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x146>
 801f7aa:	4b0b      	ldr	r3, [pc, #44]	; (801f7d8 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x248>)
 801f7ac:	4a0b      	ldr	r2, [pc, #44]	; (801f7dc <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x24c>)
 801f7ae:	217c      	movs	r1, #124	; 0x7c
 801f7b0:	480b      	ldr	r0, [pc, #44]	; (801f7e0 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x250>)
 801f7b2:	f008 fc7b 	bl	80280ac <__assert_func>
 801f7b6:	4b0b      	ldr	r3, [pc, #44]	; (801f7e4 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x254>)
 801f7b8:	4a0b      	ldr	r2, [pc, #44]	; (801f7e8 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x258>)
 801f7ba:	f240 314f 	movw	r1, #847	; 0x34f
 801f7be:	480b      	ldr	r0, [pc, #44]	; (801f7ec <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x25c>)
 801f7c0:	f008 fc74 	bl	80280ac <__assert_func>
 801f7c4:	20198150 	.word	0x20198150
 801f7c8:	20198388 	.word	0x20198388
 801f7cc:	08000504 	.word	0x08000504
 801f7d0:	3d800000 	.word	0x3d800000
 801f7d4:	20198160 	.word	0x20198160
 801f7d8:	0802aeec 	.word	0x0802aeec
 801f7dc:	0802b6f4 	.word	0x0802b6f4
 801f7e0:	0802af14 	.word	0x0802af14
 801f7e4:	0802ade4 	.word	0x0802ade4
 801f7e8:	0802b8ac 	.word	0x0802b8ac
 801f7ec:	0802af90 	.word	0x0802af90

0801f7f0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801f7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7f4:	4680      	mov	r8, r0
 801f7f6:	460f      	mov	r7, r1
 801f7f8:	4614      	mov	r4, r2
 801f7fa:	461e      	mov	r6, r3
 801f7fc:	4db2      	ldr	r5, [pc, #712]	; (801fac8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2d8>)
 801f7fe:	e8d5 3f8f 	ldab	r3, [r5]
 801f802:	07da      	lsls	r2, r3, #31
 801f804:	f140 823a 	bpl.w	801fc7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48c>
 801f808:	4db0      	ldr	r5, [pc, #704]	; (801facc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2dc>)
 801f80a:	e8d5 3f8f 	ldab	r3, [r5]
 801f80e:	07db      	lsls	r3, r3, #31
 801f810:	f140 8225 	bpl.w	801fc5e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46e>
 801f814:	4dae      	ldr	r5, [pc, #696]	; (801fad0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e0>)
 801f816:	e8d5 3f8f 	ldab	r3, [r5]
 801f81a:	07d8      	lsls	r0, r3, #31
 801f81c:	f140 8210 	bpl.w	801fc40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x450>
 801f820:	4dac      	ldr	r5, [pc, #688]	; (801fad4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e4>)
 801f822:	e8d5 3f8f 	ldab	r3, [r5]
 801f826:	07d9      	lsls	r1, r3, #31
 801f828:	f140 81fb 	bpl.w	801fc22 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x432>
 801f82c:	4daa      	ldr	r5, [pc, #680]	; (801fad8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e8>)
 801f82e:	e8d5 3f8f 	ldab	r3, [r5]
 801f832:	07da      	lsls	r2, r3, #31
 801f834:	f140 81e6 	bpl.w	801fc04 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x414>
 801f838:	4da8      	ldr	r5, [pc, #672]	; (801fadc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2ec>)
 801f83a:	e8d5 3f8f 	ldab	r3, [r5]
 801f83e:	07db      	lsls	r3, r3, #31
 801f840:	f140 81d1 	bpl.w	801fbe6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3f6>
 801f844:	4da6      	ldr	r5, [pc, #664]	; (801fae0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f0>)
 801f846:	e8d5 3f8f 	ldab	r3, [r5]
 801f84a:	07d8      	lsls	r0, r3, #31
 801f84c:	f140 81bc 	bpl.w	801fbc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3d8>
 801f850:	4da4      	ldr	r5, [pc, #656]	; (801fae4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f4>)
 801f852:	e8d5 3f8f 	ldab	r3, [r5]
 801f856:	07d9      	lsls	r1, r3, #31
 801f858:	f140 81a7 	bpl.w	801fbaa <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3ba>
 801f85c:	4da2      	ldr	r5, [pc, #648]	; (801fae8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f8>)
 801f85e:	e8d5 3f8f 	ldab	r3, [r5]
 801f862:	07da      	lsls	r2, r3, #31
 801f864:	f140 8192 	bpl.w	801fb8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x39c>
 801f868:	4da0      	ldr	r5, [pc, #640]	; (801faec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2fc>)
 801f86a:	e8d5 3f8f 	ldab	r3, [r5]
 801f86e:	07db      	lsls	r3, r3, #31
 801f870:	f140 811a 	bpl.w	801faa8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2b8>
 801f874:	4d9e      	ldr	r5, [pc, #632]	; (801faf0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x300>)
 801f876:	e8d5 3f8f 	ldab	r3, [r5]
 801f87a:	07d8      	lsls	r0, r3, #31
 801f87c:	f140 8105 	bpl.w	801fa8a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x29a>
 801f880:	4d9c      	ldr	r5, [pc, #624]	; (801faf4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x304>)
 801f882:	e8d5 3f8f 	ldab	r3, [r5]
 801f886:	07d9      	lsls	r1, r3, #31
 801f888:	f140 80f0 	bpl.w	801fa6c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x27c>
 801f88c:	4d9a      	ldr	r5, [pc, #616]	; (801faf8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x308>)
 801f88e:	e8d5 3f8f 	ldab	r3, [r5]
 801f892:	07da      	lsls	r2, r3, #31
 801f894:	f140 80db 	bpl.w	801fa4e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x25e>
 801f898:	4d98      	ldr	r5, [pc, #608]	; (801fafc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30c>)
 801f89a:	e8d5 3f8f 	ldab	r3, [r5]
 801f89e:	07db      	lsls	r3, r3, #31
 801f8a0:	f140 80c6 	bpl.w	801fa30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x240>
 801f8a4:	4d96      	ldr	r5, [pc, #600]	; (801fb00 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x310>)
 801f8a6:	e8d5 3f8f 	ldab	r3, [r5]
 801f8aa:	07d8      	lsls	r0, r3, #31
 801f8ac:	f140 80b1 	bpl.w	801fa12 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x222>
 801f8b0:	4d94      	ldr	r5, [pc, #592]	; (801fb04 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x314>)
 801f8b2:	e8d5 3f8f 	ldab	r3, [r5]
 801f8b6:	07d9      	lsls	r1, r3, #31
 801f8b8:	f140 809c 	bpl.w	801f9f4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x204>
 801f8bc:	4d92      	ldr	r5, [pc, #584]	; (801fb08 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x318>)
 801f8be:	e8d5 3f8f 	ldab	r3, [r5]
 801f8c2:	07da      	lsls	r2, r3, #31
 801f8c4:	f140 8087 	bpl.w	801f9d6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e6>
 801f8c8:	4d90      	ldr	r5, [pc, #576]	; (801fb0c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x31c>)
 801f8ca:	e8d5 3f8f 	ldab	r3, [r5]
 801f8ce:	07db      	lsls	r3, r3, #31
 801f8d0:	d573      	bpl.n	801f9ba <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ca>
 801f8d2:	4d8f      	ldr	r5, [pc, #572]	; (801fb10 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x320>)
 801f8d4:	e8d5 3f8f 	ldab	r3, [r5]
 801f8d8:	07d8      	lsls	r0, r3, #31
 801f8da:	d560      	bpl.n	801f99e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ae>
 801f8dc:	4d8d      	ldr	r5, [pc, #564]	; (801fb14 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x324>)
 801f8de:	e8d5 3f8f 	ldab	r3, [r5]
 801f8e2:	07d9      	lsls	r1, r3, #31
 801f8e4:	d54d      	bpl.n	801f982 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x192>
 801f8e6:	4d8c      	ldr	r5, [pc, #560]	; (801fb18 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x328>)
 801f8e8:	e8d5 3f8f 	ldab	r3, [r5]
 801f8ec:	07da      	lsls	r2, r3, #31
 801f8ee:	d53a      	bpl.n	801f966 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 801f8f0:	4d8a      	ldr	r5, [pc, #552]	; (801fb1c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x32c>)
 801f8f2:	e8d5 3f8f 	ldab	r3, [r5]
 801f8f6:	07db      	lsls	r3, r3, #31
 801f8f8:	d517      	bpl.n	801f92a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801f8fa:	f898 3008 	ldrb.w	r3, [r8, #8]
 801f8fe:	2b01      	cmp	r3, #1
 801f900:	d024      	beq.n	801f94c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15c>
 801f902:	f0c0 81ca 	bcc.w	801fc9a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4aa>
 801f906:	2b02      	cmp	r3, #2
 801f908:	d002      	beq.n	801f910 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801f90a:	2000      	movs	r0, #0
 801f90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f910:	2eff      	cmp	r6, #255	; 0xff
 801f912:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 801f916:	f000 81cb 	beq.w	801fcb0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c0>
 801f91a:	2c03      	cmp	r4, #3
 801f91c:	d8f5      	bhi.n	801f90a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801f91e:	e8df f014 	tbh	[pc, r4, lsl #1]
 801f922:	01ff      	.short	0x01ff
 801f924:	01e701ee 	.word	0x01e701ee
 801f928:	01e0      	.short	0x01e0
 801f92a:	4628      	mov	r0, r5
 801f92c:	f008 fb93 	bl	8028056 <__cxa_guard_acquire>
 801f930:	2800      	cmp	r0, #0
 801f932:	d0e2      	beq.n	801f8fa <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10a>
 801f934:	4628      	mov	r0, r5
 801f936:	f008 fb9a 	bl	802806e <__cxa_guard_release>
 801f93a:	4a79      	ldr	r2, [pc, #484]	; (801fb20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f93c:	4979      	ldr	r1, [pc, #484]	; (801fb24 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x334>)
 801f93e:	487a      	ldr	r0, [pc, #488]	; (801fb28 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x338>)
 801f940:	f008 fb82 	bl	8028048 <__aeabi_atexit>
 801f944:	f898 3008 	ldrb.w	r3, [r8, #8]
 801f948:	2b01      	cmp	r3, #1
 801f94a:	d1da      	bne.n	801f902 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x112>
 801f94c:	2eff      	cmp	r6, #255	; 0xff
 801f94e:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 801f952:	f000 81b6 	beq.w	801fcc2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4d2>
 801f956:	2c03      	cmp	r4, #3
 801f958:	d8d7      	bhi.n	801f90a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801f95a:	e8df f014 	tbh	[pc, r4, lsl #1]
 801f95e:	0233      	.short	0x0233
 801f960:	021b0222 	.word	0x021b0222
 801f964:	0214      	.short	0x0214
 801f966:	4628      	mov	r0, r5
 801f968:	f008 fb75 	bl	8028056 <__cxa_guard_acquire>
 801f96c:	2800      	cmp	r0, #0
 801f96e:	d0bf      	beq.n	801f8f0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801f970:	4628      	mov	r0, r5
 801f972:	f008 fb7c 	bl	802806e <__cxa_guard_release>
 801f976:	4a6a      	ldr	r2, [pc, #424]	; (801fb20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f978:	496c      	ldr	r1, [pc, #432]	; (801fb2c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x33c>)
 801f97a:	486d      	ldr	r0, [pc, #436]	; (801fb30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x340>)
 801f97c:	f008 fb64 	bl	8028048 <__aeabi_atexit>
 801f980:	e7b6      	b.n	801f8f0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801f982:	4628      	mov	r0, r5
 801f984:	f008 fb67 	bl	8028056 <__cxa_guard_acquire>
 801f988:	2800      	cmp	r0, #0
 801f98a:	d0ac      	beq.n	801f8e6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf6>
 801f98c:	4628      	mov	r0, r5
 801f98e:	f008 fb6e 	bl	802806e <__cxa_guard_release>
 801f992:	4a63      	ldr	r2, [pc, #396]	; (801fb20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f994:	4967      	ldr	r1, [pc, #412]	; (801fb34 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x344>)
 801f996:	4868      	ldr	r0, [pc, #416]	; (801fb38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x348>)
 801f998:	f008 fb56 	bl	8028048 <__aeabi_atexit>
 801f99c:	e7a3      	b.n	801f8e6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf6>
 801f99e:	4628      	mov	r0, r5
 801f9a0:	f008 fb59 	bl	8028056 <__cxa_guard_acquire>
 801f9a4:	2800      	cmp	r0, #0
 801f9a6:	d099      	beq.n	801f8dc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801f9a8:	4628      	mov	r0, r5
 801f9aa:	f008 fb60 	bl	802806e <__cxa_guard_release>
 801f9ae:	4a5c      	ldr	r2, [pc, #368]	; (801fb20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f9b0:	4962      	ldr	r1, [pc, #392]	; (801fb3c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x34c>)
 801f9b2:	4863      	ldr	r0, [pc, #396]	; (801fb40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x350>)
 801f9b4:	f008 fb48 	bl	8028048 <__aeabi_atexit>
 801f9b8:	e790      	b.n	801f8dc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801f9ba:	4628      	mov	r0, r5
 801f9bc:	f008 fb4b 	bl	8028056 <__cxa_guard_acquire>
 801f9c0:	2800      	cmp	r0, #0
 801f9c2:	d086      	beq.n	801f8d2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801f9c4:	4628      	mov	r0, r5
 801f9c6:	f008 fb52 	bl	802806e <__cxa_guard_release>
 801f9ca:	4a55      	ldr	r2, [pc, #340]	; (801fb20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f9cc:	495d      	ldr	r1, [pc, #372]	; (801fb44 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x354>)
 801f9ce:	485e      	ldr	r0, [pc, #376]	; (801fb48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x358>)
 801f9d0:	f008 fb3a 	bl	8028048 <__aeabi_atexit>
 801f9d4:	e77d      	b.n	801f8d2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801f9d6:	4628      	mov	r0, r5
 801f9d8:	f008 fb3d 	bl	8028056 <__cxa_guard_acquire>
 801f9dc:	2800      	cmp	r0, #0
 801f9de:	f43f af73 	beq.w	801f8c8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801f9e2:	4628      	mov	r0, r5
 801f9e4:	f008 fb43 	bl	802806e <__cxa_guard_release>
 801f9e8:	4a4d      	ldr	r2, [pc, #308]	; (801fb20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f9ea:	4958      	ldr	r1, [pc, #352]	; (801fb4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x35c>)
 801f9ec:	4858      	ldr	r0, [pc, #352]	; (801fb50 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x360>)
 801f9ee:	f008 fb2b 	bl	8028048 <__aeabi_atexit>
 801f9f2:	e769      	b.n	801f8c8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801f9f4:	4628      	mov	r0, r5
 801f9f6:	f008 fb2e 	bl	8028056 <__cxa_guard_acquire>
 801f9fa:	2800      	cmp	r0, #0
 801f9fc:	f43f af5e 	beq.w	801f8bc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801fa00:	4628      	mov	r0, r5
 801fa02:	f008 fb34 	bl	802806e <__cxa_guard_release>
 801fa06:	4a46      	ldr	r2, [pc, #280]	; (801fb20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fa08:	4952      	ldr	r1, [pc, #328]	; (801fb54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x364>)
 801fa0a:	4853      	ldr	r0, [pc, #332]	; (801fb58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x368>)
 801fa0c:	f008 fb1c 	bl	8028048 <__aeabi_atexit>
 801fa10:	e754      	b.n	801f8bc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801fa12:	4628      	mov	r0, r5
 801fa14:	f008 fb1f 	bl	8028056 <__cxa_guard_acquire>
 801fa18:	2800      	cmp	r0, #0
 801fa1a:	f43f af49 	beq.w	801f8b0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801fa1e:	4628      	mov	r0, r5
 801fa20:	f008 fb25 	bl	802806e <__cxa_guard_release>
 801fa24:	4a3e      	ldr	r2, [pc, #248]	; (801fb20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fa26:	494d      	ldr	r1, [pc, #308]	; (801fb5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x36c>)
 801fa28:	484d      	ldr	r0, [pc, #308]	; (801fb60 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x370>)
 801fa2a:	f008 fb0d 	bl	8028048 <__aeabi_atexit>
 801fa2e:	e73f      	b.n	801f8b0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801fa30:	4628      	mov	r0, r5
 801fa32:	f008 fb10 	bl	8028056 <__cxa_guard_acquire>
 801fa36:	2800      	cmp	r0, #0
 801fa38:	f43f af34 	beq.w	801f8a4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 801fa3c:	4628      	mov	r0, r5
 801fa3e:	f008 fb16 	bl	802806e <__cxa_guard_release>
 801fa42:	4a37      	ldr	r2, [pc, #220]	; (801fb20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fa44:	4947      	ldr	r1, [pc, #284]	; (801fb64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x374>)
 801fa46:	4848      	ldr	r0, [pc, #288]	; (801fb68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x378>)
 801fa48:	f008 fafe 	bl	8028048 <__aeabi_atexit>
 801fa4c:	e72a      	b.n	801f8a4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 801fa4e:	4628      	mov	r0, r5
 801fa50:	f008 fb01 	bl	8028056 <__cxa_guard_acquire>
 801fa54:	2800      	cmp	r0, #0
 801fa56:	f43f af1f 	beq.w	801f898 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801fa5a:	4628      	mov	r0, r5
 801fa5c:	f008 fb07 	bl	802806e <__cxa_guard_release>
 801fa60:	4a2f      	ldr	r2, [pc, #188]	; (801fb20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fa62:	4942      	ldr	r1, [pc, #264]	; (801fb6c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x37c>)
 801fa64:	4842      	ldr	r0, [pc, #264]	; (801fb70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x380>)
 801fa66:	f008 faef 	bl	8028048 <__aeabi_atexit>
 801fa6a:	e715      	b.n	801f898 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801fa6c:	4628      	mov	r0, r5
 801fa6e:	f008 faf2 	bl	8028056 <__cxa_guard_acquire>
 801fa72:	2800      	cmp	r0, #0
 801fa74:	f43f af0a 	beq.w	801f88c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9c>
 801fa78:	4628      	mov	r0, r5
 801fa7a:	f008 faf8 	bl	802806e <__cxa_guard_release>
 801fa7e:	4a28      	ldr	r2, [pc, #160]	; (801fb20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fa80:	493c      	ldr	r1, [pc, #240]	; (801fb74 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x384>)
 801fa82:	483d      	ldr	r0, [pc, #244]	; (801fb78 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x388>)
 801fa84:	f008 fae0 	bl	8028048 <__aeabi_atexit>
 801fa88:	e700      	b.n	801f88c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9c>
 801fa8a:	4628      	mov	r0, r5
 801fa8c:	f008 fae3 	bl	8028056 <__cxa_guard_acquire>
 801fa90:	2800      	cmp	r0, #0
 801fa92:	f43f aef5 	beq.w	801f880 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x90>
 801fa96:	4628      	mov	r0, r5
 801fa98:	f008 fae9 	bl	802806e <__cxa_guard_release>
 801fa9c:	4a20      	ldr	r2, [pc, #128]	; (801fb20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fa9e:	4937      	ldr	r1, [pc, #220]	; (801fb7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x38c>)
 801faa0:	4837      	ldr	r0, [pc, #220]	; (801fb80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x390>)
 801faa2:	f008 fad1 	bl	8028048 <__aeabi_atexit>
 801faa6:	e6eb      	b.n	801f880 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x90>
 801faa8:	4628      	mov	r0, r5
 801faaa:	f008 fad4 	bl	8028056 <__cxa_guard_acquire>
 801faae:	2800      	cmp	r0, #0
 801fab0:	f43f aee0 	beq.w	801f874 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801fab4:	4628      	mov	r0, r5
 801fab6:	f008 fada 	bl	802806e <__cxa_guard_release>
 801faba:	4a19      	ldr	r2, [pc, #100]	; (801fb20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fabc:	4931      	ldr	r1, [pc, #196]	; (801fb84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x394>)
 801fabe:	4832      	ldr	r0, [pc, #200]	; (801fb88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x398>)
 801fac0:	f008 fac2 	bl	8028048 <__aeabi_atexit>
 801fac4:	e6d6      	b.n	801f874 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801fac6:	bf00      	nop
 801fac8:	201983b0 	.word	0x201983b0
 801facc:	201983c4 	.word	0x201983c4
 801fad0:	2019838c 	.word	0x2019838c
 801fad4:	20198398 	.word	0x20198398
 801fad8:	201983d0 	.word	0x201983d0
 801fadc:	201983dc 	.word	0x201983dc
 801fae0:	201983a4 	.word	0x201983a4
 801fae4:	201983bc 	.word	0x201983bc
 801fae8:	201983b4 	.word	0x201983b4
 801faec:	201983c8 	.word	0x201983c8
 801faf0:	20198390 	.word	0x20198390
 801faf4:	2019839c 	.word	0x2019839c
 801faf8:	201983d4 	.word	0x201983d4
 801fafc:	201983e0 	.word	0x201983e0
 801fb00:	201983a8 	.word	0x201983a8
 801fb04:	201983c0 	.word	0x201983c0
 801fb08:	201983b8 	.word	0x201983b8
 801fb0c:	201983cc 	.word	0x201983cc
 801fb10:	20198394 	.word	0x20198394
 801fb14:	201983a0 	.word	0x201983a0
 801fb18:	201983d8 	.word	0x201983d8
 801fb1c:	201983ac 	.word	0x201983ac
 801fb20:	20000000 	.word	0x20000000
 801fb24:	0801ee59 	.word	0x0801ee59
 801fb28:	20000088 	.word	0x20000088
 801fb2c:	0801ee55 	.word	0x0801ee55
 801fb30:	200000b4 	.word	0x200000b4
 801fb34:	0801ee65 	.word	0x0801ee65
 801fb38:	2000007c 	.word	0x2000007c
 801fb3c:	0801ee69 	.word	0x0801ee69
 801fb40:	20000070 	.word	0x20000070
 801fb44:	0801ee5d 	.word	0x0801ee5d
 801fb48:	200000a8 	.word	0x200000a8
 801fb4c:	0801ee61 	.word	0x0801ee61
 801fb50:	20000094 	.word	0x20000094
 801fb54:	0801ee75 	.word	0x0801ee75
 801fb58:	2000009c 	.word	0x2000009c
 801fb5c:	0801ee79 	.word	0x0801ee79
 801fb60:	20000084 	.word	0x20000084
 801fb64:	0801ee6d 	.word	0x0801ee6d
 801fb68:	200000bc 	.word	0x200000bc
 801fb6c:	0801ee71 	.word	0x0801ee71
 801fb70:	200000b0 	.word	0x200000b0
 801fb74:	0801ee85 	.word	0x0801ee85
 801fb78:	20000078 	.word	0x20000078
 801fb7c:	0801ee89 	.word	0x0801ee89
 801fb80:	2000006c 	.word	0x2000006c
 801fb84:	0801ee7d 	.word	0x0801ee7d
 801fb88:	200000a4 	.word	0x200000a4
 801fb8c:	4628      	mov	r0, r5
 801fb8e:	f008 fa62 	bl	8028056 <__cxa_guard_acquire>
 801fb92:	2800      	cmp	r0, #0
 801fb94:	f43f ae68 	beq.w	801f868 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78>
 801fb98:	4628      	mov	r0, r5
 801fb9a:	f008 fa68 	bl	802806e <__cxa_guard_release>
 801fb9e:	4aa6      	ldr	r2, [pc, #664]	; (801fe38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fba0:	49a6      	ldr	r1, [pc, #664]	; (801fe3c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64c>)
 801fba2:	48a7      	ldr	r0, [pc, #668]	; (801fe40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x650>)
 801fba4:	f008 fa50 	bl	8028048 <__aeabi_atexit>
 801fba8:	e65e      	b.n	801f868 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78>
 801fbaa:	4628      	mov	r0, r5
 801fbac:	f008 fa53 	bl	8028056 <__cxa_guard_acquire>
 801fbb0:	2800      	cmp	r0, #0
 801fbb2:	f43f ae53 	beq.w	801f85c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801fbb6:	4628      	mov	r0, r5
 801fbb8:	f008 fa59 	bl	802806e <__cxa_guard_release>
 801fbbc:	4a9e      	ldr	r2, [pc, #632]	; (801fe38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fbbe:	49a1      	ldr	r1, [pc, #644]	; (801fe44 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x654>)
 801fbc0:	48a1      	ldr	r0, [pc, #644]	; (801fe48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x658>)
 801fbc2:	f008 fa41 	bl	8028048 <__aeabi_atexit>
 801fbc6:	e649      	b.n	801f85c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801fbc8:	4628      	mov	r0, r5
 801fbca:	f008 fa44 	bl	8028056 <__cxa_guard_acquire>
 801fbce:	2800      	cmp	r0, #0
 801fbd0:	f43f ae3e 	beq.w	801f850 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801fbd4:	4628      	mov	r0, r5
 801fbd6:	f008 fa4a 	bl	802806e <__cxa_guard_release>
 801fbda:	4a97      	ldr	r2, [pc, #604]	; (801fe38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fbdc:	499b      	ldr	r1, [pc, #620]	; (801fe4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x65c>)
 801fbde:	489c      	ldr	r0, [pc, #624]	; (801fe50 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x660>)
 801fbe0:	f008 fa32 	bl	8028048 <__aeabi_atexit>
 801fbe4:	e634      	b.n	801f850 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801fbe6:	4628      	mov	r0, r5
 801fbe8:	f008 fa35 	bl	8028056 <__cxa_guard_acquire>
 801fbec:	2800      	cmp	r0, #0
 801fbee:	f43f ae29 	beq.w	801f844 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801fbf2:	4628      	mov	r0, r5
 801fbf4:	f008 fa3b 	bl	802806e <__cxa_guard_release>
 801fbf8:	4a8f      	ldr	r2, [pc, #572]	; (801fe38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fbfa:	4996      	ldr	r1, [pc, #600]	; (801fe54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x664>)
 801fbfc:	4896      	ldr	r0, [pc, #600]	; (801fe58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x668>)
 801fbfe:	f008 fa23 	bl	8028048 <__aeabi_atexit>
 801fc02:	e61f      	b.n	801f844 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801fc04:	4628      	mov	r0, r5
 801fc06:	f008 fa26 	bl	8028056 <__cxa_guard_acquire>
 801fc0a:	2800      	cmp	r0, #0
 801fc0c:	f43f ae14 	beq.w	801f838 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48>
 801fc10:	4628      	mov	r0, r5
 801fc12:	f008 fa2c 	bl	802806e <__cxa_guard_release>
 801fc16:	4a88      	ldr	r2, [pc, #544]	; (801fe38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fc18:	4990      	ldr	r1, [pc, #576]	; (801fe5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66c>)
 801fc1a:	4891      	ldr	r0, [pc, #580]	; (801fe60 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x670>)
 801fc1c:	f008 fa14 	bl	8028048 <__aeabi_atexit>
 801fc20:	e60a      	b.n	801f838 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48>
 801fc22:	4628      	mov	r0, r5
 801fc24:	f008 fa17 	bl	8028056 <__cxa_guard_acquire>
 801fc28:	2800      	cmp	r0, #0
 801fc2a:	f43f adff 	beq.w	801f82c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3c>
 801fc2e:	4628      	mov	r0, r5
 801fc30:	f008 fa1d 	bl	802806e <__cxa_guard_release>
 801fc34:	4a80      	ldr	r2, [pc, #512]	; (801fe38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fc36:	498b      	ldr	r1, [pc, #556]	; (801fe64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x674>)
 801fc38:	488b      	ldr	r0, [pc, #556]	; (801fe68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x678>)
 801fc3a:	f008 fa05 	bl	8028048 <__aeabi_atexit>
 801fc3e:	e5f5      	b.n	801f82c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3c>
 801fc40:	4628      	mov	r0, r5
 801fc42:	f008 fa08 	bl	8028056 <__cxa_guard_acquire>
 801fc46:	2800      	cmp	r0, #0
 801fc48:	f43f adea 	beq.w	801f820 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30>
 801fc4c:	4628      	mov	r0, r5
 801fc4e:	f008 fa0e 	bl	802806e <__cxa_guard_release>
 801fc52:	4a79      	ldr	r2, [pc, #484]	; (801fe38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fc54:	4985      	ldr	r1, [pc, #532]	; (801fe6c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x67c>)
 801fc56:	4886      	ldr	r0, [pc, #536]	; (801fe70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x680>)
 801fc58:	f008 f9f6 	bl	8028048 <__aeabi_atexit>
 801fc5c:	e5e0      	b.n	801f820 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30>
 801fc5e:	4628      	mov	r0, r5
 801fc60:	f008 f9f9 	bl	8028056 <__cxa_guard_acquire>
 801fc64:	2800      	cmp	r0, #0
 801fc66:	f43f add5 	beq.w	801f814 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fc6a:	4628      	mov	r0, r5
 801fc6c:	f008 f9ff 	bl	802806e <__cxa_guard_release>
 801fc70:	4a71      	ldr	r2, [pc, #452]	; (801fe38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fc72:	4980      	ldr	r1, [pc, #512]	; (801fe74 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x684>)
 801fc74:	4880      	ldr	r0, [pc, #512]	; (801fe78 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x688>)
 801fc76:	f008 f9e7 	bl	8028048 <__aeabi_atexit>
 801fc7a:	e5cb      	b.n	801f814 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fc7c:	4628      	mov	r0, r5
 801fc7e:	f008 f9ea 	bl	8028056 <__cxa_guard_acquire>
 801fc82:	2800      	cmp	r0, #0
 801fc84:	f43f adc0 	beq.w	801f808 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fc88:	4628      	mov	r0, r5
 801fc8a:	f008 f9f0 	bl	802806e <__cxa_guard_release>
 801fc8e:	4a6a      	ldr	r2, [pc, #424]	; (801fe38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fc90:	497a      	ldr	r1, [pc, #488]	; (801fe7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x68c>)
 801fc92:	487b      	ldr	r0, [pc, #492]	; (801fe80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x690>)
 801fc94:	f008 f9d8 	bl	8028048 <__aeabi_atexit>
 801fc98:	e5b6      	b.n	801f808 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fc9a:	2eff      	cmp	r6, #255	; 0xff
 801fc9c:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 801fca0:	d018      	beq.n	801fcd4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e4>
 801fca2:	2c03      	cmp	r4, #3
 801fca4:	f63f ae31 	bhi.w	801f90a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fca8:	e8df f004 	tbb	[pc, r4]
 801fcac:	4b525963 	.word	0x4b525963
 801fcb0:	2c03      	cmp	r4, #3
 801fcb2:	f63f ae2a 	bhi.w	801f90a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fcb6:	e8df f014 	tbh	[pc, r4, lsl #1]
 801fcba:	012d      	.short	0x012d
 801fcbc:	001b011e 	.word	0x001b011e
 801fcc0:	0014      	.short	0x0014
 801fcc2:	2c03      	cmp	r4, #3
 801fcc4:	f63f ae21 	bhi.w	801f90a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fcc8:	e8df f014 	tbh	[pc, r4, lsl #1]
 801fccc:	00f000ff 	.word	0x00f000ff
 801fcd0:	00af010e 	.word	0x00af010e
 801fcd4:	2c03      	cmp	r4, #3
 801fcd6:	f63f ae18 	bhi.w	801f90a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fcda:	e8df f004 	tbb	[pc, r4]
 801fcde:	929c      	.short	0x929c
 801fce0:	848b      	.short	0x848b
 801fce2:	687b      	ldr	r3, [r7, #4]
 801fce4:	4867      	ldr	r0, [pc, #412]	; (801fe84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x694>)
 801fce6:	781b      	ldrb	r3, [r3, #0]
 801fce8:	2b00      	cmp	r3, #0
 801fcea:	bf18      	it	ne
 801fcec:	2000      	movne	r0, #0
 801fcee:	e60d      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fcf0:	687b      	ldr	r3, [r7, #4]
 801fcf2:	4865      	ldr	r0, [pc, #404]	; (801fe88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x698>)
 801fcf4:	781b      	ldrb	r3, [r3, #0]
 801fcf6:	2b00      	cmp	r3, #0
 801fcf8:	bf18      	it	ne
 801fcfa:	2000      	movne	r0, #0
 801fcfc:	e606      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fcfe:	687b      	ldr	r3, [r7, #4]
 801fd00:	781b      	ldrb	r3, [r3, #0]
 801fd02:	2b01      	cmp	r3, #1
 801fd04:	f000 811b 	beq.w	801ff3e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x74e>
 801fd08:	f0c0 8113 	bcc.w	801ff32 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x742>
 801fd0c:	2b02      	cmp	r3, #2
 801fd0e:	f47f adfc 	bne.w	801f90a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fd12:	4b5e      	ldr	r3, [pc, #376]	; (801fe8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x69c>)
 801fd14:	4a5e      	ldr	r2, [pc, #376]	; (801fe90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801fd16:	f240 616e 	movw	r1, #1646	; 0x66e
 801fd1a:	485e      	ldr	r0, [pc, #376]	; (801fe94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801fd1c:	f008 f9c6 	bl	80280ac <__assert_func>
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	781b      	ldrb	r3, [r3, #0]
 801fd24:	2b01      	cmp	r3, #1
 801fd26:	f000 8108 	beq.w	801ff3a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x74a>
 801fd2a:	f0c0 8104 	bcc.w	801ff36 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x746>
 801fd2e:	2b02      	cmp	r3, #2
 801fd30:	f47f adeb 	bne.w	801f90a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fd34:	4b55      	ldr	r3, [pc, #340]	; (801fe8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x69c>)
 801fd36:	4a56      	ldr	r2, [pc, #344]	; (801fe90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801fd38:	f240 617a 	movw	r1, #1658	; 0x67a
 801fd3c:	4855      	ldr	r0, [pc, #340]	; (801fe94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801fd3e:	f008 f9b5 	bl	80280ac <__assert_func>
 801fd42:	687b      	ldr	r3, [r7, #4]
 801fd44:	4846      	ldr	r0, [pc, #280]	; (801fe60 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x670>)
 801fd46:	781b      	ldrb	r3, [r3, #0]
 801fd48:	2b00      	cmp	r3, #0
 801fd4a:	bf18      	it	ne
 801fd4c:	2000      	movne	r0, #0
 801fd4e:	e5dd      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fd50:	687b      	ldr	r3, [r7, #4]
 801fd52:	483f      	ldr	r0, [pc, #252]	; (801fe50 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x660>)
 801fd54:	781b      	ldrb	r3, [r3, #0]
 801fd56:	2b00      	cmp	r3, #0
 801fd58:	bf18      	it	ne
 801fd5a:	2000      	movne	r0, #0
 801fd5c:	e5d6      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fd5e:	687b      	ldr	r3, [r7, #4]
 801fd60:	781b      	ldrb	r3, [r3, #0]
 801fd62:	2b00      	cmp	r3, #0
 801fd64:	f000 80ed 	beq.w	801ff42 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x752>
 801fd68:	2b01      	cmp	r3, #1
 801fd6a:	4845      	ldr	r0, [pc, #276]	; (801fe80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x690>)
 801fd6c:	bf18      	it	ne
 801fd6e:	2000      	movne	r0, #0
 801fd70:	e5cc      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fd72:	687b      	ldr	r3, [r7, #4]
 801fd74:	781b      	ldrb	r3, [r3, #0]
 801fd76:	2b00      	cmp	r3, #0
 801fd78:	f000 80e5 	beq.w	801ff46 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x756>
 801fd7c:	2b01      	cmp	r3, #1
 801fd7e:	483c      	ldr	r0, [pc, #240]	; (801fe70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x680>)
 801fd80:	bf18      	it	ne
 801fd82:	2000      	movne	r0, #0
 801fd84:	e5c2      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fd86:	687b      	ldr	r3, [r7, #4]
 801fd88:	4843      	ldr	r0, [pc, #268]	; (801fe98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a8>)
 801fd8a:	781b      	ldrb	r3, [r3, #0]
 801fd8c:	2b00      	cmp	r3, #0
 801fd8e:	bf18      	it	ne
 801fd90:	2000      	movne	r0, #0
 801fd92:	e5bb      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fd94:	687b      	ldr	r3, [r7, #4]
 801fd96:	4841      	ldr	r0, [pc, #260]	; (801fe9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6ac>)
 801fd98:	781b      	ldrb	r3, [r3, #0]
 801fd9a:	2b00      	cmp	r3, #0
 801fd9c:	bf18      	it	ne
 801fd9e:	2000      	movne	r0, #0
 801fda0:	e5b4      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fda2:	687b      	ldr	r3, [r7, #4]
 801fda4:	781b      	ldrb	r3, [r3, #0]
 801fda6:	2b01      	cmp	r3, #1
 801fda8:	f000 80d5 	beq.w	801ff56 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x766>
 801fdac:	f0c0 80d1 	bcc.w	801ff52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x762>
 801fdb0:	2b02      	cmp	r3, #2
 801fdb2:	f47f adaa 	bne.w	801f90a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fdb6:	4b3a      	ldr	r3, [pc, #232]	; (801fea0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b0>)
 801fdb8:	4a35      	ldr	r2, [pc, #212]	; (801fe90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801fdba:	f240 6113 	movw	r1, #1555	; 0x613
 801fdbe:	4835      	ldr	r0, [pc, #212]	; (801fe94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801fdc0:	f008 f974 	bl	80280ac <__assert_func>
 801fdc4:	687b      	ldr	r3, [r7, #4]
 801fdc6:	781b      	ldrb	r3, [r3, #0]
 801fdc8:	2b01      	cmp	r3, #1
 801fdca:	f000 80c0 	beq.w	801ff4e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x75e>
 801fdce:	f0c0 80bc 	bcc.w	801ff4a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x75a>
 801fdd2:	2b02      	cmp	r3, #2
 801fdd4:	f47f ad99 	bne.w	801f90a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fdd8:	4b32      	ldr	r3, [pc, #200]	; (801fea4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b4>)
 801fdda:	4a2d      	ldr	r2, [pc, #180]	; (801fe90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801fddc:	f240 611f 	movw	r1, #1567	; 0x61f
 801fde0:	482c      	ldr	r0, [pc, #176]	; (801fe94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801fde2:	f008 f963 	bl	80280ac <__assert_func>
 801fde6:	687b      	ldr	r3, [r7, #4]
 801fde8:	481b      	ldr	r0, [pc, #108]	; (801fe58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x668>)
 801fdea:	781b      	ldrb	r3, [r3, #0]
 801fdec:	2b00      	cmp	r3, #0
 801fdee:	bf18      	it	ne
 801fdf0:	2000      	movne	r0, #0
 801fdf2:	e58b      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fdf4:	687b      	ldr	r3, [r7, #4]
 801fdf6:	4814      	ldr	r0, [pc, #80]	; (801fe48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x658>)
 801fdf8:	781b      	ldrb	r3, [r3, #0]
 801fdfa:	2b00      	cmp	r3, #0
 801fdfc:	bf18      	it	ne
 801fdfe:	2000      	movne	r0, #0
 801fe00:	e584      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fe02:	687b      	ldr	r3, [r7, #4]
 801fe04:	781b      	ldrb	r3, [r3, #0]
 801fe06:	2b00      	cmp	r3, #0
 801fe08:	f000 80af 	beq.w	801ff6a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x77a>
 801fe0c:	2b01      	cmp	r3, #1
 801fe0e:	481a      	ldr	r0, [pc, #104]	; (801fe78 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x688>)
 801fe10:	bf18      	it	ne
 801fe12:	2000      	movne	r0, #0
 801fe14:	e57a      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fe16:	687b      	ldr	r3, [r7, #4]
 801fe18:	781b      	ldrb	r3, [r3, #0]
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	f000 80a7 	beq.w	801ff6e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x77e>
 801fe20:	2b01      	cmp	r3, #1
 801fe22:	4811      	ldr	r0, [pc, #68]	; (801fe68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x678>)
 801fe24:	bf18      	it	ne
 801fe26:	2000      	movne	r0, #0
 801fe28:	e570      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fe2a:	687b      	ldr	r3, [r7, #4]
 801fe2c:	481e      	ldr	r0, [pc, #120]	; (801fea8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b8>)
 801fe2e:	781b      	ldrb	r3, [r3, #0]
 801fe30:	2b00      	cmp	r3, #0
 801fe32:	bf18      	it	ne
 801fe34:	2000      	movne	r0, #0
 801fe36:	e569      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fe38:	20000000 	.word	0x20000000
 801fe3c:	0801ee81 	.word	0x0801ee81
 801fe40:	20000090 	.word	0x20000090
 801fe44:	0801ee95 	.word	0x0801ee95
 801fe48:	20000098 	.word	0x20000098
 801fe4c:	0801ee99 	.word	0x0801ee99
 801fe50:	20000080 	.word	0x20000080
 801fe54:	0801ee8d 	.word	0x0801ee8d
 801fe58:	200000b8 	.word	0x200000b8
 801fe5c:	0801ee91 	.word	0x0801ee91
 801fe60:	200000ac 	.word	0x200000ac
 801fe64:	0801eea5 	.word	0x0801eea5
 801fe68:	20000074 	.word	0x20000074
 801fe6c:	0801eea9 	.word	0x0801eea9
 801fe70:	20000068 	.word	0x20000068
 801fe74:	0801ee9d 	.word	0x0801ee9d
 801fe78:	200000a0 	.word	0x200000a0
 801fe7c:	0801eea1 	.word	0x0801eea1
 801fe80:	2000008c 	.word	0x2000008c
 801fe84:	200000b4 	.word	0x200000b4
 801fe88:	20000088 	.word	0x20000088
 801fe8c:	0802b0e8 	.word	0x0802b0e8
 801fe90:	0802bec8 	.word	0x0802bec8
 801fe94:	0802af90 	.word	0x0802af90
 801fe98:	200000b0 	.word	0x200000b0
 801fe9c:	20000084 	.word	0x20000084
 801fea0:	0802b054 	.word	0x0802b054
 801fea4:	0802b09c 	.word	0x0802b09c
 801fea8:	200000bc 	.word	0x200000bc
 801feac:	687b      	ldr	r3, [r7, #4]
 801feae:	781b      	ldrb	r3, [r3, #0]
 801feb0:	2b01      	cmp	r3, #1
 801feb2:	d060      	beq.n	801ff76 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x786>
 801feb4:	d35d      	bcc.n	801ff72 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x782>
 801feb6:	2b02      	cmp	r3, #2
 801feb8:	f47f ad27 	bne.w	801f90a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801febc:	4b2f      	ldr	r3, [pc, #188]	; (801ff7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801febe:	4a30      	ldr	r2, [pc, #192]	; (801ff80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801fec0:	f240 613e 	movw	r1, #1598	; 0x63e
 801fec4:	482f      	ldr	r0, [pc, #188]	; (801ff84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801fec6:	f008 f8f1 	bl	80280ac <__assert_func>
 801feca:	687b      	ldr	r3, [r7, #4]
 801fecc:	781b      	ldrb	r3, [r3, #0]
 801fece:	2b01      	cmp	r3, #1
 801fed0:	d049      	beq.n	801ff66 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x776>
 801fed2:	d346      	bcc.n	801ff62 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x772>
 801fed4:	2b02      	cmp	r3, #2
 801fed6:	f47f ad18 	bne.w	801f90a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801feda:	4b28      	ldr	r3, [pc, #160]	; (801ff7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801fedc:	4a28      	ldr	r2, [pc, #160]	; (801ff80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801fede:	f240 614a 	movw	r1, #1610	; 0x64a
 801fee2:	4828      	ldr	r0, [pc, #160]	; (801ff84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801fee4:	f008 f8e2 	bl	80280ac <__assert_func>
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	4827      	ldr	r0, [pc, #156]	; (801ff88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x798>)
 801feec:	781b      	ldrb	r3, [r3, #0]
 801feee:	2b00      	cmp	r3, #0
 801fef0:	bf18      	it	ne
 801fef2:	2000      	movne	r0, #0
 801fef4:	e50a      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fef6:	687b      	ldr	r3, [r7, #4]
 801fef8:	781b      	ldrb	r3, [r3, #0]
 801fefa:	2b01      	cmp	r3, #1
 801fefc:	d02d      	beq.n	801ff5a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76a>
 801fefe:	d318      	bcc.n	801ff32 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x742>
 801ff00:	2b02      	cmp	r3, #2
 801ff02:	f47f ad02 	bne.w	801f90a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801ff06:	4b1d      	ldr	r3, [pc, #116]	; (801ff7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801ff08:	4a1d      	ldr	r2, [pc, #116]	; (801ff80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801ff0a:	f240 619b 	movw	r1, #1691	; 0x69b
 801ff0e:	481d      	ldr	r0, [pc, #116]	; (801ff84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801ff10:	f008 f8cc 	bl	80280ac <__assert_func>
 801ff14:	687b      	ldr	r3, [r7, #4]
 801ff16:	781b      	ldrb	r3, [r3, #0]
 801ff18:	2b01      	cmp	r3, #1
 801ff1a:	d020      	beq.n	801ff5e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76e>
 801ff1c:	d30b      	bcc.n	801ff36 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x746>
 801ff1e:	2b02      	cmp	r3, #2
 801ff20:	f47f acf3 	bne.w	801f90a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801ff24:	4b15      	ldr	r3, [pc, #84]	; (801ff7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801ff26:	4a16      	ldr	r2, [pc, #88]	; (801ff80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801ff28:	f240 61a7 	movw	r1, #1703	; 0x6a7
 801ff2c:	4815      	ldr	r0, [pc, #84]	; (801ff84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801ff2e:	f008 f8bd 	bl	80280ac <__assert_func>
 801ff32:	4816      	ldr	r0, [pc, #88]	; (801ff8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x79c>)
 801ff34:	e4ea      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff36:	4816      	ldr	r0, [pc, #88]	; (801ff90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a0>)
 801ff38:	e4e8      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff3a:	4816      	ldr	r0, [pc, #88]	; (801ff94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a4>)
 801ff3c:	e4e6      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff3e:	4816      	ldr	r0, [pc, #88]	; (801ff98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a8>)
 801ff40:	e4e4      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff42:	4816      	ldr	r0, [pc, #88]	; (801ff9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7ac>)
 801ff44:	e4e2      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff46:	4816      	ldr	r0, [pc, #88]	; (801ffa0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b0>)
 801ff48:	e4e0      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff4a:	4816      	ldr	r0, [pc, #88]	; (801ffa4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b4>)
 801ff4c:	e4de      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff4e:	4816      	ldr	r0, [pc, #88]	; (801ffa8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b8>)
 801ff50:	e4dc      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff52:	4816      	ldr	r0, [pc, #88]	; (801ffac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7bc>)
 801ff54:	e4da      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff56:	4816      	ldr	r0, [pc, #88]	; (801ffb0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c0>)
 801ff58:	e4d8      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff5a:	4816      	ldr	r0, [pc, #88]	; (801ffb4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c4>)
 801ff5c:	e4d6      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff5e:	4816      	ldr	r0, [pc, #88]	; (801ffb8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c8>)
 801ff60:	e4d4      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff62:	4809      	ldr	r0, [pc, #36]	; (801ff88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x798>)
 801ff64:	e4d2      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff66:	4815      	ldr	r0, [pc, #84]	; (801ffbc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7cc>)
 801ff68:	e4d0      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff6a:	4815      	ldr	r0, [pc, #84]	; (801ffc0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d0>)
 801ff6c:	e4ce      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff6e:	4815      	ldr	r0, [pc, #84]	; (801ffc4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d4>)
 801ff70:	e4cc      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff72:	4815      	ldr	r0, [pc, #84]	; (801ffc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d8>)
 801ff74:	e4ca      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff76:	4815      	ldr	r0, [pc, #84]	; (801ffcc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7dc>)
 801ff78:	e4c8      	b.n	801f90c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff7a:	bf00      	nop
 801ff7c:	0802b09c 	.word	0x0802b09c
 801ff80:	0802bec8 	.word	0x0802bec8
 801ff84:	0802af90 	.word	0x0802af90
 801ff88:	2000009c 	.word	0x2000009c
 801ff8c:	200000b4 	.word	0x200000b4
 801ff90:	20000088 	.word	0x20000088
 801ff94:	20000070 	.word	0x20000070
 801ff98:	20000094 	.word	0x20000094
 801ff9c:	200000ac 	.word	0x200000ac
 801ffa0:	20000080 	.word	0x20000080
 801ffa4:	20000084 	.word	0x20000084
 801ffa8:	2000006c 	.word	0x2000006c
 801ffac:	200000b0 	.word	0x200000b0
 801ffb0:	20000090 	.word	0x20000090
 801ffb4:	200000a8 	.word	0x200000a8
 801ffb8:	2000007c 	.word	0x2000007c
 801ffbc:	20000078 	.word	0x20000078
 801ffc0:	200000b8 	.word	0x200000b8
 801ffc4:	20000098 	.word	0x20000098
 801ffc8:	200000bc 	.word	0x200000bc
 801ffcc:	200000a4 	.word	0x200000a4

0801ffd0 <_ZN8touchgfx8LCDGPU2DD0Ev>:
 801ffd0:	b510      	push	{r4, lr}
 801ffd2:	4604      	mov	r4, r0
 801ffd4:	210c      	movs	r1, #12
 801ffd6:	f008 f83c 	bl	8028052 <_ZdlPvj>
 801ffda:	4620      	mov	r0, r4
 801ffdc:	bd10      	pop	{r4, pc}
 801ffde:	bf00      	nop

0801ffe0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ffe0:	b510      	push	{r4, lr}
 801ffe2:	4604      	mov	r4, r0
 801ffe4:	2104      	movs	r1, #4
 801ffe6:	f008 f834 	bl	8028052 <_ZdlPvj>
 801ffea:	4620      	mov	r0, r4
 801ffec:	bd10      	pop	{r4, pc}
 801ffee:	bf00      	nop

0801fff0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801fff0:	b510      	push	{r4, lr}
 801fff2:	4604      	mov	r4, r0
 801fff4:	2104      	movs	r1, #4
 801fff6:	f008 f82c 	bl	8028052 <_ZdlPvj>
 801fffa:	4620      	mov	r0, r4
 801fffc:	bd10      	pop	{r4, pc}
 801fffe:	bf00      	nop

08020000 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4604      	mov	r4, r0
 8020004:	2104      	movs	r1, #4
 8020006:	f008 f824 	bl	8028052 <_ZdlPvj>
 802000a:	4620      	mov	r0, r4
 802000c:	bd10      	pop	{r4, pc}
 802000e:	bf00      	nop

08020010 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020010:	b510      	push	{r4, lr}
 8020012:	4604      	mov	r4, r0
 8020014:	2104      	movs	r1, #4
 8020016:	f008 f81c 	bl	8028052 <_ZdlPvj>
 802001a:	4620      	mov	r0, r4
 802001c:	bd10      	pop	{r4, pc}
 802001e:	bf00      	nop

08020020 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020020:	b510      	push	{r4, lr}
 8020022:	4604      	mov	r4, r0
 8020024:	2104      	movs	r1, #4
 8020026:	f008 f814 	bl	8028052 <_ZdlPvj>
 802002a:	4620      	mov	r0, r4
 802002c:	bd10      	pop	{r4, pc}
 802002e:	bf00      	nop

08020030 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020030:	b510      	push	{r4, lr}
 8020032:	4604      	mov	r4, r0
 8020034:	2104      	movs	r1, #4
 8020036:	f008 f80c 	bl	8028052 <_ZdlPvj>
 802003a:	4620      	mov	r0, r4
 802003c:	bd10      	pop	{r4, pc}
 802003e:	bf00      	nop

08020040 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020040:	b510      	push	{r4, lr}
 8020042:	4604      	mov	r4, r0
 8020044:	2104      	movs	r1, #4
 8020046:	f008 f804 	bl	8028052 <_ZdlPvj>
 802004a:	4620      	mov	r0, r4
 802004c:	bd10      	pop	{r4, pc}
 802004e:	bf00      	nop

08020050 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020050:	b510      	push	{r4, lr}
 8020052:	4604      	mov	r4, r0
 8020054:	2104      	movs	r1, #4
 8020056:	f007 fffc 	bl	8028052 <_ZdlPvj>
 802005a:	4620      	mov	r0, r4
 802005c:	bd10      	pop	{r4, pc}
 802005e:	bf00      	nop

08020060 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020060:	b510      	push	{r4, lr}
 8020062:	4604      	mov	r4, r0
 8020064:	2104      	movs	r1, #4
 8020066:	f007 fff4 	bl	8028052 <_ZdlPvj>
 802006a:	4620      	mov	r0, r4
 802006c:	bd10      	pop	{r4, pc}
 802006e:	bf00      	nop

08020070 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020070:	b510      	push	{r4, lr}
 8020072:	4604      	mov	r4, r0
 8020074:	2104      	movs	r1, #4
 8020076:	f007 ffec 	bl	8028052 <_ZdlPvj>
 802007a:	4620      	mov	r0, r4
 802007c:	bd10      	pop	{r4, pc}
 802007e:	bf00      	nop

08020080 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020080:	b510      	push	{r4, lr}
 8020082:	4604      	mov	r4, r0
 8020084:	2104      	movs	r1, #4
 8020086:	f007 ffe4 	bl	8028052 <_ZdlPvj>
 802008a:	4620      	mov	r0, r4
 802008c:	bd10      	pop	{r4, pc}
 802008e:	bf00      	nop

08020090 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020090:	b510      	push	{r4, lr}
 8020092:	4604      	mov	r4, r0
 8020094:	2104      	movs	r1, #4
 8020096:	f007 ffdc 	bl	8028052 <_ZdlPvj>
 802009a:	4620      	mov	r0, r4
 802009c:	bd10      	pop	{r4, pc}
 802009e:	bf00      	nop

080200a0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80200a0:	b510      	push	{r4, lr}
 80200a2:	4604      	mov	r4, r0
 80200a4:	2104      	movs	r1, #4
 80200a6:	f007 ffd4 	bl	8028052 <_ZdlPvj>
 80200aa:	4620      	mov	r0, r4
 80200ac:	bd10      	pop	{r4, pc}
 80200ae:	bf00      	nop

080200b0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80200b0:	b510      	push	{r4, lr}
 80200b2:	4604      	mov	r4, r0
 80200b4:	2104      	movs	r1, #4
 80200b6:	f007 ffcc 	bl	8028052 <_ZdlPvj>
 80200ba:	4620      	mov	r0, r4
 80200bc:	bd10      	pop	{r4, pc}
 80200be:	bf00      	nop

080200c0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80200c0:	b510      	push	{r4, lr}
 80200c2:	4604      	mov	r4, r0
 80200c4:	2104      	movs	r1, #4
 80200c6:	f007 ffc4 	bl	8028052 <_ZdlPvj>
 80200ca:	4620      	mov	r0, r4
 80200cc:	bd10      	pop	{r4, pc}
 80200ce:	bf00      	nop

080200d0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80200d0:	b510      	push	{r4, lr}
 80200d2:	4604      	mov	r4, r0
 80200d4:	2104      	movs	r1, #4
 80200d6:	f007 ffbc 	bl	8028052 <_ZdlPvj>
 80200da:	4620      	mov	r0, r4
 80200dc:	bd10      	pop	{r4, pc}
 80200de:	bf00      	nop

080200e0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80200e0:	b510      	push	{r4, lr}
 80200e2:	4604      	mov	r4, r0
 80200e4:	2104      	movs	r1, #4
 80200e6:	f007 ffb4 	bl	8028052 <_ZdlPvj>
 80200ea:	4620      	mov	r0, r4
 80200ec:	bd10      	pop	{r4, pc}
 80200ee:	bf00      	nop

080200f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80200f0:	b510      	push	{r4, lr}
 80200f2:	4604      	mov	r4, r0
 80200f4:	2104      	movs	r1, #4
 80200f6:	f007 ffac 	bl	8028052 <_ZdlPvj>
 80200fa:	4620      	mov	r0, r4
 80200fc:	bd10      	pop	{r4, pc}
 80200fe:	bf00      	nop

08020100 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020100:	b510      	push	{r4, lr}
 8020102:	4604      	mov	r4, r0
 8020104:	2104      	movs	r1, #4
 8020106:	f007 ffa4 	bl	8028052 <_ZdlPvj>
 802010a:	4620      	mov	r0, r4
 802010c:	bd10      	pop	{r4, pc}
 802010e:	bf00      	nop

08020110 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020110:	b510      	push	{r4, lr}
 8020112:	4604      	mov	r4, r0
 8020114:	2104      	movs	r1, #4
 8020116:	f007 ff9c 	bl	8028052 <_ZdlPvj>
 802011a:	4620      	mov	r0, r4
 802011c:	bd10      	pop	{r4, pc}
 802011e:	bf00      	nop

08020120 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020120:	b510      	push	{r4, lr}
 8020122:	4604      	mov	r4, r0
 8020124:	2104      	movs	r1, #4
 8020126:	f007 ff94 	bl	8028052 <_ZdlPvj>
 802012a:	4620      	mov	r0, r4
 802012c:	bd10      	pop	{r4, pc}
 802012e:	bf00      	nop

08020130 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020130:	b510      	push	{r4, lr}
 8020132:	4604      	mov	r4, r0
 8020134:	2104      	movs	r1, #4
 8020136:	f007 ff8c 	bl	8028052 <_ZdlPvj>
 802013a:	4620      	mov	r0, r4
 802013c:	bd10      	pop	{r4, pc}
 802013e:	bf00      	nop

08020140 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>:
 8020140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020144:	461c      	mov	r4, r3
 8020146:	4617      	mov	r7, r2
 8020148:	b086      	sub	sp, #24
 802014a:	4606      	mov	r6, r0
 802014c:	4688      	mov	r8, r1
 802014e:	6818      	ldr	r0, [r3, #0]
 8020150:	6859      	ldr	r1, [r3, #4]
 8020152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020154:	ad02      	add	r5, sp, #8
 8020156:	c503      	stmia	r5!, {r0, r1}
 8020158:	6818      	ldr	r0, [r3, #0]
 802015a:	6859      	ldr	r1, [r3, #4]
 802015c:	ad04      	add	r5, sp, #16
 802015e:	c503      	stmia	r5!, {r0, r1}
 8020160:	a802      	add	r0, sp, #8
 8020162:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
 8020166:	f7f7 fad9 	bl	801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802016a:	4621      	mov	r1, r4
 802016c:	a804      	add	r0, sp, #16
 802016e:	f7f7 fafd 	bl	801776c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020172:	2f01      	cmp	r7, #1
 8020174:	d05c      	beq.n	8020230 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf0>
 8020176:	d357      	bcc.n	8020228 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xe8>
 8020178:	2f02      	cmp	r7, #2
 802017a:	d163      	bne.n	8020244 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x104>
 802017c:	f04f 0910 	mov.w	r9, #16
 8020180:	2504      	movs	r5, #4
 8020182:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020186:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802018a:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 802018e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8020192:	fb14 2403 	smlabb	r4, r4, r3, r2
 8020196:	4f2e      	ldr	r7, [pc, #184]	; (8020250 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x110>)
 8020198:	440a      	add	r2, r1
 802019a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 802019e:	6838      	ldr	r0, [r7, #0]
 80201a0:	440b      	add	r3, r1
 80201a2:	fb05 8404 	mla	r4, r5, r4, r8
 80201a6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80201aa:	f8ad 3012 	strh.w	r3, [sp, #18]
 80201ae:	2800      	cmp	r0, #0
 80201b0:	d042      	beq.n	8020238 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf8>
 80201b2:	f7fd f819 	bl	801d1e8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 80201b6:	6833      	ldr	r3, [r6, #0]
 80201b8:	4630      	mov	r0, r6
 80201ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80201bc:	4798      	blx	r3
 80201be:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80201c2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80201c6:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80201ca:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80201ce:	f7fa fd15 	bl	801abfc <nema_set_clip>
 80201d2:	2200      	movs	r2, #0
 80201d4:	2600      	movs	r6, #0
 80201d6:	4611      	mov	r1, r2
 80201d8:	4653      	mov	r3, sl
 80201da:	4610      	mov	r0, r2
 80201dc:	f7fa fd42 	bl	801ac64 <nema_rgba>
 80201e0:	f7fc ff1a 	bl	801d018 <nema_set_const_color>
 80201e4:	f04f 33ff 	mov.w	r3, #4294967295
 80201e8:	2201      	movs	r2, #1
 80201ea:	2100      	movs	r1, #0
 80201ec:	4819      	ldr	r0, [pc, #100]	; (8020254 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x114>)
 80201ee:	f7fc fb4d 	bl	801c88c <nema_set_blend>
 80201f2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80201f6:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80201fa:	fb05 f503 	mul.w	r5, r5, r3
 80201fe:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8020202:	464b      	mov	r3, r9
 8020204:	4620      	mov	r0, r4
 8020206:	e9cd 5600 	strd	r5, r6, [sp]
 802020a:	f7fa fd33 	bl	801ac74 <nema_bind_src_tex>
 802020e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8020212:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8020216:	f7fa fe6d 	bl	801aef4 <nema_blit>
 802021a:	6838      	ldr	r0, [r7, #0]
 802021c:	b160      	cbz	r0, 8020238 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf8>
 802021e:	f7fd f803 	bl	801d228 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8020222:	b006      	add	sp, #24
 8020224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020228:	f04f 0904 	mov.w	r9, #4
 802022c:	2502      	movs	r5, #2
 802022e:	e7a8      	b.n	8020182 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x42>
 8020230:	f04f 0939 	mov.w	r9, #57	; 0x39
 8020234:	2503      	movs	r5, #3
 8020236:	e7a4      	b.n	8020182 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x42>
 8020238:	4b07      	ldr	r3, [pc, #28]	; (8020258 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x118>)
 802023a:	4a08      	ldr	r2, [pc, #32]	; (802025c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x11c>)
 802023c:	217c      	movs	r1, #124	; 0x7c
 802023e:	4808      	ldr	r0, [pc, #32]	; (8020260 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x120>)
 8020240:	f007 ff34 	bl	80280ac <__assert_func>
 8020244:	4b07      	ldr	r3, [pc, #28]	; (8020264 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x124>)
 8020246:	4a08      	ldr	r2, [pc, #32]	; (8020268 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x128>)
 8020248:	21c1      	movs	r1, #193	; 0xc1
 802024a:	4808      	ldr	r0, [pc, #32]	; (802026c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x12c>)
 802024c:	f007 ff2e 	bl	80280ac <__assert_func>
 8020250:	20198388 	.word	0x20198388
 8020254:	08000504 	.word	0x08000504
 8020258:	0802aeec 	.word	0x0802aeec
 802025c:	0802b6f4 	.word	0x0802b6f4
 8020260:	0802af14 	.word	0x0802af14
 8020264:	0802b338 	.word	0x0802b338
 8020268:	0802c090 	.word	0x0802c090
 802026c:	0802af90 	.word	0x0802af90

08020270 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb>:
 8020270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020274:	4c1e      	ldr	r4, [pc, #120]	; (80202f0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x80>)
 8020276:	6806      	ldr	r6, [r0, #0]
 8020278:	6824      	ldr	r4, [r4, #0]
 802027a:	4605      	mov	r5, r0
 802027c:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
 8020280:	b087      	sub	sp, #28
 8020282:	6937      	ldr	r7, [r6, #16]
 8020284:	4690      	mov	r8, r2
 8020286:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 802028a:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 802028e:	b170      	cbz	r0, 80202ae <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x3e>
 8020290:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8020292:	b160      	cbz	r0, 80202ae <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x3e>
 8020294:	6804      	ldr	r4, [r0, #0]
 8020296:	4a17      	ldr	r2, [pc, #92]	; (80202f4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x84>)
 8020298:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 802029a:	4294      	cmp	r4, r2
 802029c:	d10d      	bne.n	80202ba <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x4a>
 802029e:	4c16      	ldr	r4, [pc, #88]	; (80202f8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x88>)
 80202a0:	7a02      	ldrb	r2, [r0, #8]
 80202a2:	42a7      	cmp	r7, r4
 80202a4:	d112      	bne.n	80202cc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x5c>
 80202a6:	b9d6      	cbnz	r6, 80202de <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x6e>
 80202a8:	b007      	add	sp, #28
 80202aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80202ae:	68a0      	ldr	r0, [r4, #8]
 80202b0:	4a10      	ldr	r2, [pc, #64]	; (80202f4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x84>)
 80202b2:	6804      	ldr	r4, [r0, #0]
 80202b4:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80202b6:	4294      	cmp	r4, r2
 80202b8:	d0f1      	beq.n	802029e <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x2e>
 80202ba:	e9cd 1304 	strd	r1, r3, [sp, #16]
 80202be:	47a0      	blx	r4
 80202c0:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
 80202c4:	4c0c      	ldr	r4, [pc, #48]	; (80202f8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x88>)
 80202c6:	4602      	mov	r2, r0
 80202c8:	42a7      	cmp	r7, r4
 80202ca:	d0ec      	beq.n	80202a6 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x36>
 80202cc:	9300      	str	r3, [sp, #0]
 80202ce:	e9cd 6901 	strd	r6, r9, [sp, #4]
 80202d2:	4643      	mov	r3, r8
 80202d4:	4628      	mov	r0, r5
 80202d6:	47b8      	blx	r7
 80202d8:	b007      	add	sp, #28
 80202da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80202de:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
 80202e2:	4628      	mov	r0, r5
 80202e4:	4643      	mov	r3, r8
 80202e6:	b007      	add	sp, #28
 80202e8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80202ec:	f7ff bf28 	b.w	8020140 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>
 80202f0:	20198158 	.word	0x20198158
 80202f4:	0801d2cd 	.word	0x0801d2cd
 80202f8:	080202fd 	.word	0x080202fd

080202fc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80202fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020300:	b087      	sub	sp, #28
 8020302:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8020306:	b915      	cbnz	r5, 802030e <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x12>
 8020308:	b007      	add	sp, #28
 802030a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802030e:	461c      	mov	r4, r3
 8020310:	4617      	mov	r7, r2
 8020312:	4688      	mov	r8, r1
 8020314:	4606      	mov	r6, r0
 8020316:	6859      	ldr	r1, [r3, #4]
 8020318:	6818      	ldr	r0, [r3, #0]
 802031a:	ab02      	add	r3, sp, #8
 802031c:	c303      	stmia	r3!, {r0, r1}
 802031e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020320:	6818      	ldr	r0, [r3, #0]
 8020322:	6859      	ldr	r1, [r3, #4]
 8020324:	ab04      	add	r3, sp, #16
 8020326:	c303      	stmia	r3!, {r0, r1}
 8020328:	a802      	add	r0, sp, #8
 802032a:	f7f7 f9f7 	bl	801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802032e:	4621      	mov	r1, r4
 8020330:	a804      	add	r0, sp, #16
 8020332:	f7f7 fa1b 	bl	801776c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020336:	2f01      	cmp	r7, #1
 8020338:	d05c      	beq.n	80203f4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0xf8>
 802033a:	d357      	bcc.n	80203ec <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0xf0>
 802033c:	2f02      	cmp	r7, #2
 802033e:	d163      	bne.n	8020408 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x10c>
 8020340:	f04f 0910 	mov.w	r9, #16
 8020344:	2404      	movs	r4, #4
 8020346:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802034a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802034e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8020352:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8020356:	fb11 2103 	smlabb	r1, r1, r3, r2
 802035a:	4f2e      	ldr	r7, [pc, #184]	; (8020414 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x118>)
 802035c:	fb04 8801 	mla	r8, r4, r1, r8
 8020360:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8020364:	4402      	add	r2, r0
 8020366:	6838      	ldr	r0, [r7, #0]
 8020368:	440b      	add	r3, r1
 802036a:	f8ad 2010 	strh.w	r2, [sp, #16]
 802036e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8020372:	2800      	cmp	r0, #0
 8020374:	d042      	beq.n	80203fc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x100>
 8020376:	f7fc ff37 	bl	801d1e8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 802037a:	6833      	ldr	r3, [r6, #0]
 802037c:	4630      	mov	r0, r6
 802037e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020380:	4798      	blx	r3
 8020382:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8020386:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802038a:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 802038e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8020392:	f7fa fc33 	bl	801abfc <nema_set_clip>
 8020396:	2200      	movs	r2, #0
 8020398:	462b      	mov	r3, r5
 802039a:	2500      	movs	r5, #0
 802039c:	4611      	mov	r1, r2
 802039e:	4610      	mov	r0, r2
 80203a0:	f7fa fc60 	bl	801ac64 <nema_rgba>
 80203a4:	f7fc fe38 	bl	801d018 <nema_set_const_color>
 80203a8:	f04f 33ff 	mov.w	r3, #4294967295
 80203ac:	2201      	movs	r2, #1
 80203ae:	2100      	movs	r1, #0
 80203b0:	4819      	ldr	r0, [pc, #100]	; (8020418 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x11c>)
 80203b2:	f7fc fa6b 	bl	801c88c <nema_set_blend>
 80203b6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80203ba:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80203be:	fb04 f403 	mul.w	r4, r4, r3
 80203c2:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 80203c6:	464b      	mov	r3, r9
 80203c8:	4640      	mov	r0, r8
 80203ca:	e9cd 4500 	strd	r4, r5, [sp]
 80203ce:	f7fa fc51 	bl	801ac74 <nema_bind_src_tex>
 80203d2:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80203d6:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80203da:	f7fa fd8b 	bl	801aef4 <nema_blit>
 80203de:	6838      	ldr	r0, [r7, #0]
 80203e0:	b160      	cbz	r0, 80203fc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x100>
 80203e2:	f7fc ff21 	bl	801d228 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 80203e6:	b007      	add	sp, #28
 80203e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80203ec:	f04f 0904 	mov.w	r9, #4
 80203f0:	2402      	movs	r4, #2
 80203f2:	e7a8      	b.n	8020346 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4a>
 80203f4:	f04f 0939 	mov.w	r9, #57	; 0x39
 80203f8:	2403      	movs	r4, #3
 80203fa:	e7a4      	b.n	8020346 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4a>
 80203fc:	4b07      	ldr	r3, [pc, #28]	; (802041c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x120>)
 80203fe:	4a08      	ldr	r2, [pc, #32]	; (8020420 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x124>)
 8020400:	217c      	movs	r1, #124	; 0x7c
 8020402:	4808      	ldr	r0, [pc, #32]	; (8020424 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x128>)
 8020404:	f007 fe52 	bl	80280ac <__assert_func>
 8020408:	4b07      	ldr	r3, [pc, #28]	; (8020428 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x12c>)
 802040a:	4a08      	ldr	r2, [pc, #32]	; (802042c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x130>)
 802040c:	21c1      	movs	r1, #193	; 0xc1
 802040e:	4808      	ldr	r0, [pc, #32]	; (8020430 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x134>)
 8020410:	f007 fe4c 	bl	80280ac <__assert_func>
 8020414:	20198388 	.word	0x20198388
 8020418:	08000504 	.word	0x08000504
 802041c:	0802aeec 	.word	0x0802aeec
 8020420:	0802b6f4 	.word	0x0802b6f4
 8020424:	0802af14 	.word	0x0802af14
 8020428:	0802b338 	.word	0x0802b338
 802042c:	0802c090 	.word	0x0802c090
 8020430:	0802af90 	.word	0x0802af90

08020434 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8020434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020438:	4682      	mov	sl, r0
 802043a:	4851      	ldr	r0, [pc, #324]	; (8020580 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x14c>)
 802043c:	b08f      	sub	sp, #60	; 0x3c
 802043e:	6800      	ldr	r0, [r0, #0]
 8020440:	9104      	str	r1, [sp, #16]
 8020442:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8020446:	f9bd 0064 	ldrsh.w	r0, [sp, #100]	; 0x64
 802044a:	2902      	cmp	r1, #2
 802044c:	9003      	str	r0, [sp, #12]
 802044e:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
 8020452:	9006      	str	r0, [sp, #24]
 8020454:	f000 81cd 	beq.w	80207f2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3be>
 8020458:	9918      	ldr	r1, [sp, #96]	; 0x60
 802045a:	2900      	cmp	r1, #0
 802045c:	f000 81c3 	beq.w	80207e6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3b2>
 8020460:	f9b3 5000 	ldrsh.w	r5, [r3]
 8020464:	8899      	ldrh	r1, [r3, #4]
 8020466:	b2ae      	uxth	r6, r5
 8020468:	4431      	add	r1, r6
 802046a:	b289      	uxth	r1, r1
 802046c:	fa0f fc81 	sxth.w	ip, r1
 8020470:	4565      	cmp	r5, ip
 8020472:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8020476:	da28      	bge.n	80204ca <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 8020478:	9803      	ldr	r0, [sp, #12]
 802047a:	1830      	adds	r0, r6, r0
 802047c:	b280      	uxth	r0, r0
 802047e:	9005      	str	r0, [sp, #20]
 8020480:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 8020484:	4575      	cmp	r5, lr
 8020486:	da20      	bge.n	80204ca <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 8020488:	f8b3 8006 	ldrh.w	r8, [r3, #6]
 802048c:	b2a7      	uxth	r7, r4
 802048e:	4638      	mov	r0, r7
 8020490:	4447      	add	r7, r8
 8020492:	b2bf      	uxth	r7, r7
 8020494:	fa0f f987 	sxth.w	r9, r7
 8020498:	454c      	cmp	r4, r9
 802049a:	da16      	bge.n	80204ca <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 802049c:	4680      	mov	r8, r0
 802049e:	9007      	str	r0, [sp, #28]
 80204a0:	9806      	ldr	r0, [sp, #24]
 80204a2:	4480      	add	r8, r0
 80204a4:	fa1f f888 	uxth.w	r8, r8
 80204a8:	fa0f fb88 	sxth.w	fp, r8
 80204ac:	455c      	cmp	r4, fp
 80204ae:	da0c      	bge.n	80204ca <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 80204b0:	9805      	ldr	r0, [sp, #20]
 80204b2:	45d9      	cmp	r9, fp
 80204b4:	bfc8      	it	gt
 80204b6:	4647      	movgt	r7, r8
 80204b8:	45f4      	cmp	ip, lr
 80204ba:	bfc8      	it	gt
 80204bc:	4601      	movgt	r1, r0
 80204be:	9807      	ldr	r0, [sp, #28]
 80204c0:	1b89      	subs	r1, r1, r6
 80204c2:	1a3f      	subs	r7, r7, r0
 80204c4:	b209      	sxth	r1, r1
 80204c6:	b23f      	sxth	r7, r7
 80204c8:	e005      	b.n	80204d6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xa2>
 80204ca:	2700      	movs	r7, #0
 80204cc:	463c      	mov	r4, r7
 80204ce:	4639      	mov	r1, r7
 80204d0:	463e      	mov	r6, r7
 80204d2:	463d      	mov	r5, r7
 80204d4:	9707      	str	r7, [sp, #28]
 80204d6:	f9b2 b000 	ldrsh.w	fp, [r2]
 80204da:	8890      	ldrh	r0, [r2, #4]
 80204dc:	4458      	add	r0, fp
 80204de:	b280      	uxth	r0, r0
 80204e0:	fa0f fc80 	sxth.w	ip, r0
 80204e4:	45ac      	cmp	ip, r5
 80204e6:	dd51      	ble.n	802058c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 80204e8:	4431      	add	r1, r6
 80204ea:	b289      	uxth	r1, r1
 80204ec:	fa0f fe81 	sxth.w	lr, r1
 80204f0:	45f3      	cmp	fp, lr
 80204f2:	da4b      	bge.n	802058c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 80204f4:	f9b2 8002 	ldrsh.w	r8, [r2, #2]
 80204f8:	88d6      	ldrh	r6, [r2, #6]
 80204fa:	4446      	add	r6, r8
 80204fc:	b2b6      	uxth	r6, r6
 80204fe:	fa0f f986 	sxth.w	r9, r6
 8020502:	454c      	cmp	r4, r9
 8020504:	da42      	bge.n	802058c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 8020506:	9a07      	ldr	r2, [sp, #28]
 8020508:	443a      	add	r2, r7
 802050a:	b297      	uxth	r7, r2
 802050c:	b23a      	sxth	r2, r7
 802050e:	4590      	cmp	r8, r2
 8020510:	9205      	str	r2, [sp, #20]
 8020512:	da3b      	bge.n	802058c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 8020514:	45ab      	cmp	fp, r5
 8020516:	bfb8      	it	lt
 8020518:	46ab      	movlt	fp, r5
 802051a:	4544      	cmp	r4, r8
 802051c:	bfb8      	it	lt
 802051e:	4644      	movlt	r4, r8
 8020520:	45f4      	cmp	ip, lr
 8020522:	bfc8      	it	gt
 8020524:	4608      	movgt	r0, r1
 8020526:	9905      	ldr	r1, [sp, #20]
 8020528:	465a      	mov	r2, fp
 802052a:	4589      	cmp	r9, r1
 802052c:	bfc8      	it	gt
 802052e:	463e      	movgt	r6, r7
 8020530:	f8df c054 	ldr.w	ip, [pc, #84]	; 8020588 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x154>
 8020534:	4f13      	ldr	r7, [pc, #76]	; (8020584 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x150>)
 8020536:	fa1f f58b 	uxth.w	r5, fp
 802053a:	1b36      	subs	r6, r6, r4
 802053c:	1b41      	subs	r1, r0, r5
 802053e:	f8bc c000 	ldrh.w	ip, [ip]
 8020542:	883f      	ldrh	r7, [r7, #0]
 8020544:	fa0f fb86 	sxth.w	fp, r6
 8020548:	fa0f f981 	sxth.w	r9, r1
 802054c:	2a00      	cmp	r2, #0
 802054e:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 8020552:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020556:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
 802055a:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 802055e:	fa0f f68c 	sxth.w	r6, ip
 8020562:	b239      	sxth	r1, r7
 8020564:	f280 812b 	bge.w	80207be <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x38a>
 8020568:	f04f 0e00 	mov.w	lr, #0
 802056c:	fa0f f980 	sxth.w	r9, r0
 8020570:	4675      	mov	r5, lr
 8020572:	4672      	mov	r2, lr
 8020574:	4648      	mov	r0, r9
 8020576:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 802057a:	f8ad e020 	strh.w	lr, [sp, #32]
 802057e:	e015      	b.n	80205ac <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 8020580:	20198158 	.word	0x20198158
 8020584:	2019814e 	.word	0x2019814e
 8020588:	2019814c 	.word	0x2019814c
 802058c:	2200      	movs	r2, #0
 802058e:	48a3      	ldr	r0, [pc, #652]	; (802081c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3e8>)
 8020590:	4615      	mov	r5, r2
 8020592:	f8b0 c000 	ldrh.w	ip, [r0]
 8020596:	4693      	mov	fp, r2
 8020598:	4614      	mov	r4, r2
 802059a:	4610      	mov	r0, r2
 802059c:	4691      	mov	r9, r2
 802059e:	49a0      	ldr	r1, [pc, #640]	; (8020820 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3ec>)
 80205a0:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80205a4:	880f      	ldrh	r7, [r1, #0]
 80205a6:	fa0f f68c 	sxth.w	r6, ip
 80205aa:	b239      	sxth	r1, r7
 80205ac:	1ab2      	subs	r2, r6, r2
 80205ae:	4282      	cmp	r2, r0
 80205b0:	da05      	bge.n	80205be <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x18a>
 80205b2:	ebac 0c05 	sub.w	ip, ip, r5
 80205b6:	fa0f f98c 	sxth.w	r9, ip
 80205ba:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 80205be:	2c00      	cmp	r4, #0
 80205c0:	f2c0 80e8 	blt.w	8020794 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x360>
 80205c4:	4622      	mov	r2, r4
 80205c6:	1a89      	subs	r1, r1, r2
 80205c8:	458b      	cmp	fp, r1
 80205ca:	dd04      	ble.n	80205d6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a2>
 80205cc:	1b3f      	subs	r7, r7, r4
 80205ce:	fa0f fb87 	sxth.w	fp, r7
 80205d2:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 80205d6:	f1b9 0f00 	cmp.w	r9, #0
 80205da:	f340 80d2 	ble.w	8020782 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34e>
 80205de:	f1bb 0f00 	cmp.w	fp, #0
 80205e2:	f340 80ce 	ble.w	8020782 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34e>
 80205e6:	2200      	movs	r2, #0
 80205e8:	8819      	ldrh	r1, [r3, #0]
 80205ea:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 80205ee:	9b03      	ldr	r3, [sp, #12]
 80205f0:	1a6d      	subs	r5, r5, r1
 80205f2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80205f6:	eba4 0408 	sub.w	r4, r4, r8
 80205fa:	9b06      	ldr	r3, [sp, #24]
 80205fc:	a90c      	add	r1, sp, #48	; 0x30
 80205fe:	a80a      	add	r0, sp, #40	; 0x28
 8020600:	b22d      	sxth	r5, r5
 8020602:	b224      	sxth	r4, r4
 8020604:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020608:	920c      	str	r2, [sp, #48]	; 0x30
 802060a:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 802060e:	f8ad b02e 	strh.w	fp, [sp, #46]	; 0x2e
 8020612:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8020616:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
 802061a:	f7f7 f8a7 	bl	801776c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802061e:	a808      	add	r0, sp, #32
 8020620:	f7f7 f87c 	bl	801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020624:	a80c      	add	r0, sp, #48	; 0x30
 8020626:	f7f7 f879 	bl	801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802062a:	4b7e      	ldr	r3, [pc, #504]	; (8020824 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f0>)
 802062c:	681b      	ldr	r3, [r3, #0]
 802062e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8020632:	2a00      	cmp	r2, #0
 8020634:	f040 80ba 	bne.w	80207ac <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x378>
 8020638:	6898      	ldr	r0, [r3, #8]
 802063a:	6803      	ldr	r3, [r0, #0]
 802063c:	4a7a      	ldr	r2, [pc, #488]	; (8020828 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f4>)
 802063e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020640:	4293      	cmp	r3, r2
 8020642:	f040 80c4 	bne.w	80207ce <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x39a>
 8020646:	7a00      	ldrb	r0, [r0, #8]
 8020648:	2801      	cmp	r0, #1
 802064a:	f000 80ba 	beq.w	80207c2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x38e>
 802064e:	f0c0 80b2 	bcc.w	80207b6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x382>
 8020652:	2802      	cmp	r0, #2
 8020654:	f040 80da 	bne.w	802080c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3d8>
 8020658:	2310      	movs	r3, #16
 802065a:	2604      	movs	r6, #4
 802065c:	9305      	str	r3, [sp, #20]
 802065e:	9b04      	ldr	r3, [sp, #16]
 8020660:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8020664:	681b      	ldr	r3, [r3, #0]
 8020666:	fb06 f101 	mul.w	r1, r6, r1
 802066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802066c:	4a6f      	ldr	r2, [pc, #444]	; (802082c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f8>)
 802066e:	9103      	str	r1, [sp, #12]
 8020670:	4293      	cmp	r3, r2
 8020672:	f040 80ae 	bne.w	80207d2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x39e>
 8020676:	4b6e      	ldr	r3, [pc, #440]	; (8020830 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3fc>)
 8020678:	881f      	ldrh	r7, [r3, #0]
 802067a:	2f00      	cmp	r7, #0
 802067c:	f000 80bf 	beq.w	80207fe <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3ca>
 8020680:	9b04      	ldr	r3, [sp, #16]
 8020682:	7a1b      	ldrb	r3, [r3, #8]
 8020684:	2b02      	cmp	r3, #2
 8020686:	f000 80a0 	beq.w	80207ca <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x396>
 802068a:	2b01      	cmp	r3, #1
 802068c:	bf14      	ite	ne
 802068e:	2302      	movne	r3, #2
 8020690:	2303      	moveq	r3, #3
 8020692:	fb17 f703 	smulbb	r7, r7, r3
 8020696:	b2bf      	uxth	r7, r7
 8020698:	4a62      	ldr	r2, [pc, #392]	; (8020824 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f0>)
 802069a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802069e:	6810      	ldr	r0, [r2, #0]
 80206a0:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 80206a4:	9a03      	ldr	r2, [sp, #12]
 80206a6:	fb02 3808 	mla	r8, r2, r8, r3
 80206aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80206ac:	6803      	ldr	r3, [r0, #0]
 80206ae:	4442      	add	r2, r8
 80206b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80206b2:	9204      	str	r2, [sp, #16]
 80206b4:	4798      	blx	r3
 80206b6:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80206ba:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80206be:	fb07 f202 	mul.w	r2, r7, r2
 80206c2:	fb06 2303 	mla	r3, r6, r3, r2
 80206c6:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8020860 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x42c>
 80206ca:	18c3      	adds	r3, r0, r3
 80206cc:	f8d8 2000 	ldr.w	r2, [r8]
 80206d0:	9306      	str	r3, [sp, #24]
 80206d2:	2a00      	cmp	r2, #0
 80206d4:	f000 8081 	beq.w	80207da <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 80206d8:	2600      	movs	r6, #0
 80206da:	4610      	mov	r0, r2
 80206dc:	f7fc fd84 	bl	801d1e8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 80206e0:	9b03      	ldr	r3, [sp, #12]
 80206e2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 80206e6:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 80206ea:	9300      	str	r3, [sp, #0]
 80206ec:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 80206f0:	f7fa fb38 	bl	801ad64 <nema_bind_dst_tex>
 80206f4:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80206f8:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80206fc:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8020700:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8020704:	f7fa fa7a 	bl	801abfc <nema_set_clip>
 8020708:	f04f 33ff 	mov.w	r3, #4294967295
 802070c:	2201      	movs	r2, #1
 802070e:	4631      	mov	r1, r6
 8020710:	f240 5004 	movw	r0, #1284	; 0x504
 8020714:	f7fc f8ba 	bl	801c88c <nema_set_blend>
 8020718:	e9dd 3005 	ldrd	r3, r0, [sp, #20]
 802071c:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8020720:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 8020724:	9700      	str	r7, [sp, #0]
 8020726:	9601      	str	r6, [sp, #4]
 8020728:	f7fa faa4 	bl	801ac74 <nema_bind_src_tex>
 802072c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8020730:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8020734:	f7fa fbde 	bl	801aef4 <nema_blit>
 8020738:	f8d8 0000 	ldr.w	r0, [r8]
 802073c:	2800      	cmp	r0, #0
 802073e:	d04c      	beq.n	80207da <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 8020740:	f7fc fd72 	bl	801d228 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8020744:	f8d8 0000 	ldr.w	r0, [r8]
 8020748:	2800      	cmp	r0, #0
 802074a:	d046      	beq.n	80207da <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 802074c:	6803      	ldr	r3, [r0, #0]
 802074e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020750:	4798      	blx	r3
 8020752:	f8d8 0000 	ldr.w	r0, [r8]
 8020756:	2800      	cmp	r0, #0
 8020758:	d03f      	beq.n	80207da <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 802075a:	6803      	ldr	r3, [r0, #0]
 802075c:	4637      	mov	r7, r6
 802075e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020760:	4798      	blx	r3
 8020762:	4650      	mov	r0, sl
 8020764:	f365 060f 	bfi	r6, r5, #0, #16
 8020768:	f369 070f 	bfi	r7, r9, #0, #16
 802076c:	f364 461f 	bfi	r6, r4, #16, #16
 8020770:	f36b 471f 	bfi	r7, fp, #16, #16
 8020774:	f8ca 6000 	str.w	r6, [sl]
 8020778:	f8ca 7004 	str.w	r7, [sl, #4]
 802077c:	b00f      	add	sp, #60	; 0x3c
 802077e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020782:	2300      	movs	r3, #0
 8020784:	4650      	mov	r0, sl
 8020786:	f8ca 3000 	str.w	r3, [sl]
 802078a:	f8ca 3004 	str.w	r3, [sl, #4]
 802078e:	b00f      	add	sp, #60	; 0x3c
 8020790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020794:	2000      	movs	r0, #0
 8020796:	eb0b 0604 	add.w	r6, fp, r4
 802079a:	fa0f fb86 	sxth.w	fp, r6
 802079e:	4604      	mov	r4, r0
 80207a0:	4602      	mov	r2, r0
 80207a2:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 80207a6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80207aa:	e70c      	b.n	80205c6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x192>
 80207ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80207ae:	2800      	cmp	r0, #0
 80207b0:	f47f af43 	bne.w	802063a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x206>
 80207b4:	e740      	b.n	8020638 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x204>
 80207b6:	2304      	movs	r3, #4
 80207b8:	2602      	movs	r6, #2
 80207ba:	9305      	str	r3, [sp, #20]
 80207bc:	e74f      	b.n	802065e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22a>
 80207be:	4648      	mov	r0, r9
 80207c0:	e6f4      	b.n	80205ac <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 80207c2:	2339      	movs	r3, #57	; 0x39
 80207c4:	2603      	movs	r6, #3
 80207c6:	9305      	str	r3, [sp, #20]
 80207c8:	e749      	b.n	802065e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22a>
 80207ca:	2304      	movs	r3, #4
 80207cc:	e761      	b.n	8020692 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x25e>
 80207ce:	4798      	blx	r3
 80207d0:	e73a      	b.n	8020648 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>
 80207d2:	9804      	ldr	r0, [sp, #16]
 80207d4:	4798      	blx	r3
 80207d6:	4607      	mov	r7, r0
 80207d8:	e75e      	b.n	8020698 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x264>
 80207da:	4b16      	ldr	r3, [pc, #88]	; (8020834 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x400>)
 80207dc:	4a16      	ldr	r2, [pc, #88]	; (8020838 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x404>)
 80207de:	217c      	movs	r1, #124	; 0x7c
 80207e0:	4816      	ldr	r0, [pc, #88]	; (802083c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x408>)
 80207e2:	f007 fc63 	bl	80280ac <__assert_func>
 80207e6:	4b16      	ldr	r3, [pc, #88]	; (8020840 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x40c>)
 80207e8:	4a16      	ldr	r2, [pc, #88]	; (8020844 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 80207ea:	21f1      	movs	r1, #241	; 0xf1
 80207ec:	4816      	ldr	r0, [pc, #88]	; (8020848 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 80207ee:	f007 fc5d 	bl	80280ac <__assert_func>
 80207f2:	4b16      	ldr	r3, [pc, #88]	; (802084c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x418>)
 80207f4:	4a13      	ldr	r2, [pc, #76]	; (8020844 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 80207f6:	21f0      	movs	r1, #240	; 0xf0
 80207f8:	4813      	ldr	r0, [pc, #76]	; (8020848 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 80207fa:	f007 fc57 	bl	80280ac <__assert_func>
 80207fe:	4b14      	ldr	r3, [pc, #80]	; (8020850 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x41c>)
 8020800:	4a14      	ldr	r2, [pc, #80]	; (8020854 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x420>)
 8020802:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8020806:	4814      	ldr	r0, [pc, #80]	; (8020858 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x424>)
 8020808:	f007 fc50 	bl	80280ac <__assert_func>
 802080c:	4b13      	ldr	r3, [pc, #76]	; (802085c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x428>)
 802080e:	4a0d      	ldr	r2, [pc, #52]	; (8020844 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 8020810:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8020814:	480c      	ldr	r0, [pc, #48]	; (8020848 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 8020816:	f007 fc49 	bl	80280ac <__assert_func>
 802081a:	bf00      	nop
 802081c:	2019814c 	.word	0x2019814c
 8020820:	2019814e 	.word	0x2019814e
 8020824:	20198158 	.word	0x20198158
 8020828:	0801d2cd 	.word	0x0801d2cd
 802082c:	0801eead 	.word	0x0801eead
 8020830:	20198152 	.word	0x20198152
 8020834:	0802aeec 	.word	0x0802aeec
 8020838:	0802b6f4 	.word	0x0802b6f4
 802083c:	0802af14 	.word	0x0802af14
 8020840:	0802b1e8 	.word	0x0802b1e8
 8020844:	0802bf74 	.word	0x0802bf74
 8020848:	0802af90 	.word	0x0802af90
 802084c:	0802b134 	.word	0x0802b134
 8020850:	0802b464 	.word	0x0802b464
 8020854:	0802c220 	.word	0x0802c220
 8020858:	0802b4a8 	.word	0x0802b4a8
 802085c:	0802b238 	.word	0x0802b238
 8020860:	20198388 	.word	0x20198388

08020864 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8020864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020868:	b085      	sub	sp, #20
 802086a:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802086e:	e9dd 950e 	ldrd	r9, r5, [sp, #56]	; 0x38
 8020872:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8020876:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 802087a:	2e00      	cmp	r6, #0
 802087c:	d05b      	beq.n	8020936 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 802087e:	f9b5 e004 	ldrsh.w	lr, [r5, #4]
 8020882:	f1be 0f00 	cmp.w	lr, #0
 8020886:	dd56      	ble.n	8020936 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 8020888:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 802088c:	f1be 0f00 	cmp.w	lr, #0
 8020890:	dd51      	ble.n	8020936 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 8020892:	f3c8 0b87 	ubfx	fp, r8, #2, #8
 8020896:	f1bb 0f0b 	cmp.w	fp, #11
 802089a:	f000 8165 	beq.w	8020b68 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x304>
 802089e:	f1bb 0f0d 	cmp.w	fp, #13
 80208a2:	4684      	mov	ip, r0
 80208a4:	4614      	mov	r4, r2
 80208a6:	461f      	mov	r7, r3
 80208a8:	d03c      	beq.n	8020924 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xc0>
 80208aa:	f8df a368 	ldr.w	sl, [pc, #872]	; 8020c14 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3b0>
 80208ae:	f8da 0000 	ldr.w	r0, [sl]
 80208b2:	2800      	cmp	r0, #0
 80208b4:	f000 818d 	beq.w	8020bd2 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80208b8:	f8cd c00c 	str.w	ip, [sp, #12]
 80208bc:	f7fc fc94 	bl	801d1e8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 80208c0:	9b03      	ldr	r3, [sp, #12]
 80208c2:	681a      	ldr	r2, [r3, #0]
 80208c4:	4618      	mov	r0, r3
 80208c6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80208c8:	4798      	blx	r3
 80208ca:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80208ce:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80208d2:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80208d6:	f9b5 0000 	ldrsh.w	r0, [r5]
 80208da:	f7fa f98f 	bl	801abfc <nema_set_clip>
 80208de:	2200      	movs	r2, #0
 80208e0:	4633      	mov	r3, r6
 80208e2:	4611      	mov	r1, r2
 80208e4:	4610      	mov	r0, r2
 80208e6:	f7fa f9bd 	bl	801ac64 <nema_rgba>
 80208ea:	f7fc fb95 	bl	801d018 <nema_set_const_color>
 80208ee:	f04f 33ff 	mov.w	r3, #4294967295
 80208f2:	2201      	movs	r2, #1
 80208f4:	2100      	movs	r1, #0
 80208f6:	48bd      	ldr	r0, [pc, #756]	; (8020bec <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x388>)
 80208f8:	f7fb ffc8 	bl	801c88c <nema_set_blend>
 80208fc:	f1bb 0f0d 	cmp.w	fp, #13
 8020900:	f200 816d 	bhi.w	8020bde <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x37a>
 8020904:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8020908:	00c700d3 	.word	0x00c700d3
 802090c:	016b00dc 	.word	0x016b00dc
 8020910:	016b016b 	.word	0x016b016b
 8020914:	016b016b 	.word	0x016b016b
 8020918:	016b016b 	.word	0x016b016b
 802091c:	016b016b 	.word	0x016b016b
 8020920:	001a00b2 	.word	0x001a00b2
 8020924:	685b      	ldr	r3, [r3, #4]
 8020926:	b133      	cbz	r3, 8020936 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 8020928:	781b      	ldrb	r3, [r3, #0]
 802092a:	f1a3 0216 	sub.w	r2, r3, #22
 802092e:	2a01      	cmp	r2, #1
 8020930:	d9bb      	bls.n	80208aa <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x46>
 8020932:	2b12      	cmp	r3, #18
 8020934:	d0b9      	beq.n	80208aa <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x46>
 8020936:	b005      	add	sp, #20
 8020938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802093c:	f04f 36ff 	mov.w	r6, #4294967295
 8020940:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020944:	687b      	ldr	r3, [r7, #4]
 8020946:	6838      	ldr	r0, [r7, #0]
 8020948:	781b      	ldrb	r3, [r3, #0]
 802094a:	f008 0501 	and.w	r5, r8, #1
 802094e:	e9cd 6500 	strd	r6, r5, [sp]
 8020952:	f7fa f98f 	bl	801ac74 <nema_bind_src_tex>
 8020956:	2001      	movs	r0, #1
 8020958:	f7fa ffbc 	bl	801b8d4 <nema_enable_tiling>
 802095c:	2300      	movs	r3, #0
 802095e:	461a      	mov	r2, r3
 8020960:	4619      	mov	r1, r3
 8020962:	4618      	mov	r0, r3
 8020964:	f7fa ffca 	bl	801b8fc <nema_enable_aa>
 8020968:	f9b9 3000 	ldrsh.w	r3, [r9]
 802096c:	edd4 7a00 	vldr	s15, [r4]
 8020970:	ee02 3a10 	vmov	s4, r3
 8020974:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 8020978:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 802097c:	ee02 3a90 	vmov	s5, r3
 8020980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020984:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8020bf0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8020988:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 802098c:	edd4 7a01 	vldr	s15, [r4, #4]
 8020990:	eeb0 0a42 	vmov.f32	s0, s4
 8020994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020998:	eea7 0a26 	vfma.f32	s0, s14, s13
 802099c:	eef0 0a62 	vmov.f32	s1, s5
 80209a0:	ed94 7a03 	vldr	s14, [r4, #12]
 80209a4:	4b93      	ldr	r3, [pc, #588]	; (8020bf4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x390>)
 80209a6:	eee7 0aa6 	vfma.f32	s1, s15, s13
 80209aa:	781b      	ldrb	r3, [r3, #0]
 80209ac:	edd4 7a04 	vldr	s15, [r4, #16]
 80209b0:	2b01      	cmp	r3, #1
 80209b2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80209b6:	f000 808c 	beq.w	8020ad2 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x26e>
 80209ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80209c2:	f240 80ea 	bls.w	8020b9a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80209c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209ca:	bf94      	ite	ls
 80209cc:	2001      	movls	r0, #1
 80209ce:	2002      	movhi	r0, #2
 80209d0:	edd4 7a05 	vldr	s15, [r4, #20]
 80209d4:	ed94 6a08 	vldr	s12, [r4, #32]
 80209d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80209dc:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80209e0:	edd4 7a06 	vldr	s15, [r4, #24]
 80209e4:	eddf 6a82 	vldr	s13, [pc, #520]	; 8020bf0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 80209e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80209ec:	eeb0 1a42 	vmov.f32	s2, s4
 80209f0:	eef0 1a62 	vmov.f32	s3, s5
 80209f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209f8:	eee7 1aa6 	vfma.f32	s3, s15, s13
 80209fc:	eea7 1a26 	vfma.f32	s2, s14, s13
 8020a00:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8020a04:	f240 80c1 	bls.w	8020b8a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x326>
 8020a08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a10:	bf94      	ite	ls
 8020a12:	2101      	movls	r1, #1
 8020a14:	2102      	movhi	r1, #2
 8020a16:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8020a1a:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8020a1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020a22:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8020a26:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8020a2a:	eddf 6a71 	vldr	s13, [pc, #452]	; 8020bf0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8020a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a36:	eee7 2aa6 	vfma.f32	s5, s15, s13
 8020a3a:	eea7 2a26 	vfma.f32	s4, s14, s13
 8020a3e:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8020a42:	f240 809a 	bls.w	8020b7a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x316>
 8020a46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a4e:	bf94      	ite	ls
 8020a50:	2201      	movls	r2, #1
 8020a52:	2202      	movhi	r2, #2
 8020a54:	f7fa fb44 	bl	801b0e0 <nema_blit_tri_fit>
 8020a58:	f8da 0000 	ldr.w	r0, [sl]
 8020a5c:	2800      	cmp	r0, #0
 8020a5e:	f000 80b8 	beq.w	8020bd2 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8020a62:	b005      	add	sp, #20
 8020a64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a68:	f7fc bbde 	b.w	801d228 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8020a6c:	4a62      	ldr	r2, [pc, #392]	; (8020bf8 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x394>)
 8020a6e:	23ff      	movs	r3, #255	; 0xff
 8020a70:	6810      	ldr	r0, [r2, #0]
 8020a72:	f008 0501 	and.w	r5, r8, #1
 8020a76:	b2c2      	uxtb	r2, r0
 8020a78:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8020a7c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8020a80:	f7fa f8f0 	bl	801ac64 <nema_rgba>
 8020a84:	f7fa f8ae 	bl	801abe4 <nema_set_tex_color>
 8020a88:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020a8c:	6838      	ldr	r0, [r7, #0]
 8020a8e:	2329      	movs	r3, #41	; 0x29
 8020a90:	f04f 36ff 	mov.w	r6, #4294967295
 8020a94:	e75b      	b.n	802094e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 8020a96:	2339      	movs	r3, #57	; 0x39
 8020a98:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020a9c:	f04f 0c03 	mov.w	ip, #3
 8020aa0:	6838      	ldr	r0, [r7, #0]
 8020aa2:	f008 0501 	and.w	r5, r8, #1
 8020aa6:	693e      	ldr	r6, [r7, #16]
 8020aa8:	fb06 f60c 	mul.w	r6, r6, ip
 8020aac:	e74f      	b.n	802094e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 8020aae:	f008 0501 	and.w	r5, r8, #1
 8020ab2:	6838      	ldr	r0, [r7, #0]
 8020ab4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020ab8:	2304      	movs	r3, #4
 8020aba:	f04f 0c02 	mov.w	ip, #2
 8020abe:	e7f2      	b.n	8020aa6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x242>
 8020ac0:	2310      	movs	r3, #16
 8020ac2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020ac6:	f04f 0c04 	mov.w	ip, #4
 8020aca:	6838      	ldr	r0, [r7, #0]
 8020acc:	f008 0501 	and.w	r5, r8, #1
 8020ad0:	e7e9      	b.n	8020aa6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x242>
 8020ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ad6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020ada:	d974      	bls.n	8020bc6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x362>
 8020adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ae0:	bf94      	ite	ls
 8020ae2:	2002      	movls	r0, #2
 8020ae4:	2003      	movhi	r0, #3
 8020ae6:	edd4 7a05 	vldr	s15, [r4, #20]
 8020aea:	ed94 6a08 	vldr	s12, [r4, #32]
 8020aee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020af2:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8020af6:	edd4 7a06 	vldr	s15, [r4, #24]
 8020afa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8020bf0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8020afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020b02:	eeb0 1a42 	vmov.f32	s2, s4
 8020b06:	eef0 1a62 	vmov.f32	s3, s5
 8020b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b0e:	eee7 1aa6 	vfma.f32	s3, s15, s13
 8020b12:	eea7 1a26 	vfma.f32	s2, s14, s13
 8020b16:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8020b1a:	d94c      	bls.n	8020bb6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x352>
 8020b1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b24:	bf94      	ite	ls
 8020b26:	2102      	movls	r1, #2
 8020b28:	2103      	movhi	r1, #3
 8020b2a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8020b2e:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8020b32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020b36:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8020b3a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8020b3e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8020bf0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8020b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b4a:	eee7 2aa6 	vfma.f32	s5, s15, s13
 8020b4e:	eea7 2a26 	vfma.f32	s4, s14, s13
 8020b52:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8020b56:	d926      	bls.n	8020ba6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8020b58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b60:	bf94      	ite	ls
 8020b62:	2202      	movls	r2, #2
 8020b64:	2203      	movhi	r2, #3
 8020b66:	e775      	b.n	8020a54 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 8020b68:	e9cd 6a11 	strd	r6, sl, [sp, #68]	; 0x44
 8020b6c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8020b70:	b005      	add	sp, #20
 8020b72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b76:	f7f6 b887 	b.w	8016c88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 8020b7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b82:	bf94      	ite	ls
 8020b84:	2200      	movls	r2, #0
 8020b86:	2203      	movhi	r2, #3
 8020b88:	e764      	b.n	8020a54 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 8020b8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b92:	bf94      	ite	ls
 8020b94:	2100      	movls	r1, #0
 8020b96:	2103      	movhi	r1, #3
 8020b98:	e73d      	b.n	8020a16 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1b2>
 8020b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b9e:	bf94      	ite	ls
 8020ba0:	2000      	movls	r0, #0
 8020ba2:	2003      	movhi	r0, #3
 8020ba4:	e714      	b.n	80209d0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x16c>
 8020ba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bae:	bf94      	ite	ls
 8020bb0:	2201      	movls	r2, #1
 8020bb2:	2200      	movhi	r2, #0
 8020bb4:	e74e      	b.n	8020a54 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 8020bb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bbe:	bf94      	ite	ls
 8020bc0:	2101      	movls	r1, #1
 8020bc2:	2100      	movhi	r1, #0
 8020bc4:	e7b1      	b.n	8020b2a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c6>
 8020bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bca:	bf94      	ite	ls
 8020bcc:	2001      	movls	r0, #1
 8020bce:	2000      	movhi	r0, #0
 8020bd0:	e789      	b.n	8020ae6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x282>
 8020bd2:	4b0a      	ldr	r3, [pc, #40]	; (8020bfc <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x398>)
 8020bd4:	4a0a      	ldr	r2, [pc, #40]	; (8020c00 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x39c>)
 8020bd6:	217c      	movs	r1, #124	; 0x7c
 8020bd8:	480a      	ldr	r0, [pc, #40]	; (8020c04 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a0>)
 8020bda:	f007 fa67 	bl	80280ac <__assert_func>
 8020bde:	4b0a      	ldr	r3, [pc, #40]	; (8020c08 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a4>)
 8020be0:	4a0a      	ldr	r2, [pc, #40]	; (8020c0c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>)
 8020be2:	f240 21d3 	movw	r1, #723	; 0x2d3
 8020be6:	480a      	ldr	r0, [pc, #40]	; (8020c10 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ac>)
 8020be8:	f007 fa60 	bl	80280ac <__assert_func>
 8020bec:	08000504 	.word	0x08000504
 8020bf0:	3d800000 	.word	0x3d800000
 8020bf4:	20198150 	.word	0x20198150
 8020bf8:	20198160 	.word	0x20198160
 8020bfc:	0802aeec 	.word	0x0802aeec
 8020c00:	0802b6f4 	.word	0x0802b6f4
 8020c04:	0802af14 	.word	0x0802af14
 8020c08:	0802ade4 	.word	0x0802ade4
 8020c0c:	0802ba98 	.word	0x0802ba98
 8020c10:	0802af90 	.word	0x0802af90
 8020c14:	20198388 	.word	0x20198388

08020c18 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8020c18:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8020c1c:	2700      	movs	r7, #0
 8020c1e:	4a2b      	ldr	r2, [pc, #172]	; (8020ccc <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xb4>)
 8020c20:	4b2b      	ldr	r3, [pc, #172]	; (8020cd0 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xb8>)
 8020c22:	4d2c      	ldr	r5, [pc, #176]	; (8020cd4 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xbc>)
 8020c24:	8812      	ldrh	r2, [r2, #0]
 8020c26:	881b      	ldrh	r3, [r3, #0]
 8020c28:	b088      	sub	sp, #32
 8020c2a:	4604      	mov	r4, r0
 8020c2c:	6828      	ldr	r0, [r5, #0]
 8020c2e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8020c32:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020c36:	9706      	str	r7, [sp, #24]
 8020c38:	6803      	ldr	r3, [r0, #0]
 8020c3a:	4689      	mov	r9, r1
 8020c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c3e:	4798      	blx	r3
 8020c40:	6823      	ldr	r3, [r4, #0]
 8020c42:	4a25      	ldr	r2, [pc, #148]	; (8020cd8 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc0>)
 8020c44:	68de      	ldr	r6, [r3, #12]
 8020c46:	4601      	mov	r1, r0
 8020c48:	4296      	cmp	r6, r2
 8020c4a:	d134      	bne.n	8020cb6 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x9e>
 8020c4c:	682a      	ldr	r2, [r5, #0]
 8020c4e:	691d      	ldr	r5, [r3, #16]
 8020c50:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8020c54:	b9a3      	cbnz	r3, 8020c80 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x68>
 8020c56:	6890      	ldr	r0, [r2, #8]
 8020c58:	4a20      	ldr	r2, [pc, #128]	; (8020cdc <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc4>)
 8020c5a:	6803      	ldr	r3, [r0, #0]
 8020c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020c5e:	4293      	cmp	r3, r2
 8020c60:	d116      	bne.n	8020c90 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x78>
 8020c62:	4b1f      	ldr	r3, [pc, #124]	; (8020ce0 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc8>)
 8020c64:	7a02      	ldrb	r2, [r0, #8]
 8020c66:	429d      	cmp	r5, r3
 8020c68:	d119      	bne.n	8020c9e <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8020c6a:	23ff      	movs	r3, #255	; 0xff
 8020c6c:	f8cd 9000 	str.w	r9, [sp]
 8020c70:	9301      	str	r3, [sp, #4]
 8020c72:	4620      	mov	r0, r4
 8020c74:	ab06      	add	r3, sp, #24
 8020c76:	f7ff fa63 	bl	8020140 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>
 8020c7a:	b008      	add	sp, #32
 8020c7c:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8020c80:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8020c82:	2800      	cmp	r0, #0
 8020c84:	d0e7      	beq.n	8020c56 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x3e>
 8020c86:	6803      	ldr	r3, [r0, #0]
 8020c88:	4a14      	ldr	r2, [pc, #80]	; (8020cdc <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc4>)
 8020c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020c8c:	4293      	cmp	r3, r2
 8020c8e:	d0e8      	beq.n	8020c62 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x4a>
 8020c90:	9105      	str	r1, [sp, #20]
 8020c92:	4798      	blx	r3
 8020c94:	4b12      	ldr	r3, [pc, #72]	; (8020ce0 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc8>)
 8020c96:	4602      	mov	r2, r0
 8020c98:	429d      	cmp	r5, r3
 8020c9a:	9905      	ldr	r1, [sp, #20]
 8020c9c:	d0e5      	beq.n	8020c6a <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x52>
 8020c9e:	2600      	movs	r6, #0
 8020ca0:	23ff      	movs	r3, #255	; 0xff
 8020ca2:	f8cd 9000 	str.w	r9, [sp]
 8020ca6:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8020caa:	4620      	mov	r0, r4
 8020cac:	ab06      	add	r3, sp, #24
 8020cae:	47a8      	blx	r5
 8020cb0:	b008      	add	sp, #32
 8020cb2:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8020cb6:	22ff      	movs	r2, #255	; 0xff
 8020cb8:	9701      	str	r7, [sp, #4]
 8020cba:	9200      	str	r2, [sp, #0]
 8020cbc:	464b      	mov	r3, r9
 8020cbe:	4620      	mov	r0, r4
 8020cc0:	aa06      	add	r2, sp, #24
 8020cc2:	47b0      	blx	r6
 8020cc4:	b008      	add	sp, #32
 8020cc6:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8020cca:	bf00      	nop
 8020ccc:	20198152 	.word	0x20198152
 8020cd0:	20198154 	.word	0x20198154
 8020cd4:	20198158 	.word	0x20198158
 8020cd8:	08020271 	.word	0x08020271
 8020cdc:	0801d2cd 	.word	0x0801d2cd
 8020ce0:	080202fd 	.word	0x080202fd

08020ce4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ce8:	4604      	mov	r4, r0
 8020cea:	4865      	ldr	r0, [pc, #404]	; (8020e80 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19c>)
 8020cec:	460f      	mov	r7, r1
 8020cee:	6800      	ldr	r0, [r0, #0]
 8020cf0:	b093      	sub	sp, #76	; 0x4c
 8020cf2:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8020cf6:	2902      	cmp	r1, #2
 8020cf8:	f000 81f2 	beq.w	80210e0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3fc>
 8020cfc:	f10d 0948 	add.w	r9, sp, #72	; 0x48
 8020d00:	f829 3d1c 	strh.w	r3, [r9, #-28]!
 8020d04:	4648      	mov	r0, r9
 8020d06:	4615      	mov	r5, r2
 8020d08:	f7f9 fbbc 	bl	801a484 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020d0c:	6823      	ldr	r3, [r4, #0]
 8020d0e:	4a5d      	ldr	r2, [pc, #372]	; (8020e84 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a0>)
 8020d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020d12:	4680      	mov	r8, r0
 8020d14:	4293      	cmp	r3, r2
 8020d16:	f040 81b5 	bne.w	8021084 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3a0>
 8020d1a:	7a20      	ldrb	r0, [r4, #8]
 8020d1c:	4580      	cmp	r8, r0
 8020d1e:	f040 81d9 	bne.w	80210d4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3f0>
 8020d22:	4648      	mov	r0, r9
 8020d24:	f7f9 fb2a 	bl	801a37c <_ZNK8touchgfx6Bitmap7getDataEv>
 8020d28:	4683      	mov	fp, r0
 8020d2a:	2800      	cmp	r0, #0
 8020d2c:	f000 81cc 	beq.w	80210c8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3e4>
 8020d30:	6823      	ldr	r3, [r4, #0]
 8020d32:	4648      	mov	r0, r9
 8020d34:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8020d38:	f7f9 fab8 	bl	801a2ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020d3c:	9005      	str	r0, [sp, #20]
 8020d3e:	4648      	mov	r0, r9
 8020d40:	f7f9 fae8 	bl	801a314 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020d44:	4b50      	ldr	r3, [pc, #320]	; (8020e88 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a4>)
 8020d46:	9006      	str	r0, [sp, #24]
 8020d48:	4598      	cmp	r8, r3
 8020d4a:	f040 818e 	bne.w	802106a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x386>
 8020d4e:	4b4c      	ldr	r3, [pc, #304]	; (8020e80 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19c>)
 8020d50:	681b      	ldr	r3, [r3, #0]
 8020d52:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8020d56:	2b02      	cmp	r3, #2
 8020d58:	f000 81c8 	beq.w	80210ec <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x408>
 8020d5c:	f9b5 8000 	ldrsh.w	r8, [r5]
 8020d60:	88ab      	ldrh	r3, [r5, #4]
 8020d62:	fa1f fe88 	uxth.w	lr, r8
 8020d66:	4473      	add	r3, lr
 8020d68:	b29b      	uxth	r3, r3
 8020d6a:	b218      	sxth	r0, r3
 8020d6c:	4580      	cmp	r8, r0
 8020d6e:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
 8020d72:	da2a      	bge.n	8020dca <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8020d74:	9a05      	ldr	r2, [sp, #20]
 8020d76:	eb0e 0102 	add.w	r1, lr, r2
 8020d7a:	b28a      	uxth	r2, r1
 8020d7c:	9207      	str	r2, [sp, #28]
 8020d7e:	f9bd c01c 	ldrsh.w	ip, [sp, #28]
 8020d82:	45e0      	cmp	r8, ip
 8020d84:	da21      	bge.n	8020dca <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8020d86:	88ea      	ldrh	r2, [r5, #6]
 8020d88:	fa1f f68a 	uxth.w	r6, sl
 8020d8c:	4432      	add	r2, r6
 8020d8e:	b292      	uxth	r2, r2
 8020d90:	b211      	sxth	r1, r2
 8020d92:	458a      	cmp	sl, r1
 8020d94:	9108      	str	r1, [sp, #32]
 8020d96:	da18      	bge.n	8020dca <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8020d98:	9906      	ldr	r1, [sp, #24]
 8020d9a:	eb06 0901 	add.w	r9, r6, r1
 8020d9e:	fa1f f989 	uxth.w	r9, r9
 8020da2:	fa0f f189 	sxth.w	r1, r9
 8020da6:	458a      	cmp	sl, r1
 8020da8:	9109      	str	r1, [sp, #36]	; 0x24
 8020daa:	da0e      	bge.n	8020dca <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8020dac:	9907      	ldr	r1, [sp, #28]
 8020dae:	4560      	cmp	r0, ip
 8020db0:	bfc8      	it	gt
 8020db2:	460b      	movgt	r3, r1
 8020db4:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8020db8:	4281      	cmp	r1, r0
 8020dba:	bfc8      	it	gt
 8020dbc:	464a      	movgt	r2, r9
 8020dbe:	eba3 030e 	sub.w	r3, r3, lr
 8020dc2:	1b92      	subs	r2, r2, r6
 8020dc4:	b21b      	sxth	r3, r3
 8020dc6:	b212      	sxth	r2, r2
 8020dc8:	e005      	b.n	8020dd6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xf2>
 8020dca:	2200      	movs	r2, #0
 8020dcc:	4616      	mov	r6, r2
 8020dce:	4692      	mov	sl, r2
 8020dd0:	4613      	mov	r3, r2
 8020dd2:	4696      	mov	lr, r2
 8020dd4:	4690      	mov	r8, r2
 8020dd6:	f9b7 0000 	ldrsh.w	r0, [r7]
 8020dda:	88b9      	ldrh	r1, [r7, #4]
 8020ddc:	4401      	add	r1, r0
 8020dde:	b289      	uxth	r1, r1
 8020de0:	fa0f f981 	sxth.w	r9, r1
 8020de4:	45c8      	cmp	r8, r9
 8020de6:	da55      	bge.n	8020e94 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8020de8:	449e      	add	lr, r3
 8020dea:	fa1f fe8e 	uxth.w	lr, lr
 8020dee:	fa0f f38e 	sxth.w	r3, lr
 8020df2:	4298      	cmp	r0, r3
 8020df4:	9307      	str	r3, [sp, #28]
 8020df6:	da4d      	bge.n	8020e94 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8020df8:	f9b7 c002 	ldrsh.w	ip, [r7, #2]
 8020dfc:	88fb      	ldrh	r3, [r7, #6]
 8020dfe:	4463      	add	r3, ip
 8020e00:	b29b      	uxth	r3, r3
 8020e02:	b21f      	sxth	r7, r3
 8020e04:	45ba      	cmp	sl, r7
 8020e06:	da45      	bge.n	8020e94 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8020e08:	4416      	add	r6, r2
 8020e0a:	b2b2      	uxth	r2, r6
 8020e0c:	b216      	sxth	r6, r2
 8020e0e:	45b4      	cmp	ip, r6
 8020e10:	9608      	str	r6, [sp, #32]
 8020e12:	da3f      	bge.n	8020e94 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8020e14:	4540      	cmp	r0, r8
 8020e16:	9e07      	ldr	r6, [sp, #28]
 8020e18:	bfb8      	it	lt
 8020e1a:	4640      	movlt	r0, r8
 8020e1c:	45d4      	cmp	ip, sl
 8020e1e:	bfb8      	it	lt
 8020e20:	46d4      	movlt	ip, sl
 8020e22:	45b1      	cmp	r9, r6
 8020e24:	bfc8      	it	gt
 8020e26:	4671      	movgt	r1, lr
 8020e28:	9e08      	ldr	r6, [sp, #32]
 8020e2a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8020e8c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a8>
 8020e2e:	42b7      	cmp	r7, r6
 8020e30:	bfc8      	it	gt
 8020e32:	4613      	movgt	r3, r2
 8020e34:	f8df e058 	ldr.w	lr, [pc, #88]	; 8020e90 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ac>
 8020e38:	b282      	uxth	r2, r0
 8020e3a:	eba3 030c 	sub.w	r3, r3, ip
 8020e3e:	1a8f      	subs	r7, r1, r2
 8020e40:	f8b8 a000 	ldrh.w	sl, [r8]
 8020e44:	f8be 9000 	ldrh.w	r9, [lr]
 8020e48:	b21b      	sxth	r3, r3
 8020e4a:	b23f      	sxth	r7, r7
 8020e4c:	2800      	cmp	r0, #0
 8020e4e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020e52:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8020e56:	f8ad c032 	strh.w	ip, [sp, #50]	; 0x32
 8020e5a:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 8020e5e:	fa0f f88a 	sxth.w	r8, sl
 8020e62:	fa0f fe89 	sxth.w	lr, r9
 8020e66:	f280 8115 	bge.w	8021094 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3b0>
 8020e6a:	2200      	movs	r2, #0
 8020e6c:	f04f 0600 	mov.w	r6, #0
 8020e70:	b20f      	sxth	r7, r1
 8020e72:	4610      	mov	r0, r2
 8020e74:	4639      	mov	r1, r7
 8020e76:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 8020e7a:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8020e7e:	e01b      	b.n	8020eb8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d4>
 8020e80:	20198158 	.word	0x20198158
 8020e84:	0801d2cd 	.word	0x0801d2cd
 8020e88:	08020435 	.word	0x08020435
 8020e8c:	2019814c 	.word	0x2019814c
 8020e90:	2019814e 	.word	0x2019814e
 8020e94:	2300      	movs	r3, #0
 8020e96:	489f      	ldr	r0, [pc, #636]	; (8021114 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x430>)
 8020e98:	499f      	ldr	r1, [pc, #636]	; (8021118 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x434>)
 8020e9a:	f8b0 a000 	ldrh.w	sl, [r0]
 8020e9e:	f8b1 9000 	ldrh.w	r9, [r1]
 8020ea2:	461a      	mov	r2, r3
 8020ea4:	469c      	mov	ip, r3
 8020ea6:	4618      	mov	r0, r3
 8020ea8:	4619      	mov	r1, r3
 8020eaa:	461f      	mov	r7, r3
 8020eac:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8020eb0:	fa0f f88a 	sxth.w	r8, sl
 8020eb4:	fa0f fe89 	sxth.w	lr, r9
 8020eb8:	eba8 0000 	sub.w	r0, r8, r0
 8020ebc:	4288      	cmp	r0, r1
 8020ebe:	da04      	bge.n	8020eca <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1e6>
 8020ec0:	ebaa 0702 	sub.w	r7, sl, r2
 8020ec4:	b23f      	sxth	r7, r7
 8020ec6:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 8020eca:	f1bc 0f00 	cmp.w	ip, #0
 8020ece:	f2c0 80c2 	blt.w	8021056 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x372>
 8020ed2:	4661      	mov	r1, ip
 8020ed4:	ebae 0e01 	sub.w	lr, lr, r1
 8020ed8:	4573      	cmp	r3, lr
 8020eda:	dd04      	ble.n	8020ee6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x202>
 8020edc:	eba9 030c 	sub.w	r3, r9, ip
 8020ee0:	b21b      	sxth	r3, r3
 8020ee2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020ee6:	2f00      	cmp	r7, #0
 8020ee8:	f340 80b1 	ble.w	802104e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x36a>
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	f340 80ae 	ble.w	802104e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x36a>
 8020ef2:	f04f 0e00 	mov.w	lr, #0
 8020ef6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8020efa:	9b05      	ldr	r3, [sp, #20]
 8020efc:	8868      	ldrh	r0, [r5, #2]
 8020efe:	8829      	ldrh	r1, [r5, #0]
 8020f00:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8020f04:	9b06      	ldr	r3, [sp, #24]
 8020f06:	1a52      	subs	r2, r2, r1
 8020f08:	ebac 0c00 	sub.w	ip, ip, r0
 8020f0c:	a910      	add	r1, sp, #64	; 0x40
 8020f0e:	a80e      	add	r0, sp, #56	; 0x38
 8020f10:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8020f14:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020f18:	f8ad c03a 	strh.w	ip, [sp, #58]	; 0x3a
 8020f1c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 8020f20:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8020f24:	f7f6 fc22 	bl	801776c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020f28:	a80c      	add	r0, sp, #48	; 0x30
 8020f2a:	f7f6 fbf7 	bl	801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020f2e:	a810      	add	r0, sp, #64	; 0x40
 8020f30:	f7f6 fbf4 	bl	801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020f34:	4b79      	ldr	r3, [pc, #484]	; (802111c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x438>)
 8020f36:	681b      	ldr	r3, [r3, #0]
 8020f38:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8020f3c:	2a00      	cmp	r2, #0
 8020f3e:	f040 80a4 	bne.w	802108a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3a6>
 8020f42:	6898      	ldr	r0, [r3, #8]
 8020f44:	6803      	ldr	r3, [r0, #0]
 8020f46:	4a76      	ldr	r2, [pc, #472]	; (8021120 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x43c>)
 8020f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020f4a:	4293      	cmp	r3, r2
 8020f4c:	f040 80b0 	bne.w	80210b0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3cc>
 8020f50:	7a00      	ldrb	r0, [r0, #8]
 8020f52:	2801      	cmp	r0, #1
 8020f54:	f000 80a5 	beq.w	80210a2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3be>
 8020f58:	f0c0 809e 	bcc.w	8021098 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3b4>
 8020f5c:	2802      	cmp	r0, #2
 8020f5e:	f040 80d2 	bne.w	8021106 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x422>
 8020f62:	f04f 0810 	mov.w	r8, #16
 8020f66:	f04f 0a04 	mov.w	sl, #4
 8020f6a:	6823      	ldr	r3, [r4, #0]
 8020f6c:	4a6d      	ldr	r2, [pc, #436]	; (8021124 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x440>)
 8020f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f70:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 8020f74:	4293      	cmp	r3, r2
 8020f76:	fb0a f707 	mul.w	r7, sl, r7
 8020f7a:	f040 809b 	bne.w	80210b4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d0>
 8020f7e:	4b6a      	ldr	r3, [pc, #424]	; (8021128 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x444>)
 8020f80:	881b      	ldrh	r3, [r3, #0]
 8020f82:	2b00      	cmp	r3, #0
 8020f84:	f000 80b8 	beq.w	80210f8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x414>
 8020f88:	7a22      	ldrb	r2, [r4, #8]
 8020f8a:	2a02      	cmp	r2, #2
 8020f8c:	f000 808e 	beq.w	80210ac <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3c8>
 8020f90:	2a01      	cmp	r2, #1
 8020f92:	bf14      	ite	ne
 8020f94:	2402      	movne	r4, #2
 8020f96:	2403      	moveq	r4, #3
 8020f98:	fb13 f404 	smulbb	r4, r3, r4
 8020f9c:	b2a4      	uxth	r4, r4
 8020f9e:	4a5f      	ldr	r2, [pc, #380]	; (802111c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x438>)
 8020fa0:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8020fa4:	f9bd 903a 	ldrsh.w	r9, [sp, #58]	; 0x3a
 8020fa8:	6810      	ldr	r0, [r2, #0]
 8020faa:	fb07 3909 	mla	r9, r7, r9, r3
 8020fae:	6803      	ldr	r3, [r0, #0]
 8020fb0:	4e5e      	ldr	r6, [pc, #376]	; (802112c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x448>)
 8020fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020fb4:	4798      	blx	r3
 8020fb6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8020fba:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	; 0x30
 8020fbe:	fb04 f303 	mul.w	r3, r4, r3
 8020fc2:	fb0a 3505 	mla	r5, sl, r5, r3
 8020fc6:	4405      	add	r5, r0
 8020fc8:	6830      	ldr	r0, [r6, #0]
 8020fca:	44d9      	add	r9, fp
 8020fcc:	2800      	cmp	r0, #0
 8020fce:	d075      	beq.n	80210bc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 8020fd0:	f7fc f90a 	bl	801d1e8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8020fd4:	9700      	str	r7, [sp, #0]
 8020fd6:	2700      	movs	r7, #0
 8020fd8:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 8020fdc:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8020fe0:	4648      	mov	r0, r9
 8020fe2:	4643      	mov	r3, r8
 8020fe4:	f7f9 febe 	bl	801ad64 <nema_bind_dst_tex>
 8020fe8:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8020fec:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8020ff0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8020ff4:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8020ff8:	f7f9 fe00 	bl	801abfc <nema_set_clip>
 8020ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8021000:	2201      	movs	r2, #1
 8021002:	2100      	movs	r1, #0
 8021004:	f240 5004 	movw	r0, #1284	; 0x504
 8021008:	f7fb fc40 	bl	801c88c <nema_set_blend>
 802100c:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 8021010:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8021014:	4643      	mov	r3, r8
 8021016:	4628      	mov	r0, r5
 8021018:	9400      	str	r4, [sp, #0]
 802101a:	9701      	str	r7, [sp, #4]
 802101c:	f7f9 fe2a 	bl	801ac74 <nema_bind_src_tex>
 8021020:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8021024:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8021028:	f7f9 ff64 	bl	801aef4 <nema_blit>
 802102c:	6830      	ldr	r0, [r6, #0]
 802102e:	2800      	cmp	r0, #0
 8021030:	d044      	beq.n	80210bc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 8021032:	f7fc f8f9 	bl	801d228 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8021036:	6830      	ldr	r0, [r6, #0]
 8021038:	2800      	cmp	r0, #0
 802103a:	d03f      	beq.n	80210bc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 802103c:	6803      	ldr	r3, [r0, #0]
 802103e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021040:	4798      	blx	r3
 8021042:	6830      	ldr	r0, [r6, #0]
 8021044:	2800      	cmp	r0, #0
 8021046:	d039      	beq.n	80210bc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 8021048:	6803      	ldr	r3, [r0, #0]
 802104a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802104c:	4798      	blx	r3
 802104e:	4658      	mov	r0, fp
 8021050:	b013      	add	sp, #76	; 0x4c
 8021052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021056:	2000      	movs	r0, #0
 8021058:	4463      	add	r3, ip
 802105a:	b21b      	sxth	r3, r3
 802105c:	4684      	mov	ip, r0
 802105e:	4601      	mov	r1, r0
 8021060:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8021064:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8021068:	e734      	b.n	8020ed4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f0>
 802106a:	9b05      	ldr	r3, [sp, #20]
 802106c:	9002      	str	r0, [sp, #8]
 802106e:	e9cd b300 	strd	fp, r3, [sp]
 8021072:	a810      	add	r0, sp, #64	; 0x40
 8021074:	462b      	mov	r3, r5
 8021076:	463a      	mov	r2, r7
 8021078:	4621      	mov	r1, r4
 802107a:	47c0      	blx	r8
 802107c:	4658      	mov	r0, fp
 802107e:	b013      	add	sp, #76	; 0x4c
 8021080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021084:	4620      	mov	r0, r4
 8021086:	4798      	blx	r3
 8021088:	e648      	b.n	8020d1c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x38>
 802108a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 802108c:	2800      	cmp	r0, #0
 802108e:	f47f af59 	bne.w	8020f44 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x260>
 8021092:	e756      	b.n	8020f42 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 8021094:	4639      	mov	r1, r7
 8021096:	e70f      	b.n	8020eb8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d4>
 8021098:	f04f 0804 	mov.w	r8, #4
 802109c:	f04f 0a02 	mov.w	sl, #2
 80210a0:	e763      	b.n	8020f6a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 80210a2:	f04f 0839 	mov.w	r8, #57	; 0x39
 80210a6:	f04f 0a03 	mov.w	sl, #3
 80210aa:	e75e      	b.n	8020f6a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 80210ac:	2404      	movs	r4, #4
 80210ae:	e773      	b.n	8020f98 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b4>
 80210b0:	4798      	blx	r3
 80210b2:	e74e      	b.n	8020f52 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26e>
 80210b4:	4620      	mov	r0, r4
 80210b6:	4798      	blx	r3
 80210b8:	4604      	mov	r4, r0
 80210ba:	e770      	b.n	8020f9e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ba>
 80210bc:	4b1c      	ldr	r3, [pc, #112]	; (8021130 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x44c>)
 80210be:	4a1d      	ldr	r2, [pc, #116]	; (8021134 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x450>)
 80210c0:	217c      	movs	r1, #124	; 0x7c
 80210c2:	481d      	ldr	r0, [pc, #116]	; (8021138 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x454>)
 80210c4:	f006 fff2 	bl	80280ac <__assert_func>
 80210c8:	4b1c      	ldr	r3, [pc, #112]	; (802113c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x458>)
 80210ca:	4a1d      	ldr	r2, [pc, #116]	; (8021140 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 80210cc:	21e9      	movs	r1, #233	; 0xe9
 80210ce:	481d      	ldr	r0, [pc, #116]	; (8021144 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 80210d0:	f006 ffec 	bl	80280ac <__assert_func>
 80210d4:	4b1c      	ldr	r3, [pc, #112]	; (8021148 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x464>)
 80210d6:	4a1a      	ldr	r2, [pc, #104]	; (8021140 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 80210d8:	21e7      	movs	r1, #231	; 0xe7
 80210da:	481a      	ldr	r0, [pc, #104]	; (8021144 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 80210dc:	f006 ffe6 	bl	80280ac <__assert_func>
 80210e0:	4b1a      	ldr	r3, [pc, #104]	; (802114c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x468>)
 80210e2:	4a17      	ldr	r2, [pc, #92]	; (8021140 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 80210e4:	21e5      	movs	r1, #229	; 0xe5
 80210e6:	4817      	ldr	r0, [pc, #92]	; (8021144 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 80210e8:	f006 ffe0 	bl	80280ac <__assert_func>
 80210ec:	4b17      	ldr	r3, [pc, #92]	; (802114c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x468>)
 80210ee:	4a18      	ldr	r2, [pc, #96]	; (8021150 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x46c>)
 80210f0:	21f0      	movs	r1, #240	; 0xf0
 80210f2:	4814      	ldr	r0, [pc, #80]	; (8021144 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 80210f4:	f006 ffda 	bl	80280ac <__assert_func>
 80210f8:	4b16      	ldr	r3, [pc, #88]	; (8021154 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x470>)
 80210fa:	4a17      	ldr	r2, [pc, #92]	; (8021158 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x474>)
 80210fc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8021100:	4816      	ldr	r0, [pc, #88]	; (802115c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x478>)
 8021102:	f006 ffd3 	bl	80280ac <__assert_func>
 8021106:	4b16      	ldr	r3, [pc, #88]	; (8021160 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x47c>)
 8021108:	4a11      	ldr	r2, [pc, #68]	; (8021150 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x46c>)
 802110a:	f44f 718d 	mov.w	r1, #282	; 0x11a
 802110e:	480d      	ldr	r0, [pc, #52]	; (8021144 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 8021110:	f006 ffcc 	bl	80280ac <__assert_func>
 8021114:	2019814c 	.word	0x2019814c
 8021118:	2019814e 	.word	0x2019814e
 802111c:	20198158 	.word	0x20198158
 8021120:	0801d2cd 	.word	0x0801d2cd
 8021124:	0801eead 	.word	0x0801eead
 8021128:	20198152 	.word	0x20198152
 802112c:	20198388 	.word	0x20198388
 8021130:	0802aeec 	.word	0x0802aeec
 8021134:	0802b6f4 	.word	0x0802b6f4
 8021138:	0802af14 	.word	0x0802af14
 802113c:	0802b2e4 	.word	0x0802b2e4
 8021140:	0802c008 	.word	0x0802c008
 8021144:	0802af90 	.word	0x0802af90
 8021148:	0802b28c 	.word	0x0802b28c
 802114c:	0802b134 	.word	0x0802b134
 8021150:	0802bf74 	.word	0x0802bf74
 8021154:	0802b464 	.word	0x0802b464
 8021158:	0802c220 	.word	0x0802c220
 802115c:	0802b4a8 	.word	0x0802b4a8
 8021160:	0802b238 	.word	0x0802b238

08021164 <_ZN8touchgfx8LCDGPU2DC1Ev>:
 8021164:	b410      	push	{r4}
 8021166:	2400      	movs	r4, #0
 8021168:	220d      	movs	r2, #13
 802116a:	4903      	ldr	r1, [pc, #12]	; (8021178 <_ZN8touchgfx8LCDGPU2DC1Ev+0x14>)
 802116c:	7202      	strb	r2, [r0, #8]
 802116e:	e9c0 1400 	strd	r1, r4, [r0]
 8021172:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021176:	4770      	bx	lr
 8021178:	0802b69c 	.word	0x0802b69c

0802117c <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE>:
 802117c:	2902      	cmp	r1, #2
 802117e:	d906      	bls.n	802118e <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x12>
 8021180:	b508      	push	{r3, lr}
 8021182:	4a04      	ldr	r2, [pc, #16]	; (8021194 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x18>)
 8021184:	4b04      	ldr	r3, [pc, #16]	; (8021198 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x1c>)
 8021186:	212a      	movs	r1, #42	; 0x2a
 8021188:	4804      	ldr	r0, [pc, #16]	; (802119c <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x20>)
 802118a:	f006 ff8f 	bl	80280ac <__assert_func>
 802118e:	7201      	strb	r1, [r0, #8]
 8021190:	4770      	bx	lr
 8021192:	bf00      	nop
 8021194:	0802ba0c 	.word	0x0802ba0c
 8021198:	0802ae24 	.word	0x0802ae24
 802119c:	0802af90 	.word	0x0802af90

080211a0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>:
 80211a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211a4:	b093      	sub	sp, #76	; 0x4c
 80211a6:	4691      	mov	r9, r2
 80211a8:	468a      	mov	sl, r1
 80211aa:	8812      	ldrh	r2, [r2, #0]
 80211ac:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
 80211b0:	461c      	mov	r4, r3
 80211b2:	910a      	str	r1, [sp, #40]	; 0x28
 80211b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80211b6:	2a00      	cmp	r2, #0
 80211b8:	f040 8109 	bne.w	80213ce <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x22e>
 80211bc:	6820      	ldr	r0, [r4, #0]
 80211be:	6861      	ldr	r1, [r4, #4]
 80211c0:	aa0e      	add	r2, sp, #56	; 0x38
 80211c2:	c203      	stmia	r2!, {r0, r1}
 80211c4:	6818      	ldr	r0, [r3, #0]
 80211c6:	6859      	ldr	r1, [r3, #4]
 80211c8:	aa10      	add	r2, sp, #64	; 0x40
 80211ca:	c203      	stmia	r2!, {r0, r1}
 80211cc:	a80e      	add	r0, sp, #56	; 0x38
 80211ce:	f7f6 faa5 	bl	801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80211d2:	4621      	mov	r1, r4
 80211d4:	a810      	add	r0, sp, #64	; 0x40
 80211d6:	f7f6 fac9 	bl	801776c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80211da:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 80211de:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
 80211e2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80211e6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80211ea:	487c      	ldr	r0, [pc, #496]	; (80213dc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 80211ec:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80211f0:	4422      	add	r2, r4
 80211f2:	442b      	add	r3, r5
 80211f4:	6800      	ldr	r0, [r0, #0]
 80211f6:	fb11 4105 	smlabb	r1, r1, r5, r4
 80211fa:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80211fe:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8021202:	6802      	ldr	r2, [r0, #0]
 8021204:	4d76      	ldr	r5, [pc, #472]	; (80213e0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021206:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 802120a:	448a      	add	sl, r1
 802120c:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8021210:	42ab      	cmp	r3, r5
 8021212:	910b      	str	r1, [sp, #44]	; 0x2c
 8021214:	f9bd 4046 	ldrsh.w	r4, [sp, #70]	; 0x46
 8021218:	f040 80a6 	bne.w	8021368 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c8>
 802121c:	6841      	ldr	r1, [r0, #4]
 802121e:	4d71      	ldr	r5, [pc, #452]	; (80213e4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8021220:	680b      	ldr	r3, [r1, #0]
 8021222:	699b      	ldr	r3, [r3, #24]
 8021224:	42ab      	cmp	r3, r5
 8021226:	f040 80c4 	bne.w	80213b2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x212>
 802122a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 802122c:	4798      	blx	r3
 802122e:	4b6e      	ldr	r3, [pc, #440]	; (80213e8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8021230:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8021234:	881b      	ldrh	r3, [r3, #0]
 8021236:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 802123a:	fb03 f404 	mul.w	r4, r3, r4
 802123e:	fb03 1202 	mla	r2, r3, r2, r1
 8021242:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021246:	eb00 0244 	add.w	r2, r0, r4, lsl #1
 802124a:	4290      	cmp	r0, r2
 802124c:	920c      	str	r2, [sp, #48]	; 0x30
 802124e:	f080 8083 	bcs.w	8021358 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 8021252:	f04f 0b04 	mov.w	fp, #4
 8021256:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021258:	0052      	lsls	r2, r2, #1
 802125a:	920d      	str	r2, [sp, #52]	; 0x34
 802125c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802125e:	eb00 0802 	add.w	r8, r0, r2
 8021262:	4580      	cmp	r8, r0
 8021264:	d96d      	bls.n	8021342 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a2>
 8021266:	4684      	mov	ip, r0
 8021268:	f10a 3eff 	add.w	lr, sl, #4294967295
 802126c:	e03e      	b.n	80212ec <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x14c>
 802126e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021270:	f3c5 4707 	ubfx	r7, r5, #16, #8
 8021274:	fb02 f303 	mul.w	r3, r2, r3
 8021278:	1c59      	adds	r1, r3, #1
 802127a:	eb01 2323 	add.w	r3, r1, r3, asr #8
 802127e:	121b      	asrs	r3, r3, #8
 8021280:	43da      	mvns	r2, r3
 8021282:	b299      	uxth	r1, r3
 8021284:	b2f6      	uxtb	r6, r6
 8021286:	b2eb      	uxtb	r3, r5
 8021288:	fb17 f701 	smulbb	r7, r7, r1
 802128c:	f8bc 5000 	ldrh.w	r5, [ip]
 8021290:	fb13 f301 	smulbb	r3, r3, r1
 8021294:	fb16 f601 	smulbb	r6, r6, r1
 8021298:	122c      	asrs	r4, r5, #8
 802129a:	10e9      	asrs	r1, r5, #3
 802129c:	00ed      	lsls	r5, r5, #3
 802129e:	b2d2      	uxtb	r2, r2
 80212a0:	b2ed      	uxtb	r5, r5
 80212a2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80212a6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80212aa:	fb04 7402 	mla	r4, r4, r2, r7
 80212ae:	fb01 6102 	mla	r1, r1, r2, r6
 80212b2:	fb05 3202 	mla	r2, r5, r2, r3
 80212b6:	b2a4      	uxth	r4, r4
 80212b8:	b292      	uxth	r2, r2
 80212ba:	b289      	uxth	r1, r1
 80212bc:	1c55      	adds	r5, r2, #1
 80212be:	1c67      	adds	r7, r4, #1
 80212c0:	1c4b      	adds	r3, r1, #1
 80212c2:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 80212c6:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80212ca:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80212ce:	f404 4278 	and.w	r2, r4, #63488	; 0xf800
 80212d2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80212d6:	095b      	lsrs	r3, r3, #5
 80212d8:	432a      	orrs	r2, r5
 80212da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80212de:	431a      	orrs	r2, r3
 80212e0:	f8ac 2000 	strh.w	r2, [ip]
 80212e4:	f10c 0c02 	add.w	ip, ip, #2
 80212e8:	45e0      	cmp	r8, ip
 80212ea:	d91f      	bls.n	802132c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 80212ec:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 80212f0:	fb1b b303 	smlabb	r3, fp, r3, fp
 80212f4:	f859 5003 	ldr.w	r5, [r9, r3]
 80212f8:	0e2b      	lsrs	r3, r5, #24
 80212fa:	d0f3      	beq.n	80212e4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x144>
 80212fc:	2bff      	cmp	r3, #255	; 0xff
 80212fe:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8021302:	d1b4      	bne.n	802126e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8021304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021306:	2aff      	cmp	r2, #255	; 0xff
 8021308:	d1b1      	bne.n	802126e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xce>
 802130a:	096b      	lsrs	r3, r5, #5
 802130c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8021310:	f026 0607 	bic.w	r6, r6, #7
 8021314:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021318:	431e      	orrs	r6, r3
 802131a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802131e:	4335      	orrs	r5, r6
 8021320:	f8ac 5000 	strh.w	r5, [ip]
 8021324:	f10c 0c02 	add.w	ip, ip, #2
 8021328:	45e0      	cmp	r8, ip
 802132a:	d8df      	bhi.n	80212ec <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x14c>
 802132c:	43c3      	mvns	r3, r0
 802132e:	4498      	add	r8, r3
 8021330:	4b2d      	ldr	r3, [pc, #180]	; (80213e8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8021332:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8021336:	f108 0801 	add.w	r8, r8, #1
 802133a:	881b      	ldrh	r3, [r3, #0]
 802133c:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 8021340:	44c2      	add	sl, r8
 8021342:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021344:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8021348:	1b19      	subs	r1, r3, r4
 802134a:	1b12      	subs	r2, r2, r4
 802134c:	4492      	add	sl, r2
 802134e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021350:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021354:	4282      	cmp	r2, r0
 8021356:	d881      	bhi.n	802125c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 8021358:	4b20      	ldr	r3, [pc, #128]	; (80213dc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 802135a:	6818      	ldr	r0, [r3, #0]
 802135c:	6803      	ldr	r3, [r0, #0]
 802135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021360:	4798      	blx	r3
 8021362:	b013      	add	sp, #76	; 0x4c
 8021364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021368:	4798      	blx	r3
 802136a:	4603      	mov	r3, r0
 802136c:	2b01      	cmp	r3, #1
 802136e:	d124      	bne.n	80213ba <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8021370:	4a1e      	ldr	r2, [pc, #120]	; (80213ec <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8021372:	6810      	ldr	r0, [r2, #0]
 8021374:	b328      	cbz	r0, 80213c2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x222>
 8021376:	2700      	movs	r7, #0
 8021378:	260b      	movs	r6, #11
 802137a:	4a1b      	ldr	r2, [pc, #108]	; (80213e8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 802137c:	b2a1      	uxth	r1, r4
 802137e:	8814      	ldrh	r4, [r2, #0]
 8021380:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8021384:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8021388:	e9cd 2101 	strd	r2, r1, [sp, #4]
 802138c:	9406      	str	r4, [sp, #24]
 802138e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021390:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 8021394:	9305      	str	r3, [sp, #20]
 8021396:	9204      	str	r2, [sp, #16]
 8021398:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 802139c:	464a      	mov	r2, r9
 802139e:	4651      	mov	r1, sl
 80213a0:	e9cd 6707 	strd	r6, r7, [sp, #28]
 80213a4:	9503      	str	r5, [sp, #12]
 80213a6:	9400      	str	r4, [sp, #0]
 80213a8:	f7fb ff46 	bl	801d238 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80213ac:	b013      	add	sp, #76	; 0x4c
 80213ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213b2:	4608      	mov	r0, r1
 80213b4:	4798      	blx	r3
 80213b6:	4603      	mov	r3, r0
 80213b8:	e7d8      	b.n	802136c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1cc>
 80213ba:	4b08      	ldr	r3, [pc, #32]	; (80213dc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 80213bc:	6818      	ldr	r0, [r3, #0]
 80213be:	6802      	ldr	r2, [r0, #0]
 80213c0:	e733      	b.n	802122a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 80213c2:	4b0b      	ldr	r3, [pc, #44]	; (80213f0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 80213c4:	4a0b      	ldr	r2, [pc, #44]	; (80213f4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 80213c6:	217c      	movs	r1, #124	; 0x7c
 80213c8:	480b      	ldr	r0, [pc, #44]	; (80213f8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 80213ca:	f006 fe6f 	bl	80280ac <__assert_func>
 80213ce:	4b0b      	ldr	r3, [pc, #44]	; (80213fc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 80213d0:	4a0b      	ldr	r2, [pc, #44]	; (8021400 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x260>)
 80213d2:	f240 31c2 	movw	r1, #962	; 0x3c2
 80213d6:	480b      	ldr	r0, [pc, #44]	; (8021404 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x264>)
 80213d8:	f006 fe68 	bl	80280ac <__assert_func>
 80213dc:	20198158 	.word	0x20198158
 80213e0:	08001edd 	.word	0x08001edd
 80213e4:	08016761 	.word	0x08016761
 80213e8:	20198152 	.word	0x20198152
 80213ec:	20198388 	.word	0x20198388
 80213f0:	0802aeec 	.word	0x0802aeec
 80213f4:	0802b6f4 	.word	0x0802b6f4
 80213f8:	0802af14 	.word	0x0802af14
 80213fc:	0802b004 	.word	0x0802b004
 8021400:	0802bd24 	.word	0x0802bd24
 8021404:	0802af90 	.word	0x0802af90

08021408 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>:
 8021408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802140c:	4691      	mov	r9, r2
 802140e:	8812      	ldrh	r2, [r2, #0]
 8021410:	b093      	sub	sp, #76	; 0x4c
 8021412:	2a01      	cmp	r2, #1
 8021414:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 8021418:	f040 8129 	bne.w	802166e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x266>
 802141c:	b914      	cbnz	r4, 8021424 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c>
 802141e:	b013      	add	sp, #76	; 0x4c
 8021420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021424:	461d      	mov	r5, r3
 8021426:	468a      	mov	sl, r1
 8021428:	6818      	ldr	r0, [r3, #0]
 802142a:	6859      	ldr	r1, [r3, #4]
 802142c:	ab0e      	add	r3, sp, #56	; 0x38
 802142e:	c303      	stmia	r3!, {r0, r1}
 8021430:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021432:	6818      	ldr	r0, [r3, #0]
 8021434:	6859      	ldr	r1, [r3, #4]
 8021436:	ab10      	add	r3, sp, #64	; 0x40
 8021438:	c303      	stmia	r3!, {r0, r1}
 802143a:	a80e      	add	r0, sp, #56	; 0x38
 802143c:	f7f6 f96e 	bl	801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021440:	4629      	mov	r1, r5
 8021442:	a810      	add	r0, sp, #64	; 0x40
 8021444:	f7f6 f992 	bl	801776c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021448:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
 802144c:	f9bd 6042 	ldrsh.w	r6, [sp, #66]	; 0x42
 8021450:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8021454:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8021458:	488b      	ldr	r0, [pc, #556]	; (8021688 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 802145a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802145e:	442a      	add	r2, r5
 8021460:	4433      	add	r3, r6
 8021462:	6800      	ldr	r0, [r0, #0]
 8021464:	fb11 5106 	smlabb	r1, r1, r6, r5
 8021468:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802146c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8021470:	6802      	ldr	r2, [r0, #0]
 8021472:	4e86      	ldr	r6, [pc, #536]	; (802168c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x284>)
 8021474:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8021478:	448a      	add	sl, r1
 802147a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 802147e:	42b3      	cmp	r3, r6
 8021480:	910b      	str	r1, [sp, #44]	; 0x2c
 8021482:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8021486:	f040 80c8 	bne.w	802161a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x212>
 802148a:	6841      	ldr	r1, [r0, #4]
 802148c:	4e80      	ldr	r6, [pc, #512]	; (8021690 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x288>)
 802148e:	680b      	ldr	r3, [r1, #0]
 8021490:	699b      	ldr	r3, [r3, #24]
 8021492:	42b3      	cmp	r3, r6
 8021494:	f040 80e4 	bne.w	8021660 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x258>
 8021498:	6a93      	ldr	r3, [r2, #40]	; 0x28
 802149a:	4798      	blx	r3
 802149c:	4b7d      	ldr	r3, [pc, #500]	; (8021694 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 802149e:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80214a2:	881b      	ldrh	r3, [r3, #0]
 80214a4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80214a8:	2cff      	cmp	r4, #255	; 0xff
 80214aa:	fb03 1202 	mla	r2, r3, r2, r1
 80214ae:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80214b2:	d06f      	beq.n	8021594 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 80214b4:	43e2      	mvns	r2, r4
 80214b6:	fb05 f503 	mul.w	r5, r5, r3
 80214ba:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 80214be:	4288      	cmp	r0, r1
 80214c0:	910c      	str	r1, [sp, #48]	; 0x30
 80214c2:	b2d2      	uxtb	r2, r2
 80214c4:	d25e      	bcs.n	8021584 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 80214c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80214c8:	fa1f f884 	uxth.w	r8, r4
 80214cc:	0049      	lsls	r1, r1, #1
 80214ce:	b292      	uxth	r2, r2
 80214d0:	910d      	str	r1, [sp, #52]	; 0x34
 80214d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80214d4:	eb00 0b01 	add.w	fp, r0, r1
 80214d8:	4583      	cmp	fp, r0
 80214da:	d948      	bls.n	802156e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x166>
 80214dc:	4684      	mov	ip, r0
 80214de:	f10a 3eff 	add.w	lr, sl, #4294967295
 80214e2:	2103      	movs	r1, #3
 80214e4:	2404      	movs	r4, #4
 80214e6:	f81e 6f01 	ldrb.w	r6, [lr, #1]!
 80214ea:	f8bc 3000 	ldrh.w	r3, [ip]
 80214ee:	fb11 4606 	smlabb	r6, r1, r6, r4
 80214f2:	eb09 0106 	add.w	r1, r9, r6
 80214f6:	788d      	ldrb	r5, [r1, #2]
 80214f8:	784f      	ldrb	r7, [r1, #1]
 80214fa:	00dc      	lsls	r4, r3, #3
 80214fc:	b2e4      	uxtb	r4, r4
 80214fe:	fb14 f402 	smulbb	r4, r4, r2
 8021502:	fb15 f508 	smulbb	r5, r5, r8
 8021506:	fb17 f708 	smulbb	r7, r7, r8
 802150a:	f819 6006 	ldrb.w	r6, [r9, r6]
 802150e:	1219      	asrs	r1, r3, #8
 8021510:	10db      	asrs	r3, r3, #3
 8021512:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021516:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802151a:	fb06 4608 	mla	r6, r6, r8, r4
 802151e:	fb01 5102 	mla	r1, r1, r2, r5
 8021522:	fb03 7302 	mla	r3, r3, r2, r7
 8021526:	b2b6      	uxth	r6, r6
 8021528:	b29b      	uxth	r3, r3
 802152a:	b28d      	uxth	r5, r1
 802152c:	1c5c      	adds	r4, r3, #1
 802152e:	1c69      	adds	r1, r5, #1
 8021530:	1c77      	adds	r7, r6, #1
 8021532:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8021536:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 802153a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802153e:	f401 4378 	and.w	r3, r1, #63488	; 0xf800
 8021542:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021546:	0961      	lsrs	r1, r4, #5
 8021548:	4333      	orrs	r3, r6
 802154a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802154e:	430b      	orrs	r3, r1
 8021550:	f82c 3b02 	strh.w	r3, [ip], #2
 8021554:	45e3      	cmp	fp, ip
 8021556:	d8c4      	bhi.n	80214e2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xda>
 8021558:	43c3      	mvns	r3, r0
 802155a:	449b      	add	fp, r3
 802155c:	4b4d      	ldr	r3, [pc, #308]	; (8021694 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 802155e:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8021562:	f10b 0b01 	add.w	fp, fp, #1
 8021566:	881b      	ldrh	r3, [r3, #0]
 8021568:	eb00 004b 	add.w	r0, r0, fp, lsl #1
 802156c:	44da      	add	sl, fp
 802156e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021570:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8021574:	1b5c      	subs	r4, r3, r5
 8021576:	1b49      	subs	r1, r1, r5
 8021578:	448a      	add	sl, r1
 802157a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802157c:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8021580:	4281      	cmp	r1, r0
 8021582:	d8a6      	bhi.n	80214d2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xca>
 8021584:	4b40      	ldr	r3, [pc, #256]	; (8021688 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 8021586:	6818      	ldr	r0, [r3, #0]
 8021588:	6803      	ldr	r3, [r0, #0]
 802158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802158c:	4798      	blx	r3
 802158e:	b013      	add	sp, #76	; 0x4c
 8021590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021594:	fb05 f503 	mul.w	r5, r5, r3
 8021598:	eb00 0e45 	add.w	lr, r0, r5, lsl #1
 802159c:	4570      	cmp	r0, lr
 802159e:	d2f1      	bcs.n	8021584 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 80215a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80215a2:	f04f 0c03 	mov.w	ip, #3
 80215a6:	2704      	movs	r7, #4
 80215a8:	4693      	mov	fp, r2
 80215aa:	0051      	lsls	r1, r2, #1
 80215ac:	4e3a      	ldr	r6, [pc, #232]	; (8021698 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x290>)
 80215ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80215b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80215b2:	eb00 0802 	add.w	r8, r0, r2
 80215b6:	4580      	cmp	r8, r0
 80215b8:	d923      	bls.n	8021602 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1fa>
 80215ba:	4604      	mov	r4, r0
 80215bc:	f10a 35ff 	add.w	r5, sl, #4294967295
 80215c0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80215c4:	fb1c 7202 	smlabb	r2, ip, r2, r7
 80215c8:	eb09 0302 	add.w	r3, r9, r2
 80215cc:	7859      	ldrb	r1, [r3, #1]
 80215ce:	789b      	ldrb	r3, [r3, #2]
 80215d0:	00c9      	lsls	r1, r1, #3
 80215d2:	f819 2002 	ldrb.w	r2, [r9, r2]
 80215d6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80215da:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 80215de:	430b      	orrs	r3, r1
 80215e0:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 80215e4:	f824 3b02 	strh.w	r3, [r4], #2
 80215e8:	45a0      	cmp	r8, r4
 80215ea:	d8e9      	bhi.n	80215c0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 80215ec:	43c3      	mvns	r3, r0
 80215ee:	4498      	add	r8, r3
 80215f0:	4b28      	ldr	r3, [pc, #160]	; (8021694 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 80215f2:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80215f6:	f108 0801 	add.w	r8, r8, #1
 80215fa:	881b      	ldrh	r3, [r3, #0]
 80215fc:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 8021600:	44c2      	add	sl, r8
 8021602:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8021606:	eba3 010b 	sub.w	r1, r3, fp
 802160a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802160e:	eba2 020b 	sub.w	r2, r2, fp
 8021612:	4586      	cmp	lr, r0
 8021614:	4492      	add	sl, r2
 8021616:	d8cb      	bhi.n	80215b0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 8021618:	e7b4      	b.n	8021584 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 802161a:	4798      	blx	r3
 802161c:	2801      	cmp	r0, #1
 802161e:	d122      	bne.n	8021666 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x25e>
 8021620:	4b1e      	ldr	r3, [pc, #120]	; (802169c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x294>)
 8021622:	6818      	ldr	r0, [r3, #0]
 8021624:	b350      	cbz	r0, 802167c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x274>
 8021626:	2600      	movs	r6, #0
 8021628:	270b      	movs	r7, #11
 802162a:	4b1a      	ldr	r3, [pc, #104]	; (8021694 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 802162c:	b2aa      	uxth	r2, r5
 802162e:	881d      	ldrh	r5, [r3, #0]
 8021630:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8021634:	9404      	str	r4, [sp, #16]
 8021636:	9506      	str	r5, [sp, #24]
 8021638:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 802163c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8021640:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8021644:	4651      	mov	r1, sl
 8021646:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 802164a:	464a      	mov	r2, r9
 802164c:	9608      	str	r6, [sp, #32]
 802164e:	9605      	str	r6, [sp, #20]
 8021650:	9707      	str	r7, [sp, #28]
 8021652:	9503      	str	r5, [sp, #12]
 8021654:	9400      	str	r4, [sp, #0]
 8021656:	f7fb fdef 	bl	801d238 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802165a:	b013      	add	sp, #76	; 0x4c
 802165c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021660:	4608      	mov	r0, r1
 8021662:	4798      	blx	r3
 8021664:	e7da      	b.n	802161c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x214>
 8021666:	4b08      	ldr	r3, [pc, #32]	; (8021688 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 8021668:	6818      	ldr	r0, [r3, #0]
 802166a:	6802      	ldr	r2, [r0, #0]
 802166c:	e714      	b.n	8021498 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x90>
 802166e:	4b0c      	ldr	r3, [pc, #48]	; (80216a0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x298>)
 8021670:	4a0c      	ldr	r2, [pc, #48]	; (80216a4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x29c>)
 8021672:	f240 411b 	movw	r1, #1051	; 0x41b
 8021676:	480c      	ldr	r0, [pc, #48]	; (80216a8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a0>)
 8021678:	f006 fd18 	bl	80280ac <__assert_func>
 802167c:	4b0b      	ldr	r3, [pc, #44]	; (80216ac <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a4>)
 802167e:	4a0c      	ldr	r2, [pc, #48]	; (80216b0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a8>)
 8021680:	217c      	movs	r1, #124	; 0x7c
 8021682:	480c      	ldr	r0, [pc, #48]	; (80216b4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2ac>)
 8021684:	f006 fd12 	bl	80280ac <__assert_func>
 8021688:	20198158 	.word	0x20198158
 802168c:	08001edd 	.word	0x08001edd
 8021690:	08016761 	.word	0x08016761
 8021694:	20198152 	.word	0x20198152
 8021698:	fffff800 	.word	0xfffff800
 802169c:	20198388 	.word	0x20198388
 80216a0:	0802afb4 	.word	0x0802afb4
 80216a4:	0802bb8c 	.word	0x0802bb8c
 80216a8:	0802af90 	.word	0x0802af90
 80216ac:	0802aeec 	.word	0x0802aeec
 80216b0:	0802b6f4 	.word	0x0802b6f4
 80216b4:	0802af14 	.word	0x0802af14

080216b8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>:
 80216b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216bc:	4690      	mov	r8, r2
 80216be:	8812      	ldrh	r2, [r2, #0]
 80216c0:	b093      	sub	sp, #76	; 0x4c
 80216c2:	461c      	mov	r4, r3
 80216c4:	f89d a074 	ldrb.w	sl, [sp, #116]	; 0x74
 80216c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80216ca:	2a00      	cmp	r2, #0
 80216cc:	f040 80fb 	bne.w	80218c6 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 80216d0:	4689      	mov	r9, r1
 80216d2:	6820      	ldr	r0, [r4, #0]
 80216d4:	6861      	ldr	r1, [r4, #4]
 80216d6:	aa0e      	add	r2, sp, #56	; 0x38
 80216d8:	c203      	stmia	r2!, {r0, r1}
 80216da:	6818      	ldr	r0, [r3, #0]
 80216dc:	6859      	ldr	r1, [r3, #4]
 80216de:	aa10      	add	r2, sp, #64	; 0x40
 80216e0:	c203      	stmia	r2!, {r0, r1}
 80216e2:	a80e      	add	r0, sp, #56	; 0x38
 80216e4:	f7f6 f81a 	bl	801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80216e8:	4621      	mov	r1, r4
 80216ea:	a810      	add	r0, sp, #64	; 0x40
 80216ec:	f7f6 f83e 	bl	801776c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80216f0:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 80216f4:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
 80216f8:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80216fc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8021700:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8021704:	4873      	ldr	r0, [pc, #460]	; (80218d4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 8021706:	fb11 4105 	smlabb	r1, r1, r5, r4
 802170a:	4422      	add	r2, r4
 802170c:	442b      	add	r3, r5
 802170e:	6800      	ldr	r0, [r0, #0]
 8021710:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8021714:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8021718:	6802      	ldr	r2, [r0, #0]
 802171a:	4489      	add	r9, r1
 802171c:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8021720:	4c6d      	ldr	r4, [pc, #436]	; (80218d8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x220>)
 8021722:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8021726:	910a      	str	r1, [sp, #40]	; 0x28
 8021728:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 802172c:	42a3      	cmp	r3, r4
 802172e:	910c      	str	r1, [sp, #48]	; 0x30
 8021730:	f040 8096 	bne.w	8021860 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 8021734:	6841      	ldr	r1, [r0, #4]
 8021736:	4c69      	ldr	r4, [pc, #420]	; (80218dc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x224>)
 8021738:	680b      	ldr	r3, [r1, #0]
 802173a:	699b      	ldr	r3, [r3, #24]
 802173c:	42a3      	cmp	r3, r4
 802173e:	f040 80b4 	bne.w	80218aa <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1f2>
 8021742:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8021744:	4798      	blx	r3
 8021746:	4b66      	ldr	r3, [pc, #408]	; (80218e0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 8021748:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 802174c:	881b      	ldrh	r3, [r3, #0]
 802174e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8021752:	fb01 2303 	mla	r3, r1, r3, r2
 8021756:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802175a:	4418      	add	r0, r3
 802175c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802175e:	2b00      	cmp	r3, #0
 8021760:	dd76      	ble.n	8021850 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x198>
 8021762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021764:	2b00      	cmp	r3, #0
 8021766:	dd73      	ble.n	8021850 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x198>
 8021768:	2200      	movs	r2, #0
 802176a:	2104      	movs	r1, #4
 802176c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021770:	920b      	str	r2, [sp, #44]	; 0x2c
 8021772:	930d      	str	r3, [sp, #52]	; 0x34
 8021774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021776:	464e      	mov	r6, r9
 8021778:	1cc5      	adds	r5, r0, #3
 802177a:	eb09 0c03 	add.w	ip, r9, r3
 802177e:	e039      	b.n	80217f4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 8021780:	fb0a f303 	mul.w	r3, sl, r3
 8021784:	1c5a      	adds	r2, r3, #1
 8021786:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802178a:	121b      	asrs	r3, r3, #8
 802178c:	43df      	mvns	r7, r3
 802178e:	b29b      	uxth	r3, r3
 8021790:	fb1e f203 	smulbb	r2, lr, r3
 8021794:	f815 ec03 	ldrb.w	lr, [r5, #-3]
 8021798:	b2ff      	uxtb	r7, r7
 802179a:	fb0e 2e07 	mla	lr, lr, r7, r2
 802179e:	fa1f fe8e 	uxth.w	lr, lr
 80217a2:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80217a6:	f10e 0b01 	add.w	fp, lr, #1
 80217aa:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80217ae:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80217b2:	fb12 fb07 	smulbb	fp, r2, r7
 80217b6:	f805 ec03 	strb.w	lr, [r5, #-3]
 80217ba:	7862      	ldrb	r2, [r4, #1]
 80217bc:	f815 ec01 	ldrb.w	lr, [r5, #-1]
 80217c0:	fb02 b203 	mla	r2, r2, r3, fp
 80217c4:	b292      	uxth	r2, r2
 80217c6:	f102 0b01 	add.w	fp, r2, #1
 80217ca:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80217ce:	1212      	asrs	r2, r2, #8
 80217d0:	fb1e f707 	smulbb	r7, lr, r7
 80217d4:	f805 2c02 	strb.w	r2, [r5, #-2]
 80217d8:	78a2      	ldrb	r2, [r4, #2]
 80217da:	fb02 7303 	mla	r3, r2, r3, r7
 80217de:	b29b      	uxth	r3, r3
 80217e0:	1c5a      	adds	r2, r3, #1
 80217e2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80217e6:	121b      	asrs	r3, r3, #8
 80217e8:	f805 3c01 	strb.w	r3, [r5, #-1]
 80217ec:	45b4      	cmp	ip, r6
 80217ee:	f105 0503 	add.w	r5, r5, #3
 80217f2:	d01b      	beq.n	802182c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x174>
 80217f4:	f816 2b01 	ldrb.w	r2, [r6], #1
 80217f8:	fb11 1202 	smlabb	r2, r1, r2, r1
 80217fc:	eb08 0402 	add.w	r4, r8, r2
 8021800:	78e3      	ldrb	r3, [r4, #3]
 8021802:	2b00      	cmp	r3, #0
 8021804:	d0f2      	beq.n	80217ec <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x134>
 8021806:	2bff      	cmp	r3, #255	; 0xff
 8021808:	f818 e002 	ldrb.w	lr, [r8, r2]
 802180c:	d1b8      	bne.n	8021780 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 802180e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021812:	d1b5      	bne.n	8021780 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 8021814:	f805 ec03 	strb.w	lr, [r5, #-3]
 8021818:	7863      	ldrb	r3, [r4, #1]
 802181a:	45b4      	cmp	ip, r6
 802181c:	f805 3c02 	strb.w	r3, [r5, #-2]
 8021820:	78a3      	ldrb	r3, [r4, #2]
 8021822:	f105 0503 	add.w	r5, r5, #3
 8021826:	f805 3c04 	strb.w	r3, [r5, #-4]
 802182a:	d1e3      	bne.n	80217f4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 802182c:	4b2c      	ldr	r3, [pc, #176]	; (80218e0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 802182e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021830:	881b      	ldrh	r3, [r3, #0]
 8021832:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021834:	1a9b      	subs	r3, r3, r2
 8021836:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802183a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802183c:	442b      	add	r3, r5
 802183e:	4418      	add	r0, r3
 8021840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021842:	3401      	adds	r4, #1
 8021844:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8021848:	42a3      	cmp	r3, r4
 802184a:	940b      	str	r4, [sp, #44]	; 0x2c
 802184c:	4491      	add	r9, r2
 802184e:	d191      	bne.n	8021774 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 8021850:	4b20      	ldr	r3, [pc, #128]	; (80218d4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 8021852:	6818      	ldr	r0, [r3, #0]
 8021854:	6803      	ldr	r3, [r0, #0]
 8021856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021858:	4798      	blx	r3
 802185a:	b013      	add	sp, #76	; 0x4c
 802185c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021860:	4798      	blx	r3
 8021862:	4602      	mov	r2, r0
 8021864:	2a01      	cmp	r2, #1
 8021866:	d124      	bne.n	80218b2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1fa>
 8021868:	4b1e      	ldr	r3, [pc, #120]	; (80218e4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x22c>)
 802186a:	6818      	ldr	r0, [r3, #0]
 802186c:	b328      	cbz	r0, 80218ba <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x202>
 802186e:	260b      	movs	r6, #11
 8021870:	4b1b      	ldr	r3, [pc, #108]	; (80218e0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 8021872:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021876:	881f      	ldrh	r7, [r3, #0]
 8021878:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 802187c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8021880:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 8021884:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8021888:	9208      	str	r2, [sp, #32]
 802188a:	9205      	str	r2, [sp, #20]
 802188c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8021890:	f8cd a010 	str.w	sl, [sp, #16]
 8021894:	4642      	mov	r2, r8
 8021896:	4649      	mov	r1, r9
 8021898:	e9cd 7606 	strd	r7, r6, [sp, #24]
 802189c:	9503      	str	r5, [sp, #12]
 802189e:	9400      	str	r4, [sp, #0]
 80218a0:	f7fb fcca 	bl	801d238 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80218a4:	b013      	add	sp, #76	; 0x4c
 80218a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218aa:	4608      	mov	r0, r1
 80218ac:	4798      	blx	r3
 80218ae:	4602      	mov	r2, r0
 80218b0:	e7d8      	b.n	8021864 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ac>
 80218b2:	4b08      	ldr	r3, [pc, #32]	; (80218d4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 80218b4:	6818      	ldr	r0, [r3, #0]
 80218b6:	6802      	ldr	r2, [r0, #0]
 80218b8:	e743      	b.n	8021742 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 80218ba:	4b0b      	ldr	r3, [pc, #44]	; (80218e8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x230>)
 80218bc:	4a0b      	ldr	r2, [pc, #44]	; (80218ec <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 80218be:	217c      	movs	r1, #124	; 0x7c
 80218c0:	480b      	ldr	r0, [pc, #44]	; (80218f0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 80218c2:	f006 fbf3 	bl	80280ac <__assert_func>
 80218c6:	4b0b      	ldr	r3, [pc, #44]	; (80218f4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 80218c8:	4a0b      	ldr	r2, [pc, #44]	; (80218f8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 80218ca:	f240 417d 	movw	r1, #1149	; 0x47d
 80218ce:	480b      	ldr	r0, [pc, #44]	; (80218fc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 80218d0:	f006 fbec 	bl	80280ac <__assert_func>
 80218d4:	20198158 	.word	0x20198158
 80218d8:	08001edd 	.word	0x08001edd
 80218dc:	08016761 	.word	0x08016761
 80218e0:	20198152 	.word	0x20198152
 80218e4:	20198388 	.word	0x20198388
 80218e8:	0802aeec 	.word	0x0802aeec
 80218ec:	0802b6f4 	.word	0x0802b6f4
 80218f0:	0802af14 	.word	0x0802af14
 80218f4:	0802b004 	.word	0x0802b004
 80218f8:	0802bdb0 	.word	0x0802bdb0
 80218fc:	0802af90 	.word	0x0802af90

08021900 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>:
 8021900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021904:	4617      	mov	r7, r2
 8021906:	b095      	sub	sp, #84	; 0x54
 8021908:	8812      	ldrh	r2, [r2, #0]
 802190a:	4688      	mov	r8, r1
 802190c:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 8021910:	2a01      	cmp	r2, #1
 8021912:	461c      	mov	r4, r3
 8021914:	910d      	str	r1, [sp, #52]	; 0x34
 8021916:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021918:	f040 8105 	bne.w	8021b26 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x226>
 802191c:	6820      	ldr	r0, [r4, #0]
 802191e:	6861      	ldr	r1, [r4, #4]
 8021920:	aa10      	add	r2, sp, #64	; 0x40
 8021922:	c203      	stmia	r2!, {r0, r1}
 8021924:	6818      	ldr	r0, [r3, #0]
 8021926:	6859      	ldr	r1, [r3, #4]
 8021928:	aa12      	add	r2, sp, #72	; 0x48
 802192a:	c203      	stmia	r2!, {r0, r1}
 802192c:	a810      	add	r0, sp, #64	; 0x40
 802192e:	f7f5 fef5 	bl	801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021932:	4621      	mov	r1, r4
 8021934:	a812      	add	r0, sp, #72	; 0x48
 8021936:	f7f5 ff19 	bl	801776c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802193a:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 802193e:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 8021942:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8021946:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 802194a:	487a      	ldr	r0, [pc, #488]	; (8021b34 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 802194c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8021950:	4422      	add	r2, r4
 8021952:	442b      	add	r3, r5
 8021954:	6800      	ldr	r0, [r0, #0]
 8021956:	fb11 4105 	smlabb	r1, r1, r5, r4
 802195a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 802195e:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8021962:	6802      	ldr	r2, [r0, #0]
 8021964:	4c74      	ldr	r4, [pc, #464]	; (8021b38 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 8021966:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 802196a:	4488      	add	r8, r1
 802196c:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8021970:	42a3      	cmp	r3, r4
 8021972:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8021976:	910c      	str	r1, [sp, #48]	; 0x30
 8021978:	f040 809f 	bne.w	8021aba <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 802197c:	6841      	ldr	r1, [r0, #4]
 802197e:	4c6f      	ldr	r4, [pc, #444]	; (8021b3c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8021980:	680b      	ldr	r3, [r1, #0]
 8021982:	699b      	ldr	r3, [r3, #24]
 8021984:	42a3      	cmp	r3, r4
 8021986:	f040 80c0 	bne.w	8021b0a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20a>
 802198a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 802198c:	4798      	blx	r3
 802198e:	4a6c      	ldr	r2, [pc, #432]	; (8021b40 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021990:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 8021994:	8814      	ldrh	r4, [r2, #0]
 8021996:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 802199a:	fb04 2303 	mla	r3, r4, r3, r2
 802199e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80219a2:	4418      	add	r0, r3
 80219a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80219a6:	2b00      	cmp	r3, #0
 80219a8:	dd67      	ble.n	8021a7a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x17a>
 80219aa:	2300      	movs	r3, #0
 80219ac:	f04f 0903 	mov.w	r9, #3
 80219b0:	2104      	movs	r1, #4
 80219b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80219b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80219b6:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 80219ba:	930e      	str	r3, [sp, #56]	; 0x38
 80219bc:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
 80219c0:	444b      	add	r3, r9
 80219c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80219c4:	b292      	uxth	r2, r2
 80219c6:	fa1f fc85 	uxth.w	ip, r5
 80219ca:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80219ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80219d0:	2b00      	cmp	r3, #0
 80219d2:	dd43      	ble.n	8021a5c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x15c>
 80219d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80219d6:	2bff      	cmp	r3, #255	; 0xff
 80219d8:	d057      	beq.n	8021a8a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x18a>
 80219da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80219dc:	1cc5      	adds	r5, r0, #3
 80219de:	f108 3eff 	add.w	lr, r8, #4294967295
 80219e2:	eb00 0a03 	add.w	sl, r0, r3
 80219e6:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 80219ea:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 80219ee:	fb19 1303 	smlabb	r3, r9, r3, r1
 80219f2:	fb16 f402 	smulbb	r4, r6, r2
 80219f6:	5cfe      	ldrb	r6, [r7, r3]
 80219f8:	443b      	add	r3, r7
 80219fa:	fb06 460c 	mla	r6, r6, ip, r4
 80219fe:	b2b6      	uxth	r6, r6
 8021a00:	f815 4c02 	ldrb.w	r4, [r5, #-2]
 8021a04:	f106 0b01 	add.w	fp, r6, #1
 8021a08:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 8021a0c:	1236      	asrs	r6, r6, #8
 8021a0e:	fb14 fb02 	smulbb	fp, r4, r2
 8021a12:	f805 6c03 	strb.w	r6, [r5, #-3]
 8021a16:	785c      	ldrb	r4, [r3, #1]
 8021a18:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8021a1c:	fb04 b40c 	mla	r4, r4, ip, fp
 8021a20:	b2a4      	uxth	r4, r4
 8021a22:	f104 0b01 	add.w	fp, r4, #1
 8021a26:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8021a2a:	1224      	asrs	r4, r4, #8
 8021a2c:	fb16 f602 	smulbb	r6, r6, r2
 8021a30:	f805 4c02 	strb.w	r4, [r5, #-2]
 8021a34:	789b      	ldrb	r3, [r3, #2]
 8021a36:	3503      	adds	r5, #3
 8021a38:	fb03 630c 	mla	r3, r3, ip, r6
 8021a3c:	b29b      	uxth	r3, r3
 8021a3e:	1c5c      	adds	r4, r3, #1
 8021a40:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8021a44:	121b      	asrs	r3, r3, #8
 8021a46:	f805 3c04 	strb.w	r3, [r5, #-4]
 8021a4a:	45aa      	cmp	sl, r5
 8021a4c:	d1cb      	bne.n	80219e6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xe6>
 8021a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021a50:	4418      	add	r0, r3
 8021a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a54:	4498      	add	r8, r3
 8021a56:	4b3a      	ldr	r3, [pc, #232]	; (8021b40 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021a58:	881c      	ldrh	r4, [r3, #0]
 8021a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a5c:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 8021a60:	eba4 0e03 	sub.w	lr, r4, r3
 8021a64:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8021a66:	1aed      	subs	r5, r5, r3
 8021a68:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 8021a6c:	4418      	add	r0, r3
 8021a6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021a70:	3601      	adds	r6, #1
 8021a72:	42b3      	cmp	r3, r6
 8021a74:	960b      	str	r6, [sp, #44]	; 0x2c
 8021a76:	44a8      	add	r8, r5
 8021a78:	d1a9      	bne.n	80219ce <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8021a7a:	4b2e      	ldr	r3, [pc, #184]	; (8021b34 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021a7c:	6818      	ldr	r0, [r3, #0]
 8021a7e:	6803      	ldr	r3, [r0, #0]
 8021a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021a82:	4798      	blx	r3
 8021a84:	b015      	add	sp, #84	; 0x54
 8021a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021a8c:	1cc4      	adds	r4, r0, #3
 8021a8e:	f108 35ff 	add.w	r5, r8, #4294967295
 8021a92:	eb00 0e03 	add.w	lr, r0, r3
 8021a96:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8021a9a:	3403      	adds	r4, #3
 8021a9c:	fb19 1303 	smlabb	r3, r9, r3, r1
 8021aa0:	5cfe      	ldrb	r6, [r7, r3]
 8021aa2:	443b      	add	r3, r7
 8021aa4:	f804 6c06 	strb.w	r6, [r4, #-6]
 8021aa8:	785e      	ldrb	r6, [r3, #1]
 8021aaa:	f804 6c05 	strb.w	r6, [r4, #-5]
 8021aae:	789b      	ldrb	r3, [r3, #2]
 8021ab0:	f804 3c04 	strb.w	r3, [r4, #-4]
 8021ab4:	45a6      	cmp	lr, r4
 8021ab6:	d1ee      	bne.n	8021a96 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x196>
 8021ab8:	e7c9      	b.n	8021a4e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x14e>
 8021aba:	4798      	blx	r3
 8021abc:	4603      	mov	r3, r0
 8021abe:	2b01      	cmp	r3, #1
 8021ac0:	d127      	bne.n	8021b12 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x212>
 8021ac2:	4a20      	ldr	r2, [pc, #128]	; (8021b44 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8021ac4:	6810      	ldr	r0, [r2, #0]
 8021ac6:	b340      	cbz	r0, 8021b1a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8021ac8:	f04f 0c0b 	mov.w	ip, #11
 8021acc:	2600      	movs	r6, #0
 8021ace:	4a1c      	ldr	r2, [pc, #112]	; (8021b40 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021ad0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021ad4:	8814      	ldrh	r4, [r2, #0]
 8021ad6:	fa1f f28a 	uxth.w	r2, sl
 8021ada:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8021ade:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8021ae2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021ae4:	9406      	str	r4, [sp, #24]
 8021ae6:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 8021aea:	9308      	str	r3, [sp, #32]
 8021aec:	9204      	str	r2, [sp, #16]
 8021aee:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8021af2:	463a      	mov	r2, r7
 8021af4:	4641      	mov	r1, r8
 8021af6:	f8cd c01c 	str.w	ip, [sp, #28]
 8021afa:	9605      	str	r6, [sp, #20]
 8021afc:	9503      	str	r5, [sp, #12]
 8021afe:	9400      	str	r4, [sp, #0]
 8021b00:	f7fb fb9a 	bl	801d238 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8021b04:	b015      	add	sp, #84	; 0x54
 8021b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b0a:	4608      	mov	r0, r1
 8021b0c:	4798      	blx	r3
 8021b0e:	4603      	mov	r3, r0
 8021b10:	e7d5      	b.n	8021abe <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1be>
 8021b12:	4b08      	ldr	r3, [pc, #32]	; (8021b34 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021b14:	6818      	ldr	r0, [r3, #0]
 8021b16:	6802      	ldr	r2, [r0, #0]
 8021b18:	e737      	b.n	802198a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8021b1a:	4b0b      	ldr	r3, [pc, #44]	; (8021b48 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8021b1c:	4a0b      	ldr	r2, [pc, #44]	; (8021b4c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8021b1e:	217c      	movs	r1, #124	; 0x7c
 8021b20:	480b      	ldr	r0, [pc, #44]	; (8021b50 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8021b22:	f006 fac3 	bl	80280ac <__assert_func>
 8021b26:	4b0b      	ldr	r3, [pc, #44]	; (8021b54 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8021b28:	4a0b      	ldr	r2, [pc, #44]	; (8021b58 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8021b2a:	f240 41c7 	movw	r1, #1223	; 0x4c7
 8021b2e:	480b      	ldr	r0, [pc, #44]	; (8021b5c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8021b30:	f006 fabc 	bl	80280ac <__assert_func>
 8021b34:	20198158 	.word	0x20198158
 8021b38:	08001edd 	.word	0x08001edd
 8021b3c:	08016761 	.word	0x08016761
 8021b40:	20198152 	.word	0x20198152
 8021b44:	20198388 	.word	0x20198388
 8021b48:	0802aeec 	.word	0x0802aeec
 8021b4c:	0802b6f4 	.word	0x0802b6f4
 8021b50:	0802af14 	.word	0x0802af14
 8021b54:	0802afb4 	.word	0x0802afb4
 8021b58:	0802bc14 	.word	0x0802bc14
 8021b5c:	0802af90 	.word	0x0802af90

08021b60 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8021b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b64:	4690      	mov	r8, r2
 8021b66:	8812      	ldrh	r2, [r2, #0]
 8021b68:	b095      	sub	sp, #84	; 0x54
 8021b6a:	2a01      	cmp	r2, #1
 8021b6c:	461c      	mov	r4, r3
 8021b6e:	f89d 907c 	ldrb.w	r9, [sp, #124]	; 0x7c
 8021b72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021b74:	f040 8107 	bne.w	8021d86 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x226>
 8021b78:	468a      	mov	sl, r1
 8021b7a:	6820      	ldr	r0, [r4, #0]
 8021b7c:	6861      	ldr	r1, [r4, #4]
 8021b7e:	aa10      	add	r2, sp, #64	; 0x40
 8021b80:	c203      	stmia	r2!, {r0, r1}
 8021b82:	6818      	ldr	r0, [r3, #0]
 8021b84:	6859      	ldr	r1, [r3, #4]
 8021b86:	aa12      	add	r2, sp, #72	; 0x48
 8021b88:	c203      	stmia	r2!, {r0, r1}
 8021b8a:	a810      	add	r0, sp, #64	; 0x40
 8021b8c:	f7f5 fdc6 	bl	801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021b90:	4621      	mov	r1, r4
 8021b92:	a812      	add	r0, sp, #72	; 0x48
 8021b94:	f7f5 fdea 	bl	801776c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021b98:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 8021b9c:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 8021ba0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8021ba4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8021ba8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8021bac:	4879      	ldr	r0, [pc, #484]	; (8021d94 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021bae:	fb11 4105 	smlabb	r1, r1, r5, r4
 8021bb2:	4422      	add	r2, r4
 8021bb4:	442b      	add	r3, r5
 8021bb6:	6800      	ldr	r0, [r0, #0]
 8021bb8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8021bbc:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8021bc0:	6802      	ldr	r2, [r0, #0]
 8021bc2:	448a      	add	sl, r1
 8021bc4:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8021bc8:	4c73      	ldr	r4, [pc, #460]	; (8021d98 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 8021bca:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8021bce:	910c      	str	r1, [sp, #48]	; 0x30
 8021bd0:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8021bd4:	42a3      	cmp	r3, r4
 8021bd6:	910e      	str	r1, [sp, #56]	; 0x38
 8021bd8:	f040 80a2 	bne.w	8021d20 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c0>
 8021bdc:	6841      	ldr	r1, [r0, #4]
 8021bde:	4c6f      	ldr	r4, [pc, #444]	; (8021d9c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8021be0:	680b      	ldr	r3, [r1, #0]
 8021be2:	699b      	ldr	r3, [r3, #24]
 8021be4:	42a3      	cmp	r3, r4
 8021be6:	f040 80c1 	bne.w	8021d6c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x20c>
 8021bea:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8021bec:	4798      	blx	r3
 8021bee:	4b6c      	ldr	r3, [pc, #432]	; (8021da0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021bf0:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 8021bf4:	881b      	ldrh	r3, [r3, #0]
 8021bf6:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8021bfa:	fb01 2303 	mla	r3, r1, r3, r2
 8021bfe:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021c02:	930b      	str	r3, [sp, #44]	; 0x2c
 8021c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021c06:	2b00      	cmp	r3, #0
 8021c08:	f340 8082 	ble.w	8021d10 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b0>
 8021c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021c0e:	2b00      	cmp	r3, #0
 8021c10:	dd7e      	ble.n	8021d10 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b0>
 8021c12:	2200      	movs	r2, #0
 8021c14:	f04f 0e03 	mov.w	lr, #3
 8021c18:	f04f 0c04 	mov.w	ip, #4
 8021c1c:	f1c9 07ff 	rsb	r7, r9, #255	; 0xff
 8021c20:	009b      	lsls	r3, r3, #2
 8021c22:	920d      	str	r2, [sp, #52]	; 0x34
 8021c24:	b2bf      	uxth	r7, r7
 8021c26:	930f      	str	r3, [sp, #60]	; 0x3c
 8021c28:	fa1f f289 	uxth.w	r2, r9
 8021c2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021c2e:	4655      	mov	r5, sl
 8021c30:	1d18      	adds	r0, r3, #4
 8021c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021c34:	eb0a 0603 	add.w	r6, sl, r3
 8021c38:	e03e      	b.n	8021cb8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8021c3a:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 8021c3e:	f810 4c03 	ldrb.w	r4, [r0, #-3]
 8021c42:	fb13 f307 	smulbb	r3, r3, r7
 8021c46:	fb0b 3302 	mla	r3, fp, r2, r3
 8021c4a:	b29b      	uxth	r3, r3
 8021c4c:	f103 0b01 	add.w	fp, r3, #1
 8021c50:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8021c54:	121b      	asrs	r3, r3, #8
 8021c56:	fb14 f407 	smulbb	r4, r4, r7
 8021c5a:	f800 3c04 	strb.w	r3, [r0, #-4]
 8021c5e:	784b      	ldrb	r3, [r1, #1]
 8021c60:	f810 bc02 	ldrb.w	fp, [r0, #-2]
 8021c64:	fb03 4302 	mla	r3, r3, r2, r4
 8021c68:	b29b      	uxth	r3, r3
 8021c6a:	1c5c      	adds	r4, r3, #1
 8021c6c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8021c70:	121b      	asrs	r3, r3, #8
 8021c72:	fb1b fb07 	smulbb	fp, fp, r7
 8021c76:	f800 3c03 	strb.w	r3, [r0, #-3]
 8021c7a:	788c      	ldrb	r4, [r1, #2]
 8021c7c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8021c80:	fb04 b402 	mla	r4, r4, r2, fp
 8021c84:	b2a4      	uxth	r4, r4
 8021c86:	f104 0b01 	add.w	fp, r4, #1
 8021c8a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8021c8e:	1224      	asrs	r4, r4, #8
 8021c90:	fb13 fb07 	smulbb	fp, r3, r7
 8021c94:	f800 4c02 	strb.w	r4, [r0, #-2]
 8021c98:	78cb      	ldrb	r3, [r1, #3]
 8021c9a:	42ae      	cmp	r6, r5
 8021c9c:	fb03 b302 	mla	r3, r3, r2, fp
 8021ca0:	b29b      	uxth	r3, r3
 8021ca2:	f103 0101 	add.w	r1, r3, #1
 8021ca6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021caa:	ea4f 2323 	mov.w	r3, r3, asr #8
 8021cae:	f800 3c01 	strb.w	r3, [r0, #-1]
 8021cb2:	f100 0004 	add.w	r0, r0, #4
 8021cb6:	d018      	beq.n	8021cea <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x18a>
 8021cb8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8021cbc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021cc0:	fb1e c303 	smlabb	r3, lr, r3, ip
 8021cc4:	eb08 0103 	add.w	r1, r8, r3
 8021cc8:	f818 b003 	ldrb.w	fp, [r8, r3]
 8021ccc:	d1b5      	bne.n	8021c3a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xda>
 8021cce:	f800 bc04 	strb.w	fp, [r0, #-4]
 8021cd2:	784b      	ldrb	r3, [r1, #1]
 8021cd4:	42ae      	cmp	r6, r5
 8021cd6:	f800 3c03 	strb.w	r3, [r0, #-3]
 8021cda:	788b      	ldrb	r3, [r1, #2]
 8021cdc:	f100 0004 	add.w	r0, r0, #4
 8021ce0:	f800 9c05 	strb.w	r9, [r0, #-5]
 8021ce4:	f800 3c06 	strb.w	r3, [r0, #-6]
 8021ce8:	d1e6      	bne.n	8021cb8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8021cea:	4b2d      	ldr	r3, [pc, #180]	; (8021da0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021cec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021cee:	881b      	ldrh	r3, [r3, #0]
 8021cf0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021cf2:	1a1b      	subs	r3, r3, r0
 8021cf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021cf8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021cfa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021cfc:	441c      	add	r4, r3
 8021cfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021d00:	3001      	adds	r0, #1
 8021d02:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8021d06:	4283      	cmp	r3, r0
 8021d08:	900d      	str	r0, [sp, #52]	; 0x34
 8021d0a:	940b      	str	r4, [sp, #44]	; 0x2c
 8021d0c:	448a      	add	sl, r1
 8021d0e:	d18d      	bne.n	8021c2c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xcc>
 8021d10:	4b20      	ldr	r3, [pc, #128]	; (8021d94 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021d12:	6818      	ldr	r0, [r3, #0]
 8021d14:	6803      	ldr	r3, [r0, #0]
 8021d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d18:	4798      	blx	r3
 8021d1a:	b015      	add	sp, #84	; 0x54
 8021d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d20:	4798      	blx	r3
 8021d22:	2801      	cmp	r0, #1
 8021d24:	d125      	bne.n	8021d72 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x212>
 8021d26:	4b1f      	ldr	r3, [pc, #124]	; (8021da4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8021d28:	6818      	ldr	r0, [r3, #0]
 8021d2a:	b330      	cbz	r0, 8021d7a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8021d2c:	2502      	movs	r5, #2
 8021d2e:	240b      	movs	r4, #11
 8021d30:	2600      	movs	r6, #0
 8021d32:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8021d36:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8021d3a:	9302      	str	r3, [sp, #8]
 8021d3c:	4b18      	ldr	r3, [pc, #96]	; (8021da0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021d3e:	9201      	str	r2, [sp, #4]
 8021d40:	881b      	ldrh	r3, [r3, #0]
 8021d42:	9508      	str	r5, [sp, #32]
 8021d44:	9407      	str	r4, [sp, #28]
 8021d46:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8021d4a:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 8021d4e:	9306      	str	r3, [sp, #24]
 8021d50:	f8cd 9010 	str.w	r9, [sp, #16]
 8021d54:	4642      	mov	r2, r8
 8021d56:	4651      	mov	r1, sl
 8021d58:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8021d5c:	9605      	str	r6, [sp, #20]
 8021d5e:	9503      	str	r5, [sp, #12]
 8021d60:	9400      	str	r4, [sp, #0]
 8021d62:	f7fb fa69 	bl	801d238 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8021d66:	b015      	add	sp, #84	; 0x54
 8021d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d6c:	4608      	mov	r0, r1
 8021d6e:	4798      	blx	r3
 8021d70:	e7d7      	b.n	8021d22 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8021d72:	4b08      	ldr	r3, [pc, #32]	; (8021d94 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021d74:	6818      	ldr	r0, [r3, #0]
 8021d76:	6802      	ldr	r2, [r0, #0]
 8021d78:	e737      	b.n	8021bea <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8021d7a:	4b0b      	ldr	r3, [pc, #44]	; (8021da8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8021d7c:	4a0b      	ldr	r2, [pc, #44]	; (8021dac <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8021d7e:	217c      	movs	r1, #124	; 0x7c
 8021d80:	480b      	ldr	r0, [pc, #44]	; (8021db0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8021d82:	f006 f993 	bl	80280ac <__assert_func>
 8021d86:	4b0b      	ldr	r3, [pc, #44]	; (8021db4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8021d88:	4a0b      	ldr	r2, [pc, #44]	; (8021db8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8021d8a:	f240 5109 	movw	r1, #1289	; 0x509
 8021d8e:	480b      	ldr	r0, [pc, #44]	; (8021dbc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8021d90:	f006 f98c 	bl	80280ac <__assert_func>
 8021d94:	20198158 	.word	0x20198158
 8021d98:	08001edd 	.word	0x08001edd
 8021d9c:	08016761 	.word	0x08016761
 8021da0:	20198152 	.word	0x20198152
 8021da4:	20198388 	.word	0x20198388
 8021da8:	0802aeec 	.word	0x0802aeec
 8021dac:	0802b6f4 	.word	0x0802b6f4
 8021db0:	0802af14 	.word	0x0802af14
 8021db4:	0802afb4 	.word	0x0802afb4
 8021db8:	0802bc9c 	.word	0x0802bc9c
 8021dbc:	0802af90 	.word	0x0802af90

08021dc0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8021dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dc4:	4617      	mov	r7, r2
 8021dc6:	8812      	ldrh	r2, [r2, #0]
 8021dc8:	b095      	sub	sp, #84	; 0x54
 8021dca:	461c      	mov	r4, r3
 8021dcc:	f89d 907c 	ldrb.w	r9, [sp, #124]	; 0x7c
 8021dd0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021dd2:	2a00      	cmp	r2, #0
 8021dd4:	f040 8112 	bne.w	8021ffc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>
 8021dd8:	4688      	mov	r8, r1
 8021dda:	6820      	ldr	r0, [r4, #0]
 8021ddc:	6861      	ldr	r1, [r4, #4]
 8021dde:	aa10      	add	r2, sp, #64	; 0x40
 8021de0:	c203      	stmia	r2!, {r0, r1}
 8021de2:	6818      	ldr	r0, [r3, #0]
 8021de4:	6859      	ldr	r1, [r3, #4]
 8021de6:	aa12      	add	r2, sp, #72	; 0x48
 8021de8:	c203      	stmia	r2!, {r0, r1}
 8021dea:	a810      	add	r0, sp, #64	; 0x40
 8021dec:	f7f5 fc96 	bl	801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021df0:	4621      	mov	r1, r4
 8021df2:	a812      	add	r0, sp, #72	; 0x48
 8021df4:	f7f5 fcba 	bl	801776c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021df8:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 8021dfc:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 8021e00:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8021e04:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8021e08:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8021e0c:	487f      	ldr	r0, [pc, #508]	; (802200c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8021e0e:	fb11 4105 	smlabb	r1, r1, r5, r4
 8021e12:	4422      	add	r2, r4
 8021e14:	442b      	add	r3, r5
 8021e16:	6800      	ldr	r0, [r0, #0]
 8021e18:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8021e1c:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8021e20:	6802      	ldr	r2, [r0, #0]
 8021e22:	4488      	add	r8, r1
 8021e24:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8021e28:	4c79      	ldr	r4, [pc, #484]	; (8022010 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8021e2a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8021e2e:	910c      	str	r1, [sp, #48]	; 0x30
 8021e30:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8021e34:	42a3      	cmp	r3, r4
 8021e36:	910e      	str	r1, [sp, #56]	; 0x38
 8021e38:	f040 80ab 	bne.w	8021f92 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d2>
 8021e3c:	6841      	ldr	r1, [r0, #4]
 8021e3e:	4c75      	ldr	r4, [pc, #468]	; (8022014 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8021e40:	680b      	ldr	r3, [r1, #0]
 8021e42:	699b      	ldr	r3, [r3, #24]
 8021e44:	42a3      	cmp	r3, r4
 8021e46:	f040 80cb 	bne.w	8021fe0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x220>
 8021e4a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8021e4c:	4798      	blx	r3
 8021e4e:	4b72      	ldr	r3, [pc, #456]	; (8022018 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8021e50:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 8021e54:	881b      	ldrh	r3, [r3, #0]
 8021e56:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8021e5a:	fb01 2303 	mla	r3, r1, r3, r2
 8021e5e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021e62:	930b      	str	r3, [sp, #44]	; 0x2c
 8021e64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021e66:	2b00      	cmp	r3, #0
 8021e68:	f340 808b 	ble.w	8021f82 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8021e6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e6e:	2b00      	cmp	r3, #0
 8021e70:	f340 8087 	ble.w	8021f82 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8021e74:	2200      	movs	r2, #0
 8021e76:	f04f 0c04 	mov.w	ip, #4
 8021e7a:	009b      	lsls	r3, r3, #2
 8021e7c:	920d      	str	r2, [sp, #52]	; 0x34
 8021e7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8021e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021e82:	4645      	mov	r5, r8
 8021e84:	1d1c      	adds	r4, r3, #4
 8021e86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e88:	eb08 0e03 	add.w	lr, r8, r3
 8021e8c:	e048      	b.n	8021f20 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 8021e8e:	fb09 f303 	mul.w	r3, r9, r3
 8021e92:	1c5a      	adds	r2, r3, #1
 8021e94:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021e98:	121b      	asrs	r3, r3, #8
 8021e9a:	b2d8      	uxtb	r0, r3
 8021e9c:	43c1      	mvns	r1, r0
 8021e9e:	b29b      	uxth	r3, r3
 8021ea0:	fb1a f203 	smulbb	r2, sl, r3
 8021ea4:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8021ea8:	b2c9      	uxtb	r1, r1
 8021eaa:	fb0a 2a01 	mla	sl, sl, r1, r2
 8021eae:	fa1f fa8a 	uxth.w	sl, sl
 8021eb2:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 8021eb6:	f10a 0b01 	add.w	fp, sl, #1
 8021eba:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8021ebe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021ec2:	fb12 fb01 	smulbb	fp, r2, r1
 8021ec6:	f804 ac04 	strb.w	sl, [r4, #-4]
 8021eca:	7872      	ldrb	r2, [r6, #1]
 8021ecc:	f814 ac02 	ldrb.w	sl, [r4, #-2]
 8021ed0:	fb02 b203 	mla	r2, r2, r3, fp
 8021ed4:	b292      	uxth	r2, r2
 8021ed6:	f102 0b01 	add.w	fp, r2, #1
 8021eda:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8021ede:	fb1a fa01 	smulbb	sl, sl, r1
 8021ee2:	1212      	asrs	r2, r2, #8
 8021ee4:	f804 2c03 	strb.w	r2, [r4, #-3]
 8021ee8:	78b1      	ldrb	r1, [r6, #2]
 8021eea:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8021eee:	fb01 a103 	mla	r1, r1, r3, sl
 8021ef2:	fb12 f303 	smulbb	r3, r2, r3
 8021ef6:	b289      	uxth	r1, r1
 8021ef8:	b29b      	uxth	r3, r3
 8021efa:	f101 0a01 	add.w	sl, r1, #1
 8021efe:	1c5e      	adds	r6, r3, #1
 8021f00:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 8021f04:	4402      	add	r2, r0
 8021f06:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8021f0a:	1209      	asrs	r1, r1, #8
 8021f0c:	eba2 2313 	sub.w	r3, r2, r3, lsr #8
 8021f10:	f804 1c02 	strb.w	r1, [r4, #-2]
 8021f14:	f804 3c01 	strb.w	r3, [r4, #-1]
 8021f18:	45ae      	cmp	lr, r5
 8021f1a:	f104 0404 	add.w	r4, r4, #4
 8021f1e:	d01c      	beq.n	8021f5a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x19a>
 8021f20:	f815 2b01 	ldrb.w	r2, [r5], #1
 8021f24:	fb1c c202 	smlabb	r2, ip, r2, ip
 8021f28:	18be      	adds	r6, r7, r2
 8021f2a:	78f3      	ldrb	r3, [r6, #3]
 8021f2c:	2b00      	cmp	r3, #0
 8021f2e:	d0f3      	beq.n	8021f18 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8021f30:	2bff      	cmp	r3, #255	; 0xff
 8021f32:	f817 a002 	ldrb.w	sl, [r7, r2]
 8021f36:	d1aa      	bne.n	8021e8e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8021f38:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021f3c:	d1a7      	bne.n	8021e8e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8021f3e:	f804 ac04 	strb.w	sl, [r4, #-4]
 8021f42:	7873      	ldrb	r3, [r6, #1]
 8021f44:	45ae      	cmp	lr, r5
 8021f46:	f804 3c03 	strb.w	r3, [r4, #-3]
 8021f4a:	78b3      	ldrb	r3, [r6, #2]
 8021f4c:	f104 0404 	add.w	r4, r4, #4
 8021f50:	f804 9c05 	strb.w	r9, [r4, #-5]
 8021f54:	f804 3c06 	strb.w	r3, [r4, #-6]
 8021f58:	d1e2      	bne.n	8021f20 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 8021f5a:	4b2f      	ldr	r3, [pc, #188]	; (8022018 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8021f5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021f5e:	881b      	ldrh	r3, [r3, #0]
 8021f60:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021f62:	1a5b      	subs	r3, r3, r1
 8021f64:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021f68:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021f6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021f6c:	4418      	add	r0, r3
 8021f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021f70:	3101      	adds	r1, #1
 8021f72:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 8021f76:	428b      	cmp	r3, r1
 8021f78:	910d      	str	r1, [sp, #52]	; 0x34
 8021f7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8021f7c:	4490      	add	r8, r2
 8021f7e:	f47f af7f 	bne.w	8021e80 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xc0>
 8021f82:	4b22      	ldr	r3, [pc, #136]	; (802200c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8021f84:	6818      	ldr	r0, [r3, #0]
 8021f86:	6803      	ldr	r3, [r0, #0]
 8021f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021f8a:	4798      	blx	r3
 8021f8c:	b015      	add	sp, #84	; 0x54
 8021f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f92:	4798      	blx	r3
 8021f94:	4603      	mov	r3, r0
 8021f96:	2b01      	cmp	r3, #1
 8021f98:	d126      	bne.n	8021fe8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x228>
 8021f9a:	4a20      	ldr	r2, [pc, #128]	; (802201c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8021f9c:	6810      	ldr	r0, [r2, #0]
 8021f9e:	b338      	cbz	r0, 8021ff0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x230>
 8021fa0:	f04f 0c02 	mov.w	ip, #2
 8021fa4:	260b      	movs	r6, #11
 8021fa6:	4a1c      	ldr	r2, [pc, #112]	; (8022018 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8021fa8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8021fac:	8814      	ldrh	r4, [r2, #0]
 8021fae:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8021fb2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8021fb6:	9406      	str	r4, [sp, #24]
 8021fb8:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 8021fbc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8021fc0:	9305      	str	r3, [sp, #20]
 8021fc2:	f8cd 9010 	str.w	r9, [sp, #16]
 8021fc6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8021fca:	463a      	mov	r2, r7
 8021fcc:	4641      	mov	r1, r8
 8021fce:	e9cd 6c07 	strd	r6, ip, [sp, #28]
 8021fd2:	9503      	str	r5, [sp, #12]
 8021fd4:	9400      	str	r4, [sp, #0]
 8021fd6:	f7fb f92f 	bl	801d238 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8021fda:	b015      	add	sp, #84	; 0x54
 8021fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fe0:	4608      	mov	r0, r1
 8021fe2:	4798      	blx	r3
 8021fe4:	4603      	mov	r3, r0
 8021fe6:	e7d6      	b.n	8021f96 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d6>
 8021fe8:	4b08      	ldr	r3, [pc, #32]	; (802200c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8021fea:	6818      	ldr	r0, [r3, #0]
 8021fec:	6802      	ldr	r2, [r0, #0]
 8021fee:	e72c      	b.n	8021e4a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8021ff0:	4b0b      	ldr	r3, [pc, #44]	; (8022020 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x260>)
 8021ff2:	4a0c      	ldr	r2, [pc, #48]	; (8022024 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x264>)
 8021ff4:	217c      	movs	r1, #124	; 0x7c
 8021ff6:	480c      	ldr	r0, [pc, #48]	; (8022028 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x268>)
 8021ff8:	f006 f858 	bl	80280ac <__assert_func>
 8021ffc:	4b0b      	ldr	r3, [pc, #44]	; (802202c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x26c>)
 8021ffe:	4a0c      	ldr	r2, [pc, #48]	; (8022030 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x270>)
 8022000:	f240 514d 	movw	r1, #1357	; 0x54d
 8022004:	480b      	ldr	r0, [pc, #44]	; (8022034 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x274>)
 8022006:	f006 f851 	bl	80280ac <__assert_func>
 802200a:	bf00      	nop
 802200c:	20198158 	.word	0x20198158
 8022010:	08001edd 	.word	0x08001edd
 8022014:	08016761 	.word	0x08016761
 8022018:	20198152 	.word	0x20198152
 802201c:	20198388 	.word	0x20198388
 8022020:	0802aeec 	.word	0x0802aeec
 8022024:	0802b6f4 	.word	0x0802b6f4
 8022028:	0802af14 	.word	0x0802af14
 802202c:	0802b004 	.word	0x0802b004
 8022030:	0802be3c 	.word	0x0802be3c
 8022034:	0802af90 	.word	0x0802af90

08022038 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022038:	b570      	push	{r4, r5, r6, lr}
 802203a:	7814      	ldrb	r4, [r2, #0]
 802203c:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8022040:	2c01      	cmp	r4, #1
 8022042:	d00e      	beq.n	8022062 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8022044:	d302      	bcc.n	802204c <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x14>
 8022046:	2c02      	cmp	r4, #2
 8022048:	d02a      	beq.n	80220a0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x68>
 802204a:	bd70      	pop	{r4, r5, r6, pc}
 802204c:	7a04      	ldrb	r4, [r0, #8]
 802204e:	2c01      	cmp	r4, #1
 8022050:	d021      	beq.n	8022096 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x5e>
 8022052:	d311      	bcc.n	8022078 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8022054:	2c02      	cmp	r4, #2
 8022056:	d12a      	bne.n	80220ae <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x76>
 8022058:	9505      	str	r5, [sp, #20]
 802205a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802205e:	f7ff beaf 	b.w	8021dc0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>
 8022062:	7a04      	ldrb	r4, [r0, #8]
 8022064:	2c01      	cmp	r4, #1
 8022066:	d011      	beq.n	802208c <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8022068:	d30b      	bcc.n	8022082 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x4a>
 802206a:	2c02      	cmp	r4, #2
 802206c:	d126      	bne.n	80220bc <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 802206e:	9505      	str	r5, [sp, #20]
 8022070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022074:	f7ff bd74 	b.w	8021b60 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>
 8022078:	9505      	str	r5, [sp, #20]
 802207a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802207e:	f7ff b88f 	b.w	80211a0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>
 8022082:	9505      	str	r5, [sp, #20]
 8022084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022088:	f7ff b9be 	b.w	8021408 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>
 802208c:	9505      	str	r5, [sp, #20]
 802208e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022092:	f7ff bc35 	b.w	8021900 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>
 8022096:	9505      	str	r5, [sp, #20]
 8022098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802209c:	f7ff bb0c 	b.w	80216b8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>
 80220a0:	4b0a      	ldr	r3, [pc, #40]	; (80220cc <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x94>)
 80220a2:	4a0b      	ldr	r2, [pc, #44]	; (80220d0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 80220a4:	f240 3199 	movw	r1, #921	; 0x399
 80220a8:	480a      	ldr	r0, [pc, #40]	; (80220d4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 80220aa:	f005 ffff 	bl	80280ac <__assert_func>
 80220ae:	4b0a      	ldr	r3, [pc, #40]	; (80220d8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>)
 80220b0:	4a07      	ldr	r2, [pc, #28]	; (80220d0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 80220b2:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 80220b6:	4807      	ldr	r0, [pc, #28]	; (80220d4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 80220b8:	f005 fff8 	bl	80280ac <__assert_func>
 80220bc:	4b06      	ldr	r3, [pc, #24]	; (80220d8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>)
 80220be:	4a04      	ldr	r2, [pc, #16]	; (80220d0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 80220c0:	f240 31b9 	movw	r1, #953	; 0x3b9
 80220c4:	4803      	ldr	r0, [pc, #12]	; (80220d4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 80220c6:	f005 fff1 	bl	80280ac <__assert_func>
 80220ca:	bf00      	nop
 80220cc:	0802ad6c 	.word	0x0802ad6c
 80220d0:	0802b734 	.word	0x0802b734
 80220d4:	0802af90 	.word	0x0802af90
 80220d8:	0802ada8 	.word	0x0802ada8

080220dc <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80220dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80220e0:	b089      	sub	sp, #36	; 0x24
 80220e2:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
 80220e6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80220e8:	b13c      	cbz	r4, 80220fa <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 80220ea:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 80220ee:	2e00      	cmp	r6, #0
 80220f0:	dd03      	ble.n	80220fa <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 80220f2:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 80220f6:	2e00      	cmp	r6, #0
 80220f8:	dc02      	bgt.n	8022100 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x24>
 80220fa:	b009      	add	sp, #36	; 0x24
 80220fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022100:	f04f 0800 	mov.w	r8, #0
 8022104:	4606      	mov	r6, r0
 8022106:	f362 080f 	bfi	r8, r2, #0, #16
 802210a:	4608      	mov	r0, r1
 802210c:	460f      	mov	r7, r1
 802210e:	f363 481f 	bfi	r8, r3, #16, #16
 8022112:	f7f8 f8cb 	bl	801a2ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022116:	4681      	mov	r9, r0
 8022118:	4638      	mov	r0, r7
 802211a:	f7f8 f8fb 	bl	801a314 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802211e:	2300      	movs	r3, #0
 8022120:	f369 030f 	bfi	r3, r9, #0, #16
 8022124:	f360 431f 	bfi	r3, r0, #16, #16
 8022128:	4638      	mov	r0, r7
 802212a:	e9cd 8302 	strd	r8, r3, [sp, #8]
 802212e:	f7f8 f9a9 	bl	801a484 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022132:	280b      	cmp	r0, #11
 8022134:	d023      	beq.n	802217e <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 8022136:	aa04      	add	r2, sp, #16
 8022138:	f10d 0808 	add.w	r8, sp, #8
 802213c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8022140:	e882 0003 	stmia.w	r2, {r0, r1}
 8022144:	6828      	ldr	r0, [r5, #0]
 8022146:	6869      	ldr	r1, [r5, #4]
 8022148:	ab06      	add	r3, sp, #24
 802214a:	c303      	stmia	r3!, {r0, r1}
 802214c:	4610      	mov	r0, r2
 802214e:	f7f5 fae5 	bl	801771c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022152:	4641      	mov	r1, r8
 8022154:	a806      	add	r0, sp, #24
 8022156:	f7f5 fb09 	bl	801776c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802215a:	4638      	mov	r0, r7
 802215c:	f7f8 f90e 	bl	801a37c <_ZNK8touchgfx6Bitmap7getDataEv>
 8022160:	4680      	mov	r8, r0
 8022162:	4638      	mov	r0, r7
 8022164:	f7f8 f98e 	bl	801a484 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022168:	280d      	cmp	r0, #13
 802216a:	d871      	bhi.n	8022250 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 802216c:	e8df f000 	tbb	[pc, r0]
 8022170:	70176163 	.word	0x70176163
 8022174:	70707070 	.word	0x70707070
 8022178:	70707070 	.word	0x70707070
 802217c:	6570      	.short	0x6570
 802217e:	4638      	mov	r0, r7
 8022180:	f7f8 f8fc 	bl	801a37c <_ZNK8touchgfx6Bitmap7getDataEv>
 8022184:	4680      	mov	r8, r0
 8022186:	4638      	mov	r0, r7
 8022188:	f7f8 f928 	bl	801a3dc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 802218c:	4641      	mov	r1, r8
 802218e:	4602      	mov	r2, r0
 8022190:	e9cd 5400 	strd	r5, r4, [sp]
 8022194:	4630      	mov	r0, r6
 8022196:	ab02      	add	r3, sp, #8
 8022198:	f7ff ff4e 	bl	8022038 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 802219c:	e7ad      	b.n	80220fa <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 802219e:	2710      	movs	r7, #16
 80221a0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80221a4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80221a8:	4d2c      	ldr	r5, [pc, #176]	; (802225c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>)
 80221aa:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80221ae:	440a      	add	r2, r1
 80221b0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80221b4:	6828      	ldr	r0, [r5, #0]
 80221b6:	440b      	add	r3, r1
 80221b8:	f8ad 2018 	strh.w	r2, [sp, #24]
 80221bc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80221c0:	2800      	cmp	r0, #0
 80221c2:	d03f      	beq.n	8022244 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x168>
 80221c4:	f7fb f810 	bl	801d1e8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 80221c8:	6833      	ldr	r3, [r6, #0]
 80221ca:	4630      	mov	r0, r6
 80221cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80221ce:	4798      	blx	r3
 80221d0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80221d4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80221d8:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 80221dc:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 80221e0:	f7f8 fd0c 	bl	801abfc <nema_set_clip>
 80221e4:	2200      	movs	r2, #0
 80221e6:	4623      	mov	r3, r4
 80221e8:	2600      	movs	r6, #0
 80221ea:	f04f 34ff 	mov.w	r4, #4294967295
 80221ee:	4611      	mov	r1, r2
 80221f0:	4610      	mov	r0, r2
 80221f2:	f7f8 fd37 	bl	801ac64 <nema_rgba>
 80221f6:	f7fa ff0f 	bl	801d018 <nema_set_const_color>
 80221fa:	f04f 33ff 	mov.w	r3, #4294967295
 80221fe:	2201      	movs	r2, #1
 8022200:	2100      	movs	r1, #0
 8022202:	4817      	ldr	r0, [pc, #92]	; (8022260 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x184>)
 8022204:	f7fa fb42 	bl	801c88c <nema_set_blend>
 8022208:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 802220c:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8022210:	463b      	mov	r3, r7
 8022212:	4640      	mov	r0, r8
 8022214:	e9cd 4600 	strd	r4, r6, [sp]
 8022218:	f7f8 fd2c 	bl	801ac74 <nema_bind_src_tex>
 802221c:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8022220:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8022224:	f7f8 fe66 	bl	801aef4 <nema_blit>
 8022228:	6828      	ldr	r0, [r5, #0]
 802222a:	b158      	cbz	r0, 8022244 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x168>
 802222c:	f7fa fffc 	bl	801d228 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8022230:	e763      	b.n	80220fa <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 8022232:	2739      	movs	r7, #57	; 0x39
 8022234:	e7b4      	b.n	80221a0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8022236:	2704      	movs	r7, #4
 8022238:	e7b2      	b.n	80221a0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 802223a:	4638      	mov	r0, r7
 802223c:	f7f8 f8ce 	bl	801a3dc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8022240:	7807      	ldrb	r7, [r0, #0]
 8022242:	e7ad      	b.n	80221a0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8022244:	4b07      	ldr	r3, [pc, #28]	; (8022264 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x188>)
 8022246:	4a08      	ldr	r2, [pc, #32]	; (8022268 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>)
 8022248:	217c      	movs	r1, #124	; 0x7c
 802224a:	4808      	ldr	r0, [pc, #32]	; (802226c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x190>)
 802224c:	f005 ff2e 	bl	80280ac <__assert_func>
 8022250:	4b07      	ldr	r3, [pc, #28]	; (8022270 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x194>)
 8022252:	4a08      	ldr	r2, [pc, #32]	; (8022274 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x198>)
 8022254:	2174      	movs	r1, #116	; 0x74
 8022256:	4808      	ldr	r0, [pc, #32]	; (8022278 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x19c>)
 8022258:	f005 ff28 	bl	80280ac <__assert_func>
 802225c:	20198388 	.word	0x20198388
 8022260:	08000504 	.word	0x08000504
 8022264:	0802aeec 	.word	0x0802aeec
 8022268:	0802b6f4 	.word	0x0802b6f4
 802226c:	0802af14 	.word	0x0802af14
 8022270:	0802ade4 	.word	0x0802ade4
 8022274:	0802b828 	.word	0x0802b828
 8022278:	0802af90 	.word	0x0802af90

0802227c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 802227c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022280:	b089      	sub	sp, #36	; 0x24
 8022282:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8022284:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8022286:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 802228a:	9104      	str	r1, [sp, #16]
 802228c:	8809      	ldrh	r1, [r1, #0]
 802228e:	fb07 6c04 	mla	ip, r7, r4, r6
 8022292:	10c8      	asrs	r0, r1, #3
 8022294:	120d      	asrs	r5, r1, #8
 8022296:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802229a:	f005 0af8 	and.w	sl, r5, #248	; 0xf8
 802229e:	9002      	str	r0, [sp, #8]
 80222a0:	00c9      	lsls	r1, r1, #3
 80222a2:	0200      	lsls	r0, r0, #8
 80222a4:	b2c9      	uxtb	r1, r1
 80222a6:	4690      	mov	r8, r2
 80222a8:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80222ac:	469e      	mov	lr, r3
 80222ae:	eb02 030c 	add.w	r3, r2, ip
 80222b2:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 80222b6:	4308      	orrs	r0, r1
 80222b8:	2f00      	cmp	r7, #0
 80222ba:	9103      	str	r1, [sp, #12]
 80222bc:	9305      	str	r3, [sp, #20]
 80222be:	9007      	str	r0, [sp, #28]
 80222c0:	f107 0501 	add.w	r5, r7, #1
 80222c4:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	; 0x4c
 80222c8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80222cc:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 80222d0:	9200      	str	r2, [sp, #0]
 80222d2:	db02      	blt.n	80222da <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x5e>
 80222d4:	42be      	cmp	r6, r7
 80222d6:	f300 80a3 	bgt.w	8022420 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1a4>
 80222da:	fa5f fb80 	uxtb.w	fp, r0
 80222de:	af07      	add	r7, sp, #28
 80222e0:	465a      	mov	r2, fp
 80222e2:	46b8      	mov	r8, r7
 80222e4:	2d00      	cmp	r5, #0
 80222e6:	db01      	blt.n	80222ec <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x70>
 80222e8:	42ae      	cmp	r6, r5
 80222ea:	dc79      	bgt.n	80223e0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x164>
 80222ec:	f10d 0e1c 	add.w	lr, sp, #28
 80222f0:	46f1      	mov	r9, lr
 80222f2:	b2c0      	uxtb	r0, r0
 80222f4:	9001      	str	r0, [sp, #4]
 80222f6:	2b0f      	cmp	r3, #15
 80222f8:	f200 80ce 	bhi.w	8022498 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 80222fc:	290f      	cmp	r1, #15
 80222fe:	f200 80cb 	bhi.w	8022498 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 8022302:	9c00      	ldr	r4, [sp, #0]
 8022304:	b29b      	uxth	r3, r3
 8022306:	43e4      	mvns	r4, r4
 8022308:	b289      	uxth	r1, r1
 802230a:	fb03 f501 	mul.w	r5, r3, r1
 802230e:	011b      	lsls	r3, r3, #4
 8022310:	1b5e      	subs	r6, r3, r5
 8022312:	b2b6      	uxth	r6, r6
 8022314:	f897 c002 	ldrb.w	ip, [r7, #2]
 8022318:	ebc5 1101 	rsb	r1, r5, r1, lsl #4
 802231c:	787f      	ldrb	r7, [r7, #1]
 802231e:	fb06 f202 	mul.w	r2, r6, r2
 8022322:	b289      	uxth	r1, r1
 8022324:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8022328:	fb06 fc0c 	mul.w	ip, r6, ip
 802232c:	1a5b      	subs	r3, r3, r1
 802232e:	fb06 f607 	mul.w	r6, r6, r7
 8022332:	b29b      	uxth	r3, r3
 8022334:	f898 7001 	ldrb.w	r7, [r8, #1]
 8022338:	fb03 220b 	mla	r2, r3, fp, r2
 802233c:	f898 b002 	ldrb.w	fp, [r8, #2]
 8022340:	fb03 6607 	mla	r6, r3, r7, r6
 8022344:	fb03 cc0b 	mla	ip, r3, fp, ip
 8022348:	f899 8002 	ldrb.w	r8, [r9, #2]
 802234c:	f899 7001 	ldrb.w	r7, [r9, #1]
 8022350:	9b01      	ldr	r3, [sp, #4]
 8022352:	fb01 cc08 	mla	ip, r1, r8, ip
 8022356:	fb01 2203 	mla	r2, r1, r3, r2
 802235a:	fb01 6607 	mla	r6, r1, r7, r6
 802235e:	f89e 8002 	ldrb.w	r8, [lr, #2]
 8022362:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8022366:	9b03      	ldr	r3, [sp, #12]
 8022368:	9902      	ldr	r1, [sp, #8]
 802236a:	fb05 2200 	mla	r2, r5, r0, r2
 802236e:	b2e4      	uxtb	r4, r4
 8022370:	fb05 cc08 	mla	ip, r5, r8, ip
 8022374:	fb05 6607 	mla	r6, r5, r7, r6
 8022378:	fb13 f004 	smulbb	r0, r3, r4
 802237c:	fb1a f304 	smulbb	r3, sl, r4
 8022380:	fb11 f404 	smulbb	r4, r1, r4
 8022384:	f8bd e000 	ldrh.w	lr, [sp]
 8022388:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802238c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022390:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022394:	fb02 020e 	mla	r2, r2, lr, r0
 8022398:	fb0c 330e 	mla	r3, ip, lr, r3
 802239c:	fb06 4e0e 	mla	lr, r6, lr, r4
 80223a0:	fa1f fc83 	uxth.w	ip, r3
 80223a4:	b292      	uxth	r2, r2
 80223a6:	fa1f fe8e 	uxth.w	lr, lr
 80223aa:	f10c 0301 	add.w	r3, ip, #1
 80223ae:	1c50      	adds	r0, r2, #1
 80223b0:	f10e 0101 	add.w	r1, lr, #1
 80223b4:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80223b8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80223bc:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80223c0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80223c4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80223c8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80223cc:	4313      	orrs	r3, r2
 80223ce:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80223d2:	9a04      	ldr	r2, [sp, #16]
 80223d4:	ea43 030e 	orr.w	r3, r3, lr
 80223d8:	8013      	strh	r3, [r2, #0]
 80223da:	b009      	add	sp, #36	; 0x24
 80223dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223e0:	2900      	cmp	r1, #0
 80223e2:	d036      	beq.n	8022452 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d6>
 80223e4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80223e6:	2d00      	cmp	r5, #0
 80223e8:	db45      	blt.n	8022476 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1fa>
 80223ea:	42ac      	cmp	r4, r5
 80223ec:	dd43      	ble.n	8022476 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1fa>
 80223ee:	9d05      	ldr	r5, [sp, #20]
 80223f0:	f815 9004 	ldrb.w	r9, [r5, r4]
 80223f4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80223f8:	44f1      	add	r9, lr
 80223fa:	f899 5000 	ldrb.w	r5, [r9]
 80223fe:	9501      	str	r5, [sp, #4]
 8022400:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022402:	3501      	adds	r5, #1
 8022404:	d433      	bmi.n	802246e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1f2>
 8022406:	42ac      	cmp	r4, r5
 8022408:	dd31      	ble.n	802246e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1f2>
 802240a:	2b00      	cmp	r3, #0
 802240c:	d040      	beq.n	8022490 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x214>
 802240e:	9805      	ldr	r0, [sp, #20]
 8022410:	4420      	add	r0, r4
 8022412:	7840      	ldrb	r0, [r0, #1]
 8022414:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8022418:	f81e 0004 	ldrb.w	r0, [lr, r4]
 802241c:	44a6      	add	lr, r4
 802241e:	e76a      	b.n	80222f6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x7a>
 8022420:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022422:	2a00      	cmp	r2, #0
 8022424:	db01      	blt.n	802242a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ae>
 8022426:	4294      	cmp	r4, r2
 8022428:	dc1b      	bgt.n	8022462 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1e6>
 802242a:	f10d 081c 	add.w	r8, sp, #28
 802242e:	3201      	adds	r2, #1
 8022430:	f898 b000 	ldrb.w	fp, [r8]
 8022434:	d40a      	bmi.n	802244c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>
 8022436:	4294      	cmp	r4, r2
 8022438:	dd08      	ble.n	802244c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>
 802243a:	b1fb      	cbz	r3, 802247c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x200>
 802243c:	9a05      	ldr	r2, [sp, #20]
 802243e:	7857      	ldrb	r7, [r2, #1]
 8022440:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022444:	f81e 2007 	ldrb.w	r2, [lr, r7]
 8022448:	4477      	add	r7, lr
 802244a:	e74b      	b.n	80222e4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x68>
 802244c:	b2c2      	uxtb	r2, r0
 802244e:	af07      	add	r7, sp, #28
 8022450:	e748      	b.n	80222e4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x68>
 8022452:	b2c0      	uxtb	r0, r0
 8022454:	2b0f      	cmp	r3, #15
 8022456:	9001      	str	r0, [sp, #4]
 8022458:	d81e      	bhi.n	8022498 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 802245a:	f10d 0e1c 	add.w	lr, sp, #28
 802245e:	46f1      	mov	r9, lr
 8022460:	e74f      	b.n	8022302 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x86>
 8022462:	f818 800c 	ldrb.w	r8, [r8, ip]
 8022466:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802246a:	44f0      	add	r8, lr
 802246c:	e7df      	b.n	802242e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1b2>
 802246e:	b2c0      	uxtb	r0, r0
 8022470:	f10d 0e1c 	add.w	lr, sp, #28
 8022474:	e73f      	b.n	80222f6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x7a>
 8022476:	f10d 091c 	add.w	r9, sp, #28
 802247a:	e7be      	b.n	80223fa <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x17e>
 802247c:	2d00      	cmp	r5, #0
 802247e:	b2c2      	uxtb	r2, r0
 8022480:	af07      	add	r7, sp, #28
 8022482:	f6bf af31 	bge.w	80222e8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 8022486:	46be      	mov	lr, r7
 8022488:	46b9      	mov	r9, r7
 802248a:	4610      	mov	r0, r2
 802248c:	9201      	str	r2, [sp, #4]
 802248e:	e735      	b.n	80222fc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8022490:	b2c0      	uxtb	r0, r0
 8022492:	f10d 0e1c 	add.w	lr, sp, #28
 8022496:	e731      	b.n	80222fc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8022498:	4b03      	ldr	r3, [pc, #12]	; (80224a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x22c>)
 802249a:	4a04      	ldr	r2, [pc, #16]	; (80224ac <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x230>)
 802249c:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80224a0:	4803      	ldr	r0, [pc, #12]	; (80224b0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x234>)
 80224a2:	f005 fe03 	bl	80280ac <__assert_func>
 80224a6:	bf00      	nop
 80224a8:	0802b324 	.word	0x0802b324
 80224ac:	0802b99c 	.word	0x0802b99c
 80224b0:	0802b4a8 	.word	0x0802b4a8

080224b4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80224b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224b8:	ed2d 8b08 	vpush	{d8-d11}
 80224bc:	b095      	sub	sp, #84	; 0x54
 80224be:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 80224c2:	e9dd 512b 	ldrd	r5, r1, [sp, #172]	; 0xac
 80224c6:	e9dd b827 	ldrd	fp, r8, [sp, #156]	; 0x9c
 80224ca:	686c      	ldr	r4, [r5, #4]
 80224cc:	461a      	mov	r2, r3
 80224ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80224d0:	f89d 60bc 	ldrb.w	r6, [sp, #188]	; 0xbc
 80224d4:	fb04 1303 	mla	r3, r4, r3, r1
 80224d8:	682c      	ldr	r4, [r5, #0]
 80224da:	e9cd 0612 	strd	r0, r6, [sp, #72]	; 0x48
 80224de:	43f0      	mvns	r0, r6
 80224e0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80224e4:	eeb0 aa40 	vmov.f32	s20, s0
 80224e8:	eef0 9a60 	vmov.f32	s19, s1
 80224ec:	eeb0 9a41 	vmov.f32	s18, s2
 80224f0:	eef0 8a62 	vmov.f32	s17, s5
 80224f4:	eeb0 8a43 	vmov.f32	s16, s6
 80224f8:	eef0 ba44 	vmov.f32	s23, s8
 80224fc:	eeb0 ba64 	vmov.f32	s22, s9
 8022500:	eef0 aa45 	vmov.f32	s21, s10
 8022504:	469a      	mov	sl, r3
 8022506:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8022508:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 802250a:	6849      	ldr	r1, [r1, #4]
 802250c:	682d      	ldr	r5, [r5, #0]
 802250e:	3104      	adds	r1, #4
 8022510:	b2c0      	uxtb	r0, r0
 8022512:	9108      	str	r1, [sp, #32]
 8022514:	b2b1      	uxth	r1, r6
 8022516:	950b      	str	r5, [sp, #44]	; 0x2c
 8022518:	900c      	str	r0, [sp, #48]	; 0x30
 802251a:	910d      	str	r1, [sp, #52]	; 0x34
 802251c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802251e:	2b00      	cmp	r3, #0
 8022520:	dc02      	bgt.n	8022528 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022522:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022524:	2b00      	cmp	r3, #0
 8022526:	dd65      	ble.n	80225f4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022528:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802252a:	2a00      	cmp	r2, #0
 802252c:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 8022530:	b225      	sxth	r5, r4
 8022532:	fa0f f78e 	sxth.w	r7, lr
 8022536:	f340 8233 	ble.w	80229a0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 802253a:	1e6e      	subs	r6, r5, #1
 802253c:	f107 3cff 	add.w	ip, r7, #4294967295
 8022540:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8022544:	e9dd e929 	ldrd	lr, r9, [sp, #164]	; 0xa4
 8022548:	ea5f 432b 	movs.w	r3, fp, asr #16
 802254c:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022550:	d405      	bmi.n	802255e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022552:	42b3      	cmp	r3, r6
 8022554:	da03      	bge.n	802255e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022556:	2900      	cmp	r1, #0
 8022558:	db01      	blt.n	802255e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802255a:	4561      	cmp	r1, ip
 802255c:	db4f      	blt.n	80225fe <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802255e:	1c58      	adds	r0, r3, #1
 8022560:	d406      	bmi.n	8022570 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8022562:	42a8      	cmp	r0, r5
 8022564:	dc04      	bgt.n	8022570 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8022566:	1c48      	adds	r0, r1, #1
 8022568:	d402      	bmi.n	8022570 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 802256a:	42b8      	cmp	r0, r7
 802256c:	f340 817e 	ble.w	802286c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8022570:	3a01      	subs	r2, #1
 8022572:	44f3      	add	fp, lr
 8022574:	44c8      	add	r8, r9
 8022576:	f10a 0a02 	add.w	sl, sl, #2
 802257a:	d1e5      	bne.n	8022548 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802257c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802257e:	2b00      	cmp	r3, #0
 8022580:	dd38      	ble.n	80225f4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022582:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022586:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802258a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802258e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022592:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022596:	ee29 6aa7 	vmul.f32	s12, s19, s15
 802259a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802259e:	ee76 6a68 	vsub.f32	s13, s12, s17
 80225a2:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80225a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80225aa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80225ae:	ee16 2a90 	vmov	r2, s13
 80225b2:	3b01      	subs	r3, #1
 80225b4:	930e      	str	r3, [sp, #56]	; 0x38
 80225b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80225b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80225bc:	ee17 2a10 	vmov	r2, s14
 80225c0:	eeb0 7a48 	vmov.f32	s14, s16
 80225c4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80225c8:	ee17 8a10 	vmov	r8, s14
 80225cc:	eeb0 7a68 	vmov.f32	s14, s17
 80225d0:	9329      	str	r3, [sp, #164]	; 0xa4
 80225d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80225d4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80225d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80225dc:	932a      	str	r3, [sp, #168]	; 0xa8
 80225de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80225e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80225e2:	ee17 ba10 	vmov	fp, s14
 80225e6:	eeb0 8a67 	vmov.f32	s16, s15
 80225ea:	eef0 8a46 	vmov.f32	s17, s12
 80225ee:	bf18      	it	ne
 80225f0:	461a      	movne	r2, r3
 80225f2:	e793      	b.n	802251c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80225f4:	b015      	add	sp, #84	; 0x54
 80225f6:	ecbd 8b08 	vpop	{d8-d11}
 80225fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225fe:	46d4      	mov	ip, sl
 8022600:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8022604:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8022606:	1e51      	subs	r1, r2, #1
 8022608:	fb00 b301 	mla	r3, r0, r1, fp
 802260c:	141b      	asrs	r3, r3, #16
 802260e:	910a      	str	r1, [sp, #40]	; 0x28
 8022610:	f100 80cc 	bmi.w	80227ac <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8022614:	42b3      	cmp	r3, r6
 8022616:	f280 80c9 	bge.w	80227ac <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802261a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802261c:	fb03 8301 	mla	r3, r3, r1, r8
 8022620:	141b      	asrs	r3, r3, #16
 8022622:	f100 80c3 	bmi.w	80227ac <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8022626:	3f01      	subs	r7, #1
 8022628:	42bb      	cmp	r3, r7
 802262a:	f280 80bf 	bge.w	80227ac <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802262e:	2a00      	cmp	r2, #0
 8022630:	dda4      	ble.n	802257c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8022632:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
 8022636:	e9cd ca09 	strd	ip, sl, [sp, #36]	; 0x24
 802263a:	e08e      	b.n	802275a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802263c:	f891 c001 	ldrb.w	ip, [r1, #1]
 8022640:	194c      	adds	r4, r1, r5
 8022642:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022646:	44bc      	add	ip, r7
 8022648:	2a00      	cmp	r2, #0
 802264a:	f000 80a6 	beq.w	802279a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 802264e:	5d48      	ldrb	r0, [r1, r5]
 8022650:	7865      	ldrb	r5, [r4, #1]
 8022652:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022656:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802265a:	4438      	add	r0, r7
 802265c:	443d      	add	r5, r7
 802265e:	b29b      	uxth	r3, r3
 8022660:	b292      	uxth	r2, r2
 8022662:	fb03 f402 	mul.w	r4, r3, r2
 8022666:	011b      	lsls	r3, r3, #4
 8022668:	1b19      	subs	r1, r3, r4
 802266a:	f89c 9000 	ldrb.w	r9, [ip]
 802266e:	f89c e002 	ldrb.w	lr, [ip, #2]
 8022672:	b289      	uxth	r1, r1
 8022674:	f89c c001 	ldrb.w	ip, [ip, #1]
 8022678:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 802267c:	fb01 f909 	mul.w	r9, r1, r9
 8022680:	b292      	uxth	r2, r2
 8022682:	fb01 fe0e 	mul.w	lr, r1, lr
 8022686:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802268a:	fb01 f10c 	mul.w	r1, r1, ip
 802268e:	f817 a00a 	ldrb.w	sl, [r7, sl]
 8022692:	1a9b      	subs	r3, r3, r2
 8022694:	f896 c002 	ldrb.w	ip, [r6, #2]
 8022698:	b29b      	uxth	r3, r3
 802269a:	7876      	ldrb	r6, [r6, #1]
 802269c:	fb03 990a 	mla	r9, r3, sl, r9
 80226a0:	fb03 ec0c 	mla	ip, r3, ip, lr
 80226a4:	fb03 1306 	mla	r3, r3, r6, r1
 80226a8:	7801      	ldrb	r1, [r0, #0]
 80226aa:	f890 e002 	ldrb.w	lr, [r0, #2]
 80226ae:	fb02 9901 	mla	r9, r2, r1, r9
 80226b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80226b4:	fb02 ce0e 	mla	lr, r2, lr, ip
 80226b8:	7829      	ldrb	r1, [r5, #0]
 80226ba:	f8b7 c000 	ldrh.w	ip, [r7]
 80226be:	7840      	ldrb	r0, [r0, #1]
 80226c0:	78ae      	ldrb	r6, [r5, #2]
 80226c2:	fb02 3200 	mla	r2, r2, r0, r3
 80226c6:	fb04 9901 	mla	r9, r4, r1, r9
 80226ca:	7868      	ldrb	r0, [r5, #1]
 80226cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80226ce:	ea4f 252c 	mov.w	r5, ip, asr #8
 80226d2:	fb04 ee06 	mla	lr, r4, r6, lr
 80226d6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80226da:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80226de:	fb15 f501 	smulbb	r5, r5, r1
 80226e2:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80226e6:	b2db      	uxtb	r3, r3
 80226e8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80226ec:	fb13 f301 	smulbb	r3, r3, r1
 80226f0:	fb1c fc01 	smulbb	ip, ip, r1
 80226f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80226f6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80226fa:	fb04 2200 	mla	r2, r4, r0, r2
 80226fe:	fb0e 5501 	mla	r5, lr, r1, r5
 8022702:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022706:	b2ad      	uxth	r5, r5
 8022708:	fb02 cc01 	mla	ip, r2, r1, ip
 802270c:	1c6a      	adds	r2, r5, #1
 802270e:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8022712:	463a      	mov	r2, r7
 8022714:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8022718:	fb09 3301 	mla	r3, r9, r1, r3
 802271c:	fa1f f18c 	uxth.w	r1, ip
 8022720:	b29b      	uxth	r3, r3
 8022722:	1c5c      	adds	r4, r3, #1
 8022724:	1c48      	adds	r0, r1, #1
 8022726:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802272a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802272e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022732:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022736:	0949      	lsrs	r1, r1, #5
 8022738:	432b      	orrs	r3, r5
 802273a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802273e:	430b      	orrs	r3, r1
 8022740:	f822 3b02 	strh.w	r3, [r2], #2
 8022744:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022746:	9209      	str	r2, [sp, #36]	; 0x24
 8022748:	449b      	add	fp, r3
 802274a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802274c:	4498      	add	r8, r3
 802274e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022750:	429a      	cmp	r2, r3
 8022752:	d029      	beq.n	80227a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022754:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022756:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802275a:	ea4f 432b 	mov.w	r3, fp, asr #16
 802275e:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022762:	fb05 3101 	mla	r1, r5, r1, r3
 8022766:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022768:	9f08      	ldr	r7, [sp, #32]
 802276a:	f812 a001 	ldrb.w	sl, [r2, r1]
 802276e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022772:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8022776:	4411      	add	r1, r2
 8022778:	eb07 060a 	add.w	r6, r7, sl
 802277c:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8022780:	2b00      	cmp	r3, #0
 8022782:	f47f af5b 	bne.w	802263c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8022786:	b15a      	cbz	r2, 80227a0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>
 8022788:	5d48      	ldrb	r0, [r1, r5]
 802278a:	9908      	ldr	r1, [sp, #32]
 802278c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022790:	4635      	mov	r5, r6
 8022792:	4408      	add	r0, r1
 8022794:	46b4      	mov	ip, r6
 8022796:	460f      	mov	r7, r1
 8022798:	e761      	b.n	802265e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802279a:	4635      	mov	r5, r6
 802279c:	4630      	mov	r0, r6
 802279e:	e75e      	b.n	802265e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80227a0:	4635      	mov	r5, r6
 80227a2:	4630      	mov	r0, r6
 80227a4:	46b4      	mov	ip, r6
 80227a6:	e75a      	b.n	802265e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80227a8:	469a      	mov	sl, r3
 80227aa:	e6e7      	b.n	802257c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80227ac:	2a00      	cmp	r2, #0
 80227ae:	f77f aee5 	ble.w	802257c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80227b2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80227b4:	ea4f 432b 	mov.w	r3, fp, asr #16
 80227b8:	ea4f 4128 	mov.w	r1, r8, asr #16
 80227bc:	4675      	mov	r5, lr
 80227be:	46d1      	mov	r9, sl
 80227c0:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80227c4:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 80227c8:	9609      	str	r6, [sp, #36]	; 0x24
 80227ca:	2b00      	cmp	r3, #0
 80227cc:	f3cb 3703 	ubfx	r7, fp, #12, #4
 80227d0:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80227d4:	db27      	blt.n	8022826 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80227d6:	1e60      	subs	r0, r4, #1
 80227d8:	4283      	cmp	r3, r0
 80227da:	da24      	bge.n	8022826 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80227dc:	2900      	cmp	r1, #0
 80227de:	db22      	blt.n	8022826 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80227e0:	1e68      	subs	r0, r5, #1
 80227e2:	4281      	cmp	r1, r0
 80227e4:	da1f      	bge.n	8022826 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80227e6:	b220      	sxth	r0, r4
 80227e8:	fb01 3300 	mla	r3, r1, r0, r3
 80227ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80227ee:	5ccd      	ldrb	r5, [r1, r3]
 80227f0:	440b      	add	r3, r1
 80227f2:	9908      	ldr	r1, [sp, #32]
 80227f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80227f8:	460e      	mov	r6, r1
 80227fa:	eb01 0c05 	add.w	ip, r1, r5
 80227fe:	2f00      	cmp	r7, #0
 8022800:	d04b      	beq.n	802289a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8022802:	785c      	ldrb	r4, [r3, #1]
 8022804:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022808:	440c      	add	r4, r1
 802280a:	2a00      	cmp	r2, #0
 802280c:	f000 80c4 	beq.w	8022998 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8022810:	1819      	adds	r1, r3, r0
 8022812:	7849      	ldrb	r1, [r1, #1]
 8022814:	5c18      	ldrb	r0, [r3, r0]
 8022816:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802281a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802281e:	1873      	adds	r3, r6, r1
 8022820:	9311      	str	r3, [sp, #68]	; 0x44
 8022822:	4430      	add	r0, r6
 8022824:	e03f      	b.n	80228a6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8022826:	1c58      	adds	r0, r3, #1
 8022828:	d405      	bmi.n	8022836 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 802282a:	42a0      	cmp	r0, r4
 802282c:	dc03      	bgt.n	8022836 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 802282e:	1c48      	adds	r0, r1, #1
 8022830:	d401      	bmi.n	8022836 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8022832:	42a8      	cmp	r0, r5
 8022834:	dd20      	ble.n	8022878 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c4>
 8022836:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022838:	f109 0902 	add.w	r9, r9, #2
 802283c:	449b      	add	fp, r3
 802283e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022840:	4498      	add	r8, r3
 8022842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022844:	2b00      	cmp	r3, #0
 8022846:	dd08      	ble.n	802285a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8022848:	e9da 4502 	ldrd	r4, r5, [sl, #8]
 802284c:	3b01      	subs	r3, #1
 802284e:	9309      	str	r3, [sp, #36]	; 0x24
 8022850:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022854:	ea4f 432b 	mov.w	r3, fp, asr #16
 8022858:	e7b7      	b.n	80227ca <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 802285a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802285c:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8022860:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022864:	3301      	adds	r3, #1
 8022866:	eb0a 0a43 	add.w	sl, sl, r3, lsl #1
 802286a:	e687      	b.n	802257c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 802286c:	3a01      	subs	r2, #1
 802286e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8022872:	920a      	str	r2, [sp, #40]	; 0x28
 8022874:	4616      	mov	r6, r2
 8022876:	e7a1      	b.n	80227bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8022878:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802287a:	b22d      	sxth	r5, r5
 802287c:	b224      	sxth	r4, r4
 802287e:	e9cd 2005 	strd	r2, r0, [sp, #20]
 8022882:	e9cd 1703 	strd	r1, r7, [sp, #12]
 8022886:	9302      	str	r3, [sp, #8]
 8022888:	e9cd 4500 	strd	r4, r5, [sp]
 802288c:	9b08      	ldr	r3, [sp, #32]
 802288e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022890:	4649      	mov	r1, r9
 8022892:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022894:	f7ff fcf2 	bl	802227c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8022898:	e7cd      	b.n	8022836 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 802289a:	2a00      	cmp	r2, #0
 802289c:	d173      	bne.n	8022986 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d2>
 802289e:	4660      	mov	r0, ip
 80228a0:	4664      	mov	r4, ip
 80228a2:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 80228a6:	b2bb      	uxth	r3, r7
 80228a8:	b292      	uxth	r2, r2
 80228aa:	fb03 f702 	mul.w	r7, r3, r2
 80228ae:	011b      	lsls	r3, r3, #4
 80228b0:	1bd9      	subs	r1, r3, r7
 80228b2:	7826      	ldrb	r6, [r4, #0]
 80228b4:	f894 e002 	ldrb.w	lr, [r4, #2]
 80228b8:	7864      	ldrb	r4, [r4, #1]
 80228ba:	b289      	uxth	r1, r1
 80228bc:	fb01 f606 	mul.w	r6, r1, r6
 80228c0:	fb01 fe0e 	mul.w	lr, r1, lr
 80228c4:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 80228c8:	fb01 f104 	mul.w	r1, r1, r4
 80228cc:	9c08      	ldr	r4, [sp, #32]
 80228ce:	b292      	uxth	r2, r2
 80228d0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80228d4:	5d65      	ldrb	r5, [r4, r5]
 80228d6:	1a9b      	subs	r3, r3, r2
 80228d8:	f89c 4002 	ldrb.w	r4, [ip, #2]
 80228dc:	f89c c001 	ldrb.w	ip, [ip, #1]
 80228e0:	b29b      	uxth	r3, r3
 80228e2:	fb03 e404 	mla	r4, r3, r4, lr
 80228e6:	fb03 6505 	mla	r5, r3, r5, r6
 80228ea:	fb03 130c 	mla	r3, r3, ip, r1
 80228ee:	f890 c001 	ldrb.w	ip, [r0, #1]
 80228f2:	7801      	ldrb	r1, [r0, #0]
 80228f4:	f890 e002 	ldrb.w	lr, [r0, #2]
 80228f8:	fb02 3c0c 	mla	ip, r2, ip, r3
 80228fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80228fe:	fb02 5601 	mla	r6, r2, r1, r5
 8022902:	fb02 4e0e 	mla	lr, r2, lr, r4
 8022906:	7899      	ldrb	r1, [r3, #2]
 8022908:	781a      	ldrb	r2, [r3, #0]
 802290a:	785b      	ldrb	r3, [r3, #1]
 802290c:	f8b9 0000 	ldrh.w	r0, [r9]
 8022910:	fb07 c303 	mla	r3, r7, r3, ip
 8022914:	fb07 6202 	mla	r2, r7, r2, r6
 8022918:	00c5      	lsls	r5, r0, #3
 802291a:	1204      	asrs	r4, r0, #8
 802291c:	fb07 e101 	mla	r1, r7, r1, lr
 8022920:	10c0      	asrs	r0, r0, #3
 8022922:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022924:	b2ed      	uxtb	r5, r5
 8022926:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802292a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802292e:	fb15 f507 	smulbb	r5, r5, r7
 8022932:	fb14 f407 	smulbb	r4, r4, r7
 8022936:	fb10 f007 	smulbb	r0, r0, r7
 802293a:	f3c3 2707 	ubfx	r7, r3, #8, #8
 802293e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022940:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022944:	461e      	mov	r6, r3
 8022946:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802294a:	fb02 5203 	mla	r2, r2, r3, r5
 802294e:	fb07 0006 	mla	r0, r7, r6, r0
 8022952:	fb01 4303 	mla	r3, r1, r3, r4
 8022956:	b281      	uxth	r1, r0
 8022958:	b294      	uxth	r4, r2
 802295a:	b29b      	uxth	r3, r3
 802295c:	1c4a      	adds	r2, r1, #1
 802295e:	1c5d      	adds	r5, r3, #1
 8022960:	1c60      	adds	r0, r4, #1
 8022962:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8022966:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 802296a:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802296e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022972:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 8022976:	0952      	lsrs	r2, r2, #5
 8022978:	430b      	orrs	r3, r1
 802297a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802297e:	4313      	orrs	r3, r2
 8022980:	f8a9 3000 	strh.w	r3, [r9]
 8022984:	e757      	b.n	8022836 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8022986:	5c18      	ldrb	r0, [r3, r0]
 8022988:	9b08      	ldr	r3, [sp, #32]
 802298a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802298e:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8022992:	4418      	add	r0, r3
 8022994:	4664      	mov	r4, ip
 8022996:	e786      	b.n	80228a6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8022998:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 802299c:	4660      	mov	r0, ip
 802299e:	e782      	b.n	80228a6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80229a0:	f43f adec 	beq.w	802257c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80229a4:	1e6e      	subs	r6, r5, #1
 80229a6:	46d4      	mov	ip, sl
 80229a8:	e62c      	b.n	8022604 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80229aa:	bf00      	nop

080229ac <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 80229ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229b0:	4692      	mov	sl, r2
 80229b2:	b083      	sub	sp, #12
 80229b4:	880a      	ldrh	r2, [r1, #0]
 80229b6:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80229ba:	e9dd 740e 	ldrd	r7, r4, [sp, #56]	; 0x38
 80229be:	0215      	lsls	r5, r2, #8
 80229c0:	0150      	lsls	r0, r2, #5
 80229c2:	fb04 7e0c 	mla	lr, r4, ip, r7
 80229c6:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 80229ca:	f405 0578 	and.w	r5, r5, #16252928	; 0xf80000
 80229ce:	00d2      	lsls	r2, r2, #3
 80229d0:	4305      	orrs	r5, r0
 80229d2:	b2d2      	uxtb	r2, r2
 80229d4:	4315      	orrs	r5, r2
 80229d6:	2c00      	cmp	r4, #0
 80229d8:	9501      	str	r5, [sp, #4]
 80229da:	eb0a 020e 	add.w	r2, sl, lr
 80229de:	f104 0801 	add.w	r8, r4, #1
 80229e2:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80229e6:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80229ea:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80229ee:	db01      	blt.n	80229f4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x48>
 80229f0:	45a1      	cmp	r9, r4
 80229f2:	dc71      	bgt.n	8022ad8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x12c>
 80229f4:	fa5f fa85 	uxtb.w	sl, r5
 80229f8:	f10d 0b04 	add.w	fp, sp, #4
 80229fc:	4654      	mov	r4, sl
 80229fe:	46de      	mov	lr, fp
 8022a00:	f1b8 0f00 	cmp.w	r8, #0
 8022a04:	db01      	blt.n	8022a0a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5e>
 8022a06:	45c1      	cmp	r9, r8
 8022a08:	dc4c      	bgt.n	8022aa4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xf8>
 8022a0a:	fa5f f985 	uxtb.w	r9, r5
 8022a0e:	ab01      	add	r3, sp, #4
 8022a10:	464d      	mov	r5, r9
 8022a12:	4698      	mov	r8, r3
 8022a14:	2e0f      	cmp	r6, #15
 8022a16:	f200 809b 	bhi.w	8022b50 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8022a1a:	280f      	cmp	r0, #15
 8022a1c:	f200 8098 	bhi.w	8022b50 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8022a20:	b2b2      	uxth	r2, r6
 8022a22:	b280      	uxth	r0, r0
 8022a24:	fb02 f700 	mul.w	r7, r2, r0
 8022a28:	0112      	lsls	r2, r2, #4
 8022a2a:	f89b c002 	ldrb.w	ip, [fp, #2]
 8022a2e:	1bd6      	subs	r6, r2, r7
 8022a30:	f89b b001 	ldrb.w	fp, [fp, #1]
 8022a34:	b2b6      	uxth	r6, r6
 8022a36:	ebc7 1000 	rsb	r0, r7, r0, lsl #4
 8022a3a:	fb06 f404 	mul.w	r4, r6, r4
 8022a3e:	fb06 fc0c 	mul.w	ip, r6, ip
 8022a42:	fb06 f60b 	mul.w	r6, r6, fp
 8022a46:	b280      	uxth	r0, r0
 8022a48:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8022a4c:	f89e b002 	ldrb.w	fp, [lr, #2]
 8022a50:	1a12      	subs	r2, r2, r0
 8022a52:	f89e e001 	ldrb.w	lr, [lr, #1]
 8022a56:	b292      	uxth	r2, r2
 8022a58:	fb02 440a 	mla	r4, r2, sl, r4
 8022a5c:	fb02 660e 	mla	r6, r2, lr, r6
 8022a60:	fb02 cc0b 	mla	ip, r2, fp, ip
 8022a64:	f898 a002 	ldrb.w	sl, [r8, #2]
 8022a68:	f898 8001 	ldrb.w	r8, [r8, #1]
 8022a6c:	fb00 4909 	mla	r9, r0, r9, r4
 8022a70:	fb00 cc0a 	mla	ip, r0, sl, ip
 8022a74:	fb00 6008 	mla	r0, r0, r8, r6
 8022a78:	789e      	ldrb	r6, [r3, #2]
 8022a7a:	785b      	ldrb	r3, [r3, #1]
 8022a7c:	fb07 9905 	mla	r9, r7, r5, r9
 8022a80:	fb07 c506 	mla	r5, r7, r6, ip
 8022a84:	fb07 0703 	mla	r7, r7, r3, r0
 8022a88:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8022a8c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022a90:	097f      	lsrs	r7, r7, #5
 8022a92:	ea45 0509 	orr.w	r5, r5, r9
 8022a96:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022a9a:	433d      	orrs	r5, r7
 8022a9c:	800d      	strh	r5, [r1, #0]
 8022a9e:	b003      	add	sp, #12
 8022aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022aa4:	b388      	cbz	r0, 8022b0a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x15e>
 8022aa6:	2f00      	cmp	r7, #0
 8022aa8:	db40      	blt.n	8022b2c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x180>
 8022aaa:	45bc      	cmp	ip, r7
 8022aac:	dd3e      	ble.n	8022b2c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x180>
 8022aae:	f812 800c 	ldrb.w	r8, [r2, ip]
 8022ab2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022ab6:	4498      	add	r8, r3
 8022ab8:	3701      	adds	r7, #1
 8022aba:	f898 9000 	ldrb.w	r9, [r8]
 8022abe:	d432      	bmi.n	8022b26 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x17a>
 8022ac0:	45bc      	cmp	ip, r7
 8022ac2:	dd30      	ble.n	8022b26 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x17a>
 8022ac4:	2e00      	cmp	r6, #0
 8022ac6:	d040      	beq.n	8022b4a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x19e>
 8022ac8:	4494      	add	ip, r2
 8022aca:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8022ace:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022ad2:	5c9d      	ldrb	r5, [r3, r2]
 8022ad4:	4413      	add	r3, r2
 8022ad6:	e79d      	b.n	8022a14 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x68>
 8022ad8:	2f00      	cmp	r7, #0
 8022ada:	db01      	blt.n	8022ae0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x134>
 8022adc:	45bc      	cmp	ip, r7
 8022ade:	dc1c      	bgt.n	8022b1a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16e>
 8022ae0:	f10d 0e04 	add.w	lr, sp, #4
 8022ae4:	1c7c      	adds	r4, r7, #1
 8022ae6:	f89e a000 	ldrb.w	sl, [lr]
 8022aea:	d40a      	bmi.n	8022b02 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x156>
 8022aec:	45a4      	cmp	ip, r4
 8022aee:	dd08      	ble.n	8022b02 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x156>
 8022af0:	b1fe      	cbz	r6, 8022b32 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x186>
 8022af2:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022af6:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8022afa:	f813 400b 	ldrb.w	r4, [r3, fp]
 8022afe:	449b      	add	fp, r3
 8022b00:	e77e      	b.n	8022a00 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x54>
 8022b02:	b2ec      	uxtb	r4, r5
 8022b04:	f10d 0b04 	add.w	fp, sp, #4
 8022b08:	e77a      	b.n	8022a00 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x54>
 8022b0a:	2e0f      	cmp	r6, #15
 8022b0c:	fa5f f985 	uxtb.w	r9, r5
 8022b10:	d81e      	bhi.n	8022b50 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8022b12:	ab01      	add	r3, sp, #4
 8022b14:	4698      	mov	r8, r3
 8022b16:	464d      	mov	r5, r9
 8022b18:	e782      	b.n	8022a20 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x74>
 8022b1a:	f81a e00e 	ldrb.w	lr, [sl, lr]
 8022b1e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022b22:	449e      	add	lr, r3
 8022b24:	e7de      	b.n	8022ae4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8022b26:	b2ed      	uxtb	r5, r5
 8022b28:	ab01      	add	r3, sp, #4
 8022b2a:	e773      	b.n	8022a14 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x68>
 8022b2c:	f10d 0804 	add.w	r8, sp, #4
 8022b30:	e7c2      	b.n	8022ab8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x10c>
 8022b32:	f1b8 0f00 	cmp.w	r8, #0
 8022b36:	b2ec      	uxtb	r4, r5
 8022b38:	f10d 0b04 	add.w	fp, sp, #4
 8022b3c:	f6bf af63 	bge.w	8022a06 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8022b40:	465b      	mov	r3, fp
 8022b42:	46d8      	mov	r8, fp
 8022b44:	4625      	mov	r5, r4
 8022b46:	46a1      	mov	r9, r4
 8022b48:	e767      	b.n	8022a1a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8022b4a:	b2ed      	uxtb	r5, r5
 8022b4c:	ab01      	add	r3, sp, #4
 8022b4e:	e764      	b.n	8022a1a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8022b50:	4b03      	ldr	r3, [pc, #12]	; (8022b60 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1b4>)
 8022b52:	4a04      	ldr	r2, [pc, #16]	; (8022b64 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1b8>)
 8022b54:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8022b58:	4803      	ldr	r0, [pc, #12]	; (8022b68 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1bc>)
 8022b5a:	f005 faa7 	bl	80280ac <__assert_func>
 8022b5e:	bf00      	nop
 8022b60:	0802b324 	.word	0x0802b324
 8022b64:	0802b99c 	.word	0x0802b99c
 8022b68:	0802b4a8 	.word	0x0802b4a8

08022b6c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b70:	ed2d 8b0a 	vpush	{d8-d12}
 8022b74:	eeb0 aa40 	vmov.f32	s20, s0
 8022b78:	eef0 9a60 	vmov.f32	s19, s1
 8022b7c:	eeb0 9a41 	vmov.f32	s18, s2
 8022b80:	eef0 8a62 	vmov.f32	s17, s5
 8022b84:	eeb0 8a43 	vmov.f32	s16, s6
 8022b88:	eeb0 ca44 	vmov.f32	s24, s8
 8022b8c:	eef0 ba64 	vmov.f32	s23, s9
 8022b90:	eeb0 ba45 	vmov.f32	s22, s10
 8022b94:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8022b98:	b093      	sub	sp, #76	; 0x4c
 8022b9a:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8022b9e:	e9dd 412b 	ldrd	r4, r1, [sp, #172]	; 0xac
 8022ba2:	e9dd 9827 	ldrd	r9, r8, [sp, #156]	; 0x9c
 8022ba6:	9011      	str	r0, [sp, #68]	; 0x44
 8022ba8:	461a      	mov	r2, r3
 8022baa:	6860      	ldr	r0, [r4, #4]
 8022bac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022bae:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
 8022bb2:	fb00 1303 	mla	r3, r0, r3, r1
 8022bb6:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8022bb8:	6820      	ldr	r0, [r4, #0]
 8022bba:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8022bbc:	6849      	ldr	r1, [r1, #4]
 8022bbe:	6824      	ldr	r4, [r4, #0]
 8022bc0:	eb00 0b43 	add.w	fp, r0, r3, lsl #1
 8022bc4:	1d0b      	adds	r3, r1, #4
 8022bc6:	9409      	str	r4, [sp, #36]	; 0x24
 8022bc8:	930c      	str	r3, [sp, #48]	; 0x30
 8022bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022bcc:	2b00      	cmp	r3, #0
 8022bce:	dc02      	bgt.n	8022bd6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022bd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022bd2:	2b00      	cmp	r3, #0
 8022bd4:	dd61      	ble.n	8022c9a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 8022bd6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022bd8:	2a00      	cmp	r2, #0
 8022bda:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 8022bde:	b225      	sxth	r5, r4
 8022be0:	fa0f f78e 	sxth.w	r7, lr
 8022be4:	f340 81d9 	ble.w	8022f9a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8022be8:	f8cd e01c 	str.w	lr, [sp, #28]
 8022bec:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
 8022bf0:	1e6e      	subs	r6, r5, #1
 8022bf2:	f107 3cff 	add.w	ip, r7, #4294967295
 8022bf6:	ea5f 4329 	movs.w	r3, r9, asr #16
 8022bfa:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022bfe:	d405      	bmi.n	8022c0c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022c00:	42b3      	cmp	r3, r6
 8022c02:	da03      	bge.n	8022c0c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022c04:	2900      	cmp	r1, #0
 8022c06:	db01      	blt.n	8022c0c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022c08:	4561      	cmp	r1, ip
 8022c0a:	db4b      	blt.n	8022ca4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8022c0c:	1c58      	adds	r0, r3, #1
 8022c0e:	d406      	bmi.n	8022c1e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8022c10:	42a8      	cmp	r0, r5
 8022c12:	dc04      	bgt.n	8022c1e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8022c14:	1c48      	adds	r0, r1, #1
 8022c16:	d402      	bmi.n	8022c1e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8022c18:	42b8      	cmp	r0, r7
 8022c1a:	f340 8149 	ble.w	8022eb0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022c1e:	3a01      	subs	r2, #1
 8022c20:	44d1      	add	r9, sl
 8022c22:	44f0      	add	r8, lr
 8022c24:	f10b 0b02 	add.w	fp, fp, #2
 8022c28:	d1e5      	bne.n	8022bf6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c2c:	2b00      	cmp	r3, #0
 8022c2e:	dd34      	ble.n	8022c9a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 8022c30:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8022c34:	ee79 9aab 	vadd.f32	s19, s19, s23
 8022c38:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8022c3c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8022c40:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8022c44:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022c48:	ee76 6a68 	vsub.f32	s13, s12, s17
 8022c4c:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8022c50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c54:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8022c58:	ee16 2a90 	vmov	r2, s13
 8022c5c:	3b01      	subs	r3, #1
 8022c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8022c60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022c62:	fb92 faf3 	sdiv	sl, r2, r3
 8022c66:	ee17 2a10 	vmov	r2, s14
 8022c6a:	eeb0 7a48 	vmov.f32	s14, s16
 8022c6e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8022c72:	ee17 8a10 	vmov	r8, s14
 8022c76:	eeb0 7a68 	vmov.f32	s14, s17
 8022c7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c7e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8022c82:	932a      	str	r3, [sp, #168]	; 0xa8
 8022c84:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022c86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022c88:	ee17 9a10 	vmov	r9, s14
 8022c8c:	eeb0 8a67 	vmov.f32	s16, s15
 8022c90:	eef0 8a46 	vmov.f32	s17, s12
 8022c94:	bf18      	it	ne
 8022c96:	461a      	movne	r2, r3
 8022c98:	e797      	b.n	8022bca <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8022c9a:	b013      	add	sp, #76	; 0x4c
 8022c9c:	ecbd 8b0a 	vpop	{d8-d12}
 8022ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ca4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8022ca8:	f8cd b01c 	str.w	fp, [sp, #28]
 8022cac:	1e51      	subs	r1, r2, #1
 8022cae:	fb0a 9301 	mla	r3, sl, r1, r9
 8022cb2:	141b      	asrs	r3, r3, #16
 8022cb4:	9108      	str	r1, [sp, #32]
 8022cb6:	f100 809e 	bmi.w	8022df6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022cba:	42b3      	cmp	r3, r6
 8022cbc:	f280 809b 	bge.w	8022df6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022cc0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022cc2:	fb03 8301 	mla	r3, r3, r1, r8
 8022cc6:	141b      	asrs	r3, r3, #16
 8022cc8:	f100 8095 	bmi.w	8022df6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022ccc:	3f01      	subs	r7, #1
 8022cce:	42bb      	cmp	r3, r7
 8022cd0:	f280 8091 	bge.w	8022df6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022cd4:	2a00      	cmp	r2, #0
 8022cd6:	dda8      	ble.n	8022c2a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022cd8:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8022cdc:	f8cd a0a4 	str.w	sl, [sp, #164]	; 0xa4
 8022ce0:	f8cd b020 	str.w	fp, [sp, #32]
 8022ce4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8022ce8:	e060      	b.n	8022dac <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022cea:	784f      	ldrb	r7, [r1, #1]
 8022cec:	194c      	adds	r4, r1, r5
 8022cee:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022cf2:	4457      	add	r7, sl
 8022cf4:	2a00      	cmp	r2, #0
 8022cf6:	d075      	beq.n	8022de4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8022cf8:	5d48      	ldrb	r0, [r1, r5]
 8022cfa:	7865      	ldrb	r5, [r4, #1]
 8022cfc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022d00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022d04:	4450      	add	r0, sl
 8022d06:	4455      	add	r5, sl
 8022d08:	b29b      	uxth	r3, r3
 8022d0a:	b292      	uxth	r2, r2
 8022d0c:	fb03 f402 	mul.w	r4, r3, r2
 8022d10:	011b      	lsls	r3, r3, #4
 8022d12:	f897 e000 	ldrb.w	lr, [r7]
 8022d16:	f897 c002 	ldrb.w	ip, [r7, #2]
 8022d1a:	1b19      	subs	r1, r3, r4
 8022d1c:	787f      	ldrb	r7, [r7, #1]
 8022d1e:	b289      	uxth	r1, r1
 8022d20:	fb01 fc0c 	mul.w	ip, r1, ip
 8022d24:	fb01 fe0e 	mul.w	lr, r1, lr
 8022d28:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8022d2c:	fb01 f107 	mul.w	r1, r1, r7
 8022d30:	b292      	uxth	r2, r2
 8022d32:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8022d36:	f81a b00b 	ldrb.w	fp, [sl, fp]
 8022d3a:	78b7      	ldrb	r7, [r6, #2]
 8022d3c:	1a9b      	subs	r3, r3, r2
 8022d3e:	7876      	ldrb	r6, [r6, #1]
 8022d40:	b29b      	uxth	r3, r3
 8022d42:	fb03 ee0b 	mla	lr, r3, fp, lr
 8022d46:	fb03 c707 	mla	r7, r3, r7, ip
 8022d4a:	fb03 1306 	mla	r3, r3, r6, r1
 8022d4e:	f890 b000 	ldrb.w	fp, [r0]
 8022d52:	f890 c002 	ldrb.w	ip, [r0, #2]
 8022d56:	7841      	ldrb	r1, [r0, #1]
 8022d58:	fb02 ee0b 	mla	lr, r2, fp, lr
 8022d5c:	fb02 3301 	mla	r3, r2, r1, r3
 8022d60:	fb02 770c 	mla	r7, r2, ip, r7
 8022d64:	f895 b000 	ldrb.w	fp, [r5]
 8022d68:	f895 c002 	ldrb.w	ip, [r5, #2]
 8022d6c:	7869      	ldrb	r1, [r5, #1]
 8022d6e:	fb04 ee0b 	mla	lr, r4, fp, lr
 8022d72:	fb04 3101 	mla	r1, r4, r1, r3
 8022d76:	fb04 7c0c 	mla	ip, r4, ip, r7
 8022d7a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022d7c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022d80:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022d84:	0949      	lsrs	r1, r1, #5
 8022d86:	4491      	add	r9, r2
 8022d88:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022d8a:	9b07      	ldr	r3, [sp, #28]
 8022d8c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022d90:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022d94:	ea4e 0e01 	orr.w	lr, lr, r1
 8022d98:	4490      	add	r8, r2
 8022d9a:	9a08      	ldr	r2, [sp, #32]
 8022d9c:	f823 eb02 	strh.w	lr, [r3], #2
 8022da0:	4293      	cmp	r3, r2
 8022da2:	9307      	str	r3, [sp, #28]
 8022da4:	d025      	beq.n	8022df2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8022da6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022da8:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8022dac:	ea4f 4329 	mov.w	r3, r9, asr #16
 8022db0:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022db4:	fb05 3101 	mla	r1, r5, r1, r3
 8022db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022dba:	f3c9 3303 	ubfx	r3, r9, #12, #4
 8022dbe:	f812 b001 	ldrb.w	fp, [r2, r1]
 8022dc2:	4411      	add	r1, r2
 8022dc4:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8022dc8:	eb0a 060b 	add.w	r6, sl, fp
 8022dcc:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8022dd0:	2b00      	cmp	r3, #0
 8022dd2:	d18a      	bne.n	8022cea <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8022dd4:	b14a      	cbz	r2, 8022dea <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022dd6:	5d48      	ldrb	r0, [r1, r5]
 8022dd8:	4637      	mov	r7, r6
 8022dda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022dde:	4635      	mov	r5, r6
 8022de0:	4450      	add	r0, sl
 8022de2:	e791      	b.n	8022d08 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8022de4:	4635      	mov	r5, r6
 8022de6:	4630      	mov	r0, r6
 8022de8:	e78e      	b.n	8022d08 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8022dea:	4635      	mov	r5, r6
 8022dec:	4630      	mov	r0, r6
 8022dee:	4637      	mov	r7, r6
 8022df0:	e78a      	b.n	8022d08 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8022df2:	4693      	mov	fp, r2
 8022df4:	e719      	b.n	8022c2a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022df6:	2a00      	cmp	r2, #0
 8022df8:	f77f af17 	ble.w	8022c2a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022dfc:	9e08      	ldr	r6, [sp, #32]
 8022dfe:	ea4f 4329 	mov.w	r3, r9, asr #16
 8022e02:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022e06:	465f      	mov	r7, fp
 8022e08:	f8cd b01c 	str.w	fp, [sp, #28]
 8022e0c:	f8dd b0b8 	ldr.w	fp, [sp, #184]	; 0xb8
 8022e10:	2b00      	cmp	r3, #0
 8022e12:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8022e16:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8022e1a:	db2a      	blt.n	8022e72 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022e1c:	1e65      	subs	r5, r4, #1
 8022e1e:	42ab      	cmp	r3, r5
 8022e20:	da27      	bge.n	8022e72 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022e22:	2900      	cmp	r1, #0
 8022e24:	db25      	blt.n	8022e72 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022e26:	f10e 35ff 	add.w	r5, lr, #4294967295
 8022e2a:	42a9      	cmp	r1, r5
 8022e2c:	da21      	bge.n	8022e72 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022e2e:	b224      	sxth	r4, r4
 8022e30:	fb01 3304 	mla	r3, r1, r4, r3
 8022e34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022e36:	f811 c003 	ldrb.w	ip, [r1, r3]
 8022e3a:	440b      	add	r3, r1
 8022e3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022e3e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022e42:	eb01 0e0c 	add.w	lr, r1, ip
 8022e46:	2800      	cmp	r0, #0
 8022e48:	d048      	beq.n	8022edc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8022e4a:	785d      	ldrb	r5, [r3, #1]
 8022e4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022e50:	440d      	add	r5, r1
 8022e52:	2a00      	cmp	r2, #0
 8022e54:	f000 809e 	beq.w	8022f94 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8022e58:	1919      	adds	r1, r3, r4
 8022e5a:	7849      	ldrb	r1, [r1, #1]
 8022e5c:	5d1c      	ldrb	r4, [r3, r4]
 8022e5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e60:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022e64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022e68:	1859      	adds	r1, r3, r1
 8022e6a:	18e3      	adds	r3, r4, r3
 8022e6c:	910f      	str	r1, [sp, #60]	; 0x3c
 8022e6e:	9310      	str	r3, [sp, #64]	; 0x40
 8022e70:	e039      	b.n	8022ee6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022e72:	1c5d      	adds	r5, r3, #1
 8022e74:	d405      	bmi.n	8022e82 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022e76:	42a5      	cmp	r5, r4
 8022e78:	dc03      	bgt.n	8022e82 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022e7a:	1c4d      	adds	r5, r1, #1
 8022e7c:	d401      	bmi.n	8022e82 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022e7e:	4575      	cmp	r5, lr
 8022e80:	dd1c      	ble.n	8022ebc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8022e82:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022e84:	2e00      	cmp	r6, #0
 8022e86:	f107 0702 	add.w	r7, r7, #2
 8022e8a:	44d1      	add	r9, sl
 8022e8c:	4498      	add	r8, r3
 8022e8e:	dd07      	ble.n	8022ea0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8022e90:	e9db 4e02 	ldrd	r4, lr, [fp, #8]
 8022e94:	3e01      	subs	r6, #1
 8022e96:	ea4f 4329 	mov.w	r3, r9, asr #16
 8022e9a:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022e9e:	e7b7      	b.n	8022e10 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8022ea0:	e9dd b307 	ldrd	fp, r3, [sp, #28]
 8022ea4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022ea8:	3301      	adds	r3, #1
 8022eaa:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8022eae:	e6bc      	b.n	8022c2a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022eb0:	3a01      	subs	r2, #1
 8022eb2:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8022eb6:	9208      	str	r2, [sp, #32]
 8022eb8:	4616      	mov	r6, r2
 8022eba:	e7a4      	b.n	8022e06 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8022ebc:	fa0f f58e 	sxth.w	r5, lr
 8022ec0:	b224      	sxth	r4, r4
 8022ec2:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8022ec6:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8022eca:	e9cd 4500 	strd	r4, r5, [sp]
 8022ece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022ed2:	4639      	mov	r1, r7
 8022ed4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022ed6:	f7ff fd69 	bl	80229ac <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8022eda:	e7d2      	b.n	8022e82 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022edc:	2a00      	cmp	r2, #0
 8022ede:	d14f      	bne.n	8022f80 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8022ee0:	4675      	mov	r5, lr
 8022ee2:	e9cd ee0f 	strd	lr, lr, [sp, #60]	; 0x3c
 8022ee6:	b283      	uxth	r3, r0
 8022ee8:	b292      	uxth	r2, r2
 8022eea:	fb03 f002 	mul.w	r0, r3, r2
 8022eee:	782c      	ldrb	r4, [r5, #0]
 8022ef0:	011b      	lsls	r3, r3, #4
 8022ef2:	940e      	str	r4, [sp, #56]	; 0x38
 8022ef4:	78ac      	ldrb	r4, [r5, #2]
 8022ef6:	1a19      	subs	r1, r3, r0
 8022ef8:	940d      	str	r4, [sp, #52]	; 0x34
 8022efa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022efc:	b289      	uxth	r1, r1
 8022efe:	fb01 f404 	mul.w	r4, r1, r4
 8022f02:	940e      	str	r4, [sp, #56]	; 0x38
 8022f04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022f06:	786d      	ldrb	r5, [r5, #1]
 8022f08:	fb01 f404 	mul.w	r4, r1, r4
 8022f0c:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8022f10:	fb01 f105 	mul.w	r1, r1, r5
 8022f14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022f16:	b292      	uxth	r2, r2
 8022f18:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8022f1c:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8022f20:	940d      	str	r4, [sp, #52]	; 0x34
 8022f22:	1a9b      	subs	r3, r3, r2
 8022f24:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022f26:	b29b      	uxth	r3, r3
 8022f28:	f89e 5002 	ldrb.w	r5, [lr, #2]
 8022f2c:	fb03 4c0c 	mla	ip, r3, ip, r4
 8022f30:	f89e e001 	ldrb.w	lr, [lr, #1]
 8022f34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022f36:	fb03 4505 	mla	r5, r3, r5, r4
 8022f3a:	fb03 130e 	mla	r3, r3, lr, r1
 8022f3e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022f40:	78a1      	ldrb	r1, [r4, #2]
 8022f42:	f894 e000 	ldrb.w	lr, [r4]
 8022f46:	7864      	ldrb	r4, [r4, #1]
 8022f48:	fb02 5501 	mla	r5, r2, r1, r5
 8022f4c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022f50:	fb02 3104 	mla	r1, r2, r4, r3
 8022f54:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022f56:	7822      	ldrb	r2, [r4, #0]
 8022f58:	78a3      	ldrb	r3, [r4, #2]
 8022f5a:	7864      	ldrb	r4, [r4, #1]
 8022f5c:	fb00 cc02 	mla	ip, r0, r2, ip
 8022f60:	fb00 5303 	mla	r3, r0, r3, r5
 8022f64:	fb00 1204 	mla	r2, r0, r4, r1
 8022f68:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022f6c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022f70:	0952      	lsrs	r2, r2, #5
 8022f72:	ea43 030c 	orr.w	r3, r3, ip
 8022f76:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022f7a:	4313      	orrs	r3, r2
 8022f7c:	803b      	strh	r3, [r7, #0]
 8022f7e:	e780      	b.n	8022e82 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022f80:	5d1c      	ldrb	r4, [r3, r4]
 8022f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022f84:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022f88:	18e3      	adds	r3, r4, r3
 8022f8a:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8022f8e:	9310      	str	r3, [sp, #64]	; 0x40
 8022f90:	4675      	mov	r5, lr
 8022f92:	e7a8      	b.n	8022ee6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022f94:	e9cd ee0f 	strd	lr, lr, [sp, #60]	; 0x3c
 8022f98:	e7a5      	b.n	8022ee6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022f9a:	f43f ae46 	beq.w	8022c2a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022f9e:	1e6e      	subs	r6, r5, #1
 8022fa0:	f8cd b01c 	str.w	fp, [sp, #28]
 8022fa4:	e682      	b.n	8022cac <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022fa6:	bf00      	nop

08022fa8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8022fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fac:	b08b      	sub	sp, #44	; 0x2c
 8022fae:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
 8022fb2:	f8b1 c000 	ldrh.w	ip, [r1]
 8022fb6:	e9dd 6416 	ldrd	r6, r4, [sp, #88]	; 0x58
 8022fba:	fb04 6507 	mla	r5, r4, r7, r6
 8022fbe:	9107      	str	r1, [sp, #28]
 8022fc0:	ea4f 01ec 	mov.w	r1, ip, asr #3
 8022fc4:	ea4f 202c 	mov.w	r0, ip, asr #8
 8022fc8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022fcc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022fd0:	469a      	mov	sl, r3
 8022fd2:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8022fd6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022fda:	9105      	str	r1, [sp, #20]
 8022fdc:	2c00      	cmp	r4, #0
 8022fde:	fa5f f18c 	uxtb.w	r1, ip
 8022fe2:	9004      	str	r0, [sp, #16]
 8022fe4:	9106      	str	r1, [sp, #24]
 8022fe6:	eb02 0e05 	add.w	lr, r2, r5
 8022fea:	f104 0801 	add.w	r8, r4, #1
 8022fee:	f9bd 9054 	ldrsh.w	r9, [sp, #84]	; 0x54
 8022ff2:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 8022ff6:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 8022ffa:	9308      	str	r3, [sp, #32]
 8022ffc:	db02      	blt.n	8023004 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8022ffe:	45a1      	cmp	r9, r4
 8023000:	f300 8119 	bgt.w	8023236 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28e>
 8023004:	f04f 0c00 	mov.w	ip, #0
 8023008:	4665      	mov	r5, ip
 802300a:	4662      	mov	r2, ip
 802300c:	4664      	mov	r4, ip
 802300e:	f1b8 0f00 	cmp.w	r8, #0
 8023012:	db02      	blt.n	802301a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x72>
 8023014:	45c1      	cmp	r9, r8
 8023016:	f300 8127 	bgt.w	8023268 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c0>
 802301a:	f04f 0e00 	mov.w	lr, #0
 802301e:	46f0      	mov	r8, lr
 8023020:	4676      	mov	r6, lr
 8023022:	46f1      	mov	r9, lr
 8023024:	290f      	cmp	r1, #15
 8023026:	f200 815e 	bhi.w	80232e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 802302a:	280f      	cmp	r0, #15
 802302c:	f200 815b 	bhi.w	80232e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 8023030:	b280      	uxth	r0, r0
 8023032:	b289      	uxth	r1, r1
 8023034:	fb00 fa01 	mul.w	sl, r0, r1
 8023038:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802303c:	b280      	uxth	r0, r0
 802303e:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8023042:	fb00 fb08 	mul.w	fp, r0, r8
 8023046:	fb0a f70e 	mul.w	r7, sl, lr
 802304a:	9301      	str	r3, [sp, #4]
 802304c:	f009 13ff 	and.w	r3, r9, #16711935	; 0xff00ff
 8023050:	9302      	str	r3, [sp, #8]
 8023052:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8023056:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802305a:	9303      	str	r3, [sp, #12]
 802305c:	0109      	lsls	r1, r1, #4
 802305e:	eba1 090a 	sub.w	r9, r1, sl
 8023062:	fa1f f989 	uxth.w	r9, r9
 8023066:	fb09 f30c 	mul.w	r3, r9, ip
 802306a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802306e:	1a09      	subs	r1, r1, r0
 8023070:	b289      	uxth	r1, r1
 8023072:	fb01 3305 	mla	r3, r1, r5, r3
 8023076:	445b      	add	r3, fp
 8023078:	443b      	add	r3, r7
 802307a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802307e:	2dff      	cmp	r5, #255	; 0xff
 8023080:	9309      	str	r3, [sp, #36]	; 0x24
 8023082:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8023086:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802308a:	d019      	beq.n	80230c0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x118>
 802308c:	fb03 f305 	mul.w	r3, r3, r5
 8023090:	fb04 f405 	mul.w	r4, r4, r5
 8023094:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8023098:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802309c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80230a0:	f504 7780 	add.w	r7, r4, #256	; 0x100
 80230a4:	445b      	add	r3, fp
 80230a6:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80230aa:	0a1b      	lsrs	r3, r3, #8
 80230ac:	0a24      	lsrs	r4, r4, #8
 80230ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80230b2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80230b6:	431c      	orrs	r4, r3
 80230b8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80230bc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80230c0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80230c4:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 80230c8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80230cc:	d018      	beq.n	8023100 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x158>
 80230ce:	fb05 f50c 	mul.w	r5, r5, ip
 80230d2:	fb02 f20c 	mul.w	r2, r2, ip
 80230d6:	0a2f      	lsrs	r7, r5, #8
 80230d8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80230dc:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80230e0:	f502 7c80 	add.w	ip, r2, #256	; 0x100
 80230e4:	443d      	add	r5, r7
 80230e6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80230ea:	0a2d      	lsrs	r5, r5, #8
 80230ec:	0a12      	lsrs	r2, r2, #8
 80230ee:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80230f2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80230f6:	432a      	orrs	r2, r5
 80230f8:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 80230fc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023100:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023104:	d01f      	beq.n	8023146 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x19e>
 8023106:	9f02      	ldr	r7, [sp, #8]
 8023108:	fb07 fb08 	mul.w	fp, r7, r8
 802310c:	9f03      	ldr	r7, [sp, #12]
 802310e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8023112:	fb07 f808 	mul.w	r8, r7, r8
 8023116:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802311a:	f508 7780 	add.w	r7, r8, #256	; 0x100
 802311e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023122:	eb07 2718 	add.w	r7, r7, r8, lsr #8
 8023126:	44dc      	add	ip, fp
 8023128:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802312c:	0a3f      	lsrs	r7, r7, #8
 802312e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023132:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023136:	ea4c 0807 	orr.w	r8, ip, r7
 802313a:	f008 17ff 	and.w	r7, r8, #16711935	; 0xff00ff
 802313e:	9702      	str	r7, [sp, #8]
 8023140:	f408 477f 	and.w	r7, r8, #65280	; 0xff00
 8023144:	9703      	str	r7, [sp, #12]
 8023146:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802314a:	d01d      	beq.n	8023188 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1e0>
 802314c:	9f01      	ldr	r7, [sp, #4]
 802314e:	fb06 f60e 	mul.w	r6, r6, lr
 8023152:	fb07 f80e 	mul.w	r8, r7, lr
 8023156:	ea4f 2c18 	mov.w	ip, r8, lsr #8
 802315a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802315e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023162:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8023166:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802316a:	44e0      	add	r8, ip
 802316c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023170:	0a36      	lsrs	r6, r6, #8
 8023172:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8023176:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802317a:	ea48 0606 	orr.w	r6, r8, r6
 802317e:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 8023182:	9701      	str	r7, [sp, #4]
 8023184:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023188:	f8bd e020 	ldrh.w	lr, [sp, #32]
 802318c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802318e:	fb05 f509 	mul.w	r5, r5, r9
 8023192:	fb07 f70e 	mul.w	r7, r7, lr
 8023196:	f107 0c01 	add.w	ip, r7, #1
 802319a:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 802319e:	ea6f 2c1c 	mvn.w	ip, ip, lsr #8
 80231a2:	fb02 f209 	mul.w	r2, r2, r9
 80231a6:	fb03 5501 	mla	r5, r3, r1, r5
 80231aa:	fb04 2201 	mla	r2, r4, r1, r2
 80231ae:	9b02      	ldr	r3, [sp, #8]
 80231b0:	fa5f fc8c 	uxtb.w	ip, ip
 80231b4:	fb03 5500 	mla	r5, r3, r0, r5
 80231b8:	9b03      	ldr	r3, [sp, #12]
 80231ba:	fb03 2200 	mla	r2, r3, r0, r2
 80231be:	9b01      	ldr	r3, [sp, #4]
 80231c0:	fb03 550a 	mla	r5, r3, sl, r5
 80231c4:	fb06 2a0a 	mla	sl, r6, sl, r2
 80231c8:	9a05      	ldr	r2, [sp, #20]
 80231ca:	9b04      	ldr	r3, [sp, #16]
 80231cc:	fb12 f10c 	smulbb	r1, r2, ip
 80231d0:	9a06      	ldr	r2, [sp, #24]
 80231d2:	0a2e      	lsrs	r6, r5, #8
 80231d4:	fb13 f30c 	smulbb	r3, r3, ip
 80231d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80231dc:	fb12 fc0c 	smulbb	ip, r2, ip
 80231e0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80231e4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80231e8:	ea46 060a 	orr.w	r6, r6, sl
 80231ec:	0c30      	lsrs	r0, r6, #16
 80231ee:	f3c6 2207 	ubfx	r2, r6, #8, #8
 80231f2:	b2f6      	uxtb	r6, r6
 80231f4:	fb00 330e 	mla	r3, r0, lr, r3
 80231f8:	fb02 120e 	mla	r2, r2, lr, r1
 80231fc:	fb06 c60e 	mla	r6, r6, lr, ip
 8023200:	b298      	uxth	r0, r3
 8023202:	b291      	uxth	r1, r2
 8023204:	b2b6      	uxth	r6, r6
 8023206:	1c43      	adds	r3, r0, #1
 8023208:	f106 0e01 	add.w	lr, r6, #1
 802320c:	1c4a      	adds	r2, r1, #1
 802320e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023212:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8023216:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802321a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802321e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023222:	0952      	lsrs	r2, r2, #5
 8023224:	4333      	orrs	r3, r6
 8023226:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802322a:	4313      	orrs	r3, r2
 802322c:	9a07      	ldr	r2, [sp, #28]
 802322e:	8013      	strh	r3, [r2, #0]
 8023230:	b00b      	add	sp, #44	; 0x2c
 8023232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023236:	2e00      	cmp	r6, #0
 8023238:	db01      	blt.n	802323e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x296>
 802323a:	42b7      	cmp	r7, r6
 802323c:	dc3c      	bgt.n	80232b8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x310>
 802323e:	2500      	movs	r5, #0
 8023240:	462c      	mov	r4, r5
 8023242:	1c72      	adds	r2, r6, #1
 8023244:	d427      	bmi.n	8023296 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2ee>
 8023246:	4297      	cmp	r7, r2
 8023248:	dd25      	ble.n	8023296 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2ee>
 802324a:	b131      	cbz	r1, 802325a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2b2>
 802324c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023250:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8023254:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8023258:	e6d9      	b.n	802300e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 802325a:	f1b8 0f00 	cmp.w	r8, #0
 802325e:	db3b      	blt.n	80232d8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x330>
 8023260:	45c1      	cmp	r9, r8
 8023262:	dd39      	ble.n	80232d8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x330>
 8023264:	468c      	mov	ip, r1
 8023266:	460a      	mov	r2, r1
 8023268:	b1c8      	cbz	r0, 802329e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2f6>
 802326a:	2e00      	cmp	r6, #0
 802326c:	db2d      	blt.n	80232ca <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x322>
 802326e:	42b7      	cmp	r7, r6
 8023270:	dd2b      	ble.n	80232ca <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x322>
 8023272:	f81e 8007 	ldrb.w	r8, [lr, r7]
 8023276:	f85a 9028 	ldr.w	r9, [sl, r8, lsl #2]
 802327a:	ea4f 6819 	mov.w	r8, r9, lsr #24
 802327e:	3601      	adds	r6, #1
 8023280:	d41f      	bmi.n	80232c2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x31a>
 8023282:	42b7      	cmp	r7, r6
 8023284:	dd1d      	ble.n	80232c2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x31a>
 8023286:	b321      	cbz	r1, 80232d2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x32a>
 8023288:	4477      	add	r7, lr
 802328a:	787e      	ldrb	r6, [r7, #1]
 802328c:	f85a 6026 	ldr.w	r6, [sl, r6, lsl #2]
 8023290:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8023294:	e6c6      	b.n	8023024 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x7c>
 8023296:	f04f 0c00 	mov.w	ip, #0
 802329a:	4662      	mov	r2, ip
 802329c:	e6b7      	b.n	802300e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 802329e:	290f      	cmp	r1, #15
 80232a0:	d821      	bhi.n	80232e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 80232a2:	b289      	uxth	r1, r1
 80232a4:	4682      	mov	sl, r0
 80232a6:	4607      	mov	r7, r0
 80232a8:	4683      	mov	fp, r0
 80232aa:	e9cd 0002 	strd	r0, r0, [sp, #8]
 80232ae:	4606      	mov	r6, r0
 80232b0:	9001      	str	r0, [sp, #4]
 80232b2:	4686      	mov	lr, r0
 80232b4:	4680      	mov	r8, r0
 80232b6:	e6d1      	b.n	802305c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb4>
 80232b8:	5d52      	ldrb	r2, [r2, r5]
 80232ba:	f85a 4022 	ldr.w	r4, [sl, r2, lsl #2]
 80232be:	0e25      	lsrs	r5, r4, #24
 80232c0:	e7bf      	b.n	8023242 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x29a>
 80232c2:	f04f 0e00 	mov.w	lr, #0
 80232c6:	4676      	mov	r6, lr
 80232c8:	e6ac      	b.n	8023024 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x7c>
 80232ca:	f04f 0800 	mov.w	r8, #0
 80232ce:	46c1      	mov	r9, r8
 80232d0:	e7d5      	b.n	802327e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2d6>
 80232d2:	460e      	mov	r6, r1
 80232d4:	468e      	mov	lr, r1
 80232d6:	e6a8      	b.n	802302a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 80232d8:	460a      	mov	r2, r1
 80232da:	460e      	mov	r6, r1
 80232dc:	4689      	mov	r9, r1
 80232de:	468e      	mov	lr, r1
 80232e0:	4688      	mov	r8, r1
 80232e2:	468c      	mov	ip, r1
 80232e4:	e6a1      	b.n	802302a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 80232e6:	4b03      	ldr	r3, [pc, #12]	; (80232f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x34c>)
 80232e8:	4a03      	ldr	r2, [pc, #12]	; (80232f8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x350>)
 80232ea:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80232ee:	4803      	ldr	r0, [pc, #12]	; (80232fc <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x354>)
 80232f0:	f004 fedc 	bl	80280ac <__assert_func>
 80232f4:	0802b324 	.word	0x0802b324
 80232f8:	0802b99c 	.word	0x0802b99c
 80232fc:	0802b4a8 	.word	0x0802b4a8

08023300 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023304:	ed2d 8b08 	vpush	{d8-d11}
 8023308:	b0a9      	sub	sp, #164	; 0xa4
 802330a:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 802330c:	9022      	str	r0, [sp, #136]	; 0x88
 802330e:	9115      	str	r1, [sp, #84]	; 0x54
 8023310:	6860      	ldr	r0, [r4, #4]
 8023312:	9940      	ldr	r1, [sp, #256]	; 0x100
 8023314:	9219      	str	r2, [sp, #100]	; 0x64
 8023316:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8023318:	e9dd ba3b 	ldrd	fp, sl, [sp, #236]	; 0xec
 802331c:	fb00 1202 	mla	r2, r0, r2, r1
 8023320:	6820      	ldr	r0, [r4, #0]
 8023322:	46d1      	mov	r9, sl
 8023324:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8023328:	46da      	mov	sl, fp
 802332a:	eeb0 aa40 	vmov.f32	s20, s0
 802332e:	eef0 9a60 	vmov.f32	s19, s1
 8023332:	eeb0 9a41 	vmov.f32	s18, s2
 8023336:	eef0 8a62 	vmov.f32	s17, s5
 802333a:	eeb0 8a43 	vmov.f32	s16, s6
 802333e:	eef0 ba44 	vmov.f32	s23, s8
 8023342:	eeb0 ba64 	vmov.f32	s22, s9
 8023346:	eef0 aa45 	vmov.f32	s21, s10
 802334a:	4693      	mov	fp, r2
 802334c:	9942      	ldr	r1, [sp, #264]	; 0x108
 802334e:	9d42      	ldr	r5, [sp, #264]	; 0x108
 8023350:	6849      	ldr	r1, [r1, #4]
 8023352:	f89d 410c 	ldrb.w	r4, [sp, #268]	; 0x10c
 8023356:	3104      	adds	r1, #4
 8023358:	682d      	ldr	r5, [r5, #0]
 802335a:	910e      	str	r1, [sp, #56]	; 0x38
 802335c:	b2a1      	uxth	r1, r4
 802335e:	9423      	str	r4, [sp, #140]	; 0x8c
 8023360:	9511      	str	r5, [sp, #68]	; 0x44
 8023362:	9112      	str	r1, [sp, #72]	; 0x48
 8023364:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023366:	2a00      	cmp	r2, #0
 8023368:	dc02      	bgt.n	8023370 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802336a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802336c:	2a00      	cmp	r2, #0
 802336e:	dd65      	ble.n	802343c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8023370:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8023372:	2b00      	cmp	r3, #0
 8023374:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8023378:	b234      	sxth	r4, r6
 802337a:	fa0f f78c 	sxth.w	r7, ip
 802337e:	f340 8396 	ble.w	8023aae <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ae>
 8023382:	1e65      	subs	r5, r4, #1
 8023384:	f107 3eff 	add.w	lr, r7, #4294967295
 8023388:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 802338c:	e9dd c83d 	ldrd	ip, r8, [sp, #244]	; 0xf4
 8023390:	ea5f 422a 	movs.w	r2, sl, asr #16
 8023394:	ea4f 4129 	mov.w	r1, r9, asr #16
 8023398:	d405      	bmi.n	80233a6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802339a:	42aa      	cmp	r2, r5
 802339c:	da03      	bge.n	80233a6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802339e:	2900      	cmp	r1, #0
 80233a0:	db01      	blt.n	80233a6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80233a2:	4571      	cmp	r1, lr
 80233a4:	db4f      	blt.n	8023446 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80233a6:	1c50      	adds	r0, r2, #1
 80233a8:	d406      	bmi.n	80233b8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80233aa:	42a0      	cmp	r0, r4
 80233ac:	dc04      	bgt.n	80233b8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80233ae:	1c48      	adds	r0, r1, #1
 80233b0:	d402      	bmi.n	80233b8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80233b2:	42b8      	cmp	r0, r7
 80233b4:	f340 834f 	ble.w	8023a56 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 80233b8:	3b01      	subs	r3, #1
 80233ba:	44e2      	add	sl, ip
 80233bc:	44c1      	add	r9, r8
 80233be:	f10b 0b02 	add.w	fp, fp, #2
 80233c2:	d1e5      	bne.n	8023390 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80233c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80233c6:	2b00      	cmp	r3, #0
 80233c8:	dd38      	ble.n	802343c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80233ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80233ce:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80233d2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80233d6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80233da:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80233de:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80233e2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80233e6:	ee76 6a68 	vsub.f32	s13, s12, s17
 80233ea:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80233ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80233f2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80233f6:	ee16 2a90 	vmov	r2, s13
 80233fa:	3b01      	subs	r3, #1
 80233fc:	9315      	str	r3, [sp, #84]	; 0x54
 80233fe:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8023400:	fb92 f3f3 	sdiv	r3, r2, r3
 8023404:	ee17 2a10 	vmov	r2, s14
 8023408:	eeb0 7a48 	vmov.f32	s14, s16
 802340c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023410:	ee17 9a10 	vmov	r9, s14
 8023414:	eeb0 7a68 	vmov.f32	s14, s17
 8023418:	933d      	str	r3, [sp, #244]	; 0xf4
 802341a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802341c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023420:	fb92 f3f3 	sdiv	r3, r2, r3
 8023424:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8023426:	933e      	str	r3, [sp, #248]	; 0xf8
 8023428:	ee17 aa10 	vmov	sl, s14
 802342c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802342e:	eeb0 8a67 	vmov.f32	s16, s15
 8023432:	eef0 8a46 	vmov.f32	s17, s12
 8023436:	bf08      	it	eq
 8023438:	4613      	moveq	r3, r2
 802343a:	e793      	b.n	8023364 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802343c:	b029      	add	sp, #164	; 0xa4
 802343e:	ecbd 8b08 	vpop	{d8-d11}
 8023442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023446:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 802344a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 802344e:	983d      	ldr	r0, [sp, #244]	; 0xf4
 8023450:	1e59      	subs	r1, r3, #1
 8023452:	fb00 a201 	mla	r2, r0, r1, sl
 8023456:	1412      	asrs	r2, r2, #16
 8023458:	910d      	str	r1, [sp, #52]	; 0x34
 802345a:	f100 8161 	bmi.w	8023720 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802345e:	42aa      	cmp	r2, r5
 8023460:	f280 815e 	bge.w	8023720 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8023464:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8023466:	fb02 9201 	mla	r2, r2, r1, r9
 802346a:	1412      	asrs	r2, r2, #16
 802346c:	f100 8158 	bmi.w	8023720 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8023470:	3f01      	subs	r7, #1
 8023472:	42ba      	cmp	r2, r7
 8023474:	f280 8154 	bge.w	8023720 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8023478:	2b00      	cmp	r3, #0
 802347a:	dda3      	ble.n	80233c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 802347c:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8023480:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8023484:	46d0      	mov	r8, sl
 8023486:	4621      	mov	r1, r4
 8023488:	e129      	b.n	80236de <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 802348a:	f893 c001 	ldrb.w	ip, [r3, #1]
 802348e:	f856 502c 	ldr.w	r5, [r6, ip, lsl #2]
 8023492:	9513      	str	r5, [sp, #76]	; 0x4c
 8023494:	0e2d      	lsrs	r5, r5, #24
 8023496:	950a      	str	r5, [sp, #40]	; 0x28
 8023498:	b162      	cbz	r2, 80234b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802349a:	185d      	adds	r5, r3, r1
 802349c:	786d      	ldrb	r5, [r5, #1]
 802349e:	5c5b      	ldrb	r3, [r3, r1]
 80234a0:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 80234a4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80234a8:	9116      	str	r1, [sp, #88]	; 0x58
 80234aa:	9314      	str	r3, [sp, #80]	; 0x50
 80234ac:	0e09      	lsrs	r1, r1, #24
 80234ae:	0e1b      	lsrs	r3, r3, #24
 80234b0:	910c      	str	r1, [sp, #48]	; 0x30
 80234b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80234b4:	b2a4      	uxth	r4, r4
 80234b6:	b292      	uxth	r2, r2
 80234b8:	fb04 f502 	mul.w	r5, r4, r2
 80234bc:	0124      	lsls	r4, r4, #4
 80234be:	1b66      	subs	r6, r4, r5
 80234c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80234c2:	b2b6      	uxth	r6, r6
 80234c4:	fb06 f103 	mul.w	r1, r6, r3
 80234c8:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80234cc:	b292      	uxth	r2, r2
 80234ce:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 80234d2:	1a9b      	subs	r3, r3, r2
 80234d4:	b29b      	uxth	r3, r3
 80234d6:	fb03 1100 	mla	r1, r3, r0, r1
 80234da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80234dc:	fb02 1104 	mla	r1, r2, r4, r1
 80234e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80234e2:	fb05 1104 	mla	r1, r5, r4, r1
 80234e6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80234ea:	2900      	cmp	r1, #0
 80234ec:	f000 80ea 	beq.w	80236c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c4>
 80234f0:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 80234f4:	28ff      	cmp	r0, #255	; 0xff
 80234f6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80234fa:	940f      	str	r4, [sp, #60]	; 0x3c
 80234fc:	970d      	str	r7, [sp, #52]	; 0x34
 80234fe:	d01c      	beq.n	802353a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023500:	fb04 f400 	mul.w	r4, r4, r0
 8023504:	4627      	mov	r7, r4
 8023506:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023508:	fb04 fe00 	mul.w	lr, r4, r0
 802350c:	0a3c      	lsrs	r4, r7, #8
 802350e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023512:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023516:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 802351a:	4427      	add	r7, r4
 802351c:	eb00 201e 	add.w	r0, r0, lr, lsr #8
 8023520:	0a3f      	lsrs	r7, r7, #8
 8023522:	0a00      	lsrs	r0, r0, #8
 8023524:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023528:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802352c:	4307      	orrs	r7, r0
 802352e:	f007 10ff 	and.w	r0, r7, #16711935	; 0xff00ff
 8023532:	900f      	str	r0, [sp, #60]	; 0x3c
 8023534:	f407 407f 	and.w	r0, r7, #65280	; 0xff00
 8023538:	900d      	str	r0, [sp, #52]	; 0x34
 802353a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802353c:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 8023540:	f400 4e7f 	and.w	lr, r0, #65280	; 0xff00
 8023544:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023546:	28ff      	cmp	r0, #255	; 0xff
 8023548:	d01c      	beq.n	8023584 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 802354a:	fb0c fc00 	mul.w	ip, ip, r0
 802354e:	fb0e fe00 	mul.w	lr, lr, r0
 8023552:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8023556:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802355a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802355e:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 8023562:	44a4      	add	ip, r4
 8023564:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8023568:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802356c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023570:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023574:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023578:	ea4c 0e0e 	orr.w	lr, ip, lr
 802357c:	f00e 1cff 	and.w	ip, lr, #16711935	; 0xff00ff
 8023580:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023584:	9814      	ldr	r0, [sp, #80]	; 0x50
 8023586:	f000 17ff 	and.w	r7, r0, #16711935	; 0xff00ff
 802358a:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 802358e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023590:	28ff      	cmp	r0, #255	; 0xff
 8023592:	d01a      	beq.n	80235ca <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8023594:	fb07 f700 	mul.w	r7, r7, r0
 8023598:	fb0a fa00 	mul.w	sl, sl, r0
 802359c:	0a3c      	lsrs	r4, r7, #8
 802359e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80235a2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80235a6:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80235aa:	4427      	add	r7, r4
 80235ac:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80235b0:	0a3f      	lsrs	r7, r7, #8
 80235b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80235b6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80235ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80235be:	ea47 0a0a 	orr.w	sl, r7, sl
 80235c2:	f00a 17ff 	and.w	r7, sl, #16711935	; 0xff00ff
 80235c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80235ca:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80235cc:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80235d0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80235d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80235d6:	2cff      	cmp	r4, #255	; 0xff
 80235d8:	d01d      	beq.n	8023616 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 80235da:	fb00 f004 	mul.w	r0, r0, r4
 80235de:	fb0b fb04 	mul.w	fp, fp, r4
 80235e2:	0a04      	lsrs	r4, r0, #8
 80235e4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80235e8:	9418      	str	r4, [sp, #96]	; 0x60
 80235ea:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 80235ee:	9417      	str	r4, [sp, #92]	; 0x5c
 80235f0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80235f2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80235f6:	4420      	add	r0, r4
 80235f8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80235fa:	0a00      	lsrs	r0, r0, #8
 80235fc:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 8023600:	0a24      	lsrs	r4, r4, #8
 8023602:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023606:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802360a:	ea40 0b0b 	orr.w	fp, r0, fp
 802360e:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 8023612:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023616:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023618:	fb0c fc06 	mul.w	ip, ip, r6
 802361c:	fb01 f104 	mul.w	r1, r1, r4
 8023620:	1c4c      	adds	r4, r1, #1
 8023622:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8023626:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802362a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802362c:	fb0e f606 	mul.w	r6, lr, r6
 8023630:	fb04 cc03 	mla	ip, r4, r3, ip
 8023634:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023636:	fb07 cc02 	mla	ip, r7, r2, ip
 802363a:	fb04 6603 	mla	r6, r4, r3, r6
 802363e:	fb0a 6602 	mla	r6, sl, r2, r6
 8023642:	fb00 cc05 	mla	ip, r0, r5, ip
 8023646:	fb0b 6605 	mla	r6, fp, r5, r6
 802364a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802364e:	0a36      	lsrs	r6, r6, #8
 8023650:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023654:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 8023658:	ea4c 0303 	orr.w	r3, ip, r3
 802365c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802365e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023660:	0c1f      	lsrs	r7, r3, #16
 8023662:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8023666:	b2db      	uxtb	r3, r3
 8023668:	8805      	ldrh	r5, [r0, #0]
 802366a:	fb13 f302 	smulbb	r3, r3, r2
 802366e:	fb17 f702 	smulbb	r7, r7, r2
 8023672:	fb16 f602 	smulbb	r6, r6, r2
 8023676:	1228      	asrs	r0, r5, #8
 8023678:	10ea      	asrs	r2, r5, #3
 802367a:	00ed      	lsls	r5, r5, #3
 802367c:	b2c9      	uxtb	r1, r1
 802367e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023682:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023686:	b2ed      	uxtb	r5, r5
 8023688:	fb00 7001 	mla	r0, r0, r1, r7
 802368c:	fb02 6201 	mla	r2, r2, r1, r6
 8023690:	fb05 3101 	mla	r1, r5, r1, r3
 8023694:	b280      	uxth	r0, r0
 8023696:	b292      	uxth	r2, r2
 8023698:	b289      	uxth	r1, r1
 802369a:	1c43      	adds	r3, r0, #1
 802369c:	1c4c      	adds	r4, r1, #1
 802369e:	f102 0c01 	add.w	ip, r2, #1
 80236a2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80236a6:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 80236aa:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80236ae:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80236b2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80236b6:	0952      	lsrs	r2, r2, #5
 80236b8:	4308      	orrs	r0, r1
 80236ba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80236be:	4302      	orrs	r2, r0
 80236c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80236c2:	8002      	strh	r2, [r0, #0]
 80236c4:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 80236c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236c8:	4490      	add	r8, r2
 80236ca:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80236cc:	3302      	adds	r3, #2
 80236ce:	4491      	add	r9, r2
 80236d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80236d2:	9309      	str	r3, [sp, #36]	; 0x24
 80236d4:	4293      	cmp	r3, r2
 80236d6:	d021      	beq.n	802371c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80236d8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80236da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80236de:	ea4f 4228 	mov.w	r2, r8, asr #16
 80236e2:	ea4f 4329 	mov.w	r3, r9, asr #16
 80236e6:	fb01 2303 	mla	r3, r1, r3, r2
 80236ea:	9811      	ldr	r0, [sp, #68]	; 0x44
 80236ec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80236ee:	5cc2      	ldrb	r2, [r0, r3]
 80236f0:	f3c8 3403 	ubfx	r4, r8, #12, #4
 80236f4:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80236f8:	4403      	add	r3, r0
 80236fa:	f3c9 3203 	ubfx	r2, r9, #12, #4
 80236fe:	0e38      	lsrs	r0, r7, #24
 8023700:	2c00      	cmp	r4, #0
 8023702:	f47f aec2 	bne.w	802348a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8023706:	2a00      	cmp	r2, #0
 8023708:	f43f aed4 	beq.w	80234b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802370c:	5c5b      	ldrb	r3, [r3, r1]
 802370e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023710:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8023714:	9314      	str	r3, [sp, #80]	; 0x50
 8023716:	0e1b      	lsrs	r3, r3, #24
 8023718:	930b      	str	r3, [sp, #44]	; 0x2c
 802371a:	e6cb      	b.n	80234b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802371c:	4693      	mov	fp, r2
 802371e:	e651      	b.n	80233c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8023720:	2b00      	cmp	r3, #0
 8023722:	f77f ae4f 	ble.w	80233c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8023726:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 802372a:	ea4f 422a 	mov.w	r2, sl, asr #16
 802372e:	ea4f 4129 	mov.w	r1, r9, asr #16
 8023732:	2a00      	cmp	r2, #0
 8023734:	465f      	mov	r7, fp
 8023736:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 802373a:	9c42      	ldr	r4, [sp, #264]	; 0x108
 802373c:	e9dd 5b3d 	ldrd	r5, fp, [sp, #244]	; 0xf4
 8023740:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8023744:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 8023748:	f2c0 815c 	blt.w	8023a04 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 802374c:	1e73      	subs	r3, r6, #1
 802374e:	429a      	cmp	r2, r3
 8023750:	f280 8158 	bge.w	8023a04 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8023754:	2900      	cmp	r1, #0
 8023756:	f2c0 8155 	blt.w	8023a04 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 802375a:	f10c 33ff 	add.w	r3, ip, #4294967295
 802375e:	4299      	cmp	r1, r3
 8023760:	f280 8150 	bge.w	8023a04 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8023764:	b233      	sxth	r3, r6
 8023766:	fb01 2203 	mla	r2, r1, r3, r2
 802376a:	9911      	ldr	r1, [sp, #68]	; 0x44
 802376c:	930f      	str	r3, [sp, #60]	; 0x3c
 802376e:	5c8b      	ldrb	r3, [r1, r2]
 8023770:	440a      	add	r2, r1
 8023772:	4616      	mov	r6, r2
 8023774:	9210      	str	r2, [sp, #64]	; 0x40
 8023776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023778:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802377c:	0e0b      	lsrs	r3, r1, #24
 802377e:	2800      	cmp	r0, #0
 8023780:	f000 816f 	beq.w	8023a62 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x762>
 8023784:	f896 c001 	ldrb.w	ip, [r6, #1]
 8023788:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802378c:	9224      	str	r2, [sp, #144]	; 0x90
 802378e:	0e12      	lsrs	r2, r2, #24
 8023790:	921a      	str	r2, [sp, #104]	; 0x68
 8023792:	f1be 0f00 	cmp.w	lr, #0
 8023796:	f040 8172 	bne.w	8023a7e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 802379a:	b280      	uxth	r0, r0
 802379c:	fa1f fc8e 	uxth.w	ip, lr
 80237a0:	fb00 f20c 	mul.w	r2, r0, ip
 80237a4:	0106      	lsls	r6, r0, #4
 80237a6:	1ab0      	subs	r0, r6, r2
 80237a8:	b280      	uxth	r0, r0
 80237aa:	4686      	mov	lr, r0
 80237ac:	900f      	str	r0, [sp, #60]	; 0x3c
 80237ae:	981a      	ldr	r0, [sp, #104]	; 0x68
 80237b0:	ebc2 1c0c 	rsb	ip, r2, ip, lsl #4
 80237b4:	fb0e f000 	mul.w	r0, lr, r0
 80237b8:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 80237bc:	fa1f fe8c 	uxth.w	lr, ip
 80237c0:	eba6 060e 	sub.w	r6, r6, lr
 80237c4:	b2b6      	uxth	r6, r6
 80237c6:	fb06 0003 	mla	r0, r6, r3, r0
 80237ca:	9610      	str	r6, [sp, #64]	; 0x40
 80237cc:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80237ce:	fb0e 0006 	mla	r0, lr, r6, r0
 80237d2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80237d4:	fb02 0006 	mla	r0, r2, r6, r0
 80237d8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80237dc:	9017      	str	r0, [sp, #92]	; 0x5c
 80237de:	2800      	cmp	r0, #0
 80237e0:	f000 80fa 	beq.w	80239d8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 80237e4:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 80237e8:	2bff      	cmp	r3, #255	; 0xff
 80237ea:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80237ee:	9018      	str	r0, [sp, #96]	; 0x60
 80237f0:	911d      	str	r1, [sp, #116]	; 0x74
 80237f2:	d01b      	beq.n	802382c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52c>
 80237f4:	fb01 f103 	mul.w	r1, r1, r3
 80237f8:	fb00 f003 	mul.w	r0, r0, r3
 80237fc:	460b      	mov	r3, r1
 80237fe:	0a01      	lsrs	r1, r0, #8
 8023800:	f100 1601 	add.w	r6, r0, #65537	; 0x10001
 8023804:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023808:	f503 7080 	add.w	r0, r3, #256	; 0x100
 802380c:	4431      	add	r1, r6
 802380e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023812:	0a09      	lsrs	r1, r1, #8
 8023814:	0a1b      	lsrs	r3, r3, #8
 8023816:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802381a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802381e:	430b      	orrs	r3, r1
 8023820:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8023824:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023828:	9118      	str	r1, [sp, #96]	; 0x60
 802382a:	931d      	str	r3, [sp, #116]	; 0x74
 802382c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802382e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8023830:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8023834:	2eff      	cmp	r6, #255	; 0xff
 8023836:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802383a:	931e      	str	r3, [sp, #120]	; 0x78
 802383c:	911f      	str	r1, [sp, #124]	; 0x7c
 802383e:	d01b      	beq.n	8023878 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x578>
 8023840:	fb01 f106 	mul.w	r1, r1, r6
 8023844:	fb03 f306 	mul.w	r3, r3, r6
 8023848:	460e      	mov	r6, r1
 802384a:	0a19      	lsrs	r1, r3, #8
 802384c:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8023850:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023854:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8023858:	4401      	add	r1, r0
 802385a:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 802385e:	0a09      	lsrs	r1, r1, #8
 8023860:	0a1b      	lsrs	r3, r3, #8
 8023862:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023866:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802386a:	4319      	orrs	r1, r3
 802386c:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8023870:	931e      	str	r3, [sp, #120]	; 0x78
 8023872:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
 8023876:	931f      	str	r3, [sp, #124]	; 0x7c
 8023878:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802387a:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 802387e:	f403 4c7f 	and.w	ip, r3, #65280	; 0xff00
 8023882:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023884:	9120      	str	r1, [sp, #128]	; 0x80
 8023886:	2bff      	cmp	r3, #255	; 0xff
 8023888:	d01c      	beq.n	80238c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 802388a:	fb01 f103 	mul.w	r1, r1, r3
 802388e:	4608      	mov	r0, r1
 8023890:	fb0c fc03 	mul.w	ip, ip, r3
 8023894:	0a09      	lsrs	r1, r1, #8
 8023896:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 802389a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802389e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80238a2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80238a6:	4408      	add	r0, r1
 80238a8:	0a00      	lsrs	r0, r0, #8
 80238aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80238ae:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80238b2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80238b6:	ea40 0c0c 	orr.w	ip, r0, ip
 80238ba:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80238be:	9320      	str	r3, [sp, #128]	; 0x80
 80238c0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80238c4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80238c6:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 80238ca:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 80238ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80238d0:	9321      	str	r3, [sp, #132]	; 0x84
 80238d2:	29ff      	cmp	r1, #255	; 0xff
 80238d4:	d019      	beq.n	802390a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 80238d6:	fb03 f301 	mul.w	r3, r3, r1
 80238da:	fb06 f601 	mul.w	r6, r6, r1
 80238de:	0a19      	lsrs	r1, r3, #8
 80238e0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80238e4:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80238e8:	f506 7080 	add.w	r0, r6, #256	; 0x100
 80238ec:	4419      	add	r1, r3
 80238ee:	eb00 2616 	add.w	r6, r0, r6, lsr #8
 80238f2:	0a09      	lsrs	r1, r1, #8
 80238f4:	0a36      	lsrs	r6, r6, #8
 80238f6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80238fa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80238fe:	430e      	orrs	r6, r1
 8023900:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8023904:	9321      	str	r3, [sp, #132]	; 0x84
 8023906:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802390a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802390c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802390e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023910:	fb00 f001 	mul.w	r0, r0, r1
 8023914:	4601      	mov	r1, r0
 8023916:	3001      	adds	r0, #1
 8023918:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802391c:	ea6f 2011 	mvn.w	r0, r1, lsr #8
 8023920:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023922:	9025      	str	r0, [sp, #148]	; 0x94
 8023924:	981e      	ldr	r0, [sp, #120]	; 0x78
 8023926:	fb00 f001 	mul.w	r0, r0, r1
 802392a:	900f      	str	r0, [sp, #60]	; 0x3c
 802392c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802392e:	fb00 f001 	mul.w	r0, r0, r1
 8023932:	9017      	str	r0, [sp, #92]	; 0x5c
 8023934:	9818      	ldr	r0, [sp, #96]	; 0x60
 8023936:	4601      	mov	r1, r0
 8023938:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802393a:	fb01 0003 	mla	r0, r1, r3, r0
 802393e:	900f      	str	r0, [sp, #60]	; 0x3c
 8023940:	981d      	ldr	r0, [sp, #116]	; 0x74
 8023942:	4601      	mov	r1, r0
 8023944:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8023946:	fb01 0103 	mla	r1, r1, r3, r0
 802394a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802394c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802394e:	fb0c 110e 	mla	r1, ip, lr, r1
 8023952:	fb03 000e 	mla	r0, r3, lr, r0
 8023956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023958:	f89d e094 	ldrb.w	lr, [sp, #148]	; 0x94
 802395c:	fb03 0002 	mla	r0, r3, r2, r0
 8023960:	fb06 1302 	mla	r3, r6, r2, r1
 8023964:	0a02      	lsrs	r2, r0, #8
 8023966:	0a1b      	lsrs	r3, r3, #8
 8023968:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802396c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023970:	4313      	orrs	r3, r2
 8023972:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023974:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8023978:	f3c3 2607 	ubfx	r6, r3, #8, #8
 802397c:	b2db      	uxtb	r3, r3
 802397e:	8838      	ldrh	r0, [r7, #0]
 8023980:	fb16 f602 	smulbb	r6, r6, r2
 8023984:	fb1c fc02 	smulbb	ip, ip, r2
 8023988:	fb13 f302 	smulbb	r3, r3, r2
 802398c:	1201      	asrs	r1, r0, #8
 802398e:	10c2      	asrs	r2, r0, #3
 8023990:	00c0      	lsls	r0, r0, #3
 8023992:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023996:	b2c0      	uxtb	r0, r0
 8023998:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802399c:	fb01 cc0e 	mla	ip, r1, lr, ip
 80239a0:	fb02 620e 	mla	r2, r2, lr, r6
 80239a4:	fb00 330e 	mla	r3, r0, lr, r3
 80239a8:	b296      	uxth	r6, r2
 80239aa:	b29b      	uxth	r3, r3
 80239ac:	fa1f fc8c 	uxth.w	ip, ip
 80239b0:	1c58      	adds	r0, r3, #1
 80239b2:	f10c 0201 	add.w	r2, ip, #1
 80239b6:	1c71      	adds	r1, r6, #1
 80239b8:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 80239bc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80239c0:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 80239c4:	f402 4378 	and.w	r3, r2, #63488	; 0xf800
 80239c8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80239cc:	094a      	lsrs	r2, r1, #5
 80239ce:	4303      	orrs	r3, r0
 80239d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80239d4:	4313      	orrs	r3, r2
 80239d6:	803b      	strh	r3, [r7, #0]
 80239d8:	f1b8 0f00 	cmp.w	r8, #0
 80239dc:	f107 0702 	add.w	r7, r7, #2
 80239e0:	44aa      	add	sl, r5
 80239e2:	44d9      	add	r9, fp
 80239e4:	dd2e      	ble.n	8023a44 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 80239e6:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 80239ea:	ea4f 422a 	mov.w	r2, sl, asr #16
 80239ee:	2a00      	cmp	r2, #0
 80239f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80239f4:	ea4f 4129 	mov.w	r1, r9, asr #16
 80239f8:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80239fc:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 8023a00:	f6bf aea4 	bge.w	802374c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8023a04:	1c53      	adds	r3, r2, #1
 8023a06:	d4e7      	bmi.n	80239d8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8023a08:	42b3      	cmp	r3, r6
 8023a0a:	dce5      	bgt.n	80239d8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8023a0c:	1c4b      	adds	r3, r1, #1
 8023a0e:	d4e3      	bmi.n	80239d8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8023a10:	4563      	cmp	r3, ip
 8023a12:	dce1      	bgt.n	80239d8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8023a14:	fa0f f38c 	sxth.w	r3, ip
 8023a18:	b236      	sxth	r6, r6
 8023a1a:	e9cd 6300 	strd	r6, r3, [sp]
 8023a1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023a20:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8023a24:	e9cd e305 	strd	lr, r3, [sp, #20]
 8023a28:	9202      	str	r2, [sp, #8]
 8023a2a:	4639      	mov	r1, r7
 8023a2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023a2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023a30:	9822      	ldr	r0, [sp, #136]	; 0x88
 8023a32:	f7ff fab9 	bl	8022fa8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8023a36:	f1b8 0f00 	cmp.w	r8, #0
 8023a3a:	f107 0702 	add.w	r7, r7, #2
 8023a3e:	44aa      	add	sl, r5
 8023a40:	44d9      	add	r9, fp
 8023a42:	dcd0      	bgt.n	80239e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e6>
 8023a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023a46:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8023a4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023a4e:	3301      	adds	r3, #1
 8023a50:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8023a54:	e4b6      	b.n	80233c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8023a56:	3b01      	subs	r3, #1
 8023a58:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8023a5c:	930d      	str	r3, [sp, #52]	; 0x34
 8023a5e:	4698      	mov	r8, r3
 8023a60:	e667      	b.n	8023732 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8023a62:	f1be 0f00 	cmp.w	lr, #0
 8023a66:	f43f ae98 	beq.w	802379a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8023a6a:	4632      	mov	r2, r6
 8023a6c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023a6e:	5d92      	ldrb	r2, [r2, r6]
 8023a70:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8023a72:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8023a76:	9226      	str	r2, [sp, #152]	; 0x98
 8023a78:	0e12      	lsrs	r2, r2, #24
 8023a7a:	921b      	str	r2, [sp, #108]	; 0x6c
 8023a7c:	e68d      	b.n	802379a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8023a7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023a80:	eb06 0c02 	add.w	ip, r6, r2
 8023a84:	4632      	mov	r2, r6
 8023a86:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023a88:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023a8c:	5d92      	ldrb	r2, [r2, r6]
 8023a8e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8023a90:	9210      	str	r2, [sp, #64]	; 0x40
 8023a92:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 8023a96:	920f      	str	r2, [sp, #60]	; 0x3c
 8023a98:	9227      	str	r2, [sp, #156]	; 0x9c
 8023a9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023a9c:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8023aa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023aa2:	9626      	str	r6, [sp, #152]	; 0x98
 8023aa4:	0e12      	lsrs	r2, r2, #24
 8023aa6:	921c      	str	r2, [sp, #112]	; 0x70
 8023aa8:	0e32      	lsrs	r2, r6, #24
 8023aaa:	921b      	str	r2, [sp, #108]	; 0x6c
 8023aac:	e675      	b.n	802379a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8023aae:	f43f ac89 	beq.w	80233c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8023ab2:	1e65      	subs	r5, r4, #1
 8023ab4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8023ab8:	e4c9      	b.n	802344e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8023aba:	bf00      	nop

08023abc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8023abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ac0:	b089      	sub	sp, #36	; 0x24
 8023ac2:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
 8023ac6:	880f      	ldrh	r7, [r1, #0]
 8023ac8:	e9dd 5014 	ldrd	r5, r0, [sp, #80]	; 0x50
 8023acc:	fb00 5408 	mla	r4, r0, r8, r5
 8023ad0:	9106      	str	r1, [sp, #24]
 8023ad2:	10f9      	asrs	r1, r7, #3
 8023ad4:	123e      	asrs	r6, r7, #8
 8023ad6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023ada:	00ff      	lsls	r7, r7, #3
 8023adc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8023ae0:	9104      	str	r1, [sp, #16]
 8023ae2:	2800      	cmp	r0, #0
 8023ae4:	b2f9      	uxtb	r1, r7
 8023ae6:	9105      	str	r1, [sp, #20]
 8023ae8:	9603      	str	r6, [sp, #12]
 8023aea:	eb02 0704 	add.w	r7, r2, r4
 8023aee:	f100 0c01 	add.w	ip, r0, #1
 8023af2:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8023af6:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8023afa:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8023afe:	db02      	blt.n	8023b06 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x4a>
 8023b00:	4582      	cmp	sl, r0
 8023b02:	f300 8113 	bgt.w	8023d2c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8023b06:	2600      	movs	r6, #0
 8023b08:	46b1      	mov	r9, r6
 8023b0a:	4630      	mov	r0, r6
 8023b0c:	4634      	mov	r4, r6
 8023b0e:	f1bc 0f00 	cmp.w	ip, #0
 8023b12:	db02      	blt.n	8023b1a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5e>
 8023b14:	45e2      	cmp	sl, ip
 8023b16:	f300 8123 	bgt.w	8023d60 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a4>
 8023b1a:	2700      	movs	r7, #0
 8023b1c:	46bc      	mov	ip, r7
 8023b1e:	463d      	mov	r5, r7
 8023b20:	9702      	str	r7, [sp, #8]
 8023b22:	f1be 0f0f 	cmp.w	lr, #15
 8023b26:	f200 8160 	bhi.w	8023dea <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8023b2a:	290f      	cmp	r1, #15
 8023b2c:	f200 815d 	bhi.w	8023dea <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8023b30:	b289      	uxth	r1, r1
 8023b32:	fa1f f38e 	uxth.w	r3, lr
 8023b36:	fb01 f803 	mul.w	r8, r1, r3
 8023b3a:	f005 12ff 	and.w	r2, r5, #16711935	; 0xff00ff
 8023b3e:	9200      	str	r2, [sp, #0]
 8023b40:	9a02      	ldr	r2, [sp, #8]
 8023b42:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8023b46:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023b4a:	b289      	uxth	r1, r1
 8023b4c:	9201      	str	r2, [sp, #4]
 8023b4e:	fb01 fa0c 	mul.w	sl, r1, ip
 8023b52:	9a02      	ldr	r2, [sp, #8]
 8023b54:	fb08 fb07 	mul.w	fp, r8, r7
 8023b58:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023b5c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023b60:	9202      	str	r2, [sp, #8]
 8023b62:	011b      	lsls	r3, r3, #4
 8023b64:	eba3 0e08 	sub.w	lr, r3, r8
 8023b68:	fa1f fe8e 	uxth.w	lr, lr
 8023b6c:	fb0e f206 	mul.w	r2, lr, r6
 8023b70:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8023b74:	1a5b      	subs	r3, r3, r1
 8023b76:	b29b      	uxth	r3, r3
 8023b78:	fb03 2209 	mla	r2, r3, r9, r2
 8023b7c:	4452      	add	r2, sl
 8023b7e:	445a      	add	r2, fp
 8023b80:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023b84:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023b88:	9207      	str	r2, [sp, #28]
 8023b8a:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 8023b8e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023b92:	d019      	beq.n	8023bc8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x10c>
 8023b94:	fb02 f209 	mul.w	r2, r2, r9
 8023b98:	fb04 f409 	mul.w	r4, r4, r9
 8023b9c:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8023ba0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023ba4:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8023ba8:	f504 7a80 	add.w	sl, r4, #256	; 0x100
 8023bac:	445a      	add	r2, fp
 8023bae:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8023bb2:	0a12      	lsrs	r2, r2, #8
 8023bb4:	0a24      	lsrs	r4, r4, #8
 8023bb6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023bba:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023bbe:	4314      	orrs	r4, r2
 8023bc0:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 8023bc4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023bc8:	2eff      	cmp	r6, #255	; 0xff
 8023bca:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 8023bce:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023bd2:	d01b      	beq.n	8023c0c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x150>
 8023bd4:	fb0a fa06 	mul.w	sl, sl, r6
 8023bd8:	fb00 f006 	mul.w	r0, r0, r6
 8023bdc:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8023be0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023be4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023be8:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8023bec:	44da      	add	sl, fp
 8023bee:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8023bf2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023bf6:	0a00      	lsrs	r0, r0, #8
 8023bf8:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8023bfc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023c00:	ea4a 0000 	orr.w	r0, sl, r0
 8023c04:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 8023c08:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023c0c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023c10:	d020      	beq.n	8023c54 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x198>
 8023c12:	9e01      	ldr	r6, [sp, #4]
 8023c14:	fb06 fb0c 	mul.w	fp, r6, ip
 8023c18:	9e02      	ldr	r6, [sp, #8]
 8023c1a:	ea4f 291b 	mov.w	r9, fp, lsr #8
 8023c1e:	fb06 fc0c 	mul.w	ip, r6, ip
 8023c22:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8023c26:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8023c2a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c2e:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8023c32:	44cb      	add	fp, r9
 8023c34:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023c38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c3c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023c40:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023c44:	ea4b 0c0c 	orr.w	ip, fp, ip
 8023c48:	f00c 16ff 	and.w	r6, ip, #16711935	; 0xff00ff
 8023c4c:	9601      	str	r6, [sp, #4]
 8023c4e:	f40c 467f 	and.w	r6, ip, #65280	; 0xff00
 8023c52:	9602      	str	r6, [sp, #8]
 8023c54:	2fff      	cmp	r7, #255	; 0xff
 8023c56:	d01d      	beq.n	8023c94 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d8>
 8023c58:	9e00      	ldr	r6, [sp, #0]
 8023c5a:	fb05 f507 	mul.w	r5, r5, r7
 8023c5e:	fb06 fb07 	mul.w	fp, r6, r7
 8023c62:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8023c66:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8023c6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c6e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c72:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8023c76:	44e3      	add	fp, ip
 8023c78:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023c7c:	0a2d      	lsrs	r5, r5, #8
 8023c7e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023c82:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023c86:	ea4b 0505 	orr.w	r5, fp, r5
 8023c8a:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8023c8e:	9600      	str	r6, [sp, #0]
 8023c90:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023c94:	9e07      	ldr	r6, [sp, #28]
 8023c96:	fb0a fa0e 	mul.w	sl, sl, lr
 8023c9a:	43f7      	mvns	r7, r6
 8023c9c:	fb00 f00e 	mul.w	r0, r0, lr
 8023ca0:	fb02 aa03 	mla	sl, r2, r3, sl
 8023ca4:	fb04 0003 	mla	r0, r4, r3, r0
 8023ca8:	9b01      	ldr	r3, [sp, #4]
 8023caa:	b2ff      	uxtb	r7, r7
 8023cac:	fb03 aa01 	mla	sl, r3, r1, sl
 8023cb0:	9b02      	ldr	r3, [sp, #8]
 8023cb2:	fb03 0c01 	mla	ip, r3, r1, r0
 8023cb6:	9b00      	ldr	r3, [sp, #0]
 8023cb8:	9803      	ldr	r0, [sp, #12]
 8023cba:	fb03 aa08 	mla	sl, r3, r8, sl
 8023cbe:	9b05      	ldr	r3, [sp, #20]
 8023cc0:	9904      	ldr	r1, [sp, #16]
 8023cc2:	fb03 f307 	mul.w	r3, r3, r7
 8023cc6:	fb00 f007 	mul.w	r0, r0, r7
 8023cca:	fb01 f107 	mul.w	r1, r1, r7
 8023cce:	461f      	mov	r7, r3
 8023cd0:	fb05 c808 	mla	r8, r5, r8, ip
 8023cd4:	ea4f 251a 	mov.w	r5, sl, lsr #8
 8023cd8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023cdc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023ce0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023ce4:	ea45 0508 	orr.w	r5, r5, r8
 8023ce8:	f100 0c01 	add.w	ip, r0, #1
 8023cec:	1c4e      	adds	r6, r1, #1
 8023cee:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8023cf2:	0c2c      	lsrs	r4, r5, #16
 8023cf4:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8023cf8:	1c78      	adds	r0, r7, #1
 8023cfa:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8023cfe:	4b3e      	ldr	r3, [pc, #248]	; (8023df8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x33c>)
 8023d00:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8023d04:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8023d08:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8023d0c:	b2ed      	uxtb	r5, r5
 8023d0e:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 8023d12:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8023d16:	00d2      	lsls	r2, r2, #3
 8023d18:	ea43 05d5 	orr.w	r5, r3, r5, lsr #3
 8023d1c:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8023d20:	431d      	orrs	r5, r3
 8023d22:	9b06      	ldr	r3, [sp, #24]
 8023d24:	801d      	strh	r5, [r3, #0]
 8023d26:	b009      	add	sp, #36	; 0x24
 8023d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d2c:	2d00      	cmp	r5, #0
 8023d2e:	db01      	blt.n	8023d34 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x278>
 8023d30:	45a8      	cmp	r8, r5
 8023d32:	dc41      	bgt.n	8023db8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2fc>
 8023d34:	f04f 0900 	mov.w	r9, #0
 8023d38:	464c      	mov	r4, r9
 8023d3a:	1c6a      	adds	r2, r5, #1
 8023d3c:	d42a      	bmi.n	8023d94 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2d8>
 8023d3e:	4590      	cmp	r8, r2
 8023d40:	dd28      	ble.n	8023d94 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2d8>
 8023d42:	f1be 0f00 	cmp.w	lr, #0
 8023d46:	d004      	beq.n	8023d52 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x296>
 8023d48:	787a      	ldrb	r2, [r7, #1]
 8023d4a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023d4e:	0e06      	lsrs	r6, r0, #24
 8023d50:	e6dd      	b.n	8023b0e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x52>
 8023d52:	f1bc 0f00 	cmp.w	ip, #0
 8023d56:	db40      	blt.n	8023dda <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x31e>
 8023d58:	45e2      	cmp	sl, ip
 8023d5a:	dd3e      	ble.n	8023dda <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x31e>
 8023d5c:	4676      	mov	r6, lr
 8023d5e:	4670      	mov	r0, lr
 8023d60:	b1d9      	cbz	r1, 8023d9a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2de>
 8023d62:	2d00      	cmp	r5, #0
 8023d64:	db31      	blt.n	8023dca <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x30e>
 8023d66:	45a8      	cmp	r8, r5
 8023d68:	dd2f      	ble.n	8023dca <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x30e>
 8023d6a:	f817 2008 	ldrb.w	r2, [r7, r8]
 8023d6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8023d72:	9202      	str	r2, [sp, #8]
 8023d74:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8023d78:	3501      	adds	r5, #1
 8023d7a:	d423      	bmi.n	8023dc4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x308>
 8023d7c:	45a8      	cmp	r8, r5
 8023d7e:	dd21      	ble.n	8023dc4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x308>
 8023d80:	f1be 0f00 	cmp.w	lr, #0
 8023d84:	d026      	beq.n	8023dd4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x318>
 8023d86:	44b8      	add	r8, r7
 8023d88:	f898 5001 	ldrb.w	r5, [r8, #1]
 8023d8c:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8023d90:	0e2f      	lsrs	r7, r5, #24
 8023d92:	e6c6      	b.n	8023b22 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 8023d94:	2600      	movs	r6, #0
 8023d96:	4630      	mov	r0, r6
 8023d98:	e6b9      	b.n	8023b0e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x52>
 8023d9a:	f1be 0f0f 	cmp.w	lr, #15
 8023d9e:	d824      	bhi.n	8023dea <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8023da0:	fa1f f38e 	uxth.w	r3, lr
 8023da4:	4688      	mov	r8, r1
 8023da6:	468b      	mov	fp, r1
 8023da8:	468a      	mov	sl, r1
 8023daa:	e9cd 1101 	strd	r1, r1, [sp, #4]
 8023dae:	460d      	mov	r5, r1
 8023db0:	9100      	str	r1, [sp, #0]
 8023db2:	460f      	mov	r7, r1
 8023db4:	468c      	mov	ip, r1
 8023db6:	e6d4      	b.n	8023b62 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 8023db8:	5d12      	ldrb	r2, [r2, r4]
 8023dba:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8023dbe:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023dc2:	e7ba      	b.n	8023d3a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27e>
 8023dc4:	2700      	movs	r7, #0
 8023dc6:	463d      	mov	r5, r7
 8023dc8:	e6ab      	b.n	8023b22 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 8023dca:	f04f 0c00 	mov.w	ip, #0
 8023dce:	f8cd c008 	str.w	ip, [sp, #8]
 8023dd2:	e7d1      	b.n	8023d78 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2bc>
 8023dd4:	4675      	mov	r5, lr
 8023dd6:	4677      	mov	r7, lr
 8023dd8:	e6a7      	b.n	8023b2a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6e>
 8023dda:	4670      	mov	r0, lr
 8023ddc:	4675      	mov	r5, lr
 8023dde:	f8cd e008 	str.w	lr, [sp, #8]
 8023de2:	4677      	mov	r7, lr
 8023de4:	46f4      	mov	ip, lr
 8023de6:	4676      	mov	r6, lr
 8023de8:	e69f      	b.n	8023b2a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6e>
 8023dea:	4b04      	ldr	r3, [pc, #16]	; (8023dfc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x340>)
 8023dec:	4a04      	ldr	r2, [pc, #16]	; (8023e00 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x344>)
 8023dee:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8023df2:	4804      	ldr	r0, [pc, #16]	; (8023e04 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x348>)
 8023df4:	f004 f95a 	bl	80280ac <__assert_func>
 8023df8:	fffff800 	.word	0xfffff800
 8023dfc:	0802b324 	.word	0x0802b324
 8023e00:	0802b99c 	.word	0x0802b99c
 8023e04:	0802b4a8 	.word	0x0802b4a8

08023e08 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e0c:	ed2d 8b08 	vpush	{d8-d11}
 8023e10:	b0a3      	sub	sp, #140	; 0x8c
 8023e12:	901e      	str	r0, [sp, #120]	; 0x78
 8023e14:	9111      	str	r1, [sp, #68]	; 0x44
 8023e16:	9215      	str	r2, [sp, #84]	; 0x54
 8023e18:	e9dd 4139 	ldrd	r4, r1, [sp, #228]	; 0xe4
 8023e1c:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8023e1e:	6860      	ldr	r0, [r4, #4]
 8023e20:	e9dd 8b35 	ldrd	r8, fp, [sp, #212]	; 0xd4
 8023e24:	fb00 1202 	mla	r2, r0, r2, r1
 8023e28:	6820      	ldr	r0, [r4, #0]
 8023e2a:	46c1      	mov	r9, r8
 8023e2c:	eb00 0a42 	add.w	sl, r0, r2, lsl #1
 8023e30:	46d8      	mov	r8, fp
 8023e32:	eeb0 aa40 	vmov.f32	s20, s0
 8023e36:	eef0 9a60 	vmov.f32	s19, s1
 8023e3a:	eeb0 9a41 	vmov.f32	s18, s2
 8023e3e:	eef0 8a62 	vmov.f32	s17, s5
 8023e42:	eeb0 8a43 	vmov.f32	s16, s6
 8023e46:	eef0 ba44 	vmov.f32	s23, s8
 8023e4a:	eeb0 ba64 	vmov.f32	s22, s9
 8023e4e:	eef0 aa45 	vmov.f32	s21, s10
 8023e52:	46d3      	mov	fp, sl
 8023e54:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8023e56:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
 8023e58:	6849      	ldr	r1, [r1, #4]
 8023e5a:	6824      	ldr	r4, [r4, #0]
 8023e5c:	1d0a      	adds	r2, r1, #4
 8023e5e:	940e      	str	r4, [sp, #56]	; 0x38
 8023e60:	920b      	str	r2, [sp, #44]	; 0x2c
 8023e62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023e64:	2a00      	cmp	r2, #0
 8023e66:	dc02      	bgt.n	8023e6e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8023e68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023e6a:	2a00      	cmp	r2, #0
 8023e6c:	dd65      	ble.n	8023f3a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8023e6e:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8023e70:	2b00      	cmp	r3, #0
 8023e72:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8023e76:	b234      	sxth	r4, r6
 8023e78:	fa0f f78c 	sxth.w	r7, ip
 8023e7c:	f340 836d 	ble.w	802455a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8023e80:	1e65      	subs	r5, r4, #1
 8023e82:	f107 3eff 	add.w	lr, r7, #4294967295
 8023e86:	f8cd c01c 	str.w	ip, [sp, #28]
 8023e8a:	e9dd ca37 	ldrd	ip, sl, [sp, #220]	; 0xdc
 8023e8e:	ea5f 4229 	movs.w	r2, r9, asr #16
 8023e92:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023e96:	d405      	bmi.n	8023ea4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023e98:	42aa      	cmp	r2, r5
 8023e9a:	da03      	bge.n	8023ea4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023e9c:	2900      	cmp	r1, #0
 8023e9e:	db01      	blt.n	8023ea4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023ea0:	4571      	cmp	r1, lr
 8023ea2:	db4f      	blt.n	8023f44 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8023ea4:	1c50      	adds	r0, r2, #1
 8023ea6:	d406      	bmi.n	8023eb6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023ea8:	42a0      	cmp	r0, r4
 8023eaa:	dc04      	bgt.n	8023eb6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023eac:	1c48      	adds	r0, r1, #1
 8023eae:	d402      	bmi.n	8023eb6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023eb0:	42b8      	cmp	r0, r7
 8023eb2:	f340 832f 	ble.w	8024514 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8023eb6:	3b01      	subs	r3, #1
 8023eb8:	44e1      	add	r9, ip
 8023eba:	44d0      	add	r8, sl
 8023ebc:	f10b 0b02 	add.w	fp, fp, #2
 8023ec0:	d1e5      	bne.n	8023e8e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023ec2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023ec4:	2b00      	cmp	r3, #0
 8023ec6:	dd38      	ble.n	8023f3a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8023ec8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023ecc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023ed0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023ed4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023ed8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023edc:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8023ee0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023ee4:	ee76 6a68 	vsub.f32	s13, s12, s17
 8023ee8:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8023eec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023ef0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023ef4:	ee16 2a90 	vmov	r2, s13
 8023ef8:	3b01      	subs	r3, #1
 8023efa:	9311      	str	r3, [sp, #68]	; 0x44
 8023efc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023efe:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f02:	ee17 2a10 	vmov	r2, s14
 8023f06:	eeb0 7a48 	vmov.f32	s14, s16
 8023f0a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023f0e:	ee17 8a10 	vmov	r8, s14
 8023f12:	eeb0 7a68 	vmov.f32	s14, s17
 8023f16:	9337      	str	r3, [sp, #220]	; 0xdc
 8023f18:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023f1a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023f1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023f24:	9338      	str	r3, [sp, #224]	; 0xe0
 8023f26:	ee17 9a10 	vmov	r9, s14
 8023f2a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023f2c:	eeb0 8a67 	vmov.f32	s16, s15
 8023f30:	eef0 8a46 	vmov.f32	s17, s12
 8023f34:	bf08      	it	eq
 8023f36:	4613      	moveq	r3, r2
 8023f38:	e793      	b.n	8023e62 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8023f3a:	b023      	add	sp, #140	; 0x8c
 8023f3c:	ecbd 8b08 	vpop	{d8-d11}
 8023f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f44:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8023f48:	f8cd b01c 	str.w	fp, [sp, #28]
 8023f4c:	9837      	ldr	r0, [sp, #220]	; 0xdc
 8023f4e:	1e59      	subs	r1, r3, #1
 8023f50:	fb00 9201 	mla	r2, r0, r1, r9
 8023f54:	1412      	asrs	r2, r2, #16
 8023f56:	910c      	str	r1, [sp, #48]	; 0x30
 8023f58:	f100 815e 	bmi.w	8024218 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023f5c:	42aa      	cmp	r2, r5
 8023f5e:	f280 815b 	bge.w	8024218 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023f62:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8023f64:	fb02 8201 	mla	r2, r2, r1, r8
 8023f68:	1412      	asrs	r2, r2, #16
 8023f6a:	f100 8155 	bmi.w	8024218 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023f6e:	3f01      	subs	r7, #1
 8023f70:	42ba      	cmp	r2, r7
 8023f72:	f280 8151 	bge.w	8024218 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023f76:	2b00      	cmp	r3, #0
 8023f78:	dda3      	ble.n	8023ec2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8023f7a:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8023f7e:	4621      	mov	r1, r4
 8023f80:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8023f84:	f8cd 90d4 	str.w	r9, [sp, #212]	; 0xd4
 8023f88:	464a      	mov	r2, r9
 8023f8a:	464c      	mov	r4, r9
 8023f8c:	e122      	b.n	80241d4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8023f8e:	f893 c001 	ldrb.w	ip, [r3, #1]
 8023f92:	f856 502c 	ldr.w	r5, [r6, ip, lsl #2]
 8023f96:	950f      	str	r5, [sp, #60]	; 0x3c
 8023f98:	0e2d      	lsrs	r5, r5, #24
 8023f9a:	9508      	str	r5, [sp, #32]
 8023f9c:	b162      	cbz	r2, 8023fb8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8023f9e:	185d      	adds	r5, r3, r1
 8023fa0:	786d      	ldrb	r5, [r5, #1]
 8023fa2:	5c5b      	ldrb	r3, [r3, r1]
 8023fa4:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8023fa8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023fac:	9112      	str	r1, [sp, #72]	; 0x48
 8023fae:	9310      	str	r3, [sp, #64]	; 0x40
 8023fb0:	0e09      	lsrs	r1, r1, #24
 8023fb2:	0e1b      	lsrs	r3, r3, #24
 8023fb4:	910a      	str	r1, [sp, #40]	; 0x28
 8023fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8023fb8:	b2a4      	uxth	r4, r4
 8023fba:	b292      	uxth	r2, r2
 8023fbc:	fb04 f502 	mul.w	r5, r4, r2
 8023fc0:	0124      	lsls	r4, r4, #4
 8023fc2:	1b66      	subs	r6, r4, r5
 8023fc4:	9b08      	ldr	r3, [sp, #32]
 8023fc6:	b2b6      	uxth	r6, r6
 8023fc8:	fb06 f103 	mul.w	r1, r6, r3
 8023fcc:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8023fd0:	b292      	uxth	r2, r2
 8023fd2:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 8023fd6:	1a9b      	subs	r3, r3, r2
 8023fd8:	b29b      	uxth	r3, r3
 8023fda:	fb03 1100 	mla	r1, r3, r0, r1
 8023fde:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023fe0:	fb02 1104 	mla	r1, r2, r4, r1
 8023fe4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023fe6:	fb05 1104 	mla	r1, r5, r4, r1
 8023fea:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023fee:	2900      	cmp	r1, #0
 8023ff0:	f000 80df 	beq.w	80241b2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8023ff4:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 8023ff8:	28ff      	cmp	r0, #255	; 0xff
 8023ffa:	940c      	str	r4, [sp, #48]	; 0x30
 8023ffc:	f407 497f 	and.w	r9, r7, #65280	; 0xff00
 8024000:	d01a      	beq.n	8024038 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8024002:	fb04 f400 	mul.w	r4, r4, r0
 8024006:	4627      	mov	r7, r4
 8024008:	fb09 fc00 	mul.w	ip, r9, r0
 802400c:	0a24      	lsrs	r4, r4, #8
 802400e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024012:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024016:	f50c 7080 	add.w	r0, ip, #256	; 0x100
 802401a:	4427      	add	r7, r4
 802401c:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8024020:	0a3f      	lsrs	r7, r7, #8
 8024022:	0a00      	lsrs	r0, r0, #8
 8024024:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024028:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802402c:	4307      	orrs	r7, r0
 802402e:	f007 10ff 	and.w	r0, r7, #16711935	; 0xff00ff
 8024032:	900c      	str	r0, [sp, #48]	; 0x30
 8024034:	f407 497f 	and.w	r9, r7, #65280	; 0xff00
 8024038:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802403a:	f000 17ff 	and.w	r7, r0, #16711935	; 0xff00ff
 802403e:	f400 4c7f 	and.w	ip, r0, #65280	; 0xff00
 8024042:	9808      	ldr	r0, [sp, #32]
 8024044:	28ff      	cmp	r0, #255	; 0xff
 8024046:	d01a      	beq.n	802407e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8024048:	fb07 f700 	mul.w	r7, r7, r0
 802404c:	fb0c fc00 	mul.w	ip, ip, r0
 8024050:	0a3c      	lsrs	r4, r7, #8
 8024052:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024056:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802405a:	f50c 7080 	add.w	r0, ip, #256	; 0x100
 802405e:	4427      	add	r7, r4
 8024060:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8024064:	0a3f      	lsrs	r7, r7, #8
 8024066:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802406a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802406e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024072:	ea47 0c0c 	orr.w	ip, r7, ip
 8024076:	f00c 17ff 	and.w	r7, ip, #16711935	; 0xff00ff
 802407a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802407e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024080:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 8024084:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 8024088:	9809      	ldr	r0, [sp, #36]	; 0x24
 802408a:	28ff      	cmp	r0, #255	; 0xff
 802408c:	d01c      	beq.n	80240c8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 802408e:	fb0e fe00 	mul.w	lr, lr, r0
 8024092:	fb0a fa00 	mul.w	sl, sl, r0
 8024096:	ea4f 241e 	mov.w	r4, lr, lsr #8
 802409a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802409e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80240a2:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80240a6:	44a6      	add	lr, r4
 80240a8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80240ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80240b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80240b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80240b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80240bc:	ea4e 0a0a 	orr.w	sl, lr, sl
 80240c0:	f00a 1eff 	and.w	lr, sl, #16711935	; 0xff00ff
 80240c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80240c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80240ca:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80240ce:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80240d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80240d4:	2cff      	cmp	r4, #255	; 0xff
 80240d6:	d01d      	beq.n	8024114 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80240d8:	fb00 f004 	mul.w	r0, r0, r4
 80240dc:	fb0b fb04 	mul.w	fp, fp, r4
 80240e0:	0a04      	lsrs	r4, r0, #8
 80240e2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80240e6:	9414      	str	r4, [sp, #80]	; 0x50
 80240e8:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 80240ec:	9413      	str	r4, [sp, #76]	; 0x4c
 80240ee:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80240f0:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80240f4:	4420      	add	r0, r4
 80240f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80240f8:	0a00      	lsrs	r0, r0, #8
 80240fa:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 80240fe:	0a24      	lsrs	r4, r4, #8
 8024100:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024104:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8024108:	ea40 0b0b 	orr.w	fp, r0, fp
 802410c:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 8024110:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024114:	43c9      	mvns	r1, r1
 8024116:	fb07 f706 	mul.w	r7, r7, r6
 802411a:	fb0c f606 	mul.w	r6, ip, r6
 802411e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024120:	fb09 6603 	mla	r6, r9, r3, r6
 8024124:	fb04 7703 	mla	r7, r4, r3, r7
 8024128:	9b07      	ldr	r3, [sp, #28]
 802412a:	fb0e 7702 	mla	r7, lr, r2, r7
 802412e:	fb0a 6602 	mla	r6, sl, r2, r6
 8024132:	f8b3 e000 	ldrh.w	lr, [r3]
 8024136:	b2c9      	uxtb	r1, r1
 8024138:	ea4f 242e 	mov.w	r4, lr, asr #8
 802413c:	fb00 7005 	mla	r0, r0, r5, r7
 8024140:	fb0b 6605 	mla	r6, fp, r5, r6
 8024144:	ea4f 09ee 	mov.w	r9, lr, asr #3
 8024148:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802414c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024150:	fb04 f401 	mul.w	r4, r4, r1
 8024154:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8024158:	fa5f fe8e 	uxtb.w	lr, lr
 802415c:	fb09 f901 	mul.w	r9, r9, r1
 8024160:	fb0e f101 	mul.w	r1, lr, r1
 8024164:	0a00      	lsrs	r0, r0, #8
 8024166:	0a36      	lsrs	r6, r6, #8
 8024168:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802416c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024170:	1c62      	adds	r2, r4, #1
 8024172:	ea40 0306 	orr.w	r3, r0, r6
 8024176:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802417a:	f109 0001 	add.w	r0, r9, #1
 802417e:	1c4a      	adds	r2, r1, #1
 8024180:	0c1e      	lsrs	r6, r3, #16
 8024182:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8024186:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802418a:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 802418e:	4a21      	ldr	r2, [pc, #132]	; (8024214 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40c>)
 8024190:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 8024194:	b2db      	uxtb	r3, r3
 8024196:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802419a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802419e:	ea02 2404 	and.w	r4, r2, r4, lsl #8
 80241a2:	00c0      	lsls	r0, r0, #3
 80241a4:	ea44 04d3 	orr.w	r4, r4, r3, lsr #3
 80241a8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80241ac:	9b07      	ldr	r3, [sp, #28]
 80241ae:	4320      	orrs	r0, r4
 80241b0:	8018      	strh	r0, [r3, #0]
 80241b2:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80241b4:	9937      	ldr	r1, [sp, #220]	; 0xdc
 80241b6:	9b07      	ldr	r3, [sp, #28]
 80241b8:	440a      	add	r2, r1
 80241ba:	9235      	str	r2, [sp, #212]	; 0xd4
 80241bc:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 80241be:	3302      	adds	r3, #2
 80241c0:	4490      	add	r8, r2
 80241c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80241c4:	9307      	str	r3, [sp, #28]
 80241c6:	4293      	cmp	r3, r2
 80241c8:	d022      	beq.n	8024210 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 80241ca:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80241cc:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80241ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80241d2:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 80241d4:	1412      	asrs	r2, r2, #16
 80241d6:	ea4f 4328 	mov.w	r3, r8, asr #16
 80241da:	fb01 2303 	mla	r3, r1, r3, r2
 80241de:	980e      	ldr	r0, [sp, #56]	; 0x38
 80241e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80241e2:	5cc2      	ldrb	r2, [r0, r3]
 80241e4:	f3c4 3403 	ubfx	r4, r4, #12, #4
 80241e8:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80241ec:	4403      	add	r3, r0
 80241ee:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80241f2:	0e38      	lsrs	r0, r7, #24
 80241f4:	2c00      	cmp	r4, #0
 80241f6:	f47f aeca 	bne.w	8023f8e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80241fa:	2a00      	cmp	r2, #0
 80241fc:	f43f aedc 	beq.w	8023fb8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8024200:	5c5b      	ldrb	r3, [r3, r1]
 8024202:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024204:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8024208:	9310      	str	r3, [sp, #64]	; 0x40
 802420a:	0e1b      	lsrs	r3, r3, #24
 802420c:	9309      	str	r3, [sp, #36]	; 0x24
 802420e:	e6d3      	b.n	8023fb8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8024210:	4693      	mov	fp, r2
 8024212:	e656      	b.n	8023ec2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024214:	fffff800 	.word	0xfffff800
 8024218:	2b00      	cmp	r3, #0
 802421a:	f77f ae52 	ble.w	8023ec2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802421e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8024222:	ea4f 4229 	mov.w	r2, r9, asr #16
 8024226:	ea4f 4128 	mov.w	r1, r8, asr #16
 802422a:	2a00      	cmp	r2, #0
 802422c:	465f      	mov	r7, fp
 802422e:	f8cd b01c 	str.w	fp, [sp, #28]
 8024232:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
 8024234:	e9dd b337 	ldrd	fp, r3, [sp, #220]	; 0xdc
 8024238:	f3c9 3003 	ubfx	r0, r9, #12, #4
 802423c:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 8024240:	f2c0 8147 	blt.w	80244d2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8024244:	1e73      	subs	r3, r6, #1
 8024246:	429a      	cmp	r2, r3
 8024248:	f280 8143 	bge.w	80244d2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802424c:	2900      	cmp	r1, #0
 802424e:	f2c0 8140 	blt.w	80244d2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8024252:	f10c 33ff 	add.w	r3, ip, #4294967295
 8024256:	4299      	cmp	r1, r3
 8024258:	f280 813b 	bge.w	80244d2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802425c:	b236      	sxth	r6, r6
 802425e:	fb01 2106 	mla	r1, r1, r6, r2
 8024262:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024264:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024266:	5c53      	ldrb	r3, [r2, r1]
 8024268:	4411      	add	r1, r2
 802426a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 802426e:	910d      	str	r1, [sp, #52]	; 0x34
 8024270:	0e13      	lsrs	r3, r2, #24
 8024272:	2800      	cmp	r0, #0
 8024274:	f000 8154 	beq.w	8024520 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8024278:	f891 c001 	ldrb.w	ip, [r1, #1]
 802427c:	9513      	str	r5, [sp, #76]	; 0x4c
 802427e:	f855 102c 	ldr.w	r1, [r5, ip, lsl #2]
 8024282:	911f      	str	r1, [sp, #124]	; 0x7c
 8024284:	0e09      	lsrs	r1, r1, #24
 8024286:	9116      	str	r1, [sp, #88]	; 0x58
 8024288:	f1be 0f00 	cmp.w	lr, #0
 802428c:	f040 8153 	bne.w	8024536 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8024290:	b286      	uxth	r6, r0
 8024292:	fa1f fc8e 	uxth.w	ip, lr
 8024296:	fb06 f00c 	mul.w	r0, r6, ip
 802429a:	0136      	lsls	r6, r6, #4
 802429c:	1a31      	subs	r1, r6, r0
 802429e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80242a0:	b289      	uxth	r1, r1
 80242a2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80242a6:	9113      	str	r1, [sp, #76]	; 0x4c
 80242a8:	fb01 f105 	mul.w	r1, r1, r5
 80242ac:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 80242b0:	fa1f f58c 	uxth.w	r5, ip
 80242b4:	1b76      	subs	r6, r6, r5
 80242b6:	b2b6      	uxth	r6, r6
 80242b8:	fb06 1c03 	mla	ip, r6, r3, r1
 80242bc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80242be:	9514      	str	r5, [sp, #80]	; 0x50
 80242c0:	fb05 cc01 	mla	ip, r5, r1, ip
 80242c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80242c6:	9619      	str	r6, [sp, #100]	; 0x64
 80242c8:	fb00 cc01 	mla	ip, r0, r1, ip
 80242cc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80242d0:	f1bc 0f00 	cmp.w	ip, #0
 80242d4:	f000 80e6 	beq.w	80244a4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80242d8:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 80242dc:	2bff      	cmp	r3, #255	; 0xff
 80242de:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80242e2:	911a      	str	r1, [sp, #104]	; 0x68
 80242e4:	921b      	str	r2, [sp, #108]	; 0x6c
 80242e6:	d01b      	beq.n	8024320 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 80242e8:	fb02 f203 	mul.w	r2, r2, r3
 80242ec:	fb01 f103 	mul.w	r1, r1, r3
 80242f0:	4613      	mov	r3, r2
 80242f2:	0a0a      	lsrs	r2, r1, #8
 80242f4:	f101 1601 	add.w	r6, r1, #65537	; 0x10001
 80242f8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80242fc:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8024300:	4432      	add	r2, r6
 8024302:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024306:	0a12      	lsrs	r2, r2, #8
 8024308:	0a1b      	lsrs	r3, r3, #8
 802430a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802430e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024312:	4313      	orrs	r3, r2
 8024314:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8024318:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802431c:	921a      	str	r2, [sp, #104]	; 0x68
 802431e:	931b      	str	r3, [sp, #108]	; 0x6c
 8024320:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024322:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8024324:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8024328:	2aff      	cmp	r2, #255	; 0xff
 802432a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802432e:	931c      	str	r3, [sp, #112]	; 0x70
 8024330:	d01b      	beq.n	802436a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 8024332:	fb03 f302 	mul.w	r3, r3, r2
 8024336:	461e      	mov	r6, r3
 8024338:	fb01 f102 	mul.w	r1, r1, r2
 802433c:	0a0a      	lsrs	r2, r1, #8
 802433e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024342:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 8024346:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802434a:	440a      	add	r2, r1
 802434c:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8024350:	0a12      	lsrs	r2, r2, #8
 8024352:	0a1b      	lsrs	r3, r3, #8
 8024354:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024358:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802435c:	ea42 0603 	orr.w	r6, r2, r3
 8024360:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 8024364:	f006 11ff 	and.w	r1, r6, #16711935	; 0xff00ff
 8024368:	931c      	str	r3, [sp, #112]	; 0x70
 802436a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802436c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802436e:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8024372:	2aff      	cmp	r2, #255	; 0xff
 8024374:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024378:	931d      	str	r3, [sp, #116]	; 0x74
 802437a:	d01b      	beq.n	80243b4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 802437c:	fb03 f302 	mul.w	r3, r3, r2
 8024380:	fb06 f602 	mul.w	r6, r6, r2
 8024384:	461a      	mov	r2, r3
 8024386:	0a33      	lsrs	r3, r6, #8
 8024388:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802438c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8024390:	f502 7380 	add.w	r3, r2, #256	; 0x100
 8024394:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024398:	4476      	add	r6, lr
 802439a:	0a36      	lsrs	r6, r6, #8
 802439c:	0a1b      	lsrs	r3, r3, #8
 802439e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80243a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80243a6:	ea46 0203 	orr.w	r2, r6, r3
 80243aa:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 80243ae:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 80243b2:	931d      	str	r3, [sp, #116]	; 0x74
 80243b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80243b6:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80243ba:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80243be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80243c0:	930d      	str	r3, [sp, #52]	; 0x34
 80243c2:	2aff      	cmp	r2, #255	; 0xff
 80243c4:	d01b      	beq.n	80243fe <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 80243c6:	fb03 f302 	mul.w	r3, r3, r2
 80243ca:	fb0e fe02 	mul.w	lr, lr, r2
 80243ce:	0a1a      	lsrs	r2, r3, #8
 80243d0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80243d4:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80243d8:	f50e 7580 	add.w	r5, lr, #256	; 0x100
 80243dc:	441a      	add	r2, r3
 80243de:	eb05 2e1e 	add.w	lr, r5, lr, lsr #8
 80243e2:	0a12      	lsrs	r2, r2, #8
 80243e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80243e8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80243ec:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80243f0:	ea42 0e0e 	orr.w	lr, r2, lr
 80243f4:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80243f8:	930d      	str	r3, [sp, #52]	; 0x34
 80243fa:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80243fe:	ea6f 0c0c 	mvn.w	ip, ip
 8024402:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024404:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8024406:	fb01 f305 	mul.w	r3, r1, r5
 802440a:	991c      	ldr	r1, [sp, #112]	; 0x70
 802440c:	fa5f fc8c 	uxtb.w	ip, ip
 8024410:	fb01 f105 	mul.w	r1, r1, r5
 8024414:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8024416:	fb02 3305 	mla	r3, r2, r5, r3
 802441a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802441c:	fb02 1105 	mla	r1, r2, r5, r1
 8024420:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024422:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8024424:	fb06 3605 	mla	r6, r6, r5, r3
 8024428:	fb02 1205 	mla	r2, r2, r5, r1
 802442c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802442e:	8839      	ldrh	r1, [r7, #0]
 8024430:	fb03 6300 	mla	r3, r3, r0, r6
 8024434:	fb0e 2e00 	mla	lr, lr, r0, r2
 8024438:	10c8      	asrs	r0, r1, #3
 802443a:	120a      	asrs	r2, r1, #8
 802443c:	f000 06fc 	and.w	r6, r0, #252	; 0xfc
 8024440:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024444:	00c9      	lsls	r1, r1, #3
 8024446:	fb02 f20c 	mul.w	r2, r2, ip
 802444a:	fb06 f60c 	mul.w	r6, r6, ip
 802444e:	b2c9      	uxtb	r1, r1
 8024450:	fb01 f00c 	mul.w	r0, r1, ip
 8024454:	0a1b      	lsrs	r3, r3, #8
 8024456:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802445a:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 802445e:	f40e 437f 	and.w	r3, lr, #65280	; 0xff00
 8024462:	430b      	orrs	r3, r1
 8024464:	f106 0e01 	add.w	lr, r6, #1
 8024468:	1c51      	adds	r1, r2, #1
 802446a:	0c1d      	lsrs	r5, r3, #16
 802446c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024470:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8024474:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8024478:	fa5f fe83 	uxtb.w	lr, r3
 802447c:	f100 0c01 	add.w	ip, r0, #1
 8024480:	4b39      	ldr	r3, [pc, #228]	; (8024568 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>)
 8024482:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8024486:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 802448a:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 802448e:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 8024492:	00c9      	lsls	r1, r1, #3
 8024494:	eb0e 2310 	add.w	r3, lr, r0, lsr #8
 8024498:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 802449c:	f401 62fc 	and.w	r2, r1, #2016	; 0x7e0
 80244a0:	4313      	orrs	r3, r2
 80244a2:	803b      	strh	r3, [r7, #0]
 80244a4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80244a6:	f1ba 0f00 	cmp.w	sl, #0
 80244aa:	f107 0702 	add.w	r7, r7, #2
 80244ae:	44d9      	add	r9, fp
 80244b0:	4498      	add	r8, r3
 80244b2:	dd26      	ble.n	8024502 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80244b4:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 80244b8:	ea4f 4229 	mov.w	r2, r9, asr #16
 80244bc:	2a00      	cmp	r2, #0
 80244be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80244c2:	ea4f 4128 	mov.w	r1, r8, asr #16
 80244c6:	f3c9 3003 	ubfx	r0, r9, #12, #4
 80244ca:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 80244ce:	f6bf aeb9 	bge.w	8024244 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 80244d2:	1c53      	adds	r3, r2, #1
 80244d4:	d4e6      	bmi.n	80244a4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80244d6:	42b3      	cmp	r3, r6
 80244d8:	dce4      	bgt.n	80244a4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80244da:	1c4b      	adds	r3, r1, #1
 80244dc:	d4e2      	bmi.n	80244a4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80244de:	4563      	cmp	r3, ip
 80244e0:	dce0      	bgt.n	80244a4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80244e2:	fa0f f38c 	sxth.w	r3, ip
 80244e6:	b236      	sxth	r6, r6
 80244e8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80244ec:	e9cd 6300 	strd	r6, r3, [sp]
 80244f0:	e9cd 0e04 	strd	r0, lr, [sp, #16]
 80244f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80244f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80244f8:	4639      	mov	r1, r7
 80244fa:	981e      	ldr	r0, [sp, #120]	; 0x78
 80244fc:	f7ff fade 	bl	8023abc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8024500:	e7d0      	b.n	80244a4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8024502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024504:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024508:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802450c:	3301      	adds	r3, #1
 802450e:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8024512:	e4d6      	b.n	8023ec2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024514:	3b01      	subs	r3, #1
 8024516:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802451a:	930c      	str	r3, [sp, #48]	; 0x30
 802451c:	469a      	mov	sl, r3
 802451e:	e684      	b.n	802422a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x422>
 8024520:	f1be 0f00 	cmp.w	lr, #0
 8024524:	f43f aeb4 	beq.w	8024290 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8024528:	5d89      	ldrb	r1, [r1, r6]
 802452a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802452e:	9120      	str	r1, [sp, #128]	; 0x80
 8024530:	0e09      	lsrs	r1, r1, #24
 8024532:	9117      	str	r1, [sp, #92]	; 0x5c
 8024534:	e6ac      	b.n	8024290 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8024536:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024538:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802453a:	eb01 0c06 	add.w	ip, r1, r6
 802453e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024542:	5d89      	ldrb	r1, [r1, r6]
 8024544:	f855 602c 	ldr.w	r6, [r5, ip, lsl #2]
 8024548:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802454c:	0e35      	lsrs	r5, r6, #24
 802454e:	9120      	str	r1, [sp, #128]	; 0x80
 8024550:	0e09      	lsrs	r1, r1, #24
 8024552:	9621      	str	r6, [sp, #132]	; 0x84
 8024554:	9518      	str	r5, [sp, #96]	; 0x60
 8024556:	9117      	str	r1, [sp, #92]	; 0x5c
 8024558:	e69a      	b.n	8024290 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802455a:	f43f acb2 	beq.w	8023ec2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802455e:	1e65      	subs	r5, r4, #1
 8024560:	f8cd b01c 	str.w	fp, [sp, #28]
 8024564:	e4f2      	b.n	8023f4c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8024566:	bf00      	nop
 8024568:	fffff800 	.word	0xfffff800

0802456c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 802456c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024570:	b08b      	sub	sp, #44	; 0x2c
 8024572:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
 8024576:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 802457a:	ea6f 0b00 	mvn.w	fp, r0
 802457e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024580:	f9bd 5050 	ldrsh.w	r5, [sp, #80]	; 0x50
 8024584:	9005      	str	r0, [sp, #20]
 8024586:	fb0c 4805 	mla	r8, ip, r5, r4
 802458a:	7848      	ldrb	r0, [r1, #1]
 802458c:	788e      	ldrb	r6, [r1, #2]
 802458e:	0204      	lsls	r4, r0, #8
 8024590:	780f      	ldrb	r7, [r1, #0]
 8024592:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8024596:	9306      	str	r3, [sp, #24]
 8024598:	fa5f f38b 	uxtb.w	r3, fp
 802459c:	433c      	orrs	r4, r7
 802459e:	9304      	str	r3, [sp, #16]
 80245a0:	f1bc 0f00 	cmp.w	ip, #0
 80245a4:	eb02 0308 	add.w	r3, r2, r8
 80245a8:	9003      	str	r0, [sp, #12]
 80245aa:	9602      	str	r6, [sp, #8]
 80245ac:	9307      	str	r3, [sp, #28]
 80245ae:	9409      	str	r4, [sp, #36]	; 0x24
 80245b0:	f10c 0601 	add.w	r6, ip, #1
 80245b4:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 80245b8:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80245bc:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 80245c0:	db02      	blt.n	80245c8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x5c>
 80245c2:	45e6      	cmp	lr, ip
 80245c4:	f300 80a0 	bgt.w	8024708 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x19c>
 80245c8:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 80245cc:	46e0      	mov	r8, ip
 80245ce:	fa5f fb84 	uxtb.w	fp, r4
 80245d2:	f8cd b004 	str.w	fp, [sp, #4]
 80245d6:	2e00      	cmp	r6, #0
 80245d8:	db01      	blt.n	80245de <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x72>
 80245da:	45b6      	cmp	lr, r6
 80245dc:	dc73      	bgt.n	80246c6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x15a>
 80245de:	fa5f fa84 	uxtb.w	sl, r4
 80245e2:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 80245e6:	4654      	mov	r4, sl
 80245e8:	46f1      	mov	r9, lr
 80245ea:	2b0f      	cmp	r3, #15
 80245ec:	f200 80cb 	bhi.w	8024786 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x21a>
 80245f0:	280f      	cmp	r0, #15
 80245f2:	f200 80c8 	bhi.w	8024786 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x21a>
 80245f6:	b29b      	uxth	r3, r3
 80245f8:	b280      	uxth	r0, r0
 80245fa:	fb03 f600 	mul.w	r6, r3, r0
 80245fe:	011b      	lsls	r3, r3, #4
 8024600:	1b9d      	subs	r5, r3, r6
 8024602:	9a01      	ldr	r2, [sp, #4]
 8024604:	b2ad      	uxth	r5, r5
 8024606:	ebc6 1000 	rsb	r0, r6, r0, lsl #4
 802460a:	fb05 f202 	mul.w	r2, r5, r2
 802460e:	b280      	uxth	r0, r0
 8024610:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8024614:	1a1b      	subs	r3, r3, r0
 8024616:	b29b      	uxth	r3, r3
 8024618:	fb03 220b 	mla	r2, r3, fp, r2
 802461c:	fb00 2a0a 	mla	sl, r0, sl, r2
 8024620:	f8bd b010 	ldrh.w	fp, [sp, #16]
 8024624:	fb06 a404 	mla	r4, r6, r4, sl
 8024628:	fb17 f70b 	smulbb	r7, r7, fp
 802462c:	f8bd a014 	ldrh.w	sl, [sp, #20]
 8024630:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8024634:	fb04 770a 	mla	r7, r4, sl, r7
 8024638:	b2bf      	uxth	r7, r7
 802463a:	1c7a      	adds	r2, r7, #1
 802463c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8024640:	123f      	asrs	r7, r7, #8
 8024642:	700f      	strb	r7, [r1, #0]
 8024644:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8024648:	f898 7001 	ldrb.w	r7, [r8, #1]
 802464c:	fb05 f204 	mul.w	r2, r5, r4
 8024650:	fb03 2407 	mla	r4, r3, r7, r2
 8024654:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024658:	f89e 7001 	ldrb.w	r7, [lr, #1]
 802465c:	fb00 4202 	mla	r2, r0, r2, r4
 8024660:	9c03      	ldr	r4, [sp, #12]
 8024662:	fb06 2207 	mla	r2, r6, r7, r2
 8024666:	fb14 f40b 	smulbb	r4, r4, fp
 802466a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802466e:	fb02 420a 	mla	r2, r2, sl, r4
 8024672:	b292      	uxth	r2, r2
 8024674:	1c54      	adds	r4, r2, #1
 8024676:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 802467a:	1212      	asrs	r2, r2, #8
 802467c:	704a      	strb	r2, [r1, #1]
 802467e:	f89c 4002 	ldrb.w	r4, [ip, #2]
 8024682:	f898 2002 	ldrb.w	r2, [r8, #2]
 8024686:	fb05 f504 	mul.w	r5, r5, r4
 802468a:	fb03 5502 	mla	r5, r3, r2, r5
 802468e:	f899 4002 	ldrb.w	r4, [r9, #2]
 8024692:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8024696:	fb00 5004 	mla	r0, r0, r4, r5
 802469a:	9b02      	ldr	r3, [sp, #8]
 802469c:	fb06 0602 	mla	r6, r6, r2, r0
 80246a0:	fb13 fb0b 	smulbb	fp, r3, fp
 80246a4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80246a8:	fb06 ba0a 	mla	sl, r6, sl, fp
 80246ac:	fa1f fa8a 	uxth.w	sl, sl
 80246b0:	f10a 0b01 	add.w	fp, sl, #1
 80246b4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80246b8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80246bc:	f881 a002 	strb.w	sl, [r1, #2]
 80246c0:	b00b      	add	sp, #44	; 0x2c
 80246c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80246c6:	2800      	cmp	r0, #0
 80246c8:	d089      	beq.n	80245de <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x72>
 80246ca:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80246cc:	2e00      	cmp	r6, #0
 80246ce:	db47      	blt.n	8024760 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1f4>
 80246d0:	42b5      	cmp	r5, r6
 80246d2:	dd45      	ble.n	8024760 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1f4>
 80246d4:	9a07      	ldr	r2, [sp, #28]
 80246d6:	f812 9005 	ldrb.w	r9, [r2, r5]
 80246da:	9a06      	ldr	r2, [sp, #24]
 80246dc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80246e0:	4491      	add	r9, r2
 80246e2:	3601      	adds	r6, #1
 80246e4:	f899 a000 	ldrb.w	sl, [r9]
 80246e8:	d436      	bmi.n	8024758 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ec>
 80246ea:	42b5      	cmp	r5, r6
 80246ec:	dd34      	ble.n	8024758 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ec>
 80246ee:	2b00      	cmp	r3, #0
 80246f0:	d045      	beq.n	802477e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x212>
 80246f2:	9a07      	ldr	r2, [sp, #28]
 80246f4:	442a      	add	r2, r5
 80246f6:	f892 e001 	ldrb.w	lr, [r2, #1]
 80246fa:	9a06      	ldr	r2, [sp, #24]
 80246fc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8024700:	f812 400e 	ldrb.w	r4, [r2, lr]
 8024704:	4496      	add	lr, r2
 8024706:	e770      	b.n	80245ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7e>
 8024708:	4691      	mov	r9, r2
 802470a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802470c:	2a00      	cmp	r2, #0
 802470e:	db01      	blt.n	8024714 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1a8>
 8024710:	4295      	cmp	r5, r2
 8024712:	dc19      	bgt.n	8024748 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>
 8024714:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 8024718:	3201      	adds	r2, #1
 802471a:	f898 b000 	ldrb.w	fp, [r8]
 802471e:	d40e      	bmi.n	802473e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d2>
 8024720:	4295      	cmp	r5, r2
 8024722:	dd0c      	ble.n	802473e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d2>
 8024724:	b1fb      	cbz	r3, 8024766 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1fa>
 8024726:	9a07      	ldr	r2, [sp, #28]
 8024728:	f892 c001 	ldrb.w	ip, [r2, #1]
 802472c:	9a06      	ldr	r2, [sp, #24]
 802472e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024732:	f812 200c 	ldrb.w	r2, [r2, ip]
 8024736:	9201      	str	r2, [sp, #4]
 8024738:	9a06      	ldr	r2, [sp, #24]
 802473a:	4494      	add	ip, r2
 802473c:	e74b      	b.n	80245d6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6a>
 802473e:	b2e2      	uxtb	r2, r4
 8024740:	9201      	str	r2, [sp, #4]
 8024742:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8024746:	e746      	b.n	80245d6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6a>
 8024748:	f819 8008 	ldrb.w	r8, [r9, r8]
 802474c:	9a06      	ldr	r2, [sp, #24]
 802474e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024752:	4490      	add	r8, r2
 8024754:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8024756:	e7df      	b.n	8024718 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ac>
 8024758:	b2e4      	uxtb	r4, r4
 802475a:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 802475e:	e744      	b.n	80245ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7e>
 8024760:	f10d 0924 	add.w	r9, sp, #36	; 0x24
 8024764:	e7bd      	b.n	80246e2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x176>
 8024766:	b2e2      	uxtb	r2, r4
 8024768:	2e00      	cmp	r6, #0
 802476a:	9201      	str	r2, [sp, #4]
 802476c:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8024770:	f6bf af33 	bge.w	80245da <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6e>
 8024774:	46e6      	mov	lr, ip
 8024776:	46e1      	mov	r9, ip
 8024778:	4692      	mov	sl, r2
 802477a:	4614      	mov	r4, r2
 802477c:	e738      	b.n	80245f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x84>
 802477e:	b2e4      	uxtb	r4, r4
 8024780:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 8024784:	e734      	b.n	80245f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x84>
 8024786:	4b03      	ldr	r3, [pc, #12]	; (8024794 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x228>)
 8024788:	4a03      	ldr	r2, [pc, #12]	; (8024798 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x22c>)
 802478a:	f44f 710f 	mov.w	r1, #572	; 0x23c
 802478e:	4803      	ldr	r0, [pc, #12]	; (802479c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x230>)
 8024790:	f003 fc8c 	bl	80280ac <__assert_func>
 8024794:	0802b324 	.word	0x0802b324
 8024798:	0802b99c 	.word	0x0802b99c
 802479c:	0802b4a8 	.word	0x0802b4a8

080247a0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80247a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247a4:	ed2d 8b08 	vpush	{d8-d11}
 80247a8:	b097      	sub	sp, #92	; 0x5c
 80247aa:	f89d 60c4 	ldrb.w	r6, [sp, #196]	; 0xc4
 80247ae:	eeb0 aa40 	vmov.f32	s20, s0
 80247b2:	e9dd b729 	ldrd	fp, r7, [sp, #164]	; 0xa4
 80247b6:	e9cd 0614 	strd	r0, r6, [sp, #80]	; 0x50
 80247ba:	43f0      	mvns	r0, r6
 80247bc:	eef0 9a60 	vmov.f32	s19, s1
 80247c0:	eeb0 9a41 	vmov.f32	s18, s2
 80247c4:	eef0 8a62 	vmov.f32	s17, s5
 80247c8:	eeb0 8a43 	vmov.f32	s16, s6
 80247cc:	eef0 ba44 	vmov.f32	s23, s8
 80247d0:	eeb0 ba64 	vmov.f32	s22, s9
 80247d4:	eef0 aa45 	vmov.f32	s21, s10
 80247d8:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 80247dc:	e9dd 512d 	ldrd	r5, r1, [sp, #180]	; 0xb4
 80247e0:	461a      	mov	r2, r3
 80247e2:	686c      	ldr	r4, [r5, #4]
 80247e4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80247e6:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
 80247ea:	fb04 1303 	mla	r3, r4, r3, r1
 80247ee:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 80247f0:	6829      	ldr	r1, [r5, #0]
 80247f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80247f6:	6865      	ldr	r5, [r4, #4]
 80247f8:	eb01 0a03 	add.w	sl, r1, r3
 80247fc:	b2c3      	uxtb	r3, r0
 80247fe:	6824      	ldr	r4, [r4, #0]
 8024800:	9309      	str	r3, [sp, #36]	; 0x24
 8024802:	1d2b      	adds	r3, r5, #4
 8024804:	930a      	str	r3, [sp, #40]	; 0x28
 8024806:	b2b3      	uxth	r3, r6
 8024808:	940d      	str	r4, [sp, #52]	; 0x34
 802480a:	930b      	str	r3, [sp, #44]	; 0x2c
 802480c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802480e:	2b00      	cmp	r3, #0
 8024810:	dc02      	bgt.n	8024818 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024814:	2b00      	cmp	r3, #0
 8024816:	dd63      	ble.n	80248e0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8024818:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802481a:	2a00      	cmp	r2, #0
 802481c:	e9d3 6e02 	ldrd	r6, lr, [r3, #8]
 8024820:	b234      	sxth	r4, r6
 8024822:	fa0f fc8e 	sxth.w	ip, lr
 8024826:	f340 825b 	ble.w	8024ce0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>
 802482a:	f8cd e020 	str.w	lr, [sp, #32]
 802482e:	f8dd e0b0 	ldr.w	lr, [sp, #176]	; 0xb0
 8024832:	1e65      	subs	r5, r4, #1
 8024834:	f10c 38ff 	add.w	r8, ip, #4294967295
 8024838:	ea5f 432b 	movs.w	r3, fp, asr #16
 802483c:	ea4f 4127 	mov.w	r1, r7, asr #16
 8024840:	d405      	bmi.n	802484e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8024842:	42ab      	cmp	r3, r5
 8024844:	da03      	bge.n	802484e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8024846:	2900      	cmp	r1, #0
 8024848:	db01      	blt.n	802484e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802484a:	4541      	cmp	r1, r8
 802484c:	db4d      	blt.n	80248ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802484e:	1c58      	adds	r0, r3, #1
 8024850:	d406      	bmi.n	8024860 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8024852:	42a0      	cmp	r0, r4
 8024854:	dc04      	bgt.n	8024860 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8024856:	1c48      	adds	r0, r1, #1
 8024858:	d402      	bmi.n	8024860 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802485a:	4560      	cmp	r0, ip
 802485c:	f340 819b 	ble.w	8024b96 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8024860:	3a01      	subs	r2, #1
 8024862:	44cb      	add	fp, r9
 8024864:	4477      	add	r7, lr
 8024866:	f10a 0a03 	add.w	sl, sl, #3
 802486a:	d1e5      	bne.n	8024838 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802486c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802486e:	2b00      	cmp	r3, #0
 8024870:	dd36      	ble.n	80248e0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8024872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024876:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802487a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802487e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024882:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024886:	ee29 6aa7 	vmul.f32	s12, s19, s15
 802488a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802488e:	ee76 6a68 	vsub.f32	s13, s12, s17
 8024892:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8024896:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802489a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802489e:	ee16 2a90 	vmov	r2, s13
 80248a2:	3b01      	subs	r3, #1
 80248a4:	930e      	str	r3, [sp, #56]	; 0x38
 80248a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80248a8:	fb92 f9f3 	sdiv	r9, r2, r3
 80248ac:	ee17 2a10 	vmov	r2, s14
 80248b0:	eeb0 7a48 	vmov.f32	s14, s16
 80248b4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80248b8:	ee17 7a10 	vmov	r7, s14
 80248bc:	eeb0 7a68 	vmov.f32	s14, s17
 80248c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80248c4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80248c8:	932c      	str	r3, [sp, #176]	; 0xb0
 80248ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80248cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80248ce:	ee17 ba10 	vmov	fp, s14
 80248d2:	eeb0 8a67 	vmov.f32	s16, s15
 80248d6:	eef0 8a46 	vmov.f32	s17, s12
 80248da:	bf18      	it	ne
 80248dc:	461a      	movne	r2, r3
 80248de:	e795      	b.n	802480c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80248e0:	b017      	add	sp, #92	; 0x5c
 80248e2:	ecbd 8b08 	vpop	{d8-d11}
 80248e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248ea:	f8dd e020 	ldr.w	lr, [sp, #32]
 80248ee:	1e51      	subs	r1, r2, #1
 80248f0:	fb09 b301 	mla	r3, r9, r1, fp
 80248f4:	141b      	asrs	r3, r3, #16
 80248f6:	9108      	str	r1, [sp, #32]
 80248f8:	f100 80e7 	bmi.w	8024aca <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80248fc:	42ab      	cmp	r3, r5
 80248fe:	f280 80e4 	bge.w	8024aca <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8024902:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024904:	fb03 7301 	mla	r3, r3, r1, r7
 8024908:	141b      	asrs	r3, r3, #16
 802490a:	f100 80de 	bmi.w	8024aca <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802490e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8024912:	4563      	cmp	r3, ip
 8024914:	f280 80d9 	bge.w	8024aca <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8024918:	2a00      	cmp	r2, #0
 802491a:	dda7      	ble.n	802486c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 802491c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024920:	eb0a 0302 	add.w	r3, sl, r2
 8024924:	930c      	str	r3, [sp, #48]	; 0x30
 8024926:	f10a 0c03 	add.w	ip, sl, #3
 802492a:	e9cd 792a 	strd	r7, r9, [sp, #168]	; 0xa8
 802492e:	463b      	mov	r3, r7
 8024930:	e09a      	b.n	8024a68 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8024932:	784d      	ldrb	r5, [r1, #1]
 8024934:	1908      	adds	r0, r1, r4
 8024936:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802493a:	4435      	add	r5, r6
 802493c:	2a00      	cmp	r2, #0
 802493e:	f000 80b5 	beq.w	8024aac <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8024942:	5d0c      	ldrb	r4, [r1, r4]
 8024944:	f890 e001 	ldrb.w	lr, [r0, #1]
 8024948:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802494c:	19a1      	adds	r1, r4, r6
 802494e:	9108      	str	r1, [sp, #32]
 8024950:	4631      	mov	r1, r6
 8024952:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8024956:	9f08      	ldr	r7, [sp, #32]
 8024958:	44b6      	add	lr, r6
 802495a:	b29b      	uxth	r3, r3
 802495c:	b292      	uxth	r2, r2
 802495e:	fb03 f602 	mul.w	r6, r3, r2
 8024962:	011b      	lsls	r3, r3, #4
 8024964:	f895 9000 	ldrb.w	r9, [r5]
 8024968:	1b98      	subs	r0, r3, r6
 802496a:	b280      	uxth	r0, r0
 802496c:	fb00 f909 	mul.w	r9, r0, r9
 8024970:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8024974:	b292      	uxth	r2, r2
 8024976:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802497a:	f811 100a 	ldrb.w	r1, [r1, sl]
 802497e:	1a9b      	subs	r3, r3, r2
 8024980:	b29b      	uxth	r3, r3
 8024982:	fb03 9101 	mla	r1, r3, r1, r9
 8024986:	f897 9000 	ldrb.w	r9, [r7]
 802498a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 802498c:	fb02 1109 	mla	r1, r2, r9, r1
 8024990:	f89e a000 	ldrb.w	sl, [lr]
 8024994:	f81c 9c03 	ldrb.w	r9, [ip, #-3]
 8024998:	44a3      	add	fp, r4
 802499a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802499c:	fb06 110a 	mla	r1, r6, sl, r1
 80249a0:	fb19 f904 	smulbb	r9, r9, r4
 80249a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80249a6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80249aa:	fb01 9904 	mla	r9, r1, r4, r9
 80249ae:	fa1f f989 	uxth.w	r9, r9
 80249b2:	f109 0101 	add.w	r1, r9, #1
 80249b6:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80249ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 80249be:	f80c 9c03 	strb.w	r9, [ip, #-3]
 80249c2:	7869      	ldrb	r1, [r5, #1]
 80249c4:	f898 9001 	ldrb.w	r9, [r8, #1]
 80249c8:	fb00 f101 	mul.w	r1, r0, r1
 80249cc:	9c08      	ldr	r4, [sp, #32]
 80249ce:	fb03 1109 	mla	r1, r3, r9, r1
 80249d2:	f894 9001 	ldrb.w	r9, [r4, #1]
 80249d6:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 80249d8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80249da:	fb02 1109 	mla	r1, r2, r9, r1
 80249de:	f89e a001 	ldrb.w	sl, [lr, #1]
 80249e2:	443c      	add	r4, r7
 80249e4:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
 80249e8:	942a      	str	r4, [sp, #168]	; 0xa8
 80249ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80249ec:	fb06 110a 	mla	r1, r6, sl, r1
 80249f0:	fb19 f904 	smulbb	r9, r9, r4
 80249f4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80249f6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80249fa:	fb01 9907 	mla	r9, r1, r7, r9
 80249fe:	fa1f f989 	uxth.w	r9, r9
 8024a02:	f109 0101 	add.w	r1, r9, #1
 8024a06:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8024a0a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024a0e:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8024a12:	78a9      	ldrb	r1, [r5, #2]
 8024a14:	f898 5002 	ldrb.w	r5, [r8, #2]
 8024a18:	fb00 f001 	mul.w	r0, r0, r1
 8024a1c:	fb03 0005 	mla	r0, r3, r5, r0
 8024a20:	9b08      	ldr	r3, [sp, #32]
 8024a22:	f89e 4002 	ldrb.w	r4, [lr, #2]
 8024a26:	789b      	ldrb	r3, [r3, #2]
 8024a28:	f81c ec01 	ldrb.w	lr, [ip, #-1]
 8024a2c:	fb02 0003 	mla	r0, r2, r3, r0
 8024a30:	fb06 0004 	mla	r0, r6, r4, r0
 8024a34:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024a36:	fb1e f404 	smulbb	r4, lr, r4
 8024a3a:	f3c0 2e07 	ubfx	lr, r0, #8, #8
 8024a3e:	fb0e 4e07 	mla	lr, lr, r7, r4
 8024a42:	fa1f fe8e 	uxth.w	lr, lr
 8024a46:	f10e 0301 	add.w	r3, lr, #1
 8024a4a:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8024a4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024a50:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024a54:	4563      	cmp	r3, ip
 8024a56:	f80c ec01 	strb.w	lr, [ip, #-1]
 8024a5a:	d034      	beq.n	8024ac6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8024a5c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024a5e:	f10c 0c03 	add.w	ip, ip, #3
 8024a62:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 8024a66:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024a68:	1419      	asrs	r1, r3, #16
 8024a6a:	ea4f 432b 	mov.w	r3, fp, asr #16
 8024a6e:	fb04 3101 	mla	r1, r4, r1, r3
 8024a72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024a74:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8024a76:	f812 a001 	ldrb.w	sl, [r2, r1]
 8024a7a:	4411      	add	r1, r2
 8024a7c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024a7e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8024a82:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024a86:	eb06 080a 	add.w	r8, r6, sl
 8024a8a:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8024a8e:	2b00      	cmp	r3, #0
 8024a90:	f47f af4f 	bne.w	8024932 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8024a94:	b182      	cbz	r2, 8024ab8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8024a96:	5d0c      	ldrb	r4, [r1, r4]
 8024a98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024a9a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024a9e:	1861      	adds	r1, r4, r1
 8024aa0:	9108      	str	r1, [sp, #32]
 8024aa2:	46c6      	mov	lr, r8
 8024aa4:	4645      	mov	r5, r8
 8024aa6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024aa8:	9f08      	ldr	r7, [sp, #32]
 8024aaa:	e756      	b.n	802495a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024aac:	46c6      	mov	lr, r8
 8024aae:	f8cd 8020 	str.w	r8, [sp, #32]
 8024ab2:	4631      	mov	r1, r6
 8024ab4:	4647      	mov	r7, r8
 8024ab6:	e750      	b.n	802495a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024ab8:	46c6      	mov	lr, r8
 8024aba:	f8cd 8020 	str.w	r8, [sp, #32]
 8024abe:	4645      	mov	r5, r8
 8024ac0:	4631      	mov	r1, r6
 8024ac2:	4647      	mov	r7, r8
 8024ac4:	e749      	b.n	802495a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024ac6:	469a      	mov	sl, r3
 8024ac8:	e6d0      	b.n	802486c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8024aca:	2a00      	cmp	r2, #0
 8024acc:	f77f aece 	ble.w	802486c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8024ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024ad4:	ea4f 432b 	mov.w	r3, fp, asr #16
 8024ad8:	1439      	asrs	r1, r7, #16
 8024ada:	4654      	mov	r4, sl
 8024adc:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8024ade:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8024ae2:	2b00      	cmp	r3, #0
 8024ae4:	f3cb 3003 	ubfx	r0, fp, #12, #4
 8024ae8:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8024aec:	db2f      	blt.n	8024b4e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024aee:	f106 3cff 	add.w	ip, r6, #4294967295
 8024af2:	4563      	cmp	r3, ip
 8024af4:	da2b      	bge.n	8024b4e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024af6:	2900      	cmp	r1, #0
 8024af8:	db29      	blt.n	8024b4e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024afa:	f10e 3cff 	add.w	ip, lr, #4294967295
 8024afe:	4561      	cmp	r1, ip
 8024b00:	da25      	bge.n	8024b4e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024b02:	fa0f fa86 	sxth.w	sl, r6
 8024b06:	fb01 330a 	mla	r3, r1, sl, r3
 8024b0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024b0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8024b0e:	f811 e003 	ldrb.w	lr, [r1, r3]
 8024b12:	440b      	add	r3, r1
 8024b14:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8024b18:	eb06 0c0e 	add.w	ip, r6, lr
 8024b1c:	2800      	cmp	r0, #0
 8024b1e:	d052      	beq.n	8024bc6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x426>
 8024b20:	7859      	ldrb	r1, [r3, #1]
 8024b22:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024b26:	1871      	adds	r1, r6, r1
 8024b28:	910c      	str	r1, [sp, #48]	; 0x30
 8024b2a:	2a00      	cmp	r2, #0
 8024b2c:	f000 80d5 	beq.w	8024cda <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53a>
 8024b30:	eb03 010a 	add.w	r1, r3, sl
 8024b34:	7849      	ldrb	r1, [r1, #1]
 8024b36:	f813 300a 	ldrb.w	r3, [r3, sl]
 8024b3a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024b3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024b42:	1871      	adds	r1, r6, r1
 8024b44:	18f3      	adds	r3, r6, r3
 8024b46:	9110      	str	r1, [sp, #64]	; 0x40
 8024b48:	9311      	str	r3, [sp, #68]	; 0x44
 8024b4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024b4c:	e042      	b.n	8024bd4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024b4e:	f113 0c01 	adds.w	ip, r3, #1
 8024b52:	d406      	bmi.n	8024b62 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024b54:	45b4      	cmp	ip, r6
 8024b56:	dc04      	bgt.n	8024b62 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024b58:	f111 0c01 	adds.w	ip, r1, #1
 8024b5c:	d401      	bmi.n	8024b62 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024b5e:	45f4      	cmp	ip, lr
 8024b60:	dd1f      	ble.n	8024ba2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8024b62:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024b64:	f1b8 0f00 	cmp.w	r8, #0
 8024b68:	f104 0403 	add.w	r4, r4, #3
 8024b6c:	44cb      	add	fp, r9
 8024b6e:	441f      	add	r7, r3
 8024b70:	dd07      	ble.n	8024b82 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8024b72:	e9d5 6e02 	ldrd	r6, lr, [r5, #8]
 8024b76:	f108 38ff 	add.w	r8, r8, #4294967295
 8024b7a:	ea4f 432b 	mov.w	r3, fp, asr #16
 8024b7e:	1439      	asrs	r1, r7, #16
 8024b80:	e7af      	b.n	8024ae2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024b82:	9b08      	ldr	r3, [sp, #32]
 8024b84:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8024b88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024b8c:	3301      	adds	r3, #1
 8024b8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024b92:	449a      	add	sl, r3
 8024b94:	e66a      	b.n	802486c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8024b96:	3a01      	subs	r2, #1
 8024b98:	f8dd e020 	ldr.w	lr, [sp, #32]
 8024b9c:	4690      	mov	r8, r2
 8024b9e:	9208      	str	r2, [sp, #32]
 8024ba0:	e79b      	b.n	8024ada <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8024ba2:	fa0f fe8e 	sxth.w	lr, lr
 8024ba6:	b236      	sxth	r6, r6
 8024ba8:	e9cd 6e00 	strd	r6, lr, [sp]
 8024bac:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8024bae:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8024bb2:	e9cd 2605 	strd	r2, r6, [sp, #20]
 8024bb6:	9302      	str	r3, [sp, #8]
 8024bb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024bbc:	4621      	mov	r1, r4
 8024bbe:	9814      	ldr	r0, [sp, #80]	; 0x50
 8024bc0:	f7ff fcd4 	bl	802456c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8024bc4:	e7cd      	b.n	8024b62 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024bc6:	2a00      	cmp	r2, #0
 8024bc8:	d17b      	bne.n	8024cc2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x522>
 8024bca:	4661      	mov	r1, ip
 8024bcc:	e9cd cc10 	strd	ip, ip, [sp, #64]	; 0x40
 8024bd0:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8024bd4:	b283      	uxth	r3, r0
 8024bd6:	b292      	uxth	r2, r2
 8024bd8:	fb03 f602 	mul.w	r6, r3, r2
 8024bdc:	011b      	lsls	r3, r3, #4
 8024bde:	7809      	ldrb	r1, [r1, #0]
 8024be0:	1b98      	subs	r0, r3, r6
 8024be2:	b280      	uxth	r0, r0
 8024be4:	9012      	str	r0, [sp, #72]	; 0x48
 8024be6:	fb00 f101 	mul.w	r1, r0, r1
 8024bea:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8024bee:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024bf0:	b292      	uxth	r2, r2
 8024bf2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8024bf6:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8024bfa:	1a9b      	subs	r3, r3, r2
 8024bfc:	b29b      	uxth	r3, r3
 8024bfe:	fb03 110e 	mla	r1, r3, lr, r1
 8024c02:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024c04:	f890 a000 	ldrb.w	sl, [r0]
 8024c08:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024c0a:	fb02 110a 	mla	r1, r2, sl, r1
 8024c0e:	f890 e000 	ldrb.w	lr, [r0]
 8024c12:	f894 a000 	ldrb.w	sl, [r4]
 8024c16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024c18:	fb06 110e 	mla	r1, r6, lr, r1
 8024c1c:	fb1a fa00 	smulbb	sl, sl, r0
 8024c20:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024c22:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024c26:	fb01 a100 	mla	r1, r1, r0, sl
 8024c2a:	b289      	uxth	r1, r1
 8024c2c:	f101 0e01 	add.w	lr, r1, #1
 8024c30:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 8024c34:	1209      	asrs	r1, r1, #8
 8024c36:	7021      	strb	r1, [r4, #0]
 8024c38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024c3a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8024c3c:	7849      	ldrb	r1, [r1, #1]
 8024c3e:	f89c e001 	ldrb.w	lr, [ip, #1]
 8024c42:	fb00 f101 	mul.w	r1, r0, r1
 8024c46:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024c48:	fb03 110e 	mla	r1, r3, lr, r1
 8024c4c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024c50:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024c52:	fb02 110a 	mla	r1, r2, sl, r1
 8024c56:	f890 e001 	ldrb.w	lr, [r0, #1]
 8024c5a:	f894 a001 	ldrb.w	sl, [r4, #1]
 8024c5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024c60:	fb06 110e 	mla	r1, r6, lr, r1
 8024c64:	fb1a fa00 	smulbb	sl, sl, r0
 8024c68:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024c6a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024c6e:	fb01 a100 	mla	r1, r1, r0, sl
 8024c72:	b289      	uxth	r1, r1
 8024c74:	f101 0e01 	add.w	lr, r1, #1
 8024c78:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 8024c7c:	1209      	asrs	r1, r1, #8
 8024c7e:	7061      	strb	r1, [r4, #1]
 8024c80:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024c82:	9812      	ldr	r0, [sp, #72]	; 0x48
 8024c84:	7889      	ldrb	r1, [r1, #2]
 8024c86:	f89c c002 	ldrb.w	ip, [ip, #2]
 8024c8a:	fb00 f001 	mul.w	r0, r0, r1
 8024c8e:	fb03 010c 	mla	r1, r3, ip, r0
 8024c92:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024c94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024c96:	7880      	ldrb	r0, [r0, #2]
 8024c98:	789b      	ldrb	r3, [r3, #2]
 8024c9a:	fb02 1100 	mla	r1, r2, r0, r1
 8024c9e:	78a2      	ldrb	r2, [r4, #2]
 8024ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024ca2:	fb06 1303 	mla	r3, r6, r3, r1
 8024ca6:	fb12 f200 	smulbb	r2, r2, r0
 8024caa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024cac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024cb0:	fb03 2300 	mla	r3, r3, r0, r2
 8024cb4:	b29b      	uxth	r3, r3
 8024cb6:	1c5a      	adds	r2, r3, #1
 8024cb8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024cbc:	121b      	asrs	r3, r3, #8
 8024cbe:	70a3      	strb	r3, [r4, #2]
 8024cc0:	e74f      	b.n	8024b62 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024cc2:	f813 300a 	ldrb.w	r3, [r3, sl]
 8024cc6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8024cca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024cce:	18f3      	adds	r3, r6, r3
 8024cd0:	9311      	str	r3, [sp, #68]	; 0x44
 8024cd2:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8024cd6:	4661      	mov	r1, ip
 8024cd8:	e77c      	b.n	8024bd4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024cda:	e9cd cc10 	strd	ip, ip, [sp, #64]	; 0x40
 8024cde:	e779      	b.n	8024bd4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024ce0:	f43f adc4 	beq.w	802486c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8024ce4:	1e65      	subs	r5, r4, #1
 8024ce6:	e602      	b.n	80248ee <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>

08024ce8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8024ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cec:	b083      	sub	sp, #12
 8024cee:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 8024cf2:	f891 9001 	ldrb.w	r9, [r1, #1]
 8024cf6:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8024cfa:	7888      	ldrb	r0, [r1, #2]
 8024cfc:	fb07 6c08 	mla	ip, r7, r8, r6
 8024d00:	ea4f 2909 	mov.w	r9, r9, lsl #8
 8024d04:	780c      	ldrb	r4, [r1, #0]
 8024d06:	ea49 4900 	orr.w	r9, r9, r0, lsl #16
 8024d0a:	ea49 0404 	orr.w	r4, r9, r4
 8024d0e:	2f00      	cmp	r7, #0
 8024d10:	9401      	str	r4, [sp, #4]
 8024d12:	eb02 090c 	add.w	r9, r2, ip
 8024d16:	f107 0e01 	add.w	lr, r7, #1
 8024d1a:	f9bd a034 	ldrsh.w	sl, [sp, #52]	; 0x34
 8024d1e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8024d22:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8024d26:	db01      	blt.n	8024d2c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x44>
 8024d28:	45ba      	cmp	sl, r7
 8024d2a:	dc6e      	bgt.n	8024e0a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x122>
 8024d2c:	fa5f fb84 	uxtb.w	fp, r4
 8024d30:	af01      	add	r7, sp, #4
 8024d32:	465a      	mov	r2, fp
 8024d34:	46bc      	mov	ip, r7
 8024d36:	f1be 0f00 	cmp.w	lr, #0
 8024d3a:	db01      	blt.n	8024d40 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x58>
 8024d3c:	45f2      	cmp	sl, lr
 8024d3e:	dc49      	bgt.n	8024dd4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xec>
 8024d40:	fa5f fa84 	uxtb.w	sl, r4
 8024d44:	ab01      	add	r3, sp, #4
 8024d46:	46d1      	mov	r9, sl
 8024d48:	469e      	mov	lr, r3
 8024d4a:	280f      	cmp	r0, #15
 8024d4c:	f200 8098 	bhi.w	8024e80 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8024d50:	2d0f      	cmp	r5, #15
 8024d52:	f200 8095 	bhi.w	8024e80 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8024d56:	b280      	uxth	r0, r0
 8024d58:	b2ad      	uxth	r5, r5
 8024d5a:	fb00 f805 	mul.w	r8, r0, r5
 8024d5e:	0104      	lsls	r4, r0, #4
 8024d60:	eba4 0608 	sub.w	r6, r4, r8
 8024d64:	b2b6      	uxth	r6, r6
 8024d66:	fb06 f002 	mul.w	r0, r6, r2
 8024d6a:	ebc8 1505 	rsb	r5, r8, r5, lsl #4
 8024d6e:	b2ad      	uxth	r5, r5
 8024d70:	f5c4 7280 	rsb	r2, r4, #256	; 0x100
 8024d74:	1b52      	subs	r2, r2, r5
 8024d76:	b292      	uxth	r2, r2
 8024d78:	fb02 000b 	mla	r0, r2, fp, r0
 8024d7c:	fb05 000a 	mla	r0, r5, sl, r0
 8024d80:	fb08 0009 	mla	r0, r8, r9, r0
 8024d84:	1200      	asrs	r0, r0, #8
 8024d86:	7008      	strb	r0, [r1, #0]
 8024d88:	f897 9001 	ldrb.w	r9, [r7, #1]
 8024d8c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8024d90:	fb06 f909 	mul.w	r9, r6, r9
 8024d94:	fb02 9904 	mla	r9, r2, r4, r9
 8024d98:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8024d9c:	7858      	ldrb	r0, [r3, #1]
 8024d9e:	fb05 9404 	mla	r4, r5, r4, r9
 8024da2:	fb08 4000 	mla	r0, r8, r0, r4
 8024da6:	1200      	asrs	r0, r0, #8
 8024da8:	7048      	strb	r0, [r1, #1]
 8024daa:	78bc      	ldrb	r4, [r7, #2]
 8024dac:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8024db0:	fb06 f604 	mul.w	r6, r6, r4
 8024db4:	fb02 6600 	mla	r6, r2, r0, r6
 8024db8:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8024dbc:	789b      	ldrb	r3, [r3, #2]
 8024dbe:	fb05 6500 	mla	r5, r5, r0, r6
 8024dc2:	fb08 5803 	mla	r8, r8, r3, r5
 8024dc6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024dca:	f881 8002 	strb.w	r8, [r1, #2]
 8024dce:	b003      	add	sp, #12
 8024dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024dd4:	b385      	cbz	r5, 8024e38 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x150>
 8024dd6:	2e00      	cmp	r6, #0
 8024dd8:	db40      	blt.n	8024e5c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x174>
 8024dda:	45b0      	cmp	r8, r6
 8024ddc:	dd3e      	ble.n	8024e5c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x174>
 8024dde:	f819 e008 	ldrb.w	lr, [r9, r8]
 8024de2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8024de6:	449e      	add	lr, r3
 8024de8:	3601      	adds	r6, #1
 8024dea:	f89e a000 	ldrb.w	sl, [lr]
 8024dee:	d431      	bmi.n	8024e54 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x16c>
 8024df0:	45b0      	cmp	r8, r6
 8024df2:	dd2f      	ble.n	8024e54 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x16c>
 8024df4:	2800      	cmp	r0, #0
 8024df6:	d03f      	beq.n	8024e78 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x190>
 8024df8:	44c8      	add	r8, r9
 8024dfa:	f898 4001 	ldrb.w	r4, [r8, #1]
 8024dfe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024e02:	f813 9004 	ldrb.w	r9, [r3, r4]
 8024e06:	4423      	add	r3, r4
 8024e08:	e79f      	b.n	8024d4a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x62>
 8024e0a:	2e00      	cmp	r6, #0
 8024e0c:	db01      	blt.n	8024e12 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8024e0e:	45b0      	cmp	r8, r6
 8024e10:	dc1a      	bgt.n	8024e48 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>
 8024e12:	f10d 0c04 	add.w	ip, sp, #4
 8024e16:	1c72      	adds	r2, r6, #1
 8024e18:	f89c b000 	ldrb.w	fp, [ip]
 8024e1c:	d409      	bmi.n	8024e32 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x14a>
 8024e1e:	4590      	cmp	r8, r2
 8024e20:	dd07      	ble.n	8024e32 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x14a>
 8024e22:	b1f0      	cbz	r0, 8024e62 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x17a>
 8024e24:	f899 7001 	ldrb.w	r7, [r9, #1]
 8024e28:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024e2c:	5dda      	ldrb	r2, [r3, r7]
 8024e2e:	441f      	add	r7, r3
 8024e30:	e781      	b.n	8024d36 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8024e32:	b2e2      	uxtb	r2, r4
 8024e34:	af01      	add	r7, sp, #4
 8024e36:	e77e      	b.n	8024d36 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8024e38:	280f      	cmp	r0, #15
 8024e3a:	fa5f fa84 	uxtb.w	sl, r4
 8024e3e:	d81f      	bhi.n	8024e80 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8024e40:	ab01      	add	r3, sp, #4
 8024e42:	469e      	mov	lr, r3
 8024e44:	46d1      	mov	r9, sl
 8024e46:	e786      	b.n	8024d56 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x6e>
 8024e48:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8024e4c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024e50:	449c      	add	ip, r3
 8024e52:	e7e0      	b.n	8024e16 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8024e54:	fa5f f984 	uxtb.w	r9, r4
 8024e58:	ab01      	add	r3, sp, #4
 8024e5a:	e776      	b.n	8024d4a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x62>
 8024e5c:	f10d 0e04 	add.w	lr, sp, #4
 8024e60:	e7c2      	b.n	8024de8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x100>
 8024e62:	f1be 0f00 	cmp.w	lr, #0
 8024e66:	b2e2      	uxtb	r2, r4
 8024e68:	af01      	add	r7, sp, #4
 8024e6a:	f6bf af67 	bge.w	8024d3c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x54>
 8024e6e:	463b      	mov	r3, r7
 8024e70:	46be      	mov	lr, r7
 8024e72:	4691      	mov	r9, r2
 8024e74:	4692      	mov	sl, r2
 8024e76:	e76b      	b.n	8024d50 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8024e78:	fa5f f984 	uxtb.w	r9, r4
 8024e7c:	ab01      	add	r3, sp, #4
 8024e7e:	e767      	b.n	8024d50 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8024e80:	4b03      	ldr	r3, [pc, #12]	; (8024e90 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1a8>)
 8024e82:	4a04      	ldr	r2, [pc, #16]	; (8024e94 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1ac>)
 8024e84:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8024e88:	4803      	ldr	r0, [pc, #12]	; (8024e98 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1b0>)
 8024e8a:	f003 f90f 	bl	80280ac <__assert_func>
 8024e8e:	bf00      	nop
 8024e90:	0802b324 	.word	0x0802b324
 8024e94:	0802b99c 	.word	0x0802b99c
 8024e98:	0802b4a8 	.word	0x0802b4a8

08024e9c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ea0:	ed2d 8b0a 	vpush	{d8-d12}
 8024ea4:	eeb0 aa40 	vmov.f32	s20, s0
 8024ea8:	eef0 9a60 	vmov.f32	s19, s1
 8024eac:	eeb0 9a41 	vmov.f32	s18, s2
 8024eb0:	eef0 8a62 	vmov.f32	s17, s5
 8024eb4:	eeb0 8a43 	vmov.f32	s16, s6
 8024eb8:	eeb0 ca44 	vmov.f32	s24, s8
 8024ebc:	eef0 ba64 	vmov.f32	s23, s9
 8024ec0:	eeb0 ba45 	vmov.f32	s22, s10
 8024ec4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8024ec8:	b093      	sub	sp, #76	; 0x4c
 8024eca:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8024ece:	e9dd 412b 	ldrd	r4, r1, [sp, #172]	; 0xac
 8024ed2:	e9dd 9b27 	ldrd	r9, fp, [sp, #156]	; 0x9c
 8024ed6:	9011      	str	r0, [sp, #68]	; 0x44
 8024ed8:	461a      	mov	r2, r3
 8024eda:	6860      	ldr	r0, [r4, #4]
 8024edc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024ede:	fb00 1803 	mla	r8, r0, r3, r1
 8024ee2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024ee4:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8024ee6:	6821      	ldr	r1, [r4, #0]
 8024ee8:	685b      	ldr	r3, [r3, #4]
 8024eea:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024eee:	6800      	ldr	r0, [r0, #0]
 8024ef0:	eb01 0a08 	add.w	sl, r1, r8
 8024ef4:	3304      	adds	r3, #4
 8024ef6:	f8dd 80a4 	ldr.w	r8, [sp, #164]	; 0xa4
 8024efa:	9009      	str	r0, [sp, #36]	; 0x24
 8024efc:	9307      	str	r3, [sp, #28]
 8024efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f00:	2b00      	cmp	r3, #0
 8024f02:	dc02      	bgt.n	8024f0a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024f04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024f06:	2b00      	cmp	r3, #0
 8024f08:	dd61      	ble.n	8024fce <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8024f0a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024f0c:	2a00      	cmp	r2, #0
 8024f0e:	e9d3 6e02 	ldrd	r6, lr, [r3, #8]
 8024f12:	b230      	sxth	r0, r6
 8024f14:	fa0f f78e 	sxth.w	r7, lr
 8024f18:	f340 81fe 	ble.w	8025318 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47c>
 8024f1c:	f8cd e018 	str.w	lr, [sp, #24]
 8024f20:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
 8024f24:	1e45      	subs	r5, r0, #1
 8024f26:	f107 3cff 	add.w	ip, r7, #4294967295
 8024f2a:	ea5f 4329 	movs.w	r3, r9, asr #16
 8024f2e:	ea4f 412b 	mov.w	r1, fp, asr #16
 8024f32:	d405      	bmi.n	8024f40 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8024f34:	42ab      	cmp	r3, r5
 8024f36:	da03      	bge.n	8024f40 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8024f38:	2900      	cmp	r1, #0
 8024f3a:	db01      	blt.n	8024f40 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8024f3c:	4561      	cmp	r1, ip
 8024f3e:	db4b      	blt.n	8024fd8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8024f40:	1c5c      	adds	r4, r3, #1
 8024f42:	d406      	bmi.n	8024f52 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024f44:	4284      	cmp	r4, r0
 8024f46:	dc04      	bgt.n	8024f52 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024f48:	1c4c      	adds	r4, r1, #1
 8024f4a:	d402      	bmi.n	8024f52 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024f4c:	42bc      	cmp	r4, r7
 8024f4e:	f340 815e 	ble.w	802520e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8024f52:	3a01      	subs	r2, #1
 8024f54:	44c1      	add	r9, r8
 8024f56:	44f3      	add	fp, lr
 8024f58:	f10a 0a03 	add.w	sl, sl, #3
 8024f5c:	d1e5      	bne.n	8024f2a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f60:	2b00      	cmp	r3, #0
 8024f62:	dd34      	ble.n	8024fce <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8024f64:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8024f68:	ee79 9aab 	vadd.f32	s19, s19, s23
 8024f6c:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8024f70:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8024f74:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8024f78:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024f7c:	ee76 6a68 	vsub.f32	s13, s12, s17
 8024f80:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8024f84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f88:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024f8c:	ee16 2a90 	vmov	r2, s13
 8024f90:	3b01      	subs	r3, #1
 8024f92:	930a      	str	r3, [sp, #40]	; 0x28
 8024f94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024f96:	fb92 f8f3 	sdiv	r8, r2, r3
 8024f9a:	ee17 2a10 	vmov	r2, s14
 8024f9e:	eeb0 7a48 	vmov.f32	s14, s16
 8024fa2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024fa6:	ee17 ba10 	vmov	fp, s14
 8024faa:	eeb0 7a68 	vmov.f32	s14, s17
 8024fae:	fb92 f3f3 	sdiv	r3, r2, r3
 8024fb2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024fb6:	932a      	str	r3, [sp, #168]	; 0xa8
 8024fb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024fba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024fbc:	ee17 9a10 	vmov	r9, s14
 8024fc0:	eeb0 8a67 	vmov.f32	s16, s15
 8024fc4:	eef0 8a46 	vmov.f32	s17, s12
 8024fc8:	bf18      	it	ne
 8024fca:	461a      	movne	r2, r3
 8024fcc:	e797      	b.n	8024efe <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8024fce:	b013      	add	sp, #76	; 0x4c
 8024fd0:	ecbd 8b0a 	vpop	{d8-d12}
 8024fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fd8:	f8dd e018 	ldr.w	lr, [sp, #24]
 8024fdc:	1e51      	subs	r1, r2, #1
 8024fde:	fb08 9301 	mla	r3, r8, r1, r9
 8024fe2:	141b      	asrs	r3, r3, #16
 8024fe4:	9106      	str	r1, [sp, #24]
 8024fe6:	f100 80aa 	bmi.w	802513e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8024fea:	42ab      	cmp	r3, r5
 8024fec:	f280 80a7 	bge.w	802513e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8024ff0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024ff2:	fb03 b301 	mla	r3, r3, r1, fp
 8024ff6:	141b      	asrs	r3, r3, #16
 8024ff8:	f100 80a1 	bmi.w	802513e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8024ffc:	3f01      	subs	r7, #1
 8024ffe:	42bb      	cmp	r3, r7
 8025000:	f280 809d 	bge.w	802513e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8025004:	2a00      	cmp	r2, #0
 8025006:	ddaa      	ble.n	8024f5e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8025008:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802500c:	eb0a 0302 	add.w	r3, sl, r2
 8025010:	9308      	str	r3, [sp, #32]
 8025012:	f10a 0a03 	add.w	sl, sl, #3
 8025016:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
 802501a:	e062      	b.n	80250e2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802501c:	784c      	ldrb	r4, [r1, #1]
 802501e:	180d      	adds	r5, r1, r0
 8025020:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025024:	4434      	add	r4, r6
 8025026:	2a00      	cmp	r2, #0
 8025028:	d07c      	beq.n	8025124 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802502a:	5c08      	ldrb	r0, [r1, r0]
 802502c:	786f      	ldrb	r7, [r5, #1]
 802502e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025032:	1981      	adds	r1, r0, r6
 8025034:	4608      	mov	r0, r1
 8025036:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802503a:	9106      	str	r1, [sp, #24]
 802503c:	4437      	add	r7, r6
 802503e:	b29b      	uxth	r3, r3
 8025040:	b292      	uxth	r2, r2
 8025042:	fb03 f502 	mul.w	r5, r3, r2
 8025046:	011b      	lsls	r3, r3, #4
 8025048:	f894 e000 	ldrb.w	lr, [r4]
 802504c:	1b59      	subs	r1, r3, r5
 802504e:	b289      	uxth	r1, r1
 8025050:	fb01 fe0e 	mul.w	lr, r1, lr
 8025054:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8025058:	b292      	uxth	r2, r2
 802505a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802505e:	f816 6008 	ldrb.w	r6, [r6, r8]
 8025062:	1a9b      	subs	r3, r3, r2
 8025064:	b29b      	uxth	r3, r3
 8025066:	fb03 e606 	mla	r6, r3, r6, lr
 802506a:	f890 e000 	ldrb.w	lr, [r0]
 802506e:	f897 8000 	ldrb.w	r8, [r7]
 8025072:	fb02 660e 	mla	r6, r2, lr, r6
 8025076:	fb05 6808 	mla	r8, r5, r8, r6
 802507a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802507e:	f80a 8c03 	strb.w	r8, [sl, #-3]
 8025082:	f894 8001 	ldrb.w	r8, [r4, #1]
 8025086:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8025088:	fb01 f608 	mul.w	r6, r1, r8
 802508c:	f89c e001 	ldrb.w	lr, [ip, #1]
 8025090:	4481      	add	r9, r0
 8025092:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8025094:	fb03 680e 	mla	r8, r3, lr, r6
 8025098:	4483      	add	fp, r0
 802509a:	9806      	ldr	r0, [sp, #24]
 802509c:	787e      	ldrb	r6, [r7, #1]
 802509e:	f890 e001 	ldrb.w	lr, [r0, #1]
 80250a2:	fb02 8e0e 	mla	lr, r2, lr, r8
 80250a6:	fb05 ee06 	mla	lr, r5, r6, lr
 80250aa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80250ae:	f80a ec02 	strb.w	lr, [sl, #-2]
 80250b2:	78a4      	ldrb	r4, [r4, #2]
 80250b4:	f89c 6002 	ldrb.w	r6, [ip, #2]
 80250b8:	fb01 f104 	mul.w	r1, r1, r4
 80250bc:	fb03 1106 	mla	r1, r3, r6, r1
 80250c0:	7883      	ldrb	r3, [r0, #2]
 80250c2:	78b8      	ldrb	r0, [r7, #2]
 80250c4:	fb02 1103 	mla	r1, r2, r3, r1
 80250c8:	fb05 1500 	mla	r5, r5, r0, r1
 80250cc:	9b08      	ldr	r3, [sp, #32]
 80250ce:	122d      	asrs	r5, r5, #8
 80250d0:	4553      	cmp	r3, sl
 80250d2:	f80a 5c01 	strb.w	r5, [sl, #-1]
 80250d6:	d030      	beq.n	802513a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80250d8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80250da:	f10a 0a03 	add.w	sl, sl, #3
 80250de:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80250e2:	ea4f 4329 	mov.w	r3, r9, asr #16
 80250e6:	ea4f 412b 	mov.w	r1, fp, asr #16
 80250ea:	fb00 3101 	mla	r1, r0, r1, r3
 80250ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80250f0:	9e07      	ldr	r6, [sp, #28]
 80250f2:	f812 8001 	ldrb.w	r8, [r2, r1]
 80250f6:	f3c9 3303 	ubfx	r3, r9, #12, #4
 80250fa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80250fe:	4411      	add	r1, r2
 8025100:	eb06 0c08 	add.w	ip, r6, r8
 8025104:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8025108:	2b00      	cmp	r3, #0
 802510a:	d187      	bne.n	802501c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x180>
 802510c:	b17a      	cbz	r2, 802512e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 802510e:	5c08      	ldrb	r0, [r1, r0]
 8025110:	9907      	ldr	r1, [sp, #28]
 8025112:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025116:	1841      	adds	r1, r0, r1
 8025118:	4667      	mov	r7, ip
 802511a:	9106      	str	r1, [sp, #24]
 802511c:	4664      	mov	r4, ip
 802511e:	9e07      	ldr	r6, [sp, #28]
 8025120:	4608      	mov	r0, r1
 8025122:	e78c      	b.n	802503e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8025124:	4667      	mov	r7, ip
 8025126:	f8cd c018 	str.w	ip, [sp, #24]
 802512a:	4660      	mov	r0, ip
 802512c:	e787      	b.n	802503e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802512e:	4667      	mov	r7, ip
 8025130:	f8cd c018 	str.w	ip, [sp, #24]
 8025134:	4664      	mov	r4, ip
 8025136:	4660      	mov	r0, ip
 8025138:	e781      	b.n	802503e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802513a:	469a      	mov	sl, r3
 802513c:	e70f      	b.n	8024f5e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802513e:	2a00      	cmp	r2, #0
 8025140:	f77f af0d 	ble.w	8024f5e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8025144:	9d06      	ldr	r5, [sp, #24]
 8025146:	ea4f 4329 	mov.w	r3, r9, asr #16
 802514a:	ea4f 412b 	mov.w	r1, fp, asr #16
 802514e:	4657      	mov	r7, sl
 8025150:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8025154:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8025156:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 802515a:	2b00      	cmp	r3, #0
 802515c:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8025160:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8025164:	db31      	blt.n	80251ca <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8025166:	f106 3cff 	add.w	ip, r6, #4294967295
 802516a:	4563      	cmp	r3, ip
 802516c:	da2d      	bge.n	80251ca <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802516e:	2900      	cmp	r1, #0
 8025170:	db2b      	blt.n	80251ca <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8025172:	f10e 3cff 	add.w	ip, lr, #4294967295
 8025176:	4561      	cmp	r1, ip
 8025178:	da27      	bge.n	80251ca <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802517a:	fa0f fc86 	sxth.w	ip, r6
 802517e:	fb01 330c 	mla	r3, r1, ip, r3
 8025182:	9e07      	ldr	r6, [sp, #28]
 8025184:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025186:	f811 e003 	ldrb.w	lr, [r1, r3]
 802518a:	440b      	add	r3, r1
 802518c:	4631      	mov	r1, r6
 802518e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8025192:	4471      	add	r1, lr
 8025194:	910e      	str	r1, [sp, #56]	; 0x38
 8025196:	2800      	cmp	r0, #0
 8025198:	d04f      	beq.n	802523a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 802519a:	7859      	ldrb	r1, [r3, #1]
 802519c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80251a0:	1871      	adds	r1, r6, r1
 80251a2:	9108      	str	r1, [sp, #32]
 80251a4:	2a00      	cmp	r2, #0
 80251a6:	f000 80b2 	beq.w	802530e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 80251aa:	eb03 010c 	add.w	r1, r3, ip
 80251ae:	f813 600c 	ldrb.w	r6, [r3, ip]
 80251b2:	7849      	ldrb	r1, [r1, #1]
 80251b4:	9b07      	ldr	r3, [sp, #28]
 80251b6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80251ba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80251be:	1859      	adds	r1, r3, r1
 80251c0:	18f3      	adds	r3, r6, r3
 80251c2:	910c      	str	r1, [sp, #48]	; 0x30
 80251c4:	930d      	str	r3, [sp, #52]	; 0x34
 80251c6:	9e08      	ldr	r6, [sp, #32]
 80251c8:	e03d      	b.n	8025246 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80251ca:	f113 0c01 	adds.w	ip, r3, #1
 80251ce:	d406      	bmi.n	80251de <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80251d0:	45b4      	cmp	ip, r6
 80251d2:	dc04      	bgt.n	80251de <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80251d4:	f111 0c01 	adds.w	ip, r1, #1
 80251d8:	d401      	bmi.n	80251de <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80251da:	45f4      	cmp	ip, lr
 80251dc:	dd1d      	ble.n	802521a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80251de:	2d00      	cmp	r5, #0
 80251e0:	f107 0703 	add.w	r7, r7, #3
 80251e4:	44c1      	add	r9, r8
 80251e6:	44d3      	add	fp, sl
 80251e8:	dd07      	ble.n	80251fa <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80251ea:	e9d4 6e02 	ldrd	r6, lr, [r4, #8]
 80251ee:	3d01      	subs	r5, #1
 80251f0:	ea4f 4329 	mov.w	r3, r9, asr #16
 80251f4:	ea4f 412b 	mov.w	r1, fp, asr #16
 80251f8:	e7af      	b.n	802515a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 80251fa:	9b06      	ldr	r3, [sp, #24]
 80251fc:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8025200:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025204:	3301      	adds	r3, #1
 8025206:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802520a:	449a      	add	sl, r3
 802520c:	e6a7      	b.n	8024f5e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802520e:	3a01      	subs	r2, #1
 8025210:	f8dd e018 	ldr.w	lr, [sp, #24]
 8025214:	4615      	mov	r5, r2
 8025216:	9206      	str	r2, [sp, #24]
 8025218:	e799      	b.n	802514e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 802521a:	fa0f fe8e 	sxth.w	lr, lr
 802521e:	b236      	sxth	r6, r6
 8025220:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8025224:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8025228:	e9cd 6e00 	strd	r6, lr, [sp]
 802522c:	9b07      	ldr	r3, [sp, #28]
 802522e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025230:	4639      	mov	r1, r7
 8025232:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025234:	f7ff fd58 	bl	8024ce8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8025238:	e7d1      	b.n	80251de <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802523a:	2a00      	cmp	r2, #0
 802523c:	d15b      	bne.n	80252f6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 802523e:	460e      	mov	r6, r1
 8025240:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 8025244:	9108      	str	r1, [sp, #32]
 8025246:	b283      	uxth	r3, r0
 8025248:	b292      	uxth	r2, r2
 802524a:	fb03 f002 	mul.w	r0, r3, r2
 802524e:	011b      	lsls	r3, r3, #4
 8025250:	f896 c000 	ldrb.w	ip, [r6]
 8025254:	1a19      	subs	r1, r3, r0
 8025256:	b289      	uxth	r1, r1
 8025258:	fb01 fc0c 	mul.w	ip, r1, ip
 802525c:	9e07      	ldr	r6, [sp, #28]
 802525e:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8025262:	b292      	uxth	r2, r2
 8025264:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8025268:	f816 e00e 	ldrb.w	lr, [r6, lr]
 802526c:	1a9b      	subs	r3, r3, r2
 802526e:	b29b      	uxth	r3, r3
 8025270:	fb03 cc0e 	mla	ip, r3, lr, ip
 8025274:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8025276:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 802527a:	f896 e000 	ldrb.w	lr, [r6]
 802527e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025280:	f896 c000 	ldrb.w	ip, [r6]
 8025284:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8025286:	fb02 6e0e 	mla	lr, r2, lr, r6
 802528a:	fb00 ec0c 	mla	ip, r0, ip, lr
 802528e:	9e08      	ldr	r6, [sp, #32]
 8025290:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025294:	f887 c000 	strb.w	ip, [r7]
 8025298:	f896 c001 	ldrb.w	ip, [r6, #1]
 802529c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 802529e:	fb01 fc0c 	mul.w	ip, r1, ip
 80252a2:	f896 e001 	ldrb.w	lr, [r6, #1]
 80252a6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80252a8:	fb03 ce0e 	mla	lr, r3, lr, ip
 80252ac:	f896 c001 	ldrb.w	ip, [r6, #1]
 80252b0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80252b2:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 80252b6:	f896 c001 	ldrb.w	ip, [r6, #1]
 80252ba:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80252bc:	fb02 ee06 	mla	lr, r2, r6, lr
 80252c0:	fb00 ec0c 	mla	ip, r0, ip, lr
 80252c4:	9e08      	ldr	r6, [sp, #32]
 80252c6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80252ca:	f887 c001 	strb.w	ip, [r7, #1]
 80252ce:	f896 c002 	ldrb.w	ip, [r6, #2]
 80252d2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80252d4:	fb01 f10c 	mul.w	r1, r1, ip
 80252d8:	f896 e002 	ldrb.w	lr, [r6, #2]
 80252dc:	fb03 110e 	mla	r1, r3, lr, r1
 80252e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80252e2:	789e      	ldrb	r6, [r3, #2]
 80252e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80252e6:	fb02 1206 	mla	r2, r2, r6, r1
 80252ea:	789b      	ldrb	r3, [r3, #2]
 80252ec:	fb00 2303 	mla	r3, r0, r3, r2
 80252f0:	121b      	asrs	r3, r3, #8
 80252f2:	70bb      	strb	r3, [r7, #2]
 80252f4:	e773      	b.n	80251de <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80252f6:	4631      	mov	r1, r6
 80252f8:	f813 600c 	ldrb.w	r6, [r3, ip]
 80252fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80252fe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025302:	1871      	adds	r1, r6, r1
 8025304:	930c      	str	r3, [sp, #48]	; 0x30
 8025306:	910d      	str	r1, [sp, #52]	; 0x34
 8025308:	9308      	str	r3, [sp, #32]
 802530a:	461e      	mov	r6, r3
 802530c:	e79b      	b.n	8025246 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802530e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8025310:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
 8025314:	460e      	mov	r6, r1
 8025316:	e796      	b.n	8025246 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025318:	f43f ae21 	beq.w	8024f5e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802531c:	1e45      	subs	r5, r0, #1
 802531e:	e65d      	b.n	8024fdc <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>

08025320 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8025320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025324:	b087      	sub	sp, #28
 8025326:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 802532a:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 802532e:	fb06 080c 	mla	r8, r6, ip, r0
 8025332:	2e00      	cmp	r6, #0
 8025334:	4696      	mov	lr, r2
 8025336:	eb02 0a08 	add.w	sl, r2, r8
 802533a:	f106 0b01 	add.w	fp, r6, #1
 802533e:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 8025342:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
 8025346:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 802534a:	f89d 4058 	ldrb.w	r4, [sp, #88]	; 0x58
 802534e:	db02      	blt.n	8025356 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8025350:	42b2      	cmp	r2, r6
 8025352:	f300 80f1 	bgt.w	8025538 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x218>
 8025356:	2600      	movs	r6, #0
 8025358:	46b1      	mov	r9, r6
 802535a:	46b0      	mov	r8, r6
 802535c:	46b6      	mov	lr, r6
 802535e:	f1bb 0f00 	cmp.w	fp, #0
 8025362:	db02      	blt.n	802536a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x4a>
 8025364:	455a      	cmp	r2, fp
 8025366:	f300 8101 	bgt.w	802556c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 802536a:	f04f 0c00 	mov.w	ip, #0
 802536e:	e9cd cc02 	strd	ip, ip, [sp, #8]
 8025372:	f8cd c004 	str.w	ip, [sp, #4]
 8025376:	2f0f      	cmp	r7, #15
 8025378:	f200 813a 	bhi.w	80255f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 802537c:	2d0f      	cmp	r5, #15
 802537e:	f200 8137 	bhi.w	80255f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 8025382:	b2a8      	uxth	r0, r5
 8025384:	b2bb      	uxth	r3, r7
 8025386:	fb00 f503 	mul.w	r5, r0, r3
 802538a:	9a01      	ldr	r2, [sp, #4]
 802538c:	ebc5 1000 	rsb	r0, r5, r0, lsl #4
 8025390:	b280      	uxth	r0, r0
 8025392:	fb00 fa02 	mul.w	sl, r0, r2
 8025396:	fb05 fb0c 	mul.w	fp, r5, ip
 802539a:	011b      	lsls	r3, r3, #4
 802539c:	1b5f      	subs	r7, r3, r5
 802539e:	b2bf      	uxth	r7, r7
 80253a0:	fb07 f206 	mul.w	r2, r7, r6
 80253a4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80253a8:	1a1b      	subs	r3, r3, r0
 80253aa:	b29b      	uxth	r3, r3
 80253ac:	fb03 2209 	mla	r2, r3, r9, r2
 80253b0:	4452      	add	r2, sl
 80253b2:	445a      	add	r2, fp
 80253b4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80253b8:	2a00      	cmp	r2, #0
 80253ba:	f000 80ba 	beq.w	8025532 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x212>
 80253be:	b2a4      	uxth	r4, r4
 80253c0:	fb02 f204 	mul.w	r2, r2, r4
 80253c4:	f102 0a01 	add.w	sl, r2, #1
 80253c8:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 80253cc:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80253d0:	9205      	str	r2, [sp, #20]
 80253d2:	f008 12ff 	and.w	r2, r8, #16711935	; 0xff00ff
 80253d6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80253da:	fb06 f202 	mul.w	r2, r6, r2
 80253de:	fb06 f608 	mul.w	r6, r6, r8
 80253e2:	f00e 1bff 	and.w	fp, lr, #16711935	; 0xff00ff
 80253e6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80253ea:	fb09 fb0b 	mul.w	fp, r9, fp
 80253ee:	fb09 fe0e 	mul.w	lr, r9, lr
 80253f2:	f506 7980 	add.w	r9, r6, #256	; 0x100
 80253f6:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 80253fa:	0a36      	lsrs	r6, r6, #8
 80253fc:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8025400:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025404:	fb07 f606 	mul.w	r6, r7, r6
 8025408:	9404      	str	r4, [sp, #16]
 802540a:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 802540e:	9c03      	ldr	r4, [sp, #12]
 8025410:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8025414:	4490      	add	r8, r2
 8025416:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802541a:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 802541e:	fb0c f202 	mul.w	r2, ip, r2
 8025422:	f404 497f 	and.w	r9, r4, #65280	; 0xff00
 8025426:	ea4f 2a1b 	mov.w	sl, fp, lsr #8
 802542a:	9c02      	ldr	r4, [sp, #8]
 802542c:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8025430:	fb0c fc09 	mul.w	ip, ip, r9
 8025434:	fb08 f807 	mul.w	r8, r8, r7
 8025438:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 802543c:	9603      	str	r6, [sp, #12]
 802543e:	f50e 7980 	add.w	r9, lr, #256	; 0x100
 8025442:	9e01      	ldr	r6, [sp, #4]
 8025444:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025448:	44d3      	add	fp, sl
 802544a:	eb09 2e1e 	add.w	lr, r9, lr, lsr #8
 802544e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025452:	f404 497f 	and.w	r9, r4, #65280	; 0xff00
 8025456:	fb06 f707 	mul.w	r7, r6, r7
 802545a:	fb06 f909 	mul.w	r9, r6, r9
 802545e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025462:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025466:	9e03      	ldr	r6, [sp, #12]
 8025468:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802546c:	ea4f 2a12 	mov.w	sl, r2, lsr #8
 8025470:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025474:	fb0b 8803 	mla	r8, fp, r3, r8
 8025478:	fb03 660e 	mla	r6, r3, lr, r6
 802547c:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8025480:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8025484:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8025488:	4492      	add	sl, r2
 802548a:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 802548e:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8025492:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8025496:	0a3a      	lsrs	r2, r7, #8
 8025498:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802549c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80254a0:	fb0b 8b05 	mla	fp, fp, r5, r8
 80254a4:	fb05 660e 	mla	r6, r5, lr, r6
 80254a8:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80254ac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80254b0:	f509 7580 	add.w	r5, r9, #256	; 0x100
 80254b4:	44b8      	add	r8, r7
 80254b6:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 80254ba:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80254be:	0a2d      	lsrs	r5, r5, #8
 80254c0:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80254c4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80254c8:	fb00 6505 	mla	r5, r0, r5, r6
 80254cc:	fb08 b800 	mla	r8, r8, r0, fp
 80254d0:	0a2d      	lsrs	r5, r5, #8
 80254d2:	ea4f 2018 	mov.w	r0, r8, lsr #8
 80254d6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80254da:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80254de:	4328      	orrs	r0, r5
 80254e0:	784b      	ldrb	r3, [r1, #1]
 80254e2:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80254e6:	9c04      	ldr	r4, [sp, #16]
 80254e8:	788d      	ldrb	r5, [r1, #2]
 80254ea:	fa5f fa80 	uxtb.w	sl, r0
 80254ee:	fb13 f602 	smulbb	r6, r3, r2
 80254f2:	fb15 f502 	smulbb	r5, r5, r2
 80254f6:	fb1a fa04 	smulbb	sl, sl, r4
 80254fa:	780f      	ldrb	r7, [r1, #0]
 80254fc:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8025500:	0c00      	lsrs	r0, r0, #16
 8025502:	fb0c 6304 	mla	r3, ip, r4, r6
 8025506:	fb07 a202 	mla	r2, r7, r2, sl
 802550a:	fb00 5404 	mla	r4, r0, r4, r5
 802550e:	b29b      	uxth	r3, r3
 8025510:	b292      	uxth	r2, r2
 8025512:	b2a4      	uxth	r4, r4
 8025514:	1c56      	adds	r6, r2, #1
 8025516:	1c5d      	adds	r5, r3, #1
 8025518:	1c60      	adds	r0, r4, #1
 802551a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802551e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8025522:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8025526:	1212      	asrs	r2, r2, #8
 8025528:	121b      	asrs	r3, r3, #8
 802552a:	1224      	asrs	r4, r4, #8
 802552c:	700a      	strb	r2, [r1, #0]
 802552e:	704b      	strb	r3, [r1, #1]
 8025530:	708c      	strb	r4, [r1, #2]
 8025532:	b007      	add	sp, #28
 8025534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025538:	2800      	cmp	r0, #0
 802553a:	db01      	blt.n	8025540 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x220>
 802553c:	4584      	cmp	ip, r0
 802553e:	dc3d      	bgt.n	80255bc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>
 8025540:	f04f 0900 	mov.w	r9, #0
 8025544:	46ce      	mov	lr, r9
 8025546:	1c46      	adds	r6, r0, #1
 8025548:	d42a      	bmi.n	80255a0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x280>
 802554a:	45b4      	cmp	ip, r6
 802554c:	dd28      	ble.n	80255a0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x280>
 802554e:	b137      	cbz	r7, 802555e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x23e>
 8025550:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8025554:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 8025558:	ea4f 6618 	mov.w	r6, r8, lsr #24
 802555c:	e6ff      	b.n	802535e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 802555e:	f1bb 0f00 	cmp.w	fp, #0
 8025562:	db3e      	blt.n	80255e2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2c2>
 8025564:	455a      	cmp	r2, fp
 8025566:	dd3c      	ble.n	80255e2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2c2>
 8025568:	463e      	mov	r6, r7
 802556a:	46b8      	mov	r8, r7
 802556c:	b1dd      	cbz	r5, 80255a6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x286>
 802556e:	2800      	cmp	r0, #0
 8025570:	db30      	blt.n	80255d4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2b4>
 8025572:	4584      	cmp	ip, r0
 8025574:	dd2e      	ble.n	80255d4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2b4>
 8025576:	f81a 200c 	ldrb.w	r2, [sl, ip]
 802557a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802557e:	9202      	str	r2, [sp, #8]
 8025580:	0e12      	lsrs	r2, r2, #24
 8025582:	9201      	str	r2, [sp, #4]
 8025584:	3001      	adds	r0, #1
 8025586:	d420      	bmi.n	80255ca <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2aa>
 8025588:	4584      	cmp	ip, r0
 802558a:	dd1e      	ble.n	80255ca <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2aa>
 802558c:	b337      	cbz	r7, 80255dc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2bc>
 802558e:	44d4      	add	ip, sl
 8025590:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8025594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025598:	9303      	str	r3, [sp, #12]
 802559a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802559e:	e6ea      	b.n	8025376 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x56>
 80255a0:	2600      	movs	r6, #0
 80255a2:	46b0      	mov	r8, r6
 80255a4:	e6db      	b.n	802535e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 80255a6:	2f0f      	cmp	r7, #15
 80255a8:	d822      	bhi.n	80255f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 80255aa:	b2bb      	uxth	r3, r7
 80255ac:	4628      	mov	r0, r5
 80255ae:	46ab      	mov	fp, r5
 80255b0:	46aa      	mov	sl, r5
 80255b2:	e9cd 5502 	strd	r5, r5, [sp, #8]
 80255b6:	46ac      	mov	ip, r5
 80255b8:	9501      	str	r5, [sp, #4]
 80255ba:	e6ee      	b.n	802539a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 80255bc:	f81e 6008 	ldrb.w	r6, [lr, r8]
 80255c0:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
 80255c4:	ea4f 691e 	mov.w	r9, lr, lsr #24
 80255c8:	e7bd      	b.n	8025546 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x226>
 80255ca:	f04f 0c00 	mov.w	ip, #0
 80255ce:	f8cd c00c 	str.w	ip, [sp, #12]
 80255d2:	e6d0      	b.n	8025376 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x56>
 80255d4:	2200      	movs	r2, #0
 80255d6:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80255da:	e7d3      	b.n	8025584 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 80255dc:	9703      	str	r7, [sp, #12]
 80255de:	46bc      	mov	ip, r7
 80255e0:	e6cc      	b.n	802537c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x5c>
 80255e2:	46b8      	mov	r8, r7
 80255e4:	e9cd 7702 	strd	r7, r7, [sp, #8]
 80255e8:	46bc      	mov	ip, r7
 80255ea:	9701      	str	r7, [sp, #4]
 80255ec:	463e      	mov	r6, r7
 80255ee:	e6c5      	b.n	802537c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x5c>
 80255f0:	4b03      	ldr	r3, [pc, #12]	; (8025600 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e0>)
 80255f2:	4a04      	ldr	r2, [pc, #16]	; (8025604 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e4>)
 80255f4:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80255f8:	4803      	ldr	r0, [pc, #12]	; (8025608 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e8>)
 80255fa:	f002 fd57 	bl	80280ac <__assert_func>
 80255fe:	bf00      	nop
 8025600:	0802b324 	.word	0x0802b324
 8025604:	0802b99c 	.word	0x0802b99c
 8025608:	0802b4a8 	.word	0x0802b4a8

0802560c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802560c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025610:	ed2d 8b08 	vpush	{d8-d11}
 8025614:	b0a9      	sub	sp, #164	; 0xa4
 8025616:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8025618:	9022      	str	r0, [sp, #136]	; 0x88
 802561a:	9114      	str	r1, [sp, #80]	; 0x50
 802561c:	6860      	ldr	r0, [r4, #4]
 802561e:	9940      	ldr	r1, [sp, #256]	; 0x100
 8025620:	9217      	str	r2, [sp, #92]	; 0x5c
 8025622:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8025624:	eeb0 aa40 	vmov.f32	s20, s0
 8025628:	fb00 1b02 	mla	fp, r0, r2, r1
 802562c:	6821      	ldr	r1, [r4, #0]
 802562e:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
 8025632:	eb01 0800 	add.w	r8, r1, r0
 8025636:	e9dd ab3b 	ldrd	sl, fp, [sp, #236]	; 0xec
 802563a:	eef0 9a60 	vmov.f32	s19, s1
 802563e:	eeb0 9a41 	vmov.f32	s18, s2
 8025642:	eef0 8a62 	vmov.f32	s17, s5
 8025646:	eeb0 8a43 	vmov.f32	s16, s6
 802564a:	eef0 ba44 	vmov.f32	s23, s8
 802564e:	eeb0 ba64 	vmov.f32	s22, s9
 8025652:	eef0 aa45 	vmov.f32	s21, s10
 8025656:	46c1      	mov	r9, r8
 8025658:	465f      	mov	r7, fp
 802565a:	9a42      	ldr	r2, [sp, #264]	; 0x108
 802565c:	9d42      	ldr	r5, [sp, #264]	; 0x108
 802565e:	6852      	ldr	r2, [r2, #4]
 8025660:	f89d 410c 	ldrb.w	r4, [sp, #268]	; 0x10c
 8025664:	3204      	adds	r2, #4
 8025666:	682d      	ldr	r5, [r5, #0]
 8025668:	920a      	str	r2, [sp, #40]	; 0x28
 802566a:	b2a2      	uxth	r2, r4
 802566c:	9423      	str	r4, [sp, #140]	; 0x8c
 802566e:	9511      	str	r5, [sp, #68]	; 0x44
 8025670:	9216      	str	r2, [sp, #88]	; 0x58
 8025672:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025674:	2a00      	cmp	r2, #0
 8025676:	dc02      	bgt.n	802567e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025678:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802567a:	2a00      	cmp	r2, #0
 802567c:	dd65      	ble.n	802574a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802567e:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8025680:	2b00      	cmp	r3, #0
 8025682:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8025686:	b235      	sxth	r5, r6
 8025688:	fa0f f88c 	sxth.w	r8, ip
 802568c:	f340 838b 	ble.w	8025da6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79a>
 8025690:	1e6c      	subs	r4, r5, #1
 8025692:	f108 3eff 	add.w	lr, r8, #4294967295
 8025696:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 802569a:	e9dd cb3d 	ldrd	ip, fp, [sp, #244]	; 0xf4
 802569e:	ea5f 422a 	movs.w	r2, sl, asr #16
 80256a2:	ea4f 4127 	mov.w	r1, r7, asr #16
 80256a6:	d405      	bmi.n	80256b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80256a8:	42a2      	cmp	r2, r4
 80256aa:	da03      	bge.n	80256b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80256ac:	2900      	cmp	r1, #0
 80256ae:	db01      	blt.n	80256b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80256b0:	4571      	cmp	r1, lr
 80256b2:	db4f      	blt.n	8025754 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80256b4:	1c50      	adds	r0, r2, #1
 80256b6:	d406      	bmi.n	80256c6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80256b8:	42a8      	cmp	r0, r5
 80256ba:	dc04      	bgt.n	80256c6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80256bc:	1c48      	adds	r0, r1, #1
 80256be:	d402      	bmi.n	80256c6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80256c0:	4540      	cmp	r0, r8
 80256c2:	f340 834c 	ble.w	8025d5e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 80256c6:	3b01      	subs	r3, #1
 80256c8:	44e2      	add	sl, ip
 80256ca:	445f      	add	r7, fp
 80256cc:	f109 0903 	add.w	r9, r9, #3
 80256d0:	d1e5      	bne.n	802569e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80256d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80256d4:	2b00      	cmp	r3, #0
 80256d6:	dd38      	ble.n	802574a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80256d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80256dc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80256e0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80256e4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80256e8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80256ec:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80256f0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80256f4:	ee76 6a68 	vsub.f32	s13, s12, s17
 80256f8:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80256fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025700:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8025704:	ee16 2a90 	vmov	r2, s13
 8025708:	3b01      	subs	r3, #1
 802570a:	9314      	str	r3, [sp, #80]	; 0x50
 802570c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802570e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025712:	ee17 2a10 	vmov	r2, s14
 8025716:	eeb0 7a48 	vmov.f32	s14, s16
 802571a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802571e:	ee17 7a10 	vmov	r7, s14
 8025722:	eeb0 7a68 	vmov.f32	s14, s17
 8025726:	933d      	str	r3, [sp, #244]	; 0xf4
 8025728:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802572a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802572e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025732:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8025734:	933e      	str	r3, [sp, #248]	; 0xf8
 8025736:	ee17 aa10 	vmov	sl, s14
 802573a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802573c:	eeb0 8a67 	vmov.f32	s16, s15
 8025740:	eef0 8a46 	vmov.f32	s17, s12
 8025744:	bf08      	it	eq
 8025746:	4613      	moveq	r3, r2
 8025748:	e793      	b.n	8025672 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802574a:	b029      	add	sp, #164	; 0xa4
 802574c:	ecbd 8b08 	vpop	{d8-d11}
 8025750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025754:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8025758:	983d      	ldr	r0, [sp, #244]	; 0xf4
 802575a:	1e59      	subs	r1, r3, #1
 802575c:	fb00 a201 	mla	r2, r0, r1, sl
 8025760:	1412      	asrs	r2, r2, #16
 8025762:	9109      	str	r1, [sp, #36]	; 0x24
 8025764:	f100 8168 	bmi.w	8025a38 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 8025768:	42a2      	cmp	r2, r4
 802576a:	f280 8165 	bge.w	8025a38 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 802576e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8025770:	fb02 7201 	mla	r2, r2, r1, r7
 8025774:	1412      	asrs	r2, r2, #16
 8025776:	f100 815f 	bmi.w	8025a38 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 802577a:	f108 31ff 	add.w	r1, r8, #4294967295
 802577e:	428a      	cmp	r2, r1
 8025780:	f280 815a 	bge.w	8025a38 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 8025784:	2b00      	cmp	r3, #0
 8025786:	dda4      	ble.n	80256d2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8025788:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802578c:	444b      	add	r3, r9
 802578e:	9310      	str	r3, [sp, #64]	; 0x40
 8025790:	f109 0303 	add.w	r3, r9, #3
 8025794:	9309      	str	r3, [sp, #36]	; 0x24
 8025796:	46d1      	mov	r9, sl
 8025798:	973c      	str	r7, [sp, #240]	; 0xf0
 802579a:	462e      	mov	r6, r5
 802579c:	463b      	mov	r3, r7
 802579e:	e12b      	b.n	80259f8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80257a0:	785f      	ldrb	r7, [r3, #1]
 80257a2:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 80257a6:	9712      	str	r7, [sp, #72]	; 0x48
 80257a8:	0e3f      	lsrs	r7, r7, #24
 80257aa:	970b      	str	r7, [sp, #44]	; 0x2c
 80257ac:	b16a      	cbz	r2, 80257ca <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80257ae:	199f      	adds	r7, r3, r6
 80257b0:	5d9b      	ldrb	r3, [r3, r6]
 80257b2:	4626      	mov	r6, r4
 80257b4:	787f      	ldrb	r7, [r7, #1]
 80257b6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80257ba:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
 80257be:	9313      	str	r3, [sp, #76]	; 0x4c
 80257c0:	9415      	str	r4, [sp, #84]	; 0x54
 80257c2:	0e1b      	lsrs	r3, r3, #24
 80257c4:	0e24      	lsrs	r4, r4, #24
 80257c6:	940d      	str	r4, [sp, #52]	; 0x34
 80257c8:	930c      	str	r3, [sp, #48]	; 0x30
 80257ca:	fa1f fc81 	uxth.w	ip, r1
 80257ce:	b292      	uxth	r2, r2
 80257d0:	fb0c f602 	mul.w	r6, ip, r2
 80257d4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80257d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80257da:	ebac 0706 	sub.w	r7, ip, r6
 80257de:	b2bf      	uxth	r7, r7
 80257e0:	fb07 f103 	mul.w	r1, r7, r3
 80257e4:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80257e8:	b292      	uxth	r2, r2
 80257ea:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80257ee:	1a9b      	subs	r3, r3, r2
 80257f0:	b29b      	uxth	r3, r3
 80257f2:	fb03 1100 	mla	r1, r3, r0, r1
 80257f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80257f8:	fb02 1104 	mla	r1, r2, r4, r1
 80257fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80257fe:	fb06 1104 	mla	r1, r6, r4, r1
 8025802:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025806:	2900      	cmp	r1, #0
 8025808:	f000 80e5 	beq.w	80259d6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802580c:	f005 14ff 	and.w	r4, r5, #16711935	; 0xff00ff
 8025810:	28ff      	cmp	r0, #255	; 0xff
 8025812:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025816:	940e      	str	r4, [sp, #56]	; 0x38
 8025818:	950f      	str	r5, [sp, #60]	; 0x3c
 802581a:	d01d      	beq.n	8025858 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 802581c:	fb04 fe00 	mul.w	lr, r4, r0
 8025820:	fb05 f800 	mul.w	r8, r5, r0
 8025824:	ea4f 251e 	mov.w	r5, lr, lsr #8
 8025828:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802582c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025830:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8025834:	44ae      	add	lr, r5
 8025836:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802583a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802583e:	0a00      	lsrs	r0, r0, #8
 8025840:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025844:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025848:	ea4e 0e00 	orr.w	lr, lr, r0
 802584c:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8025850:	900e      	str	r0, [sp, #56]	; 0x38
 8025852:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 8025856:	900f      	str	r0, [sp, #60]	; 0x3c
 8025858:	9812      	ldr	r0, [sp, #72]	; 0x48
 802585a:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 802585e:	f400 487f 	and.w	r8, r0, #65280	; 0xff00
 8025862:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025864:	28ff      	cmp	r0, #255	; 0xff
 8025866:	d01c      	beq.n	80258a2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8025868:	fb0e fe00 	mul.w	lr, lr, r0
 802586c:	fb08 f800 	mul.w	r8, r8, r0
 8025870:	ea4f 251e 	mov.w	r5, lr, lsr #8
 8025874:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025878:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802587c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8025880:	44ae      	add	lr, r5
 8025882:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8025886:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802588a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802588e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025892:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025896:	ea4e 0808 	orr.w	r8, lr, r8
 802589a:	f008 1eff 	and.w	lr, r8, #16711935	; 0xff00ff
 802589e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80258a2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80258a4:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 80258a8:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 80258ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80258ae:	28ff      	cmp	r0, #255	; 0xff
 80258b0:	d01c      	beq.n	80258ec <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80258b2:	fb0c fc00 	mul.w	ip, ip, r0
 80258b6:	fb0a fa00 	mul.w	sl, sl, r0
 80258ba:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80258be:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80258c2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80258c6:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80258ca:	44ac      	add	ip, r5
 80258cc:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80258d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80258d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80258d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80258dc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80258e0:	ea4c 0a0a 	orr.w	sl, ip, sl
 80258e4:	f00a 1cff 	and.w	ip, sl, #16711935	; 0xff00ff
 80258e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80258ec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80258ee:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80258f2:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80258f6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80258f8:	2cff      	cmp	r4, #255	; 0xff
 80258fa:	d019      	beq.n	8025930 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80258fc:	fb00 f004 	mul.w	r0, r0, r4
 8025900:	fb0b fb04 	mul.w	fp, fp, r4
 8025904:	0a05      	lsrs	r5, r0, #8
 8025906:	f005 14ff 	and.w	r4, r5, #16711935	; 0xff00ff
 802590a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802590e:	f50b 7580 	add.w	r5, fp, #256	; 0x100
 8025912:	eb05 251b 	add.w	r5, r5, fp, lsr #8
 8025916:	4420      	add	r0, r4
 8025918:	0a00      	lsrs	r0, r0, #8
 802591a:	0a2d      	lsrs	r5, r5, #8
 802591c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025920:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8025924:	ea40 0b0b 	orr.w	fp, r0, fp
 8025928:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 802592c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8025930:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025932:	fb0e fe07 	mul.w	lr, lr, r7
 8025936:	fb01 f104 	mul.w	r1, r1, r4
 802593a:	1c4d      	adds	r5, r1, #1
 802593c:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8025940:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025944:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025946:	fb08 f707 	mul.w	r7, r8, r7
 802594a:	fb05 ee03 	mla	lr, r5, r3, lr
 802594e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025950:	fb0c ee02 	mla	lr, ip, r2, lr
 8025954:	fb05 7703 	mla	r7, r5, r3, r7
 8025958:	fb0a 7702 	mla	r7, sl, r2, r7
 802595c:	fb00 ee06 	mla	lr, r0, r6, lr
 8025960:	fb0b 7706 	mla	r7, fp, r6, r7
 8025964:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025966:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802596a:	0a3f      	lsrs	r7, r7, #8
 802596c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025970:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025974:	ea4e 0307 	orr.w	r3, lr, r7
 8025978:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 802597c:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8025980:	b2c9      	uxtb	r1, r1
 8025982:	fa5f fc83 	uxtb.w	ip, r3
 8025986:	fb16 f601 	smulbb	r6, r6, r1
 802598a:	fb17 f701 	smulbb	r7, r7, r1
 802598e:	fb1c fc04 	smulbb	ip, ip, r4
 8025992:	f810 0c03 	ldrb.w	r0, [r0, #-3]
 8025996:	f3c3 2207 	ubfx	r2, r3, #8, #8
 802599a:	0c1b      	lsrs	r3, r3, #16
 802599c:	fb00 c101 	mla	r1, r0, r1, ip
 80259a0:	fb03 6304 	mla	r3, r3, r4, r6
 80259a4:	fb02 7204 	mla	r2, r2, r4, r7
 80259a8:	b289      	uxth	r1, r1
 80259aa:	b292      	uxth	r2, r2
 80259ac:	b29b      	uxth	r3, r3
 80259ae:	f101 0e01 	add.w	lr, r1, #1
 80259b2:	1c56      	adds	r6, r2, #1
 80259b4:	1c5d      	adds	r5, r3, #1
 80259b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80259b8:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 80259bc:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80259c0:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80259c4:	1209      	asrs	r1, r1, #8
 80259c6:	1212      	asrs	r2, r2, #8
 80259c8:	121b      	asrs	r3, r3, #8
 80259ca:	f800 1c03 	strb.w	r1, [r0, #-3]
 80259ce:	f800 2c02 	strb.w	r2, [r0, #-2]
 80259d2:	f800 3c01 	strb.w	r3, [r0, #-1]
 80259d6:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 80259d8:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80259da:	4499      	add	r9, r3
 80259dc:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80259de:	4413      	add	r3, r2
 80259e0:	933c      	str	r3, [sp, #240]	; 0xf0
 80259e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80259e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80259e6:	4293      	cmp	r3, r2
 80259e8:	d024      	beq.n	8025a34 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 80259ea:	4613      	mov	r3, r2
 80259ec:	3303      	adds	r3, #3
 80259ee:	9309      	str	r3, [sp, #36]	; 0x24
 80259f0:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80259f2:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 80259f6:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80259f8:	ea4f 4229 	mov.w	r2, r9, asr #16
 80259fc:	141b      	asrs	r3, r3, #16
 80259fe:	fb06 2303 	mla	r3, r6, r3, r2
 8025a02:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025a04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025a06:	5cc2      	ldrb	r2, [r0, r3]
 8025a08:	f3c9 3103 	ubfx	r1, r9, #12, #4
 8025a0c:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 8025a10:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8025a12:	4403      	add	r3, r0
 8025a14:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8025a18:	0e28      	lsrs	r0, r5, #24
 8025a1a:	2900      	cmp	r1, #0
 8025a1c:	f47f aec0 	bne.w	80257a0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x194>
 8025a20:	2a00      	cmp	r2, #0
 8025a22:	f43f aed2 	beq.w	80257ca <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025a26:	5d9b      	ldrb	r3, [r3, r6]
 8025a28:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8025a2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8025a2e:	0e1b      	lsrs	r3, r3, #24
 8025a30:	930c      	str	r3, [sp, #48]	; 0x30
 8025a32:	e6ca      	b.n	80257ca <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025a34:	4699      	mov	r9, r3
 8025a36:	e64c      	b.n	80256d2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8025a38:	2b00      	cmp	r3, #0
 8025a3a:	f77f ae4a 	ble.w	80256d2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8025a3e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8025a42:	ea4f 422a 	mov.w	r2, sl, asr #16
 8025a46:	1439      	asrs	r1, r7, #16
 8025a48:	2a00      	cmp	r2, #0
 8025a4a:	46cb      	mov	fp, r9
 8025a4c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8025a50:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8025a52:	e9dd 953d 	ldrd	r9, r5, [sp, #244]	; 0xf4
 8025a56:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8025a5a:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8025a5e:	f2c0 8154 	blt.w	8025d0a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8025a62:	1e73      	subs	r3, r6, #1
 8025a64:	429a      	cmp	r2, r3
 8025a66:	f280 8150 	bge.w	8025d0a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8025a6a:	2900      	cmp	r1, #0
 8025a6c:	f2c0 814d 	blt.w	8025d0a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8025a70:	f10c 33ff 	add.w	r3, ip, #4294967295
 8025a74:	4299      	cmp	r1, r3
 8025a76:	f280 8148 	bge.w	8025d0a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8025a7a:	b236      	sxth	r6, r6
 8025a7c:	fb01 2206 	mla	r2, r1, r6, r2
 8025a80:	9911      	ldr	r1, [sp, #68]	; 0x44
 8025a82:	5c8b      	ldrb	r3, [r1, r2]
 8025a84:	440a      	add	r2, r1
 8025a86:	9210      	str	r2, [sp, #64]	; 0x40
 8025a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025a8e:	930e      	str	r3, [sp, #56]	; 0x38
 8025a90:	0e1b      	lsrs	r3, r3, #24
 8025a92:	2800      	cmp	r0, #0
 8025a94:	f000 8169 	beq.w	8025d6a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8025a98:	9910      	ldr	r1, [sp, #64]	; 0x40
 8025a9a:	f891 c001 	ldrb.w	ip, [r1, #1]
 8025a9e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8025aa2:	9224      	str	r2, [sp, #144]	; 0x90
 8025aa4:	0e12      	lsrs	r2, r2, #24
 8025aa6:	9218      	str	r2, [sp, #96]	; 0x60
 8025aa8:	f1be 0f00 	cmp.w	lr, #0
 8025aac:	f040 816a 	bne.w	8025d84 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>
 8025ab0:	b280      	uxth	r0, r0
 8025ab2:	fa1f fc8e 	uxth.w	ip, lr
 8025ab6:	fb00 f20c 	mul.w	r2, r0, ip
 8025aba:	4611      	mov	r1, r2
 8025abc:	0106      	lsls	r6, r0, #4
 8025abe:	1ab0      	subs	r0, r6, r2
 8025ac0:	9210      	str	r2, [sp, #64]	; 0x40
 8025ac2:	b282      	uxth	r2, r0
 8025ac4:	9818      	ldr	r0, [sp, #96]	; 0x60
 8025ac6:	ebc1 1c0c 	rsb	ip, r1, ip, lsl #4
 8025aca:	fb02 f000 	mul.w	r0, r2, r0
 8025ace:	921b      	str	r2, [sp, #108]	; 0x6c
 8025ad0:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 8025ad4:	fa1f f28c 	uxth.w	r2, ip
 8025ad8:	1ab6      	subs	r6, r6, r2
 8025ada:	b2b6      	uxth	r6, r6
 8025adc:	fb06 0c03 	mla	ip, r6, r3, r0
 8025ae0:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025ae2:	921c      	str	r2, [sp, #112]	; 0x70
 8025ae4:	fb02 cc00 	mla	ip, r2, r0, ip
 8025ae8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8025aea:	961d      	str	r6, [sp, #116]	; 0x74
 8025aec:	fb01 cc02 	mla	ip, r1, r2, ip
 8025af0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8025af4:	f1bc 0f00 	cmp.w	ip, #0
 8025af8:	f000 80f1 	beq.w	8025cde <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8025afc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025afe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025b00:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025b04:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8025b08:	2bff      	cmp	r3, #255	; 0xff
 8025b0a:	921e      	str	r2, [sp, #120]	; 0x78
 8025b0c:	910e      	str	r1, [sp, #56]	; 0x38
 8025b0e:	d01b      	beq.n	8025b48 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8025b10:	fb01 f103 	mul.w	r1, r1, r3
 8025b14:	fb02 f203 	mul.w	r2, r2, r3
 8025b18:	460b      	mov	r3, r1
 8025b1a:	0a11      	lsrs	r1, r2, #8
 8025b1c:	f102 1601 	add.w	r6, r2, #65537	; 0x10001
 8025b20:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025b24:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8025b28:	4431      	add	r1, r6
 8025b2a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025b2e:	0a09      	lsrs	r1, r1, #8
 8025b30:	0a1b      	lsrs	r3, r3, #8
 8025b32:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025b36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025b3a:	430b      	orrs	r3, r1
 8025b3c:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8025b40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025b44:	921e      	str	r2, [sp, #120]	; 0x78
 8025b46:	930e      	str	r3, [sp, #56]	; 0x38
 8025b48:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8025b4a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025b4c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025b50:	29ff      	cmp	r1, #255	; 0xff
 8025b52:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025b56:	931f      	str	r3, [sp, #124]	; 0x7c
 8025b58:	9220      	str	r2, [sp, #128]	; 0x80
 8025b5a:	d01b      	beq.n	8025b94 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8025b5c:	fb03 f301 	mul.w	r3, r3, r1
 8025b60:	fb02 f201 	mul.w	r2, r2, r1
 8025b64:	0a19      	lsrs	r1, r3, #8
 8025b66:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8025b6a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025b6e:	f502 7380 	add.w	r3, r2, #256	; 0x100
 8025b72:	4401      	add	r1, r0
 8025b74:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025b78:	0a09      	lsrs	r1, r1, #8
 8025b7a:	0a1b      	lsrs	r3, r3, #8
 8025b7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025b80:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025b84:	ea41 0003 	orr.w	r0, r1, r3
 8025b88:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8025b8c:	931f      	str	r3, [sp, #124]	; 0x7c
 8025b8e:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8025b92:	9320      	str	r3, [sp, #128]	; 0x80
 8025b94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025b96:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8025b98:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8025b9c:	2aff      	cmp	r2, #255	; 0xff
 8025b9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025ba2:	9321      	str	r3, [sp, #132]	; 0x84
 8025ba4:	d01a      	beq.n	8025bdc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d0>
 8025ba6:	fb03 f302 	mul.w	r3, r3, r2
 8025baa:	4618      	mov	r0, r3
 8025bac:	fb06 f602 	mul.w	r6, r6, r2
 8025bb0:	0a31      	lsrs	r1, r6, #8
 8025bb2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025bb6:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8025bba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8025bbe:	440e      	add	r6, r1
 8025bc0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025bc4:	0a36      	lsrs	r6, r6, #8
 8025bc6:	0a1b      	lsrs	r3, r3, #8
 8025bc8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025bcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025bd0:	4333      	orrs	r3, r6
 8025bd2:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8025bd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025bda:	9321      	str	r3, [sp, #132]	; 0x84
 8025bdc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8025bde:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025be2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8025be6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8025be8:	2aff      	cmp	r2, #255	; 0xff
 8025bea:	d01a      	beq.n	8025c22 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x616>
 8025bec:	fb03 f302 	mul.w	r3, r3, r2
 8025bf0:	fb0e fe02 	mul.w	lr, lr, r2
 8025bf4:	0a19      	lsrs	r1, r3, #8
 8025bf6:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8025bfa:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025bfe:	f50e 7380 	add.w	r3, lr, #256	; 0x100
 8025c02:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8025c06:	4401      	add	r1, r0
 8025c08:	0a09      	lsrs	r1, r1, #8
 8025c0a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025c0e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025c12:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025c16:	ea41 0e0e 	orr.w	lr, r1, lr
 8025c1a:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8025c1e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025c22:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8025c24:	fb0c f102 	mul.w	r1, ip, r2
 8025c28:	1c48      	adds	r0, r1, #1
 8025c2a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8025c2e:	ea6f 2211 	mvn.w	r2, r1, lsr #8
 8025c32:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025c34:	9225      	str	r2, [sp, #148]	; 0x94
 8025c36:	4684      	mov	ip, r0
 8025c38:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8025c3a:	9820      	ldr	r0, [sp, #128]	; 0x80
 8025c3c:	fb0c fc02 	mul.w	ip, ip, r2
 8025c40:	fb00 f002 	mul.w	r0, r0, r2
 8025c44:	4601      	mov	r1, r0
 8025c46:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8025c48:	981e      	ldr	r0, [sp, #120]	; 0x78
 8025c4a:	fb00 cc02 	mla	ip, r0, r2, ip
 8025c4e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8025c50:	fb00 1102 	mla	r1, r0, r2, r1
 8025c54:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8025c56:	9821      	ldr	r0, [sp, #132]	; 0x84
 8025c58:	fb06 c602 	mla	r6, r6, r2, ip
 8025c5c:	fb00 1002 	mla	r0, r0, r2, r1
 8025c60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025c62:	f89d 1094 	ldrb.w	r1, [sp, #148]	; 0x94
 8025c66:	fb03 6602 	mla	r6, r3, r2, r6
 8025c6a:	fb0e 0302 	mla	r3, lr, r2, r0
 8025c6e:	0a32      	lsrs	r2, r6, #8
 8025c70:	0a1b      	lsrs	r3, r3, #8
 8025c72:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8025c76:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025c7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025c7e:	4313      	orrs	r3, r2
 8025c80:	fb16 f001 	smulbb	r0, r6, r1
 8025c84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8025c86:	fa5f fe83 	uxtb.w	lr, r3
 8025c8a:	fb1e fe02 	smulbb	lr, lr, r2
 8025c8e:	f89b c001 	ldrb.w	ip, [fp, #1]
 8025c92:	900e      	str	r0, [sp, #56]	; 0x38
 8025c94:	f89b 0000 	ldrb.w	r0, [fp]
 8025c98:	fb1c fc01 	smulbb	ip, ip, r1
 8025c9c:	fb00 e001 	mla	r0, r0, r1, lr
 8025ca0:	4611      	mov	r1, r2
 8025ca2:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8025ca6:	fb06 c202 	mla	r2, r6, r2, ip
 8025caa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8025cac:	0c1b      	lsrs	r3, r3, #16
 8025cae:	fb03 6301 	mla	r3, r3, r1, r6
 8025cb2:	b280      	uxth	r0, r0
 8025cb4:	b296      	uxth	r6, r2
 8025cb6:	b29b      	uxth	r3, r3
 8025cb8:	1c5a      	adds	r2, r3, #1
 8025cba:	f100 0c01 	add.w	ip, r0, #1
 8025cbe:	1c71      	adds	r1, r6, #1
 8025cc0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025cc4:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8025cc8:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8025ccc:	1200      	asrs	r0, r0, #8
 8025cce:	120a      	asrs	r2, r1, #8
 8025cd0:	121b      	asrs	r3, r3, #8
 8025cd2:	f88b 0000 	strb.w	r0, [fp]
 8025cd6:	f88b 2001 	strb.w	r2, [fp, #1]
 8025cda:	f88b 3002 	strb.w	r3, [fp, #2]
 8025cde:	f1b8 0f00 	cmp.w	r8, #0
 8025ce2:	f10b 0b03 	add.w	fp, fp, #3
 8025ce6:	44ca      	add	sl, r9
 8025ce8:	442f      	add	r7, r5
 8025cea:	dd2e      	ble.n	8025d4a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73e>
 8025cec:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8025cf0:	ea4f 422a 	mov.w	r2, sl, asr #16
 8025cf4:	2a00      	cmp	r2, #0
 8025cf6:	f108 38ff 	add.w	r8, r8, #4294967295
 8025cfa:	ea4f 4127 	mov.w	r1, r7, asr #16
 8025cfe:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8025d02:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8025d06:	f6bf aeac 	bge.w	8025a62 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8025d0a:	1c53      	adds	r3, r2, #1
 8025d0c:	d4e7      	bmi.n	8025cde <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8025d0e:	42b3      	cmp	r3, r6
 8025d10:	dce5      	bgt.n	8025cde <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8025d12:	1c4b      	adds	r3, r1, #1
 8025d14:	d4e3      	bmi.n	8025cde <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8025d16:	4563      	cmp	r3, ip
 8025d18:	dce1      	bgt.n	8025cde <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8025d1a:	fa0f f38c 	sxth.w	r3, ip
 8025d1e:	b236      	sxth	r6, r6
 8025d20:	e9cd 6300 	strd	r6, r3, [sp]
 8025d24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025d26:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8025d2a:	e9cd e305 	strd	lr, r3, [sp, #20]
 8025d2e:	9202      	str	r2, [sp, #8]
 8025d30:	4659      	mov	r1, fp
 8025d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025d34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025d36:	9822      	ldr	r0, [sp, #136]	; 0x88
 8025d38:	f7ff faf2 	bl	8025320 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8025d3c:	f1b8 0f00 	cmp.w	r8, #0
 8025d40:	f10b 0b03 	add.w	fp, fp, #3
 8025d44:	44ca      	add	sl, r9
 8025d46:	442f      	add	r7, r5
 8025d48:	dcd0      	bgt.n	8025cec <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8025d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d4c:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8025d50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025d54:	3301      	adds	r3, #1
 8025d56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025d5a:	4499      	add	r9, r3
 8025d5c:	e4b9      	b.n	80256d2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8025d5e:	3b01      	subs	r3, #1
 8025d60:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8025d64:	4698      	mov	r8, r3
 8025d66:	9309      	str	r3, [sp, #36]	; 0x24
 8025d68:	e66e      	b.n	8025a48 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8025d6a:	f1be 0f00 	cmp.w	lr, #0
 8025d6e:	f43f ae9f 	beq.w	8025ab0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8025d72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025d74:	5d92      	ldrb	r2, [r2, r6]
 8025d76:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8025d78:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8025d7c:	9226      	str	r2, [sp, #152]	; 0x98
 8025d7e:	0e12      	lsrs	r2, r2, #24
 8025d80:	9219      	str	r2, [sp, #100]	; 0x64
 8025d82:	e695      	b.n	8025ab0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8025d84:	eb01 0c06 	add.w	ip, r1, r6
 8025d88:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025d8c:	5d89      	ldrb	r1, [r1, r6]
 8025d8e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8025d90:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 8025d94:	f856 6021 	ldr.w	r6, [r6, r1, lsl #2]
 8025d98:	9227      	str	r2, [sp, #156]	; 0x9c
 8025d9a:	0e12      	lsrs	r2, r2, #24
 8025d9c:	921a      	str	r2, [sp, #104]	; 0x68
 8025d9e:	0e32      	lsrs	r2, r6, #24
 8025da0:	9626      	str	r6, [sp, #152]	; 0x98
 8025da2:	9219      	str	r2, [sp, #100]	; 0x64
 8025da4:	e684      	b.n	8025ab0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8025da6:	f43f ac94 	beq.w	80256d2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8025daa:	1e6c      	subs	r4, r5, #1
 8025dac:	e4d4      	b.n	8025758 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8025dae:	bf00      	nop

08025db0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8025db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025db4:	b089      	sub	sp, #36	; 0x24
 8025db6:	f9bd b048 	ldrsh.w	fp, [sp, #72]	; 0x48
 8025dba:	e9dd 4014 	ldrd	r4, r0, [sp, #80]	; 0x50
 8025dbe:	fb00 450b 	mla	r5, r0, fp, r4
 8025dc2:	2800      	cmp	r0, #0
 8025dc4:	4694      	mov	ip, r2
 8025dc6:	f100 0601 	add.w	r6, r0, #1
 8025dca:	442a      	add	r2, r5
 8025dcc:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8025dd0:	f89d a058 	ldrb.w	sl, [sp, #88]	; 0x58
 8025dd4:	f89d 705c 	ldrb.w	r7, [sp, #92]	; 0x5c
 8025dd8:	db02      	blt.n	8025de0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x30>
 8025dda:	4580      	cmp	r8, r0
 8025ddc:	f300 810a 	bgt.w	8025ff4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x244>
 8025de0:	f04f 0c00 	mov.w	ip, #0
 8025de4:	46e6      	mov	lr, ip
 8025de6:	4665      	mov	r5, ip
 8025de8:	46e1      	mov	r9, ip
 8025dea:	2e00      	cmp	r6, #0
 8025dec:	db02      	blt.n	8025df4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x44>
 8025dee:	45b0      	cmp	r8, r6
 8025df0:	f300 811a 	bgt.w	8026028 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x278>
 8025df4:	2400      	movs	r4, #0
 8025df6:	46a0      	mov	r8, r4
 8025df8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8025dfc:	f1ba 0f0f 	cmp.w	sl, #15
 8025e00:	f200 8158 	bhi.w	80260b4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8025e04:	2f0f      	cmp	r7, #15
 8025e06:	f200 8155 	bhi.w	80260b4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8025e0a:	b2ba      	uxth	r2, r7
 8025e0c:	fa1f f38a 	uxth.w	r3, sl
 8025e10:	fb02 f703 	mul.w	r7, r2, r3
 8025e14:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8025e18:	b292      	uxth	r2, r2
 8025e1a:	fb02 fa08 	mul.w	sl, r2, r8
 8025e1e:	fb07 fb04 	mul.w	fp, r7, r4
 8025e22:	011b      	lsls	r3, r3, #4
 8025e24:	1bd8      	subs	r0, r3, r7
 8025e26:	b280      	uxth	r0, r0
 8025e28:	9001      	str	r0, [sp, #4]
 8025e2a:	fb00 f00c 	mul.w	r0, r0, ip
 8025e2e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8025e32:	1a9b      	subs	r3, r3, r2
 8025e34:	b29b      	uxth	r3, r3
 8025e36:	fb03 000e 	mla	r0, r3, lr, r0
 8025e3a:	4450      	add	r0, sl
 8025e3c:	4458      	add	r0, fp
 8025e3e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025e42:	9002      	str	r0, [sp, #8]
 8025e44:	2800      	cmp	r0, #0
 8025e46:	f000 80d2 	beq.w	8025fee <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8025e4a:	f009 10ff 	and.w	r0, r9, #16711935	; 0xff00ff
 8025e4e:	f409 467f 	and.w	r6, r9, #65280	; 0xff00
 8025e52:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025e56:	9005      	str	r0, [sp, #20]
 8025e58:	9606      	str	r6, [sp, #24]
 8025e5a:	d01e      	beq.n	8025e9a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xea>
 8025e5c:	fb00 fb0e 	mul.w	fp, r0, lr
 8025e60:	fb06 fe0e 	mul.w	lr, r6, lr
 8025e64:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8025e68:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025e6c:	f50e 7a80 	add.w	sl, lr, #256	; 0x100
 8025e70:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025e74:	4483      	add	fp, r0
 8025e76:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8025e7a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025e7e:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 8025e82:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8025e86:	f40a 4e7f 	and.w	lr, sl, #65280	; 0xff00
 8025e8a:	ea4b 0e0e 	orr.w	lr, fp, lr
 8025e8e:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8025e92:	9005      	str	r0, [sp, #20]
 8025e94:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 8025e98:	9006      	str	r0, [sp, #24]
 8025e9a:	f405 407f 	and.w	r0, r5, #65280	; 0xff00
 8025e9e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025ea2:	f005 1aff 	and.w	sl, r5, #16711935	; 0xff00ff
 8025ea6:	9007      	str	r0, [sp, #28]
 8025ea8:	d01d      	beq.n	8025ee6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x136>
 8025eaa:	fb0a fa0c 	mul.w	sl, sl, ip
 8025eae:	fb00 f50c 	mul.w	r5, r0, ip
 8025eb2:	ea4f 201a 	mov.w	r0, sl, lsr #8
 8025eb6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025eba:	f505 7b80 	add.w	fp, r5, #256	; 0x100
 8025ebe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025ec2:	4482      	add	sl, r0
 8025ec4:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025ec8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ecc:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8025ed0:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8025ed4:	f40b 457f 	and.w	r5, fp, #65280	; 0xff00
 8025ed8:	ea4a 0505 	orr.w	r5, sl, r5
 8025edc:	f405 407f 	and.w	r0, r5, #65280	; 0xff00
 8025ee0:	f005 1aff 	and.w	sl, r5, #16711935	; 0xff00ff
 8025ee4:	9007      	str	r0, [sp, #28]
 8025ee6:	9803      	ldr	r0, [sp, #12]
 8025ee8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025eec:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8025ef0:	f400 467f 	and.w	r6, r0, #65280	; 0xff00
 8025ef4:	d01b      	beq.n	8025f2e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x17e>
 8025ef6:	fb09 f908 	mul.w	r9, r9, r8
 8025efa:	fb06 f608 	mul.w	r6, r6, r8
 8025efe:	ea4f 2c19 	mov.w	ip, r9, lsr #8
 8025f02:	f506 7080 	add.w	r0, r6, #256	; 0x100
 8025f06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f0a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8025f0e:	eb00 2616 	add.w	r6, r0, r6, lsr #8
 8025f12:	44e1      	add	r9, ip
 8025f14:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025f18:	0a30      	lsrs	r0, r6, #8
 8025f1a:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8025f1e:	f400 467f 	and.w	r6, r0, #65280	; 0xff00
 8025f22:	ea49 0606 	orr.w	r6, r9, r6
 8025f26:	f006 19ff 	and.w	r9, r6, #16711935	; 0xff00ff
 8025f2a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025f2e:	9d04      	ldr	r5, [sp, #16]
 8025f30:	2cff      	cmp	r4, #255	; 0xff
 8025f32:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8025f36:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8025f3a:	d01a      	beq.n	8025f72 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1c2>
 8025f3c:	fb00 f004 	mul.w	r0, r0, r4
 8025f40:	fb0e f404 	mul.w	r4, lr, r4
 8025f44:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8025f48:	f504 7e80 	add.w	lr, r4, #256	; 0x100
 8025f4c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f50:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8025f54:	eb0e 2414 	add.w	r4, lr, r4, lsr #8
 8025f58:	4460      	add	r0, ip
 8025f5a:	0a00      	lsrs	r0, r0, #8
 8025f5c:	0a24      	lsrs	r4, r4, #8
 8025f5e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025f62:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025f66:	ea40 0e0e 	orr.w	lr, r0, lr
 8025f6a:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8025f6e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025f72:	9c02      	ldr	r4, [sp, #8]
 8025f74:	9d07      	ldr	r5, [sp, #28]
 8025f76:	ea6f 0c04 	mvn.w	ip, r4
 8025f7a:	9c01      	ldr	r4, [sp, #4]
 8025f7c:	fa5f fc8c 	uxtb.w	ip, ip
 8025f80:	fb0a fb04 	mul.w	fp, sl, r4
 8025f84:	fb05 f504 	mul.w	r5, r5, r4
 8025f88:	9c05      	ldr	r4, [sp, #20]
 8025f8a:	fb04 bb03 	mla	fp, r4, r3, fp
 8025f8e:	9c06      	ldr	r4, [sp, #24]
 8025f90:	fb09 b902 	mla	r9, r9, r2, fp
 8025f94:	fb04 5303 	mla	r3, r4, r3, r5
 8025f98:	fb06 3602 	mla	r6, r6, r2, r3
 8025f9c:	780c      	ldrb	r4, [r1, #0]
 8025f9e:	fb00 9007 	mla	r0, r0, r7, r9
 8025fa2:	784a      	ldrb	r2, [r1, #1]
 8025fa4:	fb0e 6707 	mla	r7, lr, r7, r6
 8025fa8:	788b      	ldrb	r3, [r1, #2]
 8025faa:	fb02 f20c 	mul.w	r2, r2, ip
 8025fae:	fb03 f30c 	mul.w	r3, r3, ip
 8025fb2:	fb04 fc0c 	mul.w	ip, r4, ip
 8025fb6:	0a00      	lsrs	r0, r0, #8
 8025fb8:	0a3f      	lsrs	r7, r7, #8
 8025fba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025fbe:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025fc2:	4338      	orrs	r0, r7
 8025fc4:	1c54      	adds	r4, r2, #1
 8025fc6:	1c5f      	adds	r7, r3, #1
 8025fc8:	f10c 0601 	add.w	r6, ip, #1
 8025fcc:	0a05      	lsrs	r5, r0, #8
 8025fce:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8025fd2:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8025fd6:	0c04      	lsrs	r4, r0, #16
 8025fd8:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8025fdc:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8025fe0:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8025fe4:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8025fe8:	704a      	strb	r2, [r1, #1]
 8025fea:	708b      	strb	r3, [r1, #2]
 8025fec:	7008      	strb	r0, [r1, #0]
 8025fee:	b009      	add	sp, #36	; 0x24
 8025ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ff4:	2c00      	cmp	r4, #0
 8025ff6:	db01      	blt.n	8025ffc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24c>
 8025ff8:	45a3      	cmp	fp, r4
 8025ffa:	dc41      	bgt.n	8026080 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2d0>
 8025ffc:	f04f 0e00 	mov.w	lr, #0
 8026000:	46f1      	mov	r9, lr
 8026002:	1c60      	adds	r0, r4, #1
 8026004:	d42b      	bmi.n	802605e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ae>
 8026006:	4583      	cmp	fp, r0
 8026008:	dd29      	ble.n	802605e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ae>
 802600a:	f1ba 0f00 	cmp.w	sl, #0
 802600e:	d005      	beq.n	802601c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x26c>
 8026010:	7850      	ldrb	r0, [r2, #1]
 8026012:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8026016:	ea4f 6c15 	mov.w	ip, r5, lsr #24
 802601a:	e6e6      	b.n	8025dea <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3a>
 802601c:	2e00      	cmp	r6, #0
 802601e:	db42      	blt.n	80260a6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2f6>
 8026020:	45b0      	cmp	r8, r6
 8026022:	dd40      	ble.n	80260a6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2f6>
 8026024:	46d4      	mov	ip, sl
 8026026:	4655      	mov	r5, sl
 8026028:	b1ef      	cbz	r7, 8026066 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2b6>
 802602a:	2c00      	cmp	r4, #0
 802602c:	db32      	blt.n	8026094 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2e4>
 802602e:	45a3      	cmp	fp, r4
 8026030:	dd30      	ble.n	8026094 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2e4>
 8026032:	f812 000b 	ldrb.w	r0, [r2, fp]
 8026036:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 802603a:	9003      	str	r0, [sp, #12]
 802603c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8026040:	3401      	adds	r4, #1
 8026042:	d424      	bmi.n	802608e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2de>
 8026044:	45a3      	cmp	fp, r4
 8026046:	dd22      	ble.n	802608e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2de>
 8026048:	f1ba 0f00 	cmp.w	sl, #0
 802604c:	d027      	beq.n	802609e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ee>
 802604e:	4493      	add	fp, r2
 8026050:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8026054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8026058:	9304      	str	r3, [sp, #16]
 802605a:	0e1c      	lsrs	r4, r3, #24
 802605c:	e6ce      	b.n	8025dfc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x4c>
 802605e:	f04f 0c00 	mov.w	ip, #0
 8026062:	4665      	mov	r5, ip
 8026064:	e6c1      	b.n	8025dea <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3a>
 8026066:	f1ba 0f0f 	cmp.w	sl, #15
 802606a:	d823      	bhi.n	80260b4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 802606c:	fa1f f38a 	uxth.w	r3, sl
 8026070:	463a      	mov	r2, r7
 8026072:	46bb      	mov	fp, r7
 8026074:	46ba      	mov	sl, r7
 8026076:	e9cd 7703 	strd	r7, r7, [sp, #12]
 802607a:	463c      	mov	r4, r7
 802607c:	46b8      	mov	r8, r7
 802607e:	e6d0      	b.n	8025e22 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x72>
 8026080:	f81c 0005 	ldrb.w	r0, [ip, r5]
 8026084:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8026088:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 802608c:	e7b9      	b.n	8026002 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 802608e:	2400      	movs	r4, #0
 8026090:	9404      	str	r4, [sp, #16]
 8026092:	e6b3      	b.n	8025dfc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x4c>
 8026094:	f04f 0800 	mov.w	r8, #0
 8026098:	f8cd 800c 	str.w	r8, [sp, #12]
 802609c:	e7d0      	b.n	8026040 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>
 802609e:	f8cd a010 	str.w	sl, [sp, #16]
 80260a2:	4654      	mov	r4, sl
 80260a4:	e6ae      	b.n	8025e04 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x54>
 80260a6:	4655      	mov	r5, sl
 80260a8:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80260ac:	4654      	mov	r4, sl
 80260ae:	46d0      	mov	r8, sl
 80260b0:	46d4      	mov	ip, sl
 80260b2:	e6a7      	b.n	8025e04 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x54>
 80260b4:	4b03      	ldr	r3, [pc, #12]	; (80260c4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x314>)
 80260b6:	4a04      	ldr	r2, [pc, #16]	; (80260c8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x318>)
 80260b8:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80260bc:	4803      	ldr	r0, [pc, #12]	; (80260cc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x31c>)
 80260be:	f001 fff5 	bl	80280ac <__assert_func>
 80260c2:	bf00      	nop
 80260c4:	0802b324 	.word	0x0802b324
 80260c8:	0802b99c 	.word	0x0802b99c
 80260cc:	0802b4a8 	.word	0x0802b4a8

080260d0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80260d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80260d4:	ed2d 8b0a 	vpush	{d8-d12}
 80260d8:	eeb0 aa40 	vmov.f32	s20, s0
 80260dc:	eef0 9a60 	vmov.f32	s19, s1
 80260e0:	eeb0 9a41 	vmov.f32	s18, s2
 80260e4:	eef0 8a62 	vmov.f32	s17, s5
 80260e8:	eeb0 8a43 	vmov.f32	s16, s6
 80260ec:	eeb0 ca44 	vmov.f32	s24, s8
 80260f0:	eef0 ba64 	vmov.f32	s23, s9
 80260f4:	eeb0 ba45 	vmov.f32	s22, s10
 80260f8:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80260fc:	b0a3      	sub	sp, #140	; 0x8c
 80260fe:	901e      	str	r0, [sp, #120]	; 0x78
 8026100:	9111      	str	r1, [sp, #68]	; 0x44
 8026102:	9213      	str	r2, [sp, #76]	; 0x4c
 8026104:	e9dd 413b 	ldrd	r4, r1, [sp, #236]	; 0xec
 8026108:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 802610a:	6860      	ldr	r0, [r4, #4]
 802610c:	fb00 1b02 	mla	fp, r0, r2, r1
 8026110:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8026112:	6821      	ldr	r1, [r4, #0]
 8026114:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8026116:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
 802611a:	6852      	ldr	r2, [r2, #4]
 802611c:	eb01 0800 	add.w	r8, r1, r0
 8026120:	6824      	ldr	r4, [r4, #0]
 8026122:	e9dd 7b37 	ldrd	r7, fp, [sp, #220]	; 0xdc
 8026126:	3204      	adds	r2, #4
 8026128:	46c3      	mov	fp, r8
 802612a:	46b8      	mov	r8, r7
 802612c:	9f38      	ldr	r7, [sp, #224]	; 0xe0
 802612e:	940e      	str	r4, [sp, #56]	; 0x38
 8026130:	920a      	str	r2, [sp, #40]	; 0x28
 8026132:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026134:	2a00      	cmp	r2, #0
 8026136:	dc02      	bgt.n	802613e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026138:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802613a:	2a00      	cmp	r2, #0
 802613c:	dd63      	ble.n	8026206 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 802613e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8026140:	2b00      	cmp	r3, #0
 8026142:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8026146:	b234      	sxth	r4, r6
 8026148:	fa0f f98c 	sxth.w	r9, ip
 802614c:	f340 835f 	ble.w	802680e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73e>
 8026150:	1e65      	subs	r5, r4, #1
 8026152:	f109 3eff 	add.w	lr, r9, #4294967295
 8026156:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 802615a:	e9dd ca39 	ldrd	ip, sl, [sp, #228]	; 0xe4
 802615e:	ea5f 4228 	movs.w	r2, r8, asr #16
 8026162:	ea4f 4127 	mov.w	r1, r7, asr #16
 8026166:	d405      	bmi.n	8026174 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8026168:	42aa      	cmp	r2, r5
 802616a:	da03      	bge.n	8026174 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802616c:	2900      	cmp	r1, #0
 802616e:	db01      	blt.n	8026174 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8026170:	4571      	cmp	r1, lr
 8026172:	db4d      	blt.n	8026210 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8026174:	1c50      	adds	r0, r2, #1
 8026176:	d406      	bmi.n	8026186 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8026178:	42a0      	cmp	r0, r4
 802617a:	dc04      	bgt.n	8026186 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802617c:	1c48      	adds	r0, r1, #1
 802617e:	d402      	bmi.n	8026186 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8026180:	4548      	cmp	r0, r9
 8026182:	f340 831e 	ble.w	80267c2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8026186:	3b01      	subs	r3, #1
 8026188:	44e0      	add	r8, ip
 802618a:	4457      	add	r7, sl
 802618c:	f10b 0b03 	add.w	fp, fp, #3
 8026190:	d1e5      	bne.n	802615e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026192:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026194:	2b00      	cmp	r3, #0
 8026196:	dd36      	ble.n	8026206 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8026198:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802619c:	ee79 9aab 	vadd.f32	s19, s19, s23
 80261a0:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80261a4:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80261a8:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80261ac:	ee69 7a27 	vmul.f32	s15, s18, s15
 80261b0:	ee76 6a68 	vsub.f32	s13, s12, s17
 80261b4:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80261b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80261bc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80261c0:	ee16 2a90 	vmov	r2, s13
 80261c4:	3b01      	subs	r3, #1
 80261c6:	9311      	str	r3, [sp, #68]	; 0x44
 80261c8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80261ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80261ce:	ee17 2a10 	vmov	r2, s14
 80261d2:	eeb0 7a48 	vmov.f32	s14, s16
 80261d6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80261da:	ee17 7a10 	vmov	r7, s14
 80261de:	eeb0 7a68 	vmov.f32	s14, s17
 80261e2:	9339      	str	r3, [sp, #228]	; 0xe4
 80261e4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80261e6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80261ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80261ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80261f0:	933a      	str	r3, [sp, #232]	; 0xe8
 80261f2:	ee17 8a10 	vmov	r8, s14
 80261f6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80261f8:	eeb0 8a67 	vmov.f32	s16, s15
 80261fc:	eef0 8a46 	vmov.f32	s17, s12
 8026200:	bf08      	it	eq
 8026202:	4613      	moveq	r3, r2
 8026204:	e795      	b.n	8026132 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8026206:	b023      	add	sp, #140	; 0x8c
 8026208:	ecbd 8b0a 	vpop	{d8-d12}
 802620c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026210:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8026214:	9839      	ldr	r0, [sp, #228]	; 0xe4
 8026216:	1e59      	subs	r1, r3, #1
 8026218:	fb00 8201 	mla	r2, r0, r1, r8
 802621c:	1412      	asrs	r2, r2, #16
 802621e:	9109      	str	r1, [sp, #36]	; 0x24
 8026220:	f100 8151 	bmi.w	80264c6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8026224:	42aa      	cmp	r2, r5
 8026226:	f280 814e 	bge.w	80264c6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 802622a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 802622c:	fb02 7201 	mla	r2, r2, r1, r7
 8026230:	1412      	asrs	r2, r2, #16
 8026232:	f100 8148 	bmi.w	80264c6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8026236:	f109 31ff 	add.w	r1, r9, #4294967295
 802623a:	428a      	cmp	r2, r1
 802623c:	f280 8143 	bge.w	80264c6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8026240:	2b00      	cmp	r3, #0
 8026242:	dda6      	ble.n	8026192 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8026244:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026248:	445b      	add	r3, fp
 802624a:	930d      	str	r3, [sp, #52]	; 0x34
 802624c:	f10b 0c03 	add.w	ip, fp, #3
 8026250:	46c1      	mov	r9, r8
 8026252:	9738      	str	r7, [sp, #224]	; 0xe0
 8026254:	4621      	mov	r1, r4
 8026256:	463b      	mov	r3, r7
 8026258:	e114      	b.n	8026484 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802625a:	f893 e001 	ldrb.w	lr, [r3, #1]
 802625e:	f856 502e 	ldr.w	r5, [r6, lr, lsl #2]
 8026262:	950f      	str	r5, [sp, #60]	; 0x3c
 8026264:	0e2d      	lsrs	r5, r5, #24
 8026266:	9506      	str	r5, [sp, #24]
 8026268:	b162      	cbz	r2, 8026284 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802626a:	185d      	adds	r5, r3, r1
 802626c:	786d      	ldrb	r5, [r5, #1]
 802626e:	5c5b      	ldrb	r3, [r3, r1]
 8026270:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8026274:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026278:	9112      	str	r1, [sp, #72]	; 0x48
 802627a:	9310      	str	r3, [sp, #64]	; 0x40
 802627c:	0e09      	lsrs	r1, r1, #24
 802627e:	0e1b      	lsrs	r3, r3, #24
 8026280:	9108      	str	r1, [sp, #32]
 8026282:	9307      	str	r3, [sp, #28]
 8026284:	b2a4      	uxth	r4, r4
 8026286:	b292      	uxth	r2, r2
 8026288:	fb04 f502 	mul.w	r5, r4, r2
 802628c:	0124      	lsls	r4, r4, #4
 802628e:	1b66      	subs	r6, r4, r5
 8026290:	9b06      	ldr	r3, [sp, #24]
 8026292:	b2b6      	uxth	r6, r6
 8026294:	fb06 f103 	mul.w	r1, r6, r3
 8026298:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 802629c:	b292      	uxth	r2, r2
 802629e:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 80262a2:	1a9b      	subs	r3, r3, r2
 80262a4:	b29b      	uxth	r3, r3
 80262a6:	fb03 1100 	mla	r1, r3, r0, r1
 80262aa:	9c07      	ldr	r4, [sp, #28]
 80262ac:	fb02 1104 	mla	r1, r2, r4, r1
 80262b0:	9c08      	ldr	r4, [sp, #32]
 80262b2:	fb05 1104 	mla	r1, r5, r4, r1
 80262b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80262ba:	9109      	str	r1, [sp, #36]	; 0x24
 80262bc:	2900      	cmp	r1, #0
 80262be:	f000 80d2 	beq.w	8026466 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 80262c2:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 80262c6:	f407 417f 	and.w	r1, r7, #65280	; 0xff00
 80262ca:	28ff      	cmp	r0, #255	; 0xff
 80262cc:	940b      	str	r4, [sp, #44]	; 0x2c
 80262ce:	910c      	str	r1, [sp, #48]	; 0x30
 80262d0:	d01b      	beq.n	802630a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80262d2:	fb04 f400 	mul.w	r4, r4, r0
 80262d6:	4627      	mov	r7, r4
 80262d8:	fb01 fe00 	mul.w	lr, r1, r0
 80262dc:	0a24      	lsrs	r4, r4, #8
 80262de:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80262e2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80262e6:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 80262ea:	4427      	add	r7, r4
 80262ec:	eb00 201e 	add.w	r0, r0, lr, lsr #8
 80262f0:	0a3f      	lsrs	r7, r7, #8
 80262f2:	0a00      	lsrs	r0, r0, #8
 80262f4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80262f8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80262fc:	4307      	orrs	r7, r0
 80262fe:	f007 11ff 	and.w	r1, r7, #16711935	; 0xff00ff
 8026302:	910b      	str	r1, [sp, #44]	; 0x2c
 8026304:	f407 417f 	and.w	r1, r7, #65280	; 0xff00
 8026308:	910c      	str	r1, [sp, #48]	; 0x30
 802630a:	9806      	ldr	r0, [sp, #24]
 802630c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802630e:	28ff      	cmp	r0, #255	; 0xff
 8026310:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8026314:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8026318:	d01a      	beq.n	8026350 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 802631a:	fb07 f700 	mul.w	r7, r7, r0
 802631e:	fb0e fe00 	mul.w	lr, lr, r0
 8026322:	0a3c      	lsrs	r4, r7, #8
 8026324:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026328:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802632c:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 8026330:	4427      	add	r7, r4
 8026332:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8026336:	0a3f      	lsrs	r7, r7, #8
 8026338:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802633c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026340:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026344:	ea47 0e0e 	orr.w	lr, r7, lr
 8026348:	f00e 17ff 	and.w	r7, lr, #16711935	; 0xff00ff
 802634c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026350:	9c07      	ldr	r4, [sp, #28]
 8026352:	9910      	ldr	r1, [sp, #64]	; 0x40
 8026354:	2cff      	cmp	r4, #255	; 0xff
 8026356:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 802635a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802635e:	d01b      	beq.n	8026398 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8026360:	fb00 f004 	mul.w	r0, r0, r4
 8026364:	fb0a fa04 	mul.w	sl, sl, r4
 8026368:	ea4f 2810 	mov.w	r8, r0, lsr #8
 802636c:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8026370:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026374:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8026378:	4440      	add	r0, r8
 802637a:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 802637e:	0a00      	lsrs	r0, r0, #8
 8026380:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026384:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026388:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802638c:	ea40 0a0a 	orr.w	sl, r0, sl
 8026390:	f00a 10ff 	and.w	r0, sl, #16711935	; 0xff00ff
 8026394:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026398:	9c08      	ldr	r4, [sp, #32]
 802639a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802639c:	2cff      	cmp	r4, #255	; 0xff
 802639e:	f001 18ff 	and.w	r8, r1, #16711935	; 0xff00ff
 80263a2:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 80263a6:	d01b      	beq.n	80263e0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80263a8:	fb08 f804 	mul.w	r8, r8, r4
 80263ac:	fb0b fb04 	mul.w	fp, fp, r4
 80263b0:	ea4f 2418 	mov.w	r4, r8, lsr #8
 80263b4:	f004 11ff 	and.w	r1, r4, #16711935	; 0xff00ff
 80263b8:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80263bc:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 80263c0:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 80263c4:	4488      	add	r8, r1
 80263c6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80263ca:	0a24      	lsrs	r4, r4, #8
 80263cc:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80263d0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80263d4:	ea48 0b0b 	orr.w	fp, r8, fp
 80263d8:	f00b 18ff 	and.w	r8, fp, #16711935	; 0xff00ff
 80263dc:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80263e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80263e2:	fb07 f706 	mul.w	r7, r7, r6
 80263e6:	43c9      	mvns	r1, r1
 80263e8:	fb0e f606 	mul.w	r6, lr, r6
 80263ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80263ee:	f81c ec02 	ldrb.w	lr, [ip, #-2]
 80263f2:	fb04 7703 	mla	r7, r4, r3, r7
 80263f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80263f8:	fb00 7702 	mla	r7, r0, r2, r7
 80263fc:	fb04 6603 	mla	r6, r4, r3, r6
 8026400:	fb0a 6602 	mla	r6, sl, r2, r6
 8026404:	f81c 3c03 	ldrb.w	r3, [ip, #-3]
 8026408:	fb0b 6b05 	mla	fp, fp, r5, r6
 802640c:	fb08 7805 	mla	r8, r8, r5, r7
 8026410:	f81c 4c01 	ldrb.w	r4, [ip, #-1]
 8026414:	b2c9      	uxtb	r1, r1
 8026416:	fb0e fe01 	mul.w	lr, lr, r1
 802641a:	fb04 f401 	mul.w	r4, r4, r1
 802641e:	fb03 f101 	mul.w	r1, r3, r1
 8026422:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026426:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802642a:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802642e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8026432:	ea48 030b 	orr.w	r3, r8, fp
 8026436:	f10e 0201 	add.w	r2, lr, #1
 802643a:	1c66      	adds	r6, r4, #1
 802643c:	1c4d      	adds	r5, r1, #1
 802643e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8026442:	0a18      	lsrs	r0, r3, #8
 8026444:	0c1a      	lsrs	r2, r3, #16
 8026446:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 802644a:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 802644e:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8026452:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8026456:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802645a:	f80c ec02 	strb.w	lr, [ip, #-2]
 802645e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8026462:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8026466:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8026468:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 802646a:	4499      	add	r9, r3
 802646c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802646e:	4413      	add	r3, r2
 8026470:	9338      	str	r3, [sp, #224]	; 0xe0
 8026472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026474:	4563      	cmp	r3, ip
 8026476:	d024      	beq.n	80264c2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8026478:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 802647a:	f10c 0c03 	add.w	ip, ip, #3
 802647e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026482:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8026484:	ea4f 4229 	mov.w	r2, r9, asr #16
 8026488:	141b      	asrs	r3, r3, #16
 802648a:	fb01 2303 	mla	r3, r1, r3, r2
 802648e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8026490:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8026492:	5cc2      	ldrb	r2, [r0, r3]
 8026494:	f3c9 3403 	ubfx	r4, r9, #12, #4
 8026498:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 802649c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 802649e:	4403      	add	r3, r0
 80264a0:	f3c2 3203 	ubfx	r2, r2, #12, #4
 80264a4:	0e38      	lsrs	r0, r7, #24
 80264a6:	2c00      	cmp	r4, #0
 80264a8:	f47f aed7 	bne.w	802625a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80264ac:	2a00      	cmp	r2, #0
 80264ae:	f43f aee9 	beq.w	8026284 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80264b2:	5c5b      	ldrb	r3, [r3, r1]
 80264b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80264b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80264ba:	9310      	str	r3, [sp, #64]	; 0x40
 80264bc:	0e1b      	lsrs	r3, r3, #24
 80264be:	9307      	str	r3, [sp, #28]
 80264c0:	e6e0      	b.n	8026284 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80264c2:	469b      	mov	fp, r3
 80264c4:	e665      	b.n	8026192 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80264c6:	2b00      	cmp	r3, #0
 80264c8:	f77f ae63 	ble.w	8026192 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80264cc:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80264d0:	ea4f 4228 	mov.w	r2, r8, asr #16
 80264d4:	1439      	asrs	r1, r7, #16
 80264d6:	2a00      	cmp	r2, #0
 80264d8:	46d9      	mov	r9, fp
 80264da:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80264de:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80264e0:	e9dd b539 	ldrd	fp, r5, [sp, #228]	; 0xe4
 80264e4:	f3c8 3003 	ubfx	r0, r8, #12, #4
 80264e8:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 80264ec:	f2c0 8141 	blt.w	8026772 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 80264f0:	1e73      	subs	r3, r6, #1
 80264f2:	429a      	cmp	r2, r3
 80264f4:	f280 813d 	bge.w	8026772 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 80264f8:	2900      	cmp	r1, #0
 80264fa:	f2c0 813a 	blt.w	8026772 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 80264fe:	f10c 33ff 	add.w	r3, ip, #4294967295
 8026502:	4299      	cmp	r1, r3
 8026504:	f280 8135 	bge.w	8026772 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 8026508:	b233      	sxth	r3, r6
 802650a:	fb01 2203 	mla	r2, r1, r3, r2
 802650e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8026510:	930c      	str	r3, [sp, #48]	; 0x30
 8026512:	5c8b      	ldrb	r3, [r1, r2]
 8026514:	440a      	add	r2, r1
 8026516:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026518:	4616      	mov	r6, r2
 802651a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802651e:	930d      	str	r3, [sp, #52]	; 0x34
 8026520:	0e1b      	lsrs	r3, r3, #24
 8026522:	2800      	cmp	r0, #0
 8026524:	f000 8153 	beq.w	80267ce <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8026528:	f896 c001 	ldrb.w	ip, [r6, #1]
 802652c:	f851 202c 	ldr.w	r2, [r1, ip, lsl #2]
 8026530:	921f      	str	r2, [sp, #124]	; 0x7c
 8026532:	0e12      	lsrs	r2, r2, #24
 8026534:	9214      	str	r2, [sp, #80]	; 0x50
 8026536:	f1be 0f00 	cmp.w	lr, #0
 802653a:	f040 8155 	bne.w	80267e8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802653e:	b280      	uxth	r0, r0
 8026540:	fa1f fc8e 	uxth.w	ip, lr
 8026544:	fb00 f20c 	mul.w	r2, r0, ip
 8026548:	0106      	lsls	r6, r0, #4
 802654a:	1ab0      	subs	r0, r6, r2
 802654c:	b281      	uxth	r1, r0
 802654e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8026550:	ebc2 1c0c 	rsb	ip, r2, ip, lsl #4
 8026554:	fb01 f000 	mul.w	r0, r1, r0
 8026558:	9117      	str	r1, [sp, #92]	; 0x5c
 802655a:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 802655e:	fa1f f18c 	uxth.w	r1, ip
 8026562:	1a76      	subs	r6, r6, r1
 8026564:	b2b6      	uxth	r6, r6
 8026566:	9619      	str	r6, [sp, #100]	; 0x64
 8026568:	fb06 0603 	mla	r6, r6, r3, r0
 802656c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802656e:	9118      	str	r1, [sp, #96]	; 0x60
 8026570:	fb01 6600 	mla	r6, r1, r0, r6
 8026574:	9916      	ldr	r1, [sp, #88]	; 0x58
 8026576:	fb02 6601 	mla	r6, r2, r1, r6
 802657a:	f3c6 2107 	ubfx	r1, r6, #8, #8
 802657e:	911a      	str	r1, [sp, #104]	; 0x68
 8026580:	2900      	cmp	r1, #0
 8026582:	f000 80e0 	beq.w	8026746 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8026586:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026588:	2bff      	cmp	r3, #255	; 0xff
 802658a:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
 802658e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026592:	910d      	str	r1, [sp, #52]	; 0x34
 8026594:	901b      	str	r0, [sp, #108]	; 0x6c
 8026596:	d01c      	beq.n	80265d2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 8026598:	fb01 f103 	mul.w	r1, r1, r3
 802659c:	fb00 f003 	mul.w	r0, r0, r3
 80265a0:	460e      	mov	r6, r1
 80265a2:	4603      	mov	r3, r0
 80265a4:	0a09      	lsrs	r1, r1, #8
 80265a6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80265aa:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80265ae:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80265b2:	4431      	add	r1, r6
 80265b4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80265b8:	0a09      	lsrs	r1, r1, #8
 80265ba:	0a1b      	lsrs	r3, r3, #8
 80265bc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80265c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80265c4:	430b      	orrs	r3, r1
 80265c6:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 80265ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80265ce:	910d      	str	r1, [sp, #52]	; 0x34
 80265d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80265d2:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80265d4:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 80265d8:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 80265dc:	9914      	ldr	r1, [sp, #80]	; 0x50
 80265de:	931c      	str	r3, [sp, #112]	; 0x70
 80265e0:	29ff      	cmp	r1, #255	; 0xff
 80265e2:	d019      	beq.n	8026618 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 80265e4:	fb03 f301 	mul.w	r3, r3, r1
 80265e8:	fb06 f601 	mul.w	r6, r6, r1
 80265ec:	0a19      	lsrs	r1, r3, #8
 80265ee:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 80265f2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80265f6:	f506 7380 	add.w	r3, r6, #256	; 0x100
 80265fa:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 80265fe:	4401      	add	r1, r0
 8026600:	0a09      	lsrs	r1, r1, #8
 8026602:	0a1b      	lsrs	r3, r3, #8
 8026604:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026608:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802660c:	4319      	orrs	r1, r3
 802660e:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8026612:	931c      	str	r3, [sp, #112]	; 0x70
 8026614:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 8026618:	9920      	ldr	r1, [sp, #128]	; 0x80
 802661a:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 802661e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8026622:	9915      	ldr	r1, [sp, #84]	; 0x54
 8026624:	930c      	str	r3, [sp, #48]	; 0x30
 8026626:	29ff      	cmp	r1, #255	; 0xff
 8026628:	901d      	str	r0, [sp, #116]	; 0x74
 802662a:	d01a      	beq.n	8026662 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x592>
 802662c:	fb03 f301 	mul.w	r3, r3, r1
 8026630:	fb00 fc01 	mul.w	ip, r0, r1
 8026634:	0a19      	lsrs	r1, r3, #8
 8026636:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 802663a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802663e:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 8026642:	4401      	add	r1, r0
 8026644:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8026648:	0a09      	lsrs	r1, r1, #8
 802664a:	0a1b      	lsrs	r3, r3, #8
 802664c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026650:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026654:	4319      	orrs	r1, r3
 8026656:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 802665a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802665e:	930c      	str	r3, [sp, #48]	; 0x30
 8026660:	911d      	str	r1, [sp, #116]	; 0x74
 8026662:	9921      	ldr	r1, [sp, #132]	; 0x84
 8026664:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8026668:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 802666c:	9916      	ldr	r1, [sp, #88]	; 0x58
 802666e:	29ff      	cmp	r1, #255	; 0xff
 8026670:	d01c      	beq.n	80266ac <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8026672:	fb0c fc01 	mul.w	ip, ip, r1
 8026676:	fb0e fe01 	mul.w	lr, lr, r1
 802667a:	ea4f 201c 	mov.w	r0, ip, lsr #8
 802667e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026682:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026686:	f50e 7180 	add.w	r1, lr, #256	; 0x100
 802668a:	4484      	add	ip, r0
 802668c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8026690:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026694:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026698:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802669c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80266a0:	ea4c 0e0e 	orr.w	lr, ip, lr
 80266a4:	f00e 1cff 	and.w	ip, lr, #16711935	; 0xff00ff
 80266a8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80266ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80266ae:	981c      	ldr	r0, [sp, #112]	; 0x70
 80266b0:	43c9      	mvns	r1, r1
 80266b2:	911a      	str	r1, [sp, #104]	; 0x68
 80266b4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80266b6:	fb00 f001 	mul.w	r0, r0, r1
 80266ba:	fb06 f301 	mul.w	r3, r6, r1
 80266be:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80266c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80266c2:	fb01 0006 	mla	r0, r1, r6, r0
 80266c6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80266c8:	fb01 3106 	mla	r1, r1, r6, r3
 80266cc:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80266ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80266d0:	910d      	str	r1, [sp, #52]	; 0x34
 80266d2:	fb03 0306 	mla	r3, r3, r6, r0
 80266d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80266d8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80266da:	fb0c 3302 	mla	r3, ip, r2, r3
 80266de:	fb00 1106 	mla	r1, r0, r6, r1
 80266e2:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 80266e6:	f899 0002 	ldrb.w	r0, [r9, #2]
 80266ea:	fb0e 1e02 	mla	lr, lr, r2, r1
 80266ee:	f899 2001 	ldrb.w	r2, [r9, #1]
 80266f2:	f899 1000 	ldrb.w	r1, [r9]
 80266f6:	fb00 f006 	mul.w	r0, r0, r6
 80266fa:	fb02 fc06 	mul.w	ip, r2, r6
 80266fe:	fb01 f106 	mul.w	r1, r1, r6
 8026702:	0a1b      	lsrs	r3, r3, #8
 8026704:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026708:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 802670c:	1c46      	adds	r6, r0, #1
 802670e:	f40e 437f 	and.w	r3, lr, #65280	; 0xff00
 8026712:	4313      	orrs	r3, r2
 8026714:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8026718:	f10c 0201 	add.w	r2, ip, #1
 802671c:	1c4e      	adds	r6, r1, #1
 802671e:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 8026722:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 8026726:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 802672a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 802672e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8026732:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8026736:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802673a:	f889 2001 	strb.w	r2, [r9, #1]
 802673e:	f889 0002 	strb.w	r0, [r9, #2]
 8026742:	f889 3000 	strb.w	r3, [r9]
 8026746:	f1ba 0f00 	cmp.w	sl, #0
 802674a:	f109 0903 	add.w	r9, r9, #3
 802674e:	44d8      	add	r8, fp
 8026750:	442f      	add	r7, r5
 8026752:	dd2c      	ble.n	80267ae <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6de>
 8026754:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8026758:	ea4f 4228 	mov.w	r2, r8, asr #16
 802675c:	2a00      	cmp	r2, #0
 802675e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026762:	ea4f 4127 	mov.w	r1, r7, asr #16
 8026766:	f3c8 3003 	ubfx	r0, r8, #12, #4
 802676a:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 802676e:	f6bf aebf 	bge.w	80264f0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8026772:	1c53      	adds	r3, r2, #1
 8026774:	d4e7      	bmi.n	8026746 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8026776:	42b3      	cmp	r3, r6
 8026778:	dce5      	bgt.n	8026746 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 802677a:	1c4b      	adds	r3, r1, #1
 802677c:	d4e3      	bmi.n	8026746 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 802677e:	4563      	cmp	r3, ip
 8026780:	dce1      	bgt.n	8026746 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8026782:	fa0f f38c 	sxth.w	r3, ip
 8026786:	b236      	sxth	r6, r6
 8026788:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802678c:	e9cd 6300 	strd	r6, r3, [sp]
 8026790:	e9cd 0e04 	strd	r0, lr, [sp, #16]
 8026794:	4649      	mov	r1, r9
 8026796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026798:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802679a:	981e      	ldr	r0, [sp, #120]	; 0x78
 802679c:	f7ff fb08 	bl	8025db0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80267a0:	f1ba 0f00 	cmp.w	sl, #0
 80267a4:	f109 0903 	add.w	r9, r9, #3
 80267a8:	44d8      	add	r8, fp
 80267aa:	442f      	add	r7, r5
 80267ac:	dcd2      	bgt.n	8026754 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x684>
 80267ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80267b0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80267b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80267b8:	3301      	adds	r3, #1
 80267ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80267be:	449b      	add	fp, r3
 80267c0:	e4e7      	b.n	8026192 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80267c2:	3b01      	subs	r3, #1
 80267c4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80267c8:	469a      	mov	sl, r3
 80267ca:	9309      	str	r3, [sp, #36]	; 0x24
 80267cc:	e683      	b.n	80264d6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 80267ce:	f1be 0f00 	cmp.w	lr, #0
 80267d2:	f43f aeb4 	beq.w	802653e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 80267d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80267d8:	5c72      	ldrb	r2, [r6, r1]
 80267da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80267dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80267e0:	9220      	str	r2, [sp, #128]	; 0x80
 80267e2:	0e12      	lsrs	r2, r2, #24
 80267e4:	9215      	str	r2, [sp, #84]	; 0x54
 80267e6:	e6aa      	b.n	802653e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 80267e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80267ea:	eb06 0c02 	add.w	ip, r6, r2
 80267ee:	4632      	mov	r2, r6
 80267f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80267f2:	f89c c001 	ldrb.w	ip, [ip, #1]
 80267f6:	5d92      	ldrb	r2, [r2, r6]
 80267f8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80267fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8026800:	0e31      	lsrs	r1, r6, #24
 8026802:	9220      	str	r2, [sp, #128]	; 0x80
 8026804:	0e12      	lsrs	r2, r2, #24
 8026806:	9621      	str	r6, [sp, #132]	; 0x84
 8026808:	9116      	str	r1, [sp, #88]	; 0x58
 802680a:	9215      	str	r2, [sp, #84]	; 0x54
 802680c:	e697      	b.n	802653e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 802680e:	f43f acc0 	beq.w	8026192 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8026812:	1e65      	subs	r5, r4, #1
 8026814:	e4fe      	b.n	8026214 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8026816:	bf00      	nop

08026818 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>:
 8026818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802681c:	b087      	sub	sp, #28
 802681e:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 8026822:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	; 0x40
 8026826:	ea6f 000b 	mvn.w	r0, fp
 802682a:	e9dd 4712 	ldrd	r4, r7, [sp, #72]	; 0x48
 802682e:	fb07 4c06 	mla	ip, r7, r6, r4
 8026832:	b2c0      	uxtb	r0, r0
 8026834:	2f00      	cmp	r7, #0
 8026836:	9002      	str	r0, [sp, #8]
 8026838:	eb02 0e0c 	add.w	lr, r2, ip
 802683c:	f107 0801 	add.w	r8, r7, #1
 8026840:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8026844:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8026848:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 802684c:	db02      	blt.n	8026854 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x3c>
 802684e:	45b9      	cmp	r9, r7
 8026850:	f300 80a0 	bgt.w	8026994 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x17c>
 8026854:	468c      	mov	ip, r1
 8026856:	460f      	mov	r7, r1
 8026858:	780a      	ldrb	r2, [r1, #0]
 802685a:	9203      	str	r2, [sp, #12]
 802685c:	9201      	str	r2, [sp, #4]
 802685e:	f1b8 0f00 	cmp.w	r8, #0
 8026862:	db01      	blt.n	8026868 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x50>
 8026864:	45c1      	cmp	r9, r8
 8026866:	dc7b      	bgt.n	8026960 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x148>
 8026868:	460b      	mov	r3, r1
 802686a:	4689      	mov	r9, r1
 802686c:	f891 a000 	ldrb.w	sl, [r1]
 8026870:	f8cd a014 	str.w	sl, [sp, #20]
 8026874:	2d0f      	cmp	r5, #15
 8026876:	f200 80cd 	bhi.w	8026a14 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 802687a:	280f      	cmp	r0, #15
 802687c:	f200 80ca 	bhi.w	8026a14 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 8026880:	780a      	ldrb	r2, [r1, #0]
 8026882:	9204      	str	r2, [sp, #16]
 8026884:	b2aa      	uxth	r2, r5
 8026886:	b280      	uxth	r0, r0
 8026888:	fb02 f500 	mul.w	r5, r2, r0
 802688c:	0112      	lsls	r2, r2, #4
 802688e:	f89c 8001 	ldrb.w	r8, [ip, #1]
 8026892:	f89c e002 	ldrb.w	lr, [ip, #2]
 8026896:	1b54      	subs	r4, r2, r5
 8026898:	b2a4      	uxth	r4, r4
 802689a:	fb04 f808 	mul.w	r8, r4, r8
 802689e:	fb04 fe0e 	mul.w	lr, r4, lr
 80268a2:	ebc5 1000 	rsb	r0, r5, r0, lsl #4
 80268a6:	b280      	uxth	r0, r0
 80268a8:	9e01      	ldr	r6, [sp, #4]
 80268aa:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80268ae:	f897 c001 	ldrb.w	ip, [r7, #1]
 80268b2:	1a12      	subs	r2, r2, r0
 80268b4:	78bf      	ldrb	r7, [r7, #2]
 80268b6:	b292      	uxth	r2, r2
 80268b8:	fb04 f406 	mul.w	r4, r4, r6
 80268bc:	fb02 8c0c 	mla	ip, r2, ip, r8
 80268c0:	fb02 e707 	mla	r7, r2, r7, lr
 80268c4:	9e03      	ldr	r6, [sp, #12]
 80268c6:	f899 8001 	ldrb.w	r8, [r9, #1]
 80268ca:	f899 e002 	ldrb.w	lr, [r9, #2]
 80268ce:	fb02 4206 	mla	r2, r2, r6, r4
 80268d2:	fb00 cc08 	mla	ip, r0, r8, ip
 80268d6:	fb00 770e 	mla	r7, r0, lr, r7
 80268da:	f893 8001 	ldrb.w	r8, [r3, #1]
 80268de:	f893 e002 	ldrb.w	lr, [r3, #2]
 80268e2:	fb00 220a 	mla	r2, r0, sl, r2
 80268e6:	fb05 c808 	mla	r8, r5, r8, ip
 80268ea:	fb05 7e0e 	mla	lr, r5, lr, r7
 80268ee:	9805      	ldr	r0, [sp, #20]
 80268f0:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 80268f4:	fb05 2500 	mla	r5, r5, r0, r2
 80268f8:	9a04      	ldr	r2, [sp, #16]
 80268fa:	fa1f f38b 	uxth.w	r3, fp
 80268fe:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8026902:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8026906:	fb12 f609 	smulbb	r6, r2, r9
 802690a:	fb1e fe03 	smulbb	lr, lr, r3
 802690e:	fb18 f803 	smulbb	r8, r8, r3
 8026912:	784a      	ldrb	r2, [r1, #1]
 8026914:	7888      	ldrb	r0, [r1, #2]
 8026916:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802691a:	fb05 6503 	mla	r5, r5, r3, r6
 802691e:	fb02 8809 	mla	r8, r2, r9, r8
 8026922:	fb00 e909 	mla	r9, r0, r9, lr
 8026926:	b2ad      	uxth	r5, r5
 8026928:	fa1f f888 	uxth.w	r8, r8
 802692c:	fa1f f989 	uxth.w	r9, r9
 8026930:	f108 0001 	add.w	r0, r8, #1
 8026934:	f109 0201 	add.w	r2, r9, #1
 8026938:	1c6b      	adds	r3, r5, #1
 802693a:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 802693e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8026942:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026946:	ea4f 2828 	mov.w	r8, r8, asr #8
 802694a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802694e:	122d      	asrs	r5, r5, #8
 8026950:	f881 8001 	strb.w	r8, [r1, #1]
 8026954:	f881 9002 	strb.w	r9, [r1, #2]
 8026958:	700d      	strb	r5, [r1, #0]
 802695a:	b007      	add	sp, #28
 802695c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026960:	b388      	cbz	r0, 80269c6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1ae>
 8026962:	2c00      	cmp	r4, #0
 8026964:	db44      	blt.n	80269f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d8>
 8026966:	42a6      	cmp	r6, r4
 8026968:	dd42      	ble.n	80269f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d8>
 802696a:	f81e 9006 	ldrb.w	r9, [lr, r6]
 802696e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8026972:	4499      	add	r9, r3
 8026974:	3401      	adds	r4, #1
 8026976:	f899 a000 	ldrb.w	sl, [r9]
 802697a:	d435      	bmi.n	80269e8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d0>
 802697c:	42a6      	cmp	r6, r4
 802697e:	dd33      	ble.n	80269e8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d0>
 8026980:	2d00      	cmp	r5, #0
 8026982:	d043      	beq.n	8026a0c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1f4>
 8026984:	4476      	add	r6, lr
 8026986:	7872      	ldrb	r2, [r6, #1]
 8026988:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802698c:	5c9c      	ldrb	r4, [r3, r2]
 802698e:	4413      	add	r3, r2
 8026990:	9405      	str	r4, [sp, #20]
 8026992:	e76f      	b.n	8026874 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5c>
 8026994:	2c00      	cmp	r4, #0
 8026996:	db01      	blt.n	802699c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x184>
 8026998:	42a6      	cmp	r6, r4
 802699a:	dc1f      	bgt.n	80269dc <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1c4>
 802699c:	460f      	mov	r7, r1
 802699e:	783a      	ldrb	r2, [r7, #0]
 80269a0:	9203      	str	r2, [sp, #12]
 80269a2:	1c62      	adds	r2, r4, #1
 80269a4:	d40b      	bmi.n	80269be <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a6>
 80269a6:	4296      	cmp	r6, r2
 80269a8:	dd09      	ble.n	80269be <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a6>
 80269aa:	b31d      	cbz	r5, 80269f4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1dc>
 80269ac:	f89e c001 	ldrb.w	ip, [lr, #1]
 80269b0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80269b4:	f813 200c 	ldrb.w	r2, [r3, ip]
 80269b8:	449c      	add	ip, r3
 80269ba:	9201      	str	r2, [sp, #4]
 80269bc:	e74f      	b.n	802685e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x46>
 80269be:	780a      	ldrb	r2, [r1, #0]
 80269c0:	468c      	mov	ip, r1
 80269c2:	9201      	str	r2, [sp, #4]
 80269c4:	e74b      	b.n	802685e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x46>
 80269c6:	2d0f      	cmp	r5, #15
 80269c8:	f891 a000 	ldrb.w	sl, [r1]
 80269cc:	d822      	bhi.n	8026a14 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 80269ce:	f8cd a010 	str.w	sl, [sp, #16]
 80269d2:	460b      	mov	r3, r1
 80269d4:	4689      	mov	r9, r1
 80269d6:	f8cd a014 	str.w	sl, [sp, #20]
 80269da:	e753      	b.n	8026884 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x6c>
 80269dc:	f812 700c 	ldrb.w	r7, [r2, ip]
 80269e0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80269e4:	441f      	add	r7, r3
 80269e6:	e7da      	b.n	802699e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x186>
 80269e8:	780b      	ldrb	r3, [r1, #0]
 80269ea:	9305      	str	r3, [sp, #20]
 80269ec:	460b      	mov	r3, r1
 80269ee:	e741      	b.n	8026874 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5c>
 80269f0:	4689      	mov	r9, r1
 80269f2:	e7bf      	b.n	8026974 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x15c>
 80269f4:	780a      	ldrb	r2, [r1, #0]
 80269f6:	f1b8 0f00 	cmp.w	r8, #0
 80269fa:	9201      	str	r2, [sp, #4]
 80269fc:	468c      	mov	ip, r1
 80269fe:	f6bf af31 	bge.w	8026864 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x4c>
 8026a02:	460b      	mov	r3, r1
 8026a04:	4689      	mov	r9, r1
 8026a06:	9205      	str	r2, [sp, #20]
 8026a08:	4692      	mov	sl, r2
 8026a0a:	e736      	b.n	802687a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x62>
 8026a0c:	780b      	ldrb	r3, [r1, #0]
 8026a0e:	9305      	str	r3, [sp, #20]
 8026a10:	460b      	mov	r3, r1
 8026a12:	e732      	b.n	802687a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x62>
 8026a14:	4b03      	ldr	r3, [pc, #12]	; (8026a24 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x20c>)
 8026a16:	4a04      	ldr	r2, [pc, #16]	; (8026a28 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x210>)
 8026a18:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8026a1c:	4803      	ldr	r0, [pc, #12]	; (8026a2c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x214>)
 8026a1e:	f001 fb45 	bl	80280ac <__assert_func>
 8026a22:	bf00      	nop
 8026a24:	0802b324 	.word	0x0802b324
 8026a28:	0802b99c 	.word	0x0802b99c
 8026a2c:	0802b4a8 	.word	0x0802b4a8

08026a30 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a34:	ed2d 8b08 	vpush	{d8-d11}
 8026a38:	b095      	sub	sp, #84	; 0x54
 8026a3a:	f89d 40bc 	ldrb.w	r4, [sp, #188]	; 0xbc
 8026a3e:	9013      	str	r0, [sp, #76]	; 0x4c
 8026a40:	43e0      	mvns	r0, r4
 8026a42:	e9dd a727 	ldrd	sl, r7, [sp, #156]	; 0x9c
 8026a46:	eeb0 aa40 	vmov.f32	s20, s0
 8026a4a:	eef0 9a60 	vmov.f32	s19, s1
 8026a4e:	eeb0 9a41 	vmov.f32	s18, s2
 8026a52:	eef0 8a62 	vmov.f32	s17, s5
 8026a56:	eeb0 8a43 	vmov.f32	s16, s6
 8026a5a:	eef0 ba44 	vmov.f32	s23, s8
 8026a5e:	eeb0 ba64 	vmov.f32	s22, s9
 8026a62:	eef0 aa45 	vmov.f32	s21, s10
 8026a66:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8026a6a:	9411      	str	r4, [sp, #68]	; 0x44
 8026a6c:	469b      	mov	fp, r3
 8026a6e:	e9dd 422b 	ldrd	r4, r2, [sp, #172]	; 0xac
 8026a72:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026a74:	6861      	ldr	r1, [r4, #4]
 8026a76:	fb01 2303 	mla	r3, r1, r3, r2
 8026a7a:	6821      	ldr	r1, [r4, #0]
 8026a7c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8026a7e:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8026a80:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8026a84:	6852      	ldr	r2, [r2, #4]
 8026a86:	6824      	ldr	r4, [r4, #0]
 8026a88:	930d      	str	r3, [sp, #52]	; 0x34
 8026a8a:	b2c3      	uxtb	r3, r0
 8026a8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8026a8e:	1d13      	adds	r3, r2, #4
 8026a90:	940a      	str	r4, [sp, #40]	; 0x28
 8026a92:	9308      	str	r3, [sp, #32]
 8026a94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026a96:	2b00      	cmp	r3, #0
 8026a98:	dc02      	bgt.n	8026aa0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8026a9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026a9c:	2b00      	cmp	r3, #0
 8026a9e:	dd6c      	ble.n	8026b7a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8026aa0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026aa2:	f1bb 0f00 	cmp.w	fp, #0
 8026aa6:	e9d3 5e02 	ldrd	r5, lr, [r3, #8]
 8026aaa:	b228      	sxth	r0, r5
 8026aac:	fa0f f68e 	sxth.w	r6, lr
 8026ab0:	f340 8245 	ble.w	8026f3e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 8026ab4:	e9dd 8929 	ldrd	r8, r9, [sp, #164]	; 0xa4
 8026ab8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026aba:	1e44      	subs	r4, r0, #1
 8026abc:	f106 3cff 	add.w	ip, r6, #4294967295
 8026ac0:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8026ac4:	ea5f 432a 	movs.w	r3, sl, asr #16
 8026ac8:	ea4f 4127 	mov.w	r1, r7, asr #16
 8026acc:	d405      	bmi.n	8026ada <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026ace:	42a3      	cmp	r3, r4
 8026ad0:	da03      	bge.n	8026ada <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026ad2:	2900      	cmp	r1, #0
 8026ad4:	db01      	blt.n	8026ada <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026ad6:	4561      	cmp	r1, ip
 8026ad8:	db54      	blt.n	8026b84 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8026ada:	f113 0e01 	adds.w	lr, r3, #1
 8026ade:	d407      	bmi.n	8026af0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8026ae0:	4586      	cmp	lr, r0
 8026ae2:	dc05      	bgt.n	8026af0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8026ae4:	f111 0e01 	adds.w	lr, r1, #1
 8026ae8:	d402      	bmi.n	8026af0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8026aea:	45b6      	cmp	lr, r6
 8026aec:	f340 8189 	ble.w	8026e02 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8026af0:	f1bb 0b01 	subs.w	fp, fp, #1
 8026af4:	44c2      	add	sl, r8
 8026af6:	444f      	add	r7, r9
 8026af8:	f102 0204 	add.w	r2, r2, #4
 8026afc:	d1e2      	bne.n	8026ac4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026afe:	920d      	str	r2, [sp, #52]	; 0x34
 8026b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026b02:	2b00      	cmp	r3, #0
 8026b04:	dd39      	ble.n	8026b7a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8026b06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026b0a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026b0e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026b12:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026b16:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026b1a:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8026b1e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026b22:	ee76 6a68 	vsub.f32	s13, s12, s17
 8026b26:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8026b2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026b2e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026b32:	ee16 2a90 	vmov	r2, s13
 8026b36:	3b01      	subs	r3, #1
 8026b38:	930e      	str	r3, [sp, #56]	; 0x38
 8026b3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026b3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8026b40:	ee17 2a10 	vmov	r2, s14
 8026b44:	eeb0 7a48 	vmov.f32	s14, s16
 8026b48:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026b4c:	ee17 7a10 	vmov	r7, s14
 8026b50:	eeb0 7a68 	vmov.f32	s14, s17
 8026b54:	9329      	str	r3, [sp, #164]	; 0xa4
 8026b56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026b58:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026b5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8026b60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026b62:	932a      	str	r3, [sp, #168]	; 0xa8
 8026b64:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026b66:	ee17 aa10 	vmov	sl, s14
 8026b6a:	eeb0 8a67 	vmov.f32	s16, s15
 8026b6e:	eef0 8a46 	vmov.f32	s17, s12
 8026b72:	bf14      	ite	ne
 8026b74:	469b      	movne	fp, r3
 8026b76:	4693      	moveq	fp, r2
 8026b78:	e78c      	b.n	8026a94 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8026b7a:	b015      	add	sp, #84	; 0x54
 8026b7c:	ecbd 8b08 	vpop	{d8-d11}
 8026b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026b84:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8026b88:	920d      	str	r2, [sp, #52]	; 0x34
 8026b8a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8026b8c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8026b90:	fb01 a302 	mla	r3, r1, r2, sl
 8026b94:	141b      	asrs	r3, r3, #16
 8026b96:	9209      	str	r2, [sp, #36]	; 0x24
 8026b98:	f100 80d3 	bmi.w	8026d42 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8026b9c:	42a3      	cmp	r3, r4
 8026b9e:	f280 80d0 	bge.w	8026d42 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8026ba2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026ba4:	fb03 7302 	mla	r3, r3, r2, r7
 8026ba8:	141b      	asrs	r3, r3, #16
 8026baa:	f100 80ca 	bmi.w	8026d42 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8026bae:	3e01      	subs	r6, #1
 8026bb0:	42b3      	cmp	r3, r6
 8026bb2:	f280 80c6 	bge.w	8026d42 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8026bb6:	f1bb 0f00 	cmp.w	fp, #0
 8026bba:	dda1      	ble.n	8026b00 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8026bbc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8026bc0:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8026bc4:	930c      	str	r3, [sp, #48]	; 0x30
 8026bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026bc8:	f103 0804 	add.w	r8, r3, #4
 8026bcc:	e08f      	b.n	8026cee <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8026bce:	7861      	ldrb	r1, [r4, #1]
 8026bd0:	eb04 0c00 	add.w	ip, r4, r0
 8026bd4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026bd8:	4431      	add	r1, r6
 8026bda:	2a00      	cmp	r2, #0
 8026bdc:	f000 80a3 	beq.w	8026d26 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f6>
 8026be0:	5c20      	ldrb	r0, [r4, r0]
 8026be2:	f89c c001 	ldrb.w	ip, [ip, #1]
 8026be6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026bea:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8026bee:	4430      	add	r0, r6
 8026bf0:	44b4      	add	ip, r6
 8026bf2:	b29b      	uxth	r3, r3
 8026bf4:	b292      	uxth	r2, r2
 8026bf6:	fb03 f402 	mul.w	r4, r3, r2
 8026bfa:	011b      	lsls	r3, r3, #4
 8026bfc:	f891 b001 	ldrb.w	fp, [r1, #1]
 8026c00:	1b1e      	subs	r6, r3, r4
 8026c02:	f891 9002 	ldrb.w	r9, [r1, #2]
 8026c06:	b2b6      	uxth	r6, r6
 8026c08:	7809      	ldrb	r1, [r1, #0]
 8026c0a:	fb06 fb0b 	mul.w	fp, r6, fp
 8026c0e:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8026c12:	b292      	uxth	r2, r2
 8026c14:	fb06 f909 	mul.w	r9, r6, r9
 8026c18:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8026c1c:	fb06 f601 	mul.w	r6, r6, r1
 8026c20:	1a9b      	subs	r3, r3, r2
 8026c22:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8026c26:	b29b      	uxth	r3, r3
 8026c28:	f89e e002 	ldrb.w	lr, [lr, #2]
 8026c2c:	fb03 bb01 	mla	fp, r3, r1, fp
 8026c30:	9908      	ldr	r1, [sp, #32]
 8026c32:	fb03 990e 	mla	r9, r3, lr, r9
 8026c36:	5d49      	ldrb	r1, [r1, r5]
 8026c38:	7885      	ldrb	r5, [r0, #2]
 8026c3a:	fb03 6301 	mla	r3, r3, r1, r6
 8026c3e:	f890 e001 	ldrb.w	lr, [r0, #1]
 8026c42:	fb02 9905 	mla	r9, r2, r5, r9
 8026c46:	7801      	ldrb	r1, [r0, #0]
 8026c48:	fb02 bb0e 	mla	fp, r2, lr, fp
 8026c4c:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8026c50:	fb02 3301 	mla	r3, r2, r1, r3
 8026c54:	f89c e001 	ldrb.w	lr, [ip, #1]
 8026c58:	fb04 9900 	mla	r9, r4, r0, r9
 8026c5c:	f89c 1000 	ldrb.w	r1, [ip]
 8026c60:	fb04 bb0e 	mla	fp, r4, lr, fp
 8026c64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026c66:	f818 cc04 	ldrb.w	ip, [r8, #-4]
 8026c6a:	fb04 3301 	mla	r3, r4, r1, r3
 8026c6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026c70:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8026c74:	fb19 f902 	smulbb	r9, r9, r2
 8026c78:	fb1c fc01 	smulbb	ip, ip, r1
 8026c7c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8026c80:	f818 5c02 	ldrb.w	r5, [r8, #-2]
 8026c84:	fb1b fb02 	smulbb	fp, fp, r2
 8026c88:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026c8c:	f818 6c03 	ldrb.w	r6, [r8, #-3]
 8026c90:	fb05 9901 	mla	r9, r5, r1, r9
 8026c94:	fb03 c302 	mla	r3, r3, r2, ip
 8026c98:	fb06 bb01 	mla	fp, r6, r1, fp
 8026c9c:	fa1f f989 	uxth.w	r9, r9
 8026ca0:	b29b      	uxth	r3, r3
 8026ca2:	f109 0101 	add.w	r1, r9, #1
 8026ca6:	1c5a      	adds	r2, r3, #1
 8026ca8:	fa1f fb8b 	uxth.w	fp, fp
 8026cac:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8026cb0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026cb4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8026cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026cb8:	f10b 0001 	add.w	r0, fp, #1
 8026cbc:	3a01      	subs	r2, #1
 8026cbe:	eb00 2b1b 	add.w	fp, r0, fp, lsr #8
 8026cc2:	448a      	add	sl, r1
 8026cc4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8026cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8026cc8:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8026ccc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026cd0:	121b      	asrs	r3, r3, #8
 8026cd2:	3201      	adds	r2, #1
 8026cd4:	f808 bc03 	strb.w	fp, [r8, #-3]
 8026cd8:	f808 9c02 	strb.w	r9, [r8, #-2]
 8026cdc:	f808 3c04 	strb.w	r3, [r8, #-4]
 8026ce0:	440f      	add	r7, r1
 8026ce2:	f108 0804 	add.w	r8, r8, #4
 8026ce6:	d025      	beq.n	8026d34 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8026ce8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026cea:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8026cee:	ea4f 432a 	mov.w	r3, sl, asr #16
 8026cf2:	143c      	asrs	r4, r7, #16
 8026cf4:	fb00 3404 	mla	r4, r0, r4, r3
 8026cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026cfa:	9e08      	ldr	r6, [sp, #32]
 8026cfc:	5d15      	ldrb	r5, [r2, r4]
 8026cfe:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8026d02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026d06:	4414      	add	r4, r2
 8026d08:	eb06 0e05 	add.w	lr, r6, r5
 8026d0c:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8026d10:	2b00      	cmp	r3, #0
 8026d12:	f47f af5c 	bne.w	8026bce <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8026d16:	b14a      	cbz	r2, 8026d2c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026d18:	5c20      	ldrb	r0, [r4, r0]
 8026d1a:	46f4      	mov	ip, lr
 8026d1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026d20:	4430      	add	r0, r6
 8026d22:	4671      	mov	r1, lr
 8026d24:	e765      	b.n	8026bf2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8026d26:	46f4      	mov	ip, lr
 8026d28:	4670      	mov	r0, lr
 8026d2a:	e762      	b.n	8026bf2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8026d2c:	46f4      	mov	ip, lr
 8026d2e:	4670      	mov	r0, lr
 8026d30:	4671      	mov	r1, lr
 8026d32:	e75e      	b.n	8026bf2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8026d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026d36:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8026d3a:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8026d3e:	930d      	str	r3, [sp, #52]	; 0x34
 8026d40:	e6de      	b.n	8026b00 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8026d42:	f1bb 0f00 	cmp.w	fp, #0
 8026d46:	f77f aedb 	ble.w	8026b00 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8026d4a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8026d4e:	ea4f 432a 	mov.w	r3, sl, asr #16
 8026d52:	1439      	asrs	r1, r7, #16
 8026d54:	4676      	mov	r6, lr
 8026d56:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8026d5a:	f8dd 80b8 	ldr.w	r8, [sp, #184]	; 0xb8
 8026d5e:	2b00      	cmp	r3, #0
 8026d60:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8026d64:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8026d68:	db29      	blt.n	8026dbe <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8026d6a:	1e6c      	subs	r4, r5, #1
 8026d6c:	42a3      	cmp	r3, r4
 8026d6e:	da26      	bge.n	8026dbe <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8026d70:	2900      	cmp	r1, #0
 8026d72:	db24      	blt.n	8026dbe <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8026d74:	1e74      	subs	r4, r6, #1
 8026d76:	42a1      	cmp	r1, r4
 8026d78:	da21      	bge.n	8026dbe <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8026d7a:	b22c      	sxth	r4, r5
 8026d7c:	fb01 3304 	mla	r3, r1, r4, r3
 8026d80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026d82:	5ce9      	ldrb	r1, [r5, r3]
 8026d84:	442b      	add	r3, r5
 8026d86:	9d08      	ldr	r5, [sp, #32]
 8026d88:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026d8c:	9112      	str	r1, [sp, #72]	; 0x48
 8026d8e:	eb05 0c01 	add.w	ip, r5, r1
 8026d92:	2800      	cmp	r0, #0
 8026d94:	d04e      	beq.n	8026e34 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8026d96:	f893 e001 	ldrb.w	lr, [r3, #1]
 8026d9a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8026d9e:	44ae      	add	lr, r5
 8026da0:	2a00      	cmp	r2, #0
 8026da2:	f000 80c7 	beq.w	8026f34 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8026da6:	1919      	adds	r1, r3, r4
 8026da8:	7849      	ldrb	r1, [r1, #1]
 8026daa:	5d1c      	ldrb	r4, [r3, r4]
 8026dac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026db0:	186b      	adds	r3, r5, r1
 8026db2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026db6:	930c      	str	r3, [sp, #48]	; 0x30
 8026db8:	1963      	adds	r3, r4, r5
 8026dba:	9310      	str	r3, [sp, #64]	; 0x40
 8026dbc:	e041      	b.n	8026e42 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026dbe:	1c5c      	adds	r4, r3, #1
 8026dc0:	d405      	bmi.n	8026dce <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8026dc2:	42ac      	cmp	r4, r5
 8026dc4:	dc03      	bgt.n	8026dce <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8026dc6:	1c4c      	adds	r4, r1, #1
 8026dc8:	d401      	bmi.n	8026dce <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8026dca:	42b4      	cmp	r4, r6
 8026dcc:	dd21      	ble.n	8026e12 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8026dce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026dd0:	f1b9 0f00 	cmp.w	r9, #0
 8026dd4:	449a      	add	sl, r3
 8026dd6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026dd8:	f10b 0b04 	add.w	fp, fp, #4
 8026ddc:	441f      	add	r7, r3
 8026dde:	dd07      	ble.n	8026df0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8026de0:	e9d8 5602 	ldrd	r5, r6, [r8, #8]
 8026de4:	f109 39ff 	add.w	r9, r9, #4294967295
 8026de8:	ea4f 432a 	mov.w	r3, sl, asr #16
 8026dec:	1439      	asrs	r1, r7, #16
 8026dee:	e7b6      	b.n	8026d5e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8026df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026df2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026df4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026df8:	3301      	adds	r3, #1
 8026dfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026dfe:	930d      	str	r3, [sp, #52]	; 0x34
 8026e00:	e67e      	b.n	8026b00 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8026e02:	920d      	str	r2, [sp, #52]	; 0x34
 8026e04:	f10b 32ff 	add.w	r2, fp, #4294967295
 8026e08:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8026e0c:	4691      	mov	r9, r2
 8026e0e:	9209      	str	r2, [sp, #36]	; 0x24
 8026e10:	e7a0      	b.n	8026d54 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8026e12:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026e14:	b236      	sxth	r6, r6
 8026e16:	b22d      	sxth	r5, r5
 8026e18:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8026e1c:	e9cd 2405 	strd	r2, r4, [sp, #20]
 8026e20:	9302      	str	r3, [sp, #8]
 8026e22:	e9cd 5600 	strd	r5, r6, [sp]
 8026e26:	9b08      	ldr	r3, [sp, #32]
 8026e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026e2a:	4659      	mov	r1, fp
 8026e2c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8026e2e:	f7ff fcf3 	bl	8026818 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>
 8026e32:	e7cc      	b.n	8026dce <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8026e34:	2a00      	cmp	r2, #0
 8026e36:	d173      	bne.n	8026f20 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8026e38:	46e6      	mov	lr, ip
 8026e3a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8026e3e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8026e42:	b283      	uxth	r3, r0
 8026e44:	b292      	uxth	r2, r2
 8026e46:	fb03 f002 	mul.w	r0, r3, r2
 8026e4a:	011b      	lsls	r3, r3, #4
 8026e4c:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8026e50:	f89e 5002 	ldrb.w	r5, [lr, #2]
 8026e54:	1a19      	subs	r1, r3, r0
 8026e56:	b289      	uxth	r1, r1
 8026e58:	f89e e000 	ldrb.w	lr, [lr]
 8026e5c:	fb01 f505 	mul.w	r5, r1, r5
 8026e60:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8026e64:	fb01 f606 	mul.w	r6, r1, r6
 8026e68:	b292      	uxth	r2, r2
 8026e6a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8026e6e:	fb01 f40e 	mul.w	r4, r1, lr
 8026e72:	1a9b      	subs	r3, r3, r2
 8026e74:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8026e78:	f89c e002 	ldrb.w	lr, [ip, #2]
 8026e7c:	b29b      	uxth	r3, r3
 8026e7e:	fb03 6601 	mla	r6, r3, r1, r6
 8026e82:	fb03 5e0e 	mla	lr, r3, lr, r5
 8026e86:	9908      	ldr	r1, [sp, #32]
 8026e88:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026e8a:	5d49      	ldrb	r1, [r1, r5]
 8026e8c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026e8e:	fb03 4301 	mla	r3, r3, r1, r4
 8026e92:	f895 c001 	ldrb.w	ip, [r5, #1]
 8026e96:	78ad      	ldrb	r5, [r5, #2]
 8026e98:	fb02 6c0c 	mla	ip, r2, ip, r6
 8026e9c:	fb02 e505 	mla	r5, r2, r5, lr
 8026ea0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026ea2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026ea4:	784e      	ldrb	r6, [r1, #1]
 8026ea6:	7824      	ldrb	r4, [r4, #0]
 8026ea8:	7889      	ldrb	r1, [r1, #2]
 8026eaa:	fb02 3204 	mla	r2, r2, r4, r3
 8026eae:	fb00 cc06 	mla	ip, r0, r6, ip
 8026eb2:	fb00 5501 	mla	r5, r0, r1, r5
 8026eb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026eb8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8026eba:	780b      	ldrb	r3, [r1, #0]
 8026ebc:	f89b 4000 	ldrb.w	r4, [fp]
 8026ec0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8026ec4:	fb00 2003 	mla	r0, r0, r3, r2
 8026ec8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8026ecc:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8026ed0:	fb15 f501 	smulbb	r5, r5, r1
 8026ed4:	fb14 f406 	smulbb	r4, r4, r6
 8026ed8:	fb1c fc01 	smulbb	ip, ip, r1
 8026edc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8026ee0:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8026ee4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026ee8:	fb00 4001 	mla	r0, r0, r1, r4
 8026eec:	fb03 5306 	mla	r3, r3, r6, r5
 8026ef0:	fb02 c106 	mla	r1, r2, r6, ip
 8026ef4:	b29b      	uxth	r3, r3
 8026ef6:	b280      	uxth	r0, r0
 8026ef8:	b289      	uxth	r1, r1
 8026efa:	1c5a      	adds	r2, r3, #1
 8026efc:	1c4d      	adds	r5, r1, #1
 8026efe:	1c44      	adds	r4, r0, #1
 8026f00:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026f04:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8026f08:	eb04 2310 	add.w	r3, r4, r0, lsr #8
 8026f0c:	1209      	asrs	r1, r1, #8
 8026f0e:	1212      	asrs	r2, r2, #8
 8026f10:	121b      	asrs	r3, r3, #8
 8026f12:	f88b 1001 	strb.w	r1, [fp, #1]
 8026f16:	f88b 2002 	strb.w	r2, [fp, #2]
 8026f1a:	f88b 3000 	strb.w	r3, [fp]
 8026f1e:	e756      	b.n	8026dce <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8026f20:	5d1c      	ldrb	r4, [r3, r4]
 8026f22:	9b08      	ldr	r3, [sp, #32]
 8026f24:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026f28:	18e3      	adds	r3, r4, r3
 8026f2a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8026f2e:	9310      	str	r3, [sp, #64]	; 0x40
 8026f30:	46e6      	mov	lr, ip
 8026f32:	e786      	b.n	8026e42 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026f34:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8026f38:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8026f3c:	e781      	b.n	8026e42 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026f3e:	f43f addf 	beq.w	8026b00 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8026f42:	1e44      	subs	r4, r0, #1
 8026f44:	e621      	b.n	8026b8a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8026f46:	bf00      	nop

08026f48 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>:
 8026f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f4c:	f9bd c028 	ldrsh.w	ip, [sp, #40]	; 0x28
 8026f50:	e9dd 640c 	ldrd	r6, r4, [sp, #48]	; 0x30
 8026f54:	fb04 6e0c 	mla	lr, r4, ip, r6
 8026f58:	2c00      	cmp	r4, #0
 8026f5a:	461f      	mov	r7, r3
 8026f5c:	eb02 0a0e 	add.w	sl, r2, lr
 8026f60:	f104 0801 	add.w	r8, r4, #1
 8026f64:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8026f68:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8026f6c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8026f70:	db01      	blt.n	8026f76 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x2e>
 8026f72:	45a1      	cmp	r9, r4
 8026f74:	dc6f      	bgt.n	8027056 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x10e>
 8026f76:	f891 b000 	ldrb.w	fp, [r1]
 8026f7a:	460b      	mov	r3, r1
 8026f7c:	465c      	mov	r4, fp
 8026f7e:	468e      	mov	lr, r1
 8026f80:	f1b8 0f00 	cmp.w	r8, #0
 8026f84:	db01      	blt.n	8026f8a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x42>
 8026f86:	45c1      	cmp	r9, r8
 8026f88:	dc4a      	bgt.n	8027020 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xd8>
 8026f8a:	f891 9000 	ldrb.w	r9, [r1]
 8026f8e:	460f      	mov	r7, r1
 8026f90:	46ca      	mov	sl, r9
 8026f92:	4688      	mov	r8, r1
 8026f94:	2d0f      	cmp	r5, #15
 8026f96:	f200 8097 	bhi.w	80270c8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 8026f9a:	280f      	cmp	r0, #15
 8026f9c:	f200 8094 	bhi.w	80270c8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 8026fa0:	b2aa      	uxth	r2, r5
 8026fa2:	b280      	uxth	r0, r0
 8026fa4:	fb02 f600 	mul.w	r6, r2, r0
 8026fa8:	0112      	lsls	r2, r2, #4
 8026faa:	1b95      	subs	r5, r2, r6
 8026fac:	f893 c001 	ldrb.w	ip, [r3, #1]
 8026fb0:	789b      	ldrb	r3, [r3, #2]
 8026fb2:	b2ad      	uxth	r5, r5
 8026fb4:	ebc6 1000 	rsb	r0, r6, r0, lsl #4
 8026fb8:	fb05 f404 	mul.w	r4, r5, r4
 8026fbc:	fb05 fc0c 	mul.w	ip, r5, ip
 8026fc0:	fb05 f503 	mul.w	r5, r5, r3
 8026fc4:	b280      	uxth	r0, r0
 8026fc6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026fca:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8026fce:	1a12      	subs	r2, r2, r0
 8026fd0:	f89e e002 	ldrb.w	lr, [lr, #2]
 8026fd4:	b292      	uxth	r2, r2
 8026fd6:	fb02 cc03 	mla	ip, r2, r3, ip
 8026fda:	fb02 440b 	mla	r4, r2, fp, r4
 8026fde:	fb02 520e 	mla	r2, r2, lr, r5
 8026fe2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8026fe6:	f898 8002 	ldrb.w	r8, [r8, #2]
 8026fea:	fb00 cc03 	mla	ip, r0, r3, ip
 8026fee:	fb00 4909 	mla	r9, r0, r9, r4
 8026ff2:	fb00 2008 	mla	r0, r0, r8, r2
 8026ff6:	787b      	ldrb	r3, [r7, #1]
 8026ff8:	78ba      	ldrb	r2, [r7, #2]
 8026ffa:	fb06 9a0a 	mla	sl, r6, sl, r9
 8026ffe:	fb06 c303 	mla	r3, r6, r3, ip
 8027002:	fb06 0602 	mla	r6, r6, r2, r0
 8027006:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 802700a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802700e:	0236      	lsls	r6, r6, #8
 8027010:	ea43 030a 	orr.w	r3, r3, sl
 8027014:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8027018:	4333      	orrs	r3, r6
 802701a:	600b      	str	r3, [r1, #0]
 802701c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027020:	b378      	cbz	r0, 8027082 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x13a>
 8027022:	2e00      	cmp	r6, #0
 8027024:	db3f      	blt.n	80270a6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15e>
 8027026:	45b4      	cmp	ip, r6
 8027028:	dd3d      	ble.n	80270a6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15e>
 802702a:	f81a 800c 	ldrb.w	r8, [sl, ip]
 802702e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8027032:	44b8      	add	r8, r7
 8027034:	3601      	adds	r6, #1
 8027036:	f898 9000 	ldrb.w	r9, [r8]
 802703a:	d430      	bmi.n	802709e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x156>
 802703c:	45b4      	cmp	ip, r6
 802703e:	dd2e      	ble.n	802709e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x156>
 8027040:	2d00      	cmp	r5, #0
 8027042:	d03d      	beq.n	80270c0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x178>
 8027044:	44d4      	add	ip, sl
 8027046:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802704a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802704e:	f817 a002 	ldrb.w	sl, [r7, r2]
 8027052:	4417      	add	r7, r2
 8027054:	e79e      	b.n	8026f94 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x4c>
 8027056:	2e00      	cmp	r6, #0
 8027058:	db01      	blt.n	802705e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x116>
 802705a:	45b4      	cmp	ip, r6
 802705c:	dc19      	bgt.n	8027092 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x14a>
 802705e:	468e      	mov	lr, r1
 8027060:	1c73      	adds	r3, r6, #1
 8027062:	f89e b000 	ldrb.w	fp, [lr]
 8027066:	d409      	bmi.n	802707c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x134>
 8027068:	459c      	cmp	ip, r3
 802706a:	dd07      	ble.n	802707c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x134>
 802706c:	b1ed      	cbz	r5, 80270aa <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 802706e:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8027072:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027076:	5cfc      	ldrb	r4, [r7, r3]
 8027078:	443b      	add	r3, r7
 802707a:	e781      	b.n	8026f80 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x38>
 802707c:	780c      	ldrb	r4, [r1, #0]
 802707e:	460b      	mov	r3, r1
 8027080:	e77e      	b.n	8026f80 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x38>
 8027082:	2d0f      	cmp	r5, #15
 8027084:	f891 9000 	ldrb.w	r9, [r1]
 8027088:	d81e      	bhi.n	80270c8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 802708a:	460f      	mov	r7, r1
 802708c:	4688      	mov	r8, r1
 802708e:	46ca      	mov	sl, r9
 8027090:	e786      	b.n	8026fa0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x58>
 8027092:	f812 e00e 	ldrb.w	lr, [r2, lr]
 8027096:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802709a:	449e      	add	lr, r3
 802709c:	e7e0      	b.n	8027060 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x118>
 802709e:	f891 a000 	ldrb.w	sl, [r1]
 80270a2:	460f      	mov	r7, r1
 80270a4:	e776      	b.n	8026f94 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x4c>
 80270a6:	4688      	mov	r8, r1
 80270a8:	e7c4      	b.n	8027034 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xec>
 80270aa:	f1b8 0f00 	cmp.w	r8, #0
 80270ae:	780c      	ldrb	r4, [r1, #0]
 80270b0:	460b      	mov	r3, r1
 80270b2:	f6bf af68 	bge.w	8026f86 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x3e>
 80270b6:	460f      	mov	r7, r1
 80270b8:	4688      	mov	r8, r1
 80270ba:	46a2      	mov	sl, r4
 80270bc:	46a1      	mov	r9, r4
 80270be:	e76c      	b.n	8026f9a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 80270c0:	f891 a000 	ldrb.w	sl, [r1]
 80270c4:	460f      	mov	r7, r1
 80270c6:	e768      	b.n	8026f9a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 80270c8:	4b03      	ldr	r3, [pc, #12]	; (80270d8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x190>)
 80270ca:	4a04      	ldr	r2, [pc, #16]	; (80270dc <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x194>)
 80270cc:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80270d0:	4803      	ldr	r0, [pc, #12]	; (80270e0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x198>)
 80270d2:	f000 ffeb 	bl	80280ac <__assert_func>
 80270d6:	bf00      	nop
 80270d8:	0802b324 	.word	0x0802b324
 80270dc:	0802b99c 	.word	0x0802b99c
 80270e0:	0802b4a8 	.word	0x0802b4a8

080270e4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80270e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80270e8:	ed2d 8b0a 	vpush	{d8-d12}
 80270ec:	eeb0 aa40 	vmov.f32	s20, s0
 80270f0:	eef0 9a60 	vmov.f32	s19, s1
 80270f4:	eeb0 9a41 	vmov.f32	s18, s2
 80270f8:	eef0 8a62 	vmov.f32	s17, s5
 80270fc:	eeb0 8a43 	vmov.f32	s16, s6
 8027100:	eeb0 ca44 	vmov.f32	s24, s8
 8027104:	eef0 ba64 	vmov.f32	s23, s9
 8027108:	eeb0 ba45 	vmov.f32	s22, s10
 802710c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8027110:	b091      	sub	sp, #68	; 0x44
 8027112:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8027116:	e9dd 9525 	ldrd	r9, r5, [sp, #148]	; 0x94
 802711a:	900f      	str	r0, [sp, #60]	; 0x3c
 802711c:	4698      	mov	r8, r3
 802711e:	e9dd 0229 	ldrd	r0, r2, [sp, #164]	; 0xa4
 8027122:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027124:	6841      	ldr	r1, [r0, #4]
 8027126:	fb01 2303 	mla	r3, r1, r3, r2
 802712a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802712c:	6801      	ldr	r1, [r0, #0]
 802712e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8027130:	6852      	ldr	r2, [r2, #4]
 8027132:	6800      	ldr	r0, [r0, #0]
 8027134:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
 8027138:	1d13      	adds	r3, r2, #4
 802713a:	9009      	str	r0, [sp, #36]	; 0x24
 802713c:	930c      	str	r3, [sp, #48]	; 0x30
 802713e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027140:	2b00      	cmp	r3, #0
 8027142:	dc02      	bgt.n	802714a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8027144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027146:	2b00      	cmp	r3, #0
 8027148:	dd66      	ble.n	8027218 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802714a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802714c:	f1b8 0f00 	cmp.w	r8, #0
 8027150:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 8027154:	b221      	sxth	r1, r4
 8027156:	fa0f f78e 	sxth.w	r7, lr
 802715a:	f340 81df 	ble.w	802751c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802715e:	1e4e      	subs	r6, r1, #1
 8027160:	f107 3cff 	add.w	ip, r7, #4294967295
 8027164:	f8cd e01c 	str.w	lr, [sp, #28]
 8027168:	e9dd eb27 	ldrd	lr, fp, [sp, #156]	; 0x9c
 802716c:	ea5f 4329 	movs.w	r3, r9, asr #16
 8027170:	ea4f 4025 	mov.w	r0, r5, asr #16
 8027174:	d405      	bmi.n	8027182 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8027176:	42b3      	cmp	r3, r6
 8027178:	da03      	bge.n	8027182 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802717a:	2800      	cmp	r0, #0
 802717c:	db01      	blt.n	8027182 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802717e:	4560      	cmp	r0, ip
 8027180:	db4f      	blt.n	8027222 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8027182:	1c5a      	adds	r2, r3, #1
 8027184:	d406      	bmi.n	8027194 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8027186:	428a      	cmp	r2, r1
 8027188:	dc04      	bgt.n	8027194 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802718a:	1c42      	adds	r2, r0, #1
 802718c:	d402      	bmi.n	8027194 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802718e:	42ba      	cmp	r2, r7
 8027190:	f340 8157 	ble.w	8027442 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8027194:	f1b8 0801 	subs.w	r8, r8, #1
 8027198:	44f1      	add	r9, lr
 802719a:	445d      	add	r5, fp
 802719c:	f10a 0a04 	add.w	sl, sl, #4
 80271a0:	d1e4      	bne.n	802716c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80271a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80271a4:	2b00      	cmp	r3, #0
 80271a6:	dd37      	ble.n	8027218 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80271a8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80271ac:	ee79 9aab 	vadd.f32	s19, s19, s23
 80271b0:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80271b4:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80271b8:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80271bc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80271c0:	ee76 6a68 	vsub.f32	s13, s12, s17
 80271c4:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80271c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80271cc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80271d0:	ee16 2a90 	vmov	r2, s13
 80271d4:	3b01      	subs	r3, #1
 80271d6:	930a      	str	r3, [sp, #40]	; 0x28
 80271d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80271da:	fb92 f3f3 	sdiv	r3, r2, r3
 80271de:	ee17 2a10 	vmov	r2, s14
 80271e2:	eeb0 7a48 	vmov.f32	s14, s16
 80271e6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80271ea:	ee17 5a10 	vmov	r5, s14
 80271ee:	eeb0 7a68 	vmov.f32	s14, s17
 80271f2:	9327      	str	r3, [sp, #156]	; 0x9c
 80271f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80271f6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80271fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80271fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027200:	9328      	str	r3, [sp, #160]	; 0xa0
 8027202:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027204:	ee17 9a10 	vmov	r9, s14
 8027208:	eeb0 8a67 	vmov.f32	s16, s15
 802720c:	eef0 8a46 	vmov.f32	s17, s12
 8027210:	bf14      	ite	ne
 8027212:	4698      	movne	r8, r3
 8027214:	4690      	moveq	r8, r2
 8027216:	e792      	b.n	802713e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8027218:	b011      	add	sp, #68	; 0x44
 802721a:	ecbd 8b0a 	vpop	{d8-d12}
 802721e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027222:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8027226:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027228:	f108 32ff 	add.w	r2, r8, #4294967295
 802722c:	fb00 9302 	mla	r3, r0, r2, r9
 8027230:	141b      	asrs	r3, r3, #16
 8027232:	9207      	str	r2, [sp, #28]
 8027234:	f100 80a6 	bmi.w	8027384 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8027238:	42b3      	cmp	r3, r6
 802723a:	f280 80a3 	bge.w	8027384 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802723e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027240:	fb03 5302 	mla	r3, r3, r2, r5
 8027244:	141b      	asrs	r3, r3, #16
 8027246:	f100 809d 	bmi.w	8027384 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802724a:	3f01      	subs	r7, #1
 802724c:	42bb      	cmp	r3, r7
 802724e:	f280 8099 	bge.w	8027384 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8027252:	f1b8 0f00 	cmp.w	r8, #0
 8027256:	dda4      	ble.n	80271a2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8027258:	f8cd a020 	str.w	sl, [sp, #32]
 802725c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8027260:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8027264:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8027268:	e065      	b.n	8027336 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802726a:	f890 c001 	ldrb.w	ip, [r0, #1]
 802726e:	1844      	adds	r4, r0, r1
 8027270:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8027274:	44d4      	add	ip, sl
 8027276:	2a00      	cmp	r2, #0
 8027278:	d078      	beq.n	802736c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802727a:	5c40      	ldrb	r0, [r0, r1]
 802727c:	7866      	ldrb	r6, [r4, #1]
 802727e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027282:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8027286:	4450      	add	r0, sl
 8027288:	4456      	add	r6, sl
 802728a:	b29b      	uxth	r3, r3
 802728c:	b292      	uxth	r2, r2
 802728e:	fb03 f402 	mul.w	r4, r3, r2
 8027292:	011b      	lsls	r3, r3, #4
 8027294:	f89c 8000 	ldrb.w	r8, [ip]
 8027298:	f89c e001 	ldrb.w	lr, [ip, #1]
 802729c:	1b19      	subs	r1, r3, r4
 802729e:	f89c c002 	ldrb.w	ip, [ip, #2]
 80272a2:	b289      	uxth	r1, r1
 80272a4:	fb01 fe0e 	mul.w	lr, r1, lr
 80272a8:	fb01 f808 	mul.w	r8, r1, r8
 80272ac:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80272b0:	fb01 f10c 	mul.w	r1, r1, ip
 80272b4:	b292      	uxth	r2, r2
 80272b6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80272ba:	f81a b00b 	ldrb.w	fp, [sl, fp]
 80272be:	f897 c001 	ldrb.w	ip, [r7, #1]
 80272c2:	1a9b      	subs	r3, r3, r2
 80272c4:	78bf      	ldrb	r7, [r7, #2]
 80272c6:	b29b      	uxth	r3, r3
 80272c8:	fb03 880b 	mla	r8, r3, fp, r8
 80272cc:	fb03 ec0c 	mla	ip, r3, ip, lr
 80272d0:	fb03 1307 	mla	r3, r3, r7, r1
 80272d4:	7881      	ldrb	r1, [r0, #2]
 80272d6:	f890 b000 	ldrb.w	fp, [r0]
 80272da:	fb02 3301 	mla	r3, r2, r1, r3
 80272de:	f890 e001 	ldrb.w	lr, [r0, #1]
 80272e2:	78b1      	ldrb	r1, [r6, #2]
 80272e4:	fb02 880b 	mla	r8, r2, fp, r8
 80272e8:	fb02 cc0e 	mla	ip, r2, lr, ip
 80272ec:	fb04 3301 	mla	r3, r4, r1, r3
 80272f0:	f896 b000 	ldrb.w	fp, [r6]
 80272f4:	f896 e001 	ldrb.w	lr, [r6, #1]
 80272f8:	0219      	lsls	r1, r3, #8
 80272fa:	fb04 880b 	mla	r8, r4, fp, r8
 80272fe:	fb04 cc0e 	mla	ip, r4, lr, ip
 8027302:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
 8027306:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8027308:	9a07      	ldr	r2, [sp, #28]
 802730a:	4489      	add	r9, r1
 802730c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802730e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8027312:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027316:	ea48 080c 	orr.w	r8, r8, ip
 802731a:	440d      	add	r5, r1
 802731c:	9908      	ldr	r1, [sp, #32]
 802731e:	3a01      	subs	r2, #1
 8027320:	ea48 0303 	orr.w	r3, r8, r3
 8027324:	9207      	str	r2, [sp, #28]
 8027326:	f841 3b04 	str.w	r3, [r1], #4
 802732a:	3201      	adds	r2, #1
 802732c:	9108      	str	r1, [sp, #32]
 802732e:	d024      	beq.n	802737a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8027330:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027332:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027336:	ea4f 4329 	mov.w	r3, r9, asr #16
 802733a:	1428      	asrs	r0, r5, #16
 802733c:	fb01 3000 	mla	r0, r1, r0, r3
 8027340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027342:	f3c9 3303 	ubfx	r3, r9, #12, #4
 8027346:	f812 b000 	ldrb.w	fp, [r2, r0]
 802734a:	4410      	add	r0, r2
 802734c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8027350:	eb0a 070b 	add.w	r7, sl, fp
 8027354:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8027358:	2b00      	cmp	r3, #0
 802735a:	d186      	bne.n	802726a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802735c:	b14a      	cbz	r2, 8027372 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 802735e:	5c40      	ldrb	r0, [r0, r1]
 8027360:	463e      	mov	r6, r7
 8027362:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027366:	4450      	add	r0, sl
 8027368:	46bc      	mov	ip, r7
 802736a:	e78e      	b.n	802728a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802736c:	463e      	mov	r6, r7
 802736e:	4638      	mov	r0, r7
 8027370:	e78b      	b.n	802728a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8027372:	463e      	mov	r6, r7
 8027374:	4638      	mov	r0, r7
 8027376:	46bc      	mov	ip, r7
 8027378:	e787      	b.n	802728a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802737a:	e9dd a80d 	ldrd	sl, r8, [sp, #52]	; 0x34
 802737e:	eb0a 0a88 	add.w	sl, sl, r8, lsl #2
 8027382:	e70e      	b.n	80271a2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8027384:	f1b8 0f00 	cmp.w	r8, #0
 8027388:	f77f af0b 	ble.w	80271a2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802738c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027390:	ea4f 4329 	mov.w	r3, r9, asr #16
 8027394:	1428      	asrs	r0, r5, #16
 8027396:	4677      	mov	r7, lr
 8027398:	46d0      	mov	r8, sl
 802739a:	f8cd a020 	str.w	sl, [sp, #32]
 802739e:	f8dd a0b0 	ldr.w	sl, [sp, #176]	; 0xb0
 80273a2:	2b00      	cmp	r3, #0
 80273a4:	f3c9 3103 	ubfx	r1, r9, #12, #4
 80273a8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80273ac:	db28      	blt.n	8027400 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80273ae:	1e66      	subs	r6, r4, #1
 80273b0:	42b3      	cmp	r3, r6
 80273b2:	da25      	bge.n	8027400 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80273b4:	2800      	cmp	r0, #0
 80273b6:	db23      	blt.n	8027400 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80273b8:	1e7e      	subs	r6, r7, #1
 80273ba:	42b0      	cmp	r0, r6
 80273bc:	da20      	bge.n	8027400 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80273be:	b224      	sxth	r4, r4
 80273c0:	fb00 3304 	mla	r3, r0, r4, r3
 80273c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80273c6:	5cc7      	ldrb	r7, [r0, r3]
 80273c8:	4403      	add	r3, r0
 80273ca:	980c      	ldr	r0, [sp, #48]	; 0x30
 80273cc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80273d0:	eb00 0c07 	add.w	ip, r0, r7
 80273d4:	2900      	cmp	r1, #0
 80273d6:	d04a      	beq.n	802746e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80273d8:	785e      	ldrb	r6, [r3, #1]
 80273da:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80273de:	4406      	add	r6, r0
 80273e0:	2a00      	cmp	r2, #0
 80273e2:	f000 8098 	beq.w	8027516 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 80273e6:	1918      	adds	r0, r3, r4
 80273e8:	7840      	ldrb	r0, [r0, #1]
 80273ea:	5d1c      	ldrb	r4, [r3, r4]
 80273ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80273ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80273f2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80273f6:	1818      	adds	r0, r3, r0
 80273f8:	18e3      	adds	r3, r4, r3
 80273fa:	900d      	str	r0, [sp, #52]	; 0x34
 80273fc:	930e      	str	r3, [sp, #56]	; 0x38
 80273fe:	e03b      	b.n	8027478 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027400:	1c5e      	adds	r6, r3, #1
 8027402:	d405      	bmi.n	8027410 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8027404:	42a6      	cmp	r6, r4
 8027406:	dc03      	bgt.n	8027410 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8027408:	1c46      	adds	r6, r0, #1
 802740a:	d401      	bmi.n	8027410 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802740c:	42be      	cmp	r6, r7
 802740e:	dd1f      	ble.n	8027450 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027410:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027412:	f1bb 0f00 	cmp.w	fp, #0
 8027416:	4499      	add	r9, r3
 8027418:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802741a:	f108 0804 	add.w	r8, r8, #4
 802741e:	441d      	add	r5, r3
 8027420:	dd07      	ble.n	8027432 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8027422:	e9da 4702 	ldrd	r4, r7, [sl, #8]
 8027426:	f10b 3bff 	add.w	fp, fp, #4294967295
 802742a:	ea4f 4329 	mov.w	r3, r9, asr #16
 802742e:	1428      	asrs	r0, r5, #16
 8027430:	e7b7      	b.n	80273a2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8027432:	e9dd 3a07 	ldrd	r3, sl, [sp, #28]
 8027436:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802743a:	3301      	adds	r3, #1
 802743c:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
 8027440:	e6af      	b.n	80271a2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8027442:	f108 32ff 	add.w	r2, r8, #4294967295
 8027446:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802744a:	4693      	mov	fp, r2
 802744c:	9207      	str	r2, [sp, #28]
 802744e:	e7a2      	b.n	8027396 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 8027450:	b23f      	sxth	r7, r7
 8027452:	b224      	sxth	r4, r4
 8027454:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8027458:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802745c:	e9cd 4700 	strd	r4, r7, [sp]
 8027460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027464:	4641      	mov	r1, r8
 8027466:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027468:	f7ff fd6e 	bl	8026f48 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>
 802746c:	e7d0      	b.n	8027410 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802746e:	2a00      	cmp	r2, #0
 8027470:	d147      	bne.n	8027502 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41e>
 8027472:	4666      	mov	r6, ip
 8027474:	e9cd cc0d 	strd	ip, ip, [sp, #52]	; 0x34
 8027478:	b28b      	uxth	r3, r1
 802747a:	b292      	uxth	r2, r2
 802747c:	fb03 f002 	mul.w	r0, r3, r2
 8027480:	011b      	lsls	r3, r3, #4
 8027482:	f896 e000 	ldrb.w	lr, [r6]
 8027486:	7874      	ldrb	r4, [r6, #1]
 8027488:	1a19      	subs	r1, r3, r0
 802748a:	78b6      	ldrb	r6, [r6, #2]
 802748c:	b289      	uxth	r1, r1
 802748e:	fb01 f404 	mul.w	r4, r1, r4
 8027492:	fb01 fe0e 	mul.w	lr, r1, lr
 8027496:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 802749a:	fb01 f106 	mul.w	r1, r1, r6
 802749e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80274a0:	b292      	uxth	r2, r2
 80274a2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80274a6:	5df7      	ldrb	r7, [r6, r7]
 80274a8:	1a9b      	subs	r3, r3, r2
 80274aa:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80274ae:	f89c c002 	ldrb.w	ip, [ip, #2]
 80274b2:	b29b      	uxth	r3, r3
 80274b4:	fb03 4606 	mla	r6, r3, r6, r4
 80274b8:	fb03 e707 	mla	r7, r3, r7, lr
 80274bc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80274be:	fb03 130c 	mla	r3, r3, ip, r1
 80274c2:	7861      	ldrb	r1, [r4, #1]
 80274c4:	f894 c000 	ldrb.w	ip, [r4]
 80274c8:	78a4      	ldrb	r4, [r4, #2]
 80274ca:	fb02 6601 	mla	r6, r2, r1, r6
 80274ce:	fb02 770c 	mla	r7, r2, ip, r7
 80274d2:	fb02 3104 	mla	r1, r2, r4, r3
 80274d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80274d8:	7862      	ldrb	r2, [r4, #1]
 80274da:	7823      	ldrb	r3, [r4, #0]
 80274dc:	78a4      	ldrb	r4, [r4, #2]
 80274de:	fb00 6602 	mla	r6, r0, r2, r6
 80274e2:	fb00 7303 	mla	r3, r0, r3, r7
 80274e6:	fb00 1204 	mla	r2, r0, r4, r1
 80274ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80274ee:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80274f2:	0212      	lsls	r2, r2, #8
 80274f4:	4333      	orrs	r3, r6
 80274f6:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80274fa:	4313      	orrs	r3, r2
 80274fc:	f8c8 3000 	str.w	r3, [r8]
 8027500:	e786      	b.n	8027410 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8027502:	5d1c      	ldrb	r4, [r3, r4]
 8027504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027506:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802750a:	18e3      	adds	r3, r4, r3
 802750c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8027510:	930e      	str	r3, [sp, #56]	; 0x38
 8027512:	4666      	mov	r6, ip
 8027514:	e7b0      	b.n	8027478 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027516:	e9cd cc0d 	strd	ip, ip, [sp, #52]	; 0x34
 802751a:	e7ad      	b.n	8027478 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802751c:	f43f ae41 	beq.w	80271a2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8027520:	1e4e      	subs	r6, r1, #1
 8027522:	e680      	b.n	8027226 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>

08027524 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>:
 8027524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027528:	b087      	sub	sp, #28
 802752a:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 802752e:	e9dd 0412 	ldrd	r0, r4, [sp, #72]	; 0x48
 8027532:	fb04 070c 	mla	r7, r4, ip, r0
 8027536:	9100      	str	r1, [sp, #0]
 8027538:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
 802753c:	2c00      	cmp	r4, #0
 802753e:	eb02 0b07 	add.w	fp, r2, r7
 8027542:	f104 0501 	add.w	r5, r4, #1
 8027546:	f9bd 8044 	ldrsh.w	r8, [sp, #68]	; 0x44
 802754a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
 802754e:	f89d 6054 	ldrb.w	r6, [sp, #84]	; 0x54
 8027552:	9101      	str	r1, [sp, #4]
 8027554:	db02      	blt.n	802755c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x38>
 8027556:	45a0      	cmp	r8, r4
 8027558:	f300 811a 	bgt.w	8027790 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x26c>
 802755c:	2700      	movs	r7, #0
 802755e:	46be      	mov	lr, r7
 8027560:	46b9      	mov	r9, r7
 8027562:	463c      	mov	r4, r7
 8027564:	2d00      	cmp	r5, #0
 8027566:	db02      	blt.n	802756e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x4a>
 8027568:	45a8      	cmp	r8, r5
 802756a:	f300 812b 	bgt.w	80277c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2a0>
 802756e:	f04f 0c00 	mov.w	ip, #0
 8027572:	46e0      	mov	r8, ip
 8027574:	4665      	mov	r5, ip
 8027576:	f8cd c010 	str.w	ip, [sp, #16]
 802757a:	f1ba 0f0f 	cmp.w	sl, #15
 802757e:	f200 8167 	bhi.w	8027850 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 8027582:	2e0f      	cmp	r6, #15
 8027584:	f200 8164 	bhi.w	8027850 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 8027588:	b2b2      	uxth	r2, r6
 802758a:	fa1f f38a 	uxth.w	r3, sl
 802758e:	fb02 f603 	mul.w	r6, r2, r3
 8027592:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8027596:	b292      	uxth	r2, r2
 8027598:	fb02 fa08 	mul.w	sl, r2, r8
 802759c:	fb06 fb0c 	mul.w	fp, r6, ip
 80275a0:	011b      	lsls	r3, r3, #4
 80275a2:	1b98      	subs	r0, r3, r6
 80275a4:	b280      	uxth	r0, r0
 80275a6:	9002      	str	r0, [sp, #8]
 80275a8:	fb00 f007 	mul.w	r0, r0, r7
 80275ac:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80275b0:	1a9b      	subs	r3, r3, r2
 80275b2:	b29b      	uxth	r3, r3
 80275b4:	fb03 000e 	mla	r0, r3, lr, r0
 80275b8:	4450      	add	r0, sl
 80275ba:	4458      	add	r0, fp
 80275bc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80275c0:	9003      	str	r0, [sp, #12]
 80275c2:	2800      	cmp	r0, #0
 80275c4:	f000 80e1 	beq.w	802778a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x266>
 80275c8:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80275cc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80275d0:	f009 1bff 	and.w	fp, r9, #16711935	; 0xff00ff
 80275d4:	9105      	str	r1, [sp, #20]
 80275d6:	d01d      	beq.n	8027614 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xf0>
 80275d8:	fb0b fb0e 	mul.w	fp, fp, lr
 80275dc:	fb01 fe0e 	mul.w	lr, r1, lr
 80275e0:	ea4f 2a1b 	mov.w	sl, fp, lsr #8
 80275e4:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 80275e8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80275ec:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 80275f0:	44d3      	add	fp, sl
 80275f2:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 80275f6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80275fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80275fe:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8027602:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027606:	ea4b 0e0e 	orr.w	lr, fp, lr
 802760a:	f40e 417f 	and.w	r1, lr, #65280	; 0xff00
 802760e:	f00e 1bff 	and.w	fp, lr, #16711935	; 0xff00ff
 8027612:	9105      	str	r1, [sp, #20]
 8027614:	2fff      	cmp	r7, #255	; 0xff
 8027616:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802761a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802761e:	d01b      	beq.n	8027658 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x134>
 8027620:	fb0e fe07 	mul.w	lr, lr, r7
 8027624:	fb04 f407 	mul.w	r4, r4, r7
 8027628:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 802762c:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8027630:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027634:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8027638:	44d6      	add	lr, sl
 802763a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802763e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027642:	0a24      	lsrs	r4, r4, #8
 8027644:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027648:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802764c:	ea4e 0404 	orr.w	r4, lr, r4
 8027650:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8027654:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027658:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802765c:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8027660:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027664:	d019      	beq.n	802769a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x176>
 8027666:	fb00 f008 	mul.w	r0, r0, r8
 802766a:	fb05 f508 	mul.w	r5, r5, r8
 802766e:	ea4f 2910 	mov.w	r9, r0, lsr #8
 8027672:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8027676:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802767a:	f505 7780 	add.w	r7, r5, #256	; 0x100
 802767e:	4448      	add	r0, r9
 8027680:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8027684:	0a00      	lsrs	r0, r0, #8
 8027686:	0a2d      	lsrs	r5, r5, #8
 8027688:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802768c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027690:	4305      	orrs	r5, r0
 8027692:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8027696:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802769a:	9904      	ldr	r1, [sp, #16]
 802769c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80276a0:	f001 1aff 	and.w	sl, r1, #16711935	; 0xff00ff
 80276a4:	f401 497f 	and.w	r9, r1, #65280	; 0xff00
 80276a8:	d01c      	beq.n	80276e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x1c0>
 80276aa:	fb0a fa0c 	mul.w	sl, sl, ip
 80276ae:	fb09 fc0c 	mul.w	ip, r9, ip
 80276b2:	ea4f 281a 	mov.w	r8, sl, lsr #8
 80276b6:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80276ba:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80276be:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80276c2:	44c2      	add	sl, r8
 80276c4:	eb07 2c1c 	add.w	ip, r7, ip, lsr #8
 80276c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80276cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80276d0:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 80276d4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80276d8:	ea4a 090c 	orr.w	r9, sl, ip
 80276dc:	f009 1aff 	and.w	sl, r9, #16711935	; 0xff00ff
 80276e0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80276e4:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 80276e8:	9903      	ldr	r1, [sp, #12]
 80276ea:	fb01 fc08 	mul.w	ip, r1, r8
 80276ee:	f10c 0701 	add.w	r7, ip, #1
 80276f2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80276f6:	ea6f 2c17 	mvn.w	ip, r7, lsr #8
 80276fa:	9902      	ldr	r1, [sp, #8]
 80276fc:	fa5f f78c 	uxtb.w	r7, ip
 8027700:	fb04 f401 	mul.w	r4, r4, r1
 8027704:	fb0e fe01 	mul.w	lr, lr, r1
 8027708:	9905      	ldr	r1, [sp, #20]
 802770a:	fb0b ee03 	mla	lr, fp, r3, lr
 802770e:	fb01 4303 	mla	r3, r1, r3, r4
 8027712:	fb00 e002 	mla	r0, r0, r2, lr
 8027716:	fb05 3502 	mla	r5, r5, r2, r3
 802771a:	fb0a 0a06 	mla	sl, sl, r6, r0
 802771e:	fb09 5906 	mla	r9, r9, r6, r5
 8027722:	ea4f 261a 	mov.w	r6, sl, lsr #8
 8027726:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802772a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802772e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027732:	ea46 0609 	orr.w	r6, r6, r9
 8027736:	b2f2      	uxtb	r2, r6
 8027738:	f3c6 2307 	ubfx	r3, r6, #8, #8
 802773c:	0c36      	lsrs	r6, r6, #16
 802773e:	9900      	ldr	r1, [sp, #0]
 8027740:	fb12 f408 	smulbb	r4, r2, r8
 8027744:	fb13 f008 	smulbb	r0, r3, r8
 8027748:	fb16 f808 	smulbb	r8, r6, r8
 802774c:	780a      	ldrb	r2, [r1, #0]
 802774e:	784b      	ldrb	r3, [r1, #1]
 8027750:	788e      	ldrb	r6, [r1, #2]
 8027752:	fb02 4207 	mla	r2, r2, r7, r4
 8027756:	fb03 0307 	mla	r3, r3, r7, r0
 802775a:	fb06 8807 	mla	r8, r6, r7, r8
 802775e:	b292      	uxth	r2, r2
 8027760:	b29b      	uxth	r3, r3
 8027762:	fa1f f888 	uxth.w	r8, r8
 8027766:	1c54      	adds	r4, r2, #1
 8027768:	1c58      	adds	r0, r3, #1
 802776a:	f108 0701 	add.w	r7, r8, #1
 802776e:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8027772:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027776:	eb07 2818 	add.w	r8, r7, r8, lsr #8
 802777a:	1212      	asrs	r2, r2, #8
 802777c:	121b      	asrs	r3, r3, #8
 802777e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8027782:	700a      	strb	r2, [r1, #0]
 8027784:	704b      	strb	r3, [r1, #1]
 8027786:	f881 8002 	strb.w	r8, [r1, #2]
 802778a:	b007      	add	sp, #28
 802778c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027790:	2800      	cmp	r0, #0
 8027792:	db01      	blt.n	8027798 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x274>
 8027794:	4584      	cmp	ip, r0
 8027796:	dc40      	bgt.n	802781a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2f6>
 8027798:	f04f 0e00 	mov.w	lr, #0
 802779c:	46f1      	mov	r9, lr
 802779e:	1c42      	adds	r2, r0, #1
 80277a0:	d42b      	bmi.n	80277fa <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2d6>
 80277a2:	4594      	cmp	ip, r2
 80277a4:	dd29      	ble.n	80277fa <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2d6>
 80277a6:	f1ba 0f00 	cmp.w	sl, #0
 80277aa:	d005      	beq.n	80277b8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x294>
 80277ac:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80277b0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80277b4:	0e27      	lsrs	r7, r4, #24
 80277b6:	e6d5      	b.n	8027564 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x40>
 80277b8:	2d00      	cmp	r5, #0
 80277ba:	db41      	blt.n	8027840 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x31c>
 80277bc:	45a8      	cmp	r8, r5
 80277be:	dd3f      	ble.n	8027840 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x31c>
 80277c0:	4657      	mov	r7, sl
 80277c2:	4654      	mov	r4, sl
 80277c4:	b1e6      	cbz	r6, 8027800 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2dc>
 80277c6:	2800      	cmp	r0, #0
 80277c8:	db32      	blt.n	8027830 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x30c>
 80277ca:	4584      	cmp	ip, r0
 80277cc:	dd30      	ble.n	8027830 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x30c>
 80277ce:	f81b 200c 	ldrb.w	r2, [fp, ip]
 80277d2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80277d6:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80277da:	3001      	adds	r0, #1
 80277dc:	d423      	bmi.n	8027826 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x302>
 80277de:	4584      	cmp	ip, r0
 80277e0:	dd21      	ble.n	8027826 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x302>
 80277e2:	f1ba 0f00 	cmp.w	sl, #0
 80277e6:	d027      	beq.n	8027838 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x314>
 80277e8:	44dc      	add	ip, fp
 80277ea:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80277ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80277f2:	9304      	str	r3, [sp, #16]
 80277f4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80277f8:	e6bf      	b.n	802757a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x56>
 80277fa:	2700      	movs	r7, #0
 80277fc:	463c      	mov	r4, r7
 80277fe:	e6b1      	b.n	8027564 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x40>
 8027800:	f1ba 0f0f 	cmp.w	sl, #15
 8027804:	d824      	bhi.n	8027850 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 8027806:	fa1f f38a 	uxth.w	r3, sl
 802780a:	4632      	mov	r2, r6
 802780c:	46b3      	mov	fp, r6
 802780e:	46b2      	mov	sl, r6
 8027810:	9604      	str	r6, [sp, #16]
 8027812:	4635      	mov	r5, r6
 8027814:	46b4      	mov	ip, r6
 8027816:	46b0      	mov	r8, r6
 8027818:	e6c2      	b.n	80275a0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x7c>
 802781a:	5dd2      	ldrb	r2, [r2, r7]
 802781c:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8027820:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 8027824:	e7bb      	b.n	802779e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x27a>
 8027826:	f04f 0c00 	mov.w	ip, #0
 802782a:	f8cd c010 	str.w	ip, [sp, #16]
 802782e:	e6a4      	b.n	802757a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x56>
 8027830:	f04f 0800 	mov.w	r8, #0
 8027834:	4645      	mov	r5, r8
 8027836:	e7d0      	b.n	80277da <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2b6>
 8027838:	f8cd a010 	str.w	sl, [sp, #16]
 802783c:	46d4      	mov	ip, sl
 802783e:	e6a0      	b.n	8027582 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x5e>
 8027840:	4654      	mov	r4, sl
 8027842:	f8cd a010 	str.w	sl, [sp, #16]
 8027846:	4655      	mov	r5, sl
 8027848:	46d4      	mov	ip, sl
 802784a:	46d0      	mov	r8, sl
 802784c:	4657      	mov	r7, sl
 802784e:	e698      	b.n	8027582 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x5e>
 8027850:	4b03      	ldr	r3, [pc, #12]	; (8027860 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x33c>)
 8027852:	4a04      	ldr	r2, [pc, #16]	; (8027864 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x340>)
 8027854:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8027858:	4803      	ldr	r0, [pc, #12]	; (8027868 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x344>)
 802785a:	f000 fc27 	bl	80280ac <__assert_func>
 802785e:	bf00      	nop
 8027860:	0802b324 	.word	0x0802b324
 8027864:	0802b99c 	.word	0x0802b99c
 8027868:	0802b4a8 	.word	0x0802b4a8

0802786c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802786c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027870:	ed2d 8b08 	vpush	{d8-d11}
 8027874:	b0a9      	sub	sp, #164	; 0xa4
 8027876:	e9dd ba3b 	ldrd	fp, sl, [sp, #236]	; 0xec
 802787a:	eeb0 aa40 	vmov.f32	s20, s0
 802787e:	46d9      	mov	r9, fp
 8027880:	eef0 9a60 	vmov.f32	s19, s1
 8027884:	eeb0 9a41 	vmov.f32	s18, s2
 8027888:	eef0 8a62 	vmov.f32	s17, s5
 802788c:	eeb0 8a43 	vmov.f32	s16, s6
 8027890:	eef0 ba44 	vmov.f32	s23, s8
 8027894:	eeb0 ba64 	vmov.f32	s22, s9
 8027898:	eef0 aa45 	vmov.f32	s21, s10
 802789c:	46d3      	mov	fp, sl
 802789e:	9022      	str	r0, [sp, #136]	; 0x88
 80278a0:	983f      	ldr	r0, [sp, #252]	; 0xfc
 80278a2:	9115      	str	r1, [sp, #84]	; 0x54
 80278a4:	9218      	str	r2, [sp, #96]	; 0x60
 80278a6:	6841      	ldr	r1, [r0, #4]
 80278a8:	9a40      	ldr	r2, [sp, #256]	; 0x100
 80278aa:	469e      	mov	lr, r3
 80278ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80278ae:	6807      	ldr	r7, [r0, #0]
 80278b0:	fb01 2303 	mla	r3, r1, r3, r2
 80278b4:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80278b6:	9842      	ldr	r0, [sp, #264]	; 0x108
 80278b8:	6852      	ldr	r2, [r2, #4]
 80278ba:	f89d 110c 	ldrb.w	r1, [sp, #268]	; 0x10c
 80278be:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80278c2:	6800      	ldr	r0, [r0, #0]
 80278c4:	1d13      	adds	r3, r2, #4
 80278c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80278c8:	b28b      	uxth	r3, r1
 80278ca:	9123      	str	r1, [sp, #140]	; 0x8c
 80278cc:	9011      	str	r0, [sp, #68]	; 0x44
 80278ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80278d0:	9712      	str	r7, [sp, #72]	; 0x48
 80278d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80278d4:	2b00      	cmp	r3, #0
 80278d6:	dc02      	bgt.n	80278de <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80278d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80278da:	2b00      	cmp	r3, #0
 80278dc:	dd68      	ble.n	80279b0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 80278de:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80278e0:	f1be 0f00 	cmp.w	lr, #0
 80278e4:	e9d3 5702 	ldrd	r5, r7, [r3, #8]
 80278e8:	b228      	sxth	r0, r5
 80278ea:	b23e      	sxth	r6, r7
 80278ec:	f340 83a0 	ble.w	8028030 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c4>
 80278f0:	e9dd 8a3d 	ldrd	r8, sl, [sp, #244]	; 0xf4
 80278f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80278f6:	1e44      	subs	r4, r0, #1
 80278f8:	f106 3cff 	add.w	ip, r6, #4294967295
 80278fc:	9709      	str	r7, [sp, #36]	; 0x24
 80278fe:	ea5f 4329 	movs.w	r3, r9, asr #16
 8027902:	ea4f 422b 	mov.w	r2, fp, asr #16
 8027906:	d405      	bmi.n	8027914 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027908:	42a3      	cmp	r3, r4
 802790a:	da03      	bge.n	8027914 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802790c:	2a00      	cmp	r2, #0
 802790e:	db01      	blt.n	8027914 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027910:	4562      	cmp	r2, ip
 8027912:	db52      	blt.n	80279ba <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8027914:	1c5f      	adds	r7, r3, #1
 8027916:	d406      	bmi.n	8027926 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8027918:	4287      	cmp	r7, r0
 802791a:	dc04      	bgt.n	8027926 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802791c:	1c57      	adds	r7, r2, #1
 802791e:	d402      	bmi.n	8027926 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8027920:	42b7      	cmp	r7, r6
 8027922:	f340 835f 	ble.w	8027fe4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>
 8027926:	f1be 0e01 	subs.w	lr, lr, #1
 802792a:	44c1      	add	r9, r8
 802792c:	44d3      	add	fp, sl
 802792e:	f101 0104 	add.w	r1, r1, #4
 8027932:	d1e4      	bne.n	80278fe <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027934:	9112      	str	r1, [sp, #72]	; 0x48
 8027936:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027938:	2b00      	cmp	r3, #0
 802793a:	dd39      	ble.n	80279b0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 802793c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027940:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027944:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027948:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802794c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027950:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8027954:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027958:	ee76 6a68 	vsub.f32	s13, s12, s17
 802795c:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8027960:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027964:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027968:	ee16 2a90 	vmov	r2, s13
 802796c:	3b01      	subs	r3, #1
 802796e:	9315      	str	r3, [sp, #84]	; 0x54
 8027970:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8027972:	fb92 f3f3 	sdiv	r3, r2, r3
 8027976:	ee17 2a10 	vmov	r2, s14
 802797a:	eeb0 7a48 	vmov.f32	s14, s16
 802797e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027982:	ee17 ba10 	vmov	fp, s14
 8027986:	eeb0 7a68 	vmov.f32	s14, s17
 802798a:	933d      	str	r3, [sp, #244]	; 0xf4
 802798c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802798e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027992:	fb92 f3f3 	sdiv	r3, r2, r3
 8027996:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027998:	933e      	str	r3, [sp, #248]	; 0xf8
 802799a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802799c:	ee17 9a10 	vmov	r9, s14
 80279a0:	eeb0 8a67 	vmov.f32	s16, s15
 80279a4:	eef0 8a46 	vmov.f32	s17, s12
 80279a8:	bf14      	ite	ne
 80279aa:	469e      	movne	lr, r3
 80279ac:	4696      	moveq	lr, r2
 80279ae:	e790      	b.n	80278d2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80279b0:	b029      	add	sp, #164	; 0xa4
 80279b2:	ecbd 8b08 	vpop	{d8-d11}
 80279b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80279ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80279bc:	9112      	str	r1, [sp, #72]	; 0x48
 80279be:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80279c0:	f10e 32ff 	add.w	r2, lr, #4294967295
 80279c4:	fb01 9302 	mla	r3, r1, r2, r9
 80279c8:	141b      	asrs	r3, r3, #16
 80279ca:	920a      	str	r2, [sp, #40]	; 0x28
 80279cc:	f100 816a 	bmi.w	8027ca4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80279d0:	42a3      	cmp	r3, r4
 80279d2:	f280 8167 	bge.w	8027ca4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80279d6:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80279d8:	fb03 b302 	mla	r3, r3, r2, fp
 80279dc:	141b      	asrs	r3, r3, #16
 80279de:	f100 8161 	bmi.w	8027ca4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80279e2:	3e01      	subs	r6, #1
 80279e4:	42b3      	cmp	r3, r6
 80279e6:	f280 815d 	bge.w	8027ca4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80279ea:	f1be 0f00 	cmp.w	lr, #0
 80279ee:	dda2      	ble.n	8027936 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80279f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80279f2:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 80279f6:	3304      	adds	r3, #4
 80279f8:	9309      	str	r3, [sp, #36]	; 0x24
 80279fa:	f8cd b0f0 	str.w	fp, [sp, #240]	; 0xf0
 80279fe:	4606      	mov	r6, r0
 8027a00:	465b      	mov	r3, fp
 8027a02:	e12a      	b.n	8027c5a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8027a04:	785f      	ldrb	r7, [r3, #1]
 8027a06:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8027a0a:	9713      	str	r7, [sp, #76]	; 0x4c
 8027a0c:	0e3f      	lsrs	r7, r7, #24
 8027a0e:	970c      	str	r7, [sp, #48]	; 0x30
 8027a10:	b16a      	cbz	r2, 8027a2e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027a12:	199f      	adds	r7, r3, r6
 8027a14:	5d9b      	ldrb	r3, [r3, r6]
 8027a16:	462e      	mov	r6, r5
 8027a18:	787f      	ldrb	r7, [r7, #1]
 8027a1a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027a1e:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8027a22:	9314      	str	r3, [sp, #80]	; 0x50
 8027a24:	9516      	str	r5, [sp, #88]	; 0x58
 8027a26:	0e1b      	lsrs	r3, r3, #24
 8027a28:	0e2d      	lsrs	r5, r5, #24
 8027a2a:	950e      	str	r5, [sp, #56]	; 0x38
 8027a2c:	930d      	str	r3, [sp, #52]	; 0x34
 8027a2e:	fa1f fc81 	uxth.w	ip, r1
 8027a32:	b292      	uxth	r2, r2
 8027a34:	fb0c f602 	mul.w	r6, ip, r2
 8027a38:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8027a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027a3e:	ebac 0706 	sub.w	r7, ip, r6
 8027a42:	b2bf      	uxth	r7, r7
 8027a44:	fb07 f103 	mul.w	r1, r7, r3
 8027a48:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8027a4c:	b292      	uxth	r2, r2
 8027a4e:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8027a52:	1a9b      	subs	r3, r3, r2
 8027a54:	b29b      	uxth	r3, r3
 8027a56:	fb03 1104 	mla	r1, r3, r4, r1
 8027a5a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027a5c:	fb02 1105 	mla	r1, r2, r5, r1
 8027a60:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027a62:	fb06 1105 	mla	r1, r6, r5, r1
 8027a66:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027a6a:	2900      	cmp	r1, #0
 8027a6c:	f000 80e3 	beq.w	8027c36 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8027a70:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8027a74:	2cff      	cmp	r4, #255	; 0xff
 8027a76:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027a7a:	950f      	str	r5, [sp, #60]	; 0x3c
 8027a7c:	9010      	str	r0, [sp, #64]	; 0x40
 8027a7e:	d01e      	beq.n	8027abe <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8027a80:	fb00 f004 	mul.w	r0, r0, r4
 8027a84:	fb05 fe04 	mul.w	lr, r5, r4
 8027a88:	4604      	mov	r4, r0
 8027a8a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8027a8e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8027a92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027a96:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027a9a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8027a9e:	44e6      	add	lr, ip
 8027aa0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027aa4:	0a24      	lsrs	r4, r4, #8
 8027aa6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027aaa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027aae:	ea4e 0e04 	orr.w	lr, lr, r4
 8027ab2:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8027ab6:	900f      	str	r0, [sp, #60]	; 0x3c
 8027ab8:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 8027abc:	9010      	str	r0, [sp, #64]	; 0x40
 8027abe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027ac0:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 8027ac4:	f400 487f 	and.w	r8, r0, #65280	; 0xff00
 8027ac8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027aca:	28ff      	cmp	r0, #255	; 0xff
 8027acc:	d01c      	beq.n	8027b08 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8027ace:	fb0e fe00 	mul.w	lr, lr, r0
 8027ad2:	fb08 f800 	mul.w	r8, r8, r0
 8027ad6:	ea4f 241e 	mov.w	r4, lr, lsr #8
 8027ada:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027ade:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027ae2:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8027ae6:	44a6      	add	lr, r4
 8027ae8:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8027aec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027af0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027af4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027af8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027afc:	ea4e 0808 	orr.w	r8, lr, r8
 8027b00:	f008 1eff 	and.w	lr, r8, #16711935	; 0xff00ff
 8027b04:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027b08:	9814      	ldr	r0, [sp, #80]	; 0x50
 8027b0a:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 8027b0e:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 8027b12:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027b14:	28ff      	cmp	r0, #255	; 0xff
 8027b16:	d01c      	beq.n	8027b52 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8027b18:	fb0c fc00 	mul.w	ip, ip, r0
 8027b1c:	fb0a fa00 	mul.w	sl, sl, r0
 8027b20:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8027b24:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027b28:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027b2c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8027b30:	44a4      	add	ip, r4
 8027b32:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8027b36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027b3a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027b3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027b42:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027b46:	ea4c 0a0a 	orr.w	sl, ip, sl
 8027b4a:	f00a 1cff 	and.w	ip, sl, #16711935	; 0xff00ff
 8027b4e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027b52:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8027b54:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8027b58:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8027b5c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027b5e:	2cff      	cmp	r4, #255	; 0xff
 8027b60:	d019      	beq.n	8027b96 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8027b62:	fb00 f004 	mul.w	r0, r0, r4
 8027b66:	fb0b fb04 	mul.w	fp, fp, r4
 8027b6a:	0a04      	lsrs	r4, r0, #8
 8027b6c:	f004 15ff 	and.w	r5, r4, #16711935	; 0xff00ff
 8027b70:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8027b74:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 8027b78:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 8027b7c:	4428      	add	r0, r5
 8027b7e:	0a00      	lsrs	r0, r0, #8
 8027b80:	0a24      	lsrs	r4, r4, #8
 8027b82:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027b86:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8027b8a:	ea40 0b0b 	orr.w	fp, r0, fp
 8027b8e:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 8027b92:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027b96:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8027b98:	fb0e fe07 	mul.w	lr, lr, r7
 8027b9c:	fb01 f105 	mul.w	r1, r1, r5
 8027ba0:	1c4c      	adds	r4, r1, #1
 8027ba2:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8027ba6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8027baa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027bac:	fb08 f707 	mul.w	r7, r8, r7
 8027bb0:	fb04 ee03 	mla	lr, r4, r3, lr
 8027bb4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027bb6:	fb0c ee02 	mla	lr, ip, r2, lr
 8027bba:	fb04 7703 	mla	r7, r4, r3, r7
 8027bbe:	fb0a 7702 	mla	r7, sl, r2, r7
 8027bc2:	fb00 ee06 	mla	lr, r0, r6, lr
 8027bc6:	fb0b 7706 	mla	r7, fp, r6, r7
 8027bca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027bce:	0a3f      	lsrs	r7, r7, #8
 8027bd0:	f407 437f 	and.w	r3, r7, #65280	; 0xff00
 8027bd4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027bd8:	ea4e 0303 	orr.w	r3, lr, r3
 8027bdc:	b2df      	uxtb	r7, r3
 8027bde:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8027be2:	0c1b      	lsrs	r3, r3, #16
 8027be4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8027be6:	fb17 f705 	smulbb	r7, r7, r5
 8027bea:	fb16 f605 	smulbb	r6, r6, r5
 8027bee:	fb13 f305 	smulbb	r3, r3, r5
 8027bf2:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 8027bf6:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 8027bfa:	f814 cc02 	ldrb.w	ip, [r4, #-2]
 8027bfe:	b2c9      	uxtb	r1, r1
 8027c00:	fb00 7001 	mla	r0, r0, r1, r7
 8027c04:	fb02 6201 	mla	r2, r2, r1, r6
 8027c08:	fb0c 3101 	mla	r1, ip, r1, r3
 8027c0c:	b280      	uxth	r0, r0
 8027c0e:	b292      	uxth	r2, r2
 8027c10:	b289      	uxth	r1, r1
 8027c12:	1c47      	adds	r7, r0, #1
 8027c14:	1c56      	adds	r6, r2, #1
 8027c16:	1c4b      	adds	r3, r1, #1
 8027c18:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8027c1c:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8027c20:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027c24:	1200      	asrs	r0, r0, #8
 8027c26:	1212      	asrs	r2, r2, #8
 8027c28:	1209      	asrs	r1, r1, #8
 8027c2a:	f804 0c04 	strb.w	r0, [r4, #-4]
 8027c2e:	f804 2c03 	strb.w	r2, [r4, #-3]
 8027c32:	f804 1c02 	strb.w	r1, [r4, #-2]
 8027c36:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8027c38:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8027c3a:	4491      	add	r9, r2
 8027c3c:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8027c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027c40:	440a      	add	r2, r1
 8027c42:	923c      	str	r2, [sp, #240]	; 0xf0
 8027c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027c46:	3b01      	subs	r3, #1
 8027c48:	930a      	str	r3, [sp, #40]	; 0x28
 8027c4a:	3204      	adds	r2, #4
 8027c4c:	3301      	adds	r3, #1
 8027c4e:	9209      	str	r2, [sp, #36]	; 0x24
 8027c50:	d021      	beq.n	8027c96 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8027c52:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8027c54:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8027c58:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8027c5a:	ea4f 4229 	mov.w	r2, r9, asr #16
 8027c5e:	141b      	asrs	r3, r3, #16
 8027c60:	fb06 2303 	mla	r3, r6, r3, r2
 8027c64:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027c66:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027c68:	5ce2      	ldrb	r2, [r4, r3]
 8027c6a:	f3c9 3103 	ubfx	r1, r9, #12, #4
 8027c6e:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 8027c72:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8027c74:	4423      	add	r3, r4
 8027c76:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8027c7a:	0e04      	lsrs	r4, r0, #24
 8027c7c:	2900      	cmp	r1, #0
 8027c7e:	f47f aec1 	bne.w	8027a04 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8027c82:	2a00      	cmp	r2, #0
 8027c84:	f43f aed3 	beq.w	8027a2e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027c88:	5d9b      	ldrb	r3, [r3, r6]
 8027c8a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027c8e:	9314      	str	r3, [sp, #80]	; 0x50
 8027c90:	0e1b      	lsrs	r3, r3, #24
 8027c92:	930d      	str	r3, [sp, #52]	; 0x34
 8027c94:	e6cb      	b.n	8027a2e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027c96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027c98:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 8027c9c:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 8027ca0:	9312      	str	r3, [sp, #72]	; 0x48
 8027ca2:	e648      	b.n	8027936 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8027ca4:	f1be 0f00 	cmp.w	lr, #0
 8027ca8:	f77f ae45 	ble.w	8027936 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8027cac:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8027cb0:	ea4f 4329 	mov.w	r3, r9, asr #16
 8027cb4:	ea4f 422b 	mov.w	r2, fp, asr #16
 8027cb8:	2b00      	cmp	r3, #0
 8027cba:	46be      	mov	lr, r7
 8027cbc:	4629      	mov	r1, r5
 8027cbe:	e9dd 653d 	ldrd	r6, r5, [sp, #244]	; 0xf4
 8027cc2:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8027cc6:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8027cc8:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8027ccc:	f3cb 3703 	ubfx	r7, fp, #12, #4
 8027cd0:	f2c0 815d 	blt.w	8027f8e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8027cd4:	f101 3cff 	add.w	ip, r1, #4294967295
 8027cd8:	4563      	cmp	r3, ip
 8027cda:	f280 8158 	bge.w	8027f8e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8027cde:	2a00      	cmp	r2, #0
 8027ce0:	f2c0 8155 	blt.w	8027f8e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8027ce4:	f10e 3cff 	add.w	ip, lr, #4294967295
 8027ce8:	4562      	cmp	r2, ip
 8027cea:	f280 8150 	bge.w	8027f8e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8027cee:	fa0f fc81 	sxth.w	ip, r1
 8027cf2:	fb02 330c 	mla	r3, r2, ip, r3
 8027cf6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027cf8:	5cd1      	ldrb	r1, [r2, r3]
 8027cfa:	18d3      	adds	r3, r2, r3
 8027cfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027cfe:	469e      	mov	lr, r3
 8027d00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027d04:	0e19      	lsrs	r1, r3, #24
 8027d06:	9309      	str	r3, [sp, #36]	; 0x24
 8027d08:	910f      	str	r1, [sp, #60]	; 0x3c
 8027d0a:	2800      	cmp	r0, #0
 8027d0c:	f000 8171 	beq.w	8027ff2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x786>
 8027d10:	4671      	mov	r1, lr
 8027d12:	f89e e001 	ldrb.w	lr, [lr, #1]
 8027d16:	4613      	mov	r3, r2
 8027d18:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8027d1c:	9224      	str	r2, [sp, #144]	; 0x90
 8027d1e:	0e12      	lsrs	r2, r2, #24
 8027d20:	921a      	str	r2, [sp, #104]	; 0x68
 8027d22:	2f00      	cmp	r7, #0
 8027d24:	f040 8171 	bne.w	802800a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79e>
 8027d28:	b280      	uxth	r0, r0
 8027d2a:	b2bf      	uxth	r7, r7
 8027d2c:	fb00 f207 	mul.w	r2, r0, r7
 8027d30:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 8027d34:	ebac 0002 	sub.w	r0, ip, r2
 8027d38:	b280      	uxth	r0, r0
 8027d3a:	4603      	mov	r3, r0
 8027d3c:	9010      	str	r0, [sp, #64]	; 0x40
 8027d3e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8027d40:	ebc2 1707 	rsb	r7, r2, r7, lsl #4
 8027d44:	fb03 f000 	mul.w	r0, r3, r0
 8027d48:	fa1f fe87 	uxth.w	lr, r7
 8027d4c:	f5cc 7780 	rsb	r7, ip, #256	; 0x100
 8027d50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027d52:	eba7 070e 	sub.w	r7, r7, lr
 8027d56:	b2bf      	uxth	r7, r7
 8027d58:	fb07 0003 	mla	r0, r7, r3, r0
 8027d5c:	9719      	str	r7, [sp, #100]	; 0x64
 8027d5e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8027d60:	fb0e 0007 	mla	r0, lr, r7, r0
 8027d64:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8027d66:	fb02 0007 	mla	r0, r2, r7, r0
 8027d6a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027d6e:	900f      	str	r0, [sp, #60]	; 0x3c
 8027d70:	2800      	cmp	r0, #0
 8027d72:	f000 80f6 	beq.w	8027f62 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8027d76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027d78:	2bff      	cmp	r3, #255	; 0xff
 8027d7a:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 8027d7e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027d82:	901d      	str	r0, [sp, #116]	; 0x74
 8027d84:	9109      	str	r1, [sp, #36]	; 0x24
 8027d86:	d01b      	beq.n	8027dc0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x554>
 8027d88:	fb01 f103 	mul.w	r1, r1, r3
 8027d8c:	fb00 f003 	mul.w	r0, r0, r3
 8027d90:	460b      	mov	r3, r1
 8027d92:	0a01      	lsrs	r1, r0, #8
 8027d94:	f100 1701 	add.w	r7, r0, #65537	; 0x10001
 8027d98:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027d9c:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8027da0:	4439      	add	r1, r7
 8027da2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027da6:	0a09      	lsrs	r1, r1, #8
 8027da8:	0a1b      	lsrs	r3, r3, #8
 8027daa:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027dae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027db2:	430b      	orrs	r3, r1
 8027db4:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8027db8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027dbc:	911d      	str	r1, [sp, #116]	; 0x74
 8027dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8027dc0:	9924      	ldr	r1, [sp, #144]	; 0x90
 8027dc2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8027dc4:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8027dc8:	2fff      	cmp	r7, #255	; 0xff
 8027dca:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027dce:	931e      	str	r3, [sp, #120]	; 0x78
 8027dd0:	911f      	str	r1, [sp, #124]	; 0x7c
 8027dd2:	d01c      	beq.n	8027e0e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 8027dd4:	fb01 f107 	mul.w	r1, r1, r7
 8027dd8:	fb03 f307 	mul.w	r3, r3, r7
 8027ddc:	460f      	mov	r7, r1
 8027dde:	0a19      	lsrs	r1, r3, #8
 8027de0:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8027de4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027de8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8027dec:	4401      	add	r1, r0
 8027dee:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8027df2:	0a09      	lsrs	r1, r1, #8
 8027df4:	0a1b      	lsrs	r3, r3, #8
 8027df6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027dfa:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027dfe:	ea41 0003 	orr.w	r0, r1, r3
 8027e02:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8027e06:	931e      	str	r3, [sp, #120]	; 0x78
 8027e08:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8027e0c:	931f      	str	r3, [sp, #124]	; 0x7c
 8027e0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027e10:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8027e14:	f403 4c7f 	and.w	ip, r3, #65280	; 0xff00
 8027e18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027e1a:	9120      	str	r1, [sp, #128]	; 0x80
 8027e1c:	2bff      	cmp	r3, #255	; 0xff
 8027e1e:	d01b      	beq.n	8027e58 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8027e20:	fb01 f103 	mul.w	r1, r1, r3
 8027e24:	fb0c fc03 	mul.w	ip, ip, r3
 8027e28:	0a08      	lsrs	r0, r1, #8
 8027e2a:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 8027e2e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027e32:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 8027e36:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027e3a:	4401      	add	r1, r0
 8027e3c:	0a09      	lsrs	r1, r1, #8
 8027e3e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027e42:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027e46:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027e4a:	ea41 0c0c 	orr.w	ip, r1, ip
 8027e4e:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8027e52:	9320      	str	r3, [sp, #128]	; 0x80
 8027e54:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027e58:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027e5a:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8027e5e:	f400 477f 	and.w	r7, r0, #65280	; 0xff00
 8027e62:	981c      	ldr	r0, [sp, #112]	; 0x70
 8027e64:	9321      	str	r3, [sp, #132]	; 0x84
 8027e66:	28ff      	cmp	r0, #255	; 0xff
 8027e68:	d019      	beq.n	8027e9e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 8027e6a:	fb03 f300 	mul.w	r3, r3, r0
 8027e6e:	fb07 f700 	mul.w	r7, r7, r0
 8027e72:	0a18      	lsrs	r0, r3, #8
 8027e74:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027e78:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8027e7c:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8027e80:	4418      	add	r0, r3
 8027e82:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8027e86:	0a00      	lsrs	r0, r0, #8
 8027e88:	0a3f      	lsrs	r7, r7, #8
 8027e8a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027e8e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027e92:	4307      	orrs	r7, r0
 8027e94:	f007 13ff 	and.w	r3, r7, #16711935	; 0xff00ff
 8027e98:	9321      	str	r3, [sp, #132]	; 0x84
 8027e9a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027e9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027ea0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8027ea2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027ea4:	fb01 f100 	mul.w	r1, r1, r0
 8027ea8:	4608      	mov	r0, r1
 8027eaa:	3101      	adds	r1, #1
 8027eac:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027eb0:	ea6f 2110 	mvn.w	r1, r0, lsr #8
 8027eb4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027eb6:	9125      	str	r1, [sp, #148]	; 0x94
 8027eb8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8027eba:	fb01 f100 	mul.w	r1, r1, r0
 8027ebe:	910f      	str	r1, [sp, #60]	; 0x3c
 8027ec0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8027ec2:	fb01 f100 	mul.w	r1, r1, r0
 8027ec6:	9110      	str	r1, [sp, #64]	; 0x40
 8027ec8:	991d      	ldr	r1, [sp, #116]	; 0x74
 8027eca:	4608      	mov	r0, r1
 8027ecc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027ece:	fb00 1103 	mla	r1, r0, r3, r1
 8027ed2:	910f      	str	r1, [sp, #60]	; 0x3c
 8027ed4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027ed6:	4608      	mov	r0, r1
 8027ed8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8027eda:	fb00 1003 	mla	r0, r0, r3, r1
 8027ede:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027ee0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027ee2:	fb0c 000e 	mla	r0, ip, lr, r0
 8027ee6:	fb03 110e 	mla	r1, r3, lr, r1
 8027eea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027eec:	f89a c002 	ldrb.w	ip, [sl, #2]
 8027ef0:	fb03 1102 	mla	r1, r3, r2, r1
 8027ef4:	fb07 0302 	mla	r3, r7, r2, r0
 8027ef8:	0a0a      	lsrs	r2, r1, #8
 8027efa:	0a1b      	lsrs	r3, r3, #8
 8027efc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027f00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027f04:	4313      	orrs	r3, r2
 8027f06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027f08:	b2df      	uxtb	r7, r3
 8027f0a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8027f0e:	0c1b      	lsrs	r3, r3, #16
 8027f10:	fb17 f702 	smulbb	r7, r7, r2
 8027f14:	fb10 f002 	smulbb	r0, r0, r2
 8027f18:	fb13 f302 	smulbb	r3, r3, r2
 8027f1c:	f89d e094 	ldrb.w	lr, [sp, #148]	; 0x94
 8027f20:	f89a 1000 	ldrb.w	r1, [sl]
 8027f24:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8027f28:	fb01 710e 	mla	r1, r1, lr, r7
 8027f2c:	fb02 020e 	mla	r2, r2, lr, r0
 8027f30:	fb0c 330e 	mla	r3, ip, lr, r3
 8027f34:	b297      	uxth	r7, r2
 8027f36:	fa1f fc81 	uxth.w	ip, r1
 8027f3a:	b298      	uxth	r0, r3
 8027f3c:	f10c 0101 	add.w	r1, ip, #1
 8027f40:	1c7a      	adds	r2, r7, #1
 8027f42:	1c43      	adds	r3, r0, #1
 8027f44:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8027f48:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8027f4c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027f50:	1209      	asrs	r1, r1, #8
 8027f52:	1212      	asrs	r2, r2, #8
 8027f54:	121b      	asrs	r3, r3, #8
 8027f56:	f88a 1000 	strb.w	r1, [sl]
 8027f5a:	f88a 2001 	strb.w	r2, [sl, #1]
 8027f5e:	f88a 3002 	strb.w	r3, [sl, #2]
 8027f62:	f1b8 0f00 	cmp.w	r8, #0
 8027f66:	f10a 0a04 	add.w	sl, sl, #4
 8027f6a:	44b1      	add	r9, r6
 8027f6c:	44ab      	add	fp, r5
 8027f6e:	dd30      	ble.n	8027fd2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x766>
 8027f70:	e9d4 1e02 	ldrd	r1, lr, [r4, #8]
 8027f74:	ea4f 4329 	mov.w	r3, r9, asr #16
 8027f78:	2b00      	cmp	r3, #0
 8027f7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8027f7e:	ea4f 422b 	mov.w	r2, fp, asr #16
 8027f82:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8027f86:	f3cb 3703 	ubfx	r7, fp, #12, #4
 8027f8a:	f6bf aea3 	bge.w	8027cd4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8027f8e:	f113 0c01 	adds.w	ip, r3, #1
 8027f92:	d4e6      	bmi.n	8027f62 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8027f94:	458c      	cmp	ip, r1
 8027f96:	dce4      	bgt.n	8027f62 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8027f98:	f112 0c01 	adds.w	ip, r2, #1
 8027f9c:	d4e1      	bmi.n	8027f62 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8027f9e:	45f4      	cmp	ip, lr
 8027fa0:	dcdf      	bgt.n	8027f62 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8027fa2:	fa0f fe8e 	sxth.w	lr, lr
 8027fa6:	b209      	sxth	r1, r1
 8027fa8:	e9cd 1e00 	strd	r1, lr, [sp]
 8027fac:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8027fae:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8027fb2:	e9cd 7105 	strd	r7, r1, [sp, #20]
 8027fb6:	9302      	str	r3, [sp, #8]
 8027fb8:	4651      	mov	r1, sl
 8027fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027fbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027fbe:	9822      	ldr	r0, [sp, #136]	; 0x88
 8027fc0:	f7ff fab0 	bl	8027524 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>
 8027fc4:	f1b8 0f00 	cmp.w	r8, #0
 8027fc8:	f10a 0a04 	add.w	sl, sl, #4
 8027fcc:	44b1      	add	r9, r6
 8027fce:	44ab      	add	fp, r5
 8027fd0:	dcce      	bgt.n	8027f70 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8027fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027fd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027fd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027fda:	3301      	adds	r3, #1
 8027fdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027fe0:	9312      	str	r3, [sp, #72]	; 0x48
 8027fe2:	e4a8      	b.n	8027936 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8027fe4:	9112      	str	r1, [sp, #72]	; 0x48
 8027fe6:	f10e 31ff 	add.w	r1, lr, #4294967295
 8027fea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027fec:	910a      	str	r1, [sp, #40]	; 0x28
 8027fee:	4688      	mov	r8, r1
 8027ff0:	e662      	b.n	8027cb8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8027ff2:	2f00      	cmp	r7, #0
 8027ff4:	f43f ae98 	beq.w	8027d28 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8027ff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027ffa:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8027ffe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8028002:	0e13      	lsrs	r3, r2, #24
 8028004:	9226      	str	r2, [sp, #152]	; 0x98
 8028006:	931b      	str	r3, [sp, #108]	; 0x6c
 8028008:	e68e      	b.n	8027d28 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 802800a:	eb01 0e0c 	add.w	lr, r1, ip
 802800e:	f89e e001 	ldrb.w	lr, [lr, #1]
 8028012:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8028016:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 802801a:	4611      	mov	r1, r2
 802801c:	9227      	str	r2, [sp, #156]	; 0x9c
 802801e:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8028022:	4613      	mov	r3, r2
 8028024:	9226      	str	r2, [sp, #152]	; 0x98
 8028026:	0e0a      	lsrs	r2, r1, #24
 8028028:	921c      	str	r2, [sp, #112]	; 0x70
 802802a:	0e1a      	lsrs	r2, r3, #24
 802802c:	921b      	str	r2, [sp, #108]	; 0x6c
 802802e:	e67b      	b.n	8027d28 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8028030:	f43f ac81 	beq.w	8027936 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8028034:	1e44      	subs	r4, r0, #1
 8028036:	e4c2      	b.n	80279be <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>

08028038 <_GLOBAL__sub_I__ZN8touchgfx19GPU2DVectorRenderer5setupERKNS_6WidgetERKNS_4RectE>:
 8028038:	2200      	movs	r2, #0
 802803a:	4b02      	ldr	r3, [pc, #8]	; (8028044 <_GLOBAL__sub_I__ZN8touchgfx19GPU2DVectorRenderer5setupERKNS_6WidgetERKNS_4RectE+0xc>)
 802803c:	e9c3 2200 	strd	r2, r2, [r3]
 8028040:	4770      	bx	lr
 8028042:	bf00      	nop
 8028044:	201983e4 	.word	0x201983e4

08028048 <__aeabi_atexit>:
 8028048:	460b      	mov	r3, r1
 802804a:	4601      	mov	r1, r0
 802804c:	4618      	mov	r0, r3
 802804e:	f000 b851 	b.w	80280f4 <__cxa_atexit>

08028052 <_ZdlPvj>:
 8028052:	f000 b812 	b.w	802807a <_ZdlPv>

08028056 <__cxa_guard_acquire>:
 8028056:	6803      	ldr	r3, [r0, #0]
 8028058:	07db      	lsls	r3, r3, #31
 802805a:	d406      	bmi.n	802806a <__cxa_guard_acquire+0x14>
 802805c:	7843      	ldrb	r3, [r0, #1]
 802805e:	b103      	cbz	r3, 8028062 <__cxa_guard_acquire+0xc>
 8028060:	deff      	udf	#255	; 0xff
 8028062:	2301      	movs	r3, #1
 8028064:	7043      	strb	r3, [r0, #1]
 8028066:	4618      	mov	r0, r3
 8028068:	4770      	bx	lr
 802806a:	2000      	movs	r0, #0
 802806c:	4770      	bx	lr

0802806e <__cxa_guard_release>:
 802806e:	2301      	movs	r3, #1
 8028070:	6003      	str	r3, [r0, #0]
 8028072:	4770      	bx	lr

08028074 <__cxa_pure_virtual>:
 8028074:	b508      	push	{r3, lr}
 8028076:	f000 f80d 	bl	8028094 <_ZSt9terminatev>

0802807a <_ZdlPv>:
 802807a:	f000 b88d 	b.w	8028198 <free>

0802807e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802807e:	b508      	push	{r3, lr}
 8028080:	4780      	blx	r0
 8028082:	f000 f80c 	bl	802809e <abort>
	...

08028088 <_ZSt13get_terminatev>:
 8028088:	4b01      	ldr	r3, [pc, #4]	; (8028090 <_ZSt13get_terminatev+0x8>)
 802808a:	e8d3 0faf 	lda	r0, [r3]
 802808e:	4770      	bx	lr
 8028090:	200000c0 	.word	0x200000c0

08028094 <_ZSt9terminatev>:
 8028094:	b508      	push	{r3, lr}
 8028096:	f7ff fff7 	bl	8028088 <_ZSt13get_terminatev>
 802809a:	f7ff fff0 	bl	802807e <_ZN10__cxxabiv111__terminateEPFvvE>

0802809e <abort>:
 802809e:	2006      	movs	r0, #6
 80280a0:	b508      	push	{r3, lr}
 80280a2:	f000 fd6b 	bl	8028b7c <raise>
 80280a6:	2001      	movs	r0, #1
 80280a8:	f7d9 fcb6 	bl	8001a18 <_exit>

080280ac <__assert_func>:
 80280ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80280ae:	4614      	mov	r4, r2
 80280b0:	461a      	mov	r2, r3
 80280b2:	4b09      	ldr	r3, [pc, #36]	; (80280d8 <__assert_func+0x2c>)
 80280b4:	4605      	mov	r5, r0
 80280b6:	681b      	ldr	r3, [r3, #0]
 80280b8:	68d8      	ldr	r0, [r3, #12]
 80280ba:	b14c      	cbz	r4, 80280d0 <__assert_func+0x24>
 80280bc:	4b07      	ldr	r3, [pc, #28]	; (80280dc <__assert_func+0x30>)
 80280be:	9100      	str	r1, [sp, #0]
 80280c0:	4907      	ldr	r1, [pc, #28]	; (80280e0 <__assert_func+0x34>)
 80280c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80280c6:	462b      	mov	r3, r5
 80280c8:	f000 f828 	bl	802811c <fiprintf>
 80280cc:	f7ff ffe7 	bl	802809e <abort>
 80280d0:	4b04      	ldr	r3, [pc, #16]	; (80280e4 <__assert_func+0x38>)
 80280d2:	461c      	mov	r4, r3
 80280d4:	e7f3      	b.n	80280be <__assert_func+0x12>
 80280d6:	bf00      	nop
 80280d8:	200000c4 	.word	0x200000c4
 80280dc:	0802c25a 	.word	0x0802c25a
 80280e0:	0802c267 	.word	0x0802c267
 80280e4:	0802c295 	.word	0x0802c295

080280e8 <atexit>:
 80280e8:	2300      	movs	r3, #0
 80280ea:	4601      	mov	r1, r0
 80280ec:	461a      	mov	r2, r3
 80280ee:	4618      	mov	r0, r3
 80280f0:	f000 be20 	b.w	8028d34 <__register_exitproc>

080280f4 <__cxa_atexit>:
 80280f4:	b510      	push	{r4, lr}
 80280f6:	4c05      	ldr	r4, [pc, #20]	; (802810c <__cxa_atexit+0x18>)
 80280f8:	4613      	mov	r3, r2
 80280fa:	b12c      	cbz	r4, 8028108 <__cxa_atexit+0x14>
 80280fc:	460a      	mov	r2, r1
 80280fe:	4601      	mov	r1, r0
 8028100:	2002      	movs	r0, #2
 8028102:	f000 fe17 	bl	8028d34 <__register_exitproc>
 8028106:	bd10      	pop	{r4, pc}
 8028108:	4620      	mov	r0, r4
 802810a:	e7fc      	b.n	8028106 <__cxa_atexit+0x12>
 802810c:	08028d35 	.word	0x08028d35

08028110 <__errno>:
 8028110:	4b01      	ldr	r3, [pc, #4]	; (8028118 <__errno+0x8>)
 8028112:	6818      	ldr	r0, [r3, #0]
 8028114:	4770      	bx	lr
 8028116:	bf00      	nop
 8028118:	200000c4 	.word	0x200000c4

0802811c <fiprintf>:
 802811c:	b40e      	push	{r1, r2, r3}
 802811e:	b503      	push	{r0, r1, lr}
 8028120:	ab03      	add	r3, sp, #12
 8028122:	4601      	mov	r1, r0
 8028124:	4805      	ldr	r0, [pc, #20]	; (802813c <fiprintf+0x20>)
 8028126:	f853 2b04 	ldr.w	r2, [r3], #4
 802812a:	6800      	ldr	r0, [r0, #0]
 802812c:	9301      	str	r3, [sp, #4]
 802812e:	f000 f95b 	bl	80283e8 <_vfiprintf_r>
 8028132:	b002      	add	sp, #8
 8028134:	f85d eb04 	ldr.w	lr, [sp], #4
 8028138:	b003      	add	sp, #12
 802813a:	4770      	bx	lr
 802813c:	200000c4 	.word	0x200000c4

08028140 <__libc_init_array>:
 8028140:	b570      	push	{r4, r5, r6, lr}
 8028142:	4d0d      	ldr	r5, [pc, #52]	; (8028178 <__libc_init_array+0x38>)
 8028144:	2600      	movs	r6, #0
 8028146:	4c0d      	ldr	r4, [pc, #52]	; (802817c <__libc_init_array+0x3c>)
 8028148:	1b64      	subs	r4, r4, r5
 802814a:	10a4      	asrs	r4, r4, #2
 802814c:	42a6      	cmp	r6, r4
 802814e:	d109      	bne.n	8028164 <__libc_init_array+0x24>
 8028150:	4d0b      	ldr	r5, [pc, #44]	; (8028180 <__libc_init_array+0x40>)
 8028152:	2600      	movs	r6, #0
 8028154:	4c0b      	ldr	r4, [pc, #44]	; (8028184 <__libc_init_array+0x44>)
 8028156:	f001 f935 	bl	80293c4 <_init>
 802815a:	1b64      	subs	r4, r4, r5
 802815c:	10a4      	asrs	r4, r4, #2
 802815e:	42a6      	cmp	r6, r4
 8028160:	d105      	bne.n	802816e <__libc_init_array+0x2e>
 8028162:	bd70      	pop	{r4, r5, r6, pc}
 8028164:	f855 3b04 	ldr.w	r3, [r5], #4
 8028168:	3601      	adds	r6, #1
 802816a:	4798      	blx	r3
 802816c:	e7ee      	b.n	802814c <__libc_init_array+0xc>
 802816e:	f855 3b04 	ldr.w	r3, [r5], #4
 8028172:	3601      	adds	r6, #1
 8028174:	4798      	blx	r3
 8028176:	e7f2      	b.n	802815e <__libc_init_array+0x1e>
 8028178:	0802c3c0 	.word	0x0802c3c0
 802817c:	0802c3c0 	.word	0x0802c3c0
 8028180:	0802c3c0 	.word	0x0802c3c0
 8028184:	0802c3dc 	.word	0x0802c3dc

08028188 <malloc>:
 8028188:	4b02      	ldr	r3, [pc, #8]	; (8028194 <malloc+0xc>)
 802818a:	4601      	mov	r1, r0
 802818c:	6818      	ldr	r0, [r3, #0]
 802818e:	f000 b88d 	b.w	80282ac <_malloc_r>
 8028192:	bf00      	nop
 8028194:	200000c4 	.word	0x200000c4

08028198 <free>:
 8028198:	4b02      	ldr	r3, [pc, #8]	; (80281a4 <free+0xc>)
 802819a:	4601      	mov	r1, r0
 802819c:	6818      	ldr	r0, [r3, #0]
 802819e:	f000 b819 	b.w	80281d4 <_free_r>
 80281a2:	bf00      	nop
 80281a4:	200000c4 	.word	0x200000c4

080281a8 <memcpy>:
 80281a8:	440a      	add	r2, r1
 80281aa:	1e43      	subs	r3, r0, #1
 80281ac:	4291      	cmp	r1, r2
 80281ae:	d100      	bne.n	80281b2 <memcpy+0xa>
 80281b0:	4770      	bx	lr
 80281b2:	b510      	push	{r4, lr}
 80281b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80281b8:	4291      	cmp	r1, r2
 80281ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80281be:	d1f9      	bne.n	80281b4 <memcpy+0xc>
 80281c0:	bd10      	pop	{r4, pc}

080281c2 <memset>:
 80281c2:	4402      	add	r2, r0
 80281c4:	4603      	mov	r3, r0
 80281c6:	4293      	cmp	r3, r2
 80281c8:	d100      	bne.n	80281cc <memset+0xa>
 80281ca:	4770      	bx	lr
 80281cc:	f803 1b01 	strb.w	r1, [r3], #1
 80281d0:	e7f9      	b.n	80281c6 <memset+0x4>
	...

080281d4 <_free_r>:
 80281d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80281d6:	2900      	cmp	r1, #0
 80281d8:	d043      	beq.n	8028262 <_free_r+0x8e>
 80281da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80281de:	1f0c      	subs	r4, r1, #4
 80281e0:	9001      	str	r0, [sp, #4]
 80281e2:	2b00      	cmp	r3, #0
 80281e4:	bfb8      	it	lt
 80281e6:	18e4      	addlt	r4, r4, r3
 80281e8:	f001 f834 	bl	8029254 <__malloc_lock>
 80281ec:	4a1e      	ldr	r2, [pc, #120]	; (8028268 <_free_r+0x94>)
 80281ee:	9801      	ldr	r0, [sp, #4]
 80281f0:	6813      	ldr	r3, [r2, #0]
 80281f2:	b933      	cbnz	r3, 8028202 <_free_r+0x2e>
 80281f4:	6063      	str	r3, [r4, #4]
 80281f6:	6014      	str	r4, [r2, #0]
 80281f8:	b003      	add	sp, #12
 80281fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80281fe:	f001 b82f 	b.w	8029260 <__malloc_unlock>
 8028202:	42a3      	cmp	r3, r4
 8028204:	d908      	bls.n	8028218 <_free_r+0x44>
 8028206:	6825      	ldr	r5, [r4, #0]
 8028208:	1961      	adds	r1, r4, r5
 802820a:	428b      	cmp	r3, r1
 802820c:	bf01      	itttt	eq
 802820e:	6819      	ldreq	r1, [r3, #0]
 8028210:	685b      	ldreq	r3, [r3, #4]
 8028212:	1949      	addeq	r1, r1, r5
 8028214:	6021      	streq	r1, [r4, #0]
 8028216:	e7ed      	b.n	80281f4 <_free_r+0x20>
 8028218:	461a      	mov	r2, r3
 802821a:	685b      	ldr	r3, [r3, #4]
 802821c:	b10b      	cbz	r3, 8028222 <_free_r+0x4e>
 802821e:	42a3      	cmp	r3, r4
 8028220:	d9fa      	bls.n	8028218 <_free_r+0x44>
 8028222:	6811      	ldr	r1, [r2, #0]
 8028224:	1855      	adds	r5, r2, r1
 8028226:	42a5      	cmp	r5, r4
 8028228:	d10b      	bne.n	8028242 <_free_r+0x6e>
 802822a:	6824      	ldr	r4, [r4, #0]
 802822c:	4421      	add	r1, r4
 802822e:	1854      	adds	r4, r2, r1
 8028230:	6011      	str	r1, [r2, #0]
 8028232:	42a3      	cmp	r3, r4
 8028234:	d1e0      	bne.n	80281f8 <_free_r+0x24>
 8028236:	681c      	ldr	r4, [r3, #0]
 8028238:	685b      	ldr	r3, [r3, #4]
 802823a:	4421      	add	r1, r4
 802823c:	6053      	str	r3, [r2, #4]
 802823e:	6011      	str	r1, [r2, #0]
 8028240:	e7da      	b.n	80281f8 <_free_r+0x24>
 8028242:	d902      	bls.n	802824a <_free_r+0x76>
 8028244:	230c      	movs	r3, #12
 8028246:	6003      	str	r3, [r0, #0]
 8028248:	e7d6      	b.n	80281f8 <_free_r+0x24>
 802824a:	6825      	ldr	r5, [r4, #0]
 802824c:	1961      	adds	r1, r4, r5
 802824e:	428b      	cmp	r3, r1
 8028250:	bf02      	ittt	eq
 8028252:	6819      	ldreq	r1, [r3, #0]
 8028254:	685b      	ldreq	r3, [r3, #4]
 8028256:	1949      	addeq	r1, r1, r5
 8028258:	6063      	str	r3, [r4, #4]
 802825a:	bf08      	it	eq
 802825c:	6021      	streq	r1, [r4, #0]
 802825e:	6054      	str	r4, [r2, #4]
 8028260:	e7ca      	b.n	80281f8 <_free_r+0x24>
 8028262:	b003      	add	sp, #12
 8028264:	bd30      	pop	{r4, r5, pc}
 8028266:	bf00      	nop
 8028268:	201983ec 	.word	0x201983ec

0802826c <sbrk_aligned>:
 802826c:	b570      	push	{r4, r5, r6, lr}
 802826e:	4e0e      	ldr	r6, [pc, #56]	; (80282a8 <sbrk_aligned+0x3c>)
 8028270:	460c      	mov	r4, r1
 8028272:	4605      	mov	r5, r0
 8028274:	6831      	ldr	r1, [r6, #0]
 8028276:	b911      	cbnz	r1, 802827e <sbrk_aligned+0x12>
 8028278:	f000 fc48 	bl	8028b0c <_sbrk_r>
 802827c:	6030      	str	r0, [r6, #0]
 802827e:	4621      	mov	r1, r4
 8028280:	4628      	mov	r0, r5
 8028282:	f000 fc43 	bl	8028b0c <_sbrk_r>
 8028286:	1c43      	adds	r3, r0, #1
 8028288:	d00a      	beq.n	80282a0 <sbrk_aligned+0x34>
 802828a:	1cc4      	adds	r4, r0, #3
 802828c:	f024 0403 	bic.w	r4, r4, #3
 8028290:	42a0      	cmp	r0, r4
 8028292:	d007      	beq.n	80282a4 <sbrk_aligned+0x38>
 8028294:	1a21      	subs	r1, r4, r0
 8028296:	4628      	mov	r0, r5
 8028298:	f000 fc38 	bl	8028b0c <_sbrk_r>
 802829c:	3001      	adds	r0, #1
 802829e:	d101      	bne.n	80282a4 <sbrk_aligned+0x38>
 80282a0:	f04f 34ff 	mov.w	r4, #4294967295
 80282a4:	4620      	mov	r0, r4
 80282a6:	bd70      	pop	{r4, r5, r6, pc}
 80282a8:	201983f0 	.word	0x201983f0

080282ac <_malloc_r>:
 80282ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80282b0:	1ccd      	adds	r5, r1, #3
 80282b2:	4607      	mov	r7, r0
 80282b4:	f025 0503 	bic.w	r5, r5, #3
 80282b8:	3508      	adds	r5, #8
 80282ba:	2d0c      	cmp	r5, #12
 80282bc:	bf38      	it	cc
 80282be:	250c      	movcc	r5, #12
 80282c0:	2d00      	cmp	r5, #0
 80282c2:	db01      	blt.n	80282c8 <_malloc_r+0x1c>
 80282c4:	42a9      	cmp	r1, r5
 80282c6:	d905      	bls.n	80282d4 <_malloc_r+0x28>
 80282c8:	230c      	movs	r3, #12
 80282ca:	2600      	movs	r6, #0
 80282cc:	603b      	str	r3, [r7, #0]
 80282ce:	4630      	mov	r0, r6
 80282d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80282d4:	4e2e      	ldr	r6, [pc, #184]	; (8028390 <_malloc_r+0xe4>)
 80282d6:	f000 ffbd 	bl	8029254 <__malloc_lock>
 80282da:	6833      	ldr	r3, [r6, #0]
 80282dc:	461c      	mov	r4, r3
 80282de:	bb34      	cbnz	r4, 802832e <_malloc_r+0x82>
 80282e0:	4629      	mov	r1, r5
 80282e2:	4638      	mov	r0, r7
 80282e4:	f7ff ffc2 	bl	802826c <sbrk_aligned>
 80282e8:	1c43      	adds	r3, r0, #1
 80282ea:	4604      	mov	r4, r0
 80282ec:	d14d      	bne.n	802838a <_malloc_r+0xde>
 80282ee:	6834      	ldr	r4, [r6, #0]
 80282f0:	4626      	mov	r6, r4
 80282f2:	2e00      	cmp	r6, #0
 80282f4:	d140      	bne.n	8028378 <_malloc_r+0xcc>
 80282f6:	6823      	ldr	r3, [r4, #0]
 80282f8:	4631      	mov	r1, r6
 80282fa:	4638      	mov	r0, r7
 80282fc:	eb04 0803 	add.w	r8, r4, r3
 8028300:	f000 fc04 	bl	8028b0c <_sbrk_r>
 8028304:	4580      	cmp	r8, r0
 8028306:	d13a      	bne.n	802837e <_malloc_r+0xd2>
 8028308:	6821      	ldr	r1, [r4, #0]
 802830a:	3503      	adds	r5, #3
 802830c:	4638      	mov	r0, r7
 802830e:	1a6d      	subs	r5, r5, r1
 8028310:	f025 0503 	bic.w	r5, r5, #3
 8028314:	3508      	adds	r5, #8
 8028316:	2d0c      	cmp	r5, #12
 8028318:	bf38      	it	cc
 802831a:	250c      	movcc	r5, #12
 802831c:	4629      	mov	r1, r5
 802831e:	f7ff ffa5 	bl	802826c <sbrk_aligned>
 8028322:	3001      	adds	r0, #1
 8028324:	d02b      	beq.n	802837e <_malloc_r+0xd2>
 8028326:	6823      	ldr	r3, [r4, #0]
 8028328:	442b      	add	r3, r5
 802832a:	6023      	str	r3, [r4, #0]
 802832c:	e00e      	b.n	802834c <_malloc_r+0xa0>
 802832e:	6822      	ldr	r2, [r4, #0]
 8028330:	1b52      	subs	r2, r2, r5
 8028332:	d41e      	bmi.n	8028372 <_malloc_r+0xc6>
 8028334:	2a0b      	cmp	r2, #11
 8028336:	d916      	bls.n	8028366 <_malloc_r+0xba>
 8028338:	1961      	adds	r1, r4, r5
 802833a:	42a3      	cmp	r3, r4
 802833c:	6025      	str	r5, [r4, #0]
 802833e:	bf18      	it	ne
 8028340:	6059      	strne	r1, [r3, #4]
 8028342:	6863      	ldr	r3, [r4, #4]
 8028344:	bf08      	it	eq
 8028346:	6031      	streq	r1, [r6, #0]
 8028348:	5162      	str	r2, [r4, r5]
 802834a:	604b      	str	r3, [r1, #4]
 802834c:	f104 060b 	add.w	r6, r4, #11
 8028350:	4638      	mov	r0, r7
 8028352:	f000 ff85 	bl	8029260 <__malloc_unlock>
 8028356:	1d23      	adds	r3, r4, #4
 8028358:	f026 0607 	bic.w	r6, r6, #7
 802835c:	1af2      	subs	r2, r6, r3
 802835e:	d0b6      	beq.n	80282ce <_malloc_r+0x22>
 8028360:	1b9b      	subs	r3, r3, r6
 8028362:	50a3      	str	r3, [r4, r2]
 8028364:	e7b3      	b.n	80282ce <_malloc_r+0x22>
 8028366:	6862      	ldr	r2, [r4, #4]
 8028368:	42a3      	cmp	r3, r4
 802836a:	bf0c      	ite	eq
 802836c:	6032      	streq	r2, [r6, #0]
 802836e:	605a      	strne	r2, [r3, #4]
 8028370:	e7ec      	b.n	802834c <_malloc_r+0xa0>
 8028372:	4623      	mov	r3, r4
 8028374:	6864      	ldr	r4, [r4, #4]
 8028376:	e7b2      	b.n	80282de <_malloc_r+0x32>
 8028378:	4634      	mov	r4, r6
 802837a:	6876      	ldr	r6, [r6, #4]
 802837c:	e7b9      	b.n	80282f2 <_malloc_r+0x46>
 802837e:	230c      	movs	r3, #12
 8028380:	4638      	mov	r0, r7
 8028382:	603b      	str	r3, [r7, #0]
 8028384:	f000 ff6c 	bl	8029260 <__malloc_unlock>
 8028388:	e7a1      	b.n	80282ce <_malloc_r+0x22>
 802838a:	6025      	str	r5, [r4, #0]
 802838c:	e7de      	b.n	802834c <_malloc_r+0xa0>
 802838e:	bf00      	nop
 8028390:	201983ec 	.word	0x201983ec

08028394 <__sfputc_r>:
 8028394:	6893      	ldr	r3, [r2, #8]
 8028396:	3b01      	subs	r3, #1
 8028398:	2b00      	cmp	r3, #0
 802839a:	6093      	str	r3, [r2, #8]
 802839c:	b410      	push	{r4}
 802839e:	da08      	bge.n	80283b2 <__sfputc_r+0x1e>
 80283a0:	6994      	ldr	r4, [r2, #24]
 80283a2:	42a3      	cmp	r3, r4
 80283a4:	db01      	blt.n	80283aa <__sfputc_r+0x16>
 80283a6:	290a      	cmp	r1, #10
 80283a8:	d103      	bne.n	80283b2 <__sfputc_r+0x1e>
 80283aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80283ae:	f000 bc01 	b.w	8028bb4 <__swbuf_r>
 80283b2:	6813      	ldr	r3, [r2, #0]
 80283b4:	1c58      	adds	r0, r3, #1
 80283b6:	6010      	str	r0, [r2, #0]
 80283b8:	4608      	mov	r0, r1
 80283ba:	7019      	strb	r1, [r3, #0]
 80283bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80283c0:	4770      	bx	lr

080283c2 <__sfputs_r>:
 80283c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80283c4:	4606      	mov	r6, r0
 80283c6:	460f      	mov	r7, r1
 80283c8:	4614      	mov	r4, r2
 80283ca:	18d5      	adds	r5, r2, r3
 80283cc:	42ac      	cmp	r4, r5
 80283ce:	d101      	bne.n	80283d4 <__sfputs_r+0x12>
 80283d0:	2000      	movs	r0, #0
 80283d2:	e007      	b.n	80283e4 <__sfputs_r+0x22>
 80283d4:	463a      	mov	r2, r7
 80283d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80283da:	4630      	mov	r0, r6
 80283dc:	f7ff ffda 	bl	8028394 <__sfputc_r>
 80283e0:	1c43      	adds	r3, r0, #1
 80283e2:	d1f3      	bne.n	80283cc <__sfputs_r+0xa>
 80283e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080283e8 <_vfiprintf_r>:
 80283e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80283ec:	460d      	mov	r5, r1
 80283ee:	b09d      	sub	sp, #116	; 0x74
 80283f0:	4614      	mov	r4, r2
 80283f2:	4698      	mov	r8, r3
 80283f4:	4606      	mov	r6, r0
 80283f6:	b118      	cbz	r0, 8028400 <_vfiprintf_r+0x18>
 80283f8:	6983      	ldr	r3, [r0, #24]
 80283fa:	b90b      	cbnz	r3, 8028400 <_vfiprintf_r+0x18>
 80283fc:	f000 fe16 	bl	802902c <__sinit>
 8028400:	4b89      	ldr	r3, [pc, #548]	; (8028628 <_vfiprintf_r+0x240>)
 8028402:	429d      	cmp	r5, r3
 8028404:	d11b      	bne.n	802843e <_vfiprintf_r+0x56>
 8028406:	6875      	ldr	r5, [r6, #4]
 8028408:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802840a:	07d9      	lsls	r1, r3, #31
 802840c:	d405      	bmi.n	802841a <_vfiprintf_r+0x32>
 802840e:	89ab      	ldrh	r3, [r5, #12]
 8028410:	059a      	lsls	r2, r3, #22
 8028412:	d402      	bmi.n	802841a <_vfiprintf_r+0x32>
 8028414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028416:	f000 fea7 	bl	8029168 <__retarget_lock_acquire_recursive>
 802841a:	89ab      	ldrh	r3, [r5, #12]
 802841c:	071b      	lsls	r3, r3, #28
 802841e:	d501      	bpl.n	8028424 <_vfiprintf_r+0x3c>
 8028420:	692b      	ldr	r3, [r5, #16]
 8028422:	b9eb      	cbnz	r3, 8028460 <_vfiprintf_r+0x78>
 8028424:	4629      	mov	r1, r5
 8028426:	4630      	mov	r0, r6
 8028428:	f000 fc16 	bl	8028c58 <__swsetup_r>
 802842c:	b1c0      	cbz	r0, 8028460 <_vfiprintf_r+0x78>
 802842e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028430:	07dc      	lsls	r4, r3, #31
 8028432:	d50e      	bpl.n	8028452 <_vfiprintf_r+0x6a>
 8028434:	f04f 30ff 	mov.w	r0, #4294967295
 8028438:	b01d      	add	sp, #116	; 0x74
 802843a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802843e:	4b7b      	ldr	r3, [pc, #492]	; (802862c <_vfiprintf_r+0x244>)
 8028440:	429d      	cmp	r5, r3
 8028442:	d101      	bne.n	8028448 <_vfiprintf_r+0x60>
 8028444:	68b5      	ldr	r5, [r6, #8]
 8028446:	e7df      	b.n	8028408 <_vfiprintf_r+0x20>
 8028448:	4b79      	ldr	r3, [pc, #484]	; (8028630 <_vfiprintf_r+0x248>)
 802844a:	429d      	cmp	r5, r3
 802844c:	bf08      	it	eq
 802844e:	68f5      	ldreq	r5, [r6, #12]
 8028450:	e7da      	b.n	8028408 <_vfiprintf_r+0x20>
 8028452:	89ab      	ldrh	r3, [r5, #12]
 8028454:	0598      	lsls	r0, r3, #22
 8028456:	d4ed      	bmi.n	8028434 <_vfiprintf_r+0x4c>
 8028458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802845a:	f000 fe87 	bl	802916c <__retarget_lock_release_recursive>
 802845e:	e7e9      	b.n	8028434 <_vfiprintf_r+0x4c>
 8028460:	2300      	movs	r3, #0
 8028462:	f8cd 800c 	str.w	r8, [sp, #12]
 8028466:	f04f 0901 	mov.w	r9, #1
 802846a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8028634 <_vfiprintf_r+0x24c>
 802846e:	9309      	str	r3, [sp, #36]	; 0x24
 8028470:	2320      	movs	r3, #32
 8028472:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028476:	2330      	movs	r3, #48	; 0x30
 8028478:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802847c:	4623      	mov	r3, r4
 802847e:	469a      	mov	sl, r3
 8028480:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028484:	b10a      	cbz	r2, 802848a <_vfiprintf_r+0xa2>
 8028486:	2a25      	cmp	r2, #37	; 0x25
 8028488:	d1f9      	bne.n	802847e <_vfiprintf_r+0x96>
 802848a:	ebba 0b04 	subs.w	fp, sl, r4
 802848e:	d00b      	beq.n	80284a8 <_vfiprintf_r+0xc0>
 8028490:	465b      	mov	r3, fp
 8028492:	4622      	mov	r2, r4
 8028494:	4629      	mov	r1, r5
 8028496:	4630      	mov	r0, r6
 8028498:	f7ff ff93 	bl	80283c2 <__sfputs_r>
 802849c:	3001      	adds	r0, #1
 802849e:	f000 80aa 	beq.w	80285f6 <_vfiprintf_r+0x20e>
 80284a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80284a4:	445a      	add	r2, fp
 80284a6:	9209      	str	r2, [sp, #36]	; 0x24
 80284a8:	f89a 3000 	ldrb.w	r3, [sl]
 80284ac:	2b00      	cmp	r3, #0
 80284ae:	f000 80a2 	beq.w	80285f6 <_vfiprintf_r+0x20e>
 80284b2:	2300      	movs	r3, #0
 80284b4:	f04f 32ff 	mov.w	r2, #4294967295
 80284b8:	f10a 0a01 	add.w	sl, sl, #1
 80284bc:	9304      	str	r3, [sp, #16]
 80284be:	9307      	str	r3, [sp, #28]
 80284c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80284c4:	931a      	str	r3, [sp, #104]	; 0x68
 80284c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80284ca:	4654      	mov	r4, sl
 80284cc:	2205      	movs	r2, #5
 80284ce:	4859      	ldr	r0, [pc, #356]	; (8028634 <_vfiprintf_r+0x24c>)
 80284d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80284d4:	f000 feb0 	bl	8029238 <memchr>
 80284d8:	9a04      	ldr	r2, [sp, #16]
 80284da:	b9d8      	cbnz	r0, 8028514 <_vfiprintf_r+0x12c>
 80284dc:	06d1      	lsls	r1, r2, #27
 80284de:	bf44      	itt	mi
 80284e0:	2320      	movmi	r3, #32
 80284e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80284e6:	0713      	lsls	r3, r2, #28
 80284e8:	bf44      	itt	mi
 80284ea:	232b      	movmi	r3, #43	; 0x2b
 80284ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80284f0:	f89a 3000 	ldrb.w	r3, [sl]
 80284f4:	2b2a      	cmp	r3, #42	; 0x2a
 80284f6:	d015      	beq.n	8028524 <_vfiprintf_r+0x13c>
 80284f8:	9a07      	ldr	r2, [sp, #28]
 80284fa:	4654      	mov	r4, sl
 80284fc:	2000      	movs	r0, #0
 80284fe:	f04f 0c0a 	mov.w	ip, #10
 8028502:	4621      	mov	r1, r4
 8028504:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028508:	3b30      	subs	r3, #48	; 0x30
 802850a:	2b09      	cmp	r3, #9
 802850c:	d94e      	bls.n	80285ac <_vfiprintf_r+0x1c4>
 802850e:	b1b0      	cbz	r0, 802853e <_vfiprintf_r+0x156>
 8028510:	9207      	str	r2, [sp, #28]
 8028512:	e014      	b.n	802853e <_vfiprintf_r+0x156>
 8028514:	eba0 0308 	sub.w	r3, r0, r8
 8028518:	46a2      	mov	sl, r4
 802851a:	fa09 f303 	lsl.w	r3, r9, r3
 802851e:	4313      	orrs	r3, r2
 8028520:	9304      	str	r3, [sp, #16]
 8028522:	e7d2      	b.n	80284ca <_vfiprintf_r+0xe2>
 8028524:	9b03      	ldr	r3, [sp, #12]
 8028526:	1d19      	adds	r1, r3, #4
 8028528:	681b      	ldr	r3, [r3, #0]
 802852a:	2b00      	cmp	r3, #0
 802852c:	9103      	str	r1, [sp, #12]
 802852e:	bfbb      	ittet	lt
 8028530:	425b      	neglt	r3, r3
 8028532:	f042 0202 	orrlt.w	r2, r2, #2
 8028536:	9307      	strge	r3, [sp, #28]
 8028538:	9307      	strlt	r3, [sp, #28]
 802853a:	bfb8      	it	lt
 802853c:	9204      	strlt	r2, [sp, #16]
 802853e:	7823      	ldrb	r3, [r4, #0]
 8028540:	2b2e      	cmp	r3, #46	; 0x2e
 8028542:	d10c      	bne.n	802855e <_vfiprintf_r+0x176>
 8028544:	7863      	ldrb	r3, [r4, #1]
 8028546:	2b2a      	cmp	r3, #42	; 0x2a
 8028548:	d135      	bne.n	80285b6 <_vfiprintf_r+0x1ce>
 802854a:	9b03      	ldr	r3, [sp, #12]
 802854c:	3402      	adds	r4, #2
 802854e:	1d1a      	adds	r2, r3, #4
 8028550:	681b      	ldr	r3, [r3, #0]
 8028552:	2b00      	cmp	r3, #0
 8028554:	9203      	str	r2, [sp, #12]
 8028556:	bfb8      	it	lt
 8028558:	f04f 33ff 	movlt.w	r3, #4294967295
 802855c:	9305      	str	r3, [sp, #20]
 802855e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8028644 <_vfiprintf_r+0x25c>
 8028562:	2203      	movs	r2, #3
 8028564:	7821      	ldrb	r1, [r4, #0]
 8028566:	4650      	mov	r0, sl
 8028568:	f000 fe66 	bl	8029238 <memchr>
 802856c:	b140      	cbz	r0, 8028580 <_vfiprintf_r+0x198>
 802856e:	2340      	movs	r3, #64	; 0x40
 8028570:	eba0 000a 	sub.w	r0, r0, sl
 8028574:	3401      	adds	r4, #1
 8028576:	fa03 f000 	lsl.w	r0, r3, r0
 802857a:	9b04      	ldr	r3, [sp, #16]
 802857c:	4303      	orrs	r3, r0
 802857e:	9304      	str	r3, [sp, #16]
 8028580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028584:	2206      	movs	r2, #6
 8028586:	482c      	ldr	r0, [pc, #176]	; (8028638 <_vfiprintf_r+0x250>)
 8028588:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802858c:	f000 fe54 	bl	8029238 <memchr>
 8028590:	2800      	cmp	r0, #0
 8028592:	d03f      	beq.n	8028614 <_vfiprintf_r+0x22c>
 8028594:	4b29      	ldr	r3, [pc, #164]	; (802863c <_vfiprintf_r+0x254>)
 8028596:	bb1b      	cbnz	r3, 80285e0 <_vfiprintf_r+0x1f8>
 8028598:	9b03      	ldr	r3, [sp, #12]
 802859a:	3307      	adds	r3, #7
 802859c:	f023 0307 	bic.w	r3, r3, #7
 80285a0:	3308      	adds	r3, #8
 80285a2:	9303      	str	r3, [sp, #12]
 80285a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80285a6:	443b      	add	r3, r7
 80285a8:	9309      	str	r3, [sp, #36]	; 0x24
 80285aa:	e767      	b.n	802847c <_vfiprintf_r+0x94>
 80285ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80285b0:	460c      	mov	r4, r1
 80285b2:	2001      	movs	r0, #1
 80285b4:	e7a5      	b.n	8028502 <_vfiprintf_r+0x11a>
 80285b6:	2300      	movs	r3, #0
 80285b8:	3401      	adds	r4, #1
 80285ba:	f04f 0c0a 	mov.w	ip, #10
 80285be:	4619      	mov	r1, r3
 80285c0:	9305      	str	r3, [sp, #20]
 80285c2:	4620      	mov	r0, r4
 80285c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80285c8:	3a30      	subs	r2, #48	; 0x30
 80285ca:	2a09      	cmp	r2, #9
 80285cc:	d903      	bls.n	80285d6 <_vfiprintf_r+0x1ee>
 80285ce:	2b00      	cmp	r3, #0
 80285d0:	d0c5      	beq.n	802855e <_vfiprintf_r+0x176>
 80285d2:	9105      	str	r1, [sp, #20]
 80285d4:	e7c3      	b.n	802855e <_vfiprintf_r+0x176>
 80285d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80285da:	4604      	mov	r4, r0
 80285dc:	2301      	movs	r3, #1
 80285de:	e7f0      	b.n	80285c2 <_vfiprintf_r+0x1da>
 80285e0:	ab03      	add	r3, sp, #12
 80285e2:	462a      	mov	r2, r5
 80285e4:	a904      	add	r1, sp, #16
 80285e6:	4630      	mov	r0, r6
 80285e8:	9300      	str	r3, [sp, #0]
 80285ea:	4b15      	ldr	r3, [pc, #84]	; (8028640 <_vfiprintf_r+0x258>)
 80285ec:	e000      	b.n	80285f0 <_vfiprintf_r+0x208>
 80285ee:	bf00      	nop
 80285f0:	4607      	mov	r7, r0
 80285f2:	1c78      	adds	r0, r7, #1
 80285f4:	d1d6      	bne.n	80285a4 <_vfiprintf_r+0x1bc>
 80285f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80285f8:	07d9      	lsls	r1, r3, #31
 80285fa:	d405      	bmi.n	8028608 <_vfiprintf_r+0x220>
 80285fc:	89ab      	ldrh	r3, [r5, #12]
 80285fe:	059a      	lsls	r2, r3, #22
 8028600:	d402      	bmi.n	8028608 <_vfiprintf_r+0x220>
 8028602:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028604:	f000 fdb2 	bl	802916c <__retarget_lock_release_recursive>
 8028608:	89ab      	ldrh	r3, [r5, #12]
 802860a:	065b      	lsls	r3, r3, #25
 802860c:	f53f af12 	bmi.w	8028434 <_vfiprintf_r+0x4c>
 8028610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028612:	e711      	b.n	8028438 <_vfiprintf_r+0x50>
 8028614:	ab03      	add	r3, sp, #12
 8028616:	462a      	mov	r2, r5
 8028618:	a904      	add	r1, sp, #16
 802861a:	4630      	mov	r0, r6
 802861c:	9300      	str	r3, [sp, #0]
 802861e:	4b08      	ldr	r3, [pc, #32]	; (8028640 <_vfiprintf_r+0x258>)
 8028620:	f000 f882 	bl	8028728 <_printf_i>
 8028624:	e7e4      	b.n	80285f0 <_vfiprintf_r+0x208>
 8028626:	bf00      	nop
 8028628:	0802c368 	.word	0x0802c368
 802862c:	0802c388 	.word	0x0802c388
 8028630:	0802c348 	.word	0x0802c348
 8028634:	0802c29c 	.word	0x0802c29c
 8028638:	0802c2a6 	.word	0x0802c2a6
 802863c:	00000000 	.word	0x00000000
 8028640:	080283c3 	.word	0x080283c3
 8028644:	0802c2a2 	.word	0x0802c2a2

08028648 <_printf_common>:
 8028648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802864c:	4616      	mov	r6, r2
 802864e:	4699      	mov	r9, r3
 8028650:	688a      	ldr	r2, [r1, #8]
 8028652:	4607      	mov	r7, r0
 8028654:	690b      	ldr	r3, [r1, #16]
 8028656:	460c      	mov	r4, r1
 8028658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802865c:	4293      	cmp	r3, r2
 802865e:	bfb8      	it	lt
 8028660:	4613      	movlt	r3, r2
 8028662:	6033      	str	r3, [r6, #0]
 8028664:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8028668:	b10a      	cbz	r2, 802866e <_printf_common+0x26>
 802866a:	3301      	adds	r3, #1
 802866c:	6033      	str	r3, [r6, #0]
 802866e:	6823      	ldr	r3, [r4, #0]
 8028670:	0699      	lsls	r1, r3, #26
 8028672:	bf42      	ittt	mi
 8028674:	6833      	ldrmi	r3, [r6, #0]
 8028676:	3302      	addmi	r3, #2
 8028678:	6033      	strmi	r3, [r6, #0]
 802867a:	6825      	ldr	r5, [r4, #0]
 802867c:	f015 0506 	ands.w	r5, r5, #6
 8028680:	d106      	bne.n	8028690 <_printf_common+0x48>
 8028682:	f104 0a19 	add.w	sl, r4, #25
 8028686:	68e3      	ldr	r3, [r4, #12]
 8028688:	6832      	ldr	r2, [r6, #0]
 802868a:	1a9b      	subs	r3, r3, r2
 802868c:	42ab      	cmp	r3, r5
 802868e:	dc29      	bgt.n	80286e4 <_printf_common+0x9c>
 8028690:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8028694:	1e13      	subs	r3, r2, #0
 8028696:	6822      	ldr	r2, [r4, #0]
 8028698:	bf18      	it	ne
 802869a:	2301      	movne	r3, #1
 802869c:	0692      	lsls	r2, r2, #26
 802869e:	d42e      	bmi.n	80286fe <_printf_common+0xb6>
 80286a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80286a4:	4649      	mov	r1, r9
 80286a6:	4638      	mov	r0, r7
 80286a8:	47c0      	blx	r8
 80286aa:	3001      	adds	r0, #1
 80286ac:	d021      	beq.n	80286f2 <_printf_common+0xaa>
 80286ae:	6823      	ldr	r3, [r4, #0]
 80286b0:	341a      	adds	r4, #26
 80286b2:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 80286b6:	f003 0306 	and.w	r3, r3, #6
 80286ba:	6832      	ldr	r2, [r6, #0]
 80286bc:	2600      	movs	r6, #0
 80286be:	2b04      	cmp	r3, #4
 80286c0:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80286c4:	bf08      	it	eq
 80286c6:	1aad      	subeq	r5, r5, r2
 80286c8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80286cc:	bf14      	ite	ne
 80286ce:	2500      	movne	r5, #0
 80286d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80286d4:	4293      	cmp	r3, r2
 80286d6:	bfc4      	itt	gt
 80286d8:	1a9b      	subgt	r3, r3, r2
 80286da:	18ed      	addgt	r5, r5, r3
 80286dc:	42b5      	cmp	r5, r6
 80286de:	d11a      	bne.n	8028716 <_printf_common+0xce>
 80286e0:	2000      	movs	r0, #0
 80286e2:	e008      	b.n	80286f6 <_printf_common+0xae>
 80286e4:	2301      	movs	r3, #1
 80286e6:	4652      	mov	r2, sl
 80286e8:	4649      	mov	r1, r9
 80286ea:	4638      	mov	r0, r7
 80286ec:	47c0      	blx	r8
 80286ee:	3001      	adds	r0, #1
 80286f0:	d103      	bne.n	80286fa <_printf_common+0xb2>
 80286f2:	f04f 30ff 	mov.w	r0, #4294967295
 80286f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80286fa:	3501      	adds	r5, #1
 80286fc:	e7c3      	b.n	8028686 <_printf_common+0x3e>
 80286fe:	18e1      	adds	r1, r4, r3
 8028700:	1c5a      	adds	r2, r3, #1
 8028702:	2030      	movs	r0, #48	; 0x30
 8028704:	3302      	adds	r3, #2
 8028706:	4422      	add	r2, r4
 8028708:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802870c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8028710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8028714:	e7c4      	b.n	80286a0 <_printf_common+0x58>
 8028716:	2301      	movs	r3, #1
 8028718:	4622      	mov	r2, r4
 802871a:	4649      	mov	r1, r9
 802871c:	4638      	mov	r0, r7
 802871e:	47c0      	blx	r8
 8028720:	3001      	adds	r0, #1
 8028722:	d0e6      	beq.n	80286f2 <_printf_common+0xaa>
 8028724:	3601      	adds	r6, #1
 8028726:	e7d9      	b.n	80286dc <_printf_common+0x94>

08028728 <_printf_i>:
 8028728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802872c:	7e0f      	ldrb	r7, [r1, #24]
 802872e:	4691      	mov	r9, r2
 8028730:	4680      	mov	r8, r0
 8028732:	460c      	mov	r4, r1
 8028734:	2f78      	cmp	r7, #120	; 0x78
 8028736:	469a      	mov	sl, r3
 8028738:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802873a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802873e:	d807      	bhi.n	8028750 <_printf_i+0x28>
 8028740:	2f62      	cmp	r7, #98	; 0x62
 8028742:	d80a      	bhi.n	802875a <_printf_i+0x32>
 8028744:	2f00      	cmp	r7, #0
 8028746:	f000 80d8 	beq.w	80288fa <_printf_i+0x1d2>
 802874a:	2f58      	cmp	r7, #88	; 0x58
 802874c:	f000 80a3 	beq.w	8028896 <_printf_i+0x16e>
 8028750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8028758:	e03a      	b.n	80287d0 <_printf_i+0xa8>
 802875a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802875e:	2b15      	cmp	r3, #21
 8028760:	d8f6      	bhi.n	8028750 <_printf_i+0x28>
 8028762:	a101      	add	r1, pc, #4	; (adr r1, 8028768 <_printf_i+0x40>)
 8028764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8028768:	080287c1 	.word	0x080287c1
 802876c:	080287d5 	.word	0x080287d5
 8028770:	08028751 	.word	0x08028751
 8028774:	08028751 	.word	0x08028751
 8028778:	08028751 	.word	0x08028751
 802877c:	08028751 	.word	0x08028751
 8028780:	080287d5 	.word	0x080287d5
 8028784:	08028751 	.word	0x08028751
 8028788:	08028751 	.word	0x08028751
 802878c:	08028751 	.word	0x08028751
 8028790:	08028751 	.word	0x08028751
 8028794:	080288e1 	.word	0x080288e1
 8028798:	08028805 	.word	0x08028805
 802879c:	080288c3 	.word	0x080288c3
 80287a0:	08028751 	.word	0x08028751
 80287a4:	08028751 	.word	0x08028751
 80287a8:	08028903 	.word	0x08028903
 80287ac:	08028751 	.word	0x08028751
 80287b0:	08028805 	.word	0x08028805
 80287b4:	08028751 	.word	0x08028751
 80287b8:	08028751 	.word	0x08028751
 80287bc:	080288cb 	.word	0x080288cb
 80287c0:	682b      	ldr	r3, [r5, #0]
 80287c2:	1d1a      	adds	r2, r3, #4
 80287c4:	681b      	ldr	r3, [r3, #0]
 80287c6:	602a      	str	r2, [r5, #0]
 80287c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80287cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80287d0:	2301      	movs	r3, #1
 80287d2:	e0a3      	b.n	802891c <_printf_i+0x1f4>
 80287d4:	6820      	ldr	r0, [r4, #0]
 80287d6:	6829      	ldr	r1, [r5, #0]
 80287d8:	0606      	lsls	r6, r0, #24
 80287da:	f101 0304 	add.w	r3, r1, #4
 80287de:	d50a      	bpl.n	80287f6 <_printf_i+0xce>
 80287e0:	680e      	ldr	r6, [r1, #0]
 80287e2:	602b      	str	r3, [r5, #0]
 80287e4:	2e00      	cmp	r6, #0
 80287e6:	da03      	bge.n	80287f0 <_printf_i+0xc8>
 80287e8:	232d      	movs	r3, #45	; 0x2d
 80287ea:	4276      	negs	r6, r6
 80287ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80287f0:	485e      	ldr	r0, [pc, #376]	; (802896c <_printf_i+0x244>)
 80287f2:	230a      	movs	r3, #10
 80287f4:	e019      	b.n	802882a <_printf_i+0x102>
 80287f6:	680e      	ldr	r6, [r1, #0]
 80287f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80287fc:	602b      	str	r3, [r5, #0]
 80287fe:	bf18      	it	ne
 8028800:	b236      	sxthne	r6, r6
 8028802:	e7ef      	b.n	80287e4 <_printf_i+0xbc>
 8028804:	682b      	ldr	r3, [r5, #0]
 8028806:	6820      	ldr	r0, [r4, #0]
 8028808:	1d19      	adds	r1, r3, #4
 802880a:	6029      	str	r1, [r5, #0]
 802880c:	0601      	lsls	r1, r0, #24
 802880e:	d501      	bpl.n	8028814 <_printf_i+0xec>
 8028810:	681e      	ldr	r6, [r3, #0]
 8028812:	e002      	b.n	802881a <_printf_i+0xf2>
 8028814:	0646      	lsls	r6, r0, #25
 8028816:	d5fb      	bpl.n	8028810 <_printf_i+0xe8>
 8028818:	881e      	ldrh	r6, [r3, #0]
 802881a:	2f6f      	cmp	r7, #111	; 0x6f
 802881c:	4853      	ldr	r0, [pc, #332]	; (802896c <_printf_i+0x244>)
 802881e:	bf0c      	ite	eq
 8028820:	2308      	moveq	r3, #8
 8028822:	230a      	movne	r3, #10
 8028824:	2100      	movs	r1, #0
 8028826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802882a:	6865      	ldr	r5, [r4, #4]
 802882c:	2d00      	cmp	r5, #0
 802882e:	60a5      	str	r5, [r4, #8]
 8028830:	bfa2      	ittt	ge
 8028832:	6821      	ldrge	r1, [r4, #0]
 8028834:	f021 0104 	bicge.w	r1, r1, #4
 8028838:	6021      	strge	r1, [r4, #0]
 802883a:	b90e      	cbnz	r6, 8028840 <_printf_i+0x118>
 802883c:	2d00      	cmp	r5, #0
 802883e:	d04d      	beq.n	80288dc <_printf_i+0x1b4>
 8028840:	4615      	mov	r5, r2
 8028842:	fbb6 f1f3 	udiv	r1, r6, r3
 8028846:	fb03 6711 	mls	r7, r3, r1, r6
 802884a:	5dc7      	ldrb	r7, [r0, r7]
 802884c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8028850:	4637      	mov	r7, r6
 8028852:	460e      	mov	r6, r1
 8028854:	42bb      	cmp	r3, r7
 8028856:	d9f4      	bls.n	8028842 <_printf_i+0x11a>
 8028858:	2b08      	cmp	r3, #8
 802885a:	d10b      	bne.n	8028874 <_printf_i+0x14c>
 802885c:	6823      	ldr	r3, [r4, #0]
 802885e:	07de      	lsls	r6, r3, #31
 8028860:	d508      	bpl.n	8028874 <_printf_i+0x14c>
 8028862:	6923      	ldr	r3, [r4, #16]
 8028864:	6861      	ldr	r1, [r4, #4]
 8028866:	4299      	cmp	r1, r3
 8028868:	bfde      	ittt	le
 802886a:	2330      	movle	r3, #48	; 0x30
 802886c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8028870:	f105 35ff 	addle.w	r5, r5, #4294967295
 8028874:	1b52      	subs	r2, r2, r5
 8028876:	6122      	str	r2, [r4, #16]
 8028878:	464b      	mov	r3, r9
 802887a:	aa03      	add	r2, sp, #12
 802887c:	4621      	mov	r1, r4
 802887e:	4640      	mov	r0, r8
 8028880:	f8cd a000 	str.w	sl, [sp]
 8028884:	f7ff fee0 	bl	8028648 <_printf_common>
 8028888:	3001      	adds	r0, #1
 802888a:	d14c      	bne.n	8028926 <_printf_i+0x1fe>
 802888c:	f04f 30ff 	mov.w	r0, #4294967295
 8028890:	b004      	add	sp, #16
 8028892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028896:	4835      	ldr	r0, [pc, #212]	; (802896c <_printf_i+0x244>)
 8028898:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802889c:	6829      	ldr	r1, [r5, #0]
 802889e:	6823      	ldr	r3, [r4, #0]
 80288a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80288a4:	6029      	str	r1, [r5, #0]
 80288a6:	061d      	lsls	r5, r3, #24
 80288a8:	d514      	bpl.n	80288d4 <_printf_i+0x1ac>
 80288aa:	07df      	lsls	r7, r3, #31
 80288ac:	bf44      	itt	mi
 80288ae:	f043 0320 	orrmi.w	r3, r3, #32
 80288b2:	6023      	strmi	r3, [r4, #0]
 80288b4:	b91e      	cbnz	r6, 80288be <_printf_i+0x196>
 80288b6:	6823      	ldr	r3, [r4, #0]
 80288b8:	f023 0320 	bic.w	r3, r3, #32
 80288bc:	6023      	str	r3, [r4, #0]
 80288be:	2310      	movs	r3, #16
 80288c0:	e7b0      	b.n	8028824 <_printf_i+0xfc>
 80288c2:	6823      	ldr	r3, [r4, #0]
 80288c4:	f043 0320 	orr.w	r3, r3, #32
 80288c8:	6023      	str	r3, [r4, #0]
 80288ca:	2378      	movs	r3, #120	; 0x78
 80288cc:	4828      	ldr	r0, [pc, #160]	; (8028970 <_printf_i+0x248>)
 80288ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80288d2:	e7e3      	b.n	802889c <_printf_i+0x174>
 80288d4:	0659      	lsls	r1, r3, #25
 80288d6:	bf48      	it	mi
 80288d8:	b2b6      	uxthmi	r6, r6
 80288da:	e7e6      	b.n	80288aa <_printf_i+0x182>
 80288dc:	4615      	mov	r5, r2
 80288de:	e7bb      	b.n	8028858 <_printf_i+0x130>
 80288e0:	682b      	ldr	r3, [r5, #0]
 80288e2:	6826      	ldr	r6, [r4, #0]
 80288e4:	1d18      	adds	r0, r3, #4
 80288e6:	6961      	ldr	r1, [r4, #20]
 80288e8:	6028      	str	r0, [r5, #0]
 80288ea:	0635      	lsls	r5, r6, #24
 80288ec:	681b      	ldr	r3, [r3, #0]
 80288ee:	d501      	bpl.n	80288f4 <_printf_i+0x1cc>
 80288f0:	6019      	str	r1, [r3, #0]
 80288f2:	e002      	b.n	80288fa <_printf_i+0x1d2>
 80288f4:	0670      	lsls	r0, r6, #25
 80288f6:	d5fb      	bpl.n	80288f0 <_printf_i+0x1c8>
 80288f8:	8019      	strh	r1, [r3, #0]
 80288fa:	2300      	movs	r3, #0
 80288fc:	4615      	mov	r5, r2
 80288fe:	6123      	str	r3, [r4, #16]
 8028900:	e7ba      	b.n	8028878 <_printf_i+0x150>
 8028902:	682b      	ldr	r3, [r5, #0]
 8028904:	2100      	movs	r1, #0
 8028906:	1d1a      	adds	r2, r3, #4
 8028908:	602a      	str	r2, [r5, #0]
 802890a:	681d      	ldr	r5, [r3, #0]
 802890c:	6862      	ldr	r2, [r4, #4]
 802890e:	4628      	mov	r0, r5
 8028910:	f000 fc92 	bl	8029238 <memchr>
 8028914:	b108      	cbz	r0, 802891a <_printf_i+0x1f2>
 8028916:	1b40      	subs	r0, r0, r5
 8028918:	6060      	str	r0, [r4, #4]
 802891a:	6863      	ldr	r3, [r4, #4]
 802891c:	6123      	str	r3, [r4, #16]
 802891e:	2300      	movs	r3, #0
 8028920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028924:	e7a8      	b.n	8028878 <_printf_i+0x150>
 8028926:	6923      	ldr	r3, [r4, #16]
 8028928:	462a      	mov	r2, r5
 802892a:	4649      	mov	r1, r9
 802892c:	4640      	mov	r0, r8
 802892e:	47d0      	blx	sl
 8028930:	3001      	adds	r0, #1
 8028932:	d0ab      	beq.n	802888c <_printf_i+0x164>
 8028934:	6823      	ldr	r3, [r4, #0]
 8028936:	079b      	lsls	r3, r3, #30
 8028938:	d413      	bmi.n	8028962 <_printf_i+0x23a>
 802893a:	68e0      	ldr	r0, [r4, #12]
 802893c:	9b03      	ldr	r3, [sp, #12]
 802893e:	4298      	cmp	r0, r3
 8028940:	bfb8      	it	lt
 8028942:	4618      	movlt	r0, r3
 8028944:	e7a4      	b.n	8028890 <_printf_i+0x168>
 8028946:	2301      	movs	r3, #1
 8028948:	4632      	mov	r2, r6
 802894a:	4649      	mov	r1, r9
 802894c:	4640      	mov	r0, r8
 802894e:	47d0      	blx	sl
 8028950:	3001      	adds	r0, #1
 8028952:	d09b      	beq.n	802888c <_printf_i+0x164>
 8028954:	3501      	adds	r5, #1
 8028956:	68e3      	ldr	r3, [r4, #12]
 8028958:	9903      	ldr	r1, [sp, #12]
 802895a:	1a5b      	subs	r3, r3, r1
 802895c:	42ab      	cmp	r3, r5
 802895e:	dcf2      	bgt.n	8028946 <_printf_i+0x21e>
 8028960:	e7eb      	b.n	802893a <_printf_i+0x212>
 8028962:	2500      	movs	r5, #0
 8028964:	f104 0619 	add.w	r6, r4, #25
 8028968:	e7f5      	b.n	8028956 <_printf_i+0x22e>
 802896a:	bf00      	nop
 802896c:	0802c2ad 	.word	0x0802c2ad
 8028970:	0802c2be 	.word	0x0802c2be

08028974 <iprintf>:
 8028974:	b40f      	push	{r0, r1, r2, r3}
 8028976:	4b0a      	ldr	r3, [pc, #40]	; (80289a0 <iprintf+0x2c>)
 8028978:	b513      	push	{r0, r1, r4, lr}
 802897a:	681c      	ldr	r4, [r3, #0]
 802897c:	b124      	cbz	r4, 8028988 <iprintf+0x14>
 802897e:	69a3      	ldr	r3, [r4, #24]
 8028980:	b913      	cbnz	r3, 8028988 <iprintf+0x14>
 8028982:	4620      	mov	r0, r4
 8028984:	f000 fb52 	bl	802902c <__sinit>
 8028988:	ab05      	add	r3, sp, #20
 802898a:	9a04      	ldr	r2, [sp, #16]
 802898c:	68a1      	ldr	r1, [r4, #8]
 802898e:	4620      	mov	r0, r4
 8028990:	9301      	str	r3, [sp, #4]
 8028992:	f7ff fd29 	bl	80283e8 <_vfiprintf_r>
 8028996:	b002      	add	sp, #8
 8028998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802899c:	b004      	add	sp, #16
 802899e:	4770      	bx	lr
 80289a0:	200000c4 	.word	0x200000c4

080289a4 <_puts_r>:
 80289a4:	b570      	push	{r4, r5, r6, lr}
 80289a6:	460e      	mov	r6, r1
 80289a8:	4605      	mov	r5, r0
 80289aa:	b118      	cbz	r0, 80289b4 <_puts_r+0x10>
 80289ac:	6983      	ldr	r3, [r0, #24]
 80289ae:	b90b      	cbnz	r3, 80289b4 <_puts_r+0x10>
 80289b0:	f000 fb3c 	bl	802902c <__sinit>
 80289b4:	69ab      	ldr	r3, [r5, #24]
 80289b6:	68ac      	ldr	r4, [r5, #8]
 80289b8:	b913      	cbnz	r3, 80289c0 <_puts_r+0x1c>
 80289ba:	4628      	mov	r0, r5
 80289bc:	f000 fb36 	bl	802902c <__sinit>
 80289c0:	4b2c      	ldr	r3, [pc, #176]	; (8028a74 <_puts_r+0xd0>)
 80289c2:	429c      	cmp	r4, r3
 80289c4:	d120      	bne.n	8028a08 <_puts_r+0x64>
 80289c6:	686c      	ldr	r4, [r5, #4]
 80289c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80289ca:	07db      	lsls	r3, r3, #31
 80289cc:	d405      	bmi.n	80289da <_puts_r+0x36>
 80289ce:	89a3      	ldrh	r3, [r4, #12]
 80289d0:	0598      	lsls	r0, r3, #22
 80289d2:	d402      	bmi.n	80289da <_puts_r+0x36>
 80289d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80289d6:	f000 fbc7 	bl	8029168 <__retarget_lock_acquire_recursive>
 80289da:	89a3      	ldrh	r3, [r4, #12]
 80289dc:	0719      	lsls	r1, r3, #28
 80289de:	d51d      	bpl.n	8028a1c <_puts_r+0x78>
 80289e0:	6923      	ldr	r3, [r4, #16]
 80289e2:	b1db      	cbz	r3, 8028a1c <_puts_r+0x78>
 80289e4:	3e01      	subs	r6, #1
 80289e6:	68a3      	ldr	r3, [r4, #8]
 80289e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80289ec:	3b01      	subs	r3, #1
 80289ee:	60a3      	str	r3, [r4, #8]
 80289f0:	bb39      	cbnz	r1, 8028a42 <_puts_r+0x9e>
 80289f2:	2b00      	cmp	r3, #0
 80289f4:	da38      	bge.n	8028a68 <_puts_r+0xc4>
 80289f6:	4622      	mov	r2, r4
 80289f8:	210a      	movs	r1, #10
 80289fa:	4628      	mov	r0, r5
 80289fc:	f000 f8da 	bl	8028bb4 <__swbuf_r>
 8028a00:	3001      	adds	r0, #1
 8028a02:	d011      	beq.n	8028a28 <_puts_r+0x84>
 8028a04:	250a      	movs	r5, #10
 8028a06:	e011      	b.n	8028a2c <_puts_r+0x88>
 8028a08:	4b1b      	ldr	r3, [pc, #108]	; (8028a78 <_puts_r+0xd4>)
 8028a0a:	429c      	cmp	r4, r3
 8028a0c:	d101      	bne.n	8028a12 <_puts_r+0x6e>
 8028a0e:	68ac      	ldr	r4, [r5, #8]
 8028a10:	e7da      	b.n	80289c8 <_puts_r+0x24>
 8028a12:	4b1a      	ldr	r3, [pc, #104]	; (8028a7c <_puts_r+0xd8>)
 8028a14:	429c      	cmp	r4, r3
 8028a16:	bf08      	it	eq
 8028a18:	68ec      	ldreq	r4, [r5, #12]
 8028a1a:	e7d5      	b.n	80289c8 <_puts_r+0x24>
 8028a1c:	4621      	mov	r1, r4
 8028a1e:	4628      	mov	r0, r5
 8028a20:	f000 f91a 	bl	8028c58 <__swsetup_r>
 8028a24:	2800      	cmp	r0, #0
 8028a26:	d0dd      	beq.n	80289e4 <_puts_r+0x40>
 8028a28:	f04f 35ff 	mov.w	r5, #4294967295
 8028a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028a2e:	07da      	lsls	r2, r3, #31
 8028a30:	d405      	bmi.n	8028a3e <_puts_r+0x9a>
 8028a32:	89a3      	ldrh	r3, [r4, #12]
 8028a34:	059b      	lsls	r3, r3, #22
 8028a36:	d402      	bmi.n	8028a3e <_puts_r+0x9a>
 8028a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028a3a:	f000 fb97 	bl	802916c <__retarget_lock_release_recursive>
 8028a3e:	4628      	mov	r0, r5
 8028a40:	bd70      	pop	{r4, r5, r6, pc}
 8028a42:	2b00      	cmp	r3, #0
 8028a44:	da04      	bge.n	8028a50 <_puts_r+0xac>
 8028a46:	69a2      	ldr	r2, [r4, #24]
 8028a48:	429a      	cmp	r2, r3
 8028a4a:	dc06      	bgt.n	8028a5a <_puts_r+0xb6>
 8028a4c:	290a      	cmp	r1, #10
 8028a4e:	d004      	beq.n	8028a5a <_puts_r+0xb6>
 8028a50:	6823      	ldr	r3, [r4, #0]
 8028a52:	1c5a      	adds	r2, r3, #1
 8028a54:	6022      	str	r2, [r4, #0]
 8028a56:	7019      	strb	r1, [r3, #0]
 8028a58:	e7c5      	b.n	80289e6 <_puts_r+0x42>
 8028a5a:	4622      	mov	r2, r4
 8028a5c:	4628      	mov	r0, r5
 8028a5e:	f000 f8a9 	bl	8028bb4 <__swbuf_r>
 8028a62:	3001      	adds	r0, #1
 8028a64:	d1bf      	bne.n	80289e6 <_puts_r+0x42>
 8028a66:	e7df      	b.n	8028a28 <_puts_r+0x84>
 8028a68:	6823      	ldr	r3, [r4, #0]
 8028a6a:	250a      	movs	r5, #10
 8028a6c:	1c5a      	adds	r2, r3, #1
 8028a6e:	6022      	str	r2, [r4, #0]
 8028a70:	701d      	strb	r5, [r3, #0]
 8028a72:	e7db      	b.n	8028a2c <_puts_r+0x88>
 8028a74:	0802c368 	.word	0x0802c368
 8028a78:	0802c388 	.word	0x0802c388
 8028a7c:	0802c348 	.word	0x0802c348

08028a80 <puts>:
 8028a80:	4b02      	ldr	r3, [pc, #8]	; (8028a8c <puts+0xc>)
 8028a82:	4601      	mov	r1, r0
 8028a84:	6818      	ldr	r0, [r3, #0]
 8028a86:	f7ff bf8d 	b.w	80289a4 <_puts_r>
 8028a8a:	bf00      	nop
 8028a8c:	200000c4 	.word	0x200000c4

08028a90 <rand>:
 8028a90:	4b16      	ldr	r3, [pc, #88]	; (8028aec <rand+0x5c>)
 8028a92:	b510      	push	{r4, lr}
 8028a94:	681c      	ldr	r4, [r3, #0]
 8028a96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8028a98:	b9b3      	cbnz	r3, 8028ac8 <rand+0x38>
 8028a9a:	2018      	movs	r0, #24
 8028a9c:	f7ff fb74 	bl	8028188 <malloc>
 8028aa0:	63a0      	str	r0, [r4, #56]	; 0x38
 8028aa2:	b928      	cbnz	r0, 8028ab0 <rand+0x20>
 8028aa4:	4602      	mov	r2, r0
 8028aa6:	4b12      	ldr	r3, [pc, #72]	; (8028af0 <rand+0x60>)
 8028aa8:	214e      	movs	r1, #78	; 0x4e
 8028aaa:	4812      	ldr	r0, [pc, #72]	; (8028af4 <rand+0x64>)
 8028aac:	f7ff fafe 	bl	80280ac <__assert_func>
 8028ab0:	4a11      	ldr	r2, [pc, #68]	; (8028af8 <rand+0x68>)
 8028ab2:	4b12      	ldr	r3, [pc, #72]	; (8028afc <rand+0x6c>)
 8028ab4:	e9c0 2300 	strd	r2, r3, [r0]
 8028ab8:	4b11      	ldr	r3, [pc, #68]	; (8028b00 <rand+0x70>)
 8028aba:	2201      	movs	r2, #1
 8028abc:	6083      	str	r3, [r0, #8]
 8028abe:	230b      	movs	r3, #11
 8028ac0:	8183      	strh	r3, [r0, #12]
 8028ac2:	2300      	movs	r3, #0
 8028ac4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8028ac8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8028aca:	4a0e      	ldr	r2, [pc, #56]	; (8028b04 <rand+0x74>)
 8028acc:	6920      	ldr	r0, [r4, #16]
 8028ace:	6963      	ldr	r3, [r4, #20]
 8028ad0:	490d      	ldr	r1, [pc, #52]	; (8028b08 <rand+0x78>)
 8028ad2:	4342      	muls	r2, r0
 8028ad4:	fb01 2203 	mla	r2, r1, r3, r2
 8028ad8:	fba0 0101 	umull	r0, r1, r0, r1
 8028adc:	1c43      	adds	r3, r0, #1
 8028ade:	eb42 0001 	adc.w	r0, r2, r1
 8028ae2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8028ae6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8028aea:	bd10      	pop	{r4, pc}
 8028aec:	200000c4 	.word	0x200000c4
 8028af0:	0802c2d4 	.word	0x0802c2d4
 8028af4:	0802c2eb 	.word	0x0802c2eb
 8028af8:	abcd330e 	.word	0xabcd330e
 8028afc:	e66d1234 	.word	0xe66d1234
 8028b00:	0005deec 	.word	0x0005deec
 8028b04:	5851f42d 	.word	0x5851f42d
 8028b08:	4c957f2d 	.word	0x4c957f2d

08028b0c <_sbrk_r>:
 8028b0c:	b538      	push	{r3, r4, r5, lr}
 8028b0e:	2300      	movs	r3, #0
 8028b10:	4d05      	ldr	r5, [pc, #20]	; (8028b28 <_sbrk_r+0x1c>)
 8028b12:	4604      	mov	r4, r0
 8028b14:	4608      	mov	r0, r1
 8028b16:	602b      	str	r3, [r5, #0]
 8028b18:	f7d8 fff6 	bl	8001b08 <_sbrk>
 8028b1c:	1c43      	adds	r3, r0, #1
 8028b1e:	d102      	bne.n	8028b26 <_sbrk_r+0x1a>
 8028b20:	682b      	ldr	r3, [r5, #0]
 8028b22:	b103      	cbz	r3, 8028b26 <_sbrk_r+0x1a>
 8028b24:	6023      	str	r3, [r4, #0]
 8028b26:	bd38      	pop	{r3, r4, r5, pc}
 8028b28:	20198590 	.word	0x20198590

08028b2c <_raise_r>:
 8028b2c:	291f      	cmp	r1, #31
 8028b2e:	b538      	push	{r3, r4, r5, lr}
 8028b30:	4604      	mov	r4, r0
 8028b32:	460d      	mov	r5, r1
 8028b34:	d904      	bls.n	8028b40 <_raise_r+0x14>
 8028b36:	2316      	movs	r3, #22
 8028b38:	6003      	str	r3, [r0, #0]
 8028b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8028b3e:	bd38      	pop	{r3, r4, r5, pc}
 8028b40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8028b42:	b112      	cbz	r2, 8028b4a <_raise_r+0x1e>
 8028b44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028b48:	b94b      	cbnz	r3, 8028b5e <_raise_r+0x32>
 8028b4a:	4620      	mov	r0, r4
 8028b4c:	f000 f830 	bl	8028bb0 <_getpid_r>
 8028b50:	462a      	mov	r2, r5
 8028b52:	4601      	mov	r1, r0
 8028b54:	4620      	mov	r0, r4
 8028b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028b5a:	f000 b817 	b.w	8028b8c <_kill_r>
 8028b5e:	2b01      	cmp	r3, #1
 8028b60:	d00a      	beq.n	8028b78 <_raise_r+0x4c>
 8028b62:	1c59      	adds	r1, r3, #1
 8028b64:	d103      	bne.n	8028b6e <_raise_r+0x42>
 8028b66:	2316      	movs	r3, #22
 8028b68:	6003      	str	r3, [r0, #0]
 8028b6a:	2001      	movs	r0, #1
 8028b6c:	e7e7      	b.n	8028b3e <_raise_r+0x12>
 8028b6e:	2400      	movs	r4, #0
 8028b70:	4628      	mov	r0, r5
 8028b72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028b76:	4798      	blx	r3
 8028b78:	2000      	movs	r0, #0
 8028b7a:	e7e0      	b.n	8028b3e <_raise_r+0x12>

08028b7c <raise>:
 8028b7c:	4b02      	ldr	r3, [pc, #8]	; (8028b88 <raise+0xc>)
 8028b7e:	4601      	mov	r1, r0
 8028b80:	6818      	ldr	r0, [r3, #0]
 8028b82:	f7ff bfd3 	b.w	8028b2c <_raise_r>
 8028b86:	bf00      	nop
 8028b88:	200000c4 	.word	0x200000c4

08028b8c <_kill_r>:
 8028b8c:	b538      	push	{r3, r4, r5, lr}
 8028b8e:	2300      	movs	r3, #0
 8028b90:	4d06      	ldr	r5, [pc, #24]	; (8028bac <_kill_r+0x20>)
 8028b92:	4604      	mov	r4, r0
 8028b94:	4608      	mov	r0, r1
 8028b96:	4611      	mov	r1, r2
 8028b98:	602b      	str	r3, [r5, #0]
 8028b9a:	f7d8 ff2d 	bl	80019f8 <_kill>
 8028b9e:	1c43      	adds	r3, r0, #1
 8028ba0:	d102      	bne.n	8028ba8 <_kill_r+0x1c>
 8028ba2:	682b      	ldr	r3, [r5, #0]
 8028ba4:	b103      	cbz	r3, 8028ba8 <_kill_r+0x1c>
 8028ba6:	6023      	str	r3, [r4, #0]
 8028ba8:	bd38      	pop	{r3, r4, r5, pc}
 8028baa:	bf00      	nop
 8028bac:	20198590 	.word	0x20198590

08028bb0 <_getpid_r>:
 8028bb0:	f7d8 bf1a 	b.w	80019e8 <_getpid>

08028bb4 <__swbuf_r>:
 8028bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028bb6:	460e      	mov	r6, r1
 8028bb8:	4614      	mov	r4, r2
 8028bba:	4605      	mov	r5, r0
 8028bbc:	b118      	cbz	r0, 8028bc6 <__swbuf_r+0x12>
 8028bbe:	6983      	ldr	r3, [r0, #24]
 8028bc0:	b90b      	cbnz	r3, 8028bc6 <__swbuf_r+0x12>
 8028bc2:	f000 fa33 	bl	802902c <__sinit>
 8028bc6:	4b21      	ldr	r3, [pc, #132]	; (8028c4c <__swbuf_r+0x98>)
 8028bc8:	429c      	cmp	r4, r3
 8028bca:	d12b      	bne.n	8028c24 <__swbuf_r+0x70>
 8028bcc:	686c      	ldr	r4, [r5, #4]
 8028bce:	69a3      	ldr	r3, [r4, #24]
 8028bd0:	60a3      	str	r3, [r4, #8]
 8028bd2:	89a3      	ldrh	r3, [r4, #12]
 8028bd4:	071a      	lsls	r2, r3, #28
 8028bd6:	d52f      	bpl.n	8028c38 <__swbuf_r+0x84>
 8028bd8:	6923      	ldr	r3, [r4, #16]
 8028bda:	b36b      	cbz	r3, 8028c38 <__swbuf_r+0x84>
 8028bdc:	6923      	ldr	r3, [r4, #16]
 8028bde:	b2f6      	uxtb	r6, r6
 8028be0:	6820      	ldr	r0, [r4, #0]
 8028be2:	4637      	mov	r7, r6
 8028be4:	1ac0      	subs	r0, r0, r3
 8028be6:	6963      	ldr	r3, [r4, #20]
 8028be8:	4283      	cmp	r3, r0
 8028bea:	dc04      	bgt.n	8028bf6 <__swbuf_r+0x42>
 8028bec:	4621      	mov	r1, r4
 8028bee:	4628      	mov	r0, r5
 8028bf0:	f000 f988 	bl	8028f04 <_fflush_r>
 8028bf4:	bb30      	cbnz	r0, 8028c44 <__swbuf_r+0x90>
 8028bf6:	68a3      	ldr	r3, [r4, #8]
 8028bf8:	3001      	adds	r0, #1
 8028bfa:	3b01      	subs	r3, #1
 8028bfc:	60a3      	str	r3, [r4, #8]
 8028bfe:	6823      	ldr	r3, [r4, #0]
 8028c00:	1c5a      	adds	r2, r3, #1
 8028c02:	6022      	str	r2, [r4, #0]
 8028c04:	701e      	strb	r6, [r3, #0]
 8028c06:	6963      	ldr	r3, [r4, #20]
 8028c08:	4283      	cmp	r3, r0
 8028c0a:	d004      	beq.n	8028c16 <__swbuf_r+0x62>
 8028c0c:	89a3      	ldrh	r3, [r4, #12]
 8028c0e:	07db      	lsls	r3, r3, #31
 8028c10:	d506      	bpl.n	8028c20 <__swbuf_r+0x6c>
 8028c12:	2e0a      	cmp	r6, #10
 8028c14:	d104      	bne.n	8028c20 <__swbuf_r+0x6c>
 8028c16:	4621      	mov	r1, r4
 8028c18:	4628      	mov	r0, r5
 8028c1a:	f000 f973 	bl	8028f04 <_fflush_r>
 8028c1e:	b988      	cbnz	r0, 8028c44 <__swbuf_r+0x90>
 8028c20:	4638      	mov	r0, r7
 8028c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028c24:	4b0a      	ldr	r3, [pc, #40]	; (8028c50 <__swbuf_r+0x9c>)
 8028c26:	429c      	cmp	r4, r3
 8028c28:	d101      	bne.n	8028c2e <__swbuf_r+0x7a>
 8028c2a:	68ac      	ldr	r4, [r5, #8]
 8028c2c:	e7cf      	b.n	8028bce <__swbuf_r+0x1a>
 8028c2e:	4b09      	ldr	r3, [pc, #36]	; (8028c54 <__swbuf_r+0xa0>)
 8028c30:	429c      	cmp	r4, r3
 8028c32:	bf08      	it	eq
 8028c34:	68ec      	ldreq	r4, [r5, #12]
 8028c36:	e7ca      	b.n	8028bce <__swbuf_r+0x1a>
 8028c38:	4621      	mov	r1, r4
 8028c3a:	4628      	mov	r0, r5
 8028c3c:	f000 f80c 	bl	8028c58 <__swsetup_r>
 8028c40:	2800      	cmp	r0, #0
 8028c42:	d0cb      	beq.n	8028bdc <__swbuf_r+0x28>
 8028c44:	f04f 37ff 	mov.w	r7, #4294967295
 8028c48:	e7ea      	b.n	8028c20 <__swbuf_r+0x6c>
 8028c4a:	bf00      	nop
 8028c4c:	0802c368 	.word	0x0802c368
 8028c50:	0802c388 	.word	0x0802c388
 8028c54:	0802c348 	.word	0x0802c348

08028c58 <__swsetup_r>:
 8028c58:	4b32      	ldr	r3, [pc, #200]	; (8028d24 <__swsetup_r+0xcc>)
 8028c5a:	b570      	push	{r4, r5, r6, lr}
 8028c5c:	681d      	ldr	r5, [r3, #0]
 8028c5e:	4606      	mov	r6, r0
 8028c60:	460c      	mov	r4, r1
 8028c62:	b125      	cbz	r5, 8028c6e <__swsetup_r+0x16>
 8028c64:	69ab      	ldr	r3, [r5, #24]
 8028c66:	b913      	cbnz	r3, 8028c6e <__swsetup_r+0x16>
 8028c68:	4628      	mov	r0, r5
 8028c6a:	f000 f9df 	bl	802902c <__sinit>
 8028c6e:	4b2e      	ldr	r3, [pc, #184]	; (8028d28 <__swsetup_r+0xd0>)
 8028c70:	429c      	cmp	r4, r3
 8028c72:	d10f      	bne.n	8028c94 <__swsetup_r+0x3c>
 8028c74:	686c      	ldr	r4, [r5, #4]
 8028c76:	89a3      	ldrh	r3, [r4, #12]
 8028c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028c7c:	0719      	lsls	r1, r3, #28
 8028c7e:	d42c      	bmi.n	8028cda <__swsetup_r+0x82>
 8028c80:	06dd      	lsls	r5, r3, #27
 8028c82:	d411      	bmi.n	8028ca8 <__swsetup_r+0x50>
 8028c84:	2309      	movs	r3, #9
 8028c86:	6033      	str	r3, [r6, #0]
 8028c88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8028c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8028c90:	81a3      	strh	r3, [r4, #12]
 8028c92:	e03e      	b.n	8028d12 <__swsetup_r+0xba>
 8028c94:	4b25      	ldr	r3, [pc, #148]	; (8028d2c <__swsetup_r+0xd4>)
 8028c96:	429c      	cmp	r4, r3
 8028c98:	d101      	bne.n	8028c9e <__swsetup_r+0x46>
 8028c9a:	68ac      	ldr	r4, [r5, #8]
 8028c9c:	e7eb      	b.n	8028c76 <__swsetup_r+0x1e>
 8028c9e:	4b24      	ldr	r3, [pc, #144]	; (8028d30 <__swsetup_r+0xd8>)
 8028ca0:	429c      	cmp	r4, r3
 8028ca2:	bf08      	it	eq
 8028ca4:	68ec      	ldreq	r4, [r5, #12]
 8028ca6:	e7e6      	b.n	8028c76 <__swsetup_r+0x1e>
 8028ca8:	0758      	lsls	r0, r3, #29
 8028caa:	d512      	bpl.n	8028cd2 <__swsetup_r+0x7a>
 8028cac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028cae:	b141      	cbz	r1, 8028cc2 <__swsetup_r+0x6a>
 8028cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028cb4:	4299      	cmp	r1, r3
 8028cb6:	d002      	beq.n	8028cbe <__swsetup_r+0x66>
 8028cb8:	4630      	mov	r0, r6
 8028cba:	f7ff fa8b 	bl	80281d4 <_free_r>
 8028cbe:	2300      	movs	r3, #0
 8028cc0:	6363      	str	r3, [r4, #52]	; 0x34
 8028cc2:	89a3      	ldrh	r3, [r4, #12]
 8028cc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028cc8:	81a3      	strh	r3, [r4, #12]
 8028cca:	2300      	movs	r3, #0
 8028ccc:	6063      	str	r3, [r4, #4]
 8028cce:	6923      	ldr	r3, [r4, #16]
 8028cd0:	6023      	str	r3, [r4, #0]
 8028cd2:	89a3      	ldrh	r3, [r4, #12]
 8028cd4:	f043 0308 	orr.w	r3, r3, #8
 8028cd8:	81a3      	strh	r3, [r4, #12]
 8028cda:	6923      	ldr	r3, [r4, #16]
 8028cdc:	b94b      	cbnz	r3, 8028cf2 <__swsetup_r+0x9a>
 8028cde:	89a3      	ldrh	r3, [r4, #12]
 8028ce0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8028ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028ce8:	d003      	beq.n	8028cf2 <__swsetup_r+0x9a>
 8028cea:	4621      	mov	r1, r4
 8028cec:	4630      	mov	r0, r6
 8028cee:	f000 fa63 	bl	80291b8 <__smakebuf_r>
 8028cf2:	89a0      	ldrh	r0, [r4, #12]
 8028cf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028cf8:	f010 0301 	ands.w	r3, r0, #1
 8028cfc:	d00a      	beq.n	8028d14 <__swsetup_r+0xbc>
 8028cfe:	2300      	movs	r3, #0
 8028d00:	60a3      	str	r3, [r4, #8]
 8028d02:	6963      	ldr	r3, [r4, #20]
 8028d04:	425b      	negs	r3, r3
 8028d06:	61a3      	str	r3, [r4, #24]
 8028d08:	6923      	ldr	r3, [r4, #16]
 8028d0a:	b943      	cbnz	r3, 8028d1e <__swsetup_r+0xc6>
 8028d0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8028d10:	d1ba      	bne.n	8028c88 <__swsetup_r+0x30>
 8028d12:	bd70      	pop	{r4, r5, r6, pc}
 8028d14:	0781      	lsls	r1, r0, #30
 8028d16:	bf58      	it	pl
 8028d18:	6963      	ldrpl	r3, [r4, #20]
 8028d1a:	60a3      	str	r3, [r4, #8]
 8028d1c:	e7f4      	b.n	8028d08 <__swsetup_r+0xb0>
 8028d1e:	2000      	movs	r0, #0
 8028d20:	e7f7      	b.n	8028d12 <__swsetup_r+0xba>
 8028d22:	bf00      	nop
 8028d24:	200000c4 	.word	0x200000c4
 8028d28:	0802c368 	.word	0x0802c368
 8028d2c:	0802c388 	.word	0x0802c388
 8028d30:	0802c348 	.word	0x0802c348

08028d34 <__register_exitproc>:
 8028d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028d38:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8028df8 <__register_exitproc+0xc4>
 8028d3c:	4606      	mov	r6, r0
 8028d3e:	461f      	mov	r7, r3
 8028d40:	460d      	mov	r5, r1
 8028d42:	f8d8 0000 	ldr.w	r0, [r8]
 8028d46:	4691      	mov	r9, r2
 8028d48:	f000 fa0e 	bl	8029168 <__retarget_lock_acquire_recursive>
 8028d4c:	4b26      	ldr	r3, [pc, #152]	; (8028de8 <__register_exitproc+0xb4>)
 8028d4e:	681c      	ldr	r4, [r3, #0]
 8028d50:	b934      	cbnz	r4, 8028d60 <__register_exitproc+0x2c>
 8028d52:	4c26      	ldr	r4, [pc, #152]	; (8028dec <__register_exitproc+0xb8>)
 8028d54:	601c      	str	r4, [r3, #0]
 8028d56:	4b26      	ldr	r3, [pc, #152]	; (8028df0 <__register_exitproc+0xbc>)
 8028d58:	b113      	cbz	r3, 8028d60 <__register_exitproc+0x2c>
 8028d5a:	681b      	ldr	r3, [r3, #0]
 8028d5c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8028d60:	6863      	ldr	r3, [r4, #4]
 8028d62:	2b1f      	cmp	r3, #31
 8028d64:	dd07      	ble.n	8028d76 <__register_exitproc+0x42>
 8028d66:	f8d8 0000 	ldr.w	r0, [r8]
 8028d6a:	f000 f9ff 	bl	802916c <__retarget_lock_release_recursive>
 8028d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8028d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028d76:	b35e      	cbz	r6, 8028dd0 <__register_exitproc+0x9c>
 8028d78:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8028d7c:	b988      	cbnz	r0, 8028da2 <__register_exitproc+0x6e>
 8028d7e:	4b1d      	ldr	r3, [pc, #116]	; (8028df4 <__register_exitproc+0xc0>)
 8028d80:	b923      	cbnz	r3, 8028d8c <__register_exitproc+0x58>
 8028d82:	f8d8 0000 	ldr.w	r0, [r8]
 8028d86:	f000 f9f0 	bl	802916a <__retarget_lock_release>
 8028d8a:	e7f0      	b.n	8028d6e <__register_exitproc+0x3a>
 8028d8c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8028d90:	f7ff f9fa 	bl	8028188 <malloc>
 8028d94:	2800      	cmp	r0, #0
 8028d96:	d0f4      	beq.n	8028d82 <__register_exitproc+0x4e>
 8028d98:	2300      	movs	r3, #0
 8028d9a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8028d9e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8028da2:	6863      	ldr	r3, [r4, #4]
 8028da4:	2201      	movs	r2, #1
 8028da6:	2e02      	cmp	r6, #2
 8028da8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8028dac:	fa02 f203 	lsl.w	r2, r2, r3
 8028db0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8028db4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8028db8:	ea43 0302 	orr.w	r3, r3, r2
 8028dbc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8028dc0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8028dc4:	bf02      	ittt	eq
 8028dc6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8028dca:	4313      	orreq	r3, r2
 8028dcc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8028dd0:	6863      	ldr	r3, [r4, #4]
 8028dd2:	f8d8 0000 	ldr.w	r0, [r8]
 8028dd6:	1c5a      	adds	r2, r3, #1
 8028dd8:	3302      	adds	r3, #2
 8028dda:	6062      	str	r2, [r4, #4]
 8028ddc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8028de0:	f000 f9c4 	bl	802916c <__retarget_lock_release_recursive>
 8028de4:	2000      	movs	r0, #0
 8028de6:	e7c4      	b.n	8028d72 <__register_exitproc+0x3e>
 8028de8:	20198588 	.word	0x20198588
 8028dec:	201984fc 	.word	0x201984fc
 8028df0:	0802c2d0 	.word	0x0802c2d0
 8028df4:	08028189 	.word	0x08028189
 8028df8:	20000128 	.word	0x20000128

08028dfc <__sflush_r>:
 8028dfc:	898a      	ldrh	r2, [r1, #12]
 8028dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028e02:	4605      	mov	r5, r0
 8028e04:	0710      	lsls	r0, r2, #28
 8028e06:	460c      	mov	r4, r1
 8028e08:	d458      	bmi.n	8028ebc <__sflush_r+0xc0>
 8028e0a:	684b      	ldr	r3, [r1, #4]
 8028e0c:	2b00      	cmp	r3, #0
 8028e0e:	dc05      	bgt.n	8028e1c <__sflush_r+0x20>
 8028e10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028e12:	2b00      	cmp	r3, #0
 8028e14:	dc02      	bgt.n	8028e1c <__sflush_r+0x20>
 8028e16:	2000      	movs	r0, #0
 8028e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028e1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028e1e:	2e00      	cmp	r6, #0
 8028e20:	d0f9      	beq.n	8028e16 <__sflush_r+0x1a>
 8028e22:	2300      	movs	r3, #0
 8028e24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028e28:	682f      	ldr	r7, [r5, #0]
 8028e2a:	602b      	str	r3, [r5, #0]
 8028e2c:	d032      	beq.n	8028e94 <__sflush_r+0x98>
 8028e2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028e30:	89a3      	ldrh	r3, [r4, #12]
 8028e32:	075a      	lsls	r2, r3, #29
 8028e34:	d505      	bpl.n	8028e42 <__sflush_r+0x46>
 8028e36:	6863      	ldr	r3, [r4, #4]
 8028e38:	1ac0      	subs	r0, r0, r3
 8028e3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028e3c:	b10b      	cbz	r3, 8028e42 <__sflush_r+0x46>
 8028e3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028e40:	1ac0      	subs	r0, r0, r3
 8028e42:	2300      	movs	r3, #0
 8028e44:	4602      	mov	r2, r0
 8028e46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028e48:	4628      	mov	r0, r5
 8028e4a:	6a21      	ldr	r1, [r4, #32]
 8028e4c:	47b0      	blx	r6
 8028e4e:	1c43      	adds	r3, r0, #1
 8028e50:	89a3      	ldrh	r3, [r4, #12]
 8028e52:	d106      	bne.n	8028e62 <__sflush_r+0x66>
 8028e54:	6829      	ldr	r1, [r5, #0]
 8028e56:	291d      	cmp	r1, #29
 8028e58:	d82c      	bhi.n	8028eb4 <__sflush_r+0xb8>
 8028e5a:	4a29      	ldr	r2, [pc, #164]	; (8028f00 <__sflush_r+0x104>)
 8028e5c:	40ca      	lsrs	r2, r1
 8028e5e:	07d6      	lsls	r6, r2, #31
 8028e60:	d528      	bpl.n	8028eb4 <__sflush_r+0xb8>
 8028e62:	2200      	movs	r2, #0
 8028e64:	04d9      	lsls	r1, r3, #19
 8028e66:	6062      	str	r2, [r4, #4]
 8028e68:	6922      	ldr	r2, [r4, #16]
 8028e6a:	6022      	str	r2, [r4, #0]
 8028e6c:	d504      	bpl.n	8028e78 <__sflush_r+0x7c>
 8028e6e:	1c42      	adds	r2, r0, #1
 8028e70:	d101      	bne.n	8028e76 <__sflush_r+0x7a>
 8028e72:	682b      	ldr	r3, [r5, #0]
 8028e74:	b903      	cbnz	r3, 8028e78 <__sflush_r+0x7c>
 8028e76:	6560      	str	r0, [r4, #84]	; 0x54
 8028e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028e7a:	602f      	str	r7, [r5, #0]
 8028e7c:	2900      	cmp	r1, #0
 8028e7e:	d0ca      	beq.n	8028e16 <__sflush_r+0x1a>
 8028e80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028e84:	4299      	cmp	r1, r3
 8028e86:	d002      	beq.n	8028e8e <__sflush_r+0x92>
 8028e88:	4628      	mov	r0, r5
 8028e8a:	f7ff f9a3 	bl	80281d4 <_free_r>
 8028e8e:	2000      	movs	r0, #0
 8028e90:	6360      	str	r0, [r4, #52]	; 0x34
 8028e92:	e7c1      	b.n	8028e18 <__sflush_r+0x1c>
 8028e94:	6a21      	ldr	r1, [r4, #32]
 8028e96:	2301      	movs	r3, #1
 8028e98:	4628      	mov	r0, r5
 8028e9a:	47b0      	blx	r6
 8028e9c:	1c41      	adds	r1, r0, #1
 8028e9e:	d1c7      	bne.n	8028e30 <__sflush_r+0x34>
 8028ea0:	682b      	ldr	r3, [r5, #0]
 8028ea2:	2b00      	cmp	r3, #0
 8028ea4:	d0c4      	beq.n	8028e30 <__sflush_r+0x34>
 8028ea6:	2b1d      	cmp	r3, #29
 8028ea8:	d001      	beq.n	8028eae <__sflush_r+0xb2>
 8028eaa:	2b16      	cmp	r3, #22
 8028eac:	d101      	bne.n	8028eb2 <__sflush_r+0xb6>
 8028eae:	602f      	str	r7, [r5, #0]
 8028eb0:	e7b1      	b.n	8028e16 <__sflush_r+0x1a>
 8028eb2:	89a3      	ldrh	r3, [r4, #12]
 8028eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028eb8:	81a3      	strh	r3, [r4, #12]
 8028eba:	e7ad      	b.n	8028e18 <__sflush_r+0x1c>
 8028ebc:	690f      	ldr	r7, [r1, #16]
 8028ebe:	2f00      	cmp	r7, #0
 8028ec0:	d0a9      	beq.n	8028e16 <__sflush_r+0x1a>
 8028ec2:	0793      	lsls	r3, r2, #30
 8028ec4:	680e      	ldr	r6, [r1, #0]
 8028ec6:	600f      	str	r7, [r1, #0]
 8028ec8:	bf0c      	ite	eq
 8028eca:	694b      	ldreq	r3, [r1, #20]
 8028ecc:	2300      	movne	r3, #0
 8028ece:	eba6 0807 	sub.w	r8, r6, r7
 8028ed2:	608b      	str	r3, [r1, #8]
 8028ed4:	f1b8 0f00 	cmp.w	r8, #0
 8028ed8:	dd9d      	ble.n	8028e16 <__sflush_r+0x1a>
 8028eda:	4643      	mov	r3, r8
 8028edc:	463a      	mov	r2, r7
 8028ede:	6a21      	ldr	r1, [r4, #32]
 8028ee0:	4628      	mov	r0, r5
 8028ee2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028ee4:	47b0      	blx	r6
 8028ee6:	2800      	cmp	r0, #0
 8028ee8:	dc06      	bgt.n	8028ef8 <__sflush_r+0xfc>
 8028eea:	89a3      	ldrh	r3, [r4, #12]
 8028eec:	f04f 30ff 	mov.w	r0, #4294967295
 8028ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028ef4:	81a3      	strh	r3, [r4, #12]
 8028ef6:	e78f      	b.n	8028e18 <__sflush_r+0x1c>
 8028ef8:	4407      	add	r7, r0
 8028efa:	eba8 0800 	sub.w	r8, r8, r0
 8028efe:	e7e9      	b.n	8028ed4 <__sflush_r+0xd8>
 8028f00:	20400001 	.word	0x20400001

08028f04 <_fflush_r>:
 8028f04:	b538      	push	{r3, r4, r5, lr}
 8028f06:	690b      	ldr	r3, [r1, #16]
 8028f08:	4605      	mov	r5, r0
 8028f0a:	460c      	mov	r4, r1
 8028f0c:	b913      	cbnz	r3, 8028f14 <_fflush_r+0x10>
 8028f0e:	2500      	movs	r5, #0
 8028f10:	4628      	mov	r0, r5
 8028f12:	bd38      	pop	{r3, r4, r5, pc}
 8028f14:	b118      	cbz	r0, 8028f1e <_fflush_r+0x1a>
 8028f16:	6983      	ldr	r3, [r0, #24]
 8028f18:	b90b      	cbnz	r3, 8028f1e <_fflush_r+0x1a>
 8028f1a:	f000 f887 	bl	802902c <__sinit>
 8028f1e:	4b14      	ldr	r3, [pc, #80]	; (8028f70 <_fflush_r+0x6c>)
 8028f20:	429c      	cmp	r4, r3
 8028f22:	d11b      	bne.n	8028f5c <_fflush_r+0x58>
 8028f24:	686c      	ldr	r4, [r5, #4]
 8028f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028f2a:	2b00      	cmp	r3, #0
 8028f2c:	d0ef      	beq.n	8028f0e <_fflush_r+0xa>
 8028f2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8028f30:	07d0      	lsls	r0, r2, #31
 8028f32:	d404      	bmi.n	8028f3e <_fflush_r+0x3a>
 8028f34:	0599      	lsls	r1, r3, #22
 8028f36:	d402      	bmi.n	8028f3e <_fflush_r+0x3a>
 8028f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028f3a:	f000 f915 	bl	8029168 <__retarget_lock_acquire_recursive>
 8028f3e:	4628      	mov	r0, r5
 8028f40:	4621      	mov	r1, r4
 8028f42:	f7ff ff5b 	bl	8028dfc <__sflush_r>
 8028f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028f48:	4605      	mov	r5, r0
 8028f4a:	07da      	lsls	r2, r3, #31
 8028f4c:	d4e0      	bmi.n	8028f10 <_fflush_r+0xc>
 8028f4e:	89a3      	ldrh	r3, [r4, #12]
 8028f50:	059b      	lsls	r3, r3, #22
 8028f52:	d4dd      	bmi.n	8028f10 <_fflush_r+0xc>
 8028f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028f56:	f000 f909 	bl	802916c <__retarget_lock_release_recursive>
 8028f5a:	e7d9      	b.n	8028f10 <_fflush_r+0xc>
 8028f5c:	4b05      	ldr	r3, [pc, #20]	; (8028f74 <_fflush_r+0x70>)
 8028f5e:	429c      	cmp	r4, r3
 8028f60:	d101      	bne.n	8028f66 <_fflush_r+0x62>
 8028f62:	68ac      	ldr	r4, [r5, #8]
 8028f64:	e7df      	b.n	8028f26 <_fflush_r+0x22>
 8028f66:	4b04      	ldr	r3, [pc, #16]	; (8028f78 <_fflush_r+0x74>)
 8028f68:	429c      	cmp	r4, r3
 8028f6a:	bf08      	it	eq
 8028f6c:	68ec      	ldreq	r4, [r5, #12]
 8028f6e:	e7da      	b.n	8028f26 <_fflush_r+0x22>
 8028f70:	0802c368 	.word	0x0802c368
 8028f74:	0802c388 	.word	0x0802c388
 8028f78:	0802c348 	.word	0x0802c348

08028f7c <std>:
 8028f7c:	2300      	movs	r3, #0
 8028f7e:	b510      	push	{r4, lr}
 8028f80:	4604      	mov	r4, r0
 8028f82:	6083      	str	r3, [r0, #8]
 8028f84:	8181      	strh	r1, [r0, #12]
 8028f86:	4619      	mov	r1, r3
 8028f88:	6643      	str	r3, [r0, #100]	; 0x64
 8028f8a:	81c2      	strh	r2, [r0, #14]
 8028f8c:	2208      	movs	r2, #8
 8028f8e:	6183      	str	r3, [r0, #24]
 8028f90:	e9c0 3300 	strd	r3, r3, [r0]
 8028f94:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028f98:	305c      	adds	r0, #92	; 0x5c
 8028f9a:	f7ff f912 	bl	80281c2 <memset>
 8028f9e:	4b05      	ldr	r3, [pc, #20]	; (8028fb4 <std+0x38>)
 8028fa0:	6224      	str	r4, [r4, #32]
 8028fa2:	6263      	str	r3, [r4, #36]	; 0x24
 8028fa4:	4b04      	ldr	r3, [pc, #16]	; (8028fb8 <std+0x3c>)
 8028fa6:	62a3      	str	r3, [r4, #40]	; 0x28
 8028fa8:	4b04      	ldr	r3, [pc, #16]	; (8028fbc <std+0x40>)
 8028faa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028fac:	4b04      	ldr	r3, [pc, #16]	; (8028fc0 <std+0x44>)
 8028fae:	6323      	str	r3, [r4, #48]	; 0x30
 8028fb0:	bd10      	pop	{r4, pc}
 8028fb2:	bf00      	nop
 8028fb4:	0802926d 	.word	0x0802926d
 8028fb8:	0802928f 	.word	0x0802928f
 8028fbc:	080292c7 	.word	0x080292c7
 8028fc0:	080292eb 	.word	0x080292eb

08028fc4 <_cleanup_r>:
 8028fc4:	4901      	ldr	r1, [pc, #4]	; (8028fcc <_cleanup_r+0x8>)
 8028fc6:	f000 b8af 	b.w	8029128 <_fwalk_reent>
 8028fca:	bf00      	nop
 8028fcc:	08028f05 	.word	0x08028f05

08028fd0 <__sfmoreglue>:
 8028fd0:	b570      	push	{r4, r5, r6, lr}
 8028fd2:	2268      	movs	r2, #104	; 0x68
 8028fd4:	1e4d      	subs	r5, r1, #1
 8028fd6:	460e      	mov	r6, r1
 8028fd8:	4355      	muls	r5, r2
 8028fda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8028fde:	f7ff f965 	bl	80282ac <_malloc_r>
 8028fe2:	4604      	mov	r4, r0
 8028fe4:	b140      	cbz	r0, 8028ff8 <__sfmoreglue+0x28>
 8028fe6:	2100      	movs	r1, #0
 8028fe8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8028fec:	e9c0 1600 	strd	r1, r6, [r0]
 8028ff0:	300c      	adds	r0, #12
 8028ff2:	60a0      	str	r0, [r4, #8]
 8028ff4:	f7ff f8e5 	bl	80281c2 <memset>
 8028ff8:	4620      	mov	r0, r4
 8028ffa:	bd70      	pop	{r4, r5, r6, pc}

08028ffc <__sfp_lock_acquire>:
 8028ffc:	4801      	ldr	r0, [pc, #4]	; (8029004 <__sfp_lock_acquire+0x8>)
 8028ffe:	f000 b8b3 	b.w	8029168 <__retarget_lock_acquire_recursive>
 8029002:	bf00      	nop
 8029004:	2019858e 	.word	0x2019858e

08029008 <__sfp_lock_release>:
 8029008:	4801      	ldr	r0, [pc, #4]	; (8029010 <__sfp_lock_release+0x8>)
 802900a:	f000 b8af 	b.w	802916c <__retarget_lock_release_recursive>
 802900e:	bf00      	nop
 8029010:	2019858e 	.word	0x2019858e

08029014 <__sinit_lock_acquire>:
 8029014:	4801      	ldr	r0, [pc, #4]	; (802901c <__sinit_lock_acquire+0x8>)
 8029016:	f000 b8a7 	b.w	8029168 <__retarget_lock_acquire_recursive>
 802901a:	bf00      	nop
 802901c:	2019858f 	.word	0x2019858f

08029020 <__sinit_lock_release>:
 8029020:	4801      	ldr	r0, [pc, #4]	; (8029028 <__sinit_lock_release+0x8>)
 8029022:	f000 b8a3 	b.w	802916c <__retarget_lock_release_recursive>
 8029026:	bf00      	nop
 8029028:	2019858f 	.word	0x2019858f

0802902c <__sinit>:
 802902c:	b510      	push	{r4, lr}
 802902e:	4604      	mov	r4, r0
 8029030:	f7ff fff0 	bl	8029014 <__sinit_lock_acquire>
 8029034:	69a3      	ldr	r3, [r4, #24]
 8029036:	b11b      	cbz	r3, 8029040 <__sinit+0x14>
 8029038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802903c:	f7ff bff0 	b.w	8029020 <__sinit_lock_release>
 8029040:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8029044:	6523      	str	r3, [r4, #80]	; 0x50
 8029046:	4620      	mov	r0, r4
 8029048:	4b12      	ldr	r3, [pc, #72]	; (8029094 <__sinit+0x68>)
 802904a:	4a13      	ldr	r2, [pc, #76]	; (8029098 <__sinit+0x6c>)
 802904c:	681b      	ldr	r3, [r3, #0]
 802904e:	62a2      	str	r2, [r4, #40]	; 0x28
 8029050:	42a3      	cmp	r3, r4
 8029052:	bf04      	itt	eq
 8029054:	2301      	moveq	r3, #1
 8029056:	61a3      	streq	r3, [r4, #24]
 8029058:	f000 f820 	bl	802909c <__sfp>
 802905c:	6060      	str	r0, [r4, #4]
 802905e:	4620      	mov	r0, r4
 8029060:	f000 f81c 	bl	802909c <__sfp>
 8029064:	60a0      	str	r0, [r4, #8]
 8029066:	4620      	mov	r0, r4
 8029068:	f000 f818 	bl	802909c <__sfp>
 802906c:	2200      	movs	r2, #0
 802906e:	2104      	movs	r1, #4
 8029070:	60e0      	str	r0, [r4, #12]
 8029072:	6860      	ldr	r0, [r4, #4]
 8029074:	f7ff ff82 	bl	8028f7c <std>
 8029078:	2201      	movs	r2, #1
 802907a:	2109      	movs	r1, #9
 802907c:	68a0      	ldr	r0, [r4, #8]
 802907e:	f7ff ff7d 	bl	8028f7c <std>
 8029082:	2202      	movs	r2, #2
 8029084:	2112      	movs	r1, #18
 8029086:	68e0      	ldr	r0, [r4, #12]
 8029088:	f7ff ff78 	bl	8028f7c <std>
 802908c:	2301      	movs	r3, #1
 802908e:	61a3      	str	r3, [r4, #24]
 8029090:	e7d2      	b.n	8029038 <__sinit+0xc>
 8029092:	bf00      	nop
 8029094:	0802c298 	.word	0x0802c298
 8029098:	08028fc5 	.word	0x08028fc5

0802909c <__sfp>:
 802909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802909e:	4607      	mov	r7, r0
 80290a0:	f7ff ffac 	bl	8028ffc <__sfp_lock_acquire>
 80290a4:	4b1e      	ldr	r3, [pc, #120]	; (8029120 <__sfp+0x84>)
 80290a6:	681e      	ldr	r6, [r3, #0]
 80290a8:	69b3      	ldr	r3, [r6, #24]
 80290aa:	b913      	cbnz	r3, 80290b2 <__sfp+0x16>
 80290ac:	4630      	mov	r0, r6
 80290ae:	f7ff ffbd 	bl	802902c <__sinit>
 80290b2:	3648      	adds	r6, #72	; 0x48
 80290b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80290b8:	3b01      	subs	r3, #1
 80290ba:	d503      	bpl.n	80290c4 <__sfp+0x28>
 80290bc:	6833      	ldr	r3, [r6, #0]
 80290be:	b30b      	cbz	r3, 8029104 <__sfp+0x68>
 80290c0:	6836      	ldr	r6, [r6, #0]
 80290c2:	e7f7      	b.n	80290b4 <__sfp+0x18>
 80290c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80290c8:	b9d5      	cbnz	r5, 8029100 <__sfp+0x64>
 80290ca:	4b16      	ldr	r3, [pc, #88]	; (8029124 <__sfp+0x88>)
 80290cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80290d0:	6665      	str	r5, [r4, #100]	; 0x64
 80290d2:	60e3      	str	r3, [r4, #12]
 80290d4:	f000 f847 	bl	8029166 <__retarget_lock_init_recursive>
 80290d8:	f7ff ff96 	bl	8029008 <__sfp_lock_release>
 80290dc:	2208      	movs	r2, #8
 80290de:	4629      	mov	r1, r5
 80290e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80290e4:	6025      	str	r5, [r4, #0]
 80290e6:	61a5      	str	r5, [r4, #24]
 80290e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80290ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80290f0:	f7ff f867 	bl	80281c2 <memset>
 80290f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80290f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80290fc:	4620      	mov	r0, r4
 80290fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029100:	3468      	adds	r4, #104	; 0x68
 8029102:	e7d9      	b.n	80290b8 <__sfp+0x1c>
 8029104:	2104      	movs	r1, #4
 8029106:	4638      	mov	r0, r7
 8029108:	f7ff ff62 	bl	8028fd0 <__sfmoreglue>
 802910c:	4604      	mov	r4, r0
 802910e:	6030      	str	r0, [r6, #0]
 8029110:	2800      	cmp	r0, #0
 8029112:	d1d5      	bne.n	80290c0 <__sfp+0x24>
 8029114:	f7ff ff78 	bl	8029008 <__sfp_lock_release>
 8029118:	230c      	movs	r3, #12
 802911a:	603b      	str	r3, [r7, #0]
 802911c:	e7ee      	b.n	80290fc <__sfp+0x60>
 802911e:	bf00      	nop
 8029120:	0802c298 	.word	0x0802c298
 8029124:	ffff0001 	.word	0xffff0001

08029128 <_fwalk_reent>:
 8029128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802912c:	4606      	mov	r6, r0
 802912e:	4688      	mov	r8, r1
 8029130:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8029134:	2700      	movs	r7, #0
 8029136:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802913a:	f1b9 0901 	subs.w	r9, r9, #1
 802913e:	d505      	bpl.n	802914c <_fwalk_reent+0x24>
 8029140:	6824      	ldr	r4, [r4, #0]
 8029142:	2c00      	cmp	r4, #0
 8029144:	d1f7      	bne.n	8029136 <_fwalk_reent+0xe>
 8029146:	4638      	mov	r0, r7
 8029148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802914c:	89ab      	ldrh	r3, [r5, #12]
 802914e:	2b01      	cmp	r3, #1
 8029150:	d907      	bls.n	8029162 <_fwalk_reent+0x3a>
 8029152:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029156:	3301      	adds	r3, #1
 8029158:	d003      	beq.n	8029162 <_fwalk_reent+0x3a>
 802915a:	4629      	mov	r1, r5
 802915c:	4630      	mov	r0, r6
 802915e:	47c0      	blx	r8
 8029160:	4307      	orrs	r7, r0
 8029162:	3568      	adds	r5, #104	; 0x68
 8029164:	e7e9      	b.n	802913a <_fwalk_reent+0x12>

08029166 <__retarget_lock_init_recursive>:
 8029166:	4770      	bx	lr

08029168 <__retarget_lock_acquire_recursive>:
 8029168:	4770      	bx	lr

0802916a <__retarget_lock_release>:
 802916a:	4770      	bx	lr

0802916c <__retarget_lock_release_recursive>:
 802916c:	4770      	bx	lr

0802916e <__swhatbuf_r>:
 802916e:	b570      	push	{r4, r5, r6, lr}
 8029170:	460e      	mov	r6, r1
 8029172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029176:	b096      	sub	sp, #88	; 0x58
 8029178:	4614      	mov	r4, r2
 802917a:	2900      	cmp	r1, #0
 802917c:	461d      	mov	r5, r3
 802917e:	da08      	bge.n	8029192 <__swhatbuf_r+0x24>
 8029180:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8029184:	2200      	movs	r2, #0
 8029186:	602a      	str	r2, [r5, #0]
 8029188:	061a      	lsls	r2, r3, #24
 802918a:	d410      	bmi.n	80291ae <__swhatbuf_r+0x40>
 802918c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029190:	e00e      	b.n	80291b0 <__swhatbuf_r+0x42>
 8029192:	466a      	mov	r2, sp
 8029194:	f000 f8d0 	bl	8029338 <_fstat_r>
 8029198:	2800      	cmp	r0, #0
 802919a:	dbf1      	blt.n	8029180 <__swhatbuf_r+0x12>
 802919c:	9a01      	ldr	r2, [sp, #4]
 802919e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80291a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80291a6:	425a      	negs	r2, r3
 80291a8:	415a      	adcs	r2, r3
 80291aa:	602a      	str	r2, [r5, #0]
 80291ac:	e7ee      	b.n	802918c <__swhatbuf_r+0x1e>
 80291ae:	2340      	movs	r3, #64	; 0x40
 80291b0:	2000      	movs	r0, #0
 80291b2:	6023      	str	r3, [r4, #0]
 80291b4:	b016      	add	sp, #88	; 0x58
 80291b6:	bd70      	pop	{r4, r5, r6, pc}

080291b8 <__smakebuf_r>:
 80291b8:	898b      	ldrh	r3, [r1, #12]
 80291ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80291bc:	079d      	lsls	r5, r3, #30
 80291be:	4606      	mov	r6, r0
 80291c0:	460c      	mov	r4, r1
 80291c2:	d507      	bpl.n	80291d4 <__smakebuf_r+0x1c>
 80291c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80291c8:	6023      	str	r3, [r4, #0]
 80291ca:	6123      	str	r3, [r4, #16]
 80291cc:	2301      	movs	r3, #1
 80291ce:	6163      	str	r3, [r4, #20]
 80291d0:	b002      	add	sp, #8
 80291d2:	bd70      	pop	{r4, r5, r6, pc}
 80291d4:	ab01      	add	r3, sp, #4
 80291d6:	466a      	mov	r2, sp
 80291d8:	f7ff ffc9 	bl	802916e <__swhatbuf_r>
 80291dc:	9900      	ldr	r1, [sp, #0]
 80291de:	4605      	mov	r5, r0
 80291e0:	4630      	mov	r0, r6
 80291e2:	f7ff f863 	bl	80282ac <_malloc_r>
 80291e6:	b948      	cbnz	r0, 80291fc <__smakebuf_r+0x44>
 80291e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80291ec:	059a      	lsls	r2, r3, #22
 80291ee:	d4ef      	bmi.n	80291d0 <__smakebuf_r+0x18>
 80291f0:	f023 0303 	bic.w	r3, r3, #3
 80291f4:	f043 0302 	orr.w	r3, r3, #2
 80291f8:	81a3      	strh	r3, [r4, #12]
 80291fa:	e7e3      	b.n	80291c4 <__smakebuf_r+0xc>
 80291fc:	4b0d      	ldr	r3, [pc, #52]	; (8029234 <__smakebuf_r+0x7c>)
 80291fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8029200:	89a3      	ldrh	r3, [r4, #12]
 8029202:	6020      	str	r0, [r4, #0]
 8029204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029208:	6120      	str	r0, [r4, #16]
 802920a:	81a3      	strh	r3, [r4, #12]
 802920c:	9b00      	ldr	r3, [sp, #0]
 802920e:	6163      	str	r3, [r4, #20]
 8029210:	9b01      	ldr	r3, [sp, #4]
 8029212:	b15b      	cbz	r3, 802922c <__smakebuf_r+0x74>
 8029214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029218:	4630      	mov	r0, r6
 802921a:	f000 f89f 	bl	802935c <_isatty_r>
 802921e:	b128      	cbz	r0, 802922c <__smakebuf_r+0x74>
 8029220:	89a3      	ldrh	r3, [r4, #12]
 8029222:	f023 0303 	bic.w	r3, r3, #3
 8029226:	f043 0301 	orr.w	r3, r3, #1
 802922a:	81a3      	strh	r3, [r4, #12]
 802922c:	89a0      	ldrh	r0, [r4, #12]
 802922e:	4305      	orrs	r5, r0
 8029230:	81a5      	strh	r5, [r4, #12]
 8029232:	e7cd      	b.n	80291d0 <__smakebuf_r+0x18>
 8029234:	08028fc5 	.word	0x08028fc5

08029238 <memchr>:
 8029238:	b2c9      	uxtb	r1, r1
 802923a:	4402      	add	r2, r0
 802923c:	b510      	push	{r4, lr}
 802923e:	4290      	cmp	r0, r2
 8029240:	4603      	mov	r3, r0
 8029242:	d101      	bne.n	8029248 <memchr+0x10>
 8029244:	2300      	movs	r3, #0
 8029246:	e003      	b.n	8029250 <memchr+0x18>
 8029248:	781c      	ldrb	r4, [r3, #0]
 802924a:	3001      	adds	r0, #1
 802924c:	428c      	cmp	r4, r1
 802924e:	d1f6      	bne.n	802923e <memchr+0x6>
 8029250:	4618      	mov	r0, r3
 8029252:	bd10      	pop	{r4, pc}

08029254 <__malloc_lock>:
 8029254:	4801      	ldr	r0, [pc, #4]	; (802925c <__malloc_lock+0x8>)
 8029256:	f7ff bf87 	b.w	8029168 <__retarget_lock_acquire_recursive>
 802925a:	bf00      	nop
 802925c:	2019858d 	.word	0x2019858d

08029260 <__malloc_unlock>:
 8029260:	4801      	ldr	r0, [pc, #4]	; (8029268 <__malloc_unlock+0x8>)
 8029262:	f7ff bf83 	b.w	802916c <__retarget_lock_release_recursive>
 8029266:	bf00      	nop
 8029268:	2019858d 	.word	0x2019858d

0802926c <__sread>:
 802926c:	b510      	push	{r4, lr}
 802926e:	460c      	mov	r4, r1
 8029270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029274:	f000 f894 	bl	80293a0 <_read_r>
 8029278:	2800      	cmp	r0, #0
 802927a:	bfab      	itete	ge
 802927c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802927e:	89a3      	ldrhlt	r3, [r4, #12]
 8029280:	181b      	addge	r3, r3, r0
 8029282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8029286:	bfac      	ite	ge
 8029288:	6563      	strge	r3, [r4, #84]	; 0x54
 802928a:	81a3      	strhlt	r3, [r4, #12]
 802928c:	bd10      	pop	{r4, pc}

0802928e <__swrite>:
 802928e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029292:	461f      	mov	r7, r3
 8029294:	898b      	ldrh	r3, [r1, #12]
 8029296:	4605      	mov	r5, r0
 8029298:	460c      	mov	r4, r1
 802929a:	05db      	lsls	r3, r3, #23
 802929c:	4616      	mov	r6, r2
 802929e:	d505      	bpl.n	80292ac <__swrite+0x1e>
 80292a0:	2302      	movs	r3, #2
 80292a2:	2200      	movs	r2, #0
 80292a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80292a8:	f000 f868 	bl	802937c <_lseek_r>
 80292ac:	89a3      	ldrh	r3, [r4, #12]
 80292ae:	4632      	mov	r2, r6
 80292b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80292b4:	4628      	mov	r0, r5
 80292b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80292ba:	81a3      	strh	r3, [r4, #12]
 80292bc:	463b      	mov	r3, r7
 80292be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80292c2:	f000 b817 	b.w	80292f4 <_write_r>

080292c6 <__sseek>:
 80292c6:	b510      	push	{r4, lr}
 80292c8:	460c      	mov	r4, r1
 80292ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80292ce:	f000 f855 	bl	802937c <_lseek_r>
 80292d2:	1c43      	adds	r3, r0, #1
 80292d4:	89a3      	ldrh	r3, [r4, #12]
 80292d6:	bf15      	itete	ne
 80292d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80292da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80292de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80292e2:	81a3      	strheq	r3, [r4, #12]
 80292e4:	bf18      	it	ne
 80292e6:	81a3      	strhne	r3, [r4, #12]
 80292e8:	bd10      	pop	{r4, pc}

080292ea <__sclose>:
 80292ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80292ee:	f000 b813 	b.w	8029318 <_close_r>
	...

080292f4 <_write_r>:
 80292f4:	b538      	push	{r3, r4, r5, lr}
 80292f6:	4604      	mov	r4, r0
 80292f8:	4d06      	ldr	r5, [pc, #24]	; (8029314 <_write_r+0x20>)
 80292fa:	4608      	mov	r0, r1
 80292fc:	4611      	mov	r1, r2
 80292fe:	2200      	movs	r2, #0
 8029300:	602a      	str	r2, [r5, #0]
 8029302:	461a      	mov	r2, r3
 8029304:	f7d8 fbaf 	bl	8001a66 <_write>
 8029308:	1c43      	adds	r3, r0, #1
 802930a:	d102      	bne.n	8029312 <_write_r+0x1e>
 802930c:	682b      	ldr	r3, [r5, #0]
 802930e:	b103      	cbz	r3, 8029312 <_write_r+0x1e>
 8029310:	6023      	str	r3, [r4, #0]
 8029312:	bd38      	pop	{r3, r4, r5, pc}
 8029314:	20198590 	.word	0x20198590

08029318 <_close_r>:
 8029318:	b538      	push	{r3, r4, r5, lr}
 802931a:	2300      	movs	r3, #0
 802931c:	4d05      	ldr	r5, [pc, #20]	; (8029334 <_close_r+0x1c>)
 802931e:	4604      	mov	r4, r0
 8029320:	4608      	mov	r0, r1
 8029322:	602b      	str	r3, [r5, #0]
 8029324:	f7d8 fbbb 	bl	8001a9e <_close>
 8029328:	1c43      	adds	r3, r0, #1
 802932a:	d102      	bne.n	8029332 <_close_r+0x1a>
 802932c:	682b      	ldr	r3, [r5, #0]
 802932e:	b103      	cbz	r3, 8029332 <_close_r+0x1a>
 8029330:	6023      	str	r3, [r4, #0]
 8029332:	bd38      	pop	{r3, r4, r5, pc}
 8029334:	20198590 	.word	0x20198590

08029338 <_fstat_r>:
 8029338:	b538      	push	{r3, r4, r5, lr}
 802933a:	2300      	movs	r3, #0
 802933c:	4d06      	ldr	r5, [pc, #24]	; (8029358 <_fstat_r+0x20>)
 802933e:	4604      	mov	r4, r0
 8029340:	4608      	mov	r0, r1
 8029342:	4611      	mov	r1, r2
 8029344:	602b      	str	r3, [r5, #0]
 8029346:	f7d8 fbb6 	bl	8001ab6 <_fstat>
 802934a:	1c43      	adds	r3, r0, #1
 802934c:	d102      	bne.n	8029354 <_fstat_r+0x1c>
 802934e:	682b      	ldr	r3, [r5, #0]
 8029350:	b103      	cbz	r3, 8029354 <_fstat_r+0x1c>
 8029352:	6023      	str	r3, [r4, #0]
 8029354:	bd38      	pop	{r3, r4, r5, pc}
 8029356:	bf00      	nop
 8029358:	20198590 	.word	0x20198590

0802935c <_isatty_r>:
 802935c:	b538      	push	{r3, r4, r5, lr}
 802935e:	2300      	movs	r3, #0
 8029360:	4d05      	ldr	r5, [pc, #20]	; (8029378 <_isatty_r+0x1c>)
 8029362:	4604      	mov	r4, r0
 8029364:	4608      	mov	r0, r1
 8029366:	602b      	str	r3, [r5, #0]
 8029368:	f7d8 fbb5 	bl	8001ad6 <_isatty>
 802936c:	1c43      	adds	r3, r0, #1
 802936e:	d102      	bne.n	8029376 <_isatty_r+0x1a>
 8029370:	682b      	ldr	r3, [r5, #0]
 8029372:	b103      	cbz	r3, 8029376 <_isatty_r+0x1a>
 8029374:	6023      	str	r3, [r4, #0]
 8029376:	bd38      	pop	{r3, r4, r5, pc}
 8029378:	20198590 	.word	0x20198590

0802937c <_lseek_r>:
 802937c:	b538      	push	{r3, r4, r5, lr}
 802937e:	4604      	mov	r4, r0
 8029380:	4d06      	ldr	r5, [pc, #24]	; (802939c <_lseek_r+0x20>)
 8029382:	4608      	mov	r0, r1
 8029384:	4611      	mov	r1, r2
 8029386:	2200      	movs	r2, #0
 8029388:	602a      	str	r2, [r5, #0]
 802938a:	461a      	mov	r2, r3
 802938c:	f7d8 fbae 	bl	8001aec <_lseek>
 8029390:	1c43      	adds	r3, r0, #1
 8029392:	d102      	bne.n	802939a <_lseek_r+0x1e>
 8029394:	682b      	ldr	r3, [r5, #0]
 8029396:	b103      	cbz	r3, 802939a <_lseek_r+0x1e>
 8029398:	6023      	str	r3, [r4, #0]
 802939a:	bd38      	pop	{r3, r4, r5, pc}
 802939c:	20198590 	.word	0x20198590

080293a0 <_read_r>:
 80293a0:	b538      	push	{r3, r4, r5, lr}
 80293a2:	4604      	mov	r4, r0
 80293a4:	4d06      	ldr	r5, [pc, #24]	; (80293c0 <_read_r+0x20>)
 80293a6:	4608      	mov	r0, r1
 80293a8:	4611      	mov	r1, r2
 80293aa:	2200      	movs	r2, #0
 80293ac:	602a      	str	r2, [r5, #0]
 80293ae:	461a      	mov	r2, r3
 80293b0:	f7d8 fb3c 	bl	8001a2c <_read>
 80293b4:	1c43      	adds	r3, r0, #1
 80293b6:	d102      	bne.n	80293be <_read_r+0x1e>
 80293b8:	682b      	ldr	r3, [r5, #0]
 80293ba:	b103      	cbz	r3, 80293be <_read_r+0x1e>
 80293bc:	6023      	str	r3, [r4, #0]
 80293be:	bd38      	pop	{r3, r4, r5, pc}
 80293c0:	20198590 	.word	0x20198590

080293c4 <_init>:
 80293c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80293c6:	bf00      	nop
 80293c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80293ca:	bc08      	pop	{r3}
 80293cc:	469e      	mov	lr, r3
 80293ce:	4770      	bx	lr

080293d0 <_fini>:
 80293d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80293d2:	bf00      	nop
 80293d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80293d6:	bc08      	pop	{r3}
 80293d8:	469e      	mov	lr, r3
 80293da:	4770      	bx	lr
