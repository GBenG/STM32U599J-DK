
STM32U5A9J-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002919c  0800026c  0800026c  0001026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fcc  08029408  08029408  00039408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0802c3d4  0802c3d4  0003c3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000001c  0802c3ec  0802c3ec  0003c3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0802c408  0802c408  0003c408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000012c  20000000  0802c410  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TouchGFX_Framebuffer 00151800  2000012c  0802c53c  0004012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00046d34  20151930  0817dd3c  00191930  2**3
                  ALLOC
  9 ._user_heap_stack 00001804  20198664  0817dd3c  00198664  2**0
                  ALLOC
 10 .ARM.attributes 00000036  00000000  00000000  001a01b8  2**0
                  CONTENTS, READONLY
 11 FontFlashSection 000001a8  90000000  90000000  001a0000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 TextFlashSection 00000010  900001a8  900001a8  001a01a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 ExtFlashSection 00000000  900001b8  900001b8  001a01ee  2**0
                  CONTENTS
 14 .debug_info   000aae8b  00000000  00000000  001a01ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000150f9  00000000  00000000  0024b079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000035d8  00000000  00000000  00260178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003920  00000000  00000000  00263750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00051647  00000000  00000000  00267070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00058f5a  00000000  00000000  002b86b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001ae19e  00000000  00000000  00311611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000cf  00000000  00000000  004bf7af  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c878  00000000  00000000  004bf880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00005a91  00000000  00000000  004cc0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	; (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <__do_global_dtors_aux+0x20>)
 800027a:	e000      	b.n	800027e <__do_global_dtors_aux+0x12>
 800027c:	bf00      	nop
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	20151930 	.word	0x20151930
 8000288:	00000000 	.word	0x00000000
 800028c:	080293f0 	.word	0x080293f0

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	; (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	; (80002a8 <frame_dummy+0x18>)
 800029a:	e000      	b.n	800029e <frame_dummy+0xe>
 800029c:	bf00      	nop
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	20151934 	.word	0x20151934
 80002a8:	080293f0 	.word	0x080293f0

080002ac <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 80002ac:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ae:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002b2:	4917      	ldr	r1, [pc, #92]	; (8000310 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 80002b4:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002b8:	4816      	ldr	r0, [pc, #88]	; (8000314 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 80002ba:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 80002bc:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002c0:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002c2:	4815      	ldr	r0, [pc, #84]	; (8000318 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002c4:	4912      	ldr	r1, [pc, #72]	; (8000310 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002c6:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002c8:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ca:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ce:	4913      	ldr	r1, [pc, #76]	; (800031c <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002d0:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002d2:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002d6:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002d8:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002dc:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002e0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002e4:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	490d      	ldr	r1, [pc, #52]	; (8000320 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ea:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ee:	4770      	bx	lr

080002f0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002f0:	f7ff bffe 	b.w	80002f0 <__tx_BadHandler>

080002f4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002f4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002f6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002fa:	4770      	bx	lr

080002fc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002fc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002fe:	f000 f89f 	bl	8000440 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 8000302:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 8000306:	4770      	bx	lr

08000308 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000308:	f7ff bffe 	b.w	8000308 <__tx_NMIHandler>

0800030c <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 800030c:	f7ff bffe 	b.w	800030c <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000310:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000314:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 8000318:	20197b40 	.word	0x20197b40
    LDR     r1, =SYSTICK_CYCLES
 800031c:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000320:	40ff0000 	.word	0x40ff0000

08000324 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000324:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000328:	4a31      	ldr	r2, [pc, #196]	; (80003f0 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800032a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800032c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000330:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000334:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000338:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800033a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800033e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000342:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000346:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800034a:	f3bf 8f6f 	isb	sy

0800034e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800034e:	e7fe      	b.n	800034e <__tx_wait_here>

08000350 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000350:	4828      	ldr	r0, [pc, #160]	; (80003f4 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000352:	4a29      	ldr	r2, [pc, #164]	; (80003f8 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000354:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000358:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800035a:	b191      	cbz	r1, 8000382 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800035c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800035e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000362:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000366:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800036a:	d101      	bne.n	8000370 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 800036c:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000370 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000370:	4c22      	ldr	r4, [pc, #136]	; (80003fc <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000372:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000376:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800037a:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 800037c:	b10d      	cbz	r5, 8000382 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800037e:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000380:	6023      	str	r3, [r4, #0]

08000382 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000382:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000384:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000386:	b1d1      	cbz	r1, 80003be <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000388:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800038a:	b662      	cpsie	i

0800038c <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800038c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800038e:	4c1b      	ldr	r4, [pc, #108]	; (80003fc <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000390:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000392:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000396:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000398:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800039a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800039e:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003a2:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003a6:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003aa:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003ae:	d101      	bne.n	80003b4 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003b0:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003b4 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003b4:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003b8:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 80003bc:	4770      	bx	lr

080003be <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003c0:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003c2:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003c4:	b949      	cbnz	r1, 80003da <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 80003c6:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 80003c8:	f001 feca 	bl	8002160 <tx_low_power_enter>
    POP     {r0-r3}
 80003cc:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 80003ce:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 80003d0:	f001 fed0 	bl	8002174 <tx_low_power_exit>
    POP     {r0-r3}
 80003d4:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003d6:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003d8:	e7f1      	b.n	80003be <__tx_ts_wait>

080003da <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003da:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003de:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003e2:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003e6:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003e8:	e7d0      	b.n	800038c <__tx_ts_restore>
 80003ea:	bf00      	nop

080003ec <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003ec:	4770      	bx	lr
 80003ee:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003f0:	20197bdc 	.word	0x20197bdc
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003f4:	20197b44 	.word	0x20197b44
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003f8:	20197b48 	.word	0x20197b48
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003fc:	20198148 	.word	0x20198148

08000400 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000400:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000402:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000406:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 800040a:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 800040e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000410:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000414:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000416:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000418:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800041a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800041c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800041e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000420:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000422:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000424:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000426:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000428:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800042c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800042e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000432:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000434:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000436:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800043a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800043c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800043e:	4770      	bx	lr

08000440 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000440:	4922      	ldr	r1, [pc, #136]	; (80004cc <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000442:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000444:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000448:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800044a:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800044c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800044e:	b13a      	cbz	r2, 8000460 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000450:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000454:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000456:	b91a      	cbnz	r2, 8000460 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000458:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800045a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800045e:	6018      	str	r0, [r3, #0]

08000460 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000460:	491d      	ldr	r1, [pc, #116]	; (80004d8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000462:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000464:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000466:	b122      	cbz	r2, 8000472 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000468:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800046a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800046e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000470:	e008      	b.n	8000484 <__tx_timer_done>

08000472 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000472:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000476:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000478:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800047a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800047c:	d101      	bne.n	8000482 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800047e:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000480:	6818      	ldr	r0, [r3, #0]

08000482 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000482:	6008      	str	r0, [r1, #0]

08000484 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000486:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000488:	b912      	cbnz	r2, 8000490 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800048a:	4914      	ldr	r1, [pc, #80]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800048c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800048e:	b1c8      	cbz	r0, 80004c4 <__tx_timer_nothing_expired>

08000490 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000490:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000492:	4912      	ldr	r1, [pc, #72]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000494:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000496:	b108      	cbz	r0, 800049c <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000498:	f014 fa20 	bl	80148dc <_tx_timer_expiration_process>

0800049c <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800049c:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800049e:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004a0:	b172      	cbz	r2, 80004c0 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004a2:	f014 f98d 	bl	80147c0 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a6:	4810      	ldr	r0, [pc, #64]	; (80004e8 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004a8:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004aa:	b949      	cbnz	r1, 80004c0 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ac:	480f      	ldr	r0, [pc, #60]	; (80004ec <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004ae:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004b0:	4a0f      	ldr	r2, [pc, #60]	; (80004f0 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004b2:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004b4:	480f      	ldr	r0, [pc, #60]	; (80004f4 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004ba:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004bc:	d000      	beq.n	80004c0 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004be:	6002      	str	r2, [r0, #0]

080004c0 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 80004c0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004c4 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004c4:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004c8:	4770      	bx	lr
 80004ca:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004cc:	20197be8 	.word	0x20197be8
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004d0:	20198148 	.word	0x20198148
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004d4:	20197bec 	.word	0x20197bec
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004d8:	20197c78 	.word	0x20197c78
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004dc:	20197c7c 	.word	0x20197c7c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004e0:	20197c74 	.word	0x20197c74
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004e4:	20197c70 	.word	0x20197c70
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004e8:	20197bdc 	.word	0x20197bdc
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ec:	20197b44 	.word	0x20197b44
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004f0:	20197b48 	.word	0x20197b48
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004f4:	e000ed04 	.word	0xe000ed04

080004f8 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af02      	add	r7, sp, #8
 80004fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000504:	2334      	movs	r3, #52	; 0x34
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800050c:	4a13      	ldr	r2, [pc, #76]	; (800055c <tx_application_define+0x64>)
 800050e:	4914      	ldr	r1, [pc, #80]	; (8000560 <tx_application_define+0x68>)
 8000510:	4814      	ldr	r0, [pc, #80]	; (8000564 <tx_application_define+0x6c>)
 8000512:	f014 fc8d 	bl	8014e30 <_txe_byte_pool_create>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d109      	bne.n	8000530 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <tx_application_define+0x6c>)
 800051e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000520:	68b8      	ldr	r0, [r7, #8]
 8000522:	f000 f827 	bl	8000574 <App_ThreadX_Init>
 8000526:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d000      	beq.n	8000530 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800052e:	e7fe      	b.n	800052e <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&touchgfx_app_byte_pool, "TouchGFX App memory pool", touchgfx_byte_pool_buffer, TOUCHGFX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000530:	2334      	movs	r3, #52	; 0x34
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <tx_application_define+0x70>)
 800053a:	490c      	ldr	r1, [pc, #48]	; (800056c <tx_application_define+0x74>)
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <tx_application_define+0x78>)
 800053e:	f014 fc77 	bl	8014e30 <_txe_byte_pool_create>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d104      	bne.n	8000552 <tx_application_define+0x5a>
  {
    /* USER CODE BEGIN TouchGFX_Byte_Pool_Success */

    /* USER CODE END TouchGFX_Byte_Pool_Success */

    memory_ptr = (VOID *)&touchgfx_app_byte_pool;
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <tx_application_define+0x78>)
 800054a:	60bb      	str	r3, [r7, #8]
    if (MX_TouchGFX_Init(memory_ptr) != TX_SUCCESS)
 800054c:	68b8      	ldr	r0, [r7, #8]
 800054e:	f001 fb43 	bl	8001bd8 <MX_TouchGFX_Init>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2015194c 	.word	0x2015194c
 8000560:	08029408 	.word	0x08029408
 8000564:	20151d4c 	.word	0x20151d4c
 8000568:	20151d80 	.word	0x20151d80
 800056c:	0802941c 	.word	0x0802941c
 8000570:	20152d80 	.word	0x20152d80

08000574 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000592:	f012 ff77 	bl	8013484 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}

0800059a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f006 fec1 	bl	8007324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f821 	bl	80005e8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005a6:	f000 f87e 	bl	80006a6 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005aa:	f000 f8b1 	bl	8000710 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 fe79 	bl	80012a4 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005b2:	f000 fadf 	bl	8000b74 <MX_ICACHE_Init>
  MX_CRC_Init();
 80005b6:	f000 f8b9 	bl	800072c <MX_CRC_Init>
  MX_TIM8_Init();
 80005ba:	f000 fdc3 	bl	8001144 <MX_TIM8_Init>
  MX_DMA2D_Init();
 80005be:	f000 f913 	bl	80007e8 <MX_DMA2D_Init>
  MX_GPU2D_Init();
 80005c2:	f000 fa83 	bl	8000acc <MX_GPU2D_Init>
  MX_DSIHOST_DSI_Init();
 80005c6:	f000 f933 	bl	8000830 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 80005ca:	f000 fae7 	bl	8000b9c <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 80005ce:	f000 fd71 	bl	80010b4 <MX_OCTOSPI1_Init>
  MX_HSPI1_Init();
 80005d2:	f000 fa8f 	bl	8000af4 <MX_HSPI1_Init>
  MX_DCACHE1_Init();
 80005d6:	f000 f8cb 	bl	8000770 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80005da:	f000 f8e7 	bl	80007ac <MX_DCACHE2_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 80005de:	f001 faf2 	bl	8001bc6 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80005e2:	f7ff ffd4 	bl	800058e <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <main+0x4c>

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09e      	sub	sp, #120	; 0x78
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0318 	add.w	r3, r7, #24
 80005f2:	2260      	movs	r2, #96	; 0x60
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f027 fdf9 	bl	80281ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
 800060a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000610:	f00b f94a 	bl	800b8a8 <HAL_PWREx_ControlVoltageScaling>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800061a:	f000 ff51 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
 800061e:	2311      	movs	r3, #17
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000630:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000634:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800063a:	2301      	movs	r3, #1
 800063c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000646:	2350      	movs	r3, #80	; 0x50
 8000648:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800064a:	2302      	movs	r3, #2
 800064c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000652:	2302      	movs	r3, #2
 8000654:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000656:	2300      	movs	r3, #0
 8000658:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	4618      	mov	r0, r3
 8000664:	f00b fa1c 	bl	800baa0 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800066e:	f000 ff27 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	231f      	movs	r3, #31
 8000674:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2303      	movs	r3, #3
 8000678:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	2104      	movs	r1, #4
 800068e:	4618      	mov	r0, r3
 8000690:	f00c f8e2 	bl	800c858 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800069a:	f000 ff11 	bl	80014c0 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3778      	adds	r7, #120	; 0x78
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b0b8      	sub	sp, #224	; 0xe0
 80006aa:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	22e0      	movs	r2, #224	; 0xe0
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f027 fd9b 	bl	80281ee <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_DSI;
 80006b8:	f04f 0200 	mov.w	r2, #0
 80006bc:	f04f 0306 	mov.w	r3, #6
 80006c0:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_PLL3;
 80006c4:	2300      	movs	r3, #0
 80006c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 80006d0:	2303      	movs	r3, #3
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLL3.PLL3M = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLL3.PLL3N = 125;
 80006d8:	237d      	movs	r3, #125	; 0x7d
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLL3.PLL3P = 8;
 80006dc:	2308      	movs	r3, #8
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.PLL3.PLL3Q = 2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.PLL3.PLL3R = 24;
 80006e4:	2318      	movs	r3, #24
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLL3.PLL3FRACN = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVP|RCC_PLL3_DIVR;
 80006f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4618      	mov	r0, r3
 80006fa:	f00c fcbb 	bl	800d074 <HAL_RCCEx_PeriphCLKConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <PeriphCommonClock_Config+0x62>
  {
    Error_Handler();
 8000704:	f000 fedc 	bl	80014c0 <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	37e0      	adds	r7, #224	; 0xe0
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000714:	f00b f9b4 	bl	800ba80 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000718:	2002      	movs	r0, #2
 800071a:	f00b f951 	bl	800b9c0 <HAL_PWREx_ConfigSupply>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000724:	f000 fecc 	bl	80014c0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_CRC_Init+0x3c>)
 8000732:	4a0e      	ldr	r2, [pc, #56]	; (800076c <MX_CRC_Init+0x40>)
 8000734:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_CRC_Init+0x3c>)
 8000738:	2200      	movs	r2, #0
 800073a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_CRC_Init+0x3c>)
 800073e:	2200      	movs	r2, #0
 8000740:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_CRC_Init+0x3c>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_CRC_Init+0x3c>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_CRC_Init+0x3c>)
 8000750:	2201      	movs	r2, #1
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_CRC_Init+0x3c>)
 8000756:	f006 ff37 	bl	80075c8 <HAL_CRC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000760:	f000 feae 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20152db4 	.word	0x20152db4
 800076c:	40023000 	.word	0x40023000

08000770 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_DCACHE1_Init+0x34>)
 8000776:	4a0c      	ldr	r2, [pc, #48]	; (80007a8 <MX_DCACHE1_Init+0x38>)
 8000778:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_INCR;
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_DCACHE1_Init+0x34>)
 800077c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000780:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <MX_DCACHE1_Init+0x34>)
 8000784:	f007 f812 	bl	80077ac <HAL_DCACHE_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_DCACHE1_Init+0x22>
  {
    Error_Handler();
 800078e:	f000 fe97 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */
  HAL_DCACHE_Enable(&hdcache1);
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_DCACHE1_Init+0x34>)
 8000794:	f007 f85c 	bl	8007850 <HAL_DCACHE_Enable>
  HAL_DCACHE_Invalidate(&hdcache1);
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <MX_DCACHE1_Init+0x34>)
 800079a:	f007 f880 	bl	800789e <HAL_DCACHE_Invalidate>
  /* USER CODE END DCACHE1_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20152dd8 	.word	0x20152dd8
 80007a8:	40031400 	.word	0x40031400

080007ac <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_DCACHE2_Init+0x34>)
 80007b2:	4a0c      	ldr	r2, [pc, #48]	; (80007e4 <MX_DCACHE2_Init+0x38>)
 80007b4:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_INCR;
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_DCACHE2_Init+0x34>)
 80007b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80007bc:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 80007be:	4808      	ldr	r0, [pc, #32]	; (80007e0 <MX_DCACHE2_Init+0x34>)
 80007c0:	f006 fff4 	bl	80077ac <HAL_DCACHE_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_DCACHE2_Init+0x22>
  {
    Error_Handler();
 80007ca:	f000 fe79 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */
  HAL_DCACHE_Enable(&hdcache2);
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_DCACHE2_Init+0x34>)
 80007d0:	f007 f83e 	bl	8007850 <HAL_DCACHE_Enable>
  HAL_DCACHE_Invalidate(&hdcache2);
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <MX_DCACHE2_Init+0x34>)
 80007d6:	f007 f862 	bl	800789e <HAL_DCACHE_Invalidate>
  /* USER CODE END DCACHE2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20152e04 	.word	0x20152e04
 80007e4:	40031800 	.word	0x40031800

080007e8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_DMA2D_Init+0x40>)
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <MX_DMA2D_Init+0x44>)
 80007f0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_DMA2D_Init+0x40>)
 80007f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007f8:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_DMA2D_Init+0x40>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_DMA2D_Init+0x40>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_DMA2D_Init+0x40>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_DMA2D_Init+0x40>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_DMA2D_Init+0x40>)
 8000814:	f007 fcfc 	bl	8008210 <HAL_DMA2D_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_DMA2D_Init+0x3a>
  {
    Error_Handler();
 800081e:	f000 fe4f 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20152e30 	.word	0x20152e30
 800082c:	4002b000 	.word	0x4002b000

08000830 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b0e8      	sub	sp, #416	; 0x1a0
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	2120      	movs	r1, #32
 800083a:	48a1      	ldr	r0, [pc, #644]	; (8000ac0 <MX_DSIHOST_DSI_Init+0x290>)
 800083c:	f009 fb12 	bl	8009e64 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000840:	2005      	movs	r0, #5
 8000842:	f006 fdbd 	bl	80073c0 <HAL_Delay>
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	489d      	ldr	r0, [pc, #628]	; (8000ac0 <MX_DSIHOST_DSI_Init+0x290>)
 800084c:	f009 fb0a 	bl	8009e64 <HAL_GPIO_WritePin>
  HAL_Delay(11);
 8000850:	200b      	movs	r0, #11
 8000852:	f006 fdb5 	bl	80073c0 <HAL_Delay>
  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000856:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
 8000866:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000868:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800086c:	2224      	movs	r2, #36	; 0x24
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f027 fcbc 	bl	80281ee <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000876:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
 8000886:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000888:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800088c:	226c      	movs	r2, #108	; 0x6c
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f027 fcac 	bl	80281ee <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000896:	4b8b      	ldr	r3, [pc, #556]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000898:	4a8b      	ldr	r2, [pc, #556]	; (8000ac8 <MX_DSIHOST_DSI_Init+0x298>)
 800089a:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800089c:	4b89      	ldr	r3, [pc, #548]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80008a2:	4b88      	ldr	r3, [pc, #544]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 80008a4:	2204      	movs	r2, #4
 80008a6:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80008a8:	4b86      	ldr	r3, [pc, #536]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 80008ae:	4b85      	ldr	r3, [pc, #532]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 80008b0:	2208      	movs	r2, #8
 80008b2:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 80008b4:	4b83      	ldr	r3, [pc, #524]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 80008ba:	237d      	movs	r3, #125	; 0x7d
 80008bc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 80008cc:	2301      	movs	r3, #1
 80008ce:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80008de:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80008e2:	4619      	mov	r1, r3
 80008e4:	4877      	ldr	r0, [pc, #476]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 80008e6:	f007 ff55 	bl	8008794 <HAL_DSI_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_DSIHOST_DSI_Init+0xc4>
  {
    Error_Handler();
 80008f0:	f000 fde6 	bl	80014c0 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80008f4:	2301      	movs	r3, #1
 80008f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  HostTimeouts.LowPowerReadTimeout = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  HostTimeouts.LowPowerWriteTimeout = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  HostTimeouts.BTATimeout = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800092a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800092e:	4619      	mov	r1, r3
 8000930:	4864      	ldr	r0, [pc, #400]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000932:	f008 fbc0 	bl	80090b6 <HAL_DSI_ConfigHostTimeouts>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 800093c:	f000 fdc0 	bl	80014c0 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 11;
 8000940:	230b      	movs	r3, #11
 8000942:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  PhyTimings.ClockLaneLP2HSTime = 40;
 8000946:	2328      	movs	r3, #40	; 0x28
 8000948:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  PhyTimings.DataLaneHS2LPTime = 12;
 800094c:	230c      	movs	r3, #12
 800094e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  PhyTimings.DataLaneLP2HSTime = 23;
 8000952:	2317      	movs	r3, #23
 8000954:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  PhyTimings.DataLaneMaxReadTime = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  PhyTimings.StopWaitTime = 7;
 800095e:	2307      	movs	r3, #7
 8000960:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000964:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000968:	4619      	mov	r1, r3
 800096a:	4856      	ldr	r0, [pc, #344]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 800096c:	f008 fb0d 	bl	8008f8a <HAL_DSI_ConfigPhyTimer>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_DSIHOST_DSI_Init+0x14a>
  {
    Error_Handler();
 8000976:	f000 fda3 	bl	80014c0 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800097a:	2104      	movs	r1, #4
 800097c:	4851      	ldr	r0, [pc, #324]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 800097e:	f008 fadc 	bl	8008f3a <HAL_DSI_ConfigFlowControl>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_DSIHOST_DSI_Init+0x15c>
  {
    Error_Handler();
 8000988:	f000 fd9a 	bl	80014c0 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800098c:	2100      	movs	r1, #0
 800098e:	484d      	ldr	r0, [pc, #308]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000990:	f007 ffd4 	bl	800893c <HAL_DSI_ConfigErrorMonitor>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_DSIHOST_DSI_Init+0x16e>
  {
    Error_Handler();
 800099a:	f000 fd91 	bl	80014c0 <Error_Handler>
  }
  VidCfg.ColorCoding = DSI_RGB888;
 800099e:	2305      	movs	r3, #5
 80009a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  VidCfg.Mode = DSI_VID_MODE_BURST;
 80009aa:	2302      	movs	r3, #2
 80009ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  VidCfg.PacketSize = 480;
 80009b0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80009b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  VidCfg.NumberOfChunks = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  VidCfg.NullPacketSize = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80009ca:	2300      	movs	r3, #0
 80009cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80009d0:	2300      	movs	r3, #0
 80009d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  VidCfg.HorizontalSyncActive = 6;
 80009d6:	2306      	movs	r3, #6
 80009d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  VidCfg.HorizontalBackPorch = 3;
 80009dc:	2303      	movs	r3, #3
 80009de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  VidCfg.HorizontalLine = 1452;
 80009e2:	f240 53ac 	movw	r3, #1452	; 0x5ac
 80009e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  VidCfg.VerticalSyncActive = 20;
 80009ea:	2314      	movs	r3, #20
 80009ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  VidCfg.VerticalBackPorch = 12;
 80009f0:	230c      	movs	r3, #12
 80009f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  VidCfg.VerticalFrontPorch = 200;
 80009f6:	23c8      	movs	r3, #200	; 0xc8
 80009f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  VidCfg.VerticalActive = 481;
 80009fc:	f240 13e1 	movw	r3, #481	; 0x1e1
 8000a00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  VidCfg.LPLargestPacketSize = 64;
 8000a0c:	2340      	movs	r3, #64	; 0x40
 8000a0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  VidCfg.LPVACTLargestPacketSize = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000a28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a2c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a34:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a44:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_ENABLE;
 8000a48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a4c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000a50:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000a54:	4619      	mov	r1, r3
 8000a56:	481b      	ldr	r0, [pc, #108]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000a58:	f008 f867 	bl	8008b2a <HAL_DSI_ConfigVideoMode>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_DSIHOST_DSI_Init+0x236>
  {
    Error_Handler();
 8000a62:	f000 fd2d 	bl	80014c0 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000a66:	2100      	movs	r1, #0
 8000a68:	4816      	ldr	r0, [pc, #88]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000a6a:	f008 f833 	bl	8008ad4 <HAL_DSI_SetGenericVCID>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_DSIHOST_DSI_Init+0x248>
  {
    Error_Handler();
 8000a74:	f000 fd24 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  // Start DSI
  if (HAL_DSI_Start(&hdsi) != HAL_OK)
 8000a78:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000a7a:	f008 fbe2 	bl	8009242 <HAL_DSI_Start>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_DSIHOST_DSI_Init+0x258>
  {
    Error_Handler();
 8000a84:	f000 fd1c 	bl	80014c0 <Error_Handler>
  }

  /* Switch to DSI PHY PLL clock */
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000a88:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000a8c:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8000a90:	f04f 0200 	mov.w	r2, #0
 8000a94:	f04f 0304 	mov.w	r3, #4
 8000a98:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.DsiClockSelection    = RCC_DSICLKSOURCE_DSIPHY;
 8000a9c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000aa0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000aa4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000aa8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000aac:	463b      	mov	r3, r7
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f00c fae0 	bl	800d074 <HAL_RCCEx_PeriphCLKConfig>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	42022000 	.word	0x42022000
 8000ac4:	20152e90 	.word	0x20152e90
 8000ac8:	40016c00 	.word	0x40016c00

08000acc <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_GPU2D_Init+0x20>)
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <MX_GPU2D_Init+0x24>)
 8000ad4:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_GPU2D_Init+0x20>)
 8000ad8:	f009 fa81 	bl	8009fde <HAL_GPU2D_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 8000ae2:	f000 fced 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20152eb4 	.word	0x20152eb4
 8000af0:	4002f000 	.word	0x4002f000

08000af4 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN HSPI1_Init 2 */
#endif
  BSP_HSPI_RAM_Cfg_t sHSPI_Init;

  sHSPI_Init.LatencyType      = BSP_HSPI_RAM_FIXED_LATENCY;
 8000afa:	2320      	movs	r3, #32
 8000afc:	703b      	strb	r3, [r7, #0]
  sHSPI_Init.BurstType        = BSP_HSPI_RAM_LINEAR_BURST;
 8000afe:	2300      	movs	r3, #0
 8000b00:	70fb      	strb	r3, [r7, #3]
  sHSPI_Init.BurstLength      = BSP_HSPI_RAM_BURST_16_BYTES;
 8000b02:	2300      	movs	r3, #0
 8000b04:	713b      	strb	r3, [r7, #4]
  sHSPI_Init.ReadLatencyCode  = BSP_HSPI_RAM_READ_LATENCY_6;
 8000b06:	230c      	movs	r3, #12
 8000b08:	707b      	strb	r3, [r7, #1]
  sHSPI_Init.WriteLatencyCode = BSP_HSPI_RAM_WRITE_LATENCY_6;
 8000b0a:	23c0      	movs	r3, #192	; 0xc0
 8000b0c:	70bb      	strb	r3, [r7, #2]
  sHSPI_Init.IOMode           = BSP_HSPI_RAM_IO_X16_MODE;
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	717b      	strb	r3, [r7, #5]

  if (BSP_HSPI_RAM_Init(0, &sHSPI_Init) != BSP_ERROR_NONE)
 8000b12:	463b      	mov	r3, r7
 8000b14:	4619      	mov	r1, r3
 8000b16:	2000      	movs	r0, #0
 8000b18:	f004 fb94 	bl	8005244 <BSP_HSPI_RAM_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d00a      	beq.n	8000b38 <MX_HSPI1_Init+0x44>
  {
    printf("\r\nHSPI RAM Initialization : Failed");
 8000b22:	4810      	ldr	r0, [pc, #64]	; (8000b64 <MX_HSPI1_Init+0x70>)
 8000b24:	f027 ff3c 	bl	80289a0 <iprintf>
    printf("\r\nHSPI RAM Test Aborted");
 8000b28:	480f      	ldr	r0, [pc, #60]	; (8000b68 <MX_HSPI1_Init+0x74>)
 8000b2a:	f027 ff39 	bl	80289a0 <iprintf>
    printf("\r\n");
 8000b2e:	480f      	ldr	r0, [pc, #60]	; (8000b6c <MX_HSPI1_Init+0x78>)
 8000b30:	f027 ffbc 	bl	8028aac <puts>
    Error_Handler();
 8000b34:	f000 fcc4 	bl	80014c0 <Error_Handler>
  }

  if(BSP_HSPI_RAM_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f004 fc87 	bl	800544c <BSP_HSPI_RAM_EnableMemoryMappedMode>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d00a      	beq.n	8000b5a <MX_HSPI1_Init+0x66>
  {
    printf("\r\nHSPI RAM Mem-Mapped Cfg : Failed");
 8000b44:	480a      	ldr	r0, [pc, #40]	; (8000b70 <MX_HSPI1_Init+0x7c>)
 8000b46:	f027 ff2b 	bl	80289a0 <iprintf>
    printf("\r\nHSPI RAM Test Aborted");
 8000b4a:	4807      	ldr	r0, [pc, #28]	; (8000b68 <MX_HSPI1_Init+0x74>)
 8000b4c:	f027 ff28 	bl	80289a0 <iprintf>
    printf("\r\n");
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <MX_HSPI1_Init+0x78>)
 8000b52:	f027 ffab 	bl	8028aac <puts>
    Error_Handler();
 8000b56:	f000 fcb3 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE END HSPI1_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	08029438 	.word	0x08029438
 8000b68:	0802945c 	.word	0x0802945c
 8000b6c:	08029474 	.word	0x08029474
 8000b70:	08029478 	.word	0x08029478

08000b74 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f00a fa99 	bl	800b0b0 <HAL_ICACHE_ConfigAssociativityMode>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000b84:	f000 fc9c 	bl	80014c0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000b88:	f00a fab2 	bl	800b0f0 <HAL_ICACHE_Enable>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000b92:	f000 fc95 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b9c:	b5b0      	push	{r4, r5, r7, lr}
 8000b9e:	b0e4      	sub	sp, #400	; 0x190
 8000ba0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ba2:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000ba6:	2234      	movs	r2, #52	; 0x34
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f027 fb1f 	bl	80281ee <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000bb0:	4bc1      	ldr	r3, [pc, #772]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bb2:	4ac2      	ldr	r2, [pc, #776]	; (8000ebc <MX_LTDC_Init+0x320>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000bb6:	4bc0      	ldr	r3, [pc, #768]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bb8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000bbc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000bbe:	4bbe      	ldr	r3, [pc, #760]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bc6:	4bbc      	ldr	r3, [pc, #752]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bcc:	4bba      	ldr	r3, [pc, #744]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8000bd2:	4bb9      	ldr	r3, [pc, #740]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 19;
 8000bd8:	4bb7      	ldr	r3, [pc, #732]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bda:	2213      	movs	r2, #19
 8000bdc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 2;
 8000bde:	4bb6      	ldr	r3, [pc, #728]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000be0:	2202      	movs	r2, #2
 8000be2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 31;
 8000be4:	4bb4      	ldr	r3, [pc, #720]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000be6:	221f      	movs	r2, #31
 8000be8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 482;
 8000bea:	4bb3      	ldr	r3, [pc, #716]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bec:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 512;
 8000bf2:	4bb1      	ldr	r3, [pc, #708]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 483;
 8000bfa:	4baf      	ldr	r3, [pc, #700]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bfc:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000c00:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 712;
 8000c02:	4bad      	ldr	r3, [pc, #692]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000c04:	f44f 7232 	mov.w	r2, #712	; 0x2c8
 8000c08:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c0a:	4bab      	ldr	r3, [pc, #684]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c12:	4ba9      	ldr	r3, [pc, #676]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c1a:	4ba7      	ldr	r3, [pc, #668]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c22:	48a5      	ldr	r0, [pc, #660]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000c24:	f00a fa74 	bl	800b110 <HAL_LTDC_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_LTDC_Init+0x96>
  {
    Error_Handler();
 8000c2e:	f000 fc47 	bl	80014c0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  pLayerCfg.WindowX1 = 480;
 8000c38:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c3c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  pLayerCfg.WindowY0 = 1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  pLayerCfg.WindowY1 = 481;
 8000c46:	f240 13e1 	movw	r3, #481	; 0x1e1
 8000c4a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  pLayerCfg.Alpha = 255;
 8000c54:	23ff      	movs	r3, #255	; 0xff
 8000c56:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  pLayerCfg.Alpha0 = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c60:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c64:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c68:	2307      	movs	r3, #7
 8000c6a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  pLayerCfg.FBStartAdress = 0x0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  pLayerCfg.ImageWidth = 480;
 8000c74:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c78:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  pLayerCfg.ImageHeight = 480;
 8000c7c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c80:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  pLayerCfg.Backcolor.Blue = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
  pLayerCfg.Backcolor.Green = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
  pLayerCfg.Backcolor.Red = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c96:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4886      	ldr	r0, [pc, #536]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000ca0:	f00a fbbe 	bl	800b420 <HAL_LTDC_ConfigLayer>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_LTDC_Init+0x112>
  {
    Error_Handler();
 8000caa:	f000 fc09 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  HAL_Delay(10);
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f006 fb86 	bl	80073c0 <HAL_Delay>
  HAL_DSI_EnterULPM(&hdsi);
 8000cb4:	4882      	ldr	r0, [pc, #520]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000cb6:	f008 fbb9 	bl	800942c <HAL_DSI_EnterULPM>
  HAL_Delay(10);
 8000cba:	200a      	movs	r0, #10
 8000cbc:	f006 fb80 	bl	80073c0 <HAL_Delay>

  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2120      	movs	r1, #32
 8000cc4:	487f      	ldr	r0, [pc, #508]	; (8000ec4 <MX_LTDC_Init+0x328>)
 8000cc6:	f009 f8cd 	bl	8009e64 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000cca:	200a      	movs	r0, #10
 8000ccc:	f006 fb78 	bl	80073c0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2120      	movs	r1, #32
 8000cd4:	487b      	ldr	r0, [pc, #492]	; (8000ec4 <MX_LTDC_Init+0x328>)
 8000cd6:	f009 f8c5 	bl	8009e64 <HAL_GPIO_WritePin>
  HAL_Delay(150);
 8000cda:	2096      	movs	r0, #150	; 0x96
 8000cdc:	f006 fb70 	bl	80073c0 <HAL_Delay>

  HAL_DSI_ExitULPM(&hdsi);
 8000ce0:	4877      	ldr	r0, [pc, #476]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000ce2:	f008 fcbb 	bl	800965c <HAL_DSI_ExitULPM>
  HAL_Delay(10);
 8000ce6:	200a      	movs	r0, #10
 8000ce8:	f006 fb6a 	bl	80073c0 <HAL_Delay>

  // CMD Mode
  uint8_t InitParam1[3] = {0xFF ,0x83 , 0x79};
 8000cec:	4a76      	ldr	r2, [pc, #472]	; (8000ec8 <MX_LTDC_Init+0x32c>)
 8000cee:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000cf2:	6812      	ldr	r2, [r2, #0]
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	8019      	strh	r1, [r3, #0]
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	0c12      	lsrs	r2, r2, #16
 8000cfc:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB9, InitParam1) != HAL_OK)
 8000cfe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	23b9      	movs	r3, #185	; 0xb9
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2303      	movs	r3, #3
 8000d0a:	2239      	movs	r2, #57	; 0x39
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	486c      	ldr	r0, [pc, #432]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000d10:	f008 faf5 	bl	80092fe <HAL_DSI_LongWrite>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_LTDC_Init+0x182>
  {
    Error_Handler();
 8000d1a:	f000 fbd1 	bl	80014c0 <Error_Handler>
  }

  // SETPOWER
  uint8_t InitParam3[16] = {0x44,0x1C,0x1C,0x37,0x57,0x90,0xD0,0xE2,0x58,0x80,0x38,0x38,0xF8,0x33,0x34,0x42};
 8000d1e:	4b6b      	ldr	r3, [pc, #428]	; (8000ecc <MX_LTDC_Init+0x330>)
 8000d20:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8000d24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 16, 0xB1, InitParam3) != HAL_OK)
 8000d2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	23b1      	movs	r3, #177	; 0xb1
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2310      	movs	r3, #16
 8000d36:	2239      	movs	r2, #57	; 0x39
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4861      	ldr	r0, [pc, #388]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000d3c:	f008 fadf 	bl	80092fe <HAL_DSI_LongWrite>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_LTDC_Init+0x1ae>
  {
    Error_Handler();
 8000d46:	f000 fbbb 	bl	80014c0 <Error_Handler>
  }

  // SETDISP
  uint8_t InitParam4[9] = {0x80,0x14,0x0C,0x30,0x20,0x50,0x11,0x42,0x1D};
 8000d4a:	4a61      	ldr	r2, [pc, #388]	; (8000ed0 <MX_LTDC_Init+0x334>)
 8000d4c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000d50:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d52:	c303      	stmia	r3!, {r0, r1}
 8000d54:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xB2, InitParam4) != HAL_OK)
 8000d56:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	23b2      	movs	r3, #178	; 0xb2
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2309      	movs	r3, #9
 8000d62:	2239      	movs	r2, #57	; 0x39
 8000d64:	2100      	movs	r1, #0
 8000d66:	4856      	ldr	r0, [pc, #344]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000d68:	f008 fac9 	bl	80092fe <HAL_DSI_LongWrite>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_LTDC_Init+0x1da>
  {
    Error_Handler();
 8000d72:	f000 fba5 	bl	80014c0 <Error_Handler>
  }

  // Set display cycle timing
  uint8_t InitParam5[10] = {0x01,0xAA,0x01,0xAF,0x01,0xAF,0x10,0xEA,0x1C,0xEA};
 8000d76:	4a57      	ldr	r2, [pc, #348]	; (8000ed4 <MX_LTDC_Init+0x338>)
 8000d78:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000d7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d7e:	c303      	stmia	r3!, {r0, r1}
 8000d80:	801a      	strh	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xB4, InitParam5) != HAL_OK)
 8000d82:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000d86:	9301      	str	r3, [sp, #4]
 8000d88:	23b4      	movs	r3, #180	; 0xb4
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	230a      	movs	r3, #10
 8000d8e:	2239      	movs	r2, #57	; 0x39
 8000d90:	2100      	movs	r1, #0
 8000d92:	484b      	ldr	r0, [pc, #300]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000d94:	f008 fab3 	bl	80092fe <HAL_DSI_LongWrite>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_LTDC_Init+0x206>
  {
    Error_Handler();
 8000d9e:	f000 fb8f 	bl	80014c0 <Error_Handler>
  }

  // SETVCOM
  uint8_t InitParam60[4] = {00,00,00,0xC0};
 8000da2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000da6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xC7, InitParam60) != HAL_OK)
 8000daa:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	23c7      	movs	r3, #199	; 0xc7
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2304      	movs	r3, #4
 8000db6:	2239      	movs	r2, #57	; 0x39
 8000db8:	2100      	movs	r1, #0
 8000dba:	4841      	ldr	r0, [pc, #260]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000dbc:	f008 fa9f 	bl	80092fe <HAL_DSI_LongWrite>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_LTDC_Init+0x22e>
  {
    Error_Handler();
 8000dc6:	f000 fb7b 	bl	80014c0 <Error_Handler>
  }

  // Set Panel Related Registers
  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xCC, 0x02) != HAL_OK)
 8000dca:	2302      	movs	r3, #2
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	23cc      	movs	r3, #204	; 0xcc
 8000dd0:	2215      	movs	r2, #21
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	483a      	ldr	r0, [pc, #232]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000dd6:	f008 fa70 	bl	80092ba <HAL_DSI_ShortWrite>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_LTDC_Init+0x248>
  {
    Error_Handler();
 8000de0:	f000 fb6e 	bl	80014c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xD2, 0x77) != HAL_OK)
 8000de4:	2377      	movs	r3, #119	; 0x77
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	23d2      	movs	r3, #210	; 0xd2
 8000dea:	2215      	movs	r2, #21
 8000dec:	2100      	movs	r1, #0
 8000dee:	4834      	ldr	r0, [pc, #208]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000df0:	f008 fa63 	bl	80092ba <HAL_DSI_ShortWrite>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_LTDC_Init+0x262>
  {
    Error_Handler();
 8000dfa:	f000 fb61 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam50[37] = {
 8000dfe:	4b36      	ldr	r3, [pc, #216]	; (8000ed8 <MX_LTDC_Init+0x33c>)
 8000e00:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8000e04:	461d      	mov	r5, r3
 8000e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e12:	6020      	str	r0, [r4, #0]
 8000e14:	3404      	adds	r4, #4
 8000e16:	7021      	strb	r1, [r4, #0]
    0x00,0x07,0x00,0x00,0x00,0x08,0x08,0x32,0x10,0x01,0x00,0x01,0x03,0x72,0x03,0x72,0x00,0x08,0x00,
    0x08,0x33,0x33,0x05,0x05,0x37,0x05,0x05,0x37,0x0A,0x00,0x00,0x00,0x0A,0x00,0x01,0x00,0x0E
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 37, 0xD3, InitParam50) != HAL_OK)
 8000e18:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	23d3      	movs	r3, #211	; 0xd3
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2325      	movs	r3, #37	; 0x25
 8000e24:	2239      	movs	r2, #57	; 0x39
 8000e26:	2100      	movs	r1, #0
 8000e28:	4825      	ldr	r0, [pc, #148]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000e2a:	f008 fa68 	bl	80092fe <HAL_DSI_LongWrite>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_LTDC_Init+0x29c>
  {
    Error_Handler();
 8000e34:	f000 fb44 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam51[34] = {
 8000e38:	4b28      	ldr	r3, [pc, #160]	; (8000edc <MX_LTDC_Init+0x340>)
 8000e3a:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8000e3e:	461d      	mov	r5, r3
 8000e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e48:	682b      	ldr	r3, [r5, #0]
 8000e4a:	8023      	strh	r3, [r4, #0]
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x19,0x19,0x18,0x18,0x18,0x18,0x19,0x19,0x01,0x00,
    0x03,0x02,0x05,0x04,0x07,0x06,0x23,0x22,0x21,0x20,0x18,0x18,0x18,0x18,0x00,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 34, 0xD5, InitParam51) != HAL_OK)
 8000e4c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	23d5      	movs	r3, #213	; 0xd5
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2322      	movs	r3, #34	; 0x22
 8000e58:	2239      	movs	r2, #57	; 0x39
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4818      	ldr	r0, [pc, #96]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000e5e:	f008 fa4e 	bl	80092fe <HAL_DSI_LongWrite>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_LTDC_Init+0x2d0>
  {
    Error_Handler();
 8000e68:	f000 fb2a 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam52[35] = {
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <MX_LTDC_Init+0x344>)
 8000e6e:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000e72:	461d      	mov	r5, r3
 8000e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7c:	682b      	ldr	r3, [r5, #0]
 8000e7e:	7023      	strb	r3, [r4, #0]
 8000e80:	f107 03d5 	add.w	r3, r7, #213	; 0xd5
 8000e84:	2200      	movs	r2, #0
 8000e86:	801a      	strh	r2, [r3, #0]
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x19,0x19,0x18,0x18,0x19,0x19,0x18,0x18,0x06,0x07,
    0x04,0x05,0x02,0x03,0x00,0x01,0x20,0x21,0x22,0x23,0x18,0x18,0x18,0x18
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 35, 0xD6, InitParam52) != HAL_OK)
 8000e88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	23d6      	movs	r3, #214	; 0xd6
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2323      	movs	r3, #35	; 0x23
 8000e94:	2239      	movs	r2, #57	; 0x39
 8000e96:	2100      	movs	r1, #0
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000e9a:	f008 fa30 	bl	80092fe <HAL_DSI_LongWrite>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_LTDC_Init+0x30c>
  {
    Error_Handler();
 8000ea4:	f000 fb0c 	bl	80014c0 <Error_Handler>
  }

  // SET GAMMA
  uint8_t InitParam8[42] = {
 8000ea8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000eac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <MX_LTDC_Init+0x348>)
 8000eb2:	461c      	mov	r4, r3
 8000eb4:	4615      	mov	r5, r2
 8000eb6:	e017      	b.n	8000ee8 <MX_LTDC_Init+0x34c>
 8000eb8:	20152ec0 	.word	0x20152ec0
 8000ebc:	40016800 	.word	0x40016800
 8000ec0:	20152e90 	.word	0x20152e90
 8000ec4:	42020c00 	.word	0x42020c00
 8000ec8:	0802949c 	.word	0x0802949c
 8000ecc:	080294a0 	.word	0x080294a0
 8000ed0:	080294b0 	.word	0x080294b0
 8000ed4:	080294bc 	.word	0x080294bc
 8000ed8:	080294c8 	.word	0x080294c8
 8000edc:	080294f0 	.word	0x080294f0
 8000ee0:	08029514 	.word	0x08029514
 8000ee4:	08029538 	.word	0x08029538
 8000ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef4:	c403      	stmia	r4!, {r0, r1}
 8000ef6:	8022      	strh	r2, [r4, #0]
    0x00,0x16,0x1B,0x30,0x36,0x3F,0x24,0x40,0x09,0x0D,0x0F,0x18,0x0E,0x11,0x12,0x11,0x14,0x07,
    0x12,0x13,0x18,0x00,0x17,0x1C,0x30,0x36,0x3F,0x24,0x40,0x09,0x0C,0x0F,0x18,0x0E,0x11,0x14,
    0x11,0x12,0x07,0x12,0x14,0x18
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xE0, InitParam8) != HAL_OK)
 8000ef8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	23e0      	movs	r3, #224	; 0xe0
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	232a      	movs	r3, #42	; 0x2a
 8000f04:	2239      	movs	r2, #57	; 0x39
 8000f06:	2100      	movs	r1, #0
 8000f08:	4865      	ldr	r0, [pc, #404]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000f0a:	f008 f9f8 	bl	80092fe <HAL_DSI_LongWrite>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_LTDC_Init+0x37c>
  {
    Error_Handler();
 8000f14:	f000 fad4 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam44[3] = {0x2C,0x2C,00};
 8000f18:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000f1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f20:	4a60      	ldr	r2, [pc, #384]	; (80010a4 <MX_LTDC_Init+0x508>)
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	4611      	mov	r1, r2
 8000f26:	8019      	strh	r1, [r3, #0]
 8000f28:	3302      	adds	r3, #2
 8000f2a:	0c12      	lsrs	r2, r2, #16
 8000f2c:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, InitParam44) != HAL_OK)
 8000f2e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	23b6      	movs	r3, #182	; 0xb6
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2303      	movs	r3, #3
 8000f3a:	2239      	movs	r2, #57	; 0x39
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4858      	ldr	r0, [pc, #352]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000f40:	f008 f9dd 	bl	80092fe <HAL_DSI_LongWrite>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_LTDC_Init+0x3b2>
  {
    Error_Handler();
 8000f4a:	f000 fab9 	bl	80014c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x00) != HAL_OK)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	23bd      	movs	r3, #189	; 0xbd
 8000f54:	2215      	movs	r2, #21
 8000f56:	2100      	movs	r1, #0
 8000f58:	4851      	ldr	r0, [pc, #324]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000f5a:	f008 f9ae 	bl	80092ba <HAL_DSI_ShortWrite>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_LTDC_Init+0x3cc>
  {
    Error_Handler();
 8000f64:	f000 faac 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam14[] = {
 8000f68:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000f6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f70:	4a4d      	ldr	r2, [pc, #308]	; (80010a8 <MX_LTDC_Init+0x50c>)
 8000f72:	461c      	mov	r4, r3
 8000f74:	4615      	mov	r5, r2
 8000f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f82:	c403      	stmia	r4!, {r0, r1}
 8000f84:	8022      	strh	r2, [r4, #0]
 8000f86:	3402      	adds	r4, #2
 8000f88:	0c13      	lsrs	r3, r2, #16
 8000f8a:	7023      	strb	r3, [r4, #0]
    0x01,0x00,0x07,0x0F,0x16,0x1F,0x27,0x30,0x38,0x40,0x47,0x4E,0x56,0x5D,0x65,0x6D,0x74,0x7D,
    0x84,0x8A,0x90,0x99,0xA1,0xA9,0xB0,0xB6,0xBD,0xC4,0xCD,0xD4,0xDD,0xE5,0xEC,0xF3,0x36,0x07,
    0x1C,0xC0,0x1B,0x01,0xF1,0x34,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam14) != HAL_OK)
 8000f8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	23c1      	movs	r3, #193	; 0xc1
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	232a      	movs	r3, #42	; 0x2a
 8000f98:	2239      	movs	r2, #57	; 0x39
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4840      	ldr	r0, [pc, #256]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000f9e:	f008 f9ae 	bl	80092fe <HAL_DSI_LongWrite>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_LTDC_Init+0x410>
  {
    Error_Handler();
 8000fa8:	f000 fa8a 	bl	80014c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x01) != HAL_OK)
 8000fac:	2301      	movs	r3, #1
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	23bd      	movs	r3, #189	; 0xbd
 8000fb2:	2215      	movs	r2, #21
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	483a      	ldr	r0, [pc, #232]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000fb8:	f008 f97f 	bl	80092ba <HAL_DSI_ShortWrite>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_LTDC_Init+0x42a>
  {
    Error_Handler();
 8000fc2:	f000 fa7d 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam15[] = {
 8000fc6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000fca:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000fce:	4a37      	ldr	r2, [pc, #220]	; (80010ac <MX_LTDC_Init+0x510>)
 8000fd0:	461c      	mov	r4, r3
 8000fd2:	4615      	mov	r5, r2
 8000fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fe0:	c403      	stmia	r4!, {r0, r1}
 8000fe2:	8022      	strh	r2, [r4, #0]
    0x00,0x08,0x0F,0x16,0x1F,0x28,0x31,0x39,0x41,0x48,0x51,0x59,0x60,0x68,0x70,0x78,0x7F,0x87,
    0x8D,0x94,0x9C,0xA3,0xAB,0xB3,0xB9,0xC1,0xC8,0xD0,0xD8,0xE0,0xE8,0xEE,0xF5,0x3B,0x1A,0xB6,
    0xA0,0x07,0x45,0xC5,0x37,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam15) != HAL_OK)
 8000fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	23c1      	movs	r3, #193	; 0xc1
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	232a      	movs	r3, #42	; 0x2a
 8000ff0:	2239      	movs	r2, #57	; 0x39
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	482a      	ldr	r0, [pc, #168]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000ff6:	f008 f982 	bl	80092fe <HAL_DSI_LongWrite>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_LTDC_Init+0x468>
  {
    Error_Handler();
 8001000:	f000 fa5e 	bl	80014c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x02) != HAL_OK)
 8001004:	2302      	movs	r3, #2
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	23bd      	movs	r3, #189	; 0xbd
 800100a:	2215      	movs	r2, #21
 800100c:	2100      	movs	r1, #0
 800100e:	4824      	ldr	r0, [pc, #144]	; (80010a0 <MX_LTDC_Init+0x504>)
 8001010:	f008 f953 	bl	80092ba <HAL_DSI_ShortWrite>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_LTDC_Init+0x482>
  {
    Error_Handler();
 800101a:	f000 fa51 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam20[42] = {
 800101e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001022:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001026:	4a22      	ldr	r2, [pc, #136]	; (80010b0 <MX_LTDC_Init+0x514>)
 8001028:	461c      	mov	r4, r3
 800102a:	4615      	mov	r5, r2
 800102c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001034:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001038:	c403      	stmia	r4!, {r0, r1}
 800103a:	8022      	strh	r2, [r4, #0]
    0x00,0x09,0x0F,0x18,0x21,0x2A,0x34,0x3C,0x45,0x4C,0x56,0x5E,0x66,0x6E,0x76,0x7E,0x87,0x8E,
    0x95,0x9D,0xA6,0xAF,0xB7,0xBD,0xC5,0xCE,0xD5,0xDF,0xE7,0xEE,0xF4,0xFA,0xFF,0x0C,0x31,0x83,
    0x3C,0x5B,0x56,0x1E,0x5A,0xFF
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam20) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	23c1      	movs	r3, #193	; 0xc1
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	232a      	movs	r3, #42	; 0x2a
 8001046:	2239      	movs	r2, #57	; 0x39
 8001048:	2100      	movs	r1, #0
 800104a:	4815      	ldr	r0, [pc, #84]	; (80010a0 <MX_LTDC_Init+0x504>)
 800104c:	f008 f957 	bl	80092fe <HAL_DSI_LongWrite>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_LTDC_Init+0x4be>
  {
    Error_Handler();
 8001056:	f000 fa33 	bl	80014c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x00) != HAL_OK)
 800105a:	2300      	movs	r3, #0
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	23bd      	movs	r3, #189	; 0xbd
 8001060:	2215      	movs	r2, #21
 8001062:	2100      	movs	r1, #0
 8001064:	480e      	ldr	r0, [pc, #56]	; (80010a0 <MX_LTDC_Init+0x504>)
 8001066:	f008 f928 	bl	80092ba <HAL_DSI_ShortWrite>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_LTDC_Init+0x4d8>
  {
    Error_Handler();
 8001070:	f000 fa26 	bl	80014c0 <Error_Handler>
  }

  // Exit Sleep Mode
  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, DSI_EXIT_SLEEP_MODE, 0x00) != HAL_OK)
 8001074:	2300      	movs	r3, #0
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2311      	movs	r3, #17
 800107a:	2205      	movs	r2, #5
 800107c:	2100      	movs	r1, #0
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <MX_LTDC_Init+0x504>)
 8001080:	f008 f91b 	bl	80092ba <HAL_DSI_ShortWrite>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_LTDC_Init+0x4f2>
  {
    Error_Handler();
 800108a:	f000 fa19 	bl	80014c0 <Error_Handler>
  }

  HAL_Delay(120);
 800108e:	2078      	movs	r0, #120	; 0x78
 8001090:	f006 f996 	bl	80073c0 <HAL_Delay>
  /* USER CODE END LTDC_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	20152e90 	.word	0x20152e90
 80010a4:	08029564 	.word	0x08029564
 80010a8:	08029568 	.word	0x08029568
 80010ac:	08029594 	.word	0x08029594
 80010b0:	080295c0 	.word	0x080295c0

080010b4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af00      	add	r7, sp, #0
  BSP_OSPI_NOR_Info_t sOSPI_NOR_Info;
  BSP_OSPI_NOR_Init_t sOSPI_NOR_Init;

  int32_t status;

  memset(&sOSPI_NOR_Info, 0, sizeof(sOSPI_NOR_Info));
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2224      	movs	r2, #36	; 0x24
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f027 f893 	bl	80281ee <memset>
  memset(&sOSPI_NOR_Init, 0, sizeof(sOSPI_NOR_Init));
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2202      	movs	r2, #2
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f027 f88d 	bl	80281ee <memset>

  sOSPI_NOR_Init.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	713b      	strb	r3, [r7, #4]
  sOSPI_NOR_Init.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 80010d8:	2301      	movs	r3, #1
 80010da:	717b      	strb	r3, [r7, #5]

  status = BSP_OSPI_NOR_Init(0, &sOSPI_NOR_Init);
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	2000      	movs	r0, #0
 80010e2:	f004 ffe5 	bl	80060b0 <BSP_OSPI_NOR_Init>
 80010e6:	62f8      	str	r0, [r7, #44]	; 0x2c

  if (status != BSP_ERROR_NONE)
 80010e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d008      	beq.n	8001100 <MX_OCTOSPI1_Init+0x4c>
  {
    printf("\r\nOSPI NOR Initialization : Failed");
 80010ee:	4811      	ldr	r0, [pc, #68]	; (8001134 <MX_OCTOSPI1_Init+0x80>)
 80010f0:	f027 fc56 	bl	80289a0 <iprintf>
    printf("\r\nOSPI NOR Test Aborted");
 80010f4:	4810      	ldr	r0, [pc, #64]	; (8001138 <MX_OCTOSPI1_Init+0x84>)
 80010f6:	f027 fc53 	bl	80289a0 <iprintf>
    printf("\r\n");
 80010fa:	4810      	ldr	r0, [pc, #64]	; (800113c <MX_OCTOSPI1_Init+0x88>)
 80010fc:	f027 fcd6 	bl	8028aac <puts>
  }

  BSP_OSPI_NOR_GetInfo(0, &sOSPI_NOR_Info);
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4619      	mov	r1, r3
 8001106:	2000      	movs	r0, #0
 8001108:	f005 f8c8 	bl	800629c <BSP_OSPI_NOR_GetInfo>

  if (BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 800110c:	2000      	movs	r0, #0
 800110e:	f005 f8db 	bl	80062c8 <BSP_OSPI_NOR_EnableMemoryMappedMode>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d008      	beq.n	800112a <MX_OCTOSPI1_Init+0x76>
  {
    printf("\r\nOSPI NOR Mem-Mapped Cfg : Failed");
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <MX_OCTOSPI1_Init+0x8c>)
 800111a:	f027 fc41 	bl	80289a0 <iprintf>
    printf("\r\nOSPI NOR Test Aborted");
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <MX_OCTOSPI1_Init+0x84>)
 8001120:	f027 fc3e 	bl	80289a0 <iprintf>
    printf("\r\n");
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_OCTOSPI1_Init+0x88>)
 8001126:	f027 fcc1 	bl	8028aac <puts>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	3730      	adds	r7, #48	; 0x30
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	080295ec 	.word	0x080295ec
 8001138:	08029610 	.word	0x08029610
 800113c:	08029474 	.word	0x08029474
 8001140:	08029628 	.word	0x08029628

08001144 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b09c      	sub	sp, #112	; 0x70
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001164:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2234      	movs	r2, #52	; 0x34
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f027 f835 	bl	80281ee <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001184:	4b45      	ldr	r3, [pc, #276]	; (800129c <MX_TIM8_Init+0x158>)
 8001186:	4a46      	ldr	r2, [pc, #280]	; (80012a0 <MX_TIM8_Init+0x15c>)
 8001188:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 18;
 800118a:	4b44      	ldr	r3, [pc, #272]	; (800129c <MX_TIM8_Init+0x158>)
 800118c:	2212      	movs	r2, #18
 800118e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b42      	ldr	r3, [pc, #264]	; (800129c <MX_TIM8_Init+0x158>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 139;
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <MX_TIM8_Init+0x158>)
 8001198:	228b      	movs	r2, #139	; 0x8b
 800119a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b3f      	ldr	r3, [pc, #252]	; (800129c <MX_TIM8_Init+0x158>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011a2:	4b3e      	ldr	r3, [pc, #248]	; (800129c <MX_TIM8_Init+0x158>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a8:	4b3c      	ldr	r3, [pc, #240]	; (800129c <MX_TIM8_Init+0x158>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80011ae:	483b      	ldr	r0, [pc, #236]	; (800129c <MX_TIM8_Init+0x158>)
 80011b0:	f00e ff88 	bl	80100c4 <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80011ba:	f000 f981 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011c8:	4619      	mov	r1, r3
 80011ca:	4834      	ldr	r0, [pc, #208]	; (800129c <MX_TIM8_Init+0x158>)
 80011cc:	f00f fcba 	bl	8010b44 <HAL_TIM_ConfigClockSource>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80011d6:	f000 f973 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011da:	4830      	ldr	r0, [pc, #192]	; (800129c <MX_TIM8_Init+0x158>)
 80011dc:	f00f f86a 	bl	80102b4 <HAL_TIM_PWM_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80011e6:	f000 f96b 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011fa:	4619      	mov	r1, r3
 80011fc:	4827      	ldr	r0, [pc, #156]	; (800129c <MX_TIM8_Init+0x158>)
 80011fe:	f010 fb5d 	bl	80118bc <HAL_TIMEx_MasterConfigSynchronization>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001208:	f000 f95a 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120c:	2360      	movs	r3, #96	; 0x60
 800120e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 100;
 8001210:	2364      	movs	r3, #100	; 0x64
 8001212:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001214:	2300      	movs	r3, #0
 8001216:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001218:	2300      	movs	r3, #0
 800121a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001228:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800122c:	2204      	movs	r2, #4
 800122e:	4619      	mov	r1, r3
 8001230:	481a      	ldr	r0, [pc, #104]	; (800129c <MX_TIM8_Init+0x158>)
 8001232:	f00f fb73 	bl	801091c <HAL_TIM_PWM_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 800123c:	f000 f940 	bl	80014c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001258:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001270:	2300      	movs	r3, #0
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4619      	mov	r1, r3
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM8_Init+0x158>)
 800127e:	f010 fbdf 	bl	8011a40 <HAL_TIMEx_ConfigBreakDeadTime>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001288:	f000 f91a 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <MX_TIM8_Init+0x158>)
 800128e:	f000 faa7 	bl	80017e0 <HAL_TIM_MspPostInit>

}
 8001292:	bf00      	nop
 8001294:	3770      	adds	r7, #112	; 0x70
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20152f68 	.word	0x20152f68
 80012a0:	40013400 	.word	0x40013400

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ba:	4b71      	ldr	r3, [pc, #452]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012c0:	4a6f      	ldr	r2, [pc, #444]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012c2:	f043 0310 	orr.w	r3, r3, #16
 80012c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012ca:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	4b69      	ldr	r3, [pc, #420]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012de:	4a68      	ldr	r2, [pc, #416]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012e0:	f043 0308 	orr.w	r3, r3, #8
 80012e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012e8:	4b65      	ldr	r3, [pc, #404]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	4b62      	ldr	r3, [pc, #392]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012fc:	4a60      	ldr	r2, [pc, #384]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001302:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001306:	4b5e      	ldr	r3, [pc, #376]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800130c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001314:	4b5a      	ldr	r3, [pc, #360]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800131a:	4a59      	ldr	r2, [pc, #356]	; (8001480 <MX_GPIO_Init+0x1dc>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001320:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001324:	4b56      	ldr	r3, [pc, #344]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800132a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001332:	4b53      	ldr	r3, [pc, #332]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001338:	4a51      	ldr	r2, [pc, #324]	; (8001480 <MX_GPIO_Init+0x1dc>)
 800133a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001342:	4b4f      	ldr	r3, [pc, #316]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001350:	4b4b      	ldr	r3, [pc, #300]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001356:	4a4a      	ldr	r2, [pc, #296]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001360:	4b47      	ldr	r3, [pc, #284]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136e:	4b44      	ldr	r3, [pc, #272]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001374:	4a42      	ldr	r2, [pc, #264]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001376:	f043 0320 	orr.w	r3, r3, #32
 800137a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800137e:	4b40      	ldr	r3, [pc, #256]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001384:	f003 0320 	and.w	r3, r3, #32
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2103      	movs	r1, #3
 8001390:	483c      	ldr	r0, [pc, #240]	; (8001484 <MX_GPIO_Init+0x1e0>)
 8001392:	f008 fd67 	bl	8009e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8001396:	2201      	movs	r2, #1
 8001398:	2120      	movs	r1, #32
 800139a:	483b      	ldr	r0, [pc, #236]	; (8001488 <MX_GPIO_Init+0x1e4>)
 800139c:	f008 fd62 	bl	8009e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2120      	movs	r1, #32
 80013a4:	4839      	ldr	r0, [pc, #228]	; (800148c <MX_GPIO_Init+0x1e8>)
 80013a6:	f008 fd5d 	bl	8009e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VSYNC_FREQ_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2103      	movs	r1, #3
 80013ae:	4836      	ldr	r0, [pc, #216]	; (8001488 <MX_GPIO_Init+0x1e4>)
 80013b0:	f008 fd58 	bl	8009e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MCU_ACTIVE_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80013ba:	4835      	ldr	r0, [pc, #212]	; (8001490 <MX_GPIO_Init+0x1ec>)
 80013bc:	f008 fd52 	bl	8009e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80013c0:	2303      	movs	r3, #3
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	482b      	ldr	r0, [pc, #172]	; (8001484 <MX_GPIO_Init+0x1e0>)
 80013d8:	f008 fa76 	bl	80098c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin VSYNC_FREQ_Pin RENDER_TIME_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|VSYNC_FREQ_Pin|RENDER_TIME_Pin;
 80013dc:	2323      	movs	r3, #35	; 0x23
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e8:	2302      	movs	r3, #2
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	4825      	ldr	r0, [pc, #148]	; (8001488 <MX_GPIO_Init+0x1e4>)
 80013f4:	f008 fa68 	bl	80098c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_PWR_ON_Pin */
  GPIO_InitStruct.Pin = DSI_PWR_ON_Pin;
 80013f8:	2320      	movs	r3, #32
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DSI_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	481f      	ldr	r0, [pc, #124]	; (800148c <MX_GPIO_Init+0x1e8>)
 8001410:	f008 fa5a 	bl	80098c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	481a      	ldr	r0, [pc, #104]	; (8001494 <MX_GPIO_Init+0x1f0>)
 800142a:	f008 fa4d 	bl	80098c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = DSI_TOUCH_INT_Pin;
 800142e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <MX_GPIO_Init+0x1f4>)
 8001436:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001438:	2301      	movs	r3, #1
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DSI_TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	4810      	ldr	r0, [pc, #64]	; (8001484 <MX_GPIO_Init+0x1e0>)
 8001444:	f008 fa40 	bl	80098c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_ACTIVE_Pin FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin|FRAME_RATE_Pin;
 8001448:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001456:	2302      	movs	r3, #2
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4619      	mov	r1, r3
 8001460:	480b      	ldr	r0, [pc, #44]	; (8001490 <MX_GPIO_Init+0x1ec>)
 8001462:	f008 fa31 	bl	80098c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI8_IRQn, 10, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	210a      	movs	r1, #10
 800146a:	2013      	movs	r0, #19
 800146c:	f006 f884 	bl	8007578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8001470:	2013      	movs	r0, #19
 8001472:	f006 f89b 	bl	80075ac <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001476:	bf00      	nop
 8001478:	3730      	adds	r7, #48	; 0x30
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	46020c00 	.word	0x46020c00
 8001484:	42021000 	.word	0x42021000
 8001488:	42020c00 	.word	0x42020c00
 800148c:	42022000 	.word	0x42022000
 8001490:	42021400 	.word	0x42021400
 8001494:	42020800 	.word	0x42020800
 8001498:	10210000 	.word	0x10210000

0800149c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014ae:	f005 ff67 	bl	8007380 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40001000 	.word	0x40001000

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <Error_Handler+0x8>
	...

080014cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_MspInit+0x30>)
 80014d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d8:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_MspInit+0x30>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_MspInit+0x30>)
 80014e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	46020c00 	.word	0x46020c00

08001500 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0b      	ldr	r2, [pc, #44]	; (800153c <HAL_CRC_MspInit+0x3c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d10e      	bne.n	8001530 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_CRC_MspInit+0x40>)
 8001514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_CRC_MspInit+0x40>)
 800151a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800151e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <HAL_CRC_MspInit+0x40>)
 8001524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40023000 	.word	0x40023000
 8001540:	46020c00 	.word	0x46020c00

08001544 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a16      	ldr	r2, [pc, #88]	; (80015ac <HAL_DCACHE_MspInit+0x68>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10f      	bne.n	8001576 <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 8001558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 800155e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001562:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 8001568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 8001574:	e013      	b.n	800159e <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <HAL_DCACHE_MspInit+0x70>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d10e      	bne.n	800159e <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 8001588:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 8001592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40031400 	.word	0x40031400
 80015b0:	46020c00 	.word	0x46020c00
 80015b4:	40031800 	.word	0x40031800

080015b8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_DMA2D_MspInit+0x48>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d116      	bne.n	80015f8 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_DMA2D_MspInit+0x4c>)
 80015cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d0:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <HAL_DMA2D_MspInit+0x4c>)
 80015d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_DMA2D_MspInit+0x4c>)
 80015dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2107      	movs	r1, #7
 80015ec:	2076      	movs	r0, #118	; 0x76
 80015ee:	f005 ffc3 	bl	8007578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80015f2:	2076      	movs	r0, #118	; 0x76
 80015f4:	f005 ffda 	bl	80075ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	4002b000 	.word	0x4002b000
 8001604:	46020c00 	.word	0x46020c00

08001608 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <HAL_DSI_MspInit+0x3c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d10e      	bne.n	8001638 <HAL_DSI_MspInit+0x30>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_DSI_MspInit+0x40>)
 800161c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001620:	4a09      	ldr	r2, [pc, #36]	; (8001648 <HAL_DSI_MspInit+0x40>)
 8001622:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001626:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <HAL_DSI_MspInit+0x40>)
 800162c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40016c00 	.word	0x40016c00
 8001648:	46020c00 	.word	0x46020c00

0800164c <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a24      	ldr	r2, [pc, #144]	; (80016ec <HAL_GPU2D_MspInit+0xa0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d142      	bne.n	80016e4 <HAL_GPU2D_MspInit+0x98>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 800165e:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 8001660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001664:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 8001666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800166a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 8001670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 800167c:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001682:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 8001684:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 7, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2107      	movs	r1, #7
 800169e:	2084      	movs	r0, #132	; 0x84
 80016a0:	f005 ff6a 	bl	8007578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 80016a4:	2084      	movs	r0, #132	; 0x84
 80016a6:	f005 ff81 	bl	80075ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 7, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2107      	movs	r1, #7
 80016ae:	2085      	movs	r0, #133	; 0x85
 80016b0:	f005 ff62 	bl	8007578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 80016b4:	2085      	movs	r0, #133	; 0x85
 80016b6:	f005 ff79 	bl	80075ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 80016bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80016c0:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 80016cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    SYSCFG->CFGR1 &= ~(1L << 28);
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_GPU2D_MspInit+0xa8>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <HAL_GPU2D_MspInit+0xa8>)
 80016de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e2:	6053      	str	r3, [r2, #4]
  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 80016e4:	bf00      	nop
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	4002f000 	.word	0x4002f000
 80016f0:	46020c00 	.word	0x46020c00
 80016f4:	46000400 	.word	0x46000400

080016f8 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0c0      	sub	sp, #256	; 0x100
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	22e0      	movs	r2, #224	; 0xe0
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f026 fd68 	bl	80281ee <memset>
  /* USER CODE BEGIN HSPI1_MspInit 1 */
#endif
  /* USER CODE END HSPI1_MspInit 1 */
  }

}
 800171e:	bf00      	nop
 8001720:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_XSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspDeInit(XSPI_HandleTypeDef* hxspi)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HSPI1_MspDeInit 1 */
#endif
  /* USER CODE END HSPI1_MspDeInit 1 */
  }

}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a12      	ldr	r2, [pc, #72]	; (8001794 <HAL_LTDC_MspInit+0x58>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d11e      	bne.n	800178c <HAL_LTDC_MspInit+0x50>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_LTDC_MspInit+0x5c>)
 8001750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001754:	4a10      	ldr	r2, [pc, #64]	; (8001798 <HAL_LTDC_MspInit+0x5c>)
 8001756:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800175a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_LTDC_MspInit+0x5c>)
 8001760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001764:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2107      	movs	r1, #7
 8001770:	2087      	movs	r0, #135	; 0x87
 8001772:	f005 ff01 	bl	8007578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001776:	2087      	movs	r0, #135	; 0x87
 8001778:	f005 ff18 	bl	80075ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 7, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2107      	movs	r1, #7
 8001780:	2088      	movs	r0, #136	; 0x88
 8001782:	f005 fef9 	bl	8007578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001786:	2088      	movs	r0, #136	; 0x88
 8001788:	f005 ff10 	bl	80075ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40016800 	.word	0x40016800
 8001798:	46020c00 	.word	0x46020c00

0800179c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_TIM_Base_MspInit+0x3c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10e      	bne.n	80017cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_TIM_Base_MspInit+0x40>)
 80017b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017b4:	4a09      	ldr	r2, [pc, #36]	; (80017dc <HAL_TIM_Base_MspInit+0x40>)
 80017b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017ba:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <HAL_TIM_Base_MspInit+0x40>)
 80017c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40013400 	.word	0x40013400
 80017dc:	46020c00 	.word	0x46020c00

080017e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a12      	ldr	r2, [pc, #72]	; (8001848 <HAL_TIM_MspPostInit+0x68>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d11e      	bne.n	8001840 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_TIM_MspPostInit+0x6c>)
 8001804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001808:	4a10      	ldr	r2, [pc, #64]	; (800184c <HAL_TIM_MspPostInit+0x6c>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_TIM_MspPostInit+0x6c>)
 8001814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PI6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = DSI_BL_CTRL_Pin;
 8001820:	2340      	movs	r3, #64	; 0x40
 8001822:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182c:	2302      	movs	r3, #2
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001830:	2303      	movs	r3, #3
 8001832:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DSI_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	4619      	mov	r1, r3
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <HAL_TIM_MspPostInit+0x70>)
 800183c:	f008 f844 	bl	80098c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001840:	bf00      	nop
 8001842:	3720      	adds	r7, #32
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40013400 	.word	0x40013400
 800184c:	46020c00 	.word	0x46020c00
 8001850:	42022000 	.word	0x42022000

08001854 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08e      	sub	sp, #56	; 0x38
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_InitTick+0xcc>)
 8001866:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_InitTick+0xcc>)
 800186c:	f043 0310 	orr.w	r3, r3, #16
 8001870:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001874:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <HAL_InitTick+0xcc>)
 8001876:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001882:	f107 0210 	add.w	r2, r7, #16
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f00b fb33 	bl	800cef8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001892:	f00b faf5 	bl	800ce80 <HAL_RCC_GetPCLK1Freq>
 8001896:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189a:	4a22      	ldr	r2, [pc, #136]	; (8001924 <HAL_InitTick+0xd0>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	0c9b      	lsrs	r3, r3, #18
 80018a2:	3b01      	subs	r3, #1
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_InitTick+0xd4>)
 80018a8:	4a20      	ldr	r2, [pc, #128]	; (800192c <HAL_InitTick+0xd8>)
 80018aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018ac:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <HAL_InitTick+0xd4>)
 80018ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018b4:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_InitTick+0xd4>)
 80018b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <HAL_InitTick+0xd4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_InitTick+0xd4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80018c6:	4818      	ldr	r0, [pc, #96]	; (8001928 <HAL_InitTick+0xd4>)
 80018c8:	f00e fbfc 	bl	80100c4 <HAL_TIM_Base_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80018d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d118      	bne.n	800190c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80018da:	4813      	ldr	r0, [pc, #76]	; (8001928 <HAL_InitTick+0xd4>)
 80018dc:	f00e fc4a 	bl	8010174 <HAL_TIM_Base_Start_IT>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80018e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10e      	bne.n	800190c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b0f      	cmp	r3, #15
 80018f2:	d808      	bhi.n	8001906 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80018f4:	2200      	movs	r2, #0
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	2031      	movs	r0, #49	; 0x31
 80018fa:	f005 fe3d 	bl	8007578 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018fe:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <HAL_InitTick+0xdc>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	e002      	b.n	800190c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800190c:	2031      	movs	r0, #49	; 0x31
 800190e:	f005 fe4d 	bl	80075ac <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001912:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001916:	4618      	mov	r0, r3
 8001918:	3738      	adds	r7, #56	; 0x38
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	46020c00 	.word	0x46020c00
 8001924:	431bde83 	.word	0x431bde83
 8001928:	20152fb4 	.word	0x20152fb4
 800192c:	40001000 	.word	0x40001000
 8001930:	2000004c 	.word	0x2000004c

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <NMI_Handler+0x4>

0800193a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <HardFault_Handler+0x4>

08001940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <MemManage_Handler+0x4>

08001946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <UsageFault_Handler+0x4>

08001952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DSI_TOUCH_INT_Pin);
 8001964:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001968:	f008 fb08 	bl	8009f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <TIM6_IRQHandler+0x10>)
 8001976:	f00e fe51 	bl	801061c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20152fb4 	.word	0x20152fb4

08001984 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <DMA2D_IRQHandler+0x10>)
 800198a:	f006 fca2 	bl	80082d2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20152e30 	.word	0x20152e30

08001998 <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <GPU2D_IRQHandler+0x10>)
 800199e:	f008 fb6e 	bl	800a07e <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20152eb4 	.word	0x20152eb4

080019ac <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <GPU2D_ER_IRQHandler+0x10>)
 80019b2:	f008 fb8a 	bl	800a0ca <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20152eb4 	.word	0x20152eb4

080019c0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <LTDC_IRQHandler+0x10>)
 80019c6:	f009 fc73 	bl	800b2b0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20152ec0 	.word	0x20152ec0

080019d4 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LCD-TFT Error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <LTDC_ER_IRQHandler+0x10>)
 80019da:	f009 fc69 	bl	800b2b0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20152ec0 	.word	0x20152ec0

080019e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return 1;
 80019ec:	2301      	movs	r3, #1
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_kill>:

int _kill(int pid, int sig)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a02:	f026 fb9b 	bl	802813c <__errno>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2216      	movs	r2, #22
 8001a0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_exit>:

void _exit (int status)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ffe7 	bl	80019f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a2a:	e7fe      	b.n	8001a2a <_exit+0x12>

08001a2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e00a      	b.n	8001a54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a3e:	e000      	b.n	8001a42 <_read+0x16>
 8001a40:	bf00      	nop
 8001a42:	4601      	mov	r1, r0
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	60ba      	str	r2, [r7, #8]
 8001a4a:	b2ca      	uxtb	r2, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3301      	adds	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	dbf0      	blt.n	8001a3e <_read+0x12>
  }

  return len;
 8001a5c:	687b      	ldr	r3, [r7, #4]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	e009      	b.n	8001a8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	60ba      	str	r2, [r7, #8]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	e000      	b.n	8001a86 <_write+0x20>
 8001a84:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf1      	blt.n	8001a78 <_write+0x12>
  }
  return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_close>:

int _close(int file)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_isatty>:

int _isatty(int file)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <_sbrk+0x5c>)
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <_sbrk+0x60>)
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <_sbrk+0x64>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <_sbrk+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d207      	bcs.n	8001b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b38:	f026 fb00 	bl	802813c <__errno>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	220c      	movs	r2, #12
 8001b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	e009      	b.n	8001b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <_sbrk+0x64>)
 8001b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20270000 	.word	0x20270000
 8001b68:	00001000 	.word	0x00001000
 8001b6c:	20153000 	.word	0x20153000
 8001b70:	20198668 	.word	0x20198668

08001b74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bac <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b78:	f005 fb9c 	bl	80072b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b7e:	e003      	b.n	8001b88 <LoopCopyDataInit>

08001b80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b86:	3104      	adds	r1, #4

08001b88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b88:	480a      	ldr	r0, [pc, #40]	; (8001bb4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b90:	d3f6      	bcc.n	8001b80 <CopyDataInit>
	ldr	r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b94:	e002      	b.n	8001b9c <LoopFillZerobss>

08001b96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b98:	f842 3b04 	str.w	r3, [r2], #4

08001b9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <LoopForever+0x16>)
	cmp	r2, r3
 8001b9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ba0:	d3f9      	bcc.n	8001b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f026 fae3 	bl	802816c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ba6:	f7fe fcf8 	bl	800059a <main>

08001baa <LoopForever>:

LoopForever:
    b LoopForever
 8001baa:	e7fe      	b.n	8001baa <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001bac:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8001bb0:	0802c410 	.word	0x0802c410
	ldr	r0, =_sdata
 8001bb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bb8:	2000012c 	.word	0x2000012c
	ldr	r2, =_sbss
 8001bbc:	20151930 	.word	0x20151930
	ldr	r3, = _ebss
 8001bc0:	20198664 	.word	0x20198664

08001bc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC1_2_IRQHandler>

08001bc6 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8001bca:	f000 fe65 	bl	8002898 <touchgfx_components_init>
  touchgfx_init();
 8001bce:	f000 fdeb 	bl	80027a8 <touchgfx_init>
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <MX_TouchGFX_Init>:

/**
 * Create TouchGFX Thread
 */
UINT MX_TouchGFX_Init(VOID *memory_ptr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	; 0x30
 8001bdc:	af08      	add	r7, sp, #32
 8001bde:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  CHAR *pointer = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]

  /* Allocate the stack for TouchGFX Thread.  */
  if (tx_byte_allocate((TX_BYTE_POOL*)memory_ptr, (VOID **) &pointer,
 8001be8:	f107 0108 	add.w	r1, r7, #8
 8001bec:	2300      	movs	r3, #0
 8001bee:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f013 f8a8 	bl	8014d48 <_txe_byte_allocate>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <MX_TouchGFX_Init+0x2c>
                       TOUCHGFX_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    ret = TX_POOL_ERROR;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	e019      	b.n	8001c38 <MX_TouchGFX_Init+0x60>
  }

  /* Create TouchGFX Thread */
  else if (tx_thread_create(&TouchGFXThread, (CHAR *)"TouchGFX", TouchGFX_Task, 0,
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	22b0      	movs	r2, #176	; 0xb0
 8001c08:	9206      	str	r2, [sp, #24]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	9205      	str	r2, [sp, #20]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	9204      	str	r2, [sp, #16]
 8001c12:	2205      	movs	r2, #5
 8001c14:	9203      	str	r2, [sp, #12]
 8001c16:	2205      	movs	r2, #5
 8001c18:	9202      	str	r2, [sp, #8]
 8001c1a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001c1e:	9201      	str	r2, [sp, #4]
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2300      	movs	r3, #0
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <MX_TouchGFX_Init+0x6c>)
 8001c26:	4908      	ldr	r1, [pc, #32]	; (8001c48 <MX_TouchGFX_Init+0x70>)
 8001c28:	4808      	ldr	r0, [pc, #32]	; (8001c4c <MX_TouchGFX_Init+0x74>)
 8001c2a:	f013 fbdb 	bl	80153e4 <_txe_thread_create>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TouchGFX_Init+0x60>
                       pointer, TOUCHGFX_STACK_SIZE,
                       5, 5,
                       TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
  {
    ret = TX_THREAD_ERROR;
 8001c34:	230e      	movs	r3, #14
 8001c36:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001c38:	68fb      	ldr	r3, [r7, #12]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	08001c51 	.word	0x08001c51
 8001c48:	0802964c 	.word	0x0802964c
 8001c4c:	20153004 	.word	0x20153004

08001c50 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(unsigned long thread_input)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001c58:	f000 fe28 	bl	80028ac <touchgfx_taskEntry>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_ZN8touchgfx7Buttons4initEv>:
    BUTTON_USER  = '5',
} JOYState_TypeDef;

void Buttons::init()
{
}
 8001c64:	4770      	bx	lr
	...

08001c68 <_ZN8touchgfx7Buttons6sampleEv>:

unsigned int Buttons::sample()
{
    unsigned int buttonValue = BUTTON_NONE;

    if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET)
 8001c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{
 8001c6c:	b508      	push	{r3, lr}
    if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET)
 8001c6e:	4804      	ldr	r0, [pc, #16]	; (8001c80 <_ZN8touchgfx7Buttons6sampleEv+0x18>)
 8001c70:	f008 f8e0 	bl	8009e34 <HAL_GPIO_ReadPin>
        buttonValue = BUTTON_USER;
    }

    if (buttonValue == BUTTON_NONE)
    {
        return 0;
 8001c74:	2801      	cmp	r0, #1
    }

    return static_cast<unsigned int>(buttonValue);
}
 8001c76:	bf0c      	ite	eq
 8001c78:	2035      	moveq	r0, #53	; 0x35
 8001c7a:	2000      	movne	r0, #0
 8001c7c:	bd08      	pop	{r3, pc}
 8001c7e:	bf00      	nop
 8001c80:	42020800 	.word	0x42020800

08001c84 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001c84:	6840      	ldr	r0, [r0, #4]
    }
 8001c86:	4770      	bx	lr

08001c88 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001c88:	6041      	str	r1, [r0, #4]
    }
 8001c8a:	4770      	bx	lr

08001c8c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001c8c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001c90:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8001c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c98:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001c9e:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001ca0:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
}
 8001cb2:	4770      	bx	lr
 8001cb4:	e0001000 	.word	0xe0001000
 8001cb8:	c5acce55 	.word	0xc5acce55

08001cbc <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001cbc:	1a51      	subs	r1, r2, r1
 8001cbe:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001cc2:	fbb1 f0f3 	udiv	r0, r1, r3
 8001cc6:	4770      	bx	lr

08001cc8 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001cc8:	4b01      	ldr	r3, [pc, #4]	; (8001cd0 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001cca:	6858      	ldr	r0, [r3, #4]
}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e0001000 	.word	0xe0001000

08001cd4 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001cd4:	4770      	bx	lr

08001cd6 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001cd6:	b510      	push	{r4, lr}
 8001cd8:	4604      	mov	r4, r0
 8001cda:	210c      	movs	r1, #12
 8001cdc:	f026 f9cf 	bl	802807e <_ZdlPvj>
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	bd10      	pop	{r4, pc}

08001ce4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001ce4:	6803      	ldr	r3, [r0, #0]
{
 8001ce6:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001ce8:	691b      	ldr	r3, [r3, #16]
{
 8001cea:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001cec:	b131      	cbz	r1, 8001cfc <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001cee:	4798      	blx	r3
 8001cf0:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001cf2:	6863      	ldr	r3, [r4, #4]
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	4418      	add	r0, r3
 8001cf8:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001cfa:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001cfc:	4798      	blx	r3
 8001cfe:	60a0      	str	r0, [r4, #8]
}
 8001d00:	e7fb      	b.n	8001cfa <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

08001d02 <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 8001d02:	4770      	bx	lr

08001d04 <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 8001d04:	4770      	bx	lr

08001d06 <_ZN8touchgfx10KeySampler4initEv>:

using namespace touchgfx;

void KeySampler::init()
{
    previousState = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	7103      	strb	r3, [r0, #4]
    Buttons::init();
 8001d0a:	f7ff bfab 	b.w	8001c64 <_ZN8touchgfx7Buttons4initEv>
	...

08001d10 <_ZN8touchgfx10KeySampler6sampleERh>:
}

bool KeySampler::sample(uint8_t& key)
{
 8001d10:	b570      	push	{r4, r5, r6, lr}
 8001d12:	4604      	mov	r4, r0
 8001d14:	460d      	mov	r5, r1
    static uint32_t last_time = 0;

    if ((HAL_GetTick() - last_time) > 800)
 8001d16:	f005 fb47 	bl	80073a8 <HAL_GetTick>
 8001d1a:	4e0b      	ldr	r6, [pc, #44]	; (8001d48 <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
 8001d1c:	6833      	ldr	r3, [r6, #0]
 8001d1e:	1ac0      	subs	r0, r0, r3
 8001d20:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 8001d24:	d904      	bls.n	8001d30 <_ZN8touchgfx10KeySampler6sampleERh+0x20>
    {
        last_time = HAL_GetTick();
 8001d26:	f005 fb3f 	bl	80073a8 <HAL_GetTick>
        previousState = 0;
 8001d2a:	2300      	movs	r3, #0
        last_time = HAL_GetTick();
 8001d2c:	6030      	str	r0, [r6, #0]
        previousState = 0;
 8001d2e:	7123      	strb	r3, [r4, #4]
    }

    key = static_cast<uint8_t>(Buttons::sample());
 8001d30:	f7ff ff9a 	bl	8001c68 <_ZN8touchgfx7Buttons6sampleEv>
 8001d34:	b2c0      	uxtb	r0, r0
 8001d36:	7028      	strb	r0, [r5, #0]

    //User key
    if (key && (key != previousState))
 8001d38:	b128      	cbz	r0, 8001d46 <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8001d3a:	7922      	ldrb	r2, [r4, #4]
 8001d3c:	4282      	cmp	r2, r0
    {
        previousState = key;
 8001d3e:	bf16      	itet	ne
 8001d40:	7120      	strbne	r0, [r4, #4]
        return true;
    }

    return false;
 8001d42:	2000      	moveq	r0, #0
        return true;
 8001d44:	2001      	movne	r0, #1
}
 8001d46:	bd70      	pop	{r4, r5, r6, pc}
 8001d48:	201530b4 	.word	0x201530b4

08001d4c <_ZN8touchgfx10KeySamplerD0Ev>:
 8001d4c:	b510      	push	{r4, lr}
 8001d4e:	4604      	mov	r4, r0
 8001d50:	2108      	movs	r1, #8
 8001d52:	f026 f994 	bl	802807e <_ZdlPvj>
 8001d56:	4620      	mov	r0, r4
 8001d58:	bd10      	pop	{r4, pc}

08001d5a <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001d5a:	4770      	bx	lr

08001d5c <_ZN20STM32TouchControllerD0Ev>:
 8001d5c:	b510      	push	{r4, lr}
 8001d5e:	4604      	mov	r4, r0
 8001d60:	2104      	movs	r1, #4
 8001d62:	f026 f98c 	bl	802807e <_ZdlPvj>
 8001d66:	4620      	mov	r0, r4
 8001d68:	bd10      	pop	{r4, pc}
	...

08001d6c <_ZN20STM32TouchController11sampleTouchERlS0_>:
    }
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
    if (_initialized)
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1c>)
{
 8001d6e:	b510      	push	{r4, lr}
    if (_initialized)
 8001d70:	7818      	ldrb	r0, [r3, #0]
 8001d72:	b130      	cbz	r0, 8001d82 <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
    {
        if (state.TouchDetected)
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>)
 8001d76:	681c      	ldr	r4, [r3, #0]
 8001d78:	b124      	cbz	r4, 8001d84 <_ZN20STM32TouchController11sampleTouchERlS0_+0x18>
        {
            x = state.TouchX;
 8001d7a:	685c      	ldr	r4, [r3, #4]
 8001d7c:	600c      	str	r4, [r1, #0]
            y = state.TouchY;
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	6013      	str	r3, [r2, #0]
            return true;
        }
    }

    return false;
}
 8001d82:	bd10      	pop	{r4, pc}
    return false;
 8001d84:	4620      	mov	r0, r4
 8001d86:	e7fc      	b.n	8001d82 <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
 8001d88:	201530b8 	.word	0x201530b8
 8001d8c:	201530bc 	.word	0x201530bc

08001d90 <_ZN20STM32TouchController4initEv>:
{
 8001d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (!_initialized)
 8001d92:	4c09      	ldr	r4, [pc, #36]	; (8001db8 <_ZN20STM32TouchController4initEv+0x28>)
 8001d94:	7820      	ldrb	r0, [r4, #0]
 8001d96:	b968      	cbnz	r0, 8001db4 <_ZN20STM32TouchController4initEv+0x24>
        TsInit.Width = HAL::DISPLAY_WIDTH;
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <_ZN20STM32TouchController4initEv+0x2c>)
        if (BSP_TS_Init(0, &TsInit) == BSP_ERROR_NONE)
 8001d9a:	4669      	mov	r1, sp
        TsInit.Width = HAL::DISPLAY_WIDTH;
 8001d9c:	881b      	ldrh	r3, [r3, #0]
        TsInit.Accuracy = 0;
 8001d9e:	9003      	str	r0, [sp, #12]
        TsInit.Width = HAL::DISPLAY_WIDTH;
 8001da0:	9300      	str	r3, [sp, #0]
        TsInit.Height = HAL::DISPLAY_HEIGHT;
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <_ZN20STM32TouchController4initEv+0x30>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
        TsInit.Orientation = TS_ORIENTATION_PORTRAIT;
 8001da6:	e9cd 3001 	strd	r3, r0, [sp, #4]
        if (BSP_TS_Init(0, &TsInit) == BSP_ERROR_NONE)
 8001daa:	f005 f88d 	bl	8006ec8 <BSP_TS_Init>
 8001dae:	b908      	cbnz	r0, 8001db4 <_ZN20STM32TouchController4initEv+0x24>
            _initialized = true;
 8001db0:	2301      	movs	r3, #1
 8001db2:	7023      	strb	r3, [r4, #0]
}
 8001db4:	b004      	add	sp, #16
 8001db6:	bd10      	pop	{r4, pc}
 8001db8:	201530b8 	.word	0x201530b8
 8001dbc:	2019814c 	.word	0x2019814c
 8001dc0:	2019814e 	.word	0x2019814e

08001dc4 <HAL_GPIO_EXTI_Falling_Callback>:
    if (GPIO_Pin == TS_INT_PIN)
 8001dc4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8001dc8:	b508      	push	{r3, lr}
    if (GPIO_Pin == TS_INT_PIN)
 8001dca:	d10d      	bne.n	8001de8 <HAL_GPIO_EXTI_Falling_Callback+0x24>
        if (_initialized)
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <HAL_GPIO_EXTI_Falling_Callback+0x28>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b153      	cbz	r3, 8001de8 <HAL_GPIO_EXTI_Falling_Callback+0x24>
            if (BSP_TS_GetState(0, &state) != BSP_ERROR_NONE)
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	4906      	ldr	r1, [pc, #24]	; (8001df0 <HAL_GPIO_EXTI_Falling_Callback+0x2c>)
 8001dd6:	f005 f913 	bl	8007000 <BSP_TS_GetState>
 8001dda:	b128      	cbz	r0, 8001de8 <HAL_GPIO_EXTI_Falling_Callback+0x24>
                assert(0 && "Failed to read TS state");
 8001ddc:	213b      	movs	r1, #59	; 0x3b
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 8001de0:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <HAL_GPIO_EXTI_Falling_Callback+0x34>)
 8001de2:	4806      	ldr	r0, [pc, #24]	; (8001dfc <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 8001de4:	f026 f978 	bl	80280d8 <__assert_func>
}
 8001de8:	bd08      	pop	{r3, pc}
 8001dea:	bf00      	nop
 8001dec:	201530b8 	.word	0x201530b8
 8001df0:	201530bc 	.word	0x201530bc
 8001df4:	080297ec 	.word	0x080297ec
 8001df8:	0802980b 	.word	0x0802980b
 8001dfc:	08029839 	.word	0x08029839

08001e00 <_ZN8touchgfx4GPIO4initEv>:
 * Perform configuration of IO pins.
 */
void GPIO::init()
{

}
 8001e00:	4770      	bx	lr
	...

08001e04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001e04:	2803      	cmp	r0, #3
 8001e06:	d814      	bhi.n	8001e32 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2e>
 8001e08:	e8df f000 	tbb	[pc, r0]
 8001e0c:	0f0a0702 	.word	0x0f0a0702
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 8001e10:	2201      	movs	r2, #1
 8001e12:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 8001e14:	4807      	ldr	r0, [pc, #28]	; (8001e34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x30>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 8001e16:	f008 b825 	b.w	8009e64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	e7f9      	b.n	8001e14 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x10>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 8001e26:	4804      	ldr	r0, [pc, #16]	; (8001e38 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x34>)
 8001e28:	e7f5      	b.n	8001e16 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x12>
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e30:	e7f9      	b.n	8001e26 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x22>
#endif
        break;
    }
}
 8001e32:	4770      	bx	lr
 8001e34:	42020c00 	.word	0x42020c00
 8001e38:	42021400 	.word	0x42021400

08001e3c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001e3c:	2803      	cmp	r0, #3
 8001e3e:	d814      	bhi.n	8001e6a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2e>
 8001e40:	e8df f000 	tbb	[pc, r0]
 8001e44:	0f0a0702 	.word	0x0f0a0702
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001e4c:	4807      	ldr	r0, [pc, #28]	; (8001e6c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001e4e:	f008 b809 	b.w	8009e64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2101      	movs	r1, #1
 8001e56:	e7f9      	b.n	8001e4c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x10>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001e5e:	4804      	ldr	r0, [pc, #16]	; (8001e70 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x34>)
 8001e60:	e7f5      	b.n	8001e4e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x12>
 8001e62:	2200      	movs	r2, #0
 8001e64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e68:	e7f9      	b.n	8001e5e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x22>
#endif
        break;
    }
}
 8001e6a:	4770      	bx	lr
 8001e6c:	42020c00 	.word	0x42020c00
 8001e70:	42021400 	.word	0x42021400

08001e74 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001e74:	2803      	cmp	r0, #3
 8001e76:	d810      	bhi.n	8001e9a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x26>
 8001e78:	e8df f000 	tbb	[pc, r0]
 8001e7c:	0c080602 	.word	0x0c080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001e80:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001e82:	4806      	ldr	r0, [pc, #24]	; (8001e9c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e84:	f008 b806 	b.w	8009e94 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001e88:	2101      	movs	r1, #1
 8001e8a:	e7fa      	b.n	8001e82 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001e8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e90:	4803      	ldr	r0, [pc, #12]	; (8001ea0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8001e92:	e7f7      	b.n	8001e84 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e98:	e7fa      	b.n	8001e90 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x1c>
#endif
        break;
    }
}
 8001e9a:	4770      	bx	lr
 8001e9c:	42020c00 	.word	0x42020c00
 8001ea0:	42021400 	.word	0x42021400

08001ea4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001ea4:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001ea6:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001eaa:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001eae:	4770      	bx	lr

08001eb0 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	4770      	bx	lr

08001eb4 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001eb4:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001eb6:	3900      	subs	r1, #0
 8001eb8:	bf18      	it	ne
 8001eba:	2101      	movne	r1, #1
 8001ebc:	4b01      	ldr	r3, [pc, #4]	; (8001ec4 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001ebe:	7019      	strb	r1, [r3, #0]
    }
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20198157 	.word	0x20198157

08001ec8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001ec8:	2000      	movs	r0, #0
 8001eca:	4770      	bx	lr

08001ecc <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001ecc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001ece:	b10b      	cbz	r3, 8001ed4 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001ed0:	4608      	mov	r0, r1
 8001ed2:	4718      	bx	r3
        }
    }
 8001ed4:	4770      	bx	lr

08001ed6 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001ed6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001eda:	4770      	bx	lr

08001edc <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001edc:	6840      	ldr	r0, [r0, #4]
 8001ede:	6803      	ldr	r3, [r0, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	4718      	bx	r3

08001ee4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 8001ee4:	4770      	bx	lr

08001ee6 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 8001ee6:	4770      	bx	lr

08001ee8 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001ee8:	4770      	bx	lr
	...

08001eec <_ZN11TouchGFXHAL10initializeEv>:
using namespace touchgfx;

KeySampler btnctrl;

void TouchGFXHAL::initialize()
{
 8001eec:	b538      	push	{r3, r4, r5, lr}
 8001eee:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001ef0:	f000 fd4e 	bl	8002990 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        buttonController = btnCtrl;
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <_ZN11TouchGFXHAL10initializeEv+0x2c>)
    setButtonController(&btnctrl);
    lockDMAToFrontPorch(false);
    GPIO::init();
    instrumentation.init();
 8001ef6:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
 8001efa:	6163      	str	r3, [r4, #20]
        lockDMAToPorch = enableLock;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
    GPIO::init();
 8001f02:	f7ff ff7d 	bl	8001e00 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8001f06:	4628      	mov	r0, r5
 8001f08:	f7ff fec0 	bl	8001c8c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001f0c:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001f0e:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001f10:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001f14:	bd38      	pop	{r3, r4, r5, pc}
 8001f16:	bf00      	nop
 8001f18:	201530cc 	.word	0x201530cc

08001f1c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001f1c:	f000 bd2a 	b.w	8002974 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001f20 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8001f22:	2500      	movs	r5, #0
 8001f24:	4c10      	ldr	r4, [pc, #64]	; (8001f68 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt+0x48>)
 8001f26:	9500      	str	r5, [sp, #0]
 8001f28:	6823      	ldr	r3, [r4, #0]
 8001f2a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001f2e:	f022 0208 	bic.w	r2, r2, #8
 8001f32:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001f36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	9b00      	ldr	r3, [sp, #0]
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001f42:	f000 fd1d 	bl	8002980 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
    __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	9501      	str	r5, [sp, #4]
 8001f4a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001f4e:	f042 0208 	orr.w	r2, r2, #8
 8001f52:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001f56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	9b01      	ldr	r3, [sp, #4]
}
 8001f62:	b003      	add	sp, #12
 8001f64:	bd30      	pop	{r4, r5, pc}
 8001f66:	bf00      	nop
 8001f68:	20152e90 	.word	0x20152e90

08001f6c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001f6c:	f000 bd38 	b.w	80029e0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001f70 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:
}

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001f70:	f000 bd38 	b.w	80029e4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08001f74 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001f74:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    TouchGFXGeneratedHAL::configureInterrupts();
 8001f76:	f000 fcd7 	bl	8002928 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	2290      	movs	r2, #144	; 0x90
 8001f7c:	4b01      	ldr	r3, [pc, #4]	; (8001f84 <_ZN11TouchGFXHAL19configureInterruptsEv+0x10>)
 8001f7e:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
    NVIC_SetPriority(DSI_IRQn, 9);
}
 8001f82:	bd08      	pop	{r3, pc}
 8001f84:	e000e100 	.word	0xe000e100

08001f88 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001f88:	f000 bcda 	b.w	8002940 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001f8c <_ZN11TouchGFXHAL10beginFrameEv>:
}

bool TouchGFXHAL::beginFrame()
{
    return TouchGFXGeneratedHAL::beginFrame();
 8001f8c:	f000 bd1c 	b.w	80029c8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>

08001f90 <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
    if (!display_on)
 8001f90:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <_ZN11TouchGFXHAL8endFrameEv+0x38>)
{
 8001f92:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!display_on)
 8001f94:	7819      	ldrb	r1, [r3, #0]
{
 8001f96:	4604      	mov	r4, r0
    if (!display_on)
 8001f98:	b979      	cbnz	r1, 8001fba <_ZN11TouchGFXHAL8endFrameEv+0x2a>
    {
        display_on = true;
 8001f9a:	2201      	movs	r2, #1
        /* Enable the LCD, Send Display on DCS command to display */
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, DSI_SET_DISPLAY_ON, 0x00);
        /* Start PWM Timer channel */
        (void)HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001f9c:	4d0b      	ldr	r5, [pc, #44]	; (8001fcc <_ZN11TouchGFXHAL8endFrameEv+0x3c>)
        display_on = true;
 8001f9e:	701a      	strb	r2, [r3, #0]
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, DSI_SET_DISPLAY_ON, 0x00);
 8001fa0:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <_ZN11TouchGFXHAL8endFrameEv+0x40>)
 8001fa2:	2329      	movs	r3, #41	; 0x29
 8001fa4:	2215      	movs	r2, #21
 8001fa6:	9100      	str	r1, [sp, #0]
 8001fa8:	f007 f987 	bl	80092ba <HAL_DSI_ShortWrite>
        (void)HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001fac:	2104      	movs	r1, #4
 8001fae:	4628      	mov	r0, r5
 8001fb0:	f00e f9e2 	bl	8010378 <HAL_TIM_PWM_Start>
        /* Enable Backlight by setting Brightness to 100% */
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 2U * 100);
 8001fb4:	22c8      	movs	r2, #200	; 0xc8
 8001fb6:	682b      	ldr	r3, [r5, #0]
 8001fb8:	639a      	str	r2, [r3, #56]	; 0x38
    }

    TouchGFXGeneratedHAL::endFrame();
 8001fba:	4620      	mov	r0, r4
}
 8001fbc:	b003      	add	sp, #12
 8001fbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    TouchGFXGeneratedHAL::endFrame();
 8001fc2:	f000 bd03 	b.w	80029cc <_ZN20TouchGFXGeneratedHAL8endFrameEv>
 8001fc6:	bf00      	nop
 8001fc8:	201530c8 	.word	0x201530c8
 8001fcc:	20152f68 	.word	0x20152f68
 8001fd0:	20152e90 	.word	0x20152e90

08001fd4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001fd4:	b510      	push	{r4, lr}
 8001fd6:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001fd8:	f014 fb76 	bl	80166c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	4620      	mov	r0, r4
    }
 8001fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001fe4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001fe8:	4718      	bx	r3

08001fea <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001fea:	f013 bdb7 	b.w	8015b5c <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001fee <_ZN11TouchGFXHALD0Ev>:
 8001fee:	b510      	push	{r4, lr}
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	21b4      	movs	r1, #180	; 0xb4
 8001ff4:	f026 f843 	bl	802807e <_ZdlPvj>
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	bd10      	pop	{r4, pc}

08001ffc <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001ffc:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8002000:	b11b      	cbz	r3, 800200a <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8002002:	6840      	ldr	r0, [r0, #4]
 8002004:	6803      	ldr	r3, [r0, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4718      	bx	r3
    }
 800200a:	4618      	mov	r0, r3
 800200c:	4770      	bx	lr
	...

08002010 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 8002010:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8002012:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8002016:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 800201c:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 800201e:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8002020:	d009      	beq.n	8002036 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8002022:	b93a      	cbnz	r2, 8002034 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002024:	490a      	ldr	r1, [pc, #40]	; (8002050 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002026:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002028:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800202a:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 800202c:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800202e:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002030:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 8002032:	701a      	strb	r2, [r3, #0]
    }
 8002034:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8002036:	2a00      	cmp	r2, #0
 8002038:	d0fc      	beq.n	8002034 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800203a:	4a06      	ldr	r2, [pc, #24]	; (8002054 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 800203c:	4904      	ldr	r1, [pc, #16]	; (8002050 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800203e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002040:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002042:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8002044:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8002046:	2200      	movs	r2, #0
 8002048:	e7f3      	b.n	8002032 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 800204a:	bf00      	nop
 800204c:	20198150 	.word	0x20198150
 8002050:	2019814e 	.word	0x2019814e
 8002054:	2019814c 	.word	0x2019814c

08002058 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8002058:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	428b      	cmp	r3, r1
 8002060:	d803      	bhi.n	800206a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	4293      	cmp	r3, r2
 8002068:	d905      	bls.n	8002076 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 800206a:	219e      	movs	r1, #158	; 0x9e
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 800206e:	4a07      	ldr	r2, [pc, #28]	; (800208c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8002070:	4807      	ldr	r0, [pc, #28]	; (8002090 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8002072:	f026 f831 	bl	80280d8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002078:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 800207c:	801a      	strh	r2, [r3, #0]
    }
 800207e:	bd08      	pop	{r3, pc}
 8002080:	2019814c 	.word	0x2019814c
 8002084:	2019814e 	.word	0x2019814e
 8002088:	0802989c 	.word	0x0802989c
 800208c:	080298ff 	.word	0x080298ff
 8002090:	08029942 	.word	0x08029942
 8002094:	20198152 	.word	0x20198152
 8002098:	20198154 	.word	0x20198154

0800209c <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 800209c:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 800209e:	f000 fcc3 	bl	8002a28 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <_ZN11TouchGFXHAL17disableInterruptsEv+0x1c>)
 80020a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80020b0:	f3bf 8f6f 	isb	sy
}
 80020b4:	bd08      	pop	{r3, pc}
 80020b6:	bf00      	nop
 80020b8:	e000e100 	.word	0xe000e100

080020bc <_ZN11TouchGFXHAL16enableInterruptsEv>:
{
 80020bc:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::enableInterrupts();
 80020be:	f000 fccd 	bl	8002a5c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c6:	4b01      	ldr	r3, [pc, #4]	; (80020cc <_ZN11TouchGFXHAL16enableInterruptsEv+0x10>)
 80020c8:	611a      	str	r2, [r3, #16]
}
 80020ca:	bd08      	pop	{r3, pc}
 80020cc:	e000e100 	.word	0xe000e100

080020d0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 80020d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80020d2:	460c      	mov	r4, r1
 80020d4:	b931      	cbnz	r1, 80020e4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x14>
 80020d6:	f240 21d2 	movw	r1, #722	; 0x2d2
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x78>)
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x7c>)
 80020de:	481c      	ldr	r0, [pc, #112]	; (8002150 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x80>)
 80020e0:	f025 fffa 	bl	80280d8 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80020e4:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80020e8:	3a00      	subs	r2, #0
 80020ea:	bf18      	it	ne
 80020ec:	2201      	movne	r2, #1
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 80020ee:	2500      	movs	r5, #0
 80020f0:	4918      	ldr	r1, [pc, #96]	; (8002154 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x84>)
 80020f2:	4e19      	ldr	r6, [pc, #100]	; (8002158 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x88>)
 80020f4:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 80020f6:	6802      	ldr	r2, [r0, #0]
 80020f8:	4619      	mov	r1, r3
 80020fa:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80020fe:	4790      	blx	r2
 8002100:	6833      	ldr	r3, [r6, #0]
 8002102:	9500      	str	r5, [sp, #0]
 8002104:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 8002108:	4621      	mov	r1, r4
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 800210a:	f022 0208 	bic.w	r2, r2, #8
 800210e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002112:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 8002116:	462a      	mov	r2, r5
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	9300      	str	r3, [sp, #0]
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 800211e:	480f      	ldr	r0, [pc, #60]	; (800215c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x8c>)
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8002120:	9b00      	ldr	r3, [sp, #0]
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 8002122:	f009 f9bb 	bl	800b49c <HAL_LTDC_SetAddress>
    __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 8002126:	6833      	ldr	r3, [r6, #0]
 8002128:	9501      	str	r5, [sp, #4]
 800212a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800212e:	f042 0208 	orr.w	r2, r2, #8
 8002132:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002136:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	9b01      	ldr	r3, [sp, #4]
}
 8002142:	b002      	add	sp, #8
 8002144:	bd70      	pop	{r4, r5, r6, pc}
 8002146:	bf00      	nop
 8002148:	08029987 	.word	0x08029987
 800214c:	080299bf 	.word	0x080299bf
 8002150:	08029942 	.word	0x08029942
 8002154:	20198156 	.word	0x20198156
 8002158:	20152e90 	.word	0x20152e90
 800215c:	20152ec0 	.word	0x20152ec0

08002160 <tx_low_power_enter>:
#ifdef TX_LOW_POWER
extern "C"
{

    void tx_low_power_enter()
    {
 8002160:	b508      	push	{r3, lr}
        // tgfx task going to sleep
        touchgfx::HAL::getInstance()->setMCUActive(false);
 8002162:	4b03      	ldr	r3, [pc, #12]	; (8002170 <tx_low_power_enter+0x10>)
 8002164:	2100      	movs	r1, #0
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	f014 fac8 	bl	80166fc <_ZN8touchgfx3HAL12setMCUActiveEb>
        __WFI();
 800216c:	bf30      	wfi
    }
 800216e:	bd08      	pop	{r3, pc}
 8002170:	20198158 	.word	0x20198158

08002174 <tx_low_power_exit>:
    void tx_low_power_exit()
    {

        // tgfx task waking up
        touchgfx::HAL::getInstance()->setMCUActive(true);
 8002174:	4b02      	ldr	r3, [pc, #8]	; (8002180 <tx_low_power_exit+0xc>)
 8002176:	2101      	movs	r1, #1
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	f014 babf 	b.w	80166fc <_ZN8touchgfx3HAL12setMCUActiveEb>
 800217e:	bf00      	nop
 8002180:	20198158 	.word	0x20198158

08002184 <_GLOBAL__sub_I_btnctrl>:
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <_GLOBAL__sub_I_btnctrl+0xc>)
 8002186:	4b03      	ldr	r3, [pc, #12]	; (8002194 <_GLOBAL__sub_I_btnctrl+0x10>)
 8002188:	6003      	str	r3, [r0, #0]
        init();
 800218a:	f7ff bdbc 	b.w	8001d06 <_ZN8touchgfx10KeySampler4initEv>
 800218e:	bf00      	nop
 8002190:	201530cc 	.word	0x201530cc
 8002194:	080297d8 	.word	0x080297d8

08002198 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    CHAR* pointer;

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 800219a:	2334      	movs	r3, #52	; 0x34
 800219c:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <_ZN8touchgfx10OSWrappers10initializeEv+0x70>)
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	491a      	ldr	r1, [pc, #104]	; (800220c <_ZN8touchgfx10OSWrappers10initializeEv+0x74>)
 80021a2:	2364      	movs	r3, #100	; 0x64
 80021a4:	481a      	ldr	r0, [pc, #104]	; (8002210 <_ZN8touchgfx10OSWrappers10initializeEv+0x78>)
 80021a6:	f012 fe43 	bl	8014e30 <_txe_byte_pool_create>
 80021aa:	4603      	mov	r3, r0
 80021ac:	b128      	cbz	r0, 80021ba <_ZN8touchgfx10OSWrappers10initializeEv+0x22>
                            OSWRAPPER_BYTE_POOL_SIZE) != TX_SUCCESS)
    {
        assert(0 && "Failed to create OSWrapper Pool memory!");
 80021ae:	2138      	movs	r1, #56	; 0x38
 80021b0:	4b18      	ldr	r3, [pc, #96]	; (8002214 <_ZN8touchgfx10OSWrappers10initializeEv+0x7c>)
 80021b2:	4a19      	ldr	r2, [pc, #100]	; (8002218 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)

    /* Allocate the vsync_q.  */
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
                         OSWRAPPER_QUEUE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
    {
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 80021b4:	4819      	ldr	r0, [pc, #100]	; (800221c <_ZN8touchgfx10OSWrappers10initializeEv+0x84>)
 80021b6:	f025 ff8f 	bl	80280d8 <__assert_func>
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 80021ba:	2204      	movs	r2, #4
 80021bc:	4814      	ldr	r0, [pc, #80]	; (8002210 <_ZN8touchgfx10OSWrappers10initializeEv+0x78>)
 80021be:	a903      	add	r1, sp, #12
 80021c0:	f012 fdc2 	bl	8014d48 <_txe_byte_allocate>
 80021c4:	b118      	cbz	r0, 80021ce <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 80021c6:	213f      	movs	r1, #63	; 0x3f
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <_ZN8touchgfx10OSWrappers10initializeEv+0x88>)
 80021ca:	4a13      	ldr	r2, [pc, #76]	; (8002218 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 80021cc:	e7f2      	b.n	80021b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }

    // Create a queue of length 1
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 80021ce:	2304      	movs	r3, #4
 80021d0:	2238      	movs	r2, #56	; 0x38
 80021d2:	4914      	ldr	r1, [pc, #80]	; (8002224 <_ZN8touchgfx10OSWrappers10initializeEv+0x8c>)
 80021d4:	e9cd 3200 	strd	r3, r2, [sp]
 80021d8:	4813      	ldr	r0, [pc, #76]	; (8002228 <_ZN8touchgfx10OSWrappers10initializeEv+0x90>)
 80021da:	2201      	movs	r2, #1
 80021dc:	9b03      	ldr	r3, [sp, #12]
 80021de:	f012 fec7 	bl	8014f70 <_txe_queue_create>
 80021e2:	b118      	cbz	r0, 80021ec <_ZN8touchgfx10OSWrappers10initializeEv+0x54>
                        pointer, OSWRAPPER_QUEUE_SIZE) != TX_SUCCESS)
    {
        assert(0 && "Failed to create Vsync Message Queue!");
 80021e4:	2146      	movs	r1, #70	; 0x46
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <_ZN8touchgfx10OSWrappers10initializeEv+0x94>)
 80021e8:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 80021ea:	e7e3      	b.n	80021b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }

    // Create the Framebuffer Semaphore (Binary)
    if (tx_semaphore_create(&frame_buffer_sem, (CHAR*) "FrameBuffer Semaphore", 1) != TX_SUCCESS)
 80021ec:	231c      	movs	r3, #28
 80021ee:	2201      	movs	r2, #1
 80021f0:	490f      	ldr	r1, [pc, #60]	; (8002230 <_ZN8touchgfx10OSWrappers10initializeEv+0x98>)
 80021f2:	4810      	ldr	r0, [pc, #64]	; (8002234 <_ZN8touchgfx10OSWrappers10initializeEv+0x9c>)
 80021f4:	f013 f800 	bl	80151f8 <_txe_semaphore_create>
 80021f8:	b118      	cbz	r0, 8002202 <_ZN8touchgfx10OSWrappers10initializeEv+0x6a>
    {
        assert(0 && "Failed to create FrameBuffer Semaphore!");
 80021fa:	214c      	movs	r1, #76	; 0x4c
 80021fc:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <_ZN8touchgfx10OSWrappers10initializeEv+0xa0>)
 80021fe:	4a06      	ldr	r2, [pc, #24]	; (8002218 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 8002200:	e7d8      	b.n	80021b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }
}
 8002202:	b005      	add	sp, #20
 8002204:	f85d fb04 	ldr.w	pc, [sp], #4
 8002208:	201530f0 	.word	0x201530f0
 800220c:	08029ae8 	.word	0x08029ae8
 8002210:	20153154 	.word	0x20153154
 8002214:	08029afc 	.word	0x08029afc
 8002218:	08029b2b 	.word	0x08029b2b
 800221c:	08029b5a 	.word	0x08029b5a
 8002220:	08029ba5 	.word	0x08029ba5
 8002224:	08029be3 	.word	0x08029be3
 8002228:	20153188 	.word	0x20153188
 800222c:	08029bf7 	.word	0x08029bf7
 8002230:	08029c24 	.word	0x08029c24
 8002234:	201530d4 	.word	0x201530d4
 8002238:	08029c3a 	.word	0x08029c3a

0800223c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800223c:	b508      	push	{r3, lr}
    if (tx_semaphore_get(&frame_buffer_sem, TX_WAIT_FOREVER) != TX_SUCCESS)
 800223e:	f04f 31ff 	mov.w	r1, #4294967295
 8002242:	4805      	ldr	r0, [pc, #20]	; (8002258 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x1c>)
 8002244:	f013 f86e 	bl	8015324 <_txe_semaphore_get>
 8002248:	b128      	cbz	r0, 8002256 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x1a>
    {
        assert(0 && "Failed to get FrameBuffer Semaphore!");
 800224a:	2157      	movs	r1, #87	; 0x57
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x20>)
 800224e:	4a04      	ldr	r2, [pc, #16]	; (8002260 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x24>)
 8002250:	4804      	ldr	r0, [pc, #16]	; (8002264 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 8002252:	f025 ff41 	bl	80280d8 <__assert_func>
    }
}
 8002256:	bd08      	pop	{r3, pc}
 8002258:	201530d4 	.word	0x201530d4
 800225c:	08029c69 	.word	0x08029c69
 8002260:	08029c95 	.word	0x08029c95
 8002264:	08029b5a 	.word	0x08029b5a

08002268 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    if (!frame_buffer_sem.tx_semaphore_count)
 8002268:	4806      	ldr	r0, [pc, #24]	; (8002284 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1c>)
{
 800226a:	b508      	push	{r3, lr}
    if (!frame_buffer_sem.tx_semaphore_count)
 800226c:	6883      	ldr	r3, [r0, #8]
 800226e:	b943      	cbnz	r3, 8002282 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1a>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 8002270:	f013 f89a 	bl	80153a8 <_txe_semaphore_put>
 8002274:	b128      	cbz	r0, 8002282 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1a>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 8002276:	2164      	movs	r1, #100	; 0x64
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x20>)
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x24>)
 800227c:	4804      	ldr	r0, [pc, #16]	; (8002290 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 800227e:	f025 ff2b 	bl	80280d8 <__assert_func>
        }
    }
}
 8002282:	bd08      	pop	{r3, pc}
 8002284:	201530d4 	.word	0x201530d4
 8002288:	08029cd2 	.word	0x08029cd2
 800228c:	08029cfe 	.word	0x08029cfe
 8002290:	08029b5a 	.word	0x08029b5a

08002294 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    if (tx_semaphore_get(&frame_buffer_sem, TX_NO_WAIT) != TX_SUCCESS)
 8002294:	2100      	movs	r1, #0
 8002296:	4801      	ldr	r0, [pc, #4]	; (800229c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x8>)
 8002298:	f013 b844 	b.w	8015324 <_txe_semaphore_get>
 800229c:	201530d4 	.word	0x201530d4

080022a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80022a0:	b538      	push	{r3, r4, r5, lr}
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80022a2:	f3ef 8510 	mrs	r5, PRIMASK
    int_posture = __get_interrupt_posture();

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80022a6:	b672      	cpsid	i
    TX_INTERRUPT_SAVE_AREA
    TX_DISABLE;
    _tx_thread_preempt_disable++;
 80022a8:	4c0c      	ldr	r4, [pc, #48]	; (80022dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
    if (!frame_buffer_sem.tx_semaphore_count)
 80022aa:	480d      	ldr	r0, [pc, #52]	; (80022e0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x40>)
    _tx_thread_preempt_disable++;
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	3301      	adds	r3, #1
 80022b0:	6023      	str	r3, [r4, #0]
    if (!frame_buffer_sem.tx_semaphore_count)
 80022b2:	6883      	ldr	r3, [r0, #8]
 80022b4:	b943      	cbnz	r3, 80022c8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 80022b6:	f013 f877 	bl	80153a8 <_txe_semaphore_put>
 80022ba:	b128      	cbz	r0, 80022c8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 80022bc:	218a      	movs	r1, #138	; 0x8a
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x44>)
 80022c0:	4a09      	ldr	r2, [pc, #36]	; (80022e8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x48>)
 80022c2:	480a      	ldr	r0, [pc, #40]	; (80022ec <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4c>)
 80022c4:	f025 ff08 	bl	80280d8 <__assert_func>
        }
    }
    _tx_thread_preempt_disable--;
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	6023      	str	r3, [r4, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80022ce:	f385 8810 	msr	PRIMASK, r5
    TX_RESTORE;
    _tx_thread_system_preempt_check();
}
 80022d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _tx_thread_system_preempt_check();
 80022d6:	f012 b821 	b.w	801431c <_tx_thread_system_preempt_check>
 80022da:	bf00      	nop
 80022dc:	20197bdc 	.word	0x20197bdc
 80022e0:	201530d4 	.word	0x201530d4
 80022e4:	08029cd2 	.word	0x08029cd2
 80022e8:	08029d3b 	.word	0x08029d3b
 80022ec:	08029b5a 	.word	0x08029b5a

080022f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
    UINT ret;

    // Send the message only if the queue is empty.
    // This call is from ISR, so no need to re-send
    // the message if not yet consumed by threads
    if (vsync_q.tx_queue_enqueued == 0)
 80022f0:	4807      	ldr	r0, [pc, #28]	; (8002310 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
{
 80022f2:	b508      	push	{r3, lr}
    if (vsync_q.tx_queue_enqueued == 0)
 80022f4:	6902      	ldr	r2, [r0, #16]
 80022f6:	b94a      	cbnz	r2, 800230c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>
    {
        // This is supposed to be called from Vsync Interrupt Handler
        // So wait_option should be equal to TX_NO_WAIT
        ret = tx_queue_send(&vsync_q, &dummy_msg, TX_NO_WAIT);
 80022f8:	4906      	ldr	r1, [pc, #24]	; (8002314 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x24>)
 80022fa:	f012 ff33 	bl	8015164 <_txe_queue_send>
        if (ret != TX_SUCCESS)
 80022fe:	b128      	cbz	r0, 800230c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>
        {
            assert(0 && "Failed to Signal Vsync!");
 8002300:	21a6      	movs	r1, #166	; 0xa6
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x28>)
 8002304:	4a05      	ldr	r2, [pc, #20]	; (800231c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>)
 8002306:	4806      	ldr	r0, [pc, #24]	; (8002320 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x30>)
 8002308:	f025 fee6 	bl	80280d8 <__assert_func>
        }
    }
}
 800230c:	bd08      	pop	{r3, pc}
 800230e:	bf00      	nop
 8002310:	20153188 	.word	0x20153188
 8002314:	20000004 	.word	0x20000004
 8002318:	08029d7f 	.word	0x08029d7f
 800231c:	08029d9e 	.word	0x08029d9e
 8002320:	08029b5a 	.word	0x08029b5a

08002324 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002324:	b508      	push	{r3, lr}
    UINT ret;

    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_NO_WAIT);
 8002326:	2200      	movs	r2, #0
 8002328:	490a      	ldr	r1, [pc, #40]	; (8002354 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 800232a:	480b      	ldr	r0, [pc, #44]	; (8002358 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 800232c:	f012 fed0 	bl	80150d0 <_txe_queue_receive>

    if ((ret == TX_SUCCESS) || (ret == TX_QUEUE_EMPTY))
 8002330:	b138      	cbz	r0, 8002342 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
 8002332:	280a      	cmp	r0, #10
 8002334:	d005      	beq.n	8002342 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
    }

    if (ret != TX_SUCCESS)
    {
        assert(0 && "Failed to Wait for Vsync!");
 8002336:	21c9      	movs	r1, #201	; 0xc9
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x38>)
 800233a:	4a09      	ldr	r2, [pc, #36]	; (8002360 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x3c>)
 800233c:	4809      	ldr	r0, [pc, #36]	; (8002364 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x40>)
 800233e:	f025 fecb 	bl	80280d8 <__assert_func>
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
 8002342:	f04f 32ff 	mov.w	r2, #4294967295
 8002346:	4903      	ldr	r1, [pc, #12]	; (8002354 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 8002348:	4803      	ldr	r0, [pc, #12]	; (8002358 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 800234a:	f012 fec1 	bl	80150d0 <_txe_queue_receive>
    if (ret != TX_SUCCESS)
 800234e:	2800      	cmp	r0, #0
 8002350:	d1f1      	bne.n	8002336 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x12>
    }
}
 8002352:	bd08      	pop	{r3, pc}
 8002354:	20000004 	.word	0x20000004
 8002358:	20153188 	.word	0x20153188
 800235c:	08029dce 	.word	0x08029dce
 8002360:	08029def 	.word	0x08029def
 8002364:	08029b5a 	.word	0x08029b5a

08002368 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8002368:	6803      	ldr	r3, [r0, #0]
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	4718      	bx	r3

0800236e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 800236e:	2001      	movs	r0, #1
 8002370:	4770      	bx	lr

08002372 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8002372:	6803      	ldr	r3, [r0, #0]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	4718      	bx	r3

08002378 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002378:	f240 30ef 	movw	r0, #1007	; 0x3ef
 800237c:	4770      	bx	lr
	...

08002380 <_ZN8STM32DMAD1Ev>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002380:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
STM32DMA::~STM32DMA()
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <_ZN8STM32DMAD1Ev+0x18>)
 8002386:	6003      	str	r3, [r0, #0]
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <_ZN8STM32DMAD1Ev+0x1c>)
 800238a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 800238e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002392:	f3bf 8f6f 	isb	sy
}
 8002396:	4770      	bx	lr
 8002398:	08029f7c 	.word	0x08029f7c
 800239c:	e000e100 	.word	0xe000e100

080023a0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80023a0:	b510      	push	{r4, lr}
 80023a2:	4604      	mov	r4, r0
}
 80023a4:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 80023a8:	f7ff ffea 	bl	8002380 <_ZN8STM32DMAD1Ev>
 80023ac:	4620      	mov	r0, r4
 80023ae:	f025 fe66 	bl	802807e <_ZdlPvj>
 80023b2:	4620      	mov	r0, r4
 80023b4:	bd10      	pop	{r4, pc}
	...

080023b8 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <_ZN8STM32DMA10initializeEv+0x40>)
{
 80023ba:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80023bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023c0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80023c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80023c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023cc:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80023d0:	9201      	str	r2, [sp, #4]
 80023d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80023d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80023da:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80023dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <_ZN8STM32DMA10initializeEv+0x44>)
 80023e6:	4a06      	ldr	r2, [pc, #24]	; (8002400 <_ZN8STM32DMA10initializeEv+0x48>)
 80023e8:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <_ZN8STM32DMA10initializeEv+0x4c>)
 80023f0:	60da      	str	r2, [r3, #12]
}
 80023f2:	b002      	add	sp, #8
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	46020c00 	.word	0x46020c00
 80023fc:	20152e30 	.word	0x20152e30
 8002400:	08002409 	.word	0x08002409
 8002404:	e000e100 	.word	0xe000e100

08002408 <DMA2D_XferCpltCallback>:
        return instance;
 8002408:	4b02      	ldr	r3, [pc, #8]	; (8002414 <DMA2D_XferCpltCallback+0xc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 800240e:	6803      	ldr	r3, [r0, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	4718      	bx	r3
 8002414:	20198158 	.word	0x20198158

08002418 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800241c:	2600      	movs	r6, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800241e:	4625      	mov	r5, r4
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <_ZN8STM32DMAC1Ev+0x30>)
 8002422:	300c      	adds	r0, #12
 8002424:	6060      	str	r0, [r4, #4]
 8002426:	7226      	strb	r6, [r4, #8]
 8002428:	7266      	strb	r6, [r4, #9]
 800242a:	f845 3b20 	str.w	r3, [r5], #32
 800242e:	2260      	movs	r2, #96	; 0x60
 8002430:	4629      	mov	r1, r5
 8002432:	f014 faa1 	bl	8016978 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002436:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 800243a:	60ee      	str	r6, [r5, #12]
 800243c:	3524      	adds	r5, #36	; 0x24
 800243e:	42ab      	cmp	r3, r5
 8002440:	d1fb      	bne.n	800243a <_ZN8STM32DMAC1Ev+0x22>
}
 8002442:	4620      	mov	r0, r4
 8002444:	bd70      	pop	{r4, r5, r6, pc}
 8002446:	bf00      	nop
 8002448:	08029f7c 	.word	0x08029f7c

0800244c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 800244c:	b508      	push	{r3, lr}
    switch (format)
 800244e:	290b      	cmp	r1, #11
 8002450:	d80b      	bhi.n	800246a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8002452:	e8df f001 	tbb	[pc, r1]
 8002456:	0612      	.short	0x0612
 8002458:	0a0a0a10 	.word	0x0a0a0a10
 800245c:	0808080a 	.word	0x0808080a
 8002460:	0808      	.short	0x0808
 8002462:	2001      	movs	r0, #1
}
 8002464:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002466:	2005      	movs	r0, #5
        break;
 8002468:	e7fc      	b.n	8002464 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 800246a:	2166      	movs	r1, #102	; 0x66
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002470:	4805      	ldr	r0, [pc, #20]	; (8002488 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8002472:	f025 fe31 	bl	80280d8 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002476:	2000      	movs	r0, #0
 8002478:	e7f4      	b.n	8002464 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800247a:	2002      	movs	r0, #2
    return dma2dColorMode;
 800247c:	e7f2      	b.n	8002464 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800247e:	bf00      	nop
 8002480:	08029e20 	.word	0x08029e20
 8002484:	08029e3b 	.word	0x08029e3b
 8002488:	08029e85 	.word	0x08029e85

0800248c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 800248c:	b508      	push	{r3, lr}
    switch (format)
 800248e:	290a      	cmp	r1, #10
 8002490:	d809      	bhi.n	80024a6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8002492:	e8df f001 	tbb	[pc, r1]
 8002496:	0610      	.short	0x0610
 8002498:	0808080e 	.word	0x0808080e
 800249c:	06060608 	.word	0x06060608
 80024a0:	06          	.byte	0x06
 80024a1:	00          	.byte	0x00
 80024a2:	2001      	movs	r0, #1
}
 80024a4:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 80024a6:	2187      	movs	r1, #135	; 0x87
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 80024ac:	4805      	ldr	r0, [pc, #20]	; (80024c4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 80024ae:	f025 fe13 	bl	80280d8 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80024b2:	2000      	movs	r0, #0
 80024b4:	e7f6      	b.n	80024a4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80024b6:	2002      	movs	r0, #2
    return dma2dColorMode;
 80024b8:	e7f4      	b.n	80024a4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 80024ba:	bf00      	nop
 80024bc:	08029e20 	.word	0x08029e20
 80024c0:	08029ece 	.word	0x08029ece
 80024c4:	08029e85 	.word	0x08029e85

080024c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80024c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80024cc:	7f4f      	ldrb	r7, [r1, #29]
{
 80024ce:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80024d0:	4639      	mov	r1, r7
{
 80024d2:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80024d4:	f7ff ffba 	bl	800244c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024d8:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80024dc:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024de:	4641      	mov	r1, r8
 80024e0:	4648      	mov	r0, r9
 80024e2:	f7ff ffb3 	bl	800244c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024e6:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024e8:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024ea:	4648      	mov	r0, r9
 80024ec:	f7ff ffce 	bl	800248c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024f0:	8aa1      	ldrh	r1, [r4, #20]
 80024f2:	8b62      	ldrh	r2, [r4, #26]
 80024f4:	4b42      	ldr	r3, [pc, #264]	; (8002600 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80024f6:	1a52      	subs	r2, r2, r1
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024fa:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80024fc:	8b22      	ldrh	r2, [r4, #24]
 80024fe:	1a52      	subs	r2, r2, r1
 8002500:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002502:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002504:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002506:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800250a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800250c:	6920      	ldr	r0, [r4, #16]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800250e:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002510:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002512:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002514:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002516:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 800251a:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800251c:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 8002520:	d026      	beq.n	8002570 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8002522:	d810      	bhi.n	8002546 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 8002524:	2920      	cmp	r1, #32
 8002526:	ea45 0402 	orr.w	r4, r5, r2
 800252a:	d061      	beq.n	80025f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 800252c:	2940      	cmp	r1, #64	; 0x40
 800252e:	d05f      	beq.n	80025f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8002530:	2904      	cmp	r1, #4
 8002532:	d05d      	beq.n	80025f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002534:	4b32      	ldr	r3, [pc, #200]	; (8002600 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002536:	432a      	orrs	r2, r5
 8002538:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800253c:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800253e:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002540:	d05a      	beq.n	80025f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002542:	4a30      	ldr	r2, [pc, #192]	; (8002604 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8002544:	e040      	b.n	80025c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002546:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800254a:	d007      	beq.n	800255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 800254c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002550:	d1f0      	bne.n	8002534 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002552:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002556:	f042 0209 	orr.w	r2, r2, #9
 800255a:	e003      	b.n	8002564 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800255c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002560:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002564:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8002566:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002568:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800256a:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800256c:	6158      	str	r0, [r3, #20]
 800256e:	e02a      	b.n	80025c6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002570:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002572:	432a      	orrs	r2, r5
 8002574:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002578:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800257a:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800257c:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800257e:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002582:	7822      	ldrb	r2, [r4, #0]
 8002584:	b142      	cbz	r2, 8002598 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002586:	2a01      	cmp	r2, #1
 8002588:	d021      	beq.n	80025ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800258a:	f240 1101 	movw	r1, #257	; 0x101
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8002590:	4a1e      	ldr	r2, [pc, #120]	; (800260c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002592:	481f      	ldr	r0, [pc, #124]	; (8002610 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002594:	f025 fda0 	bl	80280d8 <__assert_func>
            bool blend = true;
 8002598:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800259a:	69da      	ldr	r2, [r3, #28]
 800259c:	8861      	ldrh	r1, [r4, #2]
 800259e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80025a2:	3901      	subs	r1, #1
 80025a4:	f022 0210 	bic.w	r2, r2, #16
 80025a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025ac:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80025b0:	69da      	ldr	r2, [r3, #28]
 80025b2:	f042 0220 	orr.w	r2, r2, #32
 80025b6:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	0692      	lsls	r2, r2, #26
 80025bc:	d4fc      	bmi.n	80025b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80025be:	2210      	movs	r2, #16
 80025c0:	609a      	str	r2, [r3, #8]
            if (blend)
 80025c2:	2800      	cmp	r0, #0
 80025c4:	d0bd      	beq.n	8002542 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80025c6:	4a13      	ldr	r2, [pc, #76]	; (8002614 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80025c8:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 80025ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80025ce:	8862      	ldrh	r2, [r4, #2]
 80025d0:	69d9      	ldr	r1, [r3, #28]
 80025d2:	1e54      	subs	r4, r2, #1
 80025d4:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 80025d8:	f022 0210 	bic.w	r2, r2, #16
 80025dc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
                if (blitOp.alpha == 255)
 80025e0:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80025e4:	f042 0210 	orr.w	r2, r2, #16
                if (blitOp.alpha == 255)
 80025e8:	bf18      	it	ne
 80025ea:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80025ec:	61da      	str	r2, [r3, #28]
                break;
 80025ee:	e7de      	b.n	80025ae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80025f0:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 80025f4:	61dc      	str	r4, [r3, #28]
 80025f6:	e7b8      	b.n	800256a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80025f8:	f240 2201 	movw	r2, #513	; 0x201
 80025fc:	e7e4      	b.n	80025c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80025fe:	bf00      	nop
 8002600:	4002b000 	.word	0x4002b000
 8002604:	00010201 	.word	0x00010201
 8002608:	08029f19 	.word	0x08029f19
 800260c:	08029f33 	.word	0x08029f33
 8002610:	08029e85 	.word	0x08029e85
 8002614:	00020201 	.word	0x00020201

08002618 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002618:	b570      	push	{r4, r5, r6, lr}
 800261a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800261c:	7f89      	ldrb	r1, [r1, #30]
 800261e:	f7ff ff35 	bl	800248c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002622:	8aa5      	ldrh	r5, [r4, #20]
 8002624:	8ae1      	ldrh	r1, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002628:	ea41 4105 	orr.w	r1, r1, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800262c:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800262e:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002630:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002632:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002634:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002636:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002638:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800263a:	6826      	ldr	r6, [r4, #0]
 800263c:	68e5      	ldr	r5, [r4, #12]
 800263e:	2e08      	cmp	r6, #8
 8002640:	d10d      	bne.n	800265e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002642:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002644:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002646:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002648:	7f20      	ldrb	r0, [r4, #28]
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 800264c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002650:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002652:	4a08      	ldr	r2, [pc, #32]	; (8002674 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002654:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002656:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002658:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800265a:	601a      	str	r2, [r3, #0]
    }
}
 800265c:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800265e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002660:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002662:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002664:	4a04      	ldr	r2, [pc, #16]	; (8002678 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002666:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002668:	e7f7      	b.n	800265a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 800266a:	bf00      	nop
 800266c:	4002b000 	.word	0x4002b000
 8002670:	00010009 	.word	0x00010009
 8002674:	00020201 	.word	0x00020201
 8002678:	00030201 	.word	0x00030201

0800267c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 800267c:	2001      	movs	r0, #1
 800267e:	4770      	bx	lr

08002680 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002680:	200c      	movs	r0, #12
 8002682:	4770      	bx	lr

08002684 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002684:	230c      	movs	r3, #12
 8002686:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800268a:	3008      	adds	r0, #8
 800268c:	4770      	bx	lr

0800268e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800268e:	230c      	movs	r3, #12
 8002690:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002694:	3008      	adds	r0, #8
 8002696:	4770      	bx	lr

08002698 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002698:	2001      	movs	r0, #1
 800269a:	4770      	bx	lr

0800269c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800269c:	f246 3098 	movw	r0, #25496	; 0x6398
 80026a0:	4770      	bx	lr

080026a2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80026a2:	f246 3398 	movw	r3, #25496	; 0x6398
 80026a6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80026aa:	3008      	adds	r0, #8
 80026ac:	4770      	bx	lr

080026ae <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80026ae:	f246 3398 	movw	r3, #25496	; 0x6398
 80026b2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80026b6:	3008      	adds	r0, #8
 80026b8:	4770      	bx	lr

080026ba <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80026ba:	2001      	movs	r0, #1
 80026bc:	4770      	bx	lr

080026be <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80026be:	2010      	movs	r0, #16
 80026c0:	4770      	bx	lr

080026c2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80026c2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80026c6:	3008      	adds	r0, #8
 80026c8:	4770      	bx	lr

080026ca <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80026ca:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80026ce:	3008      	adds	r0, #8
 80026d0:	4770      	bx	lr

080026d2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 80026d2:	4608      	mov	r0, r1
 80026d4:	f000 bce0 	b.w	8003098 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

080026d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80026d8:	b510      	push	{r4, lr}
 80026da:	4604      	mov	r4, r0
 80026dc:	4b02      	ldr	r3, [pc, #8]	; (80026e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80026de:	6003      	str	r3, [r0, #0]
 80026e0:	f012 ff95 	bl	801560e <_ZN8touchgfx17AbstractPartitionD1Ev>
 80026e4:	4620      	mov	r0, r4
 80026e6:	bd10      	pop	{r4, pc}
 80026e8:	0802a034 	.word	0x0802a034

080026ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80026ec:	b510      	push	{r4, lr}
 80026ee:	4604      	mov	r4, r0
 80026f0:	f7ff fff2 	bl	80026d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80026f4:	4620      	mov	r0, r4
 80026f6:	2114      	movs	r1, #20
 80026f8:	f025 fcc1 	bl	802807e <_ZdlPvj>
 80026fc:	4620      	mov	r0, r4
 80026fe:	bd10      	pop	{r4, pc}

08002700 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002700:	b510      	push	{r4, lr}
 8002702:	4604      	mov	r4, r0
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002706:	6003      	str	r3, [r0, #0]
 8002708:	f012 ff81 	bl	801560e <_ZN8touchgfx17AbstractPartitionD1Ev>
 800270c:	4620      	mov	r0, r4
 800270e:	bd10      	pop	{r4, pc}
 8002710:	0802a000 	.word	0x0802a000

08002714 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002714:	b510      	push	{r4, lr}
 8002716:	4604      	mov	r4, r0
 8002718:	f7ff fff2 	bl	8002700 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800271c:	4620      	mov	r0, r4
 800271e:	f246 31a0 	movw	r1, #25504	; 0x63a0
 8002722:	f025 fcac 	bl	802807e <_ZdlPvj>
 8002726:	4620      	mov	r0, r4
 8002728:	bd10      	pop	{r4, pc}
	...

0800272c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800272c:	b510      	push	{r4, lr}
 800272e:	4604      	mov	r4, r0
 8002730:	4b02      	ldr	r3, [pc, #8]	; (800273c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002732:	6003      	str	r3, [r0, #0]
 8002734:	f012 ff6b 	bl	801560e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002738:	4620      	mov	r0, r4
 800273a:	bd10      	pop	{r4, pc}
 800273c:	08029fcc 	.word	0x08029fcc

08002740 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002740:	b510      	push	{r4, lr}
 8002742:	4604      	mov	r4, r0
 8002744:	f7ff fff2 	bl	800272c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002748:	4620      	mov	r0, r4
 800274a:	2118      	movs	r1, #24
 800274c:	f025 fc97 	bl	802807e <_ZdlPvj>
 8002750:	4620      	mov	r0, r4
 8002752:	bd10      	pop	{r4, pc}

08002754 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002754:	b510      	push	{r4, lr}
 8002756:	4604      	mov	r4, r0
 8002758:	4b08      	ldr	r3, [pc, #32]	; (800277c <_ZN12FrontendHeapD1Ev+0x28>)
 800275a:	6003      	str	r3, [r0, #0]
 800275c:	f500 40c7 	add.w	r0, r0, #25472	; 0x6380
 8002760:	304c      	adds	r0, #76	; 0x4c
 8002762:	f7ff ffb9 	bl	80026d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002766:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800276a:	f7ff ffc9 	bl	8002700 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800276e:	f104 0014 	add.w	r0, r4, #20
 8002772:	f7ff ffdb 	bl	800272c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002776:	4620      	mov	r0, r4
 8002778:	bd10      	pop	{r4, pc}
 800277a:	bf00      	nop
 800277c:	0802a068 	.word	0x0802a068

08002780 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002780:	b508      	push	{r3, lr}
 8002782:	4802      	ldr	r0, [pc, #8]	; (800278c <__tcf_0+0xc>)
 8002784:	f7ff ffe6 	bl	8002754 <_ZN12FrontendHeapD1Ev>
 8002788:	bd08      	pop	{r3, pc}
 800278a:	bf00      	nop
 800278c:	201531c4 	.word	0x201531c4

08002790 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002790:	b510      	push	{r4, lr}
 8002792:	4604      	mov	r4, r0
 8002794:	f7ff ffde 	bl	8002754 <_ZN12FrontendHeapD1Ev>
 8002798:	4620      	mov	r0, r4
 800279a:	f246 5140 	movw	r1, #25920	; 0x6540
 800279e:	f025 fc6e 	bl	802807e <_ZdlPvj>
 80027a2:	4620      	mov	r0, r4
 80027a4:	bd10      	pop	{r4, pc}
	...

080027a8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 480);

void touchgfx_init()
{
 80027a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80027ac:	f000 fb14 	bl	8002dd8 <_ZN14BitmapDatabase11getInstanceEv>
 80027b0:	2400      	movs	r4, #0
 80027b2:	4605      	mov	r5, r0
 80027b4:	f000 fb14 	bl	8002de0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80027b8:	4623      	mov	r3, r4
 80027ba:	4601      	mov	r1, r0
 80027bc:	4622      	mov	r2, r4
 80027be:	4628      	mov	r0, r5
 80027c0:	9400      	str	r4, [sp, #0]
 80027c2:	f017 fd75 	bl	801a2b0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80027c6:	4b27      	ldr	r3, [pc, #156]	; (8002864 <touchgfx_init+0xbc>)
 80027c8:	4a27      	ldr	r2, [pc, #156]	; (8002868 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80027ca:	4620      	mov	r0, r4
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	f000 fe61 	bl	8003494 <_ZN8touchgfx5Texts11setLanguageEt>

    display.setFrameBufferFormat(Bitmap::RGB888);
 80027d2:	2101      	movs	r1, #1
 80027d4:	4825      	ldr	r0, [pc, #148]	; (800286c <touchgfx_init+0xc4>)
 80027d6:	f01e fce7 	bl	80211a8 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE>

    FontManager::setFontProvider(&fontProvider);
 80027da:	4825      	ldr	r0, [pc, #148]	; (8002870 <touchgfx_init+0xc8>)
 80027dc:	f017 fcd0 	bl	801a180 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 80027e0:	4d24      	ldr	r5, [pc, #144]	; (8002874 <touchgfx_init+0xcc>)
 80027e2:	e8d5 3f8f 	ldab	r3, [r5]
 80027e6:	07db      	lsls	r3, r3, #31
 80027e8:	d436      	bmi.n	8002858 <touchgfx_init+0xb0>
 80027ea:	4628      	mov	r0, r5
 80027ec:	f025 fc49 	bl	8028082 <__cxa_guard_acquire>
 80027f0:	b390      	cbz	r0, 8002858 <touchgfx_init+0xb0>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80027f2:	4c21      	ldr	r4, [pc, #132]	; (8002878 <touchgfx_init+0xd0>)
 80027f4:	4f21      	ldr	r7, [pc, #132]	; (800287c <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80027f6:	4b22      	ldr	r3, [pc, #136]	; (8002880 <touchgfx_init+0xd8>)
 80027f8:	f107 0618 	add.w	r6, r7, #24
 80027fc:	f104 0014 	add.w	r0, r4, #20
 8002800:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002804:	6023      	str	r3, [r4, #0]
 8002806:	6060      	str	r0, [r4, #4]
 8002808:	f8c4 8008 	str.w	r8, [r4, #8]
 800280c:	60e7      	str	r7, [r4, #12]
 800280e:	6126      	str	r6, [r4, #16]
 8002810:	f012 fefe 	bl	8015610 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <touchgfx_init+0xdc>)
 8002816:	4640      	mov	r0, r8
 8002818:	6163      	str	r3, [r4, #20]
 800281a:	f012 fef9 	bl	8015610 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <touchgfx_init+0xe0>)
 8002820:	4638      	mov	r0, r7
 8002822:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002824:	f012 fef4 	bl	8015610 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002828:	4a18      	ldr	r2, [pc, #96]	; (800288c <touchgfx_init+0xe4>)
 800282a:	f504 43c0 	add.w	r3, r4, #24576	; 0x6000
 800282e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8002832:	f503 7078 	add.w	r0, r3, #992	; 0x3e0
 8002836:	f000 fe9b 	bl	8003570 <_ZN5ModelC1Ev>
 800283a:	4622      	mov	r2, r4
 800283c:	f107 0114 	add.w	r1, r7, #20
 8002840:	4630      	mov	r0, r6
 8002842:	f000 fe8b 	bl	800355c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002846:	4630      	mov	r0, r6
 8002848:	f000 fc26 	bl	8003098 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800284c:	4810      	ldr	r0, [pc, #64]	; (8002890 <touchgfx_init+0xe8>)
 800284e:	f025 fc61 	bl	8028114 <atexit>
 8002852:	4628      	mov	r0, r5
 8002854:	f025 fc21 	bl	802809a <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002858:	480e      	ldr	r0, [pc, #56]	; (8002894 <touchgfx_init+0xec>)
}
 800285a:	b002      	add	sp, #8
 800285c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002860:	f7ff bb44 	b.w	8001eec <_ZN11TouchGFXHAL10initializeEv>
 8002864:	201981b4 	.word	0x201981b4
 8002868:	2015a55c 	.word	0x2015a55c
 800286c:	2015a560 	.word	0x2015a560
 8002870:	20000008 	.word	0x20000008
 8002874:	201531c0 	.word	0x201531c0
 8002878:	201531c4 	.word	0x201531c4
 800287c:	20159590 	.word	0x20159590
 8002880:	0802a068 	.word	0x0802a068
 8002884:	08029fcc 	.word	0x08029fcc
 8002888:	0802a000 	.word	0x0802a000
 800288c:	0802a034 	.word	0x0802a034
 8002890:	08002781 	.word	0x08002781
 8002894:	2015a4a8 	.word	0x2015a4a8

08002898 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8002898:	b508      	push	{r3, lr}
    nema_init();
 800289a:	f018 f983 	bl	801aba4 <nema_init>
    nema_vg_init(480, 480);
}
 800289e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nema_vg_init(480, 480);
 80028a2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80028a6:	4608      	mov	r0, r1
 80028a8:	f019 ba3e 	b.w	801bd28 <nema_vg_init>

080028ac <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80028ac:	4801      	ldr	r0, [pc, #4]	; (80028b4 <touchgfx_taskEntry+0x8>)
 80028ae:	f013 b9be 	b.w	8015c2e <_ZN8touchgfx3HAL9taskEntryEv>
 80028b2:	bf00      	nop
 80028b4:	2015a4a8 	.word	0x2015a4a8

080028b8 <_GLOBAL__sub_I_touchgfx_init>:
}
 80028b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
static STM32DMA dma;
 80028ba:	4911      	ldr	r1, [pc, #68]	; (8002900 <_GLOBAL__sub_I_touchgfx_init+0x48>)
{
public:

    STM32TouchController() {}
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80028be:	4d12      	ldr	r5, [pc, #72]	; (8002908 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 80028c0:	4608      	mov	r0, r1
 80028c2:	602b      	str	r3, [r5, #0]
 80028c4:	f7ff fda8 	bl	8002418 <_ZN8STM32DMAC1Ev>
static LCDGPU2D display;
 80028c8:	4a10      	ldr	r2, [pc, #64]	; (800290c <_GLOBAL__sub_I_touchgfx_init+0x54>)
        touchgfx::HALGPU2D(dma, display, tc, width, height)
 80028ca:	4c11      	ldr	r4, [pc, #68]	; (8002910 <_GLOBAL__sub_I_touchgfx_init+0x58>)
 80028cc:	4610      	mov	r0, r2
 80028ce:	f01e fc5f 	bl	8021190 <_ZN8touchgfx8LCDGPU2DC1Ev>
 80028d2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80028d6:	4620      	mov	r0, r4
 80028d8:	e9cd 3300 	strd	r3, r3, [sp]
 80028dc:	4a0b      	ldr	r2, [pc, #44]	; (800290c <_GLOBAL__sub_I_touchgfx_init+0x54>)
 80028de:	462b      	mov	r3, r5
 80028e0:	4907      	ldr	r1, [pc, #28]	; (8002900 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80028e2:	f01a fc13 	bl	801d10c <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <_GLOBAL__sub_I_touchgfx_init+0x5c>)
 80028e8:	6023      	str	r3, [r4, #0]
          cc_in(0)
 80028ea:	2300      	movs	r3, #0
 80028ec:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80028f0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <_GLOBAL__sub_I_touchgfx_init+0x60>)
 80028f6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
 80028fa:	b003      	add	sp, #12
 80028fc:	bd30      	pop	{r4, r5, pc}
 80028fe:	bf00      	nop
 8002900:	20159708 	.word	0x20159708
 8002904:	0802988c 	.word	0x0802988c
 8002908:	20159704 	.word	0x20159704
 800290c:	2015a560 	.word	0x2015a560
 8002910:	2015a4a8 	.word	0x2015a4a8
 8002914:	08029a18 	.word	0x08029a18
 8002918:	080297b0 	.word	0x080297b0

0800291c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800291c:	4801      	ldr	r0, [pc, #4]	; (8002924 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800291e:	f7ff bd2f 	b.w	8002380 <_ZN8STM32DMAD1Ev>
 8002922:	bf00      	nop
 8002924:	20159708 	.word	0x20159708

08002928 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002928:	2290      	movs	r2, #144	; 0x90
 800292a:	4b04      	ldr	r3, [pc, #16]	; (800293c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x14>)
 800292c:	f883 2376 	strb.w	r2, [r3, #886]	; 0x376
 8002930:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
 8002934:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
    NVIC_SetPriority(GPU2D_IRQn, 9);
}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000e100 	.word	0xe000e100

08002940 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(GPU2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002940:	4a09      	ldr	r2, [pc, #36]	; (8002968 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002942:	490a      	ldr	r1, [pc, #40]	; (800296c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002944:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002946:	480a      	ldr	r0, [pc, #40]	; (8002970 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002948:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800294c:	3b01      	subs	r3, #1
 800294e:	b29b      	uxth	r3, r3
 8002950:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002952:	6911      	ldr	r1, [r2, #16]
 8002954:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002958:	3901      	subs	r1, #1
 800295a:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800295e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002966:	4770      	bx	lr
 8002968:	40016800 	.word	0x40016800
 800296c:	2015a570 	.word	0x2015a570
 8002970:	2015a56e 	.word	0x2015a56e

08002974 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HALGPU2D::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002974:	4b01      	ldr	r3, [pc, #4]	; (800297c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002976:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 800297a:	4770      	bx	lr
 800297c:	40016800 	.word	0x40016800

08002980 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002980:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002982:	4b02      	ldr	r3, [pc, #8]	; (800298c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 8002984:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002988:	625a      	str	r2, [r3, #36]	; 0x24
}
 800298a:	4770      	bx	lr
 800298c:	40016800 	.word	0x40016800

08002990 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002990:	b570      	push	{r4, r5, r6, lr}
 8002992:	4604      	mov	r4, r0
    HALGPU2D::initialize(8192);
 8002994:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002998:	f01a fc20 	bl	801d1dc <_ZN8touchgfx8HALGPU2D10initializeEi>
    registerEventListener(*(Application::getInstance()));
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80029a0:	f015 f852 	bl	8017a48 <_ZN8touchgfx11Application11getInstanceEv>
 80029a4:	4601      	mov	r1, r0
 80029a6:	4620      	mov	r0, r4
 80029a8:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	4620      	mov	r0, r4
 80029ae:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80029b2:	4a03      	ldr	r2, [pc, #12]	; (80029c0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 80029b4:	46ac      	mov	ip, r5
}
 80029b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80029ba:	2300      	movs	r3, #0
 80029bc:	4901      	ldr	r1, [pc, #4]	; (80029c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x34>)
 80029be:	4760      	bx	ip
 80029c0:	200a8d2c 	.word	0x200a8d2c
 80029c4:	2000012c 	.word	0x2000012c

080029c8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HALGPU2D::beginFrame();
 80029c8:	f01a bb50 	b.w	801d06c <_ZN8touchgfx8HALGPU2D10beginFrameEv>

080029cc <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 80029cc:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 80029d0:	b113      	cbz	r3, 80029d8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 80029d2:	2201      	movs	r2, #1
 80029d4:	4b01      	ldr	r3, [pc, #4]	; (80029dc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 80029d6:	701a      	strb	r2, [r3, #0]
    HALGPU2D::endFrame();
 80029d8:	f01a bb5a 	b.w	801d090 <_ZN8touchgfx8HALGPU2D8endFrameEv>
 80029dc:	2015a56c 	.word	0x2015a56c

080029e0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HALGPU2D::flushFrameBuffer(rect);
 80029e0:	f013 b8c2 	b.w	8015b68 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080029e4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HALGPU2D::blockCopy(dest, src, numBytes);
 80029e4:	f013 ba2b 	b.w	8015e3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080029e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80029e8:	b570      	push	{r4, r5, r6, lr}
 80029ea:	460d      	mov	r5, r1
 80029ec:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80029ee:	b935      	cbnz	r5, 80029fe <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 80029f0:	f240 21d2 	movw	r1, #722	; 0x2d2
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80029f6:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80029f8:	4809      	ldr	r0, [pc, #36]	; (8002a20 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80029fa:	f025 fb6d 	bl	80280d8 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80029fe:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
    }
 8002a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8002a06:	3a00      	subs	r2, #0
 8002a08:	bf18      	it	ne
 8002a0a:	2201      	movne	r2, #1
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8002a0e:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8002a10:	6803      	ldr	r3, [r0, #0]
 8002a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a16:	4718      	bx	r3
 8002a18:	08029987 	.word	0x08029987
 8002a1c:	080299bf 	.word	0x080299bf
 8002a20:	08029942 	.word	0x08029942
 8002a24:	20198156 	.word	0x20198156

08002a28 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x30>)
 8002a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 8002a32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	2280      	movs	r2, #128	; 0x80
 8002a3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __ASM volatile ("dsb 0xF":::"memory");
 8002a40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	2210      	movs	r2, #16
 8002a4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __ASM volatile ("dsb 0xF":::"memory");
 8002a4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a52:	f3bf 8f6f 	isb	sy
}
 8002a56:	4770      	bx	lr
 8002a58:	e000e100 	.word	0xe000e100

08002a5c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x14>)
 8002a62:	60da      	str	r2, [r3, #12]
 8002a64:	2280      	movs	r2, #128	; 0x80
 8002a66:	611a      	str	r2, [r3, #16]
 8002a68:	2210      	movs	r2, #16
 8002a6a:	611a      	str	r2, [r3, #16]
}
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000e100 	.word	0xe000e100

08002a74 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8002a74:	b510      	push	{r4, lr}
        return instance;
 8002a76:	4c14      	ldr	r4, [pc, #80]	; (8002ac8 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	b323      	cbz	r3, 8002ac6 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <HAL_LTDC_LineEventCallback+0x58>)
 8002a7e:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <HAL_LTDC_LineEventCallback+0x5c>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	8811      	ldrh	r1, [r2, #0]
 8002a84:	428b      	cmp	r3, r1
 8002a86:	d113      	bne.n	8002ab0 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_LTDC_LineEventCallback+0x60>)
 8002a8a:	8819      	ldrh	r1, [r3, #0]
 8002a8c:	f008 fd3c 	bl	800b508 <HAL_LTDC_ProgramLineEvent>
 8002a90:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8002a92:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8002a96:	3301      	adds	r3, #1
 8002a98:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8002a9c:	f7ff fc28 	bl	80022f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8002aa0:	6820      	ldr	r0, [r4, #0]
 8002aa2:	f013 fe11 	bl	80166c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8002aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7ff b9aa 	b.w	8001e04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002ab0:	f008 fd2a 	bl	800b508 <HAL_LTDC_ProgramLineEvent>
        return instance;
 8002ab4:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8002ab6:	6803      	ldr	r3, [r0, #0]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	4798      	blx	r3
    }
 8002abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7ff b9bb 	b.w	8001e3c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 8002ac6:	bd10      	pop	{r4, pc}
 8002ac8:	20198158 	.word	0x20198158
 8002acc:	40016800 	.word	0x40016800
 8002ad0:	2015a570 	.word	0x2015a570
 8002ad4:	2015a56e 	.word	0x2015a56e

08002ad8 <HAL_GPU2D_CommandListCpltCallback>:
#if (USE_HAL_GPU2D_REGISTER_CALLBACKS == 1)
static void GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hgpu2d);

    last_cl_id = CmdListID;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <HAL_GPU2D_CommandListCpltCallback+0x20>)
 8002ae6:	6013      	str	r3, [r2, #0]

    /* Return a token back to a semaphore */
    tx_semaphore_put(&nema_irq_sem);
 8002ae8:	4804      	ldr	r0, [pc, #16]	; (8002afc <HAL_GPU2D_CommandListCpltCallback+0x24>)
 8002aea:	f012 fc5d 	bl	80153a8 <_txe_semaphore_put>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	2000000c 	.word	0x2000000c
 8002afc:	20196490 	.word	0x20196490

08002b00 <nema_sys_init>:

int32_t nema_sys_init(void)
{
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af02      	add	r7, sp, #8
    int error_code = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
    /* Register Command List Comlete Callback */
    HAL_GPU2D_RegisterCommandListCpltCallback(&hgpu2d, GPU2D_CommandListCpltCallback);
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Create IRQ semaphore */
    error_code = tx_semaphore_create(&nema_irq_sem, "nema sema irq", 0);
 8002b0a:	231c      	movs	r3, #28
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4924      	ldr	r1, [pc, #144]	; (8002ba0 <nema_sys_init+0xa0>)
 8002b10:	4824      	ldr	r0, [pc, #144]	; (8002ba4 <nema_sys_init+0xa4>)
 8002b12:	f012 fb71 	bl	80151f8 <_txe_semaphore_create>
 8002b16:	4603      	mov	r3, r0
 8002b18:	617b      	str	r3, [r7, #20]
    assert(error_code == TX_SUCCESS);
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <nema_sys_init+0x2c>
 8002b20:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <nema_sys_init+0xa8>)
 8002b22:	4a22      	ldr	r2, [pc, #136]	; (8002bac <nema_sys_init+0xac>)
 8002b24:	2150      	movs	r1, #80	; 0x50
 8002b26:	4822      	ldr	r0, [pc, #136]	; (8002bb0 <nema_sys_init+0xb0>)
 8002b28:	f025 fad6 	bl	80280d8 <__assert_func>

    /* Initialise Mem Space */
    error_code = tsi_malloc_init_pool(0, (void*)nemagfx_pool_mem, (uintptr_t)nemagfx_pool_mem, NEMAGFX_BYTE_POOL_SIZE, 1);
 8002b2c:	4a21      	ldr	r2, [pc, #132]	; (8002bb4 <nema_sys_init+0xb4>)
 8002b2e:	2301      	movs	r3, #1
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <nema_sys_init+0xb8>)
 8002b34:	491f      	ldr	r1, [pc, #124]	; (8002bb4 <nema_sys_init+0xb4>)
 8002b36:	2000      	movs	r0, #0
 8002b38:	f019 fa7c 	bl	801c034 <tsi_malloc_init_pool>
 8002b3c:	6178      	str	r0, [r7, #20]
    assert(error_code == 0);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <nema_sys_init+0x50>
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <nema_sys_init+0xbc>)
 8002b46:	4a19      	ldr	r2, [pc, #100]	; (8002bac <nema_sys_init+0xac>)
 8002b48:	2154      	movs	r1, #84	; 0x54
 8002b4a:	4819      	ldr	r0, [pc, #100]	; (8002bb0 <nema_sys_init+0xb0>)
 8002b4c:	f025 fac4 	bl	80280d8 <__assert_func>

    /* Allocate ring_buffer memory */
    ring_buffer_str.bo = nema_buffer_create(RING_SIZE);
 8002b50:	4c1b      	ldr	r4, [pc, #108]	; (8002bc0 <nema_sys_init+0xc0>)
 8002b52:	463b      	mov	r3, r7
 8002b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 f891 	bl	8002c80 <nema_buffer_create>
 8002b5e:	463b      	mov	r3, r7
 8002b60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    assert(ring_buffer_str.bo.base_virt);
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <nema_sys_init+0xc0>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d105      	bne.n	8002b7a <nema_sys_init+0x7a>
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <nema_sys_init+0xc4>)
 8002b70:	4a0e      	ldr	r2, [pc, #56]	; (8002bac <nema_sys_init+0xac>)
 8002b72:	2158      	movs	r1, #88	; 0x58
 8002b74:	480e      	ldr	r0, [pc, #56]	; (8002bb0 <nema_sys_init+0xb0>)
 8002b76:	f025 faaf 	bl	80280d8 <__assert_func>

    /* Initialize Ring Buffer */
    error_code = nema_rb_init(&ring_buffer_str, 1);
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4810      	ldr	r0, [pc, #64]	; (8002bc0 <nema_sys_init+0xc0>)
 8002b7e:	f017 fdd3 	bl	801a728 <nema_rb_init>
 8002b82:	6178      	str	r0, [r7, #20]
    if (error_code < 0)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	da01      	bge.n	8002b8e <nema_sys_init+0x8e>
    {
        return error_code;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	e003      	b.n	8002b96 <nema_sys_init+0x96>
    }

    /* Reset last_cl_id counter */
    last_cl_id = 0;
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <nema_sys_init+0xc8>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

    return error_code;
 8002b94:	697b      	ldr	r3, [r7, #20]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	08029658 	.word	0x08029658
 8002ba4:	20196490 	.word	0x20196490
 8002ba8:	08029668 	.word	0x08029668
 8002bac:	0802a074 	.word	0x0802a074
 8002bb0:	08029684 	.word	0x08029684
 8002bb4:	2015a578 	.word	0x2015a578
 8002bb8:	0003bf00 	.word	0x0003bf00
 8002bbc:	080296cc 	.word	0x080296cc
 8002bc0:	20196478 	.word	0x20196478
 8002bc4:	080296dc 	.word	0x080296dc
 8002bc8:	2000000c 	.word	0x2000000c

08002bcc <nema_reg_read>:

uint32_t nema_reg_read(uint32_t reg)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
    return HAL_GPU2D_ReadRegister(&hgpu2d, reg);
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4804      	ldr	r0, [pc, #16]	; (8002be8 <nema_reg_read+0x1c>)
 8002bd8:	f007 fa2b 	bl	800a032 <HAL_GPU2D_ReadRegister>
 8002bdc:	4603      	mov	r3, r0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20152eb4 	.word	0x20152eb4

08002bec <nema_reg_write>:

void nema_reg_write(uint32_t reg, uint32_t value)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
    HAL_GPU2D_WriteRegister(&hgpu2d, reg, value);
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4803      	ldr	r0, [pc, #12]	; (8002c08 <nema_reg_write+0x1c>)
 8002bfc:	f007 fa2b 	bl	800a056 <HAL_GPU2D_WriteRegister>
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20152eb4 	.word	0x20152eb4

08002c0c <nema_wait_irq>:

int nema_wait_irq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
    /* Wait indefinitely for a free semaphore */
    tx_semaphore_get(&nema_irq_sem, TX_WAIT_FOREVER);
 8002c10:	f04f 31ff 	mov.w	r1, #4294967295
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <nema_wait_irq+0x14>)
 8002c16:	f012 fb85 	bl	8015324 <_txe_semaphore_get>

    return 0;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20196490 	.word	0x20196490

08002c24 <nema_wait_irq_cl>:

int nema_wait_irq_cl(int cl_id)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
    while (last_cl_id < cl_id)
 8002c2c:	e001      	b.n	8002c32 <nema_wait_irq_cl+0xe>
    {
        (void)nema_wait_irq();
 8002c2e:	f7ff ffed 	bl	8002c0c <nema_wait_irq>
    while (last_cl_id < cl_id)
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <nema_wait_irq_cl+0x24>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	dcf8      	bgt.n	8002c2e <nema_wait_irq_cl+0xa>
    }

    return 0;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	2000000c 	.word	0x2000000c

08002c4c <nema_host_free>:

    return 0;
}

void nema_host_free(void *ptr)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
    tsi_free(ptr);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f019 fa55 	bl	801c104 <tsi_free>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <nema_host_malloc>:

void *nema_host_malloc(unsigned size)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
    return tsi_malloc(size);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f019 fa08 	bl	801c084 <tsi_malloc_pool>
 8002c74:	4603      	mov	r3, r0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <nema_buffer_create>:

nema_buffer_t nema_buffer_create(int size)
{
 8002c80:	b590      	push	{r4, r7, lr}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
    nema_buffer_t bo;
    memset(&bo, 0, sizeof(bo));
 8002c8a:	f107 0308 	add.w	r3, r7, #8
 8002c8e:	2210      	movs	r2, #16
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f025 faab 	bl	80281ee <memset>
    bo.base_virt = tsi_malloc(size);
 8002c98:	6839      	ldr	r1, [r7, #0]
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f019 f9f2 	bl	801c084 <tsi_malloc_pool>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	613b      	str	r3, [r7, #16]
    bo.base_phys = (uint32_t)bo.base_virt;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	617b      	str	r3, [r7, #20]
    bo.size      = size;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	60bb      	str	r3, [r7, #8]
    assert(bo.base_virt != 0 && "Unable to allocate memory in nema_buffer_create");
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <nema_buffer_create+0x3e>
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <nema_buffer_create+0x54>)
 8002cb4:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <nema_buffer_create+0x58>)
 8002cb6:	219e      	movs	r1, #158	; 0x9e
 8002cb8:	4808      	ldr	r0, [pc, #32]	; (8002cdc <nema_buffer_create+0x5c>)
 8002cba:	f025 fa0d 	bl	80280d8 <__assert_func>

    return bo;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	461c      	mov	r4, r3
 8002cc2:	f107 0308 	add.w	r3, r7, #8
 8002cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd90      	pop	{r4, r7, pc}
 8002cd4:	080296fc 	.word	0x080296fc
 8002cd8:	0802a084 	.word	0x0802a084
 8002cdc:	08029684 	.word	0x08029684

08002ce0 <nema_buffer_create_pool>:

nema_buffer_t nema_buffer_create_pool(int pool, int size)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(pool);

    return nema_buffer_create(size);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ffc5 	bl	8002c80 <nema_buffer_create>
}
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <nema_buffer_map>:

void *nema_buffer_map(nema_buffer_t *bo)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
    return bo->base_virt;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <nema_buffer_destroy>:
    /* Prevent unused argument(s) compilation warning */
    UNUSED(bo);
}

void nema_buffer_destroy(nema_buffer_t *bo)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
    if (bo->fd == -1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d26:	d012      	beq.n	8002d4e <nema_buffer_destroy+0x38>
    {
        return; /* Buffer weren't allocated! */
    }

    tsi_free(bo->base_virt);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f019 f9e9 	bl	801c104 <tsi_free>

    bo->base_virt = (void *)0;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
    bo->base_phys = 0;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
    bo->size      = 0;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
    bo->fd        = -1; /* Buffer not allocated */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4a:	605a      	str	r2, [r3, #4]
 8002d4c:	e000      	b.n	8002d50 <nema_buffer_destroy+0x3a>
        return; /* Buffer weren't allocated! */
 8002d4e:	bf00      	nop
}
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <nema_buffer_flush>:
{
    return bo->base_phys;
}

void nema_buffer_flush(nema_buffer_t * bo)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(bo);
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <nema_mutex_lock>:

int nema_mutex_lock(int mutex_id)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
    int retval = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
/* USER CODE BEGIN nema_mutex_lock */
    /* Prevent unused argument(s) compilation warning */
    UNUSED(mutex_id);
/* USER CODE END nema_mutex_lock */

    return retval;
 8002d76:	68fb      	ldr	r3, [r7, #12]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <nema_mutex_unlock>:

int nema_mutex_unlock(int mutex_id)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
    int retval = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
/* USER CODE BEGIN nema_mutex_unlock */
    /* Prevent unused argument(s) compilation warning */
    UNUSED(mutex_id);
/* USER CODE END nema_mutex_unlock */

    return retval;
 8002d90:	68fb      	ldr	r3, [r7, #12]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002d9e:	4770      	bx	lr

08002da0 <_ZN23ApplicationFontProviderD0Ev>:
 8002da0:	b510      	push	{r4, lr}
 8002da2:	4604      	mov	r4, r0
 8002da4:	2104      	movs	r1, #4
 8002da6:	f025 f96a 	bl	802807e <_ZdlPvj>
 8002daa:	4620      	mov	r0, r4
 8002dac:	bd10      	pop	{r4, pc}

08002dae <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8002dae:	2901      	cmp	r1, #1
{
 8002db0:	b508      	push	{r3, lr}
    switch (typography)
 8002db2:	d006      	beq.n	8002dc2 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8002db4:	2902      	cmp	r1, #2
 8002db6:	d008      	beq.n	8002dca <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8002db8:	b959      	cbnz	r1, 8002dd2 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002dba:	f000 fba9 	bl	8003510 <_ZN17TypedTextDatabase8getFontsEv>
 8002dbe:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8002dc0:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002dc2:	f000 fba5 	bl	8003510 <_ZN17TypedTextDatabase8getFontsEv>
 8002dc6:	6840      	ldr	r0, [r0, #4]
 8002dc8:	e7fa      	b.n	8002dc0 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002dca:	f000 fba1 	bl	8003510 <_ZN17TypedTextDatabase8getFontsEv>
 8002dce:	6880      	ldr	r0, [r0, #8]
 8002dd0:	e7f6      	b.n	8002dc0 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	e7f4      	b.n	8002dc0 <_ZN23ApplicationFontProvider7getFontEt+0x12>
	...

08002dd8 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002dd8:	4800      	ldr	r0, [pc, #0]	; (8002ddc <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002dda:	4770      	bx	lr
 8002ddc:	0802a0ac 	.word	0x0802a0ac

08002de0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002de0:	2001      	movs	r0, #1
 8002de2:	4770      	bx	lr

08002de4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002de4:	b513      	push	{r0, r1, r4, lr}
 8002de6:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8002de8:	b151      	cbz	r1, 8002e00 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002dea:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 8002dec:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002dee:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002df2:	aa01      	add	r2, sp, #4
 8002df4:	689c      	ldr	r4, [r3, #8]
 8002df6:	f10d 0303 	add.w	r3, sp, #3
 8002dfa:	47a0      	blx	r4
        return glyph;
    }
 8002dfc:	b002      	add	sp, #8
 8002dfe:	bd10      	pop	{r4, pc}
            return 0;
 8002e00:	4608      	mov	r0, r1
 8002e02:	e7fb      	b.n	8002dfc <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002e04 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002e04:	89c0      	ldrh	r0, [r0, #14]
 8002e06:	4770      	bx	lr

08002e08 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002e08:	8a00      	ldrh	r0, [r0, #16]
 8002e0a:	4770      	bx	lr

08002e0c <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8002e0c:	88c0      	ldrh	r0, [r0, #6]
 8002e0e:	4770      	bx	lr

08002e10 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8002e10:	8880      	ldrh	r0, [r0, #4]
 8002e12:	4770      	bx	lr

08002e14 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002e14:	7a80      	ldrb	r0, [r0, #10]
    }
 8002e16:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002e1a:	4770      	bx	lr

08002e1c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002e1c:	7a80      	ldrb	r0, [r0, #10]
    }
 8002e1e:	09c0      	lsrs	r0, r0, #7
 8002e20:	4770      	bx	lr

08002e22 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8002e22:	4770      	bx	lr

08002e24 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8002e24:	4770      	bx	lr

08002e26 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8002e26:	f500 7398 	add.w	r3, r0, #304	; 0x130
 8002e2a:	6808      	ldr	r0, [r1, #0]
 8002e2c:	6849      	ldr	r1, [r1, #4]
 8002e2e:	c303      	stmia	r3!, {r0, r1}
    }
 8002e30:	4770      	bx	lr

08002e32 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002e32:	4770      	bx	lr

08002e34 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002e34:	4770      	bx	lr

08002e36 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002e36:	6041      	str	r1, [r0, #4]
    }
 8002e38:	4770      	bx	lr

08002e3a <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002e3a:	4770      	bx	lr

08002e3c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8002e3e:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8002e42:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8002e46:	2300      	movs	r3, #0
 8002e48:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002e4c:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8002e50:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	08002efd 	.word	0x08002efd

08002e5c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	7203      	strb	r3, [r0, #8]
    }
 8002e60:	4770      	bx	lr

08002e62 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8002e62:	4770      	bx	lr

08002e64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8002e64:	4770      	bx	lr

08002e66 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8002e66:	4603      	mov	r3, r0
 8002e68:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8002e6a:	6841      	ldr	r1, [r0, #4]
 8002e6c:	68c2      	ldr	r2, [r0, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	1054      	asrs	r4, r2, #1
 8002e72:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8002e76:	07d2      	lsls	r2, r2, #31
 8002e78:	bf48      	it	mi
 8002e7a:	590a      	ldrmi	r2, [r1, r4]
    }
 8002e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8002e80:	bf48      	it	mi
 8002e82:	58d3      	ldrmi	r3, [r2, r3]
 8002e84:	4718      	bx	r3

08002e86 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8002e86:	6843      	ldr	r3, [r0, #4]
 8002e88:	b12b      	cbz	r3, 8002e96 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8002e8a:	6883      	ldr	r3, [r0, #8]
 8002e8c:	b92b      	cbnz	r3, 8002e9a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002e8e:	68c0      	ldr	r0, [r0, #12]
 8002e90:	f000 0001 	and.w	r0, r0, #1
 8002e94:	4770      	bx	lr
 8002e96:	4618      	mov	r0, r3
 8002e98:	4770      	bx	lr
 8002e9a:	2001      	movs	r0, #1
    }
 8002e9c:	4770      	bx	lr

08002e9e <_ZN8touchgfx12NoTransitionD0Ev>:
 8002e9e:	b510      	push	{r4, lr}
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	210c      	movs	r1, #12
 8002ea4:	f025 f8eb 	bl	802807e <_ZdlPvj>
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	bd10      	pop	{r4, pc}

08002eac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002eac:	b510      	push	{r4, lr}
 8002eae:	4604      	mov	r4, r0
 8002eb0:	2110      	movs	r1, #16
 8002eb2:	f025 f8e4 	bl	802807e <_ZdlPvj>
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	bd10      	pop	{r4, pc}

08002eba <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8002eba:	b510      	push	{r4, lr}
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002ec2:	f025 f8dc 	bl	802807e <_ZdlPvj>
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	bd10      	pop	{r4, pc}

08002eca <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8002eca:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8002ecc:	f014 fdbc 	bl	8017a48 <_ZN8touchgfx11Application11getInstanceEv>
    }
 8002ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8002ed4:	f015 ba00 	b.w	80182d8 <_ZN8touchgfx11Application10invalidateEv>

08002ed8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002ed8:	b510      	push	{r4, lr}
 8002eda:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002edc:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8002ee0:	b158      	cbz	r0, 8002efa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002ee2:	6803      	ldr	r3, [r0, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	4798      	blx	r3
 8002ee8:	b138      	cbz	r0, 8002efa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8002eea:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8002eee:	6803      	ldr	r3, [r0, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 8002efa:	bd10      	pop	{r4, pc}

08002efc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8002efc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002f00:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8002f04:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002f06:	68a8      	ldr	r0, [r5, #8]
 8002f08:	6803      	ldr	r3, [r0, #0]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4798      	blx	r3
 8002f0e:	f246 3397 	movw	r3, #25495	; 0x6397
 8002f12:	4298      	cmp	r0, r3
 8002f14:	d805      	bhi.n	8002f22 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 8002f16:	21a3      	movs	r1, #163	; 0xa3
 8002f18:	4b45      	ldr	r3, [pc, #276]	; (8003030 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8002f1a:	4a46      	ldr	r2, [pc, #280]	; (8003034 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002f1c:	4846      	ldr	r0, [pc, #280]	; (8003038 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8002f1e:	f025 f8db 	bl	80280d8 <__assert_func>
 8002f22:	6868      	ldr	r0, [r5, #4]
 8002f24:	6803      	ldr	r3, [r0, #0]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4798      	blx	r3
 8002f2a:	280f      	cmp	r0, #15
 8002f2c:	d803      	bhi.n	8002f36 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 8002f2e:	21a4      	movs	r1, #164	; 0xa4
 8002f30:	4b42      	ldr	r3, [pc, #264]	; (800303c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8002f32:	4a40      	ldr	r2, [pc, #256]	; (8003034 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002f34:	e7f2      	b.n	8002f1c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002f36:	68e8      	ldr	r0, [r5, #12]
 8002f38:	6803      	ldr	r3, [r0, #0]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	4798      	blx	r3
 8002f3e:	280b      	cmp	r0, #11
 8002f40:	d803      	bhi.n	8002f4a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 8002f42:	21a5      	movs	r1, #165	; 0xa5
 8002f44:	4b3e      	ldr	r3, [pc, #248]	; (8003040 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 8002f46:	4a3b      	ldr	r2, [pc, #236]	; (8003034 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002f48:	e7e8      	b.n	8002f1c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 8002f4a:	f014 fd7d 	bl	8017a48 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002f4e:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8003048 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8002f52:	3004      	adds	r0, #4
 8002f54:	f014 fd9d 	bl	8017a92 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002f58:	f8d9 0000 	ldr.w	r0, [r9]
 8002f5c:	b110      	cbz	r0, 8002f64 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8002f5e:	6803      	ldr	r3, [r0, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	4798      	blx	r3
    if (*currentTrans)
 8002f64:	f8d9 0000 	ldr.w	r0, [r9]
 8002f68:	b110      	cbz	r0, 8002f70 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8002f6a:	6803      	ldr	r3, [r0, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4798      	blx	r3
    if (*currentScreen)
 8002f70:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800304c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x150>
 8002f74:	f8d8 0000 	ldr.w	r0, [r8]
 8002f78:	b110      	cbz	r0, 8002f80 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8002f7a:	6803      	ldr	r3, [r0, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	4798      	blx	r3
    if (*currentPresenter)
 8002f80:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8002f84:	b110      	cbz	r0, 8002f8c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8002f86:	6803      	ldr	r3, [r0, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4798      	blx	r3
    if (*currentScreen)
 8002f8c:	f8d8 0000 	ldr.w	r0, [r8]
 8002f90:	b110      	cbz	r0, 8002f98 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8002f92:	6803      	ldr	r3, [r0, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4798      	blx	r3
    if (*currentPresenter)
 8002f98:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8002f9c:	b110      	cbz	r0, 8002fa4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8002f9e:	6803      	ldr	r3, [r0, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002fa4:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
 8002faa:	f04f 0b00 	mov.w	fp, #0
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	4798      	blx	r3
 8002fb2:	4b24      	ldr	r3, [pc, #144]	; (8003044 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>)
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	6003      	str	r3, [r0, #0]
 8002fb8:	f8c0 b004 	str.w	fp, [r0, #4]
 8002fbc:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002fc0:	68a8      	ldr	r0, [r5, #8]
 8002fc2:	4659      	mov	r1, fp
 8002fc4:	6803      	ldr	r3, [r0, #0]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	4798      	blx	r3
 8002fca:	4606      	mov	r6, r0
 8002fcc:	f000 fbfc 	bl	80037c8 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002fd0:	6868      	ldr	r0, [r5, #4]
 8002fd2:	4659      	mov	r1, fp
 8002fd4:	6803      	ldr	r3, [r0, #0]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	4798      	blx	r3
 8002fda:	4605      	mov	r5, r0
 8002fdc:	4631      	mov	r1, r6
 8002fde:	f000 fad9 	bl	8003594 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8002fe2:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8002fe6:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 8002fea:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8002fee:	b1e5      	cbz	r5, 800302a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
 8002ff0:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002ff2:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8002ff6:	6833      	ldr	r3, [r6, #0]
 8002ff8:	4630      	mov	r0, r6
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002ffa:	f8c5 a008 	str.w	sl, [r5, #8]
 8002ffe:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003000:	63f5      	str	r5, [r6, #60]	; 0x3c
 8003002:	4798      	blx	r3
    newPresenter->activate();
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	4628      	mov	r0, r5
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800300c:	4621      	mov	r1, r4
 800300e:	4630      	mov	r0, r6
 8003010:	f016 f9b2 	bl	8019378 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	4620      	mov	r0, r4
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	4798      	blx	r3
    newTransition->invalidate();
 800301c:	4620      	mov	r0, r4
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
}
 8003022:	b001      	add	sp, #4
 8003024:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003028:	4718      	bx	r3
    model->bind(newPresenter);
 800302a:	462b      	mov	r3, r5
 800302c:	e7e1      	b.n	8002ff2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf6>
 800302e:	bf00      	nop
 8003030:	0802a0c0 	.word	0x0802a0c0
 8003034:	0802a14e 	.word	0x0802a14e
 8003038:	0802a252 	.word	0x0802a252
 800303c:	0802a299 	.word	0x0802a299
 8003040:	0802a33c 	.word	0x0802a33c
 8003044:	0802a44c 	.word	0x0802a44c
 8003048:	20198198 	.word	0x20198198
 800304c:	20198194 	.word	0x20198194

08003050 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	4604      	mov	r4, r0
 8003054:	460d      	mov	r5, r1
 8003056:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 8003058:	f014 fdb8 	bl	8017bcc <_ZN8touchgfx11ApplicationC1Ev>
 800305c:	2100      	movs	r1, #0
        instance = this;
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x38>)
        : pobject(0), pmemfun(0)
 8003060:	e9c4 1153 	strd	r1, r1, [r4, #332]	; 0x14c
 8003064:	601c      	str	r4, [r3, #0]
      model(m)
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x3c>)
          pendingScreenTransitionCallback(0)
 8003068:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
 800306c:	6023      	str	r3, [r4, #0]
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x40>)
 8003070:	e9c4 6555 	strd	r6, r5, [r4, #340]	; 0x154
 8003074:	e9c4 3151 	strd	r3, r1, [r4, #324]	; 0x144
        return instance;
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x44>)
 800307a:	6818      	ldr	r0, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800307c:	6803      	ldr	r3, [r0, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4798      	blx	r3
}
 8003082:	4620      	mov	r0, r4
 8003084:	bd70      	pop	{r4, r5, r6, pc}
 8003086:	bf00      	nop
 8003088:	201981a4 	.word	0x201981a4
 800308c:	0802a400 	.word	0x0802a400
 8003090:	0802a3e8 	.word	0x0802a3e8
 8003094:	20198158 	.word	0x20198158

08003098 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 800309a:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 800309e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 80030a2:	2300      	movs	r3, #0
 80030a4:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80030a8:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 80030ac:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	08002efd 	.word	0x08002efd

080030b8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80030b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80030ba:	4770      	bx	lr

080030bc <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80030bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80030be:	4770      	bx	lr

080030c0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80030c0:	4770      	bx	lr

080030c2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80030c2:	888b      	ldrh	r3, [r1, #4]
 80030c4:	69c0      	ldr	r0, [r0, #28]
 80030c6:	0adb      	lsrs	r3, r3, #11
 80030c8:	680a      	ldr	r2, [r1, #0]
 80030ca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80030ce:	4410      	add	r0, r2
 80030d0:	4770      	bx	lr

080030d2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80030d2:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 80030d4:	b1c2      	cbz	r2, 8003108 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80030d6:	7b13      	ldrb	r3, [r2, #12]
 80030d8:	b1b3      	cbz	r3, 8003108 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80030da:	7b54      	ldrb	r4, [r2, #13]
 80030dc:	7ad2      	ldrb	r2, [r2, #11]
 80030de:	0224      	lsls	r4, r4, #8
 80030e0:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80030e4:	4314      	orrs	r4, r2
 80030e6:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80030e8:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80030ea:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 80030ee:	8813      	ldrh	r3, [r2, #0]
 80030f0:	428b      	cmp	r3, r1
 80030f2:	d102      	bne.n	80030fa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80030f4:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 80030f8:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80030fa:	d805      	bhi.n	8003108 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80030fc:	3801      	subs	r0, #1
 80030fe:	b280      	uxth	r0, r0
 8003100:	3204      	adds	r2, #4
 8003102:	2800      	cmp	r0, #0
 8003104:	d1f3      	bne.n	80030ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003106:	e7f7      	b.n	80030f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003108:	2000      	movs	r0, #0
 800310a:	e7f5      	b.n	80030f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

0800310c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800310c:	b510      	push	{r4, lr}
 800310e:	4604      	mov	r4, r0
 8003110:	212c      	movs	r1, #44	; 0x2c
 8003112:	f024 ffb4 	bl	802807e <_ZdlPvj>
 8003116:	4620      	mov	r0, r4
 8003118:	bd10      	pop	{r4, pc}
	...

0800311c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800311c:	b530      	push	{r4, r5, lr}
 800311e:	4604      	mov	r4, r0
 8003120:	b08b      	sub	sp, #44	; 0x2c
      arabicTable(formsTable)
 8003122:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 8003126:	9508      	str	r5, [sp, #32]
 8003128:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 800312c:	9507      	str	r5, [sp, #28]
 800312e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8003132:	9506      	str	r5, [sp, #24]
 8003134:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8003138:	9505      	str	r5, [sp, #20]
 800313a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800313e:	9504      	str	r5, [sp, #16]
 8003140:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8003144:	9503      	str	r5, [sp, #12]
 8003146:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 800314a:	9502      	str	r5, [sp, #8]
 800314c:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003150:	9501      	str	r5, [sp, #4]
 8003152:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8003156:	9500      	str	r5, [sp, #0]
 8003158:	f015 fd68 	bl	8018c2c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
}
 800315c:	4620      	mov	r0, r4
      arabicTable(formsTable)
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 8003160:	6023      	str	r3, [r4, #0]
 8003162:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003164:	61e3      	str	r3, [r4, #28]
 8003166:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003168:	6223      	str	r3, [r4, #32]
 800316a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800316c:	6263      	str	r3, [r4, #36]	; 0x24
 800316e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003170:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003172:	b00b      	add	sp, #44	; 0x2c
 8003174:	bd30      	pop	{r4, r5, pc}
 8003176:	bf00      	nop
 8003178:	0802a470 	.word	0x0802a470

0800317c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 800317c:	2000      	movs	r0, #0
 800317e:	4770      	bx	lr

08003180 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003180:	8081      	strh	r1, [r0, #4]
    }
 8003182:	4770      	bx	lr

08003184 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003184:	80c1      	strh	r1, [r0, #6]
    }
 8003186:	4770      	bx	lr

08003188 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003188:	8101      	strh	r1, [r0, #8]
    }
 800318a:	4770      	bx	lr

0800318c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 800318c:	8141      	strh	r1, [r0, #10]
    }
 800318e:	4770      	bx	lr

08003190 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003190:	4770      	bx	lr

08003192 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8003192:	4770      	bx	lr

08003194 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003194:	4770      	bx	lr

08003196 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003196:	4770      	bx	lr

08003198 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003198:	4770      	bx	lr

0800319a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800319a:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 800319c:	88c4      	ldrh	r4, [r0, #6]
 800319e:	6803      	ldr	r3, [r0, #0]
 80031a0:	1b12      	subs	r2, r2, r4
 80031a2:	8884      	ldrh	r4, [r0, #4]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a6:	1b09      	subs	r1, r1, r4
 80031a8:	b212      	sxth	r2, r2
    }
 80031aa:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80031ae:	b209      	sxth	r1, r1
 80031b0:	4718      	bx	r3

080031b2 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80031b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031b6:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80031b8:	f04f 33ff 	mov.w	r3, #4294967295
 80031bc:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80031be:	6813      	ldr	r3, [r2, #0]
 80031c0:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80031c2:	6010      	str	r0, [r2, #0]
    }
 80031c4:	4770      	bx	lr

080031c6 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80031c6:	4770      	bx	lr

080031c8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80031c8:	4770      	bx	lr

080031ca <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80031ca:	4770      	bx	lr

080031cc <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80031cc:	4770      	bx	lr

080031ce <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80031ce:	4770      	bx	lr

080031d0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80031d0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80031d4:	b11a      	cbz	r2, 80031de <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80031d6:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80031da:	b102      	cbz	r2, 80031de <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80031dc:	6018      	str	r0, [r3, #0]
        }
    }
 80031de:	4770      	bx	lr

080031e0 <_ZN15Screen1ViewBase9tick_funcEv>:
     * Virtual Action Handlers
     */
    virtual void tick_func()
    {
        // Override and implement this function in Screen1
    }
 80031e0:	4770      	bx	lr

080031e2 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 80031e2:	4770      	bx	lr

080031e4 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 80031e4:	4770      	bx	lr

080031e6 <_ZN15Screen1ViewBase15handleTickEventEv>:
void Screen1ViewBase::handleTickEvent()
{
    //tick_func
    //When every N tick call virtual function
    //Call tick_func
    tick_func();
 80031e6:	6803      	ldr	r3, [r0, #0]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	4718      	bx	r3

080031ec <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80031ec:	b510      	push	{r4, lr}
 80031ee:	4604      	mov	r4, r0
}
 80031f0:	216c      	movs	r1, #108	; 0x6c
 80031f2:	f024 ff44 	bl	802807e <_ZdlPvj>
 80031f6:	4620      	mov	r0, r4
 80031f8:	bd10      	pop	{r4, pc}

080031fa <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80031fa:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80031fe:	b112      	cbz	r2, 8003206 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8003200:	6803      	ldr	r3, [r0, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	4718      	bx	r3
    }
 8003206:	4770      	bx	lr

08003208 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8003208:	b538      	push	{r3, r4, r5, lr}
 800320a:	4604      	mov	r4, r0
        : presenter(0)
 800320c:	f015 ff08 	bl	8019020 <_ZN8touchgfx6ScreenC1Ev>
 8003210:	4625      	mov	r5, r4
 8003212:	2300      	movs	r3, #0
 8003214:	4a14      	ldr	r2, [pc, #80]	; (8003268 <_ZN15Screen1ViewBaseC1Ev+0x60>)
 8003216:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003218:	f845 2b40 	str.w	r2, [r5], #64
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 800321c:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8003220:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
          visible(true)
 8003224:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8003228:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
        : color(col)
 800322c:	66a3      	str	r3, [r4, #104]	; 0x68
 800322e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003232:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003236:	23ff      	movs	r3, #255	; 0xff
 8003238:	4a0c      	ldr	r2, [pc, #48]	; (800326c <_ZN15Screen1ViewBaseC1Ev+0x64>)
 800323a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 800323e:	6422      	str	r2, [r4, #64]	; 0x40
        setWidth(width);
 8003240:	4628      	mov	r0, r5
 8003242:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003246:	f7ff ff9f 	bl	8003188 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 800324a:	4628      	mov	r0, r5
 800324c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003250:	f7ff ff9c 	bl	800318c <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003254:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003258:	1d20      	adds	r0, r4, #4
 800325a:	4629      	mov	r1, r5
 800325c:	66a3      	str	r3, [r4, #104]	; 0x68
 800325e:	f012 f9eb 	bl	8015638 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003262:	4620      	mov	r0, r4
 8003264:	bd38      	pop	{r3, r4, r5, pc}
 8003266:	bf00      	nop
 8003268:	0802a4d0 	.word	0x0802a4d0
 800326c:	0802a9e4 	.word	0x0802a9e4

08003270 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003270:	4770      	bx	lr
	...

08003274 <_Z23getFont_verdana_10_4bppv>:
{
 8003274:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003276:	4d15      	ldr	r5, [pc, #84]	; (80032cc <_Z23getFont_verdana_10_4bppv+0x58>)
{
 8003278:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800327a:	e8d5 4f8f 	ldab	r4, [r5]
 800327e:	f014 0401 	ands.w	r4, r4, #1
 8003282:	d120      	bne.n	80032c6 <_Z23getFont_verdana_10_4bppv+0x52>
 8003284:	4628      	mov	r0, r5
 8003286:	f024 fefc 	bl	8028082 <__cxa_guard_acquire>
 800328a:	b1e0      	cbz	r0, 80032c6 <_Z23getFont_verdana_10_4bppv+0x52>
 800328c:	233f      	movs	r3, #63	; 0x3f
 800328e:	9309      	str	r3, [sp, #36]	; 0x24
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8003292:	2201      	movs	r2, #1
 8003294:	9308      	str	r3, [sp, #32]
 8003296:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003298:	490f      	ldr	r1, [pc, #60]	; (80032d8 <_Z23getFont_verdana_10_4bppv+0x64>)
 800329a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800329e:	2304      	movs	r3, #4
 80032a0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80032a4:	230a      	movs	r3, #10
 80032a6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80032b0:	480a      	ldr	r0, [pc, #40]	; (80032dc <_Z23getFont_verdana_10_4bppv+0x68>)
 80032b2:	940a      	str	r4, [sp, #40]	; 0x28
 80032b4:	9405      	str	r4, [sp, #20]
 80032b6:	f7ff ff31 	bl	800311c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80032ba:	4809      	ldr	r0, [pc, #36]	; (80032e0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80032bc:	f024 ff2a 	bl	8028114 <atexit>
 80032c0:	4628      	mov	r0, r5
 80032c2:	f024 feea 	bl	802809a <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80032c6:	4805      	ldr	r0, [pc, #20]	; (80032dc <_Z23getFont_verdana_10_4bppv+0x68>)
 80032c8:	b00f      	add	sp, #60	; 0x3c
 80032ca:	bd30      	pop	{r4, r5, pc}
 80032cc:	201964ac 	.word	0x201964ac
 80032d0:	0802c3d4 	.word	0x0802c3d4
 80032d4:	0802c3e0 	.word	0x0802c3e0
 80032d8:	90000178 	.word	0x90000178
 80032dc:	201964b0 	.word	0x201964b0
 80032e0:	08003271 	.word	0x08003271

080032e4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80032e4:	4770      	bx	lr
	...

080032e8 <_Z23getFont_verdana_20_4bppv>:
{
 80032e8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80032ea:	4d15      	ldr	r5, [pc, #84]	; (8003340 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 80032ec:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80032ee:	e8d5 4f8f 	ldab	r4, [r5]
 80032f2:	f014 0401 	ands.w	r4, r4, #1
 80032f6:	d120      	bne.n	800333a <_Z23getFont_verdana_20_4bppv+0x52>
 80032f8:	4628      	mov	r0, r5
 80032fa:	f024 fec2 	bl	8028082 <__cxa_guard_acquire>
 80032fe:	b1e0      	cbz	r0, 800333a <_Z23getFont_verdana_20_4bppv+0x52>
 8003300:	233f      	movs	r3, #63	; 0x3f
 8003302:	9309      	str	r3, [sp, #36]	; 0x24
 8003304:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8003306:	2201      	movs	r2, #1
 8003308:	9308      	str	r3, [sp, #32]
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <_Z23getFont_verdana_20_4bppv+0x60>)
 800330c:	490f      	ldr	r1, [pc, #60]	; (800334c <_Z23getFont_verdana_20_4bppv+0x64>)
 800330e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003312:	2304      	movs	r3, #4
 8003314:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003318:	2314      	movs	r3, #20
 800331a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003324:	480a      	ldr	r0, [pc, #40]	; (8003350 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003326:	940a      	str	r4, [sp, #40]	; 0x28
 8003328:	9405      	str	r4, [sp, #20]
 800332a:	f7ff fef7 	bl	800311c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800332e:	4809      	ldr	r0, [pc, #36]	; (8003354 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003330:	f024 fef0 	bl	8028114 <atexit>
 8003334:	4628      	mov	r0, r5
 8003336:	f024 feb0 	bl	802809a <__cxa_guard_release>
    return verdana_20_4bpp;
}
 800333a:	4805      	ldr	r0, [pc, #20]	; (8003350 <_Z23getFont_verdana_20_4bppv+0x68>)
 800333c:	b00f      	add	sp, #60	; 0x3c
 800333e:	bd30      	pop	{r4, r5, pc}
 8003340:	201964dc 	.word	0x201964dc
 8003344:	0802c3d8 	.word	0x0802c3d8
 8003348:	0802c3e4 	.word	0x0802c3e4
 800334c:	90000188 	.word	0x90000188
 8003350:	201964e0 	.word	0x201964e0
 8003354:	080032e5 	.word	0x080032e5

08003358 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003358:	4770      	bx	lr
	...

0800335c <_Z23getFont_verdana_40_4bppv>:
{
 800335c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800335e:	4d15      	ldr	r5, [pc, #84]	; (80033b4 <_Z23getFont_verdana_40_4bppv+0x58>)
{
 8003360:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003362:	e8d5 4f8f 	ldab	r4, [r5]
 8003366:	f014 0401 	ands.w	r4, r4, #1
 800336a:	d120      	bne.n	80033ae <_Z23getFont_verdana_40_4bppv+0x52>
 800336c:	4628      	mov	r0, r5
 800336e:	f024 fe88 	bl	8028082 <__cxa_guard_acquire>
 8003372:	b1e0      	cbz	r0, 80033ae <_Z23getFont_verdana_40_4bppv+0x52>
 8003374:	233f      	movs	r3, #63	; 0x3f
 8003376:	9309      	str	r3, [sp, #36]	; 0x24
 8003378:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800337a:	2201      	movs	r2, #1
 800337c:	9308      	str	r3, [sp, #32]
 800337e:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <_Z23getFont_verdana_40_4bppv+0x60>)
 8003380:	490f      	ldr	r1, [pc, #60]	; (80033c0 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003382:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003386:	2304      	movs	r3, #4
 8003388:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800338c:	2328      	movs	r3, #40	; 0x28
 800338e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003398:	480a      	ldr	r0, [pc, #40]	; (80033c4 <_Z23getFont_verdana_40_4bppv+0x68>)
 800339a:	940a      	str	r4, [sp, #40]	; 0x28
 800339c:	9405      	str	r4, [sp, #20]
 800339e:	f7ff febd 	bl	800311c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80033a2:	4809      	ldr	r0, [pc, #36]	; (80033c8 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80033a4:	f024 feb6 	bl	8028114 <atexit>
 80033a8:	4628      	mov	r0, r5
 80033aa:	f024 fe76 	bl	802809a <__cxa_guard_release>
    return verdana_40_4bpp;
}
 80033ae:	4805      	ldr	r0, [pc, #20]	; (80033c4 <_Z23getFont_verdana_40_4bppv+0x68>)
 80033b0:	b00f      	add	sp, #60	; 0x3c
 80033b2:	bd30      	pop	{r4, r5, pc}
 80033b4:	2019650c 	.word	0x2019650c
 80033b8:	0802c3dc 	.word	0x0802c3dc
 80033bc:	0802c3e8 	.word	0x0802c3e8
 80033c0:	90000198 	.word	0x90000198
 80033c4:	20196510 	.word	0x20196510
 80033c8:	08003359 	.word	0x08003359

080033cc <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80033cc:	2000      	movs	r0, #0
 80033ce:	4770      	bx	lr

080033d0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80033d0:	2000      	movs	r0, #0
 80033d2:	4770      	bx	lr

080033d4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80033d4:	b40e      	push	{r1, r2, r3}
 80033d6:	b503      	push	{r0, r1, lr}
 80033d8:	ab03      	add	r3, sp, #12
 80033da:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80033de:	2100      	movs	r1, #0
    va_start(pArg, text);
 80033e0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80033e2:	f015 fa4b 	bl	801887c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80033e6:	b002      	add	sp, #8
 80033e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80033ec:	b003      	add	sp, #12
 80033ee:	4770      	bx	lr

080033f0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80033f0:	b40c      	push	{r2, r3}
 80033f2:	b507      	push	{r0, r1, r2, lr}
 80033f4:	ab04      	add	r3, sp, #16
 80033f6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80033fa:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80033fc:	f015 fa3e 	bl	801887c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003400:	b003      	add	sp, #12
 8003402:	f85d eb04 	ldr.w	lr, [sp], #4
 8003406:	b002      	add	sp, #8
 8003408:	4770      	bx	lr
	...

0800340c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 800340c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800340e:	b510      	push	{r4, lr}
 8003410:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003412:	b373      	cbz	r3, 8003472 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003414:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003416:	b92b      	cbnz	r3, 8003424 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003418:	21c5      	movs	r1, #197	; 0xc5
 800341a:	4b18      	ldr	r3, [pc, #96]	; (800347c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800341c:	4a18      	ldr	r2, [pc, #96]	; (8003480 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800341e:	4819      	ldr	r0, [pc, #100]	; (8003484 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003420:	f024 fe5a 	bl	80280d8 <__assert_func>
            return buffer[pos];
 8003424:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003426:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800342a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800342c:	b30b      	cbz	r3, 8003472 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800342e:	f016 fc6a 	bl	8019d06 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003432:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003434:	2b01      	cmp	r3, #1
 8003436:	d803      	bhi.n	8003440 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003438:	21cb      	movs	r1, #203	; 0xcb
 800343a:	4b13      	ldr	r3, [pc, #76]	; (8003488 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800343c:	4a13      	ldr	r2, [pc, #76]	; (800348c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800343e:	e7ee      	b.n	800341e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003440:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003442:	f640 103f 	movw	r0, #2367	; 0x93f
 8003446:	1c53      	adds	r3, r2, #1
 8003448:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800344a:	4619      	mov	r1, r3
 800344c:	2b09      	cmp	r3, #9
 800344e:	bf88      	it	hi
 8003450:	f1a3 010a 	subhi.w	r1, r3, #10
 8003454:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003458:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 800345a:	4281      	cmp	r1, r0
 800345c:	d109      	bne.n	8003472 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800345e:	2b0a      	cmp	r3, #10
 8003460:	bf28      	it	cs
 8003462:	2300      	movcs	r3, #0
 8003464:	eb04 0242 	add.w	r2, r4, r2, lsl #1
            return buffer[pos];
 8003468:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800346a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800346e:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8003470:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003472:	4620      	mov	r0, r4
}
 8003474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003478:	f016 bb48 	b.w	8019b0c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800347c:	0802a500 	.word	0x0802a500
 8003480:	0802a509 	.word	0x0802a509
 8003484:	0802a5b4 	.word	0x0802a5b4
 8003488:	0802a5fe 	.word	0x0802a5fe
 800348c:	0802a60c 	.word	0x0802a60c

08003490 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003490:	f016 bb03 	b.w	8019a9a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003494 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003494:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003496:	bb18      	cbnz	r0, 80034e0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800349a:	4813      	ldr	r0, [pc, #76]	; (80034e8 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4913      	ldr	r1, [pc, #76]	; (80034ec <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80034a0:	b1b3      	cbz	r3, 80034d0 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80034a2:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80034a4:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80034a6:	441a      	add	r2, r3
 80034a8:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80034aa:	685a      	ldr	r2, [r3, #4]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80034ac:	441c      	add	r4, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80034ae:	441a      	add	r2, r3
 80034b0:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80034b2:	2200      	movs	r2, #0
 80034b4:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80034b6:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80034b8:	f000 f82a 	bl	8003510 <_ZN17TypedTextDatabase8getFontsEv>
 80034bc:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80034be:	f000 f825 	bl	800350c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80034c2:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80034c4:	601c      	str	r4, [r3, #0]
        fonts = f;
 80034c6:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80034c8:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80034ca:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80034cc:	8018      	strh	r0, [r3, #0]
    }
}
 80034ce:	e007      	b.n	80034e0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80034d2:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80034d6:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80034da:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80034dc:	2c00      	cmp	r4, #0
 80034de:	d1e8      	bne.n	80034b2 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80034e0:	bd38      	pop	{r3, r4, r5, pc}
 80034e2:	bf00      	nop
 80034e4:	2019653c 	.word	0x2019653c
 80034e8:	20196540 	.word	0x20196540
 80034ec:	20196544 	.word	0x20196544
 80034f0:	20196548 	.word	0x20196548
 80034f4:	201981a8 	.word	0x201981a8
 80034f8:	201981b0 	.word	0x201981b0
 80034fc:	201981ac 	.word	0x201981ac
 8003500:	900001ac 	.word	0x900001ac
 8003504:	900001a8 	.word	0x900001a8
 8003508:	900001b4 	.word	0x900001b4

0800350c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 800350c:	2000      	movs	r0, #0
 800350e:	4770      	bx	lr

08003510 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003510:	4800      	ldr	r0, [pc, #0]	; (8003514 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003512:	4770      	bx	lr
 8003514:	2019654c 	.word	0x2019654c

08003518 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003518:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 800351a:	f7ff fee5 	bl	80032e8 <_Z23getFont_verdana_20_4bppv>
};
 800351e:	4c04      	ldr	r4, [pc, #16]	; (8003530 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
 8003520:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003522:	f7ff ff1b 	bl	800335c <_Z23getFont_verdana_40_4bppv>
};
 8003526:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003528:	f7ff fea4 	bl	8003274 <_Z23getFont_verdana_10_4bppv>
};
 800352c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 800352e:	bd10      	pop	{r4, pc}
 8003530:	2019654c 	.word	0x2019654c

08003534 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003534:	4770      	bx	lr

08003536 <_ZN19FrontendApplicationD0Ev>:
 8003536:	b510      	push	{r4, lr}
 8003538:	4604      	mov	r4, r0
 800353a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800353e:	f024 fd9e 	bl	802807e <_ZdlPvj>
 8003542:	4620      	mov	r0, r4
 8003544:	bd10      	pop	{r4, pc}

08003546 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003546:	b510      	push	{r4, lr}
 8003548:	4604      	mov	r4, r0
    {
        model.tick();
 800354a:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 800354e:	f000 f812 	bl	8003576 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003552:	4620      	mov	r0, r4
    }
 8003554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003558:	f014 baf8 	b.w	8017b4c <_ZN8touchgfx11Application15handleTickEventEv>

0800355c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800355c:	b510      	push	{r4, lr}
 800355e:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003560:	f7ff fd76 	bl	8003050 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003564:	4b01      	ldr	r3, [pc, #4]	; (800356c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8003566:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8003568:	6023      	str	r3, [r4, #0]
}
 800356a:	bd10      	pop	{r4, pc}
 800356c:	0802a6e8 	.word	0x0802a6e8

08003570 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8003570:	2200      	movs	r2, #0
 8003572:	6002      	str	r2, [r0, #0]
{

}
 8003574:	4770      	bx	lr

08003576 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8003576:	4770      	bx	lr

08003578 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8003578:	4770      	bx	lr

0800357a <_ZThn4_N16Screen1PresenterD1Ev>:
 800357a:	3804      	subs	r0, #4
 800357c:	4770      	bx	lr

0800357e <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 800357e:	4770      	bx	lr

08003580 <_ZN16Screen1PresenterD0Ev>:
 8003580:	b510      	push	{r4, lr}
 8003582:	4604      	mov	r4, r0
 8003584:	2110      	movs	r1, #16
 8003586:	f024 fd7a 	bl	802807e <_ZdlPvj>
 800358a:	4620      	mov	r0, r4
 800358c:	bd10      	pop	{r4, pc}

0800358e <_ZThn4_N16Screen1PresenterD0Ev>:
 800358e:	f1a0 0004 	sub.w	r0, r0, #4
 8003592:	e7f5      	b.n	8003580 <_ZN16Screen1PresenterD0Ev>

08003594 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003594:	2200      	movs	r2, #0
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8003596:	b510      	push	{r4, lr}
 8003598:	6082      	str	r2, [r0, #8]
    : view(v)
 800359a:	4a04      	ldr	r2, [pc, #16]	; (80035ac <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
 800359c:	60c1      	str	r1, [r0, #12]
 800359e:	f102 0408 	add.w	r4, r2, #8
 80035a2:	3220      	adds	r2, #32
 80035a4:	6004      	str	r4, [r0, #0]
 80035a6:	6042      	str	r2, [r0, #4]
}
 80035a8:	bd10      	pop	{r4, pc}
 80035aa:	bf00      	nop
 80035ac:	0802a72c 	.word	0x0802a72c

080035b0 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80035b0:	4770      	bx	lr
	...

080035b4 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80035b4:	b538      	push	{r3, r4, r5, lr}
 80035b6:	4604      	mov	r4, r0
 80035b8:	f246 356c 	movw	r5, #25452	; 0x636c
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <_ZN11Screen1ViewD1Ev+0x24>)
 80035be:	6003      	str	r3, [r0, #0]
 80035c0:	5963      	ldr	r3, [r4, r5]
 80035c2:	1960      	adds	r0, r4, r5
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3d2c      	subs	r5, #44	; 0x2c
 80035c8:	4798      	blx	r3
 80035ca:	2d6c      	cmp	r5, #108	; 0x6c
 80035cc:	d1f8      	bne.n	80035c0 <_ZN11Screen1ViewD1Ev+0xc>
 80035ce:	4620      	mov	r0, r4
 80035d0:	f7ff fe07 	bl	80031e2 <_ZN15Screen1ViewBaseD1Ev>
 80035d4:	4620      	mov	r0, r4
 80035d6:	bd38      	pop	{r3, r4, r5, pc}
 80035d8:	0802a75c 	.word	0x0802a75c

080035dc <_ZN11Screen1ViewD0Ev>:
 80035dc:	b510      	push	{r4, lr}
 80035de:	4604      	mov	r4, r0
 80035e0:	f7ff ffe8 	bl	80035b4 <_ZN11Screen1ViewD1Ev>
 80035e4:	4620      	mov	r0, r4
 80035e6:	f246 3198 	movw	r1, #25496	; 0x6398
 80035ea:	f024 fd48 	bl	802807e <_ZdlPvj>
 80035ee:	4620      	mov	r0, r4
 80035f0:	bd10      	pop	{r4, pc}
	...

080035f4 <_ZN8touchgfx3BoxC1Ev>:
          visible(true)
 80035f4:	f44f 7180 	mov.w	r1, #256	; 0x100
        : Widget(), alpha(255), color(0)
 80035f8:	4a08      	ldr	r2, [pc, #32]	; (800361c <_ZN8touchgfx3BoxC1Ev+0x28>)
 80035fa:	8481      	strh	r1, [r0, #36]	; 0x24
 80035fc:	6002      	str	r2, [r0, #0]
 80035fe:	21ff      	movs	r1, #255	; 0xff
        : x(0), y(0), width(0), height(0)
 8003600:	2200      	movs	r2, #0
 8003602:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8003606:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800360a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800360e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003612:	e9c0 2207 	strd	r2, r2, [r0, #28]
        : color(col)
 8003616:	6282      	str	r2, [r0, #40]	; 0x28
    }
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	0802a9e4 	.word	0x0802a9e4

08003620 <_Z10updateGridPA24_i>:
void updateGrid(int grid[ROWS][COLS]) {
 8003620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003624:	f6ad 1d14 	subw	sp, sp, #2324	; 0x914
 8003628:	af04      	add	r7, sp, #16
    for (int i = 0; i < ROWS; i++) {
 800362a:	2200      	movs	r2, #0
 800362c:	ee07 7a90 	vmov	s15, r7
 8003630:	f04f 0960 	mov.w	r9, #96	; 0x60
                    int newI = (i + ni + ROWS) % ROWS;
 8003634:	f04f 0c18 	mov.w	ip, #24
    for (int i = 0; i < ROWS; i++) {
 8003638:	46be      	mov	lr, r7
        for (int j = 0; j < COLS; j++) {
 800363a:	2400      	movs	r4, #0
 800363c:	fb09 0a02 	mla	sl, r9, r2, r0
                    int newI = (i + ni + ROWS) % ROWS;
 8003640:	f102 0318 	add.w	r3, r2, #24
 8003644:	9302      	str	r3, [sp, #8]
            for (int ni = -1; ni <= 1; ni++) {
 8003646:	f04f 35ff 	mov.w	r5, #4294967295
            int liveNeighbors = 0;
 800364a:	2300      	movs	r3, #0
                    int newJ = (j + nj + COLS) % COLS;
 800364c:	f104 0618 	add.w	r6, r4, #24
 8003650:	9603      	str	r6, [sp, #12]
                    int newI = (i + ni + ROWS) % ROWS;
 8003652:	9e02      	ldr	r6, [sp, #8]
 8003654:	442e      	add	r6, r5
 8003656:	fbb6 f8fc 	udiv	r8, r6, ip
 800365a:	fb0c 6618 	mls	r6, ip, r8, r6
                    liveNeighbors += grid[newI][newJ];
 800365e:	fb09 0606 	mla	r6, r9, r6, r0
 8003662:	9601      	str	r6, [sp, #4]
                for (int nj = -1; nj <= 1; nj++) {
 8003664:	f04f 36ff 	mov.w	r6, #4294967295
                    if (ni == 0 && nj == 0) continue; // Skip the center cell
 8003668:	ea55 0106 	orrs.w	r1, r5, r6
 800366c:	d00a      	beq.n	8003684 <_Z10updateGridPA24_i+0x64>
                    int newJ = (j + nj + COLS) % COLS;
 800366e:	9903      	ldr	r1, [sp, #12]
 8003670:	eb01 0806 	add.w	r8, r1, r6
 8003674:	fbb8 fbfc 	udiv	fp, r8, ip
 8003678:	fb0c 881b 	mls	r8, ip, fp, r8
                    liveNeighbors += grid[newI][newJ];
 800367c:	9901      	ldr	r1, [sp, #4]
 800367e:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8003682:	4443      	add	r3, r8
                for (int nj = -1; nj <= 1; nj++) {
 8003684:	3601      	adds	r6, #1
 8003686:	2e02      	cmp	r6, #2
 8003688:	d1ee      	bne.n	8003668 <_Z10updateGridPA24_i+0x48>
            for (int ni = -1; ni <= 1; ni++) {
 800368a:	3501      	adds	r5, #1
 800368c:	2d02      	cmp	r5, #2
 800368e:	d1e0      	bne.n	8003652 <_Z10updateGridPA24_i+0x32>
            if (grid[i][j] == 1) {
 8003690:	f85a 5024 	ldr.w	r5, [sl, r4, lsl #2]
 8003694:	2d01      	cmp	r5, #1
 8003696:	d11a      	bne.n	80036ce <_Z10updateGridPA24_i+0xae>
                newGrid[i][j] = (liveNeighbors == 2 || liveNeighbors == 3) ? 1 : 0;
 8003698:	3b02      	subs	r3, #2
 800369a:	2b01      	cmp	r3, #1
 800369c:	bf8c      	ite	hi
 800369e:	2300      	movhi	r3, #0
 80036a0:	2301      	movls	r3, #1
        for (int j = 0; j < COLS; j++) {
 80036a2:	3401      	adds	r4, #1
 80036a4:	2c18      	cmp	r4, #24
                newGrid[i][j] = (liveNeighbors == 3) ? 1 : 0;
 80036a6:	f8ce 3000 	str.w	r3, [lr]
        for (int j = 0; j < COLS; j++) {
 80036aa:	f10e 0e04 	add.w	lr, lr, #4
 80036ae:	d1ca      	bne.n	8003646 <_Z10updateGridPA24_i+0x26>
    for (int i = 0; i < ROWS; i++) {
 80036b0:	3201      	adds	r2, #1
 80036b2:	2a18      	cmp	r2, #24
 80036b4:	f107 0760 	add.w	r7, r7, #96	; 0x60
 80036b8:	d1be      	bne.n	8003638 <_Z10updateGridPA24_i+0x18>
            grid[i][j] = newGrid[i][j];
 80036ba:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80036be:	ee17 1a90 	vmov	r1, s15
 80036c2:	f024 fd87 	bl	80281d4 <memcpy>
}
 80036c6:	f60d 1d14 	addw	sp, sp, #2324	; 0x914
 80036ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                newGrid[i][j] = (liveNeighbors == 3) ? 1 : 0;
 80036ce:	1ed9      	subs	r1, r3, #3
 80036d0:	424b      	negs	r3, r1
 80036d2:	414b      	adcs	r3, r1
 80036d4:	e7e5      	b.n	80036a2 <_Z10updateGridPA24_i+0x82>
	...

080036d8 <_ZN11Screen1View9tick_funcEv>:

void Screen1View::tick_func(){
 80036d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036dc:	4e38      	ldr	r6, [pc, #224]	; (80037c0 <_ZN11Screen1View9tick_funcEv+0xe8>)
 80036de:	4680      	mov	r8, r0
 80036e0:	46b1      	mov	r9, r6

	//Draw cells
	uint16_t index = 0;
 80036e2:	2700      	movs	r7, #0
 80036e4:	4635      	mov	r5, r6
	for(uint8_t r = 0; r < ROWS; r ++ ){
		for(uint8_t c = 0; c < COLS; c ++ ){
			if(grid[c][r] != 0){
 80036e6:	f04f 0b60 	mov.w	fp, #96	; 0x60
        color = newColor;
 80036ea:	4a36      	ldr	r2, [pc, #216]	; (80037c4 <_ZN11Screen1View9tick_funcEv+0xec>)
	uint16_t index = 0;
 80036ec:	2400      	movs	r4, #0
 80036ee:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
			if(grid[c][r] != 0){
 80036f2:	fb0b f104 	mul.w	r1, fp, r4
 80036f6:	f859 1001 	ldr.w	r1, [r9, r1]
 80036fa:	193b      	adds	r3, r7, r4
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2900      	cmp	r1, #0
 8003700:	d042      	beq.n	8003788 <_ZN11Screen1View9tick_funcEv+0xb0>
 8003702:	fb0a 8103 	mla	r1, sl, r3, r8
 8003706:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
				box[index].setColor(touchgfx::Color::getColorFromRGB(0, 119, 178));
			}else{
				box[index].setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
			}
			box[index].invalidate();
 800370a:	fb0a f303 	mul.w	r3, sl, r3
 800370e:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8003712:	4443      	add	r3, r8
 8003714:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003718:	4440      	add	r0, r8
 800371a:	695b      	ldr	r3, [r3, #20]
		for(uint8_t c = 0; c < COLS; c ++ ){
 800371c:	3401      	adds	r4, #1
			box[index].invalidate();
 800371e:	4798      	blx	r3
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003720:	2c18      	cmp	r4, #24
 8003722:	4a28      	ldr	r2, [pc, #160]	; (80037c4 <_ZN11Screen1View9tick_funcEv+0xec>)
 8003724:	d1e5      	bne.n	80036f2 <_ZN11Screen1View9tick_funcEv+0x1a>
			index++;
 8003726:	3718      	adds	r7, #24
 8003728:	b2bf      	uxth	r7, r7
	for(uint8_t r = 0; r < ROWS; r ++ ){
 800372a:	f5b7 7f10 	cmp.w	r7, #576	; 0x240
 800372e:	f109 0904 	add.w	r9, r9, #4
 8003732:	d1db      	bne.n	80036ec <_ZN11Screen1View9tick_funcEv+0x14>
		}
	}

	//Life calculation
	updateGrid(grid);
 8003734:	4822      	ldr	r0, [pc, #136]	; (80037c0 <_ZN11Screen1View9tick_funcEv+0xe8>)
 8003736:	f7ff ff73 	bl	8003620 <_Z10updateGridPA24_i>

	//Recover(endless) mode
	uint16_t sum = 0;
 800373a:	2300      	movs	r3, #0
	updateGrid(grid);
 800373c:	4920      	ldr	r1, [pc, #128]	; (80037c0 <_ZN11Screen1View9tick_funcEv+0xe8>)
	uint16_t sum = 0;
 800373e:	2200      	movs	r2, #0
	for(uint8_t r = 0; r < ROWS; r ++ ){
		for(uint8_t c = 0; c < COLS; c ++ ){
			sum += grid[c][r];
 8003740:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003744:	3218      	adds	r2, #24
			sum += grid[c][r];
 8003746:	4403      	add	r3, r0
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003748:	f5b2 7f10 	cmp.w	r2, #576	; 0x240
			sum += grid[c][r];
 800374c:	b29b      	uxth	r3, r3
		for(uint8_t c = 0; c < COLS; c ++ ){
 800374e:	d1f7      	bne.n	8003740 <_ZN11Screen1View9tick_funcEv+0x68>
	for(uint8_t r = 0; r < ROWS; r ++ ){
 8003750:	3c01      	subs	r4, #1
 8003752:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003756:	f101 0104 	add.w	r1, r1, #4
 800375a:	d1f0      	bne.n	800373e <_ZN11Screen1View9tick_funcEv+0x66>
		}
	}
	if( sum == 0 ){
 800375c:	b1db      	cbz	r3, 8003796 <_ZN11Screen1View9tick_funcEv+0xbe>
			}
		}
	}

	//Seed mode
	grid[rand()%ROWS][rand()%COLS] = 1;
 800375e:	f025 f9ad 	bl	8028abc <rand>
 8003762:	4604      	mov	r4, r0
 8003764:	f025 f9aa 	bl	8028abc <rand>
 8003768:	2318      	movs	r3, #24
 800376a:	fb94 f2f3 	sdiv	r2, r4, r3
 800376e:	fb03 4412 	mls	r4, r3, r2, r4
 8003772:	fb90 f2f3 	sdiv	r2, r0, r3
 8003776:	fb02 0013 	mls	r0, r2, r3, r0
 800377a:	fb03 0004 	mla	r0, r3, r4, r0
 800377e:	2301      	movs	r3, #1
 8003780:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
}
 8003784:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003788:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800378c:	fb0a 8103 	mla	r1, sl, r3, r8
 8003790:	f8c1 00c0 	str.w	r0, [r1, #192]	; 0xc0
 8003794:	e7b9      	b.n	800370a <_ZN11Screen1View9tick_funcEv+0x32>
 8003796:	2405      	movs	r4, #5
			for(uint8_t c = 0; c < 10; c ++ ){
 8003798:	2700      	movs	r7, #0
				grid[c][r] = rand()%2;
 800379a:	f025 f98f 	bl	8028abc <rand>
 800379e:	2800      	cmp	r0, #0
 80037a0:	f000 0001 	and.w	r0, r0, #1
 80037a4:	bfb8      	it	lt
 80037a6:	4240      	neglt	r0, r0
 80037a8:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
			for(uint8_t c = 0; c < 10; c ++ ){
 80037ac:	3718      	adds	r7, #24
 80037ae:	2ff0      	cmp	r7, #240	; 0xf0
 80037b0:	d1f3      	bne.n	800379a <_ZN11Screen1View9tick_funcEv+0xc2>
		for(uint8_t r = 0; r < 5; r ++ ){
 80037b2:	3c01      	subs	r4, #1
 80037b4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80037b8:	f106 0604 	add.w	r6, r6, #4
 80037bc:	d1ec      	bne.n	8003798 <_ZN11Screen1View9tick_funcEv+0xc0>
 80037be:	e7ce      	b.n	800375e <_ZN11Screen1View9tick_funcEv+0x86>
 80037c0:	20196558 	.word	0x20196558
 80037c4:	ff0077b2 	.word	0xff0077b2

080037c8 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80037c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037cc:	4606      	mov	r6, r0
 80037ce:	f7ff fd1b 	bl	8003208 <_ZN15Screen1ViewBaseC1Ev>
 80037d2:	4630      	mov	r0, r6
 80037d4:	4b3c      	ldr	r3, [pc, #240]	; (80038c8 <_ZN11Screen1ViewC1Ev+0x100>)
 80037d6:	f506 45c7 	add.w	r5, r6, #25472	; 0x6380
 80037da:	f840 3b6c 	str.w	r3, [r0], #108
 80037de:	f7ff ff09 	bl	80035f4 <_ZN8touchgfx3BoxC1Ev>
 80037e2:	f106 0498 	add.w	r4, r6, #152	; 0x98
 80037e6:	3518      	adds	r5, #24
 80037e8:	4620      	mov	r0, r4
 80037ea:	342c      	adds	r4, #44	; 0x2c
 80037ec:	f7ff ff02 	bl	80035f4 <_ZN8touchgfx3BoxC1Ev>
 80037f0:	42ac      	cmp	r4, r5
 80037f2:	d1f9      	bne.n	80037e8 <_ZN11Screen1ViewC1Ev+0x20>
 80037f4:	4f35      	ldr	r7, [pc, #212]	; (80038cc <_ZN11Screen1ViewC1Ev+0x104>)
 80037f6:	2418      	movs	r4, #24
 80037f8:	46b8      	mov	r8, r7
 80037fa:	2500      	movs	r5, #0
			grid[c][r] = rand()%2;
 80037fc:	f025 f95e 	bl	8028abc <rand>
 8003800:	2800      	cmp	r0, #0
 8003802:	f000 0001 	and.w	r0, r0, #1
 8003806:	bfb8      	it	lt
 8003808:	4240      	neglt	r0, r0
 800380a:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
		for(uint8_t c = 0; c < COLS; c ++ ){
 800380e:	3518      	adds	r5, #24
 8003810:	f5b5 7f10 	cmp.w	r5, #576	; 0x240
 8003814:	d1f2      	bne.n	80037fc <_ZN11Screen1ViewC1Ev+0x34>
	for(uint8_t r = 0; r < ROWS; r ++ ){
 8003816:	3c01      	subs	r4, #1
 8003818:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800381c:	f108 0804 	add.w	r8, r8, #4
 8003820:	d1eb      	bne.n	80037fa <_ZN11Screen1ViewC1Ev+0x32>
	uint16_t index = 0;
 8003822:	46a0      	mov	r8, r4
			box[index].setPosition(0+c*20, 0+r*20, 20, 20);
 8003824:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
 8003828:	f04f 0900 	mov.w	r9, #0
 800382c:	fa0f fb84 	sxth.w	fp, r4
 8003830:	fa18 f589 	uxtah	r5, r8, r9
 8003834:	b2ad      	uxth	r5, r5
 8003836:	fb0a f505 	mul.w	r5, sl, r5
 800383a:	fa1f f189 	uxth.w	r1, r9
 800383e:	f105 0098 	add.w	r0, r5, #152	; 0x98
        setX(x);
 8003842:	4435      	add	r5, r6
 8003844:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003848:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800384c:	4430      	add	r0, r6
 800384e:	0089      	lsls	r1, r1, #2
 8003850:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003852:	b209      	sxth	r1, r1
 8003854:	9001      	str	r0, [sp, #4]
 8003856:	4790      	blx	r2
        setY(y);
 8003858:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 800385c:	4659      	mov	r1, fp
 800385e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003860:	9801      	ldr	r0, [sp, #4]
 8003862:	4790      	blx	r2
        setWidth(width);
 8003864:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003868:	2114      	movs	r1, #20
 800386a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800386c:	9801      	ldr	r0, [sp, #4]
 800386e:	4790      	blx	r2
        setHeight(height);
 8003870:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003874:	2114      	movs	r1, #20
 8003876:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003878:	9801      	ldr	r0, [sp, #4]
 800387a:	4790      	blx	r2
			if(grid[c][r] != 0){
 800387c:	2260      	movs	r2, #96	; 0x60
 800387e:	fb02 f209 	mul.w	r2, r2, r9
 8003882:	58ba      	ldr	r2, [r7, r2]
 8003884:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <_ZN11Screen1ViewC1Ev+0x108>)
 8003886:	2a00      	cmp	r2, #0
 8003888:	bf14      	ite	ne
 800388a:	461a      	movne	r2, r3
 800388c:	f04f 427f 	moveq.w	r2, #4278190080	; 0xff000000
 8003890:	9801      	ldr	r0, [sp, #4]
 8003892:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
 8003896:	4601      	mov	r1, r0
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003898:	f109 0901 	add.w	r9, r9, #1
 800389c:	1d30      	adds	r0, r6, #4
 800389e:	f011 fecb 	bl	8015638 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80038a2:	f1b9 0f18 	cmp.w	r9, #24
 80038a6:	d1c3      	bne.n	8003830 <_ZN11Screen1ViewC1Ev+0x68>
			index++;
 80038a8:	f108 0818 	add.w	r8, r8, #24
 80038ac:	fa1f f888 	uxth.w	r8, r8
	for(uint8_t r = 0; r < ROWS; r ++ ){
 80038b0:	3414      	adds	r4, #20
 80038b2:	f5b8 7f10 	cmp.w	r8, #576	; 0x240
 80038b6:	b2a4      	uxth	r4, r4
 80038b8:	f107 0704 	add.w	r7, r7, #4
 80038bc:	d1b4      	bne.n	8003828 <_ZN11Screen1ViewC1Ev+0x60>
}
 80038be:	4630      	mov	r0, r6
 80038c0:	b003      	add	sp, #12
 80038c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c6:	bf00      	nop
 80038c8:	0802a75c 	.word	0x0802a75c
 80038cc:	20196558 	.word	0x20196558
 80038d0:	ff0077b2 	.word	0xff0077b2

080038d4 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80038d4:	f7ff bc86 	b.w	80031e4 <_ZN15Screen1ViewBase11setupScreenEv>

080038d8 <APS512XX_EnableMemoryMappedMode>:
  * @param  BurstType Type of burst used for the access
  * @retval Memory status
  */
int32_t APS512XX_EnableMemoryMappedMode(XSPI_HandleTypeDef *Ctx, uint32_t ReadLatencyCode, uint32_t WriteLatencyCode,
                                        uint32_t IOMode, uint32_t BurstType)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b09a      	sub	sp, #104	; 0x68
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
  XSPI_RegularCmdTypeDef   sCommand = {0};
 80038e6:	f107 0318 	add.w	r3, r7, #24
 80038ea:	2250      	movs	r2, #80	; 0x50
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f024 fc7d 	bl	80281ee <memset>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 80038f4:	f107 0310 	add.w	r3, r7, #16
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]

  /* Initialize the write command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_WRITE_CFG;
 80038fe:	2302      	movs	r3, #2
 8003900:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 8003902:	2304      	movs	r3, #4
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 8003906:	2300      	movs	r3, #0
 8003908:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800390a:	2300      	movs	r3, #0
 800390c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction         = ((BurstType == 0U) ? APS512XX_WRITE_LINEAR_BURST_CMD : APS512XX_WRITE_CMD);
 800390e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <APS512XX_EnableMemoryMappedMode+0x40>
 8003914:	23a0      	movs	r3, #160	; 0xa0
 8003916:	e000      	b.n	800391a <APS512XX_EnableMemoryMappedMode+0x42>
 8003918:	2380      	movs	r3, #128	; 0x80
 800391a:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 800391c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003920:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 8003922:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003926:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8003928:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800392c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 800392e:	2300      	movs	r3, #0
 8003930:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode            = ((IOMode == 0U) ? HAL_XSPI_DATA_8_LINES : HAL_XSPI_DATA_16_LINES);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <APS512XX_EnableMemoryMappedMode+0x66>
 8003938:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800393c:	e001      	b.n	8003942 <APS512XX_EnableMemoryMappedMode+0x6a>
 800393e:	f04f 63a0 	mov.w	r3, #83886080	; 0x5000000
 8003942:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 8003944:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003948:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3b01      	subs	r3, #1
 800394e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
 8003950:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003954:	663b      	str	r3, [r7, #96]	; 0x60
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003956:	2300      	movs	r3, #0
 8003958:	667b      	str	r3, [r7, #100]	; 0x64
#endif

  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800395a:	f107 0318 	add.w	r3, r7, #24
 800395e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003962:	4619      	mov	r1, r3
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f00e fb07 	bl	8011f78 <HAL_XSPI_Command>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <APS512XX_EnableMemoryMappedMode+0x9e>
  {
    return APS512XX_ERROR;
 8003970:	f04f 33ff 	mov.w	r3, #4294967295
 8003974:	e028      	b.n	80039c8 <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  /* Initialize the read command */
  sCommand.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
 8003976:	2301      	movs	r3, #1
 8003978:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction   = ((BurstType == 0U) ? APS512XX_READ_LINEAR_BURST_CMD : APS512XX_READ_CMD);
 800397a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <APS512XX_EnableMemoryMappedMode+0xac>
 8003980:	2320      	movs	r3, #32
 8003982:	e000      	b.n	8003986 <APS512XX_EnableMemoryMappedMode+0xae>
 8003984:	2300      	movs	r3, #0
 8003986:	623b      	str	r3, [r7, #32]
  sCommand.DummyCycles   = (ReadLatencyCode - 1U);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	3b01      	subs	r3, #1
 800398c:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800398e:	f107 0318 	add.w	r3, r7, #24
 8003992:	f241 3288 	movw	r2, #5000	; 0x1388
 8003996:	4619      	mov	r1, r3
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f00e faed 	bl	8011f78 <HAL_XSPI_Command>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <APS512XX_EnableMemoryMappedMode+0xd2>
  {
    return APS512XX_ERROR;
 80039a4:	f04f 33ff 	mov.w	r3, #4294967295
 80039a8:	e00e      	b.n	80039c8 <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  /* Activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 80039aa:	2300      	movs	r3, #0
 80039ac:	613b      	str	r3, [r7, #16]

  if (HAL_XSPI_MemoryMapped(Ctx, &sMemMappedCfg) != HAL_OK)
 80039ae:	f107 0310 	add.w	r3, r7, #16
 80039b2:	4619      	mov	r1, r3
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f00e fd6b 	bl	8012490 <HAL_XSPI_MemoryMapped>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <APS512XX_EnableMemoryMappedMode+0xee>
  {
    return APS512XX_ERROR;
 80039c0:	f04f 33ff 	mov.w	r3, #4294967295
 80039c4:	e000      	b.n	80039c8 <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  return APS512XX_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3768      	adds	r7, #104	; 0x68
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <APS512XX_ReadReg>:
  * @param  Value Register value pointer
  * @param  LatencyCode Latency used for the access
  * @retval error status
  */
int32_t APS512XX_ReadReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t *Value, uint32_t LatencyCode)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b098      	sub	sp, #96	; 0x60
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
  XSPI_RegularCmdTypeDef sCommand = {0};
 80039de:	f107 0310 	add.w	r3, r7, #16
 80039e2:	2250      	movs	r2, #80	; 0x50
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f024 fc01 	bl	80281ee <memset>

  /* Initialize the read register command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_COMMON_CFG;
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 80039f0:	2304      	movs	r3, #4
 80039f2:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 80039f4:	2300      	movs	r3, #0
 80039f6:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80039f8:	2300      	movs	r3, #0
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction         = APS512XX_READ_REG_CMD;
 80039fc:	2340      	movs	r3, #64	; 0x40
 80039fe:	61bb      	str	r3, [r7, #24]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 8003a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 8003a06:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003a0a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8003a0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a10:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.Address             = Address;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
 8003a1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 8003a20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a24:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataLength          = 2;
 8003a26:	2302      	movs	r3, #2
 8003a28:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DummyCycles         = (LatencyCode - 1U);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
 8003a30:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003a34:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003a36:	2300      	movs	r3, #0
 8003a38:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a3a:	f107 0310 	add.w	r3, r7, #16
 8003a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a42:	4619      	mov	r1, r3
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f00e fa97 	bl	8011f78 <HAL_XSPI_Command>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <APS512XX_ReadReg+0x86>
  {
    return APS512XX_ERROR;
 8003a50:	f04f 33ff 	mov.w	r3, #4294967295
 8003a54:	e00c      	b.n	8003a70 <APS512XX_ReadReg+0xa0>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, (uint8_t *)Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f00e fbea 	bl	8012236 <HAL_XSPI_Receive>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <APS512XX_ReadReg+0x9e>
  {
    return APS512XX_ERROR;
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6c:	e000      	b.n	8003a70 <APS512XX_ReadReg+0xa0>
  }

  return APS512XX_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3760      	adds	r7, #96	; 0x60
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <APS512XX_WriteReg>:
  * @param  Address Register address
  * @param  Value Value to write to register
  * @retval error status
  */
int32_t APS512XX_WriteReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t Value)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b098      	sub	sp, #96	; 0x60
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	4613      	mov	r3, r2
 8003a84:	71fb      	strb	r3, [r7, #7]
  XSPI_RegularCmdTypeDef sCommand = {0};
 8003a86:	f107 0310 	add.w	r3, r7, #16
 8003a8a:	2250      	movs	r2, #80	; 0x50
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f024 fbad 	bl	80281ee <memset>

  /* Initialize the write register command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_COMMON_CFG;
 8003a94:	2300      	movs	r3, #0
 8003a96:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 8003a98:	2304      	movs	r3, #4
 8003a9a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction         = APS512XX_WRITE_REG_CMD;
 8003aa4:	23c0      	movs	r3, #192	; 0xc0
 8003aa6:	61bb      	str	r3, [r7, #24]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 8003aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 8003aae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003ab2:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8003ab4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.Address             = Address;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
 8003ac2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 8003ac8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003acc:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataLength          = 2;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DummyCycles         = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode             = HAL_XSPI_DQS_DISABLE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003ada:	2300      	movs	r3, #0
 8003adc:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ade:	f107 0310 	add.w	r3, r7, #16
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f00e fa45 	bl	8011f78 <HAL_XSPI_Command>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <APS512XX_WriteReg+0x82>
  {
    return APS512XX_ERROR;
 8003af4:	f04f 33ff 	mov.w	r3, #4294967295
 8003af8:	e00d      	b.n	8003b16 <APS512XX_WriteReg+0x9e>
  }

  /* Transmission of the data */
  if (HAL_XSPI_Transmit(Ctx, (uint8_t *)(&Value), HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003afa:	1dfb      	adds	r3, r7, #7
 8003afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b00:	4619      	mov	r1, r3
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f00e fb24 	bl	8012150 <HAL_XSPI_Transmit>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <APS512XX_WriteReg+0x9c>
  {
    return APS512XX_ERROR;
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b12:	e000      	b.n	8003b16 <APS512XX_WriteReg+0x9e>
  }

  return APS512XX_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3760      	adds	r7, #96	; 0x60
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <APS512XX_Reset>:
  * @brief  Reset the memory
  * @param  Ctx Component object pointer
  * @retval error status
  */
int32_t APS512XX_Reset(XSPI_HandleTypeDef *Ctx)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b096      	sub	sp, #88	; 0x58
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  XSPI_RegularCmdTypeDef sCommand = {0};
 8003b26:	f107 0308 	add.w	r3, r7, #8
 8003b2a:	2250      	movs	r2, #80	; 0x50
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f024 fb5d 	bl	80281ee <memset>

  /* Initialize the command */
  sCommand.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60bb      	str	r3, [r7, #8]
  sCommand.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 8003b38:	2304      	movs	r3, #4
 8003b3a:	617b      	str	r3, [r7, #20]
  sCommand.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
  sCommand.Instruction        = APS512XX_RESET_CMD;
 8003b44:	23ff      	movs	r3, #255	; 0xff
 8003b46:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8003b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressWidth       = HAL_XSPI_ADDRESS_24_BITS;
 8003b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Address            = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_XSPI_DATA_NONE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataLength         = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles        = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	653b      	str	r3, [r7, #80]	; 0x50
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003b70:	2300      	movs	r3, #0
 8003b72:	657b      	str	r3, [r7, #84]	; 0x54
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b74:	f107 0308 	add.w	r3, r7, #8
 8003b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f00e f9fa 	bl	8011f78 <HAL_XSPI_Command>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <APS512XX_Reset+0x72>
  {
    return APS512XX_ERROR;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8e:	e003      	b.n	8003b98 <APS512XX_Reset+0x7a>
  }

  /* Need to wait tRST */
  HAL_Delay(1);
 8003b90:	2001      	movs	r0, #1
 8003b92:	f003 fc15 	bl	80073c0 <HAL_Delay>
  return 0/*APS512XX_OK*/;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3758      	adds	r7, #88	; 0x58
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <MX25UM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25UM51245G_GetFlashInfo(MX25UM51245G_Info_t *pInfo)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25UM51245G_FLASH_SIZE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003bae:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25UM51245G_SECTOR_64K;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003bb6:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SECTOR_64K);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bbe:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25UM51245G_SUBSECTOR_4K;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bc6:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bce:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bd6:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bde:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25UM51245G_PAGE_SIZE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003be6:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003bee:	621a      	str	r2, [r3, #32]

  return MX25UM51245G_OK;
 8003bf0:	2300      	movs	r3, #0
};
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <MX25UM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25UM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                         MX25UM51245G_Transfer_t Rate)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b09c      	sub	sp, #112	; 0x70
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	460b      	mov	r3, r1
 8003c08:	70fb      	strb	r3, [r7, #3]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef  s_command = {0};
 8003c0e:	f107 0320 	add.w	r3, r7, #32
 8003c12:	2250      	movs	r2, #80	; 0x50
 8003c14:	2100      	movs	r1, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	f024 fae9 	bl	80281ee <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
 8003c1c:	f107 030c 	add.w	r3, r7, #12
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	60da      	str	r2, [r3, #12]
 8003c2a:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d105      	bne.n	8003c3e <MX25UM51245G_AutoPollingMemReady+0x40>
 8003c32:	78bb      	ldrb	r3, [r7, #2]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d102      	bne.n	8003c3e <MX25UM51245G_AutoPollingMemReady+0x40>
  {
    return MX25UM51245G_ERROR;
 8003c38:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3c:	e08d      	b.n	8003d5a <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	623b      	str	r3, [r7, #32]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8003c42:	2300      	movs	r3, #0
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <MX25UM51245G_AutoPollingMemReady+0x52>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <MX25UM51245G_AutoPollingMemReady+0x54>
 8003c50:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003c54:	78bb      	ldrb	r3, [r7, #2]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <MX25UM51245G_AutoPollingMemReady+0x60>
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	e000      	b.n	8003c60 <MX25UM51245G_AutoPollingMemReady+0x62>
 8003c5e:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8003c60:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <MX25UM51245G_AutoPollingMemReady+0x6e>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e000      	b.n	8003c6e <MX25UM51245G_AutoPollingMemReady+0x70>
 8003c6c:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8003c6e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_STATUS_REG_CMD
                                 : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <MX25UM51245G_AutoPollingMemReady+0x7c>
 8003c76:	2305      	movs	r3, #5
 8003c78:	e001      	b.n	8003c7e <MX25UM51245G_AutoPollingMemReady+0x80>
 8003c7a:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <MX25UM51245G_AutoPollingMemReady+0x8c>
 8003c86:	2300      	movs	r3, #0
 8003c88:	e001      	b.n	8003c8e <MX25UM51245G_AutoPollingMemReady+0x90>
 8003c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 8003c90:	78bb      	ldrb	r3, [r7, #2]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d102      	bne.n	8003c9c <MX25UM51245G_AutoPollingMemReady+0x9e>
 8003c96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c9a:	e000      	b.n	8003c9e <MX25UM51245G_AutoPollingMemReady+0xa0>
 8003c9c:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 8003c9e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8003ca0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003ca4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8003caa:	2300      	movs	r3, #0
 8003cac:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d102      	bne.n	8003cba <MX25UM51245G_AutoPollingMemReady+0xbc>
 8003cb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cb8:	e001      	b.n	8003cbe <MX25UM51245G_AutoPollingMemReady+0xc0>
 8003cba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003cbe:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 8003cc0:	78bb      	ldrb	r3, [r7, #2]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d102      	bne.n	8003ccc <MX25UM51245G_AutoPollingMemReady+0xce>
 8003cc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cca:	e000      	b.n	8003cce <MX25UM51245G_AutoPollingMemReady+0xd0>
 8003ccc:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 8003cce:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d006      	beq.n	8003ce4 <MX25UM51245G_AutoPollingMemReady+0xe6>
 8003cd6:	78bb      	ldrb	r3, [r7, #2]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <MX25UM51245G_AutoPollingMemReady+0xe2>
 8003cdc:	2305      	movs	r3, #5
 8003cde:	e002      	b.n	8003ce6 <MX25UM51245G_AutoPollingMemReady+0xe8>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	e000      	b.n	8003ce6 <MX25UM51245G_AutoPollingMemReady+0xe8>
 8003ce4:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
 8003ce6:	667b      	str	r3, [r7, #100]	; 0x64
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003ce8:	78bb      	ldrb	r3, [r7, #2]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <MX25UM51245G_AutoPollingMemReady+0xf4>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e000      	b.n	8003cf4 <MX25UM51245G_AutoPollingMemReady+0xf6>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 8003cf6:	78bb      	ldrb	r3, [r7, #2]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d102      	bne.n	8003d02 <MX25UM51245G_AutoPollingMemReady+0x104>
 8003cfc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003d00:	e000      	b.n	8003d04 <MX25UM51245G_AutoPollingMemReady+0x106>
 8003d02:	2300      	movs	r3, #0
 8003d04:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003d06:	2300      	movs	r3, #0
 8003d08:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.MatchValue    = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_XSPI_MATCH_MODE_AND;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
  s_config.IntervalTime  = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
 8003d16:	2310      	movs	r3, #16
 8003d18:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 8003d1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d1e:	61bb      	str	r3, [r7, #24]

  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d20:	f107 0320 	add.w	r3, r7, #32
 8003d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d28:	4619      	mov	r1, r3
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f00e f924 	bl	8011f78 <HAL_XSPI_Command>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <MX25UM51245G_AutoPollingMemReady+0x13e>
  {
    return MX25UM51245G_ERROR;
 8003d36:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3a:	e00e      	b.n	8003d5a <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d3c:	f107 030c 	add.w	r3, r7, #12
 8003d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d44:	4619      	mov	r1, r3
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f00e fb18 	bl	801237c <HAL_XSPI_AutoPolling>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <MX25UM51245G_AutoPollingMemReady+0x15a>
  {
    return MX25UM51245G_ERROR;
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295
 8003d56:	e000      	b.n	8003d5a <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  return MX25UM51245G_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3770      	adds	r7, #112	; 0x70
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <MX25UM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                               MX25UM51245G_AddressSize_t AddressSize)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b098      	sub	sp, #96	; 0x60
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	70fb      	strb	r3, [r7, #3]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef      s_command = {0};
 8003d72:	f107 0310 	add.w	r3, r7, #16
 8003d76:	2250      	movs	r2, #80	; 0x50
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f024 fa37 	bl	80281ee <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003d80:	f107 0308 	add.w	r3, r7, #8
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
 8003d8a:	78fb      	ldrb	r3, [r7, #3]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d105      	bne.n	8003d9c <MX25UM51245G_EnableSTRMemoryMappedMode+0x3a>
 8003d90:	78bb      	ldrb	r3, [r7, #2]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d102      	bne.n	8003d9c <MX25UM51245G_EnableSTRMemoryMappedMode+0x3a>
  {
    return MX25UM51245G_ERROR;
 8003d96:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9a:	e088      	b.n	8003eae <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <MX25UM51245G_EnableSTRMemoryMappedMode+0x4c>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x4e>
 8003dae:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8003db0:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003db2:	2300      	movs	r3, #0
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x5e>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e000      	b.n	8003dc2 <MX25UM51245G_EnableSTRMemoryMappedMode+0x60>
 8003dc0:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8003dc2:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_FAST_READ_CMD
                                    : MX25UM51245G_4_BYTE_ADDR_FAST_READ_CMD)
                                 : MX25UM51245G_OCTA_READ_CMD;
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <MX25UM51245G_EnableSTRMemoryMappedMode+0x76>
 8003dca:	78bb      	ldrb	r3, [r7, #2]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <MX25UM51245G_EnableSTRMemoryMappedMode+0x72>
 8003dd0:	230b      	movs	r3, #11
 8003dd2:	e003      	b.n	8003ddc <MX25UM51245G_EnableSTRMemoryMappedMode+0x7a>
 8003dd4:	230c      	movs	r3, #12
 8003dd6:	e001      	b.n	8003ddc <MX25UM51245G_EnableSTRMemoryMappedMode+0x7a>
 8003dd8:	f64e 4313 	movw	r3, #60435	; 0xec13
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8003ddc:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <MX25UM51245G_EnableSTRMemoryMappedMode+0x88>
 8003de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003de8:	e001      	b.n	8003dee <MX25UM51245G_EnableSTRMemoryMappedMode+0x8c>
 8003dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8003df0:	2300      	movs	r3, #0
 8003df2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
                                 ? HAL_XSPI_ADDRESS_24_BITS
                                 : HAL_XSPI_ADDRESS_32_BITS;
 8003df4:	78bb      	ldrb	r3, [r7, #2]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d102      	bne.n	8003e00 <MX25UM51245G_EnableSTRMemoryMappedMode+0x9e>
 8003dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dfe:	e001      	b.n	8003e04 <MX25UM51245G_EnableSTRMemoryMappedMode+0xa2>
 8003e00:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
 8003e04:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d102      	bne.n	8003e16 <MX25UM51245G_EnableSTRMemoryMappedMode+0xb4>
 8003e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e14:	e001      	b.n	8003e1a <MX25UM51245G_EnableSTRMemoryMappedMode+0xb8>
 8003e16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <MX25UM51245G_EnableSTRMemoryMappedMode+0xc8>
 8003e26:	2308      	movs	r3, #8
 8003e28:	e000      	b.n	8003e2c <MX25UM51245G_EnableSTRMemoryMappedMode+0xca>
 8003e2a:	2306      	movs	r3, #6
 8003e2c:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003e32:	2300      	movs	r3, #0
 8003e34:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e36:	f107 0310 	add.w	r3, r7, #16
 8003e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f00e f899 	bl	8011f78 <HAL_XSPI_Command>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <MX25UM51245G_EnableSTRMemoryMappedMode+0xf0>
  {
    return MX25UM51245G_ERROR;
 8003e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e50:	e02d      	b.n	8003eae <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
 8003e52:	2302      	movs	r3, #2
 8003e54:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_PAGE_PROG_CMD
                                    : MX25UM51245G_4_BYTE_PAGE_PROG_CMD)
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
 8003e56:	78fb      	ldrb	r3, [r7, #3]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d106      	bne.n	8003e6a <MX25UM51245G_EnableSTRMemoryMappedMode+0x108>
 8003e5c:	78bb      	ldrb	r3, [r7, #2]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <MX25UM51245G_EnableSTRMemoryMappedMode+0x104>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e003      	b.n	8003e6e <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
 8003e66:	2312      	movs	r3, #18
 8003e68:	e001      	b.n	8003e6e <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
 8003e6a:	f241 23ed 	movw	r3, #4845	; 0x12ed
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8003e6e:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e74:	f107 0310 	add.w	r3, r7, #16
 8003e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f00e f87a 	bl	8011f78 <HAL_XSPI_Command>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <MX25UM51245G_EnableSTRMemoryMappedMode+0x12e>
  {
    return MX25UM51245G_ERROR;
 8003e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8e:	e00e      	b.n	8003eae <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60bb      	str	r3, [r7, #8]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8003e94:	f107 0308 	add.w	r3, r7, #8
 8003e98:	4619      	mov	r1, r3
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f00e faf8 	bl	8012490 <HAL_XSPI_MemoryMapped>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <MX25UM51245G_EnableSTRMemoryMappedMode+0x14a>
  {
    return MX25UM51245G_ERROR;
 8003ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eaa:	e000      	b.n	8003eae <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  return MX25UM51245G_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3760      	adds	r7, #96	; 0x60
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <MX25UM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b098      	sub	sp, #96	; 0x60
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef      s_command = {0};
 8003ec2:	f107 0310 	add.w	r3, r7, #16
 8003ec6:	2250      	movs	r2, #80	; 0x50
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f024 f98f 	bl	80281ee <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003ed0:	f107 0308 	add.w	r3, r7, #8
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
 8003eda:	2301      	movs	r3, #1
 8003edc:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 8003ee2:	2304      	movs	r3, #4
 8003ee4:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 8003ee6:	2308      	movs	r3, #8
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = HAL_XSPI_INSTRUCTION_16_BITS;
 8003eea:	2310      	movs	r3, #16
 8003eec:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25UM51245G_OCTA_READ_DTR_CMD;
 8003eee:	f64e 6311 	movw	r3, #60945	; 0xee11
 8003ef2:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8003ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8003efa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003efe:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8003f00:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003f04:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8003f06:	2300      	movs	r3, #0
 8003f08:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
 8003f0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 8003f10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f14:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8003f16:	2306      	movs	r3, #6
 8003f18:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
 8003f1a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003f1e:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003f20:	2300      	movs	r3, #0
 8003f22:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f24:	f107 0310 	add.w	r3, r7, #16
 8003f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f00e f822 	bl	8011f78 <HAL_XSPI_Command>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <MX25UM51245G_EnableDTRMemoryMappedMode+0x8a>
  {
    return MX25UM51245G_ERROR;
 8003f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3e:	e025      	b.n	8003f8c <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
 8003f40:	2302      	movs	r3, #2
 8003f42:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
 8003f44:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8003f48:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_XSPI_DQS_DISABLE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f52:	f107 0310 	add.w	r3, r7, #16
 8003f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f00e f80b 	bl	8011f78 <HAL_XSPI_Command>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <MX25UM51245G_EnableDTRMemoryMappedMode+0xb8>
  {
    return MX25UM51245G_ERROR;
 8003f68:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6c:	e00e      	b.n	8003f8c <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60bb      	str	r3, [r7, #8]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8003f72:	f107 0308 	add.w	r3, r7, #8
 8003f76:	4619      	mov	r1, r3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f00e fa89 	bl	8012490 <HAL_XSPI_MemoryMapped>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <MX25UM51245G_EnableDTRMemoryMappedMode+0xd4>
  {
    return MX25UM51245G_ERROR;
 8003f84:	f04f 33ff 	mov.w	r3, #4294967295
 8003f88:	e000      	b.n	8003f8c <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  return MX25UM51245G_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3760      	adds	r7, #96	; 0x60
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <MX25UM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b09c      	sub	sp, #112	; 0x70
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef     s_command = {0};
 8003fa4:	f107 0320 	add.w	r3, r7, #32
 8003fa8:	2250      	movs	r2, #80	; 0x50
 8003faa:	2100      	movs	r1, #0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f024 f91e 	bl	80281ee <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
 8003fb2:	f107 030c 	add.w	r3, r7, #12
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	605a      	str	r2, [r3, #4]
 8003fbc:	609a      	str	r2, [r3, #8]
 8003fbe:	60da      	str	r2, [r3, #12]
 8003fc0:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d105      	bne.n	8003fd4 <MX25UM51245G_WriteEnable+0x40>
 8003fc8:	78bb      	ldrb	r3, [r7, #2]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d102      	bne.n	8003fd4 <MX25UM51245G_WriteEnable+0x40>
  {
    return MX25UM51245G_ERROR;
 8003fce:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd2:	e0ab      	b.n	800412c <MX25UM51245G_WriteEnable+0x198>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	623b      	str	r3, [r7, #32]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <MX25UM51245G_WriteEnable+0x52>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <MX25UM51245G_WriteEnable+0x54>
 8003fe6:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8003fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003fea:	78bb      	ldrb	r3, [r7, #2]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <MX25UM51245G_WriteEnable+0x60>
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	e000      	b.n	8003ff6 <MX25UM51245G_WriteEnable+0x62>
 8003ff4:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8003ff6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <MX25UM51245G_WriteEnable+0x6e>
 8003ffe:	2300      	movs	r3, #0
 8004000:	e000      	b.n	8004004 <MX25UM51245G_WriteEnable+0x70>
 8004002:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004004:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_ENABLE_CMD
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
 8004006:	78fb      	ldrb	r3, [r7, #3]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <MX25UM51245G_WriteEnable+0x7c>
 800400c:	2306      	movs	r3, #6
 800400e:	e001      	b.n	8004014 <MX25UM51245G_WriteEnable+0x80>
 8004010:	f240 63f9 	movw	r3, #1785	; 0x6f9
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004014:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8004016:	2300      	movs	r3, #0
 8004018:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 800401a:	2300      	movs	r3, #0
 800401c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 800401e:	2300      	movs	r3, #0
 8004020:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8004026:	2300      	movs	r3, #0
 8004028:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 800402a:	2300      	movs	r3, #0
 800402c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800402e:	f107 0320 	add.w	r3, r7, #32
 8004032:	f241 3288 	movw	r2, #5000	; 0x1388
 8004036:	4619      	mov	r1, r3
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f00d ff9d 	bl	8011f78 <HAL_XSPI_Command>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <MX25UM51245G_WriteEnable+0xb6>
  {
    return MX25UM51245G_ERROR;
 8004044:	f04f 33ff 	mov.w	r3, #4294967295
 8004048:	e070      	b.n	800412c <MX25UM51245G_WriteEnable+0x198>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
                             ? MX25UM51245G_READ_STATUS_REG_CMD
                             : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
 800404a:	78fb      	ldrb	r3, [r7, #3]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <MX25UM51245G_WriteEnable+0xc0>
 8004050:	2305      	movs	r3, #5
 8004052:	e001      	b.n	8004058 <MX25UM51245G_WriteEnable+0xc4>
 8004054:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
 8004058:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <MX25UM51245G_WriteEnable+0xd0>
 8004060:	2300      	movs	r3, #0
 8004062:	e001      	b.n	8004068 <MX25UM51245G_WriteEnable+0xd4>
 8004064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004068:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                             ? HAL_XSPI_ADDRESS_DTR_ENABLE
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
 800406a:	78bb      	ldrb	r3, [r7, #2]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d102      	bne.n	8004076 <MX25UM51245G_WriteEnable+0xe2>
 8004070:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004074:	e000      	b.n	8004078 <MX25UM51245G_WriteEnable+0xe4>
 8004076:	2300      	movs	r3, #0
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004078:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
 800407a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800407e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d102      	bne.n	8004090 <MX25UM51245G_WriteEnable+0xfc>
 800408a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800408e:	e001      	b.n	8004094 <MX25UM51245G_WriteEnable+0x100>
 8004090:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004094:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDTRMode    = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
 8004096:	78bb      	ldrb	r3, [r7, #2]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d102      	bne.n	80040a2 <MX25UM51245G_WriteEnable+0x10e>
 800409c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040a0:	e000      	b.n	80040a4 <MX25UM51245G_WriteEnable+0x110>
 80040a2:	2300      	movs	r3, #0
 80040a4:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
                             ? 0U
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d006      	beq.n	80040ba <MX25UM51245G_WriteEnable+0x126>
 80040ac:	78bb      	ldrb	r3, [r7, #2]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <MX25UM51245G_WriteEnable+0x122>
 80040b2:	2305      	movs	r3, #5
 80040b4:	e002      	b.n	80040bc <MX25UM51245G_WriteEnable+0x128>
 80040b6:	2304      	movs	r3, #4
 80040b8:	e000      	b.n	80040bc <MX25UM51245G_WriteEnable+0x128>
 80040ba:	2300      	movs	r3, #0
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
 80040bc:	667b      	str	r3, [r7, #100]	; 0x64
                                ? DUMMY_CYCLES_REG_OCTAL_DTR
                                : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 80040be:	78bb      	ldrb	r3, [r7, #2]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <MX25UM51245G_WriteEnable+0x134>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e000      	b.n	80040ca <MX25UM51245G_WriteEnable+0x136>
 80040c8:	2301      	movs	r3, #1
 80040ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 80040cc:	78bb      	ldrb	r3, [r7, #2]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d102      	bne.n	80040d8 <MX25UM51245G_WriteEnable+0x144>
 80040d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80040d6:	e000      	b.n	80040da <MX25UM51245G_WriteEnable+0x146>
 80040d8:	2300      	movs	r3, #0
 80040da:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040dc:	f107 0320 	add.w	r3, r7, #32
 80040e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e4:	4619      	mov	r1, r3
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f00d ff46 	bl	8011f78 <HAL_XSPI_Command>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <MX25UM51245G_WriteEnable+0x164>
  {
    return MX25UM51245G_ERROR;
 80040f2:	f04f 33ff 	mov.w	r3, #4294967295
 80040f6:	e019      	b.n	800412c <MX25UM51245G_WriteEnable+0x198>
  }

  s_config.MatchValue      = 2U;
 80040f8:	2302      	movs	r3, #2
 80040fa:	60fb      	str	r3, [r7, #12]
  s_config.MatchMask       = 2U;
 80040fc:	2302      	movs	r3, #2
 80040fe:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
 8004100:	2300      	movs	r3, #0
 8004102:	617b      	str	r3, [r7, #20]
  s_config.IntervalTime    = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
 8004104:	2310      	movs	r3, #16
 8004106:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 8004108:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800410c:	61bb      	str	r3, [r7, #24]

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800410e:	f107 030c 	add.w	r3, r7, #12
 8004112:	f241 3288 	movw	r2, #5000	; 0x1388
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f00e f92f 	bl	801237c <HAL_XSPI_AutoPolling>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <MX25UM51245G_WriteEnable+0x196>
  {
    return MX25UM51245G_ERROR;
 8004124:	f04f 33ff 	mov.w	r3, #4294967295
 8004128:	e000      	b.n	800412c <MX25UM51245G_WriteEnable+0x198>
  }

  return MX25UM51245G_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3770      	adds	r7, #112	; 0x70
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <MX25UM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25UM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                       MX25UM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b098      	sub	sp, #96	; 0x60
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	460b      	mov	r3, r1
 8004140:	72fb      	strb	r3, [r7, #11]
 8004142:	4613      	mov	r3, r2
 8004144:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 8004146:	f107 0310 	add.w	r3, r7, #16
 800414a:	2250      	movs	r2, #80	; 0x50
 800414c:	2100      	movs	r1, #0
 800414e:	4618      	mov	r0, r3
 8004150:	f024 f84d 	bl	80281ee <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8004154:	7afb      	ldrb	r3, [r7, #11]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d105      	bne.n	8004166 <MX25UM51245G_WriteCfg2Register+0x32>
 800415a:	7abb      	ldrb	r3, [r7, #10]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d102      	bne.n	8004166 <MX25UM51245G_WriteCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
 8004160:	f04f 33ff 	mov.w	r3, #4294967295
 8004164:	e077      	b.n	8004256 <MX25UM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004166:	2300      	movs	r3, #0
 8004168:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 800416e:	7afb      	ldrb	r3, [r7, #11]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <MX25UM51245G_WriteCfg2Register+0x44>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <MX25UM51245G_WriteCfg2Register+0x46>
 8004178:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 800417a:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800417c:	7abb      	ldrb	r3, [r7, #10]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <MX25UM51245G_WriteCfg2Register+0x52>
 8004182:	2308      	movs	r3, #8
 8004184:	e000      	b.n	8004188 <MX25UM51245G_WriteCfg2Register+0x54>
 8004186:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 800418a:	7afb      	ldrb	r3, [r7, #11]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <MX25UM51245G_WriteCfg2Register+0x60>
 8004190:	2300      	movs	r3, #0
 8004192:	e000      	b.n	8004196 <MX25UM51245G_WriteCfg2Register+0x62>
 8004194:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004196:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8004198:	7afb      	ldrb	r3, [r7, #11]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <MX25UM51245G_WriteCfg2Register+0x6e>
 800419e:	2372      	movs	r3, #114	; 0x72
 80041a0:	e001      	b.n	80041a6 <MX25UM51245G_WriteCfg2Register+0x72>
 80041a2:	f247 238d 	movw	r3, #29325	; 0x728d
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 80041a6:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 80041a8:	7afb      	ldrb	r3, [r7, #11]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d102      	bne.n	80041b4 <MX25UM51245G_WriteCfg2Register+0x80>
 80041ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041b2:	e001      	b.n	80041b8 <MX25UM51245G_WriteCfg2Register+0x84>
 80041b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 80041ba:	7abb      	ldrb	r3, [r7, #10]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d102      	bne.n	80041c6 <MX25UM51245G_WriteCfg2Register+0x92>
 80041c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041c4:	e000      	b.n	80041c8 <MX25UM51245G_WriteCfg2Register+0x94>
 80041c6:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 80041c8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 80041ca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80041ce:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80041d4:	2300      	movs	r3, #0
 80041d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 80041d8:	7afb      	ldrb	r3, [r7, #11]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d102      	bne.n	80041e4 <MX25UM51245G_WriteCfg2Register+0xb0>
 80041de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041e2:	e001      	b.n	80041e8 <MX25UM51245G_WriteCfg2Register+0xb4>
 80041e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80041e8:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 80041ea:	7abb      	ldrb	r3, [r7, #10]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d102      	bne.n	80041f6 <MX25UM51245G_WriteCfg2Register+0xc2>
 80041f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041f4:	e000      	b.n	80041f8 <MX25UM51245G_WriteCfg2Register+0xc4>
 80041f6:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 80041f8:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
 80041fe:	7afb      	ldrb	r3, [r7, #11]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d006      	beq.n	8004212 <MX25UM51245G_WriteCfg2Register+0xde>
 8004204:	7abb      	ldrb	r3, [r7, #10]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <MX25UM51245G_WriteCfg2Register+0xda>
 800420a:	2302      	movs	r3, #2
 800420c:	e002      	b.n	8004214 <MX25UM51245G_WriteCfg2Register+0xe0>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <MX25UM51245G_WriteCfg2Register+0xe0>
 8004212:	2301      	movs	r3, #1
 8004214:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8004216:	2300      	movs	r3, #0
 8004218:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 800421a:	2300      	movs	r3, #0
 800421c:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800421e:	f107 0310 	add.w	r3, r7, #16
 8004222:	f241 3288 	movw	r2, #5000	; 0x1388
 8004226:	4619      	mov	r1, r3
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f00d fea5 	bl	8011f78 <HAL_XSPI_Command>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <MX25UM51245G_WriteCfg2Register+0x106>
  {
    return MX25UM51245G_ERROR;
 8004234:	f04f 33ff 	mov.w	r3, #4294967295
 8004238:	e00d      	b.n	8004256 <MX25UM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800423a:	f241 3288 	movw	r2, #5000	; 0x1388
 800423e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f00d ff84 	bl	8012150 <HAL_XSPI_Transmit>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <MX25UM51245G_WriteCfg2Register+0x120>
  {
    return MX25UM51245G_ERROR;
 800424e:	f04f 33ff 	mov.w	r3, #4294967295
 8004252:	e000      	b.n	8004256 <MX25UM51245G_WriteCfg2Register+0x122>
  }

  return MX25UM51245G_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3760      	adds	r7, #96	; 0x60
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <MX25UM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25UM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                      MX25UM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b098      	sub	sp, #96	; 0x60
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	607b      	str	r3, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	72fb      	strb	r3, [r7, #11]
 800426c:	4613      	mov	r3, r2
 800426e:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 8004270:	f107 0310 	add.w	r3, r7, #16
 8004274:	2250      	movs	r2, #80	; 0x50
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f023 ffb8 	bl	80281ee <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 800427e:	7afb      	ldrb	r3, [r7, #11]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d105      	bne.n	8004290 <MX25UM51245G_ReadCfg2Register+0x32>
 8004284:	7abb      	ldrb	r3, [r7, #10]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d102      	bne.n	8004290 <MX25UM51245G_ReadCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
 800428a:	f04f 33ff 	mov.w	r3, #4294967295
 800428e:	e081      	b.n	8004394 <MX25UM51245G_ReadCfg2Register+0x136>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004298:	7afb      	ldrb	r3, [r7, #11]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <MX25UM51245G_ReadCfg2Register+0x44>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <MX25UM51245G_ReadCfg2Register+0x46>
 80042a2:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 80042a4:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80042a6:	7abb      	ldrb	r3, [r7, #10]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <MX25UM51245G_ReadCfg2Register+0x52>
 80042ac:	2308      	movs	r3, #8
 80042ae:	e000      	b.n	80042b2 <MX25UM51245G_ReadCfg2Register+0x54>
 80042b0:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 80042b4:	7afb      	ldrb	r3, [r7, #11]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <MX25UM51245G_ReadCfg2Register+0x60>
 80042ba:	2300      	movs	r3, #0
 80042bc:	e000      	b.n	80042c0 <MX25UM51245G_ReadCfg2Register+0x62>
 80042be:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 80042c0:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_READ_CFG_REG2_CMD;
 80042c2:	7afb      	ldrb	r3, [r7, #11]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <MX25UM51245G_ReadCfg2Register+0x6e>
 80042c8:	2371      	movs	r3, #113	; 0x71
 80042ca:	e001      	b.n	80042d0 <MX25UM51245G_ReadCfg2Register+0x72>
 80042cc:	f247 138e 	movw	r3, #29070	; 0x718e
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 80042d0:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 80042d2:	7afb      	ldrb	r3, [r7, #11]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d102      	bne.n	80042de <MX25UM51245G_ReadCfg2Register+0x80>
 80042d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042dc:	e001      	b.n	80042e2 <MX25UM51245G_ReadCfg2Register+0x84>
 80042de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 80042e4:	7abb      	ldrb	r3, [r7, #10]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d102      	bne.n	80042f0 <MX25UM51245G_ReadCfg2Register+0x92>
 80042ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042ee:	e000      	b.n	80042f2 <MX25UM51245G_ReadCfg2Register+0x94>
 80042f0:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 80042f2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 80042f4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80042f8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80042fe:	2300      	movs	r3, #0
 8004300:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8004302:	7afb      	ldrb	r3, [r7, #11]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d102      	bne.n	800430e <MX25UM51245G_ReadCfg2Register+0xb0>
 8004308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800430c:	e001      	b.n	8004312 <MX25UM51245G_ReadCfg2Register+0xb4>
 800430e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004312:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 8004314:	7abb      	ldrb	r3, [r7, #10]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d102      	bne.n	8004320 <MX25UM51245G_ReadCfg2Register+0xc2>
 800431a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800431e:	e000      	b.n	8004322 <MX25UM51245G_ReadCfg2Register+0xc4>
 8004320:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004322:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
 8004324:	7afb      	ldrb	r3, [r7, #11]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d006      	beq.n	8004338 <MX25UM51245G_ReadCfg2Register+0xda>
 800432a:	7abb      	ldrb	r3, [r7, #10]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <MX25UM51245G_ReadCfg2Register+0xd6>
 8004330:	2305      	movs	r3, #5
 8004332:	e002      	b.n	800433a <MX25UM51245G_ReadCfg2Register+0xdc>
 8004334:	2304      	movs	r3, #4
 8004336:	e000      	b.n	800433a <MX25UM51245G_ReadCfg2Register+0xdc>
 8004338:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
 800433a:	657b      	str	r3, [r7, #84]	; 0x54
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 800433c:	7abb      	ldrb	r3, [r7, #10]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <MX25UM51245G_ReadCfg2Register+0xe8>
 8004342:	2302      	movs	r3, #2
 8004344:	e000      	b.n	8004348 <MX25UM51245G_ReadCfg2Register+0xea>
 8004346:	2301      	movs	r3, #1
 8004348:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 800434a:	7abb      	ldrb	r3, [r7, #10]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d102      	bne.n	8004356 <MX25UM51245G_ReadCfg2Register+0xf8>
 8004350:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004354:	e000      	b.n	8004358 <MX25UM51245G_ReadCfg2Register+0xfa>
 8004356:	2300      	movs	r3, #0
 8004358:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 800435a:	2300      	movs	r3, #0
 800435c:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800435e:	f107 0310 	add.w	r3, r7, #16
 8004362:	f241 3288 	movw	r2, #5000	; 0x1388
 8004366:	4619      	mov	r1, r3
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f00d fe05 	bl	8011f78 <HAL_XSPI_Command>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <MX25UM51245G_ReadCfg2Register+0x11c>
  {
    return MX25UM51245G_ERROR;
 8004374:	f04f 33ff 	mov.w	r3, #4294967295
 8004378:	e00c      	b.n	8004394 <MX25UM51245G_ReadCfg2Register+0x136>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800437a:	f241 3288 	movw	r2, #5000	; 0x1388
 800437e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f00d ff58 	bl	8012236 <HAL_XSPI_Receive>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <MX25UM51245G_ReadCfg2Register+0x134>
  {
    return MX25UM51245G_ERROR;
 800438c:	f04f 33ff 	mov.w	r3, #4294967295
 8004390:	e000      	b.n	8004394 <MX25UM51245G_ReadCfg2Register+0x136>
  }

  return MX25UM51245G_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3760      	adds	r7, #96	; 0x60
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <MX25UM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b096      	sub	sp, #88	; 0x58
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	70fb      	strb	r3, [r7, #3]
 80043a8:	4613      	mov	r3, r2
 80043aa:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
 80043ac:	f107 0308 	add.w	r3, r7, #8
 80043b0:	2250      	movs	r2, #80	; 0x50
 80043b2:	2100      	movs	r1, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f023 ff1a 	bl	80281ee <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 80043ba:	78fb      	ldrb	r3, [r7, #3]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d105      	bne.n	80043cc <MX25UM51245G_ResetEnable+0x30>
 80043c0:	78bb      	ldrb	r3, [r7, #2]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d102      	bne.n	80043cc <MX25UM51245G_ResetEnable+0x30>
  {
    return MX25UM51245G_ERROR;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ca:	e03b      	b.n	8004444 <MX25UM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <MX25UM51245G_ResetEnable+0x42>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <MX25UM51245G_ResetEnable+0x44>
 80043de:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 80043e0:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80043e2:	78bb      	ldrb	r3, [r7, #2]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <MX25UM51245G_ResetEnable+0x50>
 80043e8:	2308      	movs	r3, #8
 80043ea:	e000      	b.n	80043ee <MX25UM51245G_ResetEnable+0x52>
 80043ec:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 80043ee:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <MX25UM51245G_ResetEnable+0x5e>
 80043f6:	2300      	movs	r3, #0
 80043f8:	e000      	b.n	80043fc <MX25UM51245G_ResetEnable+0x60>
 80043fa:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 80043fc:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_ENABLE_CMD
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <MX25UM51245G_ResetEnable+0x6c>
 8004404:	2366      	movs	r3, #102	; 0x66
 8004406:	e001      	b.n	800440c <MX25UM51245G_ResetEnable+0x70>
 8004408:	f246 6399 	movw	r3, #26265	; 0x6699
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 800440c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 800440e:	2300      	movs	r3, #0
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8004412:	2300      	movs	r3, #0
 8004414:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 8004416:	2300      	movs	r3, #0
 8004418:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 800441e:	2300      	movs	r3, #0
 8004420:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8004422:	2300      	movs	r3, #0
 8004424:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004426:	f107 0308 	add.w	r3, r7, #8
 800442a:	f241 3288 	movw	r2, #5000	; 0x1388
 800442e:	4619      	mov	r1, r3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f00d fda1 	bl	8011f78 <HAL_XSPI_Command>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <MX25UM51245G_ResetEnable+0xa6>
  {
    return MX25UM51245G_ERROR;
 800443c:	f04f 33ff 	mov.w	r3, #4294967295
 8004440:	e000      	b.n	8004444 <MX25UM51245G_ResetEnable+0xa8>
  }

  return MX25UM51245G_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3758      	adds	r7, #88	; 0x58
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <MX25UM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b096      	sub	sp, #88	; 0x58
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	70fb      	strb	r3, [r7, #3]
 8004458:	4613      	mov	r3, r2
 800445a:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
 800445c:	f107 0308 	add.w	r3, r7, #8
 8004460:	2250      	movs	r2, #80	; 0x50
 8004462:	2100      	movs	r1, #0
 8004464:	4618      	mov	r0, r3
 8004466:	f023 fec2 	bl	80281ee <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <MX25UM51245G_ResetMemory+0x30>
 8004470:	78bb      	ldrb	r3, [r7, #2]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d102      	bne.n	800447c <MX25UM51245G_ResetMemory+0x30>
  {
    return MX25UM51245G_ERROR;
 8004476:	f04f 33ff 	mov.w	r3, #4294967295
 800447a:	e03b      	b.n	80044f4 <MX25UM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 800447c:	2300      	movs	r3, #0
 800447e:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <MX25UM51245G_ResetMemory+0x42>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <MX25UM51245G_ResetMemory+0x44>
 800448e:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8004490:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8004492:	78bb      	ldrb	r3, [r7, #2]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <MX25UM51245G_ResetMemory+0x50>
 8004498:	2308      	movs	r3, #8
 800449a:	e000      	b.n	800449e <MX25UM51245G_ResetMemory+0x52>
 800449c:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 800449e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <MX25UM51245G_ResetMemory+0x5e>
 80044a6:	2300      	movs	r3, #0
 80044a8:	e000      	b.n	80044ac <MX25UM51245G_ResetMemory+0x60>
 80044aa:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 80044ac:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_MEMORY_CMD
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
 80044ae:	78fb      	ldrb	r3, [r7, #3]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <MX25UM51245G_ResetMemory+0x6c>
 80044b4:	2399      	movs	r3, #153	; 0x99
 80044b6:	e001      	b.n	80044bc <MX25UM51245G_ResetMemory+0x70>
 80044b8:	f649 1366 	movw	r3, #39270	; 0x9966
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 80044bc:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 80044be:	2300      	movs	r3, #0
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 80044c6:	2300      	movs	r3, #0
 80044c8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80044d2:	2300      	movs	r3, #0
 80044d4:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044d6:	f107 0308 	add.w	r3, r7, #8
 80044da:	f241 3288 	movw	r2, #5000	; 0x1388
 80044de:	4619      	mov	r1, r3
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f00d fd49 	bl	8011f78 <HAL_XSPI_Command>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <MX25UM51245G_ResetMemory+0xa6>
  {
    return MX25UM51245G_ERROR;
 80044ec:	f04f 33ff 	mov.w	r3, #4294967295
 80044f0:	e000      	b.n	80044f4 <MX25UM51245G_ResetMemory+0xa8>
  }

  return MX25UM51245G_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3758      	adds	r7, #88	; 0x58
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <SITRONIX_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t SITRONIX_RegisterBusIO(SITRONIX_Object_t *pObj, SITRONIX_IO_t *pIO)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d103      	bne.n	8004514 <SITRONIX_RegisterBusIO+0x18>
  {
    ret = SITRONIX_ERROR;
 800450c:	f04f 33ff 	mov.w	r3, #4294967295
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	e033      	b.n	800457c <SITRONIX_RegisterBusIO+0x80>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	891a      	ldrh	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadData  = pIO->ReadData;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	695a      	ldr	r2, [r3, #20]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	699a      	ldr	r2, [r3, #24]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a0e      	ldr	r2, [pc, #56]	; (8004588 <SITRONIX_RegisterBusIO+0x8c>)
 8004550:	621a      	str	r2, [r3, #32]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a0d      	ldr	r2, [pc, #52]	; (800458c <SITRONIX_RegisterBusIO+0x90>)
 8004556:	61da      	str	r2, [r3, #28]
    pObj->Ctx.ReadData = ReadDataWrap;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a0d      	ldr	r2, [pc, #52]	; (8004590 <SITRONIX_RegisterBusIO+0x94>)
 800455c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.handle   = pObj;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	629a      	str	r2, [r3, #40]	; 0x28

    if (pObj->IO.Init != NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d004      	beq.n	8004576 <SITRONIX_RegisterBusIO+0x7a>
    {
      ret = pObj->IO.Init();
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4798      	blx	r3
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	e002      	b.n	800457c <SITRONIX_RegisterBusIO+0x80>
    }
    else
    {
      ret = SITRONIX_ERROR;
 8004576:	f04f 33ff 	mov.w	r3, #4294967295
 800457a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800457c:	68fb      	ldr	r3, [r7, #12]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	08004837 	.word	0x08004837
 800458c:	0800486b 	.word	0x0800486b
 8004590:	0800489f 	.word	0x0800489f

08004594 <SITRONIX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to SITRONIX sensor capabilities
  * @retval Component status
  */
int32_t SITRONIX_GetCapabilities(SITRONIX_Object_t *pObj, SITRONIX_Capabilities_t *Capabilities)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2201      	movs	r2, #1
 80045a2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2200      	movs	r2, #0
 80045a8:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = SITRONIX_MAX_DETECTABLE_TOUCH;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	220a      	movs	r2, #10
 80045ae:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = SITRONIX_MAX_X_LENGTH;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80045b6:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = SITRONIX_MAX_Y_LENGTH;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80045be:	609a      	str	r2, [r3, #8]

  return SITRONIX_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <SITRONIX_Init>:
  *         from MCU to SITRONIX : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_Init(SITRONIX_Object_t *pObj)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b08a      	sub	sp, #40	; 0x28
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]

  int32_t ret = SITRONIX_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t data[28U];

  if (pObj->IsInitialized == 0U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d114      	bne.n	800460e <SITRONIX_Init+0x40>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4798      	blx	r3

    if (sitronix_read_data(&pObj->Ctx, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	331c      	adds	r3, #28
 80045ee:	f107 0108 	add.w	r1, r7, #8
 80045f2:	221c      	movs	r2, #28
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 f97e 	bl	80048f6 <sitronix_read_data>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <SITRONIX_Init+0x38>
    {
      ret = SITRONIX_ERROR;
 8004600:	f04f 33ff 	mov.w	r3, #4294967295
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
    }

    pObj->IsInitialized = 1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  if (ret != SITRONIX_OK)
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <SITRONIX_Init+0x4c>
  {
    ret = SITRONIX_ERROR;
 8004614:	f04f 33ff 	mov.w	r3, #4294967295
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800461c:	4618      	mov	r0, r3
 800461e:	3728      	adds	r7, #40	; 0x28
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <SITRONIX_DeInit>:
  *         from MCU to SITRONIX : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_DeInit(SITRONIX_Object_t *pObj)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004632:	2b01      	cmp	r3, #1
 8004634:	d103      	bne.n	800463e <SITRONIX_DeInit+0x1a>
  {
    pObj->IsInitialized = 0;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  return SITRONIX_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <SITRONIX_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval Component status
  */
int32_t SITRONIX_GestureConfig(SITRONIX_Object_t *pObj, SITRONIX_Gesture_Init_t *GestureInit)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  return SITRONIX_ERROR;
 8004656:	f04f 33ff 	mov.w	r3, #4294967295
}
 800465a:	4618      	mov	r0, r3
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <SITRONIX_ReadID>:
  * @param  pObj Component object pointer
  * @param  Id Pointer to component's ID
  * @retval Component status
  */
int32_t SITRONIX_ReadID(SITRONIX_Object_t *pObj, uint32_t *Id)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b08c      	sub	sp, #48	; 0x30
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t data[28];
  uint8_t trial = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  for (trial = 0; trial < 10; trial++)
 800467a:	2300      	movs	r3, #0
 800467c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004680:	e01c      	b.n	80046bc <SITRONIX_ReadID+0x56>
  {
    if (sitronix_read_data(&pObj->Ctx, data, 28) != SITRONIX_OK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	331c      	adds	r3, #28
 8004686:	f107 010c 	add.w	r1, r7, #12
 800468a:	221c      	movs	r2, #28
 800468c:	4618      	mov	r0, r3
 800468e:	f000 f932 	bl	80048f6 <sitronix_read_data>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <SITRONIX_ReadID+0x3a>
    {
      ret = SITRONIX_ERROR;
 8004698:	f04f 33ff 	mov.w	r3, #4294967295
 800469c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800469e:	e008      	b.n	80046b2 <SITRONIX_ReadID+0x4c>
    }
    else
    {
      if ((uint32_t)data[0] == SITRONIX_ID)
 80046a0:	7b3b      	ldrb	r3, [r7, #12]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d105      	bne.n	80046b2 <SITRONIX_ReadID+0x4c>
      {
        *Id = (uint32_t)data[0];
 80046a6:	7b3b      	ldrb	r3, [r7, #12]
 80046a8:	461a      	mov	r2, r3
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	601a      	str	r2, [r3, #0]
        return ret;
 80046ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b0:	e009      	b.n	80046c6 <SITRONIX_ReadID+0x60>
  for (trial = 0; trial < 10; trial++)
 80046b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046b6:	3301      	adds	r3, #1
 80046b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046c0:	2b09      	cmp	r3, #9
 80046c2:	d9de      	bls.n	8004682 <SITRONIX_ReadID+0x1c>
      }
    }
  }
  return ret;
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3730      	adds	r7, #48	; 0x30
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <SITRONIX_GetState>:
  * @param  pObj Component object pointer
  * @param  State Single Touch structure pointer
  * @retval Component status.
  */
int32_t SITRONIX_GetState(SITRONIX_Object_t *pObj, SITRONIX_State_t *State)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b086      	sub	sp, #24
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
  uint8_t data[5];

  if (sitronix_read_data(&pObj->Ctx, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	331c      	adds	r3, #28
 80046e0:	f107 010c 	add.w	r1, r7, #12
 80046e4:	2205      	movs	r2, #5
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 f905 	bl	80048f6 <sitronix_read_data>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <SITRONIX_GetState+0x2c>
  {
    ret = SITRONIX_ERROR;
 80046f2:	f04f 33ff 	mov.w	r3, #4294967295
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e017      	b.n	800472a <SITRONIX_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = ((((uint32_t)data[2] & SITRONIX_TOUCH_POS_LSB_MASK) << 4) | ((uint32_t)data[3]));
 80046fa:	7bbb      	ldrb	r3, [r7, #14]
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004702:	7bfa      	ldrb	r2, [r7, #15]
 8004704:	431a      	orrs	r2, r3
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & SITRONIX_TOUCH_POS_MSB_MASK) << 8) | ((uint32_t)data[4]);
 800470a:	7bbb      	ldrb	r3, [r7, #14]
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004712:	7c3a      	ldrb	r2, [r7, #16]
 8004714:	431a      	orrs	r2, r3
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	609a      	str	r2, [r3, #8]
	
    State->TouchDetected = ((data[2] & 0x80) == 0x80 ? 1 : 0);
 800471a:	7bbb      	ldrb	r3, [r7, #14]
 800471c:	b25b      	sxtb	r3, r3
 800471e:	11db      	asrs	r3, r3, #7
 8004720:	b25b      	sxtb	r3, r3
 8004722:	f003 0201 	and.w	r2, r3, #1
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800472a:	697b      	ldr	r3, [r7, #20]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <SITRONIX_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval Component status.
  */
int32_t SITRONIX_GetMultiTouchState(SITRONIX_Object_t *pObj, SITRONIX_MultiTouch_State_t *State)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	; 0x28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t  data[28];

  State->TouchDetected = (uint32_t)SITRONIX_DetectTouch(pObj);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f855 	bl	80047f2 <SITRONIX_DetectTouch>
 8004748:	4603      	mov	r3, r0
 800474a:	461a      	mov	r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	601a      	str	r2, [r3, #0]

  if (sitronix_read_reg(&pObj->Ctx, SITRONIX_P1_XH_REG, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f103 001c 	add.w	r0, r3, #28
 8004756:	f107 0208 	add.w	r2, r7, #8
 800475a:	231c      	movs	r3, #28
 800475c:	2109      	movs	r1, #9
 800475e:	f000 f8b3 	bl	80048c8 <sitronix_read_reg>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <SITRONIX_GetMultiTouchState+0x3a>
  {
    ret = SITRONIX_ERROR;
 8004768:	f04f 33ff 	mov.w	r3, #4294967295
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
  else
  {
    /* To be implemented */
  }

  return ret;
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004770:	4618      	mov	r0, r3
 8004772:	3728      	adds	r7, #40	; 0x28
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <SITRONIX_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId gesture ID
  * @retval Component status
  */
int32_t SITRONIX_GetGesture(SITRONIX_Object_t *pObj, uint8_t *GestureId)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004786:	4618      	mov	r0, r3
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <SITRONIX_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_EnableIT(SITRONIX_Object_t *pObj)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 800479a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800479e:	4618      	mov	r0, r3
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <SITRONIX_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_DisableIT(SITRONIX_Object_t *pObj)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 80047b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <SITRONIX_ITStatus>:
  *         @note : This feature is not supported by SITRONIX.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_ITStatus(SITRONIX_Object_t *pObj)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 80047ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <SITRONIX_ClearIT>:
  *         @note : This feature is not supported by SITRONIX.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_ClearIT(SITRONIX_Object_t *pObj)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 80047e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <SITRONIX_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be between 0 and10) or SITRONIX_ERROR
  *         in case of error
  */
static int32_t SITRONIX_DetectTouch(SITRONIX_Object_t *pObj)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b08c      	sub	sp, #48	; 0x30
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t data[28];

  if (sitronix_read_data(&pObj->Ctx, (uint8_t *)&data, 28) != SITRONIX_OK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	331c      	adds	r3, #28
 8004804:	f107 010c 	add.w	r1, r7, #12
 8004808:	221c      	movs	r2, #28
 800480a:	4618      	mov	r0, r3
 800480c:	f000 f873 	bl	80048f6 <sitronix_read_data>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <SITRONIX_DetectTouch+0x2c>
  {
    ret = SITRONIX_ERROR;
 8004816:	f04f 33ff 	mov.w	r3, #4294967295
 800481a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800481c:	e006      	b.n	800482c <SITRONIX_DetectTouch+0x3a>
  }
  else
  {
    nb_touch = ((data[2] & 0x80) == 0x80 ? 1 : 0);
 800481e:	7bbb      	ldrb	r3, [r7, #14]
 8004820:	09db      	lsrs	r3, r3, #7
 8004822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    ret = (int32_t)nb_touch;
 8004826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  return ret;
 800482c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800482e:	4618      	mov	r0, r3
 8004830:	3730      	adds	r7, #48	; 0x30
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004836:	b590      	push	{r4, r7, lr}
 8004838:	b087      	sub	sp, #28
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	461a      	mov	r2, r3
 8004842:	460b      	mov	r3, r1
 8004844:	72fb      	strb	r3, [r7, #11]
 8004846:	4613      	mov	r3, r2
 8004848:	813b      	strh	r3, [r7, #8]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	691c      	ldr	r4, [r3, #16]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	8918      	ldrh	r0, [r3, #8]
 8004856:	7afb      	ldrb	r3, [r7, #11]
 8004858:	b299      	uxth	r1, r3
 800485a:	893b      	ldrh	r3, [r7, #8]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	47a0      	blx	r4
 8004860:	4603      	mov	r3, r0
}
 8004862:	4618      	mov	r0, r3
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	bd90      	pop	{r4, r7, pc}

0800486a <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800486a:	b590      	push	{r4, r7, lr}
 800486c:	b087      	sub	sp, #28
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	461a      	mov	r2, r3
 8004876:	460b      	mov	r3, r1
 8004878:	72fb      	strb	r3, [r7, #11]
 800487a:	4613      	mov	r3, r2
 800487c:	813b      	strh	r3, [r7, #8]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	68dc      	ldr	r4, [r3, #12]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	8918      	ldrh	r0, [r3, #8]
 800488a:	7afb      	ldrb	r3, [r7, #11]
 800488c:	b299      	uxth	r1, r3
 800488e:	893b      	ldrh	r3, [r7, #8]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	47a0      	blx	r4
 8004894:	4603      	mov	r3, r0
}
 8004896:	4618      	mov	r0, r3
 8004898:	371c      	adds	r7, #28
 800489a:	46bd      	mov	sp, r7
 800489c:	bd90      	pop	{r4, r7, pc}

0800489e <ReadDataWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadDataWrap(void *handle, uint8_t *pData, uint16_t Length)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b086      	sub	sp, #24
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	4613      	mov	r3, r2
 80048aa:	80fb      	strh	r3, [r7, #6]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadData(pObj->IO.Address, pData, Length);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	8910      	ldrh	r0, [r2, #8]
 80048b8:	88fa      	ldrh	r2, [r7, #6]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	4798      	blx	r3
 80048be:	4603      	mov	r3, r0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <sitronix_read_reg>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : pdata Read
  *******************************************************************************/
int32_t sitronix_read_reg(sitronix_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80048c8:	b590      	push	{r4, r7, lr}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	607a      	str	r2, [r7, #4]
 80048d2:	461a      	mov	r2, r3
 80048d4:	460b      	mov	r3, r1
 80048d6:	72fb      	strb	r3, [r7, #11]
 80048d8:	4613      	mov	r3, r2
 80048da:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	685c      	ldr	r4, [r3, #4]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	68d8      	ldr	r0, [r3, #12]
 80048e4:	893b      	ldrh	r3, [r7, #8]
 80048e6:	7af9      	ldrb	r1, [r7, #11]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	47a0      	blx	r4
 80048ec:	4603      	mov	r3, r0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd90      	pop	{r4, r7, pc}

080048f6 <sitronix_read_data>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : pdata Read
  *******************************************************************************/
int32_t sitronix_read_data(sitronix_ctx_t *ctx, uint8_t *pdata, uint16_t length)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	4613      	mov	r3, r2
 8004902:	80fb      	strh	r3, [r7, #6]
  return ctx->ReadData(ctx->handle, pdata, length);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	68d0      	ldr	r0, [r2, #12]
 800490c:	88fa      	ldrh	r2, [r7, #6]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	4798      	blx	r3
 8004912:	4603      	mov	r3, r0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <BSP_I2C5_Init>:
/**
  * @brief  Initializes I2C5 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C5_Init(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004922:	2300      	movs	r3, #0
 8004924:	607b      	str	r3, [r7, #4]

  hbus_i2c5.Instance = BUS_I2C5;
 8004926:	4b16      	ldr	r3, [pc, #88]	; (8004980 <BSP_I2C5_Init+0x64>)
 8004928:	4a16      	ldr	r2, [pc, #88]	; (8004984 <BSP_I2C5_Init+0x68>)
 800492a:	601a      	str	r2, [r3, #0]

  if (I2c5InitCounter == 0U)
 800492c:	4b16      	ldr	r3, [pc, #88]	; (8004988 <BSP_I2C5_Init+0x6c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d11f      	bne.n	8004974 <BSP_I2C5_Init+0x58>
  {
    I2c5InitCounter++;
 8004934:	4b14      	ldr	r3, [pc, #80]	; (8004988 <BSP_I2C5_Init+0x6c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3301      	adds	r3, #1
 800493a:	4a13      	ldr	r2, [pc, #76]	; (8004988 <BSP_I2C5_Init+0x6c>)
 800493c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c5) == HAL_I2C_STATE_RESET)
 800493e:	4810      	ldr	r0, [pc, #64]	; (8004980 <BSP_I2C5_Init+0x64>)
 8004940:	f005 ffca 	bl	800a8d8 <HAL_I2C_GetState>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d114      	bne.n	8004974 <BSP_I2C5_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C5 Msp */
      I2C5_MspInit(&hbus_i2c5);
 800494a:	480d      	ldr	r0, [pc, #52]	; (8004980 <BSP_I2C5_Init+0x64>)
 800494c:	f000 fb88 	bl	8005060 <I2C5_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */
      if (MX_I2C5_Init(&hbus_i2c5, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C5_FREQUENCY)) != HAL_OK)
 8004950:	f008 fa96 	bl	800ce80 <HAL_RCC_GetPCLK1Freq>
 8004954:	4603      	mov	r3, r0
 8004956:	490d      	ldr	r1, [pc, #52]	; (800498c <BSP_I2C5_Init+0x70>)
 8004958:	4618      	mov	r0, r3
 800495a:	f000 f90b 	bl	8004b74 <I2C_GetTiming>
 800495e:	4603      	mov	r3, r0
 8004960:	4619      	mov	r1, r3
 8004962:	4807      	ldr	r0, [pc, #28]	; (8004980 <BSP_I2C5_Init+0x64>)
 8004964:	f000 f838 	bl	80049d8 <MX_I2C5_Init>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <BSP_I2C5_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800496e:	f06f 0307 	mvn.w	r3, #7
 8004972:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS > 0) */
  }
}
return ret;
 8004974:	687b      	ldr	r3, [r7, #4]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20197860 	.word	0x20197860
 8004984:	40009800 	.word	0x40009800
 8004988:	20196e58 	.word	0x20196e58
 800498c:	00061a80 	.word	0x00061a80

08004990 <BSP_I2C5_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C5_DeInit(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8004996:	2300      	movs	r3, #0
 8004998:	607b      	str	r3, [r7, #4]

  I2c5InitCounter--;
 800499a:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <BSP_I2C5_DeInit+0x40>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3b01      	subs	r3, #1
 80049a0:	4a0b      	ldr	r2, [pc, #44]	; (80049d0 <BSP_I2C5_DeInit+0x40>)
 80049a2:	6013      	str	r3, [r2, #0]

  if (I2c5InitCounter == 0U)
 80049a4:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <BSP_I2C5_DeInit+0x40>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10b      	bne.n	80049c4 <BSP_I2C5_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C5_MspDeInit(&hbus_i2c5);
 80049ac:	4809      	ldr	r0, [pc, #36]	; (80049d4 <BSP_I2C5_DeInit+0x44>)
 80049ae:	f000 fbbd 	bl	800512c <I2C5_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c5) != HAL_OK)
 80049b2:	4808      	ldr	r0, [pc, #32]	; (80049d4 <BSP_I2C5_DeInit+0x44>)
 80049b4:	f005 fc28 	bl	800a208 <HAL_I2C_DeInit>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <BSP_I2C5_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80049be:	f06f 0307 	mvn.w	r3, #7
 80049c2:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80049c4:	687b      	ldr	r3, [r7, #4]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20196e58 	.word	0x20196e58
 80049d4:	20197860 	.word	0x20197860

080049d8 <MX_I2C5_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C5_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f005 fb67 	bl	800a0ea <HAL_I2C_Init>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <MX_I2C5_Init+0x50>
  {
    status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	73fb      	strb	r3, [r7, #15]
 8004a26:	e014      	b.n	8004a52 <MX_I2C5_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f006 faa6 	bl	800af80 <HAL_I2CEx_ConfigAnalogFilter>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <MX_I2C5_Init+0x68>
    {
      status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
 8004a3e:	e008      	b.n	8004a52 <MX_I2C5_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8004a40:	2100      	movs	r1, #0
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f006 fae7 	bl	800b016 <HAL_I2CEx_ConfigDigitalFilter>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <MX_I2C5_Init+0x7a>
      {
        status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <BSP_I2C5_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C5_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60ba      	str	r2, [r7, #8]
 8004a64:	461a      	mov	r2, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	81fb      	strh	r3, [r7, #14]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	81bb      	strh	r3, [r7, #12]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8004a72:	89b9      	ldrh	r1, [r7, #12]
 8004a74:	89f8      	ldrh	r0, [r7, #14]
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f000 fb77 	bl	8005170 <I2C5_WriteReg>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <BSP_I2C5_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	e00c      	b.n	8004aa8 <BSP_I2C5_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 8004a8e:	4809      	ldr	r0, [pc, #36]	; (8004ab4 <BSP_I2C5_WriteReg+0x58>)
 8004a90:	f005 ff30 	bl	800a8f4 <HAL_I2C_GetError>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d103      	bne.n	8004aa2 <BSP_I2C5_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004a9a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	e002      	b.n	8004aa8 <BSP_I2C5_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004aa2:	f06f 0303 	mvn.w	r3, #3
 8004aa6:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8004aa8:	697b      	ldr	r3, [r7, #20]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20197860 	.word	0x20197860

08004ab8 <BSP_I2C5_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C5_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60ba      	str	r2, [r7, #8]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	81fb      	strh	r3, [r7, #14]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	81bb      	strh	r3, [r7, #12]
 8004aca:	4613      	mov	r3, r2
 8004acc:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8004ace:	89b9      	ldrh	r1, [r7, #12]
 8004ad0:	89f8      	ldrh	r0, [r7, #14]
 8004ad2:	88fb      	ldrh	r3, [r7, #6]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f000 fb6f 	bl	80051bc <I2C5_ReadReg>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d102      	bne.n	8004aea <BSP_I2C5_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	e00c      	b.n	8004b04 <BSP_I2C5_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 8004aea:	4809      	ldr	r0, [pc, #36]	; (8004b10 <BSP_I2C5_ReadReg+0x58>)
 8004aec:	f005 ff02 	bl	800a8f4 <HAL_I2C_GetError>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d103      	bne.n	8004afe <BSP_I2C5_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004af6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	e002      	b.n	8004b04 <BSP_I2C5_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004afe:	f06f 0303 	mvn.w	r3, #3
 8004b02:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8004b04:	697b      	ldr	r3, [r7, #20]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20197860 	.word	0x20197860

08004b14 <BSP_I2C5_Recv>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C5_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	6039      	str	r1, [r7, #0]
 8004b1e:	80fb      	strh	r3, [r7, #6]
 8004b20:	4613      	mov	r3, r2
 8004b22:	80bb      	strh	r3, [r7, #4]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_Recv(DevAddr, pData, Length) == 0)
 8004b24:	88ba      	ldrh	r2, [r7, #4]
 8004b26:	88fb      	ldrh	r3, [r7, #6]
 8004b28:	6839      	ldr	r1, [r7, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fb6c 	bl	8005208 <I2C5_Recv>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d102      	bne.n	8004b3c <BSP_I2C5_Recv+0x28>
  {
    ret = BSP_ERROR_NONE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	e00c      	b.n	8004b56 <BSP_I2C5_Recv+0x42>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 8004b3c:	4808      	ldr	r0, [pc, #32]	; (8004b60 <BSP_I2C5_Recv+0x4c>)
 8004b3e:	f005 fed9 	bl	800a8f4 <HAL_I2C_GetError>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d103      	bne.n	8004b50 <BSP_I2C5_Recv+0x3c>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004b48:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	e002      	b.n	8004b56 <BSP_I2C5_Recv+0x42>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004b50:	f06f 0303 	mvn.w	r3, #3
 8004b54:	60fb      	str	r3, [r7, #12]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8004b56:	68fb      	ldr	r3, [r7, #12]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	20197860 	.word	0x20197860

08004b64 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8004b68:	f002 fc1e 	bl	80073a8 <HAL_GetTick>
 8004b6c:	4603      	mov	r3, r0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d06b      	beq.n	8004c60 <I2C_GetTiming+0xec>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d068      	beq.n	8004c60 <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8004b8e:	2300      	movs	r3, #0
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	e060      	b.n	8004c56 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8004b94:	4a35      	ldr	r2, [pc, #212]	; (8004c6c <I2C_GetTiming+0xf8>)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	212c      	movs	r1, #44	; 0x2c
 8004b9a:	fb01 f303 	mul.w	r3, r1, r3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d352      	bcc.n	8004c50 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8004baa:	4a30      	ldr	r2, [pc, #192]	; (8004c6c <I2C_GetTiming+0xf8>)
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	212c      	movs	r1, #44	; 0x2c
 8004bb0:	fb01 f303 	mul.w	r3, r1, r3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d847      	bhi.n	8004c50 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8004bc0:	6939      	ldr	r1, [r7, #16]
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f856 	bl	8004c74 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8004bc8:	6939      	ldr	r1, [r7, #16]
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f940 	bl	8004e50 <I2C_Compute_SCLL_SCLH>
 8004bd0:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004bd6:	d842      	bhi.n	8004c5e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8004bd8:	4925      	ldr	r1, [pc, #148]	; (8004c70 <I2C_GetTiming+0xfc>)
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8004bea:	4821      	ldr	r0, [pc, #132]	; (8004c70 <I2C_GetTiming+0xfc>)
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4403      	add	r3, r0
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	051b      	lsls	r3, r3, #20
 8004bfe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8004c02:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8004c04:	481a      	ldr	r0, [pc, #104]	; (8004c70 <I2C_GetTiming+0xfc>)
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4403      	add	r3, r0
 8004c12:	3308      	adds	r3, #8
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	041b      	lsls	r3, r3, #16
 8004c18:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8004c1c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 8004c1e:	4814      	ldr	r0, [pc, #80]	; (8004c70 <I2C_GetTiming+0xfc>)
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4403      	add	r3, r0
 8004c2c:	330c      	adds	r3, #12
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8004c34:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8004c36:	480e      	ldr	r0, [pc, #56]	; (8004c70 <I2C_GetTiming+0xfc>)
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4403      	add	r3, r0
 8004c44:	3310      	adds	r3, #16
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	617b      	str	r3, [r7, #20]
        }
        break;
 8004c4e:	e006      	b.n	8004c5e <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	3301      	adds	r3, #1
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d99b      	bls.n	8004b94 <I2C_GetTiming+0x20>
 8004c5c:	e000      	b.n	8004c60 <I2C_GetTiming+0xec>
        break;
 8004c5e:	bf00      	nop
      }
    }
  }

  return ret;
 8004c60:	697b      	ldr	r3, [r7, #20]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	0802a78c 	.word	0x0802a78c
 8004c70:	20196e5c 	.word	0x20196e5c

08004c74 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b08f      	sub	sp, #60	; 0x3c
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8004c7e:	2310      	movs	r3, #16
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t presc;
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	085a      	lsrs	r2, r3, #1
 8004c86:	4b6e      	ldr	r3, [pc, #440]	; (8004e40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8004c88:	4413      	add	r3, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c90:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8004c92:	2332      	movs	r3, #50	; 0x32
 8004c94:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8004c96:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004c9a:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004c9c:	4a69      	ldr	r2, [pc, #420]	; (8004e44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	212c      	movs	r1, #44	; 0x2c
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3324      	adds	r3, #36	; 0x24
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	4a65      	ldr	r2, [pc, #404]	; (8004e44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	212c      	movs	r1, #44	; 0x2c
 8004cb4:	fb01 f303 	mul.w	r3, r1, r3
 8004cb8:	4413      	add	r3, r2
 8004cba:	330c      	adds	r3, #12
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004cc0:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004cc2:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004cc4:	495f      	ldr	r1, [pc, #380]	; (8004e44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	202c      	movs	r0, #44	; 0x2c
 8004cca:	fb00 f303 	mul.w	r3, r0, r3
 8004cce:	440b      	add	r3, r1
 8004cd0:	3328      	adds	r3, #40	; 0x28
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3303      	adds	r3, #3
 8004cd6:	69f9      	ldr	r1, [r7, #28]
 8004cd8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004ce0:	4a58      	ldr	r2, [pc, #352]	; (8004e44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	212c      	movs	r1, #44	; 0x2c
 8004ce6:	fb01 f303 	mul.w	r3, r1, r3
 8004cea:	4413      	add	r3, r2
 8004cec:	3310      	adds	r3, #16
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	4a54      	ldr	r2, [pc, #336]	; (8004e44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	212c      	movs	r1, #44	; 0x2c
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3320      	adds	r3, #32
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8004d04:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004d06:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8004d08:	494e      	ldr	r1, [pc, #312]	; (8004e44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	202c      	movs	r0, #44	; 0x2c
 8004d0e:	fb00 f303 	mul.w	r3, r0, r3
 8004d12:	440b      	add	r3, r1
 8004d14:	3328      	adds	r3, #40	; 0x28
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	69f9      	ldr	r1, [r7, #28]
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8004d24:	4a47      	ldr	r2, [pc, #284]	; (8004e44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	212c      	movs	r1, #44	; 0x2c
 8004d2a:	fb01 f303 	mul.w	r3, r1, r3
 8004d2e:	4413      	add	r3, r2
 8004d30:	3320      	adds	r3, #32
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	4a43      	ldr	r2, [pc, #268]	; (8004e44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	212c      	movs	r1, #44	; 0x2c
 8004d3c:	fb01 f303 	mul.w	r3, r1, r3
 8004d40:	4413      	add	r3, r2
 8004d42:	3314      	adds	r3, #20
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4403      	add	r3, r0
 8004d48:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	dc01      	bgt.n	8004d54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	dc01      	bgt.n	8004d5e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8004d5e:	2300      	movs	r3, #0
 8004d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d62:	e062      	b.n	8004e2a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004d64:	2300      	movs	r3, #0
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
 8004d68:	e059      	b.n	8004e1e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d70:	3201      	adds	r2, #1
 8004d72:	fb03 f202 	mul.w	r2, r3, r2
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	fb02 f303 	mul.w	r3, r2, r3
 8004d7c:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d348      	bcc.n	8004e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004d86:	2300      	movs	r3, #0
 8004d88:	623b      	str	r3, [r7, #32]
 8004d8a:	e042      	b.n	8004e12 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	3301      	adds	r3, #1
 8004d90:	6a3a      	ldr	r2, [r7, #32]
 8004d92:	fb03 f202 	mul.w	r2, r3, r2
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	fb02 f303 	mul.w	r3, r2, r3
 8004d9c:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d332      	bcc.n	8004e0c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8004da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d82e      	bhi.n	8004e0c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 8004dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d02a      	beq.n	8004e0c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004db6:	4b24      	ldr	r3, [pc, #144]	; (8004e48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4924      	ldr	r1, [pc, #144]	; (8004e4c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8004dca:	4b1f      	ldr	r3, [pc, #124]	; (8004e48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	491f      	ldr	r1, [pc, #124]	; (8004e4c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	3304      	adds	r3, #4
 8004ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dde:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8004de0:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	4919      	ldr	r1, [pc, #100]	; (8004e4c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	3308      	adds	r3, #8
 8004df2:	6a3a      	ldr	r2, [r7, #32]
 8004df4:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8004dfa:	4b13      	ldr	r3, [pc, #76]	; (8004e48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	4a11      	ldr	r2, [pc, #68]	; (8004e48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004e02:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8004e04:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b7f      	cmp	r3, #127	; 0x7f
 8004e0a:	d812      	bhi.n	8004e32 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	623b      	str	r3, [r7, #32]
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	2b0f      	cmp	r3, #15
 8004e16:	d9b9      	bls.n	8004d8c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	2b0f      	cmp	r3, #15
 8004e22:	d9a2      	bls.n	8004d6a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	3301      	adds	r3, #1
 8004e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2c:	2b0f      	cmp	r3, #15
 8004e2e:	d999      	bls.n	8004d64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8004e30:	e000      	b.n	8004e34 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8004e32:	bf00      	nop
          }
        }
      }
    }
  }
}
 8004e34:	373c      	adds	r7, #60	; 0x3c
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	3b9aca00 	.word	0x3b9aca00
 8004e44:	0802a78c 	.word	0x0802a78c
 8004e48:	2019785c 	.word	0x2019785c
 8004e4c:	20196e5c 	.word	0x20196e5c

08004e50 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b093      	sub	sp, #76	; 0x4c
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 8004e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	085a      	lsrs	r2, r3, #1
 8004e64:	4b7a      	ldr	r3, [pc, #488]	; (8005050 <I2C_Compute_SCLL_SCLH+0x200>)
 8004e66:	4413      	add	r3, r2
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 8004e70:	4a78      	ldr	r2, [pc, #480]	; (8005054 <I2C_Compute_SCLL_SCLH+0x204>)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	212c      	movs	r1, #44	; 0x2c
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	085a      	lsrs	r2, r3, #1
 8004e80:	4b73      	ldr	r3, [pc, #460]	; (8005050 <I2C_Compute_SCLL_SCLH+0x200>)
 8004e82:	4413      	add	r3, r2
 8004e84:	4973      	ldr	r1, [pc, #460]	; (8005054 <I2C_Compute_SCLL_SCLH+0x204>)
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	202c      	movs	r0, #44	; 0x2c
 8004e8a:	fb00 f202 	mul.w	r2, r0, r2
 8004e8e:	440a      	add	r2, r1
 8004e90:	6812      	ldr	r2, [r2, #0]
 8004e92:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e96:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8004e98:	2332      	movs	r3, #50	; 0x32
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8004e9c:	4a6d      	ldr	r2, [pc, #436]	; (8005054 <I2C_Compute_SCLL_SCLH+0x204>)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	212c      	movs	r1, #44	; 0x2c
 8004ea2:	fb01 f303 	mul.w	r3, r1, r3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3328      	adds	r3, #40	; 0x28
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	fb02 f303 	mul.w	r3, r2, r3
 8004eb2:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8004eb4:	4a67      	ldr	r2, [pc, #412]	; (8005054 <I2C_Compute_SCLL_SCLH+0x204>)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	212c      	movs	r1, #44	; 0x2c
 8004eba:	fb01 f303 	mul.w	r3, r1, r3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a62      	ldr	r2, [pc, #392]	; (8005050 <I2C_Compute_SCLL_SCLH+0x200>)
 8004ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eca:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8004ecc:	4a61      	ldr	r2, [pc, #388]	; (8005054 <I2C_Compute_SCLL_SCLH+0x204>)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	212c      	movs	r1, #44	; 0x2c
 8004ed2:	fb01 f303 	mul.w	r3, r1, r3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	3308      	adds	r3, #8
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a5c      	ldr	r2, [pc, #368]	; (8005050 <I2C_Compute_SCLL_SCLH+0x200>)
 8004ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee2:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004ee8:	2300      	movs	r3, #0
 8004eea:	637b      	str	r3, [r7, #52]	; 0x34
 8004eec:	e0a3      	b.n	8005036 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8004eee:	495a      	ldr	r1, [pc, #360]	; (8005058 <I2C_Compute_SCLL_SCLH+0x208>)
 8004ef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	440b      	add	r3, r1
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	fb02 f303 	mul.w	r3, r2, r3
 8004f06:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f0c:	e08c      	b.n	8005028 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8004f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	441a      	add	r2, r3
 8004f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f16:	3301      	adds	r3, #1
 8004f18:	6979      	ldr	r1, [r7, #20]
 8004f1a:	fb03 f101 	mul.w	r1, r3, r1
 8004f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	440b      	add	r3, r1
 8004f24:	4413      	add	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8004f28:	4a4a      	ldr	r2, [pc, #296]	; (8005054 <I2C_Compute_SCLL_SCLH+0x204>)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	212c      	movs	r1, #44	; 0x2c
 8004f2e:	fb01 f303 	mul.w	r3, r1, r3
 8004f32:	4413      	add	r3, r2
 8004f34:	3318      	adds	r3, #24
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d971      	bls.n	8005022 <I2C_Compute_SCLL_SCLH+0x1d2>
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	1ad2      	subs	r2, r2, r3
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	089b      	lsrs	r3, r3, #2
 8004f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d268      	bcs.n	8005022 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8004f50:	2300      	movs	r3, #0
 8004f52:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f54:	e062      	b.n	800501c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8004f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	441a      	add	r2, r3
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5e:	3301      	adds	r3, #1
 8004f60:	6979      	ldr	r1, [r7, #20]
 8004f62:	fb03 f101 	mul.w	r1, r3, r1
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	440b      	add	r3, r1
 8004f6c:	4413      	add	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	441a      	add	r2, r3
 8004f76:	4937      	ldr	r1, [pc, #220]	; (8005054 <I2C_Compute_SCLL_SCLH+0x204>)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	202c      	movs	r0, #44	; 0x2c
 8004f7c:	fb00 f303 	mul.w	r3, r0, r3
 8004f80:	440b      	add	r3, r1
 8004f82:	3320      	adds	r3, #32
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	441a      	add	r2, r3
 8004f88:	4932      	ldr	r1, [pc, #200]	; (8005054 <I2C_Compute_SCLL_SCLH+0x204>)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	202c      	movs	r0, #44	; 0x2c
 8004f8e:	fb00 f303 	mul.w	r3, r0, r3
 8004f92:	440b      	add	r3, r1
 8004f94:	3324      	adds	r3, #36	; 0x24
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4413      	add	r3, r2
 8004f9a:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && \
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d338      	bcc.n	8005016 <I2C_Compute_SCLL_SCLH+0x1c6>
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d834      	bhi.n	8005016 <I2C_Compute_SCLL_SCLH+0x1c6>
 8004fac:	4a29      	ldr	r2, [pc, #164]	; (8005054 <I2C_Compute_SCLL_SCLH+0x204>)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	212c      	movs	r1, #44	; 0x2c
 8004fb2:	fb01 f303 	mul.w	r3, r1, r3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	331c      	adds	r3, #28
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d329      	bcc.n	8005016 <I2C_Compute_SCLL_SCLH+0x1c6>
 8004fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d225      	bcs.n	8005016 <I2C_Compute_SCLL_SCLH+0x1c6>
              (ti2cclk < tscl_h))
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	da02      	bge.n	8004fde <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	425b      	negs	r3, r3
 8004fdc:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d917      	bls.n	8005016 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8004fea:	491b      	ldr	r1, [pc, #108]	; (8005058 <I2C_Compute_SCLL_SCLH+0x208>)
 8004fec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	3310      	adds	r3, #16
 8004ffa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ffc:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8004ffe:	4916      	ldr	r1, [pc, #88]	; (8005058 <I2C_Compute_SCLL_SCLH+0x208>)
 8005000:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	440b      	add	r3, r1
 800500c:	330c      	adds	r3, #12
 800500e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005010:	601a      	str	r2, [r3, #0]
              ret = count;
 8005012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005014:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	3301      	adds	r3, #1
 800501a:	63bb      	str	r3, [r7, #56]	; 0x38
 800501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501e:	2bff      	cmp	r3, #255	; 0xff
 8005020:	d999      	bls.n	8004f56 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005024:	3301      	adds	r3, #1
 8005026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800502a:	2bff      	cmp	r3, #255	; 0xff
 800502c:	f67f af6f 	bls.w	8004f0e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005032:	3301      	adds	r3, #1
 8005034:	637b      	str	r3, [r7, #52]	; 0x34
 8005036:	4b09      	ldr	r3, [pc, #36]	; (800505c <I2C_Compute_SCLL_SCLH+0x20c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800503c:	429a      	cmp	r2, r3
 800503e:	f4ff af56 	bcc.w	8004eee <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8005042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005044:	4618      	mov	r0, r3
 8005046:	374c      	adds	r7, #76	; 0x4c
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	3b9aca00 	.word	0x3b9aca00
 8005054:	0802a78c 	.word	0x0802a78c
 8005058:	20196e5c 	.word	0x20196e5c
 800505c:	2019785c 	.word	0x2019785c

08005060 <I2C5_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C5_MspInit(I2C_HandleTypeDef *hI2c)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	; 0x28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C5_SCL_GPIO_CLK_ENABLE();
 8005068:	4b2e      	ldr	r3, [pc, #184]	; (8005124 <I2C5_MspInit+0xc4>)
 800506a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800506e:	4a2d      	ldr	r2, [pc, #180]	; (8005124 <I2C5_MspInit+0xc4>)
 8005070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005074:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005078:	4b2a      	ldr	r3, [pc, #168]	; (8005124 <I2C5_MspInit+0xc4>)
 800507a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800507e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C5_SDA_GPIO_CLK_ENABLE();
 8005086:	4b27      	ldr	r3, [pc, #156]	; (8005124 <I2C5_MspInit+0xc4>)
 8005088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800508c:	4a25      	ldr	r2, [pc, #148]	; (8005124 <I2C5_MspInit+0xc4>)
 800508e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005092:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005096:	4b23      	ldr	r3, [pc, #140]	; (8005124 <I2C5_MspInit+0xc4>)
 8005098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800509c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C5_SCL_PIN;
 80050a4:	2320      	movs	r3, #32
 80050a6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 80050a8:	2312      	movs	r3, #18
 80050aa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 80050ac:	2301      	movs	r3, #1
 80050ae:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 80050b0:	2302      	movs	r3, #2
 80050b2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C5_SCL_AF;
 80050b4:	2302      	movs	r3, #2
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C5_SCL_GPIO_PORT, &gpio_init_structure);
 80050b8:	f107 0314 	add.w	r3, r7, #20
 80050bc:	4619      	mov	r1, r3
 80050be:	481a      	ldr	r0, [pc, #104]	; (8005128 <I2C5_MspInit+0xc8>)
 80050c0:	f004 fc02 	bl	80098c8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C5_SDA_PIN;
 80050c4:	2310      	movs	r3, #16
 80050c6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 80050c8:	2312      	movs	r3, #18
 80050ca:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 80050cc:	2301      	movs	r3, #1
 80050ce:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 80050d0:	2302      	movs	r3, #2
 80050d2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C5_SDA_AF;
 80050d4:	2302      	movs	r3, #2
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C5_SDA_GPIO_PORT, &gpio_init_structure);
 80050d8:	f107 0314 	add.w	r3, r7, #20
 80050dc:	4619      	mov	r1, r3
 80050de:	4812      	ldr	r0, [pc, #72]	; (8005128 <I2C5_MspInit+0xc8>)
 80050e0:	f004 fbf2 	bl	80098c8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C5_CLK_ENABLE();
 80050e4:	4b0f      	ldr	r3, [pc, #60]	; (8005124 <I2C5_MspInit+0xc4>)
 80050e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050ea:	4a0e      	ldr	r2, [pc, #56]	; (8005124 <I2C5_MspInit+0xc4>)
 80050ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050f0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <I2C5_MspInit+0xc4>)
 80050f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C5_FORCE_RESET();
 8005102:	4b08      	ldr	r3, [pc, #32]	; (8005124 <I2C5_MspInit+0xc4>)
 8005104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005106:	4a07      	ldr	r2, [pc, #28]	; (8005124 <I2C5_MspInit+0xc4>)
 8005108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800510c:	6793      	str	r3, [r2, #120]	; 0x78

  /* Release the I2C peripheral clock reset */
  BUS_I2C5_RELEASE_RESET();
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <I2C5_MspInit+0xc4>)
 8005110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005112:	4a04      	ldr	r2, [pc, #16]	; (8005124 <I2C5_MspInit+0xc4>)
 8005114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005118:	6793      	str	r3, [r2, #120]	; 0x78
}
 800511a:	bf00      	nop
 800511c:	3728      	adds	r7, #40	; 0x28
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	46020c00 	.word	0x46020c00
 8005128:	42021c00 	.word	0x42021c00

0800512c <I2C5_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C5_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C5_SCL_PIN;
 8005134:	2320      	movs	r3, #32
 8005136:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C5_SCL_GPIO_PORT, gpio_init_structure.Pin);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4619      	mov	r1, r3
 800513c:	480a      	ldr	r0, [pc, #40]	; (8005168 <I2C5_MspDeInit+0x3c>)
 800513e:	f004 fd9b 	bl	8009c78 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C5_SDA_PIN;
 8005142:	2310      	movs	r3, #16
 8005144:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C5_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4619      	mov	r1, r3
 800514a:	4807      	ldr	r0, [pc, #28]	; (8005168 <I2C5_MspDeInit+0x3c>)
 800514c:	f004 fd94 	bl	8009c78 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C5_CLK_DISABLE();
 8005150:	4b06      	ldr	r3, [pc, #24]	; (800516c <I2C5_MspDeInit+0x40>)
 8005152:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005156:	4a05      	ldr	r2, [pc, #20]	; (800516c <I2C5_MspDeInit+0x40>)
 8005158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800515c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
}
 8005160:	bf00      	nop
 8005162:	3720      	adds	r7, #32
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	42021c00 	.word	0x42021c00
 800516c:	46020c00 	.word	0x46020c00

08005170 <I2C5_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af04      	add	r7, sp, #16
 8005176:	607b      	str	r3, [r7, #4]
 8005178:	4603      	mov	r3, r0
 800517a:	81fb      	strh	r3, [r7, #14]
 800517c:	460b      	mov	r3, r1
 800517e:	81bb      	strh	r3, [r7, #12]
 8005180:	4613      	mov	r3, r2
 8005182:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c5, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8005184:	8978      	ldrh	r0, [r7, #10]
 8005186:	89ba      	ldrh	r2, [r7, #12]
 8005188:	89f9      	ldrh	r1, [r7, #14]
 800518a:	f242 7310 	movw	r3, #10000	; 0x2710
 800518e:	9302      	str	r3, [sp, #8]
 8005190:	8b3b      	ldrh	r3, [r7, #24]
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	4603      	mov	r3, r0
 800519a:	4807      	ldr	r0, [pc, #28]	; (80051b8 <I2C5_WriteReg+0x48>)
 800519c:	f005 f96e 	bl	800a47c <HAL_I2C_Mem_Write>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <I2C5_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	e001      	b.n	80051ae <I2C5_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80051aa:	f06f 0307 	mvn.w	r3, #7
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20197860 	.word	0x20197860

080051bc <I2C5_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af04      	add	r7, sp, #16
 80051c2:	607b      	str	r3, [r7, #4]
 80051c4:	4603      	mov	r3, r0
 80051c6:	81fb      	strh	r3, [r7, #14]
 80051c8:	460b      	mov	r3, r1
 80051ca:	81bb      	strh	r3, [r7, #12]
 80051cc:	4613      	mov	r3, r2
 80051ce:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c5, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80051d0:	8978      	ldrh	r0, [r7, #10]
 80051d2:	89ba      	ldrh	r2, [r7, #12]
 80051d4:	89f9      	ldrh	r1, [r7, #14]
 80051d6:	f242 7310 	movw	r3, #10000	; 0x2710
 80051da:	9302      	str	r3, [sp, #8]
 80051dc:	8b3b      	ldrh	r3, [r7, #24]
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	4603      	mov	r3, r0
 80051e6:	4807      	ldr	r0, [pc, #28]	; (8005204 <I2C5_ReadReg+0x48>)
 80051e8:	f005 fa5c 	bl	800a6a4 <HAL_I2C_Mem_Read>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <I2C5_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80051f2:	2300      	movs	r3, #0
 80051f4:	e001      	b.n	80051fa <I2C5_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80051f6:	f06f 0307 	mvn.w	r3, #7
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20197860 	.word	0x20197860

08005208 <I2C5_Recv>:
  * @param  pData      The target register value to be received
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af02      	add	r7, sp, #8
 800520e:	4603      	mov	r3, r0
 8005210:	6039      	str	r1, [r7, #0]
 8005212:	80fb      	strh	r3, [r7, #6]
 8005214:	4613      	mov	r3, r2
 8005216:	80bb      	strh	r3, [r7, #4]
  if (HAL_I2C_Master_Receive(&hbus_i2c5, DevAddr, pData, Length, 10000) == HAL_OK)
 8005218:	88bb      	ldrh	r3, [r7, #4]
 800521a:	88f9      	ldrh	r1, [r7, #6]
 800521c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005220:	9200      	str	r2, [sp, #0]
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	4806      	ldr	r0, [pc, #24]	; (8005240 <I2C5_Recv+0x38>)
 8005226:	f005 f833 	bl	800a290 <HAL_I2C_Master_Receive>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <I2C5_Recv+0x2c>
  {
    return BSP_ERROR_NONE;
 8005230:	2300      	movs	r3, #0
 8005232:	e001      	b.n	8005238 <I2C5_Recv+0x30>
  }

  return BSP_ERROR_BUS_FAILURE;
 8005234:	f06f 0307 	mvn.w	r3, #7
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20197860 	.word	0x20197860

08005244 <BSP_HSPI_RAM_Init>:
  * @param  Instance   HSPI Instance
  * @param  Init       HSPI Init structure
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_Init(uint32_t Instance, BSP_HSPI_RAM_Cfg_t *Init)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	; 0x28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  MX_HSPI_InitTypeDef hspi_init;

  /* Check if the instance is supported */
  if (Instance >= HSPI_RAM_INSTANCES_NUMBER)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <BSP_HSPI_RAM_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005254:	f06f 0301 	mvn.w	r3, #1
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
 800525a:	e066      	b.n	800532a <BSP_HSPI_RAM_Init+0xe6>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)
 800525c:	4935      	ldr	r1, [pc, #212]	; (8005334 <BSP_HSPI_RAM_Init+0xf0>)
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	1a9b      	subs	r3, r3, r2
 8005266:	440b      	add	r3, r1
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d15b      	bne.n	8005326 <BSP_HSPI_RAM_Init+0xe2>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp HSPI initialization */
      HSPI_RAM_MspInit(&hhspi_ram[Instance]);
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	4613      	mov	r3, r2
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	4413      	add	r3, r2
 8005276:	015b      	lsls	r3, r3, #5
 8005278:	4a2f      	ldr	r2, [pc, #188]	; (8005338 <BSP_HSPI_RAM_Init+0xf4>)
 800527a:	4413      	add	r3, r2
 800527c:	4618      	mov	r0, r3
 800527e:	f000 fbab 	bl	80059d8 <HSPI_RAM_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Fill config structure */
      hspi_init.ClockPrescaler = 0; /* HSPI clock = 160MHz / ClockPrescaler = 160MHz */
 8005282:	2300      	movs	r3, #0
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800528a:	61fb      	str	r3, [r7, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	fa93 f3a3 	rbit	r3, r3
 8005292:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	623b      	str	r3, [r7, #32]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <BSP_HSPI_RAM_Init+0x5e>
  {
    return 32U;
 800529e:	2320      	movs	r3, #32
 80052a0:	e003      	b.n	80052aa <BSP_HSPI_RAM_Init+0x66>
  }
  return __builtin_clz(value);
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	fab3 f383 	clz	r3, r3
 80052a8:	b2db      	uxtb	r3, r3
      hspi_init.MemorySize     = (uint32_t)POSITION_VAL(APS512XX_RAM_SIZE);
 80052aa:	60bb      	str	r3, [r7, #8]
      hspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 80052ac:	2300      	movs	r3, #0
 80052ae:	613b      	str	r3, [r7, #16]

      /* STM32 HSPI interface initialization */
      if (MX_HSPI_RAM_Init(&hhspi_ram[Instance], &hspi_init) != HAL_OK)
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	4613      	mov	r3, r2
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	4413      	add	r3, r2
 80052b8:	015b      	lsls	r3, r3, #5
 80052ba:	4a1f      	ldr	r2, [pc, #124]	; (8005338 <BSP_HSPI_RAM_Init+0xf4>)
 80052bc:	4413      	add	r3, r2
 80052be:	f107 0208 	add.w	r2, r7, #8
 80052c2:	4611      	mov	r1, r2
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 f867 	bl	8005398 <MX_HSPI_RAM_Init>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <BSP_HSPI_RAM_Init+0x94>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80052d0:	f06f 0303 	mvn.w	r3, #3
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
 80052d6:	e028      	b.n	800532a <BSP_HSPI_RAM_Init+0xe6>
      }
      /* Reset the memory */
      else if (APS512XX_Reset(&hhspi_ram[Instance]) != 0)/*APS512XX_OK*/
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	4613      	mov	r3, r2
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	4413      	add	r3, r2
 80052e0:	015b      	lsls	r3, r3, #5
 80052e2:	4a15      	ldr	r2, [pc, #84]	; (8005338 <BSP_HSPI_RAM_Init+0xf4>)
 80052e4:	4413      	add	r3, r2
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fe fc19 	bl	8003b1e <APS512XX_Reset>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <BSP_HSPI_RAM_Init+0xb6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80052f2:	f06f 0304 	mvn.w	r3, #4
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
 80052f8:	e017      	b.n	800532a <BSP_HSPI_RAM_Init+0xe6>
      }
      /* Configure the memory */
      else if (BSP_HSPI_RAM_Config16BitsOctalRAM(Instance, Init) != BSP_ERROR_NONE)
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f957 	bl	80055b0 <BSP_HSPI_RAM_Config16BitsOctalRAM>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <BSP_HSPI_RAM_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005308:	f06f 0304 	mvn.w	r3, #4
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
 800530e:	e00c      	b.n	800532a <BSP_HSPI_RAM_Init+0xe6>
      }
      else
      {
        Hspi_Ram_Ctx[Instance].IsInitialized = HSPI_ACCESS_INDIRECT;
 8005310:	4908      	ldr	r1, [pc, #32]	; (8005334 <BSP_HSPI_RAM_Init+0xf0>)
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	1a9b      	subs	r3, r3, r2
 800531a:	440b      	add	r3, r1
 800531c:	2201      	movs	r2, #1
 800531e:	701a      	strb	r2, [r3, #0]
        ret = BSP_ERROR_NONE;
 8005320:	2300      	movs	r3, #0
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
 8005324:	e001      	b.n	800532a <BSP_HSPI_RAM_Init+0xe6>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8005326:	2300      	movs	r3, #0
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  /* Return BSP status */
  return ret;
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800532c:	4618      	mov	r0, r3
 800532e:	3728      	adds	r7, #40	; 0x28
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000040 	.word	0x20000040
 8005338:	201978b4 	.word	0x201978b4

0800533c <Tuning_HSPI_Write>:
  * @brief  Tuning the HSPI write.
  * @param  hhspi          HSPI handle
  * @retval BSP status
  */
static int32_t Tuning_HSPI_Write(XSPI_HandleTypeDef *hhspi)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005344:	2300      	movs	r3, #0
 8005346:	61fb      	str	r3, [r7, #28]
  XSPI_HSCalTypeDef sCfg;

  hhspi->Instance = HSPI1;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a12      	ldr	r2, [pc, #72]	; (8005394 <Tuning_HSPI_Write+0x58>)
 800534c:	601a      	str	r2, [r3, #0]
  hhspi->State    = HAL_XSPI_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	655a      	str	r2, [r3, #84]	; 0x54

  sCfg.DelayValueType        = HAL_XSPI_CAL_DATA_OUTPUT_DELAY;
 8005354:	2302      	movs	r3, #2
 8005356:	60fb      	str	r3, [r7, #12]
  sCfg.FineCalibrationUnit   = 0x11;
 8005358:	2311      	movs	r3, #17
 800535a:	613b      	str	r3, [r7, #16]
  sCfg.CoarseCalibrationUnit = 0x05;
 800535c:	2305      	movs	r3, #5
 800535e:	617b      	str	r3, [r7, #20]
  sCfg.MaxCalibration        = HAL_XSPI_MAXCAL_REACHED;
 8005360:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005364:	61bb      	str	r3, [r7, #24]
  if (HAL_XSPI_SetDelayValue(hhspi, &sCfg) != HAL_OK)
 8005366:	f107 030c 	add.w	r3, r7, #12
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f00d fa47 	bl	8012800 <HAL_XSPI_SetDelayValue>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d007      	beq.n	8005388 <Tuning_HSPI_Write+0x4c>
  {
    if (hhspi->Instance == HSPI1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a05      	ldr	r2, [pc, #20]	; (8005394 <Tuning_HSPI_Write+0x58>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d102      	bne.n	8005388 <Tuning_HSPI_Write+0x4c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005382:	f06f 0303 	mvn.w	r3, #3
 8005386:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return BSP status */
  return ret;
 8005388:	69fb      	ldr	r3, [r7, #28]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3720      	adds	r7, #32
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	420d3400 	.word	0x420d3400

08005398 <MX_HSPI_RAM_Init>:
  * @param  hhspi          HSPI handle
  * @param  Init           HSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_HSPI_RAM_Init(XSPI_HandleTypeDef *hhspi, MX_HSPI_InitTypeDef *Init)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t hspi_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_HSPI);
 80053a2:	f04f 0000 	mov.w	r0, #0
 80053a6:	f04f 0101 	mov.w	r1, #1
 80053aa:	f009 f9d3 	bl	800e754 <HAL_RCCEx_GetPeriphCLKFreq>
 80053ae:	60f8      	str	r0, [r7, #12]

  /* HSPI initialization */
  hhspi->Instance = HSPI1;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a24      	ldr	r2, [pc, #144]	; (8005444 <MX_HSPI_RAM_Init+0xac>)
 80053b4:	601a      	str	r2, [r3, #0]

  hhspi->Init.FifoThresholdByte       = 2U;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	605a      	str	r2, [r3, #4]
  hhspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	609a      	str	r2, [r3, #8]
  hhspi->Init.MemoryType              = HAL_XSPI_MEMTYPE_APMEM_16BITS;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80053c8:	60da      	str	r2, [r3, #12]
  hhspi->Init.MemorySize              = Init->MemorySize;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	611a      	str	r2, [r3, #16]
  hhspi->Init.ChipSelectHighTimeCycle = 1U;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	615a      	str	r2, [r3, #20]
  hhspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	619a      	str	r2, [r3, #24]
  hhspi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	61da      	str	r2, [r3, #28]
  hhspi->Init.WrapSize                = HAL_XSPI_WRAP_32_BYTES;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80053ea:	621a      	str	r2, [r3, #32]
  hhspi->Init.ClockPrescaler          = Init->ClockPrescaler;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	625a      	str	r2, [r3, #36]	; 0x24
  hhspi->Init.SampleShifting          = Init->SampleShifting;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	629a      	str	r2, [r3, #40]	; 0x28
  hhspi->Init.DelayHoldQuarterCycle   = HAL_XSPI_DHQC_DISABLE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	62da      	str	r2, [r3, #44]	; 0x2c
  hhspi->Init.ChipSelectBoundary      = 11U;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	220b      	movs	r2, #11
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
  hhspi->Init.DelayBlockBypass        = HAL_XSPI_DELAY_BLOCK_ON;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	635a      	str	r2, [r3, #52]	; 0x34
  /* tCEM = 2 us max => REFRESH+4 clock cycles for read */
  hhspi->Init.Refresh                 = ((2U * (hspi_clk / (Init->ClockPrescaler + 1))) / 1000000U) - 4U;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	3301      	adds	r3, #1
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	fbb2 f3f3 	udiv	r3, r2, r3
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	4a0a      	ldr	r2, [pc, #40]	; (8005448 <MX_HSPI_RAM_Init+0xb0>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	0c9b      	lsrs	r3, r3, #18
 8005424:	1f1a      	subs	r2, r3, #4
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	63da      	str	r2, [r3, #60]	; 0x3c
  hhspi->Init.MaxTran                 = 0U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	639a      	str	r2, [r3, #56]	; 0x38

  status = HAL_XSPI_Init(hhspi);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f00c fc2d 	bl	8011c90 <HAL_XSPI_Init>
 8005436:	4603      	mov	r3, r0
 8005438:	72fb      	strb	r3, [r7, #11]

  return status;
 800543a:	7afb      	ldrb	r3, [r7, #11]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	420d3400 	.word	0x420d3400
 8005448:	431bde83 	.word	0x431bde83

0800544c <BSP_HSPI_RAM_EnableMemoryMappedMode>:
  * @brief  Configure the HSPI in memory-mapped mode
  * @param  Instance  HSPI instance
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_EnableMemoryMappedMode(uint32_t Instance)
{
 800544c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800544e:	b087      	sub	sp, #28
 8005450:	af02      	add	r7, sp, #8
 8005452:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005454:	2300      	movs	r3, #0
 8005456:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= HSPI_RAM_INSTANCES_NUMBER)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800545e:	f06f 0301 	mvn.w	r3, #1
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e09a      	b.n	800559c <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
  }
  else
  {
    if (Tuning_HSPI_Write(&hhspi_ram[Instance]) != 0UL)
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	4613      	mov	r3, r2
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	4413      	add	r3, r2
 800546e:	015b      	lsls	r3, r3, #5
 8005470:	4a4d      	ldr	r2, [pc, #308]	; (80055a8 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x15c>)
 8005472:	4413      	add	r3, r2
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff ff61 	bl	800533c <Tuning_HSPI_Write>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x3c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005480:	f06f 0303 	mvn.w	r3, #3
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	e089      	b.n	800559c <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
    }
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	4613      	mov	r3, r2
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	4413      	add	r3, r2
 8005490:	015b      	lsls	r3, r3, #5
 8005492:	4a45      	ldr	r2, [pc, #276]	; (80055a8 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x15c>)
 8005494:	189c      	adds	r4, r3, r2
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 8005496:	4945      	ldr	r1, [pc, #276]	; (80055ac <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	440b      	add	r3, r1
 80054a2:	3301      	adds	r3, #1
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	f003 0320 	and.w	r3, r3, #32
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10c      	bne.n	80054c8 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x7c>
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 80054ae:	493f      	ldr	r1, [pc, #252]	; (80055ac <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	440b      	add	r3, r1
 80054ba:	3302      	adds	r3, #2
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	089b      	lsrs	r3, r3, #2
 80054c0:	f003 0307 	and.w	r3, r3, #7
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 80054c4:	1cd9      	adds	r1, r3, #3
 80054c6:	e00c      	b.n	80054e2 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x96>
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 80054c8:	4938      	ldr	r1, [pc, #224]	; (80055ac <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4613      	mov	r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	440b      	add	r3, r1
 80054d4:	3302      	adds	r3, #2
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	089b      	lsrs	r3, r3, #2
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	3303      	adds	r3, #3
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 80054e0:	0059      	lsls	r1, r3, #1
                                                                             (uint32_t)(Hspi_Ram_Ctx[Instance].LatencyType)),
                                             APS512XX_WRITE_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].WriteLatencyCode)),
 80054e2:	4832      	ldr	r0, [pc, #200]	; (80055ac <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	1a9b      	subs	r3, r3, r2
 80054ec:	4403      	add	r3, r0
 80054ee:	3303      	adds	r3, #3
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d02a      	beq.n	8005550 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x104>
                                             APS512XX_WRITE_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].WriteLatencyCode)),
 80054fa:	482c      	ldr	r0, [pc, #176]	; (80055ac <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	4613      	mov	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	1a9b      	subs	r3, r3, r2
 8005504:	4403      	add	r3, r0
 8005506:	3303      	adds	r3, #3
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b00      	cmp	r3, #0
 8005510:	d11c      	bne.n	800554c <BSP_HSPI_RAM_EnableMemoryMappedMode+0x100>
 8005512:	4826      	ldr	r0, [pc, #152]	; (80055ac <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	4403      	add	r3, r0
 800551e:	3303      	adds	r3, #3
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00e      	beq.n	8005548 <BSP_HSPI_RAM_EnableMemoryMappedMode+0xfc>
 800552a:	4820      	ldr	r0, [pc, #128]	; (80055ac <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	4613      	mov	r3, r2
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	1a9b      	subs	r3, r3, r2
 8005534:	4403      	add	r3, r0
 8005536:	3303      	adds	r3, #3
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	b25b      	sxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	db01      	blt.n	8005544 <BSP_HSPI_RAM_EnableMemoryMappedMode+0xf8>
 8005540:	2205      	movs	r2, #5
 8005542:	e006      	b.n	8005552 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 8005544:	2206      	movs	r2, #6
 8005546:	e004      	b.n	8005552 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 8005548:	2204      	movs	r2, #4
 800554a:	e002      	b.n	8005552 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 800554c:	2207      	movs	r2, #7
 800554e:	e000      	b.n	8005552 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005550:	2203      	movs	r2, #3
                                             (uint32_t)(Hspi_Ram_Ctx[Instance].IOMode),
 8005552:	4d16      	ldr	r5, [pc, #88]	; (80055ac <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	4603      	mov	r3, r0
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	1a1b      	subs	r3, r3, r0
 800555c:	442b      	add	r3, r5
 800555e:	3306      	adds	r3, #6
 8005560:	781b      	ldrb	r3, [r3, #0]
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005562:	461e      	mov	r6, r3
                                             (uint32_t)(Hspi_Ram_Ctx[Instance].BurstType)) != (int32_t)APS512XX_OK)
 8005564:	4d11      	ldr	r5, [pc, #68]	; (80055ac <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	4603      	mov	r3, r0
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	1a1b      	subs	r3, r3, r0
 800556e:	442b      	add	r3, r5
 8005570:	3304      	adds	r3, #4
 8005572:	781b      	ldrb	r3, [r3, #0]
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	4633      	mov	r3, r6
 8005578:	4620      	mov	r0, r4
 800557a:	f7fe f9ad 	bl	80038d8 <APS512XX_EnableMemoryMappedMode>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <BSP_HSPI_RAM_EnableMemoryMappedMode+0x140>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005584:	f06f 0304 	mvn.w	r3, #4
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	e007      	b.n	800559c <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
    }
    else /* Update HSPI context if all operations are well done */
    {
      Hspi_Ram_Ctx[Instance].IsInitialized = HSPI_ACCESS_MMP;
 800558c:	4907      	ldr	r1, [pc, #28]	; (80055ac <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	4613      	mov	r3, r2
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	440b      	add	r3, r1
 8005598:	2202      	movs	r2, #2
 800559a:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return BSP status */
  return ret;
 800559c:	68fb      	ldr	r3, [r7, #12]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055a6:	bf00      	nop
 80055a8:	201978b4 	.word	0x201978b4
 80055ac:	20000040 	.word	0x20000040

080055b0 <BSP_HSPI_RAM_Config16BitsOctalRAM>:
  * @param  Instance    HSPI instance
  * @param  Cfg         pointer to the RAM config
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_Config16BitsOctalRAM(uint32_t Instance, BSP_HSPI_RAM_Cfg_t *Cfg)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80055ba:	2300      	movs	r3, #0
 80055bc:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if ((Instance >= HSPI_RAM_INSTANCES_NUMBER)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d103      	bne.n	80055cc <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1c>
      || (Cfg->BurstLength == (BSP_HSPI_RAM_BurstLength_t)APS512XX_MR8_BL_2K_BYTES))
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	791b      	ldrb	r3, [r3, #4]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d103      	bne.n	80055d4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80055cc:	f06f 0301 	mvn.w	r3, #1
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	e1f7      	b.n	80059c4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
  }
  else
  {
    /* Check if MMP mode locked ***********************************************/
    if (Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_MMP)
 80055d4:	49a9      	ldr	r1, [pc, #676]	; (800587c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	4613      	mov	r3, r2
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	1a9b      	subs	r3, r3, r2
 80055de:	440b      	add	r3, r1
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d103      	bne.n	80055ee <BSP_HSPI_RAM_Config16BitsOctalRAM+0x3e>
    {
      ret = BSP_ERROR_HSPI_MMP_LOCK_FAILURE;
 80055e6:	f06f 031f 	mvn.w	r3, #31
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	e1ea      	b.n	80059c4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
    }
    else
    {
      if ((Hspi_Ram_Ctx[Instance].IsInitialized  == HSPI_ACCESS_NONE) ||
 80055ee:	49a3      	ldr	r1, [pc, #652]	; (800587c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	4613      	mov	r3, r2
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	1a9b      	subs	r3, r3, r2
 80055f8:	440b      	add	r3, r1
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d017      	beq.n	8005630 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x80>
          (Hspi_Ram_Ctx[Instance].LatencyType     != Cfg->LatencyType)  ||
 8005600:	499e      	ldr	r1, [pc, #632]	; (800587c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	1a9b      	subs	r3, r3, r2
 800560a:	440b      	add	r3, r1
 800560c:	3301      	adds	r3, #1
 800560e:	781a      	ldrb	r2, [r3, #0]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
      if ((Hspi_Ram_Ctx[Instance].IsInitialized  == HSPI_ACCESS_NONE) ||
 8005614:	429a      	cmp	r2, r3
 8005616:	d10b      	bne.n	8005630 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x80>
          (Hspi_Ram_Ctx[Instance].ReadLatencyCode != Cfg->ReadLatencyCode))
 8005618:	4998      	ldr	r1, [pc, #608]	; (800587c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	440b      	add	r3, r1
 8005624:	3302      	adds	r3, #2
 8005626:	781a      	ldrb	r2, [r3, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	785b      	ldrb	r3, [r3, #1]
          (Hspi_Ram_Ctx[Instance].LatencyType     != Cfg->LatencyType)  ||
 800562c:	429a      	cmp	r2, r3
 800562e:	d040      	beq.n	80056b2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
      {
        /* Reading the configuration of Mode Register 0 ***********************/
        if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg,
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	4413      	add	r3, r2
 8005638:	015b      	lsls	r3, r3, #5
 800563a:	4a91      	ldr	r2, [pc, #580]	; (8005880 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 800563c:	1898      	adds	r0, r3, r2
                             (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != \
 800563e:	498f      	ldr	r1, [pc, #572]	; (800587c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	4613      	mov	r3, r2
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	1a9b      	subs	r3, r3, r2
 8005648:	440b      	add	r3, r1
 800564a:	3302      	adds	r3, #2
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	089b      	lsrs	r3, r3, #2
 8005650:	f003 0307 	and.w	r3, r3, #7
        if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg,
 8005654:	3303      	adds	r3, #3
 8005656:	f107 0208 	add.w	r2, r7, #8
 800565a:	2100      	movs	r1, #0
 800565c:	f7fe f9b8 	bl	80039d0 <APS512XX_ReadReg>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <BSP_HSPI_RAM_Config16BitsOctalRAM+0xbe>
            (int32_t)APS512XX_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8005666:	f06f 0304 	mvn.w	r3, #4
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e021      	b.n	80056b2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
        }
        else
        {
          /* Configure the 16-bits Octal RAM memory ***************************/
          MODIFY_REG(reg[0], ((uint32_t)APS512XX_MR0_LATENCY_TYPE | (uint32_t)APS512XX_MR0_READ_LATENCY_CODE |
 800566e:	7a3b      	ldrb	r3, [r7, #8]
 8005670:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005674:	b2da      	uxtb	r2, r3
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	7819      	ldrb	r1, [r3, #0]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	785b      	ldrb	r3, [r3, #1]
 800567e:	430b      	orrs	r3, r1
 8005680:	b2db      	uxtb	r3, r3
 8005682:	4313      	orrs	r3, r2
 8005684:	b2db      	uxtb	r3, r3
 8005686:	f043 0301 	orr.w	r3, r3, #1
 800568a:	b2db      	uxtb	r3, r3
 800568c:	723b      	strb	r3, [r7, #8]
                              (uint32_t)APS512XX_MR0_DRIVE_STRENGTH),
                     ((uint32_t)(Cfg->LatencyType) | (uint32_t)(Cfg->ReadLatencyCode) | (uint32_t)CONF_HSPI_DS));

          if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg[0]) != APS512XX_OK)
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	4413      	add	r3, r2
 8005696:	015b      	lsls	r3, r3, #5
 8005698:	4a79      	ldr	r2, [pc, #484]	; (8005880 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 800569a:	4413      	add	r3, r2
 800569c:	7a3a      	ldrb	r2, [r7, #8]
 800569e:	2100      	movs	r1, #0
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fe f9e9 	bl	8003a78 <APS512XX_WriteReg>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80056ac:	f06f 0304 	mvn.w	r3, #4
 80056b0:	60fb      	str	r3, [r7, #12]
          }
          /* Configure the peripheral *****************************************/
        }
      }

      if (ret == BSP_ERROR_NONE)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d148      	bne.n	800574a <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
      {
        if ((Hspi_Ram_Ctx[Instance].IsInitialized   == HSPI_ACCESS_NONE) ||
 80056b8:	4970      	ldr	r1, [pc, #448]	; (800587c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	440b      	add	r3, r1
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00b      	beq.n	80056e2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x132>
            (Hspi_Ram_Ctx[Instance].WriteLatencyCode != Cfg->WriteLatencyCode))
 80056ca:	496c      	ldr	r1, [pc, #432]	; (800587c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	440b      	add	r3, r1
 80056d6:	3303      	adds	r3, #3
 80056d8:	781a      	ldrb	r2, [r3, #0]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	789b      	ldrb	r3, [r3, #2]
        if ((Hspi_Ram_Ctx[Instance].IsInitialized   == HSPI_ACCESS_NONE) ||
 80056de:	429a      	cmp	r2, r3
 80056e0:	d033      	beq.n	800574a <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
        {
          /* Reading the configuration of Mode Register 4 ***********************/
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg,
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	4413      	add	r3, r2
 80056ea:	015b      	lsls	r3, r3, #5
 80056ec:	4a64      	ldr	r2, [pc, #400]	; (8005880 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 80056ee:	1898      	adds	r0, r3, r2
                               (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != (int32_t)APS512XX_OK)
 80056f0:	4962      	ldr	r1, [pc, #392]	; (800587c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	4613      	mov	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	1a9b      	subs	r3, r3, r2
 80056fa:	440b      	add	r3, r1
 80056fc:	3302      	adds	r3, #2
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	089b      	lsrs	r3, r3, #2
 8005702:	f003 0307 	and.w	r3, r3, #7
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg,
 8005706:	3303      	adds	r3, #3
 8005708:	f107 0208 	add.w	r2, r7, #8
 800570c:	2104      	movs	r1, #4
 800570e:	f7fe f95f 	bl	80039d0 <APS512XX_ReadReg>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x170>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005718:	f06f 0304 	mvn.w	r3, #4
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	e014      	b.n	800574a <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
          }
          else
          {
            /* Configure the 16-bits Octal RAM memory ***************************/
            MODIFY_REG(reg[0], (APS512XX_MR4_WRITE_LATENCY_CODE | APS512XX_MR4_RF_RATE | APS512XX_MR4_PASR),
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	789b      	ldrb	r3, [r3, #2]
 8005724:	723b      	strb	r3, [r7, #8]
                       (Cfg->WriteLatencyCode | CONF_HSPI_RF | CONF_HSPI_PASR));

            if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg[0]) != APS512XX_OK)
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	4613      	mov	r3, r2
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	4413      	add	r3, r2
 800572e:	015b      	lsls	r3, r3, #5
 8005730:	4a53      	ldr	r2, [pc, #332]	; (8005880 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005732:	4413      	add	r3, r2
 8005734:	7a3a      	ldrb	r2, [r7, #8]
 8005736:	2104      	movs	r1, #4
 8005738:	4618      	mov	r0, r3
 800573a:	f7fe f99d 	bl	8003a78 <APS512XX_WriteReg>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005744:	f06f 0304 	mvn.w	r3, #4
 8005748:	60fb      	str	r3, [r7, #12]
            }
          }
        }
      }

      if (ret == BSP_ERROR_NONE)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	f040 80ec 	bne.w	800592a <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
      {
        if ((Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)  ||
 8005752:	494a      	ldr	r1, [pc, #296]	; (800587c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	1a9b      	subs	r3, r3, r2
 800575c:	440b      	add	r3, r1
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d024      	beq.n	80057ae <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].BurstType      != Cfg->BurstType)   ||
 8005764:	4945      	ldr	r1, [pc, #276]	; (800587c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	4613      	mov	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	440b      	add	r3, r1
 8005770:	3304      	adds	r3, #4
 8005772:	781a      	ldrb	r2, [r3, #0]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	78db      	ldrb	r3, [r3, #3]
        if ((Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)  ||
 8005778:	429a      	cmp	r2, r3
 800577a:	d118      	bne.n	80057ae <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].BurstLength    != Cfg->BurstLength) ||
 800577c:	493f      	ldr	r1, [pc, #252]	; (800587c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	4613      	mov	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	440b      	add	r3, r1
 8005788:	3305      	adds	r3, #5
 800578a:	781a      	ldrb	r2, [r3, #0]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	791b      	ldrb	r3, [r3, #4]
            (Hspi_Ram_Ctx[Instance].BurstType      != Cfg->BurstType)   ||
 8005790:	429a      	cmp	r2, r3
 8005792:	d10c      	bne.n	80057ae <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].IOMode         != Cfg->IOMode))
 8005794:	4939      	ldr	r1, [pc, #228]	; (800587c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	1a9b      	subs	r3, r3, r2
 800579e:	440b      	add	r3, r1
 80057a0:	3306      	adds	r3, #6
 80057a2:	781a      	ldrb	r2, [r3, #0]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	795b      	ldrb	r3, [r3, #5]
            (Hspi_Ram_Ctx[Instance].BurstLength    != Cfg->BurstLength) ||
 80057a8:	429a      	cmp	r2, r3
 80057aa:	f000 80be 	beq.w	800592a <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
        {
          /* Reading the configuration of Mode Register 8 ***********************/
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg,
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	4613      	mov	r3, r2
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	4413      	add	r3, r2
 80057b6:	015b      	lsls	r3, r3, #5
 80057b8:	4a31      	ldr	r2, [pc, #196]	; (8005880 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 80057ba:	1898      	adds	r0, r3, r2
                               (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != (int32_t)APS512XX_OK)
 80057bc:	492f      	ldr	r1, [pc, #188]	; (800587c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	4613      	mov	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	1a9b      	subs	r3, r3, r2
 80057c6:	440b      	add	r3, r1
 80057c8:	3302      	adds	r3, #2
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	089b      	lsrs	r3, r3, #2
 80057ce:	f003 0307 	and.w	r3, r3, #7
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg,
 80057d2:	3303      	adds	r3, #3
 80057d4:	f107 0208 	add.w	r2, r7, #8
 80057d8:	2108      	movs	r1, #8
 80057da:	f7fe f8f9 	bl	80039d0 <APS512XX_ReadReg>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <BSP_HSPI_RAM_Config16BitsOctalRAM+0x23c>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80057e4:	f06f 0304 	mvn.w	r3, #4
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	e09e      	b.n	800592a <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
          }
          else
          {
            /* Configure the 16-bits Octal RAM memory ***************************/
            MODIFY_REG(reg[0], ((uint32_t)APS512XX_MR8_X8_X16 | (uint32_t)APS512XX_MR8_BL),
 80057ec:	7a3b      	ldrb	r3, [r7, #8]
 80057ee:	f023 0343 	bic.w	r3, r3, #67	; 0x43
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	7959      	ldrb	r1, [r3, #5]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	791b      	ldrb	r3, [r3, #4]
 80057fc:	430b      	orrs	r3, r1
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	4313      	orrs	r3, r2
 8005802:	b2db      	uxtb	r3, r3
 8005804:	723b      	strb	r3, [r7, #8]
                       ((uint32_t)(Cfg->IOMode) | (uint32_t)(Cfg->BurstLength)));

            if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg[0]) != APS512XX_OK)
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	4613      	mov	r3, r2
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	4413      	add	r3, r2
 800580e:	015b      	lsls	r3, r3, #5
 8005810:	4a1b      	ldr	r2, [pc, #108]	; (8005880 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005812:	4413      	add	r3, r2
 8005814:	7a3a      	ldrb	r2, [r7, #8]
 8005816:	2108      	movs	r1, #8
 8005818:	4618      	mov	r0, r3
 800581a:	f7fe f92d 	bl	8003a78 <APS512XX_WriteReg>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x27c>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005824:	f06f 0304 	mvn.w	r3, #4
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	e07e      	b.n	800592a <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
            }
            else
            {
              /* Configure the peripheral *****************************************/
              if (Cfg->BurstType == BSP_HSPI_RAM_HYBRID_BURST)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	78db      	ldrb	r3, [r3, #3]
 8005830:	2b04      	cmp	r3, #4
 8005832:	d133      	bne.n	800589c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2ec>
              {
                switch (Cfg->BurstLength)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	791b      	ldrb	r3, [r3, #4]
 8005838:	2b02      	cmp	r3, #2
 800583a:	d023      	beq.n	8005884 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d4>
 800583c:	2b02      	cmp	r3, #2
 800583e:	dc38      	bgt.n	80058b2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x302>
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <BSP_HSPI_RAM_Config16BitsOctalRAM+0x29a>
 8005844:	2b01      	cmp	r3, #1
 8005846:	d00c      	beq.n	8005862 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2b2>
                    break;
                  case APS512XX_MR8_BL_64_BYTES :
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_64_BYTES;
                    break;
                  default :
                    break;
 8005848:	e033      	b.n	80058b2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x302>
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_16_BYTES;
 800584a:	490d      	ldr	r1, [pc, #52]	; (8005880 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	4413      	add	r3, r2
 8005854:	015b      	lsls	r3, r3, #5
 8005856:	440b      	add	r3, r1
 8005858:	3320      	adds	r3, #32
 800585a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800585e:	601a      	str	r2, [r3, #0]
                    break;
 8005860:	e028      	b.n	80058b4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_32_BYTES;
 8005862:	4907      	ldr	r1, [pc, #28]	; (8005880 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	4613      	mov	r3, r2
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	4413      	add	r3, r2
 800586c:	015b      	lsls	r3, r3, #5
 800586e:	440b      	add	r3, r1
 8005870:	3320      	adds	r3, #32
 8005872:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005876:	601a      	str	r2, [r3, #0]
                    break;
 8005878:	e01c      	b.n	80058b4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
 800587a:	bf00      	nop
 800587c:	20000040 	.word	0x20000040
 8005880:	201978b4 	.word	0x201978b4
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_64_BYTES;
 8005884:	4952      	ldr	r1, [pc, #328]	; (80059d0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	4413      	add	r3, r2
 800588e:	015b      	lsls	r3, r3, #5
 8005890:	440b      	add	r3, r1
 8005892:	3320      	adds	r3, #32
 8005894:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005898:	601a      	str	r2, [r3, #0]
                    break;
 800589a:	e00b      	b.n	80058b4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                }
              }
              else
              {
                hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 800589c:	494c      	ldr	r1, [pc, #304]	; (80059d0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	4613      	mov	r3, r2
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	4413      	add	r3, r2
 80058a6:	015b      	lsls	r3, r3, #5
 80058a8:	440b      	add	r3, r1
 80058aa:	3320      	adds	r3, #32
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	e000      	b.n	80058b4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                    break;
 80058b2:	bf00      	nop
              }

              if (Cfg->IOMode == BSP_HSPI_RAM_IO_X16_MODE)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	795b      	ldrb	r3, [r3, #5]
 80058b8:	2b40      	cmp	r3, #64	; 0x40
 80058ba:	d10b      	bne.n	80058d4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x324>
              {
                hhspi_ram[Instance].Init.MemoryType = HAL_XSPI_MEMTYPE_APMEM_16BITS;
 80058bc:	4944      	ldr	r1, [pc, #272]	; (80059d0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	4613      	mov	r3, r2
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	4413      	add	r3, r2
 80058c6:	015b      	lsls	r3, r3, #5
 80058c8:	440b      	add	r3, r1
 80058ca:	330c      	adds	r3, #12
 80058cc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	e00a      	b.n	80058ea <BSP_HSPI_RAM_Config16BitsOctalRAM+0x33a>
              }
              else
              {
                hhspi_ram[Instance].Init.MemoryType = HAL_XSPI_MEMTYPE_APMEM;
 80058d4:	493e      	ldr	r1, [pc, #248]	; (80059d0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	4613      	mov	r3, r2
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	4413      	add	r3, r2
 80058de:	015b      	lsls	r3, r3, #5
 80058e0:	440b      	add	r3, r1
 80058e2:	330c      	adds	r3, #12
 80058e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058e8:	601a      	str	r2, [r3, #0]
              }

              if (HAL_XSPI_DeInit(&hhspi_ram[Instance]) != HAL_OK)
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	4613      	mov	r3, r2
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	4413      	add	r3, r2
 80058f2:	015b      	lsls	r3, r3, #5
 80058f4:	4a36      	ldr	r2, [pc, #216]	; (80059d0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 80058f6:	4413      	add	r3, r2
 80058f8:	4618      	mov	r0, r3
 80058fa:	f00c fb15 	bl	8011f28 <HAL_XSPI_DeInit>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <BSP_HSPI_RAM_Config16BitsOctalRAM+0x35a>
              {
                ret = BSP_ERROR_PERIPH_FAILURE;
 8005904:	f06f 0303 	mvn.w	r3, #3
 8005908:	60fb      	str	r3, [r7, #12]
              }

              if (HAL_XSPI_Init(&hhspi_ram[Instance]) != HAL_OK)
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	4613      	mov	r3, r2
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	4413      	add	r3, r2
 8005912:	015b      	lsls	r3, r3, #5
 8005914:	4a2e      	ldr	r2, [pc, #184]	; (80059d0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005916:	4413      	add	r3, r2
 8005918:	4618      	mov	r0, r3
 800591a:	f00c f9b9 	bl	8011c90 <HAL_XSPI_Init>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
              {
                ret = BSP_ERROR_PERIPH_FAILURE;
 8005924:	f06f 0303 	mvn.w	r3, #3
 8005928:	60fb      	str	r3, [r7, #12]
          }
        }
      }

      /* Update HSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d149      	bne.n	80059c4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
      {
        /* Update current status parameter *****************************************/
        Hspi_Ram_Ctx[Instance].IsInitialized    = HSPI_ACCESS_INDIRECT;
 8005930:	4928      	ldr	r1, [pc, #160]	; (80059d4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	4613      	mov	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	1a9b      	subs	r3, r3, r2
 800593a:	440b      	add	r3, r1
 800593c:	2201      	movs	r2, #1
 800593e:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].LatencyType      = Cfg->LatencyType;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	7818      	ldrb	r0, [r3, #0]
 8005944:	4923      	ldr	r1, [pc, #140]	; (80059d4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	4613      	mov	r3, r2
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	440b      	add	r3, r1
 8005950:	3301      	adds	r3, #1
 8005952:	4602      	mov	r2, r0
 8005954:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].ReadLatencyCode  = Cfg->ReadLatencyCode;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	7858      	ldrb	r0, [r3, #1]
 800595a:	491e      	ldr	r1, [pc, #120]	; (80059d4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	1a9b      	subs	r3, r3, r2
 8005964:	440b      	add	r3, r1
 8005966:	3302      	adds	r3, #2
 8005968:	4602      	mov	r2, r0
 800596a:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].WriteLatencyCode = Cfg->WriteLatencyCode;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	7898      	ldrb	r0, [r3, #2]
 8005970:	4918      	ldr	r1, [pc, #96]	; (80059d4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	4613      	mov	r3, r2
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	1a9b      	subs	r3, r3, r2
 800597a:	440b      	add	r3, r1
 800597c:	3303      	adds	r3, #3
 800597e:	4602      	mov	r2, r0
 8005980:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].BurstType        = Cfg->BurstType;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	78d8      	ldrb	r0, [r3, #3]
 8005986:	4913      	ldr	r1, [pc, #76]	; (80059d4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	440b      	add	r3, r1
 8005992:	3304      	adds	r3, #4
 8005994:	4602      	mov	r2, r0
 8005996:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].BurstLength      = Cfg->BurstLength;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	7918      	ldrb	r0, [r3, #4]
 800599c:	490d      	ldr	r1, [pc, #52]	; (80059d4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4613      	mov	r3, r2
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	1a9b      	subs	r3, r3, r2
 80059a6:	440b      	add	r3, r1
 80059a8:	3305      	adds	r3, #5
 80059aa:	4602      	mov	r2, r0
 80059ac:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].IOMode           = Cfg->IOMode;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	7958      	ldrb	r0, [r3, #5]
 80059b2:	4908      	ldr	r1, [pc, #32]	; (80059d4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	4613      	mov	r3, r2
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	1a9b      	subs	r3, r3, r2
 80059bc:	440b      	add	r3, r1
 80059be:	3306      	adds	r3, #6
 80059c0:	4602      	mov	r2, r0
 80059c2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80059c4:	68fb      	ldr	r3, [r7, #12]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	201978b4 	.word	0x201978b4
 80059d4:	20000040 	.word	0x20000040

080059d8 <HSPI_RAM_MspInit>:
  * @brief  Initializes the HSPI MSP.
  * @param  hhspi HSPI handle
  * @retval None
  */
static void HSPI_RAM_MspInit(XSPI_HandleTypeDef *hhspi)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b0a0      	sub	sp, #128	; 0x80
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdmatx, hdmarx;
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80059e0:	4bbe      	ldr	r3, [pc, #760]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 80059e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059e6:	4abd      	ldr	r2, [pc, #756]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 80059e8:	f043 0304 	orr.w	r3, r3, #4
 80059ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80059f0:	4bba      	ldr	r3, [pc, #744]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 80059f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80059fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80059fe:	4bb8      	ldr	r3, [pc, #736]	; (8005ce0 <HSPI_RAM_MspInit+0x308>)
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	4ab7      	ldr	r2, [pc, #732]	; (8005ce0 <HSPI_RAM_MspInit+0x308>)
 8005a04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a08:	6113      	str	r3, [r2, #16]

  /* Enable the HSPI memory interface, DMA and GPIO clocks */
  HSPI_CLK_ENABLE();
 8005a0a:	4bb4      	ldr	r3, [pc, #720]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a10:	4ab2      	ldr	r2, [pc, #712]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005a12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a1a:	4bb0      	ldr	r3, [pc, #704]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a24:	667b      	str	r3, [r7, #100]	; 0x64
 8005a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  HSPI_RAM_DMAx_CLK_ENABLE();
 8005a28:	4bac      	ldr	r3, [pc, #688]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2e:	4aab      	ldr	r2, [pc, #684]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005a30:	f043 0301 	orr.w	r3, r3, #1
 8005a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005a38:	4ba8      	ldr	r3, [pc, #672]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	663b      	str	r3, [r7, #96]	; 0x60
 8005a44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  HSPI_CLK_GPIO_CLK_ENABLE();
 8005a46:	4ba5      	ldr	r3, [pc, #660]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a4c:	4aa3      	ldr	r2, [pc, #652]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a56:	4ba1      	ldr	r3, [pc, #644]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  HSPI_DQS0_GPIO_CLK_ENABLE();
 8005a64:	4b9d      	ldr	r3, [pc, #628]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a6a:	4a9c      	ldr	r2, [pc, #624]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a70:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a74:	4b99      	ldr	r3, [pc, #612]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  HSPI_DQS1_GPIO_CLK_ENABLE();
 8005a82:	4b96      	ldr	r3, [pc, #600]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a88:	4a94      	ldr	r2, [pc, #592]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a92:	4b92      	ldr	r3, [pc, #584]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9c:	657b      	str	r3, [r7, #84]	; 0x54
 8005a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  HSPI_CS_GPIO_CLK_ENABLE();
 8005aa0:	4b8e      	ldr	r3, [pc, #568]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa6:	4a8d      	ldr	r2, [pc, #564]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ab0:	4b8a      	ldr	r3, [pc, #552]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aba:	653b      	str	r3, [r7, #80]	; 0x50
 8005abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  HSPI_D0_GPIO_CLK_ENABLE();
 8005abe:	4b87      	ldr	r3, [pc, #540]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac4:	4a85      	ldr	r2, [pc, #532]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ace:	4b83      	ldr	r3, [pc, #524]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  HSPI_D1_GPIO_CLK_ENABLE();
 8005adc:	4b7f      	ldr	r3, [pc, #508]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ae2:	4a7e      	ldr	r2, [pc, #504]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005aec:	4b7b      	ldr	r3, [pc, #492]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  HSPI_D2_GPIO_CLK_ENABLE();
 8005afa:	4b78      	ldr	r3, [pc, #480]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b00:	4a76      	ldr	r2, [pc, #472]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b0a:	4b74      	ldr	r3, [pc, #464]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b14:	647b      	str	r3, [r7, #68]	; 0x44
 8005b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  HSPI_D3_GPIO_CLK_ENABLE();
 8005b18:	4b70      	ldr	r3, [pc, #448]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b1e:	4a6f      	ldr	r2, [pc, #444]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b24:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b28:	4b6c      	ldr	r3, [pc, #432]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b32:	643b      	str	r3, [r7, #64]	; 0x40
 8005b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  HSPI_D4_GPIO_CLK_ENABLE();
 8005b36:	4b69      	ldr	r3, [pc, #420]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b3c:	4a67      	ldr	r2, [pc, #412]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b46:	4b65      	ldr	r3, [pc, #404]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  HSPI_D5_GPIO_CLK_ENABLE();
 8005b54:	4b61      	ldr	r3, [pc, #388]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b5a:	4a60      	ldr	r2, [pc, #384]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b60:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b64:	4b5d      	ldr	r3, [pc, #372]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  HSPI_D6_GPIO_CLK_ENABLE();
 8005b72:	4b5a      	ldr	r3, [pc, #360]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b78:	4a58      	ldr	r2, [pc, #352]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b82:	4b56      	ldr	r3, [pc, #344]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  HSPI_D7_GPIO_CLK_ENABLE();
 8005b90:	4b52      	ldr	r3, [pc, #328]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b96:	4a51      	ldr	r2, [pc, #324]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b9c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ba0:	4b4e      	ldr	r3, [pc, #312]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005baa:	633b      	str	r3, [r7, #48]	; 0x30
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  HSPI_D8_GPIO_CLK_ENABLE();
 8005bae:	4b4b      	ldr	r3, [pc, #300]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb4:	4a49      	ldr	r2, [pc, #292]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005bbe:	4b47      	ldr	r3, [pc, #284]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  HSPI_D9_GPIO_CLK_ENABLE();
 8005bcc:	4b43      	ldr	r3, [pc, #268]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd2:	4a42      	ldr	r2, [pc, #264]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005bdc:	4b3f      	ldr	r3, [pc, #252]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  HSPI_D10_GPIO_CLK_ENABLE();
 8005bea:	4b3c      	ldr	r3, [pc, #240]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bf0:	4a3a      	ldr	r2, [pc, #232]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bf6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005bfa:	4b38      	ldr	r3, [pc, #224]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c04:	627b      	str	r3, [r7, #36]	; 0x24
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  HSPI_D11_GPIO_CLK_ENABLE();
 8005c08:	4b34      	ldr	r3, [pc, #208]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c0e:	4a33      	ldr	r2, [pc, #204]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c14:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005c18:	4b30      	ldr	r3, [pc, #192]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c22:	623b      	str	r3, [r7, #32]
 8005c24:	6a3b      	ldr	r3, [r7, #32]
  HSPI_D12_GPIO_CLK_ENABLE();
 8005c26:	4b2d      	ldr	r3, [pc, #180]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c2c:	4a2b      	ldr	r2, [pc, #172]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005c36:	4b29      	ldr	r3, [pc, #164]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c40:	61fb      	str	r3, [r7, #28]
 8005c42:	69fb      	ldr	r3, [r7, #28]
  HSPI_D13_GPIO_CLK_ENABLE();
 8005c44:	4b25      	ldr	r3, [pc, #148]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c4a:	4a24      	ldr	r2, [pc, #144]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c50:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005c54:	4b21      	ldr	r3, [pc, #132]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5e:	61bb      	str	r3, [r7, #24]
 8005c60:	69bb      	ldr	r3, [r7, #24]
  HSPI_D14_GPIO_CLK_ENABLE();
 8005c62:	4b1e      	ldr	r3, [pc, #120]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c68:	4a1c      	ldr	r2, [pc, #112]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005c72:	4b1a      	ldr	r3, [pc, #104]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	697b      	ldr	r3, [r7, #20]
  HSPI_D15_GPIO_CLK_ENABLE();
 8005c80:	4b16      	ldr	r3, [pc, #88]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c86:	4a15      	ldr	r2, [pc, #84]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005c88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c8c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005c90:	4b12      	ldr	r3, [pc, #72]	; (8005cdc <HSPI_RAM_MspInit+0x304>)
 8005c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c9a:	613b      	str	r3, [r7, #16]
 8005c9c:	693b      	ldr	r3, [r7, #16]

  /*  Activate HSLV  */
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_CS_GPIO_PORT, HSPI_CS_PIN);
 8005c9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ca2:	4810      	ldr	r0, [pc, #64]	; (8005ce4 <HSPI_RAM_MspInit+0x30c>)
 8005ca4:	f004 f910 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_DQS0_GPIO_PORT, HSPI_DQS0_PIN);
 8005ca8:	2104      	movs	r1, #4
 8005caa:	480f      	ldr	r0, [pc, #60]	; (8005ce8 <HSPI_RAM_MspInit+0x310>)
 8005cac:	f004 f90c 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_DQS1_GPIO_PORT, HSPI_DQS1_PIN);
 8005cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005cb4:	480c      	ldr	r0, [pc, #48]	; (8005ce8 <HSPI_RAM_MspInit+0x310>)
 8005cb6:	f004 f907 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_CLK_GPIO_PORT, HSPI_CLK_PIN);
 8005cba:	2108      	movs	r1, #8
 8005cbc:	480a      	ldr	r0, [pc, #40]	; (8005ce8 <HSPI_RAM_MspInit+0x310>)
 8005cbe:	f004 f903 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_NCLK_GPIO_PORT, HSPI_NCLK_PIN);
 8005cc2:	2110      	movs	r1, #16
 8005cc4:	4808      	ldr	r0, [pc, #32]	; (8005ce8 <HSPI_RAM_MspInit+0x310>)
 8005cc6:	f004 f8ff 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>

  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D0_GPIO_PORT, HSPI_D0_PIN);
 8005cca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005cce:	4805      	ldr	r0, [pc, #20]	; (8005ce4 <HSPI_RAM_MspInit+0x30c>)
 8005cd0:	f004 f8fa 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D1_GPIO_PORT, HSPI_D1_PIN);
 8005cd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005cd8:	e008      	b.n	8005cec <HSPI_RAM_MspInit+0x314>
 8005cda:	bf00      	nop
 8005cdc:	46020c00 	.word	0x46020c00
 8005ce0:	46020800 	.word	0x46020800
 8005ce4:	42021c00 	.word	0x42021c00
 8005ce8:	42022000 	.word	0x42022000
 8005cec:	48bf      	ldr	r0, [pc, #764]	; (8005fec <HSPI_RAM_MspInit+0x614>)
 8005cee:	f004 f8eb 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D2_GPIO_PORT, HSPI_D2_PIN);
 8005cf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005cf6:	48bd      	ldr	r0, [pc, #756]	; (8005fec <HSPI_RAM_MspInit+0x614>)
 8005cf8:	f004 f8e6 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D3_GPIO_PORT, HSPI_D3_PIN);
 8005cfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d00:	48ba      	ldr	r0, [pc, #744]	; (8005fec <HSPI_RAM_MspInit+0x614>)
 8005d02:	f004 f8e1 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D4_GPIO_PORT, HSPI_D4_PIN);
 8005d06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d0a:	48b8      	ldr	r0, [pc, #736]	; (8005fec <HSPI_RAM_MspInit+0x614>)
 8005d0c:	f004 f8dc 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D5_GPIO_PORT, HSPI_D5_PIN);
 8005d10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d14:	48b5      	ldr	r0, [pc, #724]	; (8005fec <HSPI_RAM_MspInit+0x614>)
 8005d16:	f004 f8d7 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D6_GPIO_PORT, HSPI_D6_PIN);
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	48b4      	ldr	r0, [pc, #720]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005d1e:	f004 f8d3 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D7_GPIO_PORT, HSPI_D7_PIN);
 8005d22:	2102      	movs	r1, #2
 8005d24:	48b2      	ldr	r0, [pc, #712]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005d26:	f004 f8cf 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>

  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D8_GPIO_PORT, HSPI_D8_PIN);
 8005d2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d2e:	48b0      	ldr	r0, [pc, #704]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005d30:	f004 f8ca 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D9_GPIO_PORT, HSPI_D9_PIN);
 8005d34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d38:	48ad      	ldr	r0, [pc, #692]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005d3a:	f004 f8c5 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D10_GPIO_PORT, HSPI_D10_PIN);
 8005d3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d42:	48ab      	ldr	r0, [pc, #684]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005d44:	f004 f8c0 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D11_GPIO_PORT, HSPI_D11_PIN);
 8005d48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d4c:	48a8      	ldr	r0, [pc, #672]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005d4e:	f004 f8bb 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D12_GPIO_PORT, HSPI_D12_PIN);
 8005d52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d56:	48a6      	ldr	r0, [pc, #664]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005d58:	f004 f8b6 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D13_GPIO_PORT, HSPI_D13_PIN);
 8005d5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d60:	48a3      	ldr	r0, [pc, #652]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005d62:	f004 f8b1 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D14_GPIO_PORT, HSPI_D14_PIN);
 8005d66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d6a:	48a1      	ldr	r0, [pc, #644]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005d6c:	f004 f8ac 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D15_GPIO_PORT, HSPI_D15_PIN);
 8005d70:	2101      	movs	r1, #1
 8005d72:	48a0      	ldr	r0, [pc, #640]	; (8005ff4 <HSPI_RAM_MspInit+0x61c>)
 8005d74:	f004 f8a8 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>

  /* Reset the HSPI memory interface */
  HSPI_FORCE_RESET();
 8005d78:	4b9f      	ldr	r3, [pc, #636]	; (8005ff8 <HSPI_RAM_MspInit+0x620>)
 8005d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d7c:	4a9e      	ldr	r2, [pc, #632]	; (8005ff8 <HSPI_RAM_MspInit+0x620>)
 8005d7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d82:	6693      	str	r3, [r2, #104]	; 0x68
  HSPI_RELEASE_RESET();
 8005d84:	4b9c      	ldr	r3, [pc, #624]	; (8005ff8 <HSPI_RAM_MspInit+0x620>)
 8005d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d88:	4a9b      	ldr	r2, [pc, #620]	; (8005ff8 <HSPI_RAM_MspInit+0x620>)
 8005d8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d8e:	6693      	str	r3, [r2, #104]	; 0x68

  /* HSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_CS_PIN;
 8005d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d94:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005d96:	2302      	movs	r3, #2
 8005d98:	673b      	str	r3, [r7, #112]	; 0x70
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	677b      	str	r3, [r7, #116]	; 0x74
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005d9e:	2302      	movs	r3, #2
 8005da0:	67bb      	str	r3, [r7, #120]	; 0x78
  GPIO_InitStruct.Alternate = HSPI_CS_PIN_AF;
 8005da2:	2308      	movs	r3, #8
 8005da4:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8005da6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005daa:	4619      	mov	r1, r3
 8005dac:	488f      	ldr	r0, [pc, #572]	; (8005fec <HSPI_RAM_MspInit+0x614>)
 8005dae:	f003 fd8b 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI DQS0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_DQS0_PIN;
 8005db2:	2304      	movs	r3, #4
 8005db4:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_DQS0_PIN_AF;
 8005db6:	2308      	movs	r3, #8
 8005db8:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_DQS0_GPIO_PORT, &GPIO_InitStruct);
 8005dba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	488b      	ldr	r0, [pc, #556]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005dc2:	f003 fd81 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI DQS1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_DQS1_PIN;
 8005dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dca:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_DQS1_PIN_AF;
 8005dcc:	2308      	movs	r3, #8
 8005dce:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_DQS1_GPIO_PORT, &GPIO_InitStruct);
 8005dd0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4886      	ldr	r0, [pc, #536]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005dd8:	f003 fd76 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_CLK_PIN;
 8005ddc:	2308      	movs	r3, #8
 8005dde:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_CLK_PIN_AF;
 8005de0:	2308      	movs	r3, #8
 8005de2:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8005de4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005de8:	4619      	mov	r1, r3
 8005dea:	4881      	ldr	r0, [pc, #516]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005dec:	f003 fd6c 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D0_PIN;
 8005df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005df4:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D0_PIN_AF;
 8005df6:	2308      	movs	r3, #8
 8005df8:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8005dfa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005dfe:	4619      	mov	r1, r3
 8005e00:	487a      	ldr	r0, [pc, #488]	; (8005fec <HSPI_RAM_MspInit+0x614>)
 8005e02:	f003 fd61 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D1_PIN;
 8005e06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D1_PIN_AF;
 8005e0c:	2308      	movs	r3, #8
 8005e0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8005e10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e14:	4619      	mov	r1, r3
 8005e16:	4875      	ldr	r0, [pc, #468]	; (8005fec <HSPI_RAM_MspInit+0x614>)
 8005e18:	f003 fd56 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D2_PIN;
 8005e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e20:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D2_PIN_AF;
 8005e22:	2308      	movs	r3, #8
 8005e24:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8005e26:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	486f      	ldr	r0, [pc, #444]	; (8005fec <HSPI_RAM_MspInit+0x614>)
 8005e2e:	f003 fd4b 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D3_PIN;
 8005e32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e36:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D3_PIN_AF;
 8005e38:	2308      	movs	r3, #8
 8005e3a:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8005e3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e40:	4619      	mov	r1, r3
 8005e42:	486a      	ldr	r0, [pc, #424]	; (8005fec <HSPI_RAM_MspInit+0x614>)
 8005e44:	f003 fd40 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D4_PIN;
 8005e48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D4_PIN_AF;
 8005e4e:	2308      	movs	r3, #8
 8005e50:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8005e52:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e56:	4619      	mov	r1, r3
 8005e58:	4864      	ldr	r0, [pc, #400]	; (8005fec <HSPI_RAM_MspInit+0x614>)
 8005e5a:	f003 fd35 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D5_PIN;
 8005e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e62:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D5_PIN_AF;
 8005e64:	2308      	movs	r3, #8
 8005e66:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 8005e68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	485f      	ldr	r0, [pc, #380]	; (8005fec <HSPI_RAM_MspInit+0x614>)
 8005e70:	f003 fd2a 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D6_PIN;
 8005e74:	2301      	movs	r3, #1
 8005e76:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D6_PIN_AF;
 8005e78:	2308      	movs	r3, #8
 8005e7a:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8005e7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e80:	4619      	mov	r1, r3
 8005e82:	485b      	ldr	r0, [pc, #364]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005e84:	f003 fd20 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D7_PIN;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D7_PIN_AF;
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8005e90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e94:	4619      	mov	r1, r3
 8005e96:	4856      	ldr	r0, [pc, #344]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005e98:	f003 fd16 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI D8 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D8_PIN;
 8005e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D8_PIN_AF;
 8005ea2:	2308      	movs	r3, #8
 8005ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D8_GPIO_PORT, &GPIO_InitStruct);
 8005ea6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4850      	ldr	r0, [pc, #320]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005eae:	f003 fd0b 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI D9 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D9_PIN;
 8005eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D9_PIN_AF;
 8005eb8:	2308      	movs	r3, #8
 8005eba:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D9_GPIO_PORT, &GPIO_InitStruct);
 8005ebc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	484b      	ldr	r0, [pc, #300]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005ec4:	f003 fd00 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI D10 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D10_PIN;
 8005ec8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ecc:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D10_PIN_AF;
 8005ece:	2308      	movs	r3, #8
 8005ed0:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D10_GPIO_PORT, &GPIO_InitStruct);
 8005ed2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4845      	ldr	r0, [pc, #276]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005eda:	f003 fcf5 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI D11 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D11_PIN;
 8005ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D11_PIN_AF;
 8005ee4:	2308      	movs	r3, #8
 8005ee6:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D11_GPIO_PORT, &GPIO_InitStruct);
 8005ee8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005eec:	4619      	mov	r1, r3
 8005eee:	4840      	ldr	r0, [pc, #256]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005ef0:	f003 fcea 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI D12 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D12_PIN;
 8005ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D12_PIN_AF;
 8005efa:	2308      	movs	r3, #8
 8005efc:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D12_GPIO_PORT, &GPIO_InitStruct);
 8005efe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f02:	4619      	mov	r1, r3
 8005f04:	483a      	ldr	r0, [pc, #232]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005f06:	f003 fcdf 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI D13 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D13_PIN;
 8005f0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D13_PIN_AF;
 8005f10:	2308      	movs	r3, #8
 8005f12:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D13_GPIO_PORT, &GPIO_InitStruct);
 8005f14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4835      	ldr	r0, [pc, #212]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005f1c:	f003 fcd4 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI D14 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D14_PIN;
 8005f20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f24:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D14_PIN_AF;
 8005f26:	2308      	movs	r3, #8
 8005f28:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D14_GPIO_PORT, &GPIO_InitStruct);
 8005f2a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f2e:	4619      	mov	r1, r3
 8005f30:	482f      	ldr	r0, [pc, #188]	; (8005ff0 <HSPI_RAM_MspInit+0x618>)
 8005f32:	f003 fcc9 	bl	80098c8 <HAL_GPIO_Init>

  /* HSPI D15 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D15_PIN;
 8005f36:	2301      	movs	r3, #1
 8005f38:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D15_PIN_AF;
 8005f3a:	2308      	movs	r3, #8
 8005f3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D15_GPIO_PORT, &GPIO_InitStruct);
 8005f3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f42:	4619      	mov	r1, r3
 8005f44:	482b      	ldr	r0, [pc, #172]	; (8005ff4 <HSPI_RAM_MspInit+0x61c>)
 8005f46:	f003 fcbf 	bl	80098c8 <HAL_GPIO_Init>

  hdmatx.Init.Request = GPDMA1_REQUEST_HSPI1;
 8005f4a:	4b2c      	ldr	r3, [pc, #176]	; (8005ffc <HSPI_RAM_MspInit+0x624>)
 8005f4c:	2272      	movs	r2, #114	; 0x72
 8005f4e:	605a      	str	r2, [r3, #4]
  hdmatx.Instance = GPDMA1_Channel12;
 8005f50:	4b2a      	ldr	r3, [pc, #168]	; (8005ffc <HSPI_RAM_MspInit+0x624>)
 8005f52:	4a2b      	ldr	r2, [pc, #172]	; (8006000 <HSPI_RAM_MspInit+0x628>)
 8005f54:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0x00, 0);
 8005f56:	2200      	movs	r2, #0
 8005f58:	2100      	movs	r1, #0
 8005f5a:	2054      	movs	r0, #84	; 0x54
 8005f5c:	f001 fb0c 	bl	8007578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 8005f60:	2054      	movs	r0, #84	; 0x54
 8005f62:	f001 fb23 	bl	80075ac <HAL_NVIC_EnableIRQ>

  /* Configure the HSPI DMA transmit */
  hdmatx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005f66:	4b25      	ldr	r3, [pc, #148]	; (8005ffc <HSPI_RAM_MspInit+0x624>)
 8005f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f6c:	60da      	str	r2, [r3, #12]
  hdmatx.Init.SrcInc              = DMA_SINC_INCREMENTED;
 8005f6e:	4b23      	ldr	r3, [pc, #140]	; (8005ffc <HSPI_RAM_MspInit+0x624>)
 8005f70:	2208      	movs	r2, #8
 8005f72:	611a      	str	r2, [r3, #16]
  hdmatx.Init.DestInc             = DMA_DINC_FIXED;
 8005f74:	4b21      	ldr	r3, [pc, #132]	; (8005ffc <HSPI_RAM_MspInit+0x624>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	615a      	str	r2, [r3, #20]
  hdmatx.Init.Priority            = DMA_HIGH_PRIORITY;
 8005f7a:	4b20      	ldr	r3, [pc, #128]	; (8005ffc <HSPI_RAM_MspInit+0x624>)
 8005f7c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005f80:	621a      	str	r2, [r3, #32]
  hdmatx.Init.SrcBurstLength      = 1;
 8005f82:	4b1e      	ldr	r3, [pc, #120]	; (8005ffc <HSPI_RAM_MspInit+0x624>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	625a      	str	r2, [r3, #36]	; 0x24
  hdmatx.Init.DestBurstLength     = 1;
 8005f88:	4b1c      	ldr	r3, [pc, #112]	; (8005ffc <HSPI_RAM_MspInit+0x624>)
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hdmatx.Init.TransferEventMode   = DMA_TCEM_BLOCK_TRANSFER;
 8005f8e:	4b1b      	ldr	r3, [pc, #108]	; (8005ffc <HSPI_RAM_MspInit+0x624>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	631a      	str	r2, [r3, #48]	; 0x30
  hdmatx.Init.SrcDataWidth        = DMA_SRC_DATAWIDTH_WORD ;
 8005f94:	4b19      	ldr	r3, [pc, #100]	; (8005ffc <HSPI_RAM_MspInit+0x624>)
 8005f96:	2202      	movs	r2, #2
 8005f98:	619a      	str	r2, [r3, #24]
  hdmatx.Init.DestDataWidth       = DMA_DEST_DATAWIDTH_WORD  ;
 8005f9a:	4b18      	ldr	r3, [pc, #96]	; (8005ffc <HSPI_RAM_MspInit+0x624>)
 8005f9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005fa0:	61da      	str	r2, [r3, #28]

  /* Enable the GPDMA clock */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8005fa2:	4b15      	ldr	r3, [pc, #84]	; (8005ff8 <HSPI_RAM_MspInit+0x620>)
 8005fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa8:	4a13      	ldr	r2, [pc, #76]	; (8005ff8 <HSPI_RAM_MspInit+0x620>)
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005fb2:	4b11      	ldr	r3, [pc, #68]	; (8005ff8 <HSPI_RAM_MspInit+0x620>)
 8005fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	68fb      	ldr	r3, [r7, #12]

  /* Initialize the DMA channel */
  __HAL_LINKDMA(hhspi, hdmatx, hdmatx);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a0e      	ldr	r2, [pc, #56]	; (8005ffc <HSPI_RAM_MspInit+0x624>)
 8005fc4:	64da      	str	r2, [r3, #76]	; 0x4c
 8005fc6:	4a0d      	ldr	r2, [pc, #52]	; (8005ffc <HSPI_RAM_MspInit+0x624>)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_DMA_Init(&hdmatx);
 8005fcc:	480b      	ldr	r0, [pc, #44]	; (8005ffc <HSPI_RAM_MspInit+0x624>)
 8005fce:	f001 fcf1 	bl	80079b4 <HAL_DMA_Init>

  hdmarx.Init.Request = GPDMA1_REQUEST_HSPI1;
 8005fd2:	4b0c      	ldr	r3, [pc, #48]	; (8006004 <HSPI_RAM_MspInit+0x62c>)
 8005fd4:	2272      	movs	r2, #114	; 0x72
 8005fd6:	605a      	str	r2, [r3, #4]
  hdmarx.Instance = GPDMA1_Channel7;
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <HSPI_RAM_MspInit+0x62c>)
 8005fda:	4a0b      	ldr	r2, [pc, #44]	; (8006008 <HSPI_RAM_MspInit+0x630>)
 8005fdc:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(GPDMA1_Channel7_IRQn, 0x00, 0);
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	2024      	movs	r0, #36	; 0x24
 8005fe4:	f001 fac8 	bl	8007578 <HAL_NVIC_SetPriority>
 8005fe8:	e010      	b.n	800600c <HSPI_RAM_MspInit+0x634>
 8005fea:	bf00      	nop
 8005fec:	42021c00 	.word	0x42021c00
 8005ff0:	42022000 	.word	0x42022000
 8005ff4:	42022400 	.word	0x42022400
 8005ff8:	46020c00 	.word	0x46020c00
 8005ffc:	20197914 	.word	0x20197914
 8006000:	40020650 	.word	0x40020650
 8006004:	2019798c 	.word	0x2019798c
 8006008:	400203d0 	.word	0x400203d0
  HAL_NVIC_EnableIRQ(GPDMA1_Channel7_IRQn);
 800600c:	2024      	movs	r0, #36	; 0x24
 800600e:	f001 facd 	bl	80075ac <HAL_NVIC_EnableIRQ>

  /* Configure the HSPI DMA receive */
  hdmarx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006012:	4b25      	ldr	r3, [pc, #148]	; (80060a8 <HSPI_RAM_MspInit+0x6d0>)
 8006014:	2200      	movs	r2, #0
 8006016:	60da      	str	r2, [r3, #12]
  hdmarx.Init.SrcInc              = DMA_SINC_FIXED;
 8006018:	4b23      	ldr	r3, [pc, #140]	; (80060a8 <HSPI_RAM_MspInit+0x6d0>)
 800601a:	2200      	movs	r2, #0
 800601c:	611a      	str	r2, [r3, #16]
  hdmarx.Init.DestInc             = DMA_DINC_INCREMENTED;
 800601e:	4b22      	ldr	r3, [pc, #136]	; (80060a8 <HSPI_RAM_MspInit+0x6d0>)
 8006020:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006024:	615a      	str	r2, [r3, #20]
  hdmarx.Init.Priority            = DMA_HIGH_PRIORITY;
 8006026:	4b20      	ldr	r3, [pc, #128]	; (80060a8 <HSPI_RAM_MspInit+0x6d0>)
 8006028:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800602c:	621a      	str	r2, [r3, #32]
  hdmarx.Init.SrcBurstLength      = 1;
 800602e:	4b1e      	ldr	r3, [pc, #120]	; (80060a8 <HSPI_RAM_MspInit+0x6d0>)
 8006030:	2201      	movs	r2, #1
 8006032:	625a      	str	r2, [r3, #36]	; 0x24
  hdmarx.Init.DestBurstLength     = 1;
 8006034:	4b1c      	ldr	r3, [pc, #112]	; (80060a8 <HSPI_RAM_MspInit+0x6d0>)
 8006036:	2201      	movs	r2, #1
 8006038:	629a      	str	r2, [r3, #40]	; 0x28
  hdmarx.Init.TransferEventMode   = DMA_TCEM_BLOCK_TRANSFER;
 800603a:	4b1b      	ldr	r3, [pc, #108]	; (80060a8 <HSPI_RAM_MspInit+0x6d0>)
 800603c:	2200      	movs	r2, #0
 800603e:	631a      	str	r2, [r3, #48]	; 0x30
  hdmarx.Init.SrcDataWidth        = DMA_SRC_DATAWIDTH_WORD ;
 8006040:	4b19      	ldr	r3, [pc, #100]	; (80060a8 <HSPI_RAM_MspInit+0x6d0>)
 8006042:	2202      	movs	r2, #2
 8006044:	619a      	str	r2, [r3, #24]
  hdmarx.Init.DestDataWidth       = DMA_DEST_DATAWIDTH_WORD  ;
 8006046:	4b18      	ldr	r3, [pc, #96]	; (80060a8 <HSPI_RAM_MspInit+0x6d0>)
 8006048:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800604c:	61da      	str	r2, [r3, #28]

  /* Enable the GPDMA clock */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800604e:	4b17      	ldr	r3, [pc, #92]	; (80060ac <HSPI_RAM_MspInit+0x6d4>)
 8006050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006054:	4a15      	ldr	r2, [pc, #84]	; (80060ac <HSPI_RAM_MspInit+0x6d4>)
 8006056:	f043 0301 	orr.w	r3, r3, #1
 800605a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800605e:	4b13      	ldr	r3, [pc, #76]	; (80060ac <HSPI_RAM_MspInit+0x6d4>)
 8006060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	60bb      	str	r3, [r7, #8]
 800606a:	68bb      	ldr	r3, [r7, #8]

  /* Initialize the DMA channel */
  __HAL_LINKDMA(hhspi, hdmarx, hdmarx);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a0e      	ldr	r2, [pc, #56]	; (80060a8 <HSPI_RAM_MspInit+0x6d0>)
 8006070:	651a      	str	r2, [r3, #80]	; 0x50
 8006072:	4a0d      	ldr	r2, [pc, #52]	; (80060a8 <HSPI_RAM_MspInit+0x6d0>)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_DMA_Init(&hdmarx);
 8006078:	480b      	ldr	r0, [pc, #44]	; (80060a8 <HSPI_RAM_MspInit+0x6d0>)
 800607a:	f001 fc9b 	bl	80079b4 <HAL_DMA_Init>

  /* Enable and set priority of the HSPI and DMA interrupts */
  HAL_NVIC_SetPriority(HSPI1_IRQn, BSP_HSPI_RAM_IT_PRIORITY, 0);
 800607e:	2200      	movs	r2, #0
 8006080:	210f      	movs	r1, #15
 8006082:	2083      	movs	r0, #131	; 0x83
 8006084:	f001 fa78 	bl	8007578 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(HSPI_RAM_DMAx_IRQn, BSP_HSPI_RAM_DMA_IT_PRIORITY, 0);
 8006088:	2200      	movs	r2, #0
 800608a:	210f      	movs	r1, #15
 800608c:	201f      	movs	r0, #31
 800608e:	f001 fa73 	bl	8007578 <HAL_NVIC_SetPriority>

  HAL_NVIC_EnableIRQ(HSPI1_IRQn);
 8006092:	2083      	movs	r0, #131	; 0x83
 8006094:	f001 fa8a 	bl	80075ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(HSPI_RAM_DMAx_IRQn);
 8006098:	201f      	movs	r0, #31
 800609a:	f001 fa87 	bl	80075ac <HAL_NVIC_EnableIRQ>
}
 800609e:	bf00      	nop
 80060a0:	3780      	adds	r7, #128	; 0x80
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	2019798c 	.word	0x2019798c
 80060ac:	46020c00 	.word	0x46020c00

080060b0 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 80060b0:	b590      	push	{r4, r7, lr}
 80060b2:	b095      	sub	sp, #84	; 0x54
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_InitTypeDef ospi_init;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <BSP_OSPI_NOR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80060c0:	f06f 0301 	mvn.w	r3, #1
 80060c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c6:	e095      	b.n	80061f4 <BSP_OSPI_NOR_Init+0x144>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 80060c8:	494d      	ldr	r1, [pc, #308]	; (8006200 <BSP_OSPI_NOR_Init+0x150>)
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	4613      	mov	r3, r2
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	4413      	add	r3, r2
 80060d2:	440b      	add	r3, r1
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f040 808a 	bne.w	80061f0 <BSP_OSPI_NOR_Init+0x140>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	4413      	add	r3, r2
 80060e4:	015b      	lsls	r3, r3, #5
 80060e6:	4a47      	ldr	r2, [pc, #284]	; (8006204 <BSP_OSPI_NOR_Init+0x154>)
 80060e8:	4413      	add	r3, r2
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fa26 	bl	800653c <OSPI_NOR_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Get Flash information of one memory */
      (void)MX25UM51245G_GetFlashInfo(&pInfo);
 80060f0:	f107 031c 	add.w	r3, r7, #28
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fd fd53 	bl	8003ba0 <MX25UM51245G_GetFlashInfo>

      /* Fill config structure */
      ospi_init.ClockPrescaler = 1;
 80060fa:	2301      	movs	r3, #1
 80060fc:	613b      	str	r3, [r7, #16]
      ospi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006104:	fa93 f3a3 	rbit	r3, r3
 8006108:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800610a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800610c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800610e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <BSP_OSPI_NOR_Init+0x68>
    return 32U;
 8006114:	2320      	movs	r3, #32
 8006116:	e003      	b.n	8006120 <BSP_OSPI_NOR_Init+0x70>
  return __builtin_clz(value);
 8006118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800611a:	fab3 f383 	clz	r3, r3
 800611e:	b2db      	uxtb	r3, r3
 8006120:	60fb      	str	r3, [r7, #12]
      ospi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8006122:	2300      	movs	r3, #0
 8006124:	617b      	str	r3, [r7, #20]
      ospi_init.TransferRate   = (uint32_t) Init->TransferRate;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	785b      	ldrb	r3, [r3, #1]
 800612a:	61bb      	str	r3, [r7, #24]

      /* STM32 OSPI interface initialization */
      if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_init) != HAL_OK)
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	4413      	add	r3, r2
 8006134:	015b      	lsls	r3, r3, #5
 8006136:	4a33      	ldr	r2, [pc, #204]	; (8006204 <BSP_OSPI_NOR_Init+0x154>)
 8006138:	4413      	add	r3, r2
 800613a:	f107 020c 	add.w	r2, r7, #12
 800613e:	4611      	mov	r1, r2
 8006140:	4618      	mov	r0, r3
 8006142:	f000 f861 	bl	8006208 <MX_OSPI_NOR_Init>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <BSP_OSPI_NOR_Init+0xa4>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800614c:	f06f 0303 	mvn.w	r3, #3
 8006150:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006152:	e04f      	b.n	80061f4 <BSP_OSPI_NOR_Init+0x144>
      }
      /* OSPI Delay Block enable */
      else if (OSPI_DLYB_Enable(&hospi_nor[Instance]) != BSP_ERROR_NONE)
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	4413      	add	r3, r2
 800615c:	015b      	lsls	r3, r3, #5
 800615e:	4a29      	ldr	r2, [pc, #164]	; (8006204 <BSP_OSPI_NOR_Init+0x154>)
 8006160:	4413      	add	r3, r2
 8006162:	4618      	mov	r0, r3
 8006164:	f000 f9a0 	bl	80064a8 <OSPI_DLYB_Enable>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <BSP_OSPI_NOR_Init+0xc6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800616e:	f06f 0304 	mvn.w	r3, #4
 8006172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006174:	e03e      	b.n	80061f4 <BSP_OSPI_NOR_Init+0x144>
      }
      /* OSPI memory reset */
      else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fb72 	bl	8006860 <OSPI_NOR_ResetMemory>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <BSP_OSPI_NOR_Init+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006182:	f06f 0304 	mvn.w	r3, #4
 8006186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006188:	e034      	b.n	80061f4 <BSP_OSPI_NOR_Init+0x144>
      }
      /* Check if memory is ready */
      else if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	4613      	mov	r3, r2
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	4413      	add	r3, r2
 8006192:	015b      	lsls	r3, r3, #5
 8006194:	4a1b      	ldr	r2, [pc, #108]	; (8006204 <BSP_OSPI_NOR_Init+0x154>)
 8006196:	1898      	adds	r0, r3, r2
 8006198:	4919      	ldr	r1, [pc, #100]	; (8006200 <BSP_OSPI_NOR_Init+0x150>)
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	4613      	mov	r3, r2
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	4413      	add	r3, r2
 80061a2:	440b      	add	r3, r1
 80061a4:	3301      	adds	r3, #1
 80061a6:	7819      	ldrb	r1, [r3, #0]
 80061a8:	4c15      	ldr	r4, [pc, #84]	; (8006200 <BSP_OSPI_NOR_Init+0x150>)
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	4613      	mov	r3, r2
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	4413      	add	r3, r2
 80061b2:	4423      	add	r3, r4
 80061b4:	3302      	adds	r3, #2
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	f7fd fd20 	bl	8003bfe <MX25UM51245G_AutoPollingMemReady>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d003      	beq.n	80061cc <BSP_OSPI_NOR_Init+0x11c>
                                                Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80061c4:	f06f 0304 	mvn.w	r3, #4
 80061c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ca:	e013      	b.n	80061f4 <BSP_OSPI_NOR_Init+0x144>
      }
      /* Configure the memory */
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	7819      	ldrb	r1, [r3, #0]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	785b      	ldrb	r3, [r3, #1]
 80061d4:	461a      	mov	r2, r3
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f8da 	bl	8006390 <BSP_OSPI_NOR_ConfigFlash>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <BSP_OSPI_NOR_Init+0x13a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80061e2:	f06f 0304 	mvn.w	r3, #4
 80061e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061e8:	e004      	b.n	80061f4 <BSP_OSPI_NOR_Init+0x144>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80061ea:	2300      	movs	r3, #0
 80061ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ee:	e001      	b.n	80061f4 <BSP_OSPI_NOR_Init+0x144>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80061f0:	2300      	movs	r3, #0
 80061f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  /* Return BSP status */
  return ret;
 80061f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3754      	adds	r7, #84	; 0x54
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd90      	pop	{r4, r7, pc}
 80061fe:	bf00      	nop
 8006200:	20197a64 	.word	0x20197a64
 8006204:	20197a04 	.word	0x20197a04

08006208 <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Init           OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(XSPI_HandleTypeDef *hospi, MX_OSPI_InitTypeDef *Init)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a20      	ldr	r2, [pc, #128]	; (8006298 <MX_OSPI_NOR_Init+0x90>)
 8006216:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThresholdByte       = 4;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2204      	movs	r2, #4
 800621c:	605a      	str	r2, [r3, #4]
  hospi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	609a      	str	r2, [r3, #8]
  hospi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTimeCycle = 2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler          = Init->ClockPrescaler;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting          = Init->SampleShifting;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary      = 0;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass        = HAL_XSPI_DELAY_BLOCK_ON;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	635a      	str	r2, [r3, #52]	; 0x34

  if (Init->TransferRate == (uint32_t) BSP_OSPI_NOR_DTR_TRANSFER)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d108      	bne.n	800627a <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800626e:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006276:	62da      	str	r2, [r3, #44]	; 0x2c
 8006278:	e005      	b.n	8006286 <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_XSPI_Init(hospi);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f00b fd02 	bl	8011c90 <HAL_XSPI_Init>
 800628c:	4603      	mov	r3, r0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	420d1400 	.word	0x420d1400

0800629c <BSP_OSPI_NOR_GetInfo>:
  * @param  Instance  OSPI instance
  * @param  pInfo     pointer on the configuration structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_GetInfo(uint32_t Instance, BSP_OSPI_NOR_Info_t *pInfo)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <BSP_OSPI_NOR_GetInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80062b0:	f06f 0301 	mvn.w	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	e002      	b.n	80062be <BSP_OSPI_NOR_GetInfo+0x22>
  }
  else
  {
    (void)MX25UM51245G_GetFlashInfo(pInfo);
 80062b8:	6838      	ldr	r0, [r7, #0]
 80062ba:	f7fd fc71 	bl	8003ba0 <MX25UM51245G_GetFlashInfo>
  }

  /* Return BSP status */
  return ret;
 80062be:	68fb      	ldr	r3, [r7, #12]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80062d0:	2300      	movs	r3, #0
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80062da:	f06f 0301 	mvn.w	r3, #1
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	e04d      	b.n	800637e <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
  }
  else
  {
    if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80062e2:	4929      	ldr	r1, [pc, #164]	; (8006388 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	4613      	mov	r3, r2
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	4413      	add	r3, r2
 80062ec:	440b      	add	r3, r1
 80062ee:	3302      	adds	r3, #2
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d122      	bne.n	800633c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x74>
    {
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	4613      	mov	r3, r2
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	4413      	add	r3, r2
 80062fe:	015b      	lsls	r3, r3, #5
 8006300:	4a22      	ldr	r2, [pc, #136]	; (800638c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc4>)
 8006302:	1898      	adds	r0, r3, r2
 8006304:	4920      	ldr	r1, [pc, #128]	; (8006388 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	4613      	mov	r3, r2
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	4413      	add	r3, r2
 800630e:	440b      	add	r3, r1
 8006310:	3301      	adds	r3, #1
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2201      	movs	r2, #1
 8006316:	4619      	mov	r1, r3
 8006318:	f7fd fd23 	bl	8003d62 <MX25UM51245G_EnableSTRMemoryMappedMode>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x62>
                                                 MX25UM51245G_4BYTES_SIZE) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006322:	f06f 0304 	mvn.w	r3, #4
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	e029      	b.n	800637e <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800632a:	4917      	ldr	r1, [pc, #92]	; (8006388 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	4613      	mov	r3, r2
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	4413      	add	r3, r2
 8006334:	440b      	add	r3, r1
 8006336:	2202      	movs	r2, #2
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	e020      	b.n	800637e <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
    }
    else
    {
      if (MX25UM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance],
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	4413      	add	r3, r2
 8006344:	015b      	lsls	r3, r3, #5
 8006346:	4a11      	ldr	r2, [pc, #68]	; (800638c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc4>)
 8006348:	1898      	adds	r0, r3, r2
 800634a:	490f      	ldr	r1, [pc, #60]	; (8006388 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	4613      	mov	r3, r2
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	4413      	add	r3, r2
 8006354:	440b      	add	r3, r1
 8006356:	3301      	adds	r3, #1
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	4619      	mov	r1, r3
 800635c:	f7fd fdab 	bl	8003eb6 <MX25UM51245G_EnableDTRMemoryMappedMode>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa6>
                                                 Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006366:	f06f 0304 	mvn.w	r3, #4
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	e007      	b.n	800637e <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800636e:	4906      	ldr	r1, [pc, #24]	; (8006388 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	4613      	mov	r3, r2
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	4413      	add	r3, r2
 8006378:	440b      	add	r3, r1
 800637a:	2202      	movs	r2, #2
 800637c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800637e:	68fb      	ldr	r3, [r7, #12]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	20197a64 	.word	0x20197a64
 800638c:	20197a04 	.word	0x20197a04

08006390 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	70fb      	strb	r3, [r7, #3]
 800639c:	4613      	mov	r3, r2
 800639e:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80063a0:	2300      	movs	r3, #0
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80063aa:	f06f 0301 	mvn.w	r3, #1
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	e072      	b.n	8006498 <BSP_OSPI_NOR_ConfigFlash+0x108>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 80063b2:	493c      	ldr	r1, [pc, #240]	; (80064a4 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	4613      	mov	r3, r2
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	4413      	add	r3, r2
 80063bc:	440b      	add	r3, r1
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d103      	bne.n	80063cc <BSP_OSPI_NOR_ConfigFlash+0x3c>
    {
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 80063c4:	f06f 0315 	mvn.w	r3, #21
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	e065      	b.n	8006498 <BSP_OSPI_NOR_ConfigFlash+0x108>
    }
    else
    {
      /* Setup Flash interface ***************************************************/
      switch (Ospi_Nor_Ctx[Instance].InterfaceMode)
 80063cc:	4935      	ldr	r1, [pc, #212]	; (80064a4 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	4613      	mov	r3, r2
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	4413      	add	r3, r2
 80063d6:	440b      	add	r3, r1
 80063d8:	3301      	adds	r3, #1
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d12b      	bne.n	8006438 <BSP_OSPI_NOR_ConfigFlash+0xa8>
      {
        case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
          if ((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d10a      	bne.n	80063fc <BSP_OSPI_NOR_ConfigFlash+0x6c>
 80063e6:	492f      	ldr	r1, [pc, #188]	; (80064a4 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	4413      	add	r3, r2
 80063f0:	440b      	add	r3, r1
 80063f2:	3302      	adds	r3, #2
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	78ba      	ldrb	r2, [r7, #2]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d02d      	beq.n	8006458 <BSP_OSPI_NOR_ConfigFlash+0xc8>
          {
            /* Exit OPI mode */
            ret = OSPI_NOR_ExitOPIMode(Instance);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fca1 	bl	8006d44 <OSPI_NOR_ExitOPIMode>
 8006402:	60f8      	str	r0, [r7, #12]

            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d126      	bne.n	8006458 <BSP_OSPI_NOR_ConfigFlash+0xc8>
 800640a:	78fb      	ldrb	r3, [r7, #3]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d123      	bne.n	8006458 <BSP_OSPI_NOR_ConfigFlash+0xc8>
            {

              if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8006410:	4924      	ldr	r1, [pc, #144]	; (80064a4 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	4613      	mov	r3, r2
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	4413      	add	r3, r2
 800641a:	440b      	add	r3, r1
 800641c:	3302      	adds	r3, #2
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d104      	bne.n	800642e <BSP_OSPI_NOR_ConfigFlash+0x9e>
              {
                /* Enter DTR OPI mode */
                ret = OSPI_NOR_EnterDOPIMode(Instance);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fac1 	bl	80069ac <OSPI_NOR_EnterDOPIMode>
 800642a:	60f8      	str	r0, [r7, #12]
                /* Enter STR OPI mode */
                ret = OSPI_NOR_EnterSOPIMode(Instance);
              }
            }
          }
          break;
 800642c:	e014      	b.n	8006458 <BSP_OSPI_NOR_ConfigFlash+0xc8>
                ret = OSPI_NOR_EnterSOPIMode(Instance);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fbb6 	bl	8006ba0 <OSPI_NOR_EnterSOPIMode>
 8006434:	60f8      	str	r0, [r7, #12]
          break;
 8006436:	e00f      	b.n	8006458 <BSP_OSPI_NOR_ConfigFlash+0xc8>

        case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
        default :
          if (Mode == BSP_OSPI_NOR_OPI_MODE)
 8006438:	78fb      	ldrb	r3, [r7, #3]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d10e      	bne.n	800645c <BSP_OSPI_NOR_ConfigFlash+0xcc>
          {
            if (Rate == BSP_OSPI_NOR_STR_TRANSFER)
 800643e:	78bb      	ldrb	r3, [r7, #2]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d104      	bne.n	800644e <BSP_OSPI_NOR_ConfigFlash+0xbe>
            {
              /* Enter STR OPI mode */
              ret = OSPI_NOR_EnterSOPIMode(Instance);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fbab 	bl	8006ba0 <OSPI_NOR_EnterSOPIMode>
 800644a:	60f8      	str	r0, [r7, #12]
            {
              /* Enter DTR OPI mode */
              ret = OSPI_NOR_EnterDOPIMode(Instance);
            }
          }
          break;
 800644c:	e006      	b.n	800645c <BSP_OSPI_NOR_ConfigFlash+0xcc>
              ret = OSPI_NOR_EnterDOPIMode(Instance);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 faac 	bl	80069ac <OSPI_NOR_EnterDOPIMode>
 8006454:	60f8      	str	r0, [r7, #12]
          break;
 8006456:	e001      	b.n	800645c <BSP_OSPI_NOR_ConfigFlash+0xcc>
          break;
 8006458:	bf00      	nop
 800645a:	e000      	b.n	800645e <BSP_OSPI_NOR_ConfigFlash+0xce>
          break;
 800645c:	bf00      	nop
      }

      /* Update OSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d119      	bne.n	8006498 <BSP_OSPI_NOR_ConfigFlash+0x108>
      {
        /* Update current status parameter *****************************************/
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8006464:	490f      	ldr	r1, [pc, #60]	; (80064a4 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	4613      	mov	r3, r2
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	4413      	add	r3, r2
 800646e:	440b      	add	r3, r1
 8006470:	2201      	movs	r2, #1
 8006472:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8006474:	490b      	ldr	r1, [pc, #44]	; (80064a4 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	4613      	mov	r3, r2
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	4413      	add	r3, r2
 800647e:	440b      	add	r3, r1
 8006480:	3301      	adds	r3, #1
 8006482:	78fa      	ldrb	r2, [r7, #3]
 8006484:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8006486:	4907      	ldr	r1, [pc, #28]	; (80064a4 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	4613      	mov	r3, r2
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	4413      	add	r3, r2
 8006490:	440b      	add	r3, r1
 8006492:	3302      	adds	r3, #2
 8006494:	78ba      	ldrb	r2, [r7, #2]
 8006496:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006498:	68fb      	ldr	r3, [r7, #12]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20197a64 	.word	0x20197a64

080064a8 <OSPI_DLYB_Enable>:
  * @brief  This function enables delay block.
  * @param  hospi OSPI handle
  * @retval BSP status
  */
static int32_t OSPI_DLYB_Enable(XSPI_HandleTypeDef *hospi)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  LL_DLYB_CfgTypeDef dlyb_cfg, dlyb_cfg_test;
  int32_t ret = BSP_ERROR_NONE;
 80064b0:	2300      	movs	r3, #0
 80064b2:	61fb      	str	r3, [r7, #28]
  uint32_t div_value = 4;
 80064b4:	2304      	movs	r3, #4
 80064b6:	61bb      	str	r3, [r7, #24]

  /* Delay block configuration ------------------------------------------------ */
  if (HAL_XSPI_DLYB_GetClockPeriod(hospi, &dlyb_cfg) != HAL_OK)
 80064b8:	f107 0310 	add.w	r3, r7, #16
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f00c f944 	bl	801274c <HAL_XSPI_DLYB_GetClockPeriod>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <OSPI_DLYB_Enable+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80064ca:	f06f 0303 	mvn.w	r3, #3
 80064ce:	61fb      	str	r3, [r7, #28]
  }

  /* PhaseSel is divided by 4 (emperic value)*/
  dlyb_cfg.PhaseSel /= div_value;
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d8:	617b      	str	r3, [r7, #20]

  /* save the present configuration for check*/
  dlyb_cfg_test = dlyb_cfg;
 80064da:	f107 0308 	add.w	r3, r7, #8
 80064de:	f107 0210 	add.w	r2, r7, #16
 80064e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064e6:	e883 0003 	stmia.w	r3, {r0, r1}

  /*set delay block configuration*/
  if (HAL_XSPI_DLYB_SetConfig(hospi, &dlyb_cfg) != HAL_OK)
 80064ea:	f107 0310 	add.w	r3, r7, #16
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f00c f8ab 	bl	801264c <HAL_XSPI_DLYB_SetConfig>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <OSPI_DLYB_Enable+0x5a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80064fc:	f06f 0303 	mvn.w	r3, #3
 8006500:	61fb      	str	r3, [r7, #28]
  }

  /*check the set value*/
  if (HAL_XSPI_DLYB_GetConfig(hospi, &dlyb_cfg) != HAL_OK)
 8006502:	f107 0310 	add.w	r3, r7, #16
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f00c f8ed 	bl	80126e8 <HAL_XSPI_DLYB_GetConfig>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <OSPI_DLYB_Enable+0x72>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8006514:	f06f 0303 	mvn.w	r3, #3
 8006518:	61fb      	str	r3, [r7, #28]
  }

  if ((dlyb_cfg.PhaseSel != dlyb_cfg_test.PhaseSel) || (dlyb_cfg.Units != dlyb_cfg_test.Units))
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	429a      	cmp	r2, r3
 8006520:	d103      	bne.n	800652a <OSPI_DLYB_Enable+0x82>
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	429a      	cmp	r2, r3
 8006528:	d002      	beq.n	8006530 <OSPI_DLYB_Enable+0x88>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800652a:	f06f 0303 	mvn.w	r3, #3
 800652e:	61fb      	str	r3, [r7, #28]
  }

  /* Return BSP status */
  return ret;
 8006530:	69fb      	ldr	r3, [r7, #28]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3720      	adds	r7, #32
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(XSPI_HandleTypeDef *hospi)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b094      	sub	sp, #80	; 0x50
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 8006544:	4bc1      	ldr	r3, [pc, #772]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654a:	4ac0      	ldr	r2, [pc, #768]	; (800684c <OSPI_NOR_MspInit+0x310>)
 800654c:	f043 0310 	orr.w	r3, r3, #16
 8006550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006554:	4bbd      	ldr	r3, [pc, #756]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655a:	f003 0310 	and.w	r3, r3, #16
 800655e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  __HAL_RCC_PWR_CLK_ENABLE();
 8006562:	4bba      	ldr	r3, [pc, #744]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006568:	4ab8      	ldr	r2, [pc, #736]	; (800684c <OSPI_NOR_MspInit+0x310>)
 800656a:	f043 0304 	orr.w	r3, r3, #4
 800656e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006572:	4bb6      	ldr	r3, [pc, #728]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	637b      	str	r3, [r7, #52]	; 0x34
 800657e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  /* Enable VDDIO2 supply */
  HAL_PWREx_EnableVddIO2();
 8006580:	f005 fa6e 	bl	800ba60 <HAL_PWREx_EnableVddIO2>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8006584:	4bb1      	ldr	r3, [pc, #708]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006588:	4ab0      	ldr	r2, [pc, #704]	; (800684c <OSPI_NOR_MspInit+0x310>)
 800658a:	f043 0310 	orr.w	r3, r3, #16
 800658e:	6693      	str	r3, [r2, #104]	; 0x68
  OSPI_RELEASE_RESET();
 8006590:	4bae      	ldr	r3, [pc, #696]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006594:	4aad      	ldr	r2, [pc, #692]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006596:	f023 0310 	bic.w	r3, r3, #16
 800659a:	6693      	str	r3, [r2, #104]	; 0x68

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 800659c:	4bab      	ldr	r3, [pc, #684]	; (800684c <OSPI_NOR_MspInit+0x310>)
 800659e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065a2:	4aaa      	ldr	r2, [pc, #680]	; (800684c <OSPI_NOR_MspInit+0x310>)
 80065a4:	f043 0320 	orr.w	r3, r3, #32
 80065a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065ac:	4ba7      	ldr	r3, [pc, #668]	; (800684c <OSPI_NOR_MspInit+0x310>)
 80065ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	633b      	str	r3, [r7, #48]	; 0x30
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_DQS_GPIO_CLK_ENABLE();
 80065ba:	4ba4      	ldr	r3, [pc, #656]	; (800684c <OSPI_NOR_MspInit+0x310>)
 80065bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065c0:	4aa2      	ldr	r2, [pc, #648]	; (800684c <OSPI_NOR_MspInit+0x310>)
 80065c2:	f043 0301 	orr.w	r3, r3, #1
 80065c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065ca:	4ba0      	ldr	r3, [pc, #640]	; (800684c <OSPI_NOR_MspInit+0x310>)
 80065cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_CS_GPIO_CLK_ENABLE();
 80065d8:	4b9c      	ldr	r3, [pc, #624]	; (800684c <OSPI_NOR_MspInit+0x310>)
 80065da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065de:	4a9b      	ldr	r2, [pc, #620]	; (800684c <OSPI_NOR_MspInit+0x310>)
 80065e0:	f043 0301 	orr.w	r3, r3, #1
 80065e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065e8:	4b98      	ldr	r3, [pc, #608]	; (800684c <OSPI_NOR_MspInit+0x310>)
 80065ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D0_GPIO_CLK_ENABLE();
 80065f6:	4b95      	ldr	r3, [pc, #596]	; (800684c <OSPI_NOR_MspInit+0x310>)
 80065f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065fc:	4a93      	ldr	r2, [pc, #588]	; (800684c <OSPI_NOR_MspInit+0x310>)
 80065fe:	f043 0320 	orr.w	r3, r3, #32
 8006602:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006606:	4b91      	ldr	r3, [pc, #580]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D1_GPIO_CLK_ENABLE();
 8006614:	4b8d      	ldr	r3, [pc, #564]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800661a:	4a8c      	ldr	r2, [pc, #560]	; (800684c <OSPI_NOR_MspInit+0x310>)
 800661c:	f043 0320 	orr.w	r3, r3, #32
 8006620:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006624:	4b89      	ldr	r3, [pc, #548]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	623b      	str	r3, [r7, #32]
 8006630:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D2_GPIO_CLK_ENABLE();
 8006632:	4b86      	ldr	r3, [pc, #536]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006638:	4a84      	ldr	r2, [pc, #528]	; (800684c <OSPI_NOR_MspInit+0x310>)
 800663a:	f043 0320 	orr.w	r3, r3, #32
 800663e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006642:	4b82      	ldr	r3, [pc, #520]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006648:	f003 0320 	and.w	r3, r3, #32
 800664c:	61fb      	str	r3, [r7, #28]
 800664e:	69fb      	ldr	r3, [r7, #28]
  OSPI_D3_GPIO_CLK_ENABLE();
 8006650:	4b7e      	ldr	r3, [pc, #504]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006656:	4a7d      	ldr	r2, [pc, #500]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006658:	f043 0320 	orr.w	r3, r3, #32
 800665c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006660:	4b7a      	ldr	r3, [pc, #488]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	61bb      	str	r3, [r7, #24]
 800666c:	69bb      	ldr	r3, [r7, #24]
  OSPI_D4_GPIO_CLK_ENABLE();
 800666e:	4b77      	ldr	r3, [pc, #476]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006674:	4a75      	ldr	r2, [pc, #468]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006676:	f043 0304 	orr.w	r3, r3, #4
 800667a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800667e:	4b73      	ldr	r3, [pc, #460]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	697b      	ldr	r3, [r7, #20]
  OSPI_D5_GPIO_CLK_ENABLE();
 800668c:	4b6f      	ldr	r3, [pc, #444]	; (800684c <OSPI_NOR_MspInit+0x310>)
 800668e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006692:	4a6e      	ldr	r2, [pc, #440]	; (800684c <OSPI_NOR_MspInit+0x310>)
 8006694:	f043 0304 	orr.w	r3, r3, #4
 8006698:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800669c:	4b6b      	ldr	r3, [pc, #428]	; (800684c <OSPI_NOR_MspInit+0x310>)
 800669e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a2:	f003 0304 	and.w	r3, r3, #4
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	693b      	ldr	r3, [r7, #16]
  OSPI_D6_GPIO_CLK_ENABLE();
 80066aa:	4b68      	ldr	r3, [pc, #416]	; (800684c <OSPI_NOR_MspInit+0x310>)
 80066ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066b0:	4a66      	ldr	r2, [pc, #408]	; (800684c <OSPI_NOR_MspInit+0x310>)
 80066b2:	f043 0304 	orr.w	r3, r3, #4
 80066b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80066ba:	4b64      	ldr	r3, [pc, #400]	; (800684c <OSPI_NOR_MspInit+0x310>)
 80066bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	68fb      	ldr	r3, [r7, #12]
  OSPI_D7_GPIO_CLK_ENABLE();
 80066c8:	4b60      	ldr	r3, [pc, #384]	; (800684c <OSPI_NOR_MspInit+0x310>)
 80066ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066ce:	4a5f      	ldr	r2, [pc, #380]	; (800684c <OSPI_NOR_MspInit+0x310>)
 80066d0:	f043 0304 	orr.w	r3, r3, #4
 80066d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80066d8:	4b5c      	ldr	r3, [pc, #368]	; (800684c <OSPI_NOR_MspInit+0x310>)
 80066da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066de:	f003 0304 	and.w	r3, r3, #4
 80066e2:	60bb      	str	r3, [r7, #8]
 80066e4:	68bb      	ldr	r3, [r7, #8]

  /* Enable HSLV GPIOs */
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 80066e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066ea:	4859      	ldr	r0, [pc, #356]	; (8006850 <OSPI_NOR_MspInit+0x314>)
 80066ec:	f003 fbec 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 80066f0:	2104      	movs	r1, #4
 80066f2:	4858      	ldr	r0, [pc, #352]	; (8006854 <OSPI_NOR_MspInit+0x318>)
 80066f4:	f003 fbe8 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 80066f8:	2102      	movs	r1, #2
 80066fa:	4856      	ldr	r0, [pc, #344]	; (8006854 <OSPI_NOR_MspInit+0x318>)
 80066fc:	f003 fbe4 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 8006700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006704:	4852      	ldr	r0, [pc, #328]	; (8006850 <OSPI_NOR_MspInit+0x314>)
 8006706:	f003 fbdf 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 800670a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800670e:	4850      	ldr	r0, [pc, #320]	; (8006850 <OSPI_NOR_MspInit+0x314>)
 8006710:	f003 fbda 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8006714:	2180      	movs	r1, #128	; 0x80
 8006716:	484e      	ldr	r0, [pc, #312]	; (8006850 <OSPI_NOR_MspInit+0x314>)
 8006718:	f003 fbd6 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 800671c:	2140      	movs	r1, #64	; 0x40
 800671e:	484c      	ldr	r0, [pc, #304]	; (8006850 <OSPI_NOR_MspInit+0x314>)
 8006720:	f003 fbd2 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8006724:	2102      	movs	r1, #2
 8006726:	484c      	ldr	r0, [pc, #304]	; (8006858 <OSPI_NOR_MspInit+0x31c>)
 8006728:	f003 fbce 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 800672c:	2104      	movs	r1, #4
 800672e:	484a      	ldr	r0, [pc, #296]	; (8006858 <OSPI_NOR_MspInit+0x31c>)
 8006730:	f003 fbca 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 8006734:	2108      	movs	r1, #8
 8006736:	4848      	ldr	r0, [pc, #288]	; (8006858 <OSPI_NOR_MspInit+0x31c>)
 8006738:	f003 fbc6 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 800673c:	2101      	movs	r1, #1
 800673e:	4846      	ldr	r0, [pc, #280]	; (8006858 <OSPI_NOR_MspInit+0x31c>)
 8006740:	f003 fbc2 	bl	8009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 8006744:	2304      	movs	r3, #4
 8006746:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006748:	2302      	movs	r3, #2
 800674a:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800674c:	2301      	movs	r3, #1
 800674e:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006750:	2303      	movs	r3, #3
 8006752:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 8006754:	230a      	movs	r3, #10
 8006756:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8006758:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800675c:	4619      	mov	r1, r3
 800675e:	483d      	ldr	r0, [pc, #244]	; (8006854 <OSPI_NOR_MspInit+0x318>)
 8006760:	f003 f8b2 	bl	80098c8 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8006764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006768:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800676a:	2300      	movs	r3, #0
 800676c:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 800676e:	2303      	movs	r3, #3
 8006770:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8006772:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006776:	4619      	mov	r1, r3
 8006778:	4835      	ldr	r0, [pc, #212]	; (8006850 <OSPI_NOR_MspInit+0x314>)
 800677a:	f003 f8a5 	bl	80098c8 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 800677e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006782:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 8006784:	230a      	movs	r3, #10
 8006786:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8006788:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800678c:	4619      	mov	r1, r3
 800678e:	4830      	ldr	r0, [pc, #192]	; (8006850 <OSPI_NOR_MspInit+0x314>)
 8006790:	f003 f89a 	bl	80098c8 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 8006794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006798:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 800679a:	230a      	movs	r3, #10
 800679c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 800679e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067a2:	4619      	mov	r1, r3
 80067a4:	482a      	ldr	r0, [pc, #168]	; (8006850 <OSPI_NOR_MspInit+0x314>)
 80067a6:	f003 f88f 	bl	80098c8 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 80067aa:	2380      	movs	r3, #128	; 0x80
 80067ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 80067ae:	230a      	movs	r3, #10
 80067b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 80067b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067b6:	4619      	mov	r1, r3
 80067b8:	4825      	ldr	r0, [pc, #148]	; (8006850 <OSPI_NOR_MspInit+0x314>)
 80067ba:	f003 f885 	bl	80098c8 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 80067be:	2340      	movs	r3, #64	; 0x40
 80067c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 80067c2:	230a      	movs	r3, #10
 80067c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 80067c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067ca:	4619      	mov	r1, r3
 80067cc:	4820      	ldr	r0, [pc, #128]	; (8006850 <OSPI_NOR_MspInit+0x314>)
 80067ce:	f003 f87b 	bl	80098c8 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 80067d2:	2302      	movs	r3, #2
 80067d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 80067d6:	230a      	movs	r3, #10
 80067d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 80067da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067de:	4619      	mov	r1, r3
 80067e0:	481d      	ldr	r0, [pc, #116]	; (8006858 <OSPI_NOR_MspInit+0x31c>)
 80067e2:	f003 f871 	bl	80098c8 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 80067e6:	2304      	movs	r3, #4
 80067e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 80067ea:	230a      	movs	r3, #10
 80067ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 80067ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067f2:	4619      	mov	r1, r3
 80067f4:	4818      	ldr	r0, [pc, #96]	; (8006858 <OSPI_NOR_MspInit+0x31c>)
 80067f6:	f003 f867 	bl	80098c8 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 80067fa:	2308      	movs	r3, #8
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 80067fe:	230a      	movs	r3, #10
 8006800:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8006802:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006806:	4619      	mov	r1, r3
 8006808:	4813      	ldr	r0, [pc, #76]	; (8006858 <OSPI_NOR_MspInit+0x31c>)
 800680a:	f003 f85d 	bl	80098c8 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 800680e:	2301      	movs	r3, #1
 8006810:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 8006812:	2303      	movs	r3, #3
 8006814:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8006816:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800681a:	4619      	mov	r1, r3
 800681c:	480e      	ldr	r0, [pc, #56]	; (8006858 <OSPI_NOR_MspInit+0x31c>)
 800681e:	f003 f853 	bl	80098c8 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 8006822:	2302      	movs	r3, #2
 8006824:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 8006826:	230a      	movs	r3, #10
 8006828:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 800682a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800682e:	4619      	mov	r1, r3
 8006830:	4808      	ldr	r0, [pc, #32]	; (8006854 <OSPI_NOR_MspInit+0x318>)
 8006832:	f003 f849 	bl	80098c8 <HAL_GPIO_Init>

  /* Configure the NVIC for OSPI */
  /* NVIC configuration for OSPI interrupt */
  HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0x0F, 0);
 8006836:	2200      	movs	r2, #0
 8006838:	210f      	movs	r1, #15
 800683a:	204c      	movs	r0, #76	; 0x4c
 800683c:	f000 fe9c 	bl	8007578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8006840:	204c      	movs	r0, #76	; 0x4c
 8006842:	f000 feb3 	bl	80075ac <HAL_NVIC_EnableIRQ>
}
 8006846:	bf00      	nop
 8006848:	3750      	adds	r7, #80	; 0x50
 800684a:	e007      	b.n	800685c <OSPI_NOR_MspInit+0x320>
 800684c:	46020c00 	.word	0x46020c00
 8006850:	42021400 	.word	0x42021400
 8006854:	42020000 	.word	0x42020000
 8006858:	42020800 	.word	0x42020800
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory(uint32_t Instance)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <OSPI_NOR_ResetMemory+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006872:	f06f 0301 	mvn.w	r3, #1
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	e08e      	b.n	8006998 <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	4613      	mov	r3, r2
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	4413      	add	r3, r2
 8006882:	015b      	lsls	r3, r3, #5
 8006884:	4a47      	ldr	r2, [pc, #284]	; (80069a4 <OSPI_NOR_ResetMemory+0x144>)
 8006886:	4413      	add	r3, r2
 8006888:	2200      	movs	r2, #0
 800688a:	2100      	movs	r1, #0
 800688c:	4618      	mov	r0, r3
 800688e:	f7fd fd85 	bl	800439c <MX25UM51245G_ResetEnable>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <OSPI_NOR_ResetMemory+0x40>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006898:	f06f 0304 	mvn.w	r3, #4
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	e07b      	b.n	8006998 <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	4613      	mov	r3, r2
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	4413      	add	r3, r2
 80068a8:	015b      	lsls	r3, r3, #5
 80068aa:	4a3e      	ldr	r2, [pc, #248]	; (80069a4 <OSPI_NOR_ResetMemory+0x144>)
 80068ac:	4413      	add	r3, r2
 80068ae:	2200      	movs	r2, #0
 80068b0:	2100      	movs	r1, #0
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fd fdca 	bl	800444c <MX25UM51245G_ResetMemory>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <OSPI_NOR_ResetMemory+0x66>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80068be:	f06f 0304 	mvn.w	r3, #4
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	e068      	b.n	8006998 <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	4613      	mov	r3, r2
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	4413      	add	r3, r2
 80068ce:	015b      	lsls	r3, r3, #5
 80068d0:	4a34      	ldr	r2, [pc, #208]	; (80069a4 <OSPI_NOR_ResetMemory+0x144>)
 80068d2:	4413      	add	r3, r2
 80068d4:	2200      	movs	r2, #0
 80068d6:	2101      	movs	r1, #1
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fd fd5f 	bl	800439c <MX25UM51245G_ResetEnable>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <OSPI_NOR_ResetMemory+0x8c>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80068e4:	f06f 0304 	mvn.w	r3, #4
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	e055      	b.n	8006998 <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	4413      	add	r3, r2
 80068f4:	015b      	lsls	r3, r3, #5
 80068f6:	4a2b      	ldr	r2, [pc, #172]	; (80069a4 <OSPI_NOR_ResetMemory+0x144>)
 80068f8:	4413      	add	r3, r2
 80068fa:	2200      	movs	r2, #0
 80068fc:	2101      	movs	r1, #1
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fd fda4 	bl	800444c <MX25UM51245G_ResetMemory>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <OSPI_NOR_ResetMemory+0xb2>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800690a:	f06f 0304 	mvn.w	r3, #4
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	e042      	b.n	8006998 <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	4613      	mov	r3, r2
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	4413      	add	r3, r2
 800691a:	015b      	lsls	r3, r3, #5
 800691c:	4a21      	ldr	r2, [pc, #132]	; (80069a4 <OSPI_NOR_ResetMemory+0x144>)
 800691e:	4413      	add	r3, r2
 8006920:	2201      	movs	r2, #1
 8006922:	2101      	movs	r1, #1
 8006924:	4618      	mov	r0, r3
 8006926:	f7fd fd39 	bl	800439c <MX25UM51245G_ResetEnable>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <OSPI_NOR_ResetMemory+0xd8>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006930:	f06f 0304 	mvn.w	r3, #4
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	e02f      	b.n	8006998 <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	4613      	mov	r3, r2
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	4413      	add	r3, r2
 8006940:	015b      	lsls	r3, r3, #5
 8006942:	4a18      	ldr	r2, [pc, #96]	; (80069a4 <OSPI_NOR_ResetMemory+0x144>)
 8006944:	4413      	add	r3, r2
 8006946:	2201      	movs	r2, #1
 8006948:	2101      	movs	r1, #1
 800694a:	4618      	mov	r0, r3
 800694c:	f7fd fd7e 	bl	800444c <MX25UM51245G_ResetMemory>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <OSPI_NOR_ResetMemory+0xfe>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006956:	f06f 0304 	mvn.w	r3, #4
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	e01c      	b.n	8006998 <OSPI_NOR_ResetMemory+0x138>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access  */
 800695e:	4912      	ldr	r1, [pc, #72]	; (80069a8 <OSPI_NOR_ResetMemory+0x148>)
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	4413      	add	r3, r2
 8006968:	440b      	add	r3, r1
 800696a:	2201      	movs	r2, #1
 800696c:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;     /* After reset H/W back to SPI mode by default */
 800696e:	490e      	ldr	r1, [pc, #56]	; (80069a8 <OSPI_NOR_ResetMemory+0x148>)
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	4613      	mov	r3, r2
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	4413      	add	r3, r2
 8006978:	440b      	add	r3, r1
 800697a:	3301      	adds	r3, #1
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode         */
 8006980:	4909      	ldr	r1, [pc, #36]	; (80069a8 <OSPI_NOR_ResetMemory+0x148>)
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	4613      	mov	r3, r2
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	4413      	add	r3, r2
 800698a:	440b      	add	r3, r1
 800698c:	3302      	adds	r3, #2
 800698e:	2200      	movs	r2, #0
 8006990:	701a      	strb	r2, [r3, #0]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
 8006992:	2064      	movs	r0, #100	; 0x64
 8006994:	f000 fd14 	bl	80073c0 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 8006998:	68fb      	ldr	r3, [r7, #12]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20197a04 	.word	0x20197a04
 80069a8:	20197a64 	.word	0x20197a64

080069ac <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 80069ac:	b590      	push	{r4, r7, lr}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af02      	add	r7, sp, #8
 80069b2:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <OSPI_NOR_EnterDOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80069ba:	f06f 0301 	mvn.w	r3, #1
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	e0e4      	b.n	8006b8c <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	4613      	mov	r3, r2
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	4413      	add	r3, r2
 80069ca:	015b      	lsls	r3, r3, #5
 80069cc:	4a72      	ldr	r2, [pc, #456]	; (8006b98 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 80069ce:	1898      	adds	r0, r3, r2
 80069d0:	4972      	ldr	r1, [pc, #456]	; (8006b9c <OSPI_NOR_EnterDOPIMode+0x1f0>)
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	4613      	mov	r3, r2
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	4413      	add	r3, r2
 80069da:	440b      	add	r3, r1
 80069dc:	3301      	adds	r3, #1
 80069de:	7819      	ldrb	r1, [r3, #0]
 80069e0:	4c6e      	ldr	r4, [pc, #440]	; (8006b9c <OSPI_NOR_EnterDOPIMode+0x1f0>)
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	005b      	lsls	r3, r3, #1
 80069e8:	4413      	add	r3, r2
 80069ea:	4423      	add	r3, r4
 80069ec:	3302      	adds	r3, #2
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	461a      	mov	r2, r3
 80069f2:	f7fd facf 	bl	8003f94 <MX25UM51245G_WriteEnable>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <OSPI_NOR_EnterDOPIMode+0x58>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80069fc:	f06f 0304 	mvn.w	r3, #4
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	e0c3      	b.n	8006b8c <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	4413      	add	r3, r2
 8006a0c:	015b      	lsls	r3, r3, #5
 8006a0e:	4a62      	ldr	r2, [pc, #392]	; (8006b98 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006a10:	1898      	adds	r0, r3, r2
 8006a12:	4962      	ldr	r1, [pc, #392]	; (8006b9c <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	4613      	mov	r3, r2
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	4413      	add	r3, r2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	3301      	adds	r3, #1
 8006a20:	7819      	ldrb	r1, [r3, #0]
 8006a22:	4c5e      	ldr	r4, [pc, #376]	; (8006b9c <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	4613      	mov	r3, r2
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	4413      	add	r3, r2
 8006a2c:	4423      	add	r3, r4
 8006a2e:	3302      	adds	r3, #2
 8006a30:	781a      	ldrb	r2, [r3, #0]
 8006a32:	2307      	movs	r3, #7
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006a3a:	f7fd fb7b 	bl	8004134 <MX25UM51245G_WriteCfg2Register>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <OSPI_NOR_EnterDOPIMode+0xa0>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_6_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a44:	f06f 0304 	mvn.w	r3, #4
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	e09f      	b.n	8006b8c <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	4413      	add	r3, r2
 8006a54:	015b      	lsls	r3, r3, #5
 8006a56:	4a50      	ldr	r2, [pc, #320]	; (8006b98 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006a58:	1898      	adds	r0, r3, r2
 8006a5a:	4950      	ldr	r1, [pc, #320]	; (8006b9c <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	4413      	add	r3, r2
 8006a64:	440b      	add	r3, r1
 8006a66:	3301      	adds	r3, #1
 8006a68:	7819      	ldrb	r1, [r3, #0]
 8006a6a:	4c4c      	ldr	r4, [pc, #304]	; (8006b9c <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	4413      	add	r3, r2
 8006a74:	4423      	add	r3, r4
 8006a76:	3302      	adds	r3, #2
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f7fd fa8a 	bl	8003f94 <MX25UM51245G_WriteEnable>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <OSPI_NOR_EnterDOPIMode+0xe2>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a86:	f06f 0304 	mvn.w	r3, #4
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	e07e      	b.n	8006b8c <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	4613      	mov	r3, r2
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	4413      	add	r3, r2
 8006a96:	015b      	lsls	r3, r3, #5
 8006a98:	4a3f      	ldr	r2, [pc, #252]	; (8006b98 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006a9a:	1898      	adds	r0, r3, r2
 8006a9c:	493f      	ldr	r1, [pc, #252]	; (8006b9c <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	4413      	add	r3, r2
 8006aa6:	440b      	add	r3, r1
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	7819      	ldrb	r1, [r3, #0]
 8006aac:	4c3b      	ldr	r4, [pc, #236]	; (8006b9c <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	4413      	add	r3, r2
 8006ab6:	4423      	add	r3, r4
 8006ab8:	3302      	adds	r3, #2
 8006aba:	781a      	ldrb	r2, [r3, #0]
 8006abc:	2302      	movs	r3, #2
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f7fd fb37 	bl	8004134 <MX25UM51245G_WriteCfg2Register>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <OSPI_NOR_EnterDOPIMode+0x128>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_DOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006acc:	f06f 0304 	mvn.w	r3, #4
 8006ad0:	60fb      	str	r3, [r7, #12]
 8006ad2:	e05b      	b.n	8006b8c <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 8006ad4:	2028      	movs	r0, #40	; 0x28
 8006ad6:	f000 fc73 	bl	80073c0 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
 8006ada:	492f      	ldr	r1, [pc, #188]	; (8006b98 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	4413      	add	r3, r2
 8006ae4:	015b      	lsls	r3, r3, #5
 8006ae6:	440b      	add	r3, r1
 8006ae8:	330c      	adds	r3, #12
 8006aea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006aee:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8006af0:	4929      	ldr	r1, [pc, #164]	; (8006b98 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	4613      	mov	r3, r2
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	4413      	add	r3, r2
 8006afa:	015b      	lsls	r3, r3, #5
 8006afc:	440b      	add	r3, r1
 8006afe:	332c      	adds	r3, #44	; 0x2c
 8006b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b04:	601a      	str	r2, [r3, #0]
    if (HAL_XSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	4413      	add	r3, r2
 8006b0e:	015b      	lsls	r3, r3, #5
 8006b10:	4a21      	ldr	r2, [pc, #132]	; (8006b98 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006b12:	4413      	add	r3, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f00b f8bb 	bl	8011c90 <HAL_XSPI_Init>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d003      	beq.n	8006b28 <OSPI_NOR_EnterDOPIMode+0x17c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006b20:	f06f 0303 	mvn.w	r3, #3
 8006b24:	60fb      	str	r3, [r7, #12]
 8006b26:	e031      	b.n	8006b8c <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    /* Check Flash busy ? */
    else if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	4413      	add	r3, r2
 8006b30:	015b      	lsls	r3, r3, #5
 8006b32:	4a19      	ldr	r2, [pc, #100]	; (8006b98 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006b34:	4413      	add	r3, r2
 8006b36:	2201      	movs	r2, #1
 8006b38:	2101      	movs	r1, #1
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fd f85f 	bl	8003bfe <MX25UM51245G_AutoPollingMemReady>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <OSPI_NOR_EnterDOPIMode+0x1a2>
                                              BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b46:	f06f 0304 	mvn.w	r3, #4
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	e01e      	b.n	8006b8c <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER,
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	4613      	mov	r3, r2
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	4413      	add	r3, r2
 8006b56:	015b      	lsls	r3, r3, #5
 8006b58:	4a0f      	ldr	r2, [pc, #60]	; (8006b98 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006b5a:	1898      	adds	r0, r3, r2
 8006b5c:	f107 0308 	add.w	r3, r7, #8
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	2300      	movs	r3, #0
 8006b64:	2201      	movs	r2, #1
 8006b66:	2101      	movs	r1, #1
 8006b68:	f7fd fb79 	bl	800425e <MX25UM51245G_ReadCfg2Register>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <OSPI_NOR_EnterDOPIMode+0x1ce>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b72:	f06f 0304 	mvn.w	r3, #4
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	e008      	b.n	8006b8c <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    else if (reg[0] != MX25UM51245G_CR2_DOPI)
 8006b7a:	7a3b      	ldrb	r3, [r7, #8]
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d003      	beq.n	8006b88 <OSPI_NOR_EnterDOPIMode+0x1dc>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b80:	f06f 0304 	mvn.w	r3, #4
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	e001      	b.n	8006b8c <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd90      	pop	{r4, r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20197a04 	.word	0x20197a04
 8006b9c:	20197a64 	.word	0x20197a64

08006ba0 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 8006ba0:	b590      	push	{r4, r7, lr}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <OSPI_NOR_EnterSOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006bae:	f06f 0301 	mvn.w	r3, #1
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	e0bd      	b.n	8006d32 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	4413      	add	r3, r2
 8006bbe:	015b      	lsls	r3, r3, #5
 8006bc0:	4a5e      	ldr	r2, [pc, #376]	; (8006d3c <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006bc2:	1898      	adds	r0, r3, r2
 8006bc4:	495e      	ldr	r1, [pc, #376]	; (8006d40 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	4413      	add	r3, r2
 8006bce:	440b      	add	r3, r1
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	7819      	ldrb	r1, [r3, #0]
 8006bd4:	4c5a      	ldr	r4, [pc, #360]	; (8006d40 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	4413      	add	r3, r2
 8006bde:	4423      	add	r3, r4
 8006be0:	3302      	adds	r3, #2
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	461a      	mov	r2, r3
 8006be6:	f7fd f9d5 	bl	8003f94 <MX25UM51245G_WriteEnable>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <OSPI_NOR_EnterSOPIMode+0x58>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006bf0:	f06f 0304 	mvn.w	r3, #4
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	e09c      	b.n	8006d32 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	4413      	add	r3, r2
 8006c00:	015b      	lsls	r3, r3, #5
 8006c02:	4a4e      	ldr	r2, [pc, #312]	; (8006d3c <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006c04:	1898      	adds	r0, r3, r2
 8006c06:	494e      	ldr	r1, [pc, #312]	; (8006d40 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	4413      	add	r3, r2
 8006c10:	440b      	add	r3, r1
 8006c12:	3301      	adds	r3, #1
 8006c14:	7819      	ldrb	r1, [r3, #0]
 8006c16:	4c4a      	ldr	r4, [pc, #296]	; (8006d40 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	4413      	add	r3, r2
 8006c20:	4423      	add	r3, r4
 8006c22:	3302      	adds	r3, #2
 8006c24:	781a      	ldrb	r2, [r3, #0]
 8006c26:	2307      	movs	r3, #7
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006c2e:	f7fd fa81 	bl	8004134 <MX25UM51245G_WriteCfg2Register>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <OSPI_NOR_EnterSOPIMode+0xa0>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_6_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c38:	f06f 0304 	mvn.w	r3, #4
 8006c3c:	60fb      	str	r3, [r7, #12]
 8006c3e:	e078      	b.n	8006d32 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	4613      	mov	r3, r2
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	4413      	add	r3, r2
 8006c48:	015b      	lsls	r3, r3, #5
 8006c4a:	4a3c      	ldr	r2, [pc, #240]	; (8006d3c <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006c4c:	1898      	adds	r0, r3, r2
 8006c4e:	493c      	ldr	r1, [pc, #240]	; (8006d40 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	4413      	add	r3, r2
 8006c58:	440b      	add	r3, r1
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	7819      	ldrb	r1, [r3, #0]
 8006c5e:	4c38      	ldr	r4, [pc, #224]	; (8006d40 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	4613      	mov	r3, r2
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	4413      	add	r3, r2
 8006c68:	4423      	add	r3, r4
 8006c6a:	3302      	adds	r3, #2
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f7fd f990 	bl	8003f94 <MX25UM51245G_WriteEnable>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <OSPI_NOR_EnterSOPIMode+0xe2>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c7a:	f06f 0304 	mvn.w	r3, #4
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	e057      	b.n	8006d32 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	4613      	mov	r3, r2
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	4413      	add	r3, r2
 8006c8a:	015b      	lsls	r3, r3, #5
 8006c8c:	4a2b      	ldr	r2, [pc, #172]	; (8006d3c <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006c8e:	1898      	adds	r0, r3, r2
 8006c90:	492b      	ldr	r1, [pc, #172]	; (8006d40 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	4613      	mov	r3, r2
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	4413      	add	r3, r2
 8006c9a:	440b      	add	r3, r1
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	7819      	ldrb	r1, [r3, #0]
 8006ca0:	4c27      	ldr	r4, [pc, #156]	; (8006d40 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	4413      	add	r3, r2
 8006caa:	4423      	add	r3, r4
 8006cac:	3302      	adds	r3, #2
 8006cae:	781a      	ldrb	r2, [r3, #0]
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f7fd fa3d 	bl	8004134 <MX25UM51245G_WriteCfg2Register>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <OSPI_NOR_EnterSOPIMode+0x128>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_SOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006cc0:	f06f 0304 	mvn.w	r3, #4
 8006cc4:	60fb      	str	r3, [r7, #12]
 8006cc6:	e034      	b.n	8006d32 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 8006cc8:	2028      	movs	r0, #40	; 0x28
 8006cca:	f000 fb79 	bl	80073c0 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	4413      	add	r3, r2
 8006cd6:	015b      	lsls	r3, r3, #5
 8006cd8:	4a18      	ldr	r2, [pc, #96]	; (8006d3c <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006cda:	4413      	add	r3, r2
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2101      	movs	r1, #1
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7fc ff8c 	bl	8003bfe <MX25UM51245G_AutoPollingMemReady>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <OSPI_NOR_EnterSOPIMode+0x154>
                                         BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006cec:	f06f 0304 	mvn.w	r3, #4
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	e01e      	b.n	8006d32 <OSPI_NOR_EnterSOPIMode+0x192>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	4413      	add	r3, r2
 8006cfc:	015b      	lsls	r3, r3, #5
 8006cfe:	4a0f      	ldr	r2, [pc, #60]	; (8006d3c <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006d00:	1898      	adds	r0, r3, r2
 8006d02:	f107 0308 	add.w	r3, r7, #8
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	2300      	movs	r3, #0
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	f7fd faa6 	bl	800425e <MX25UM51245G_ReadCfg2Register>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <OSPI_NOR_EnterSOPIMode+0x180>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d18:	f06f 0304 	mvn.w	r3, #4
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	e008      	b.n	8006d32 <OSPI_NOR_EnterSOPIMode+0x192>
    }
    else if (reg[0] != MX25UM51245G_CR2_SOPI)
 8006d20:	7a3b      	ldrb	r3, [r7, #8]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d003      	beq.n	8006d2e <OSPI_NOR_EnterSOPIMode+0x18e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d26:	f06f 0304 	mvn.w	r3, #4
 8006d2a:	60fb      	str	r3, [r7, #12]
 8006d2c:	e001      	b.n	8006d32 <OSPI_NOR_EnterSOPIMode+0x192>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8006d32:	68fb      	ldr	r3, [r7, #12]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd90      	pop	{r4, r7, pc}
 8006d3c:	20197a04 	.word	0x20197a04
 8006d40:	20197a64 	.word	0x20197a64

08006d44 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode(uint32_t Instance)
{
 8006d44:	b590      	push	{r4, r7, lr}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <OSPI_NOR_ExitOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006d56:	f06f 0301 	mvn.w	r3, #1
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	e0aa      	b.n	8006eb4 <OSPI_NOR_ExitOPIMode+0x170>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	4613      	mov	r3, r2
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	4413      	add	r3, r2
 8006d66:	015b      	lsls	r3, r3, #5
 8006d68:	4a55      	ldr	r2, [pc, #340]	; (8006ec0 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006d6a:	1898      	adds	r0, r3, r2
 8006d6c:	4955      	ldr	r1, [pc, #340]	; (8006ec4 <OSPI_NOR_ExitOPIMode+0x180>)
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	4613      	mov	r3, r2
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	4413      	add	r3, r2
 8006d76:	440b      	add	r3, r1
 8006d78:	3301      	adds	r3, #1
 8006d7a:	7819      	ldrb	r1, [r3, #0]
 8006d7c:	4c51      	ldr	r4, [pc, #324]	; (8006ec4 <OSPI_NOR_ExitOPIMode+0x180>)
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	4613      	mov	r3, r2
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	4413      	add	r3, r2
 8006d86:	4423      	add	r3, r4
 8006d88:	3302      	adds	r3, #2
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	f7fd f901 	bl	8003f94 <MX25UM51245G_WriteEnable>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <OSPI_NOR_ExitOPIMode+0x5c>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d98:	f06f 0304 	mvn.w	r3, #4
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	e089      	b.n	8006eb4 <OSPI_NOR_ExitOPIMode+0x170>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	727b      	strb	r3, [r7, #9]
    if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	4613      	mov	r3, r2
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	4413      	add	r3, r2
 8006db0:	015b      	lsls	r3, r3, #5
 8006db2:	4a43      	ldr	r2, [pc, #268]	; (8006ec0 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006db4:	1898      	adds	r0, r3, r2
 8006db6:	4943      	ldr	r1, [pc, #268]	; (8006ec4 <OSPI_NOR_ExitOPIMode+0x180>)
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	4413      	add	r3, r2
 8006dc0:	440b      	add	r3, r1
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	7819      	ldrb	r1, [r3, #0]
 8006dc6:	4c3f      	ldr	r4, [pc, #252]	; (8006ec4 <OSPI_NOR_ExitOPIMode+0x180>)
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	4413      	add	r3, r2
 8006dd0:	4423      	add	r3, r4
 8006dd2:	3302      	adds	r3, #2
 8006dd4:	781a      	ldrb	r2, [r3, #0]
 8006dd6:	7a3b      	ldrb	r3, [r7, #8]
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f7fd f9aa 	bl	8004134 <MX25UM51245G_WriteCfg2Register>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <OSPI_NOR_ExitOPIMode+0xaa>
                                       Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                       reg[0]) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006de6:	f06f 0304 	mvn.w	r3, #4
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	e062      	b.n	8006eb4 <OSPI_NOR_ExitOPIMode+0x170>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 8006dee:	2028      	movs	r0, #40	; 0x28
 8006df0:	f000 fae6 	bl	80073c0 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8006df4:	4933      	ldr	r1, [pc, #204]	; (8006ec4 <OSPI_NOR_ExitOPIMode+0x180>)
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	4413      	add	r3, r2
 8006dfe:	440b      	add	r3, r1
 8006e00:	3302      	adds	r3, #2
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d123      	bne.n	8006e50 <OSPI_NOR_ExitOPIMode+0x10c>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
 8006e08:	492d      	ldr	r1, [pc, #180]	; (8006ec0 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	4413      	add	r3, r2
 8006e12:	015b      	lsls	r3, r3, #5
 8006e14:	440b      	add	r3, r1
 8006e16:	330c      	adds	r3, #12
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8006e1c:	4928      	ldr	r1, [pc, #160]	; (8006ec0 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	4613      	mov	r3, r2
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	4413      	add	r3, r2
 8006e26:	015b      	lsls	r3, r3, #5
 8006e28:	440b      	add	r3, r1
 8006e2a:	332c      	adds	r3, #44	; 0x2c
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	601a      	str	r2, [r3, #0]
        if (HAL_XSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	4613      	mov	r3, r2
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	4413      	add	r3, r2
 8006e38:	015b      	lsls	r3, r3, #5
 8006e3a:	4a21      	ldr	r2, [pc, #132]	; (8006ec0 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006e3c:	4413      	add	r3, r2
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f00a ff26 	bl	8011c90 <HAL_XSPI_Init>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <OSPI_NOR_ExitOPIMode+0x10c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006e4a:	f06f 0303 	mvn.w	r3, #3
 8006e4e:	60fb      	str	r3, [r7, #12]
        }
      }

      if (ret == BSP_ERROR_NONE)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d12e      	bne.n	8006eb4 <OSPI_NOR_ExitOPIMode+0x170>
      {
        /* Check Flash busy ? */
        if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	4413      	add	r3, r2
 8006e5e:	015b      	lsls	r3, r3, #5
 8006e60:	4a17      	ldr	r2, [pc, #92]	; (8006ec0 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006e62:	4413      	add	r3, r2
 8006e64:	2200      	movs	r2, #0
 8006e66:	2100      	movs	r1, #0
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fc fec8 	bl	8003bfe <MX25UM51245G_AutoPollingMemReady>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <OSPI_NOR_ExitOPIMode+0x138>
                                             BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e74:	f06f 0304 	mvn.w	r3, #4
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	e01b      	b.n	8006eb4 <OSPI_NOR_ExitOPIMode+0x170>
        }
        /* Check the configuration has been correctly done */
        else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	4413      	add	r3, r2
 8006e84:	015b      	lsls	r3, r3, #5
 8006e86:	4a0e      	ldr	r2, [pc, #56]	; (8006ec0 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006e88:	1898      	adds	r0, r3, r2
 8006e8a:	f107 0308 	add.w	r3, r7, #8
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	2300      	movs	r3, #0
 8006e92:	2200      	movs	r2, #0
 8006e94:	2100      	movs	r1, #0
 8006e96:	f7fd f9e2 	bl	800425e <MX25UM51245G_ReadCfg2Register>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <OSPI_NOR_ExitOPIMode+0x164>
                                               MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006ea0:	f06f 0304 	mvn.w	r3, #4
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	e005      	b.n	8006eb4 <OSPI_NOR_ExitOPIMode+0x170>
        }
        else if (reg[0] != 0U)
 8006ea8:	7a3b      	ldrb	r3, [r7, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <OSPI_NOR_ExitOPIMode+0x170>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006eae:	f06f 0304 	mvn.w	r3, #4
 8006eb2:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd90      	pop	{r4, r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20197a04 	.word	0x20197a04
 8006ec4:	20197a64 	.word	0x20197a64

08006ec8 <BSP_TS_Init>:
  * @param  Instance TS Instance.
  * @param  TS_Init  Pointer to TS initialization structure.
  * @retval BSP status.
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	61fb      	str	r3, [r7, #28]

  if ((TS_Init == NULL) || (Instance >= TS_INSTANCES_NBR))
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <BSP_TS_Init+0x1a>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <BSP_TS_Init+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8006ee2:	f06f 0301 	mvn.w	r3, #1
 8006ee6:	61fb      	str	r3, [r7, #28]
 8006ee8:	e07f      	b.n	8006fea <BSP_TS_Init+0x122>
  }
  else
  {
    /* Probe the TS driver */
    if (SITRONIX_Probe(Instance) != BSP_ERROR_NONE)
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f98c 	bl	8007208 <SITRONIX_Probe>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <BSP_TS_Init+0x36>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8006ef6:	f06f 0304 	mvn.w	r3, #4
 8006efa:	61fb      	str	r3, [r7, #28]
 8006efc:	e075      	b.n	8006fea <BSP_TS_Init+0x122>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t          i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	493c      	ldr	r1, [pc, #240]	; (8006ff4 <BSP_TS_Init+0x12c>)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2068      	movs	r0, #104	; 0x68
 8006f08:	fb00 f303 	mul.w	r3, r0, r3
 8006f0c:	440b      	add	r3, r1
 8006f0e:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	4937      	ldr	r1, [pc, #220]	; (8006ff4 <BSP_TS_Init+0x12c>)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2068      	movs	r0, #104	; 0x68
 8006f1a:	fb00 f303 	mul.w	r3, r0, r3
 8006f1e:	440b      	add	r3, r1
 8006f20:	3304      	adds	r3, #4
 8006f22:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	4932      	ldr	r1, [pc, #200]	; (8006ff4 <BSP_TS_Init+0x12c>)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2068      	movs	r0, #104	; 0x68
 8006f2e:	fb00 f303 	mul.w	r3, r0, r3
 8006f32:	440b      	add	r3, r1
 8006f34:	3308      	adds	r3, #8
 8006f36:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	68da      	ldr	r2, [r3, #12]
 8006f3c:	492d      	ldr	r1, [pc, #180]	; (8006ff4 <BSP_TS_Init+0x12c>)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2068      	movs	r0, #104	; 0x68
 8006f42:	fb00 f303 	mul.w	r3, r0, r3
 8006f46:	440b      	add	r3, r1
 8006f48:	330c      	adds	r3, #12
 8006f4a:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv[Instance]->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006f4c:	4a2a      	ldr	r2, [pc, #168]	; (8006ff8 <BSP_TS_Init+0x130>)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	4929      	ldr	r1, [pc, #164]	; (8006ffc <BSP_TS_Init+0x134>)
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006f5e:	f107 010c 	add.w	r1, r7, #12
 8006f62:	4610      	mov	r0, r2
 8006f64:	4798      	blx	r3
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	da03      	bge.n	8006f74 <BSP_TS_Init+0xac>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8006f6c:	f06f 0304 	mvn.w	r3, #4
 8006f70:	61fb      	str	r3, [r7, #28]
 8006f72:	e03a      	b.n	8006fea <BSP_TS_Init+0x122>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	491f      	ldr	r1, [pc, #124]	; (8006ff4 <BSP_TS_Init+0x12c>)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2068      	movs	r0, #104	; 0x68
 8006f7c:	fb00 f303 	mul.w	r3, r0, r3
 8006f80:	440b      	add	r3, r1
 8006f82:	3310      	adds	r3, #16
 8006f84:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	491a      	ldr	r1, [pc, #104]	; (8006ff4 <BSP_TS_Init+0x12c>)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2068      	movs	r0, #104	; 0x68
 8006f8e:	fb00 f303 	mul.w	r3, r0, r3
 8006f92:	440b      	add	r3, r1
 8006f94:	3314      	adds	r3, #20
 8006f96:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for (i = 0; i < TS_TOUCH_NBR; i++)
 8006f98:	2300      	movs	r3, #0
 8006f9a:	61bb      	str	r3, [r7, #24]
 8006f9c:	e022      	b.n	8006fe4 <BSP_TS_Init+0x11c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	4812      	ldr	r0, [pc, #72]	; (8006ff4 <BSP_TS_Init+0x12c>)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	211a      	movs	r1, #26
 8006fb0:	fb03 f101 	mul.w	r1, r3, r1
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	440b      	add	r3, r1
 8006fb8:	3306      	adds	r3, #6
 8006fba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	1c5a      	adds	r2, r3, #1
 8006fca:	480a      	ldr	r0, [pc, #40]	; (8006ff4 <BSP_TS_Init+0x12c>)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	211a      	movs	r1, #26
 8006fd0:	fb03 f101 	mul.w	r1, r3, r1
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	440b      	add	r3, r1
 8006fd8:	3310      	adds	r3, #16
 8006fda:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for (i = 0; i < TS_TOUCH_NBR; i++)
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	61bb      	str	r3, [r7, #24]
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	2b09      	cmp	r3, #9
 8006fe8:	d9d9      	bls.n	8006f9e <BSP_TS_Init+0xd6>
        }
      }
    }
  }

  return status;
 8006fea:	69fb      	ldr	r3, [r7, #28]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3720      	adds	r7, #32
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	20197a70 	.word	0x20197a70
 8006ff8:	20197a6c 	.word	0x20197a6c
 8006ffc:	20197a68 	.word	0x20197a68

08007000 <BSP_TS_GetState>:
  * @param  Instance TS Instance.
  * @param  TS_State Pointer to single touch structure.
  * @retval BSP status.
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08a      	sub	sp, #40	; 0x28
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 800700a:	2300      	movs	r3, #0
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented;
  uint32_t y_oriented;
  uint32_t x_diff;
  uint32_t y_diff;

  if (Instance >= TS_INSTANCES_NBR)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <BSP_TS_GetState+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8007014:	f06f 0301 	mvn.w	r3, #1
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
 800701a:	e0ea      	b.n	80071f2 <BSP_TS_GetState+0x1f2>
  else
  {
    SITRONIX_State_t state;

    /* Get each touch coordinates */
    if (Ts_Drv[Instance]->GetState(Ts_CompObj[Instance], &state) < 0)
 800701c:	4a77      	ldr	r2, [pc, #476]	; (80071fc <BSP_TS_GetState+0x1fc>)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	4976      	ldr	r1, [pc, #472]	; (8007200 <BSP_TS_GetState+0x200>)
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800702e:	f107 0108 	add.w	r1, r7, #8
 8007032:	4610      	mov	r0, r2
 8007034:	4798      	blx	r3
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	da03      	bge.n	8007044 <BSP_TS_GetState+0x44>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800703c:	f06f 0304 	mvn.w	r3, #4
 8007040:	627b      	str	r3, [r7, #36]	; 0x24
 8007042:	e0d6      	b.n	80071f2 <BSP_TS_GetState+0x1f2>
    }/* Check and update the number of touches active detected */
    else if (state.TouchDetected != 0U)
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 80bc 	beq.w	80071c4 <BSP_TS_GetState+0x1c4>
    {
      x_oriented = /*Ts_Ctx[Instance].MaxX -*/ state.TouchX;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	623b      	str	r3, [r7, #32]
      y_oriented = /*Ts_Ctx[Instance].MaxY -*/ state.TouchY;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	61fb      	str	r3, [r7, #28]

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / (Ts_Ctx[Instance].MaxX);
 8007054:	4a6b      	ldr	r2, [pc, #428]	; (8007204 <BSP_TS_GetState+0x204>)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2168      	movs	r1, #104	; 0x68
 800705a:	fb01 f303 	mul.w	r3, r1, r3
 800705e:	4413      	add	r3, r2
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6a3a      	ldr	r2, [r7, #32]
 8007064:	fb03 f202 	mul.w	r2, r3, r2
 8007068:	4966      	ldr	r1, [pc, #408]	; (8007204 <BSP_TS_GetState+0x204>)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2068      	movs	r0, #104	; 0x68
 800706e:	fb00 f303 	mul.w	r3, r0, r3
 8007072:	440b      	add	r3, r1
 8007074:	3310      	adds	r3, #16
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	fbb2 f2f3 	udiv	r2, r2, r3
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / (Ts_Ctx[Instance].MaxY);
 8007080:	4a60      	ldr	r2, [pc, #384]	; (8007204 <BSP_TS_GetState+0x204>)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2168      	movs	r1, #104	; 0x68
 8007086:	fb01 f303 	mul.w	r3, r1, r3
 800708a:	4413      	add	r3, r2
 800708c:	3304      	adds	r3, #4
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	69fa      	ldr	r2, [r7, #28]
 8007092:	fb03 f202 	mul.w	r2, r3, r2
 8007096:	495b      	ldr	r1, [pc, #364]	; (8007204 <BSP_TS_GetState+0x204>)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2068      	movs	r0, #104	; 0x68
 800709c:	fb00 f303 	mul.w	r3, r0, r3
 80070a0:	440b      	add	r3, r1
 80070a2:	3314      	adds	r3, #20
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0]) ?
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	4952      	ldr	r1, [pc, #328]	; (8007204 <BSP_TS_GetState+0x204>)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2068      	movs	r0, #104	; 0x68
 80070be:	fb00 f303 	mul.w	r3, r0, r3
 80070c2:	440b      	add	r3, r1
 80070c4:	3318      	adds	r3, #24
 80070c6:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]) :
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d90b      	bls.n	80070e4 <BSP_TS_GetState+0xe4>
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	494c      	ldr	r1, [pc, #304]	; (8007204 <BSP_TS_GetState+0x204>)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2068      	movs	r0, #104	; 0x68
 80070d6:	fb00 f303 	mul.w	r3, r0, r3
 80070da:	440b      	add	r3, r1
 80070dc:	3318      	adds	r3, #24
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	e00a      	b.n	80070fa <BSP_TS_GetState+0xfa>
               (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 80070e4:	4a47      	ldr	r2, [pc, #284]	; (8007204 <BSP_TS_GetState+0x204>)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2168      	movs	r1, #104	; 0x68
 80070ea:	fb01 f303 	mul.w	r3, r1, r3
 80070ee:	4413      	add	r3, r2
 80070f0:	3318      	adds	r3, #24
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]) :
 80070f8:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0]) ?
 80070fa:	61bb      	str	r3, [r7, #24]

      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0]) ?
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	4940      	ldr	r1, [pc, #256]	; (8007204 <BSP_TS_GetState+0x204>)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2068      	movs	r0, #104	; 0x68
 8007106:	fb00 f303 	mul.w	r3, r0, r3
 800710a:	440b      	add	r3, r1
 800710c:	3340      	adds	r3, #64	; 0x40
 800710e:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]) :
 8007110:	429a      	cmp	r2, r3
 8007112:	d90b      	bls.n	800712c <BSP_TS_GetState+0x12c>
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	493a      	ldr	r1, [pc, #232]	; (8007204 <BSP_TS_GetState+0x204>)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2068      	movs	r0, #104	; 0x68
 800711e:	fb00 f303 	mul.w	r3, r0, r3
 8007122:	440b      	add	r3, r1
 8007124:	3340      	adds	r3, #64	; 0x40
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	e00a      	b.n	8007142 <BSP_TS_GetState+0x142>
               (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800712c:	4a35      	ldr	r2, [pc, #212]	; (8007204 <BSP_TS_GetState+0x204>)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2168      	movs	r1, #104	; 0x68
 8007132:	fb01 f303 	mul.w	r3, r1, r3
 8007136:	4413      	add	r3, r2
 8007138:	3340      	adds	r3, #64	; 0x40
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]) :
 8007140:	1ad3      	subs	r3, r2, r3
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0]) ?
 8007142:	617b      	str	r3, [r7, #20]

      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8007144:	4a2f      	ldr	r2, [pc, #188]	; (8007204 <BSP_TS_GetState+0x204>)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2168      	movs	r1, #104	; 0x68
 800714a:	fb01 f303 	mul.w	r3, r1, r3
 800714e:	4413      	add	r3, r2
 8007150:	330c      	adds	r3, #12
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	429a      	cmp	r2, r3
 8007158:	d80a      	bhi.n	8007170 <BSP_TS_GetState+0x170>
 800715a:	4a2a      	ldr	r2, [pc, #168]	; (8007204 <BSP_TS_GetState+0x204>)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2168      	movs	r1, #104	; 0x68
 8007160:	fb01 f303 	mul.w	r3, r1, r3
 8007164:	4413      	add	r3, r2
 8007166:	330c      	adds	r3, #12
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	429a      	cmp	r2, r3
 800716e:	d914      	bls.n	800719a <BSP_TS_GetState+0x19a>
      {
        /* New touch detected */
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	4923      	ldr	r1, [pc, #140]	; (8007204 <BSP_TS_GetState+0x204>)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2068      	movs	r0, #104	; 0x68
 800717a:	fb00 f303 	mul.w	r3, r0, r3
 800717e:	440b      	add	r3, r1
 8007180:	3318      	adds	r3, #24
 8007182:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	491e      	ldr	r1, [pc, #120]	; (8007204 <BSP_TS_GetState+0x204>)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2068      	movs	r0, #104	; 0x68
 800718e:	fb00 f303 	mul.w	r3, r0, r3
 8007192:	440b      	add	r3, r1
 8007194:	3340      	adds	r3, #64	; 0x40
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	e02b      	b.n	80071f2 <BSP_TS_GetState+0x1f2>
      }
      else
      {
        TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800719a:	4a1a      	ldr	r2, [pc, #104]	; (8007204 <BSP_TS_GetState+0x204>)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2168      	movs	r1, #104	; 0x68
 80071a0:	fb01 f303 	mul.w	r3, r1, r3
 80071a4:	4413      	add	r3, r2
 80071a6:	3318      	adds	r3, #24
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	605a      	str	r2, [r3, #4]
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80071ae:	4a15      	ldr	r2, [pc, #84]	; (8007204 <BSP_TS_GetState+0x204>)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2168      	movs	r1, #104	; 0x68
 80071b4:	fb01 f303 	mul.w	r3, r1, r3
 80071b8:	4413      	add	r3, r2
 80071ba:	3340      	adds	r3, #64	; 0x40
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	609a      	str	r2, [r3, #8]
 80071c2:	e016      	b.n	80071f2 <BSP_TS_GetState+0x1f2>
      }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2200      	movs	r2, #0
 80071c8:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80071ca:	4a0e      	ldr	r2, [pc, #56]	; (8007204 <BSP_TS_GetState+0x204>)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2168      	movs	r1, #104	; 0x68
 80071d0:	fb01 f303 	mul.w	r3, r1, r3
 80071d4:	4413      	add	r3, r2
 80071d6:	3318      	adds	r3, #24
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80071de:	4a09      	ldr	r2, [pc, #36]	; (8007204 <BSP_TS_GetState+0x204>)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2168      	movs	r1, #104	; 0x68
 80071e4:	fb01 f303 	mul.w	r3, r1, r3
 80071e8:	4413      	add	r3, r2
 80071ea:	3340      	adds	r3, #64	; 0x40
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	609a      	str	r2, [r3, #8]
    }
  }

  return status;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3728      	adds	r7, #40	; 0x28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	20197a6c 	.word	0x20197a6c
 8007200:	20197a68 	.word	0x20197a68
 8007204:	20197a70 	.word	0x20197a70

08007208 <SITRONIX_Probe>:
  * @brief  Probe the SITRONIX TS driver.
  * @param  Instance TS Instance.
  * @retval BSP status.
  */
static int32_t SITRONIX_Probe(uint32_t Instance)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08a      	sub	sp, #40	; 0x28
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  int32_t                  status;
  SITRONIX_IO_t              IOCtx;
  static SITRONIX_Object_t SITRONIXObj;

  /* Configure the TS driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8007210:	23e0      	movs	r3, #224	; 0xe0
 8007212:	823b      	strh	r3, [r7, #16]
  IOCtx.Init        = BSP_I2C5_Init;
 8007214:	4b1d      	ldr	r3, [pc, #116]	; (800728c <SITRONIX_Probe+0x84>)
 8007216:	60bb      	str	r3, [r7, #8]
  IOCtx.DeInit      = BSP_I2C5_DeInit;
 8007218:	4b1d      	ldr	r3, [pc, #116]	; (8007290 <SITRONIX_Probe+0x88>)
 800721a:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg     = BSP_I2C5_ReadReg;
 800721c:	4b1d      	ldr	r3, [pc, #116]	; (8007294 <SITRONIX_Probe+0x8c>)
 800721e:	61bb      	str	r3, [r7, #24]
  IOCtx.WriteReg    = BSP_I2C5_WriteReg;
 8007220:	4b1d      	ldr	r3, [pc, #116]	; (8007298 <SITRONIX_Probe+0x90>)
 8007222:	617b      	str	r3, [r7, #20]
  IOCtx.ReadData    = BSP_I2C5_Recv;
 8007224:	4b1d      	ldr	r3, [pc, #116]	; (800729c <SITRONIX_Probe+0x94>)
 8007226:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8007228:	4b1d      	ldr	r3, [pc, #116]	; (80072a0 <SITRONIX_Probe+0x98>)
 800722a:	623b      	str	r3, [r7, #32]

  if (SITRONIX_RegisterBusIO(&SITRONIXObj, &IOCtx) != SITRONIX_OK)
 800722c:	f107 0308 	add.w	r3, r7, #8
 8007230:	4619      	mov	r1, r3
 8007232:	481c      	ldr	r0, [pc, #112]	; (80072a4 <SITRONIX_Probe+0x9c>)
 8007234:	f7fd f962 	bl	80044fc <SITRONIX_RegisterBusIO>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <SITRONIX_Probe+0x3e>
  {
    status = BSP_ERROR_BUS_FAILURE;
 800723e:	f06f 0307 	mvn.w	r3, #7
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
 8007244:	e01d      	b.n	8007282 <SITRONIX_Probe+0x7a>
  }
  else
  {
    Ts_CompObj[Instance] = &SITRONIXObj;
 8007246:	4a18      	ldr	r2, [pc, #96]	; (80072a8 <SITRONIX_Probe+0xa0>)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4916      	ldr	r1, [pc, #88]	; (80072a4 <SITRONIX_Probe+0x9c>)
 800724c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv[Instance]     = (TS_Drv_t *) &SITRONIX_TS_Driver;
 8007250:	4a16      	ldr	r2, [pc, #88]	; (80072ac <SITRONIX_Probe+0xa4>)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4916      	ldr	r1, [pc, #88]	; (80072b0 <SITRONIX_Probe+0xa8>)
 8007256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (Ts_Drv[Instance]->Init(Ts_CompObj[Instance]) < 0)
 800725a:	4a14      	ldr	r2, [pc, #80]	; (80072ac <SITRONIX_Probe+0xa4>)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4910      	ldr	r1, [pc, #64]	; (80072a8 <SITRONIX_Probe+0xa0>)
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800726c:	4610      	mov	r0, r2
 800726e:	4798      	blx	r3
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	da03      	bge.n	800727e <SITRONIX_Probe+0x76>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8007276:	f06f 0304 	mvn.w	r3, #4
 800727a:	627b      	str	r3, [r7, #36]	; 0x24
 800727c:	e001      	b.n	8007282 <SITRONIX_Probe+0x7a>
    }
    else
    {
      status = BSP_ERROR_NONE;
 800727e:	2300      	movs	r3, #0
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return status;
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007284:	4618      	mov	r0, r3
 8007286:	3728      	adds	r7, #40	; 0x28
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	0800491d 	.word	0x0800491d
 8007290:	08004991 	.word	0x08004991
 8007294:	08004ab9 	.word	0x08004ab9
 8007298:	08004a5d 	.word	0x08004a5d
 800729c:	08004b15 	.word	0x08004b15
 80072a0:	08004b65 	.word	0x08004b65
 80072a4:	20197ad8 	.word	0x20197ad8
 80072a8:	20197a68 	.word	0x20197a68
 80072ac:	20197a6c 	.word	0x20197a6c
 80072b0:	20000010 	.word	0x20000010

080072b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80072b4:	b480      	push	{r7}
 80072b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80072b8:	4b18      	ldr	r3, [pc, #96]	; (800731c <SystemInit+0x68>)
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072be:	4a17      	ldr	r2, [pc, #92]	; (800731c <SystemInit+0x68>)
 80072c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80072c8:	4b15      	ldr	r3, [pc, #84]	; (8007320 <SystemInit+0x6c>)
 80072ca:	2201      	movs	r2, #1
 80072cc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80072ce:	4b14      	ldr	r3, [pc, #80]	; (8007320 <SystemInit+0x6c>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80072d4:	4b12      	ldr	r3, [pc, #72]	; (8007320 <SystemInit+0x6c>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80072da:	4b11      	ldr	r3, [pc, #68]	; (8007320 <SystemInit+0x6c>)
 80072dc:	2200      	movs	r2, #0
 80072de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80072e0:	4b0f      	ldr	r3, [pc, #60]	; (8007320 <SystemInit+0x6c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a0e      	ldr	r2, [pc, #56]	; (8007320 <SystemInit+0x6c>)
 80072e6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80072ea:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80072ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80072f0:	4b0b      	ldr	r3, [pc, #44]	; (8007320 <SystemInit+0x6c>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80072f6:	4b0a      	ldr	r3, [pc, #40]	; (8007320 <SystemInit+0x6c>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a09      	ldr	r2, [pc, #36]	; (8007320 <SystemInit+0x6c>)
 80072fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007300:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8007302:	4b07      	ldr	r3, [pc, #28]	; (8007320 <SystemInit+0x6c>)
 8007304:	2200      	movs	r2, #0
 8007306:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007308:	4b04      	ldr	r3, [pc, #16]	; (800731c <SystemInit+0x68>)
 800730a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800730e:	609a      	str	r2, [r3, #8]
  #endif
}
 8007310:	bf00      	nop
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	e000ed00 	.word	0xe000ed00
 8007320:	46020c00 	.word	0x46020c00

08007324 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007328:	4b11      	ldr	r3, [pc, #68]	; (8007370 <HAL_Init+0x4c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a10      	ldr	r2, [pc, #64]	; (8007370 <HAL_Init+0x4c>)
 800732e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007332:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007334:	2003      	movs	r0, #3
 8007336:	f000 f914 	bl	8007562 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800733a:	f005 fc7f 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800733e:	4602      	mov	r2, r0
 8007340:	4b0c      	ldr	r3, [pc, #48]	; (8007374 <HAL_Init+0x50>)
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	f003 030f 	and.w	r3, r3, #15
 8007348:	490b      	ldr	r1, [pc, #44]	; (8007378 <HAL_Init+0x54>)
 800734a:	5ccb      	ldrb	r3, [r1, r3]
 800734c:	fa22 f303 	lsr.w	r3, r2, r3
 8007350:	4a0a      	ldr	r2, [pc, #40]	; (800737c <HAL_Init+0x58>)
 8007352:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007354:	2000      	movs	r0, #0
 8007356:	f7fa fa7d 	bl	8001854 <HAL_InitTick>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e002      	b.n	800736a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007364:	f7fa f8b2 	bl	80014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	40022000 	.word	0x40022000
 8007374:	46020c00 	.word	0x46020c00
 8007378:	0802a810 	.word	0x0802a810
 800737c:	20000048 	.word	0x20000048

08007380 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007380:	b480      	push	{r7}
 8007382:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007384:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <HAL_IncTick+0x20>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	461a      	mov	r2, r3
 800738a:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <HAL_IncTick+0x24>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4413      	add	r3, r2
 8007390:	4a04      	ldr	r2, [pc, #16]	; (80073a4 <HAL_IncTick+0x24>)
 8007392:	6013      	str	r3, [r2, #0]
}
 8007394:	bf00      	nop
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	20000050 	.word	0x20000050
 80073a4:	20197b08 	.word	0x20197b08

080073a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
  return uwTick;
 80073ac:	4b03      	ldr	r3, [pc, #12]	; (80073bc <HAL_GetTick+0x14>)
 80073ae:	681b      	ldr	r3, [r3, #0]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	20197b08 	.word	0x20197b08

080073c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80073c8:	f7ff ffee 	bl	80073a8 <HAL_GetTick>
 80073cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d8:	d005      	beq.n	80073e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80073da:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <HAL_Delay+0x44>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80073e6:	bf00      	nop
 80073e8:	f7ff ffde 	bl	80073a8 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d8f7      	bhi.n	80073e8 <HAL_Delay+0x28>
  {
  }
}
 80073f8:	bf00      	nop
 80073fa:	bf00      	nop
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20000050 	.word	0x20000050

08007408 <__NVIC_SetPriorityGrouping>:
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f003 0307 	and.w	r3, r3, #7
 8007416:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007418:	4b0c      	ldr	r3, [pc, #48]	; (800744c <__NVIC_SetPriorityGrouping+0x44>)
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007424:	4013      	ands	r3, r2
 8007426:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800743a:	4a04      	ldr	r2, [pc, #16]	; (800744c <__NVIC_SetPriorityGrouping+0x44>)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	60d3      	str	r3, [r2, #12]
}
 8007440:	bf00      	nop
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	e000ed00 	.word	0xe000ed00

08007450 <__NVIC_GetPriorityGrouping>:
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007454:	4b04      	ldr	r3, [pc, #16]	; (8007468 <__NVIC_GetPriorityGrouping+0x18>)
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	0a1b      	lsrs	r3, r3, #8
 800745a:	f003 0307 	and.w	r3, r3, #7
}
 800745e:	4618      	mov	r0, r3
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	e000ed00 	.word	0xe000ed00

0800746c <__NVIC_EnableIRQ>:
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	4603      	mov	r3, r0
 8007474:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800747a:	2b00      	cmp	r3, #0
 800747c:	db0b      	blt.n	8007496 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800747e:	88fb      	ldrh	r3, [r7, #6]
 8007480:	f003 021f 	and.w	r2, r3, #31
 8007484:	4907      	ldr	r1, [pc, #28]	; (80074a4 <__NVIC_EnableIRQ+0x38>)
 8007486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800748a:	095b      	lsrs	r3, r3, #5
 800748c:	2001      	movs	r0, #1
 800748e:	fa00 f202 	lsl.w	r2, r0, r2
 8007492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	e000e100 	.word	0xe000e100

080074a8 <__NVIC_SetPriority>:
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	6039      	str	r1, [r7, #0]
 80074b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80074b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	db0a      	blt.n	80074d2 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	490c      	ldr	r1, [pc, #48]	; (80074f4 <__NVIC_SetPriority+0x4c>)
 80074c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074c6:	0112      	lsls	r2, r2, #4
 80074c8:	b2d2      	uxtb	r2, r2
 80074ca:	440b      	add	r3, r1
 80074cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80074d0:	e00a      	b.n	80074e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	4908      	ldr	r1, [pc, #32]	; (80074f8 <__NVIC_SetPriority+0x50>)
 80074d8:	88fb      	ldrh	r3, [r7, #6]
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	3b04      	subs	r3, #4
 80074e0:	0112      	lsls	r2, r2, #4
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	440b      	add	r3, r1
 80074e6:	761a      	strb	r2, [r3, #24]
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	e000e100 	.word	0xe000e100
 80074f8:	e000ed00 	.word	0xe000ed00

080074fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b089      	sub	sp, #36	; 0x24
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	f1c3 0307 	rsb	r3, r3, #7
 8007516:	2b04      	cmp	r3, #4
 8007518:	bf28      	it	cs
 800751a:	2304      	movcs	r3, #4
 800751c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	3304      	adds	r3, #4
 8007522:	2b06      	cmp	r3, #6
 8007524:	d902      	bls.n	800752c <NVIC_EncodePriority+0x30>
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	3b03      	subs	r3, #3
 800752a:	e000      	b.n	800752e <NVIC_EncodePriority+0x32>
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007530:	f04f 32ff 	mov.w	r2, #4294967295
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	fa02 f303 	lsl.w	r3, r2, r3
 800753a:	43da      	mvns	r2, r3
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	401a      	ands	r2, r3
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007544:	f04f 31ff 	mov.w	r1, #4294967295
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	fa01 f303 	lsl.w	r3, r1, r3
 800754e:	43d9      	mvns	r1, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007554:	4313      	orrs	r3, r2
         );
}
 8007556:	4618      	mov	r0, r3
 8007558:	3724      	adds	r7, #36	; 0x24
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7ff ff4c 	bl	8007408 <__NVIC_SetPriorityGrouping>
}
 8007570:	bf00      	nop
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	4603      	mov	r3, r0
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
 8007584:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007586:	f7ff ff63 	bl	8007450 <__NVIC_GetPriorityGrouping>
 800758a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	68b9      	ldr	r1, [r7, #8]
 8007590:	6978      	ldr	r0, [r7, #20]
 8007592:	f7ff ffb3 	bl	80074fc <NVIC_EncodePriority>
 8007596:	4602      	mov	r2, r0
 8007598:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800759c:	4611      	mov	r1, r2
 800759e:	4618      	mov	r0, r3
 80075a0:	f7ff ff82 	bl	80074a8 <__NVIC_SetPriority>
}
 80075a4:	bf00      	nop
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	4603      	mov	r3, r0
 80075b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80075b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff ff56 	bl	800746c <__NVIC_EnableIRQ>
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e054      	b.n	8007684 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	7f5b      	ldrb	r3, [r3, #29]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d105      	bne.n	80075f0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7f9 ff88 	bl	8001500 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	791b      	ldrb	r3, [r3, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10c      	bne.n	8007618 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a22      	ldr	r2, [pc, #136]	; (800768c <HAL_CRC_Init+0xc4>)
 8007604:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0218 	bic.w	r2, r2, #24
 8007614:	609a      	str	r2, [r3, #8]
 8007616:	e00c      	b.n	8007632 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6899      	ldr	r1, [r3, #8]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	461a      	mov	r2, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f834 	bl	8007690 <HAL_CRCEx_Polynomial_Set>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e028      	b.n	8007684 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	795b      	ldrb	r3, [r3, #5]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d105      	bne.n	8007646 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f04f 32ff 	mov.w	r2, #4294967295
 8007642:	611a      	str	r2, [r3, #16]
 8007644:	e004      	b.n	8007650 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	6912      	ldr	r2, [r2, #16]
 800764e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	695a      	ldr	r2, [r3, #20]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	430a      	orrs	r2, r1
 8007664:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	699a      	ldr	r2, [r3, #24]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	04c11db7 	.word	0x04c11db7

08007690 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007690:	b480      	push	{r7}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80076a0:	231f      	movs	r3, #31
 80076a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d102      	bne.n	80076b4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	75fb      	strb	r3, [r7, #23]
 80076b2:	e063      	b.n	800777c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80076b4:	bf00      	nop
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	1e5a      	subs	r2, r3, #1
 80076ba:	613a      	str	r2, [r7, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d009      	beq.n	80076d4 <HAL_CRCEx_Polynomial_Set+0x44>
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f003 031f 	and.w	r3, r3, #31
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	fa22 f303 	lsr.w	r3, r2, r3
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0f0      	beq.n	80076b6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b18      	cmp	r3, #24
 80076d8:	d846      	bhi.n	8007768 <HAL_CRCEx_Polynomial_Set+0xd8>
 80076da:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	0800776f 	.word	0x0800776f
 80076e4:	08007769 	.word	0x08007769
 80076e8:	08007769 	.word	0x08007769
 80076ec:	08007769 	.word	0x08007769
 80076f0:	08007769 	.word	0x08007769
 80076f4:	08007769 	.word	0x08007769
 80076f8:	08007769 	.word	0x08007769
 80076fc:	08007769 	.word	0x08007769
 8007700:	0800775d 	.word	0x0800775d
 8007704:	08007769 	.word	0x08007769
 8007708:	08007769 	.word	0x08007769
 800770c:	08007769 	.word	0x08007769
 8007710:	08007769 	.word	0x08007769
 8007714:	08007769 	.word	0x08007769
 8007718:	08007769 	.word	0x08007769
 800771c:	08007769 	.word	0x08007769
 8007720:	08007751 	.word	0x08007751
 8007724:	08007769 	.word	0x08007769
 8007728:	08007769 	.word	0x08007769
 800772c:	08007769 	.word	0x08007769
 8007730:	08007769 	.word	0x08007769
 8007734:	08007769 	.word	0x08007769
 8007738:	08007769 	.word	0x08007769
 800773c:	08007769 	.word	0x08007769
 8007740:	08007745 	.word	0x08007745
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	2b06      	cmp	r3, #6
 8007748:	d913      	bls.n	8007772 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800774e:	e010      	b.n	8007772 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	2b07      	cmp	r3, #7
 8007754:	d90f      	bls.n	8007776 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800775a:	e00c      	b.n	8007776 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	2b0f      	cmp	r3, #15
 8007760:	d90b      	bls.n	800777a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007766:	e008      	b.n	800777a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	75fb      	strb	r3, [r7, #23]
        break;
 800776c:	e006      	b.n	800777c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800776e:	bf00      	nop
 8007770:	e004      	b.n	800777c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007772:	bf00      	nop
 8007774:	e002      	b.n	800777c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007776:	bf00      	nop
 8007778:	e000      	b.n	800777c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800777a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800777c:	7dfb      	ldrb	r3, [r7, #23]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10d      	bne.n	800779e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f023 0118 	bic.w	r1, r3, #24
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	430a      	orrs	r2, r1
 800779c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800779e:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	371c      	adds	r7, #28
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e037      	b.n	800782e <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d119      	bne.n	80077fe <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a1a      	ldr	r2, [pc, #104]	; (8007838 <HAL_DCACHE_Init+0x8c>)
 80077ce:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a1a      	ldr	r2, [pc, #104]	; (800783c <HAL_DCACHE_Init+0x90>)
 80077d4:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a19      	ldr	r2, [pc, #100]	; (8007840 <HAL_DCACHE_Init+0x94>)
 80077da:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a19      	ldr	r2, [pc, #100]	; (8007844 <HAL_DCACHE_Init+0x98>)
 80077e0:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a18      	ldr	r2, [pc, #96]	; (8007848 <HAL_DCACHE_Init+0x9c>)
 80077e6:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	69db      	ldr	r3, [r3, #28]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d102      	bne.n	80077f6 <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a16      	ldr	r2, [pc, #88]	; (800784c <HAL_DCACHE_Init+0xa0>)
 80077f4:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	69db      	ldr	r3, [r3, #28]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f814 	bl	8007850 <HAL_DCACHE_Enable>
 8007828:	4603      	mov	r3, r0
 800782a:	73fb      	strb	r3, [r7, #15]

  return status;
 800782c:	7bfb      	ldrb	r3, [r7, #15]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	0800799f 	.word	0x0800799f
 800783c:	0800794f 	.word	0x0800794f
 8007840:	08007963 	.word	0x08007963
 8007844:	0800798b 	.word	0x0800798b
 8007848:	08007977 	.word	0x08007977
 800784c:	08001545 	.word	0x08001545

08007850 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007858:	2300      	movs	r3, #0
 800785a:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e015      	b.n	8007892 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f003 0309 	and.w	r3, r3, #9
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8007874:	2302      	movs	r3, #2
 8007876:	73fb      	strb	r3, [r7, #15]
 8007878:	e00a      	b.n	8007890 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f042 0201 	orr.w	r2, r2, #1
 800788e:	601a      	str	r2, [r3, #0]
  }

  return status;
 8007890:	7bfb      	ldrb	r3, [r7, #15]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <HAL_DCACHE_Invalidate>:
  *                 the configuration information for the specified DCACHEx peripheral.
  * @note   This function waits for end of full cache invalidation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Invalidate(DCACHE_HandleTypeDef *hdcache)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b084      	sub	sp, #16
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <HAL_DCACHE_Invalidate+0x16>
  {
    return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e048      	b.n	8007946 <HAL_DCACHE_Invalidate+0xa8>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f003 0309 	and.w	r3, r3, #9
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d002      	beq.n	80078c8 <HAL_DCACHE_Invalidate+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 80078c2:	2302      	movs	r3, #2
 80078c4:	73fb      	strb	r3, [r7, #15]
 80078c6:	e03d      	b.n	8007944 <HAL_DCACHE_Invalidate+0xa6>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Change DCACHE Handle state */
    hdcache->State = HAL_DCACHE_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Make sure flags are reset */
    WRITE_REG(hdcache->Instance->FCR, (DCACHE_FCR_CBSYENDF | DCACHE_FCR_CCMDENDF));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2212      	movs	r2, #18
 80078dc:	60da      	str	r2, [r3, #12]

    /* Set no operation on address range */
    MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_CACHECMD, 0U);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078ec:	601a      	str	r2, [r3, #0]

    /* Launch cache invalidation */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_CACHEINV);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f042 0202 	orr.w	r2, r2, #2
 80078fc:	601a      	str	r2, [r3, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();
 80078fe:	f7ff fd53 	bl	80073a8 <HAL_GetTick>
 8007902:	60b8      	str	r0, [r7, #8]

    /* Wait for end of cache invalidation */
    while (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 8007904:	e017      	b.n	8007936 <HAL_DCACHE_Invalidate+0x98>
    {
      if ((HAL_GetTick() - tickstart) > DCACHE_COMMAND_TIMEOUT_VALUE)
 8007906:	f7ff fd4f 	bl	80073a8 <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	2bc8      	cmp	r3, #200	; 0xc8
 8007912:	d910      	bls.n	8007936 <HAL_DCACHE_Invalidate+0x98>
      {
        if (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d009      	beq.n	8007936 <HAL_DCACHE_Invalidate+0x98>
        {
          /* Update error code */
          hdcache->ErrorCode = HAL_DCACHE_ERROR_TIMEOUT;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2210      	movs	r2, #16
 8007926:	629a      	str	r2, [r3, #40]	; 0x28

          /* Change the DCACHE state */
          hdcache->State = HAL_DCACHE_STATE_ERROR;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2206      	movs	r2, #6
 800792c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          /* Return error status */
          status =  HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	73fb      	strb	r3, [r7, #15]
          break;
 8007934:	e006      	b.n	8007944 <HAL_DCACHE_Invalidate+0xa6>
    while (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e0      	bne.n	8007906 <HAL_DCACHE_Invalidate+0x68>
        }
      }
    }
  }

  return status;
 8007944:	7bfb      	ldrb	r3, [r7, #15]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007962:	b480      	push	{r7}
 8007964:	b083      	sub	sp, #12
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 800796a:	bf00      	nop
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007976:	b480      	push	{r7}
 8007978:	b083      	sub	sp, #12
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 800797e:	bf00      	nop
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 800798a:	b480      	push	{r7}
 800798c:	b083      	sub	sp, #12
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8007992:	bf00      	nop
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
	...

080079b4 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80079bc:	f7ff fcf4 	bl	80073a8 <HAL_GetTick>
 80079c0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e0e0      	b.n	8007b8e <HAL_DMA_Init+0x1da>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a6f      	ldr	r2, [pc, #444]	; (8007b98 <HAL_DMA_Init+0x1e4>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	f000 809f 	beq.w	8007b1e <HAL_DMA_Init+0x16a>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a6d      	ldr	r2, [pc, #436]	; (8007b9c <HAL_DMA_Init+0x1e8>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	f000 8099 	beq.w	8007b1e <HAL_DMA_Init+0x16a>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a6b      	ldr	r2, [pc, #428]	; (8007ba0 <HAL_DMA_Init+0x1ec>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	f000 8093 	beq.w	8007b1e <HAL_DMA_Init+0x16a>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a69      	ldr	r2, [pc, #420]	; (8007ba4 <HAL_DMA_Init+0x1f0>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	f000 808d 	beq.w	8007b1e <HAL_DMA_Init+0x16a>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a67      	ldr	r2, [pc, #412]	; (8007ba8 <HAL_DMA_Init+0x1f4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	f000 8087 	beq.w	8007b1e <HAL_DMA_Init+0x16a>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a65      	ldr	r2, [pc, #404]	; (8007bac <HAL_DMA_Init+0x1f8>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	f000 8081 	beq.w	8007b1e <HAL_DMA_Init+0x16a>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a63      	ldr	r2, [pc, #396]	; (8007bb0 <HAL_DMA_Init+0x1fc>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d07b      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a62      	ldr	r2, [pc, #392]	; (8007bb4 <HAL_DMA_Init+0x200>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d076      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a60      	ldr	r2, [pc, #384]	; (8007bb8 <HAL_DMA_Init+0x204>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d071      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a5f      	ldr	r2, [pc, #380]	; (8007bbc <HAL_DMA_Init+0x208>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d06c      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a5d      	ldr	r2, [pc, #372]	; (8007bc0 <HAL_DMA_Init+0x20c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d067      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a5c      	ldr	r2, [pc, #368]	; (8007bc4 <HAL_DMA_Init+0x210>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d062      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a5a      	ldr	r2, [pc, #360]	; (8007bc8 <HAL_DMA_Init+0x214>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d05d      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a59      	ldr	r2, [pc, #356]	; (8007bcc <HAL_DMA_Init+0x218>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d058      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a57      	ldr	r2, [pc, #348]	; (8007bd0 <HAL_DMA_Init+0x21c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d053      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a56      	ldr	r2, [pc, #344]	; (8007bd4 <HAL_DMA_Init+0x220>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d04e      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a54      	ldr	r2, [pc, #336]	; (8007bd8 <HAL_DMA_Init+0x224>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d049      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a53      	ldr	r2, [pc, #332]	; (8007bdc <HAL_DMA_Init+0x228>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d044      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a51      	ldr	r2, [pc, #324]	; (8007be0 <HAL_DMA_Init+0x22c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d03f      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a50      	ldr	r2, [pc, #320]	; (8007be4 <HAL_DMA_Init+0x230>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d03a      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a4e      	ldr	r2, [pc, #312]	; (8007be8 <HAL_DMA_Init+0x234>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d035      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a4d      	ldr	r2, [pc, #308]	; (8007bec <HAL_DMA_Init+0x238>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d030      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a4b      	ldr	r2, [pc, #300]	; (8007bf0 <HAL_DMA_Init+0x23c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d02b      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a4a      	ldr	r2, [pc, #296]	; (8007bf4 <HAL_DMA_Init+0x240>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d026      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a48      	ldr	r2, [pc, #288]	; (8007bf8 <HAL_DMA_Init+0x244>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d021      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a47      	ldr	r2, [pc, #284]	; (8007bfc <HAL_DMA_Init+0x248>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d01c      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a45      	ldr	r2, [pc, #276]	; (8007c00 <HAL_DMA_Init+0x24c>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d017      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a44      	ldr	r2, [pc, #272]	; (8007c04 <HAL_DMA_Init+0x250>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d012      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a42      	ldr	r2, [pc, #264]	; (8007c08 <HAL_DMA_Init+0x254>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d00d      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a41      	ldr	r2, [pc, #260]	; (8007c0c <HAL_DMA_Init+0x258>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d008      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a3f      	ldr	r2, [pc, #252]	; (8007c10 <HAL_DMA_Init+0x25c>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d003      	beq.n	8007b1e <HAL_DMA_Init+0x16a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a3e      	ldr	r2, [pc, #248]	; (8007c14 <HAL_DMA_Init+0x260>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	bf00      	nop
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	695a      	ldr	r2, [r3, #20]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f042 0206 	orr.w	r2, r2, #6
 8007b3e:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007b40:	e00f      	b.n	8007b62 <HAL_DMA_Init+0x1ae>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8007b42:	f7ff fc31 	bl	80073a8 <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	2b05      	cmp	r3, #5
 8007b4e:	d908      	bls.n	8007b62 <HAL_DMA_Init+0x1ae>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2210      	movs	r2, #16
 8007b54:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2203      	movs	r2, #3
 8007b5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e015      	b.n	8007b8e <HAL_DMA_Init+0x1da>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1e8      	bne.n	8007b42 <HAL_DMA_Init+0x18e>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f8cd 	bl	8007d10 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	40020050 	.word	0x40020050
 8007b9c:	50020050 	.word	0x50020050
 8007ba0:	400200d0 	.word	0x400200d0
 8007ba4:	500200d0 	.word	0x500200d0
 8007ba8:	40020150 	.word	0x40020150
 8007bac:	50020150 	.word	0x50020150
 8007bb0:	400201d0 	.word	0x400201d0
 8007bb4:	500201d0 	.word	0x500201d0
 8007bb8:	40020250 	.word	0x40020250
 8007bbc:	50020250 	.word	0x50020250
 8007bc0:	400202d0 	.word	0x400202d0
 8007bc4:	500202d0 	.word	0x500202d0
 8007bc8:	40020350 	.word	0x40020350
 8007bcc:	50020350 	.word	0x50020350
 8007bd0:	400203d0 	.word	0x400203d0
 8007bd4:	500203d0 	.word	0x500203d0
 8007bd8:	40020450 	.word	0x40020450
 8007bdc:	50020450 	.word	0x50020450
 8007be0:	400204d0 	.word	0x400204d0
 8007be4:	500204d0 	.word	0x500204d0
 8007be8:	40020550 	.word	0x40020550
 8007bec:	50020550 	.word	0x50020550
 8007bf0:	400205d0 	.word	0x400205d0
 8007bf4:	500205d0 	.word	0x500205d0
 8007bf8:	40020650 	.word	0x40020650
 8007bfc:	50020650 	.word	0x50020650
 8007c00:	400206d0 	.word	0x400206d0
 8007c04:	500206d0 	.word	0x500206d0
 8007c08:	40020750 	.word	0x40020750
 8007c0c:	50020750 	.word	0x50020750
 8007c10:	400207d0 	.word	0x400207d0
 8007c14:	500207d0 	.word	0x500207d0

08007c18 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8007c20:	f7ff fbc2 	bl	80073a8 <HAL_GetTick>
 8007c24:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d101      	bne.n	8007c30 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e06b      	b.n	8007d08 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d008      	beq.n	8007c4e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e05c      	b.n	8007d08 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	695a      	ldr	r2, [r3, #20]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f042 0204 	orr.w	r2, r2, #4
 8007c5c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2205      	movs	r2, #5
 8007c62:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8007c66:	e020      	b.n	8007caa <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8007c68:	f7ff fb9e 	bl	80073a8 <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	2b05      	cmp	r3, #5
 8007c74:	d919      	bls.n	8007caa <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c7a:	f043 0210 	orr.w	r2, r3, #16
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2203      	movs	r2, #3
 8007c86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e02e      	b.n	8007d08 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0d7      	beq.n	8007c68 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	695a      	ldr	r2, [r3, #20]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f042 0202 	orr.w	r2, r2, #2
 8007cc6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2204      	movs	r2, #4
 8007ccc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8007cd8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d007      	beq.n	8007cfe <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a1b      	ldr	r3, [r3, #32]
 8007d1c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	615a      	str	r2, [r3, #20]


  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	695a      	ldr	r2, [r3, #20]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	431a      	orrs	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a53      	ldr	r2, [pc, #332]	; (8007e9c <DMA_Init+0x18c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	f000 80a0 	beq.w	8007e96 <DMA_Init+0x186>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a51      	ldr	r2, [pc, #324]	; (8007ea0 <DMA_Init+0x190>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	f000 809a 	beq.w	8007e96 <DMA_Init+0x186>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a4f      	ldr	r2, [pc, #316]	; (8007ea4 <DMA_Init+0x194>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	f000 8094 	beq.w	8007e96 <DMA_Init+0x186>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a4d      	ldr	r2, [pc, #308]	; (8007ea8 <DMA_Init+0x198>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	f000 808e 	beq.w	8007e96 <DMA_Init+0x186>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a4b      	ldr	r2, [pc, #300]	; (8007eac <DMA_Init+0x19c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	f000 8088 	beq.w	8007e96 <DMA_Init+0x186>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a49      	ldr	r2, [pc, #292]	; (8007eb0 <DMA_Init+0x1a0>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	f000 8082 	beq.w	8007e96 <DMA_Init+0x186>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a47      	ldr	r2, [pc, #284]	; (8007eb4 <DMA_Init+0x1a4>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d07c      	beq.n	8007e96 <DMA_Init+0x186>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a45      	ldr	r2, [pc, #276]	; (8007eb8 <DMA_Init+0x1a8>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d077      	beq.n	8007e96 <DMA_Init+0x186>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a44      	ldr	r2, [pc, #272]	; (8007ebc <DMA_Init+0x1ac>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d072      	beq.n	8007e96 <DMA_Init+0x186>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a42      	ldr	r2, [pc, #264]	; (8007ec0 <DMA_Init+0x1b0>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d06d      	beq.n	8007e96 <DMA_Init+0x186>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a41      	ldr	r2, [pc, #260]	; (8007ec4 <DMA_Init+0x1b4>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d068      	beq.n	8007e96 <DMA_Init+0x186>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a3f      	ldr	r2, [pc, #252]	; (8007ec8 <DMA_Init+0x1b8>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d063      	beq.n	8007e96 <DMA_Init+0x186>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a3e      	ldr	r2, [pc, #248]	; (8007ecc <DMA_Init+0x1bc>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d05e      	beq.n	8007e96 <DMA_Init+0x186>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a3c      	ldr	r2, [pc, #240]	; (8007ed0 <DMA_Init+0x1c0>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d059      	beq.n	8007e96 <DMA_Init+0x186>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a3b      	ldr	r2, [pc, #236]	; (8007ed4 <DMA_Init+0x1c4>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d054      	beq.n	8007e96 <DMA_Init+0x186>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a39      	ldr	r2, [pc, #228]	; (8007ed8 <DMA_Init+0x1c8>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d04f      	beq.n	8007e96 <DMA_Init+0x186>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a38      	ldr	r2, [pc, #224]	; (8007edc <DMA_Init+0x1cc>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d04a      	beq.n	8007e96 <DMA_Init+0x186>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a36      	ldr	r2, [pc, #216]	; (8007ee0 <DMA_Init+0x1d0>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d045      	beq.n	8007e96 <DMA_Init+0x186>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a35      	ldr	r2, [pc, #212]	; (8007ee4 <DMA_Init+0x1d4>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d040      	beq.n	8007e96 <DMA_Init+0x186>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a33      	ldr	r2, [pc, #204]	; (8007ee8 <DMA_Init+0x1d8>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d03b      	beq.n	8007e96 <DMA_Init+0x186>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a32      	ldr	r2, [pc, #200]	; (8007eec <DMA_Init+0x1dc>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d036      	beq.n	8007e96 <DMA_Init+0x186>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a30      	ldr	r2, [pc, #192]	; (8007ef0 <DMA_Init+0x1e0>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d031      	beq.n	8007e96 <DMA_Init+0x186>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a2f      	ldr	r2, [pc, #188]	; (8007ef4 <DMA_Init+0x1e4>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d02c      	beq.n	8007e96 <DMA_Init+0x186>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a2d      	ldr	r2, [pc, #180]	; (8007ef8 <DMA_Init+0x1e8>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d027      	beq.n	8007e96 <DMA_Init+0x186>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a2c      	ldr	r2, [pc, #176]	; (8007efc <DMA_Init+0x1ec>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d022      	beq.n	8007e96 <DMA_Init+0x186>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a2a      	ldr	r2, [pc, #168]	; (8007f00 <DMA_Init+0x1f0>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d01d      	beq.n	8007e96 <DMA_Init+0x186>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a29      	ldr	r2, [pc, #164]	; (8007f04 <DMA_Init+0x1f4>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d018      	beq.n	8007e96 <DMA_Init+0x186>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a27      	ldr	r2, [pc, #156]	; (8007f08 <DMA_Init+0x1f8>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d013      	beq.n	8007e96 <DMA_Init+0x186>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a26      	ldr	r2, [pc, #152]	; (8007f0c <DMA_Init+0x1fc>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d00e      	beq.n	8007e96 <DMA_Init+0x186>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a24      	ldr	r2, [pc, #144]	; (8007f10 <DMA_Init+0x200>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d009      	beq.n	8007e96 <DMA_Init+0x186>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a23      	ldr	r2, [pc, #140]	; (8007f14 <DMA_Init+0x204>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d004      	beq.n	8007e96 <DMA_Init+0x186>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a21      	ldr	r2, [pc, #132]	; (8007f18 <DMA_Init+0x208>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d142      	bne.n	8007f1c <DMA_Init+0x20c>
 8007e96:	2301      	movs	r3, #1
 8007e98:	e041      	b.n	8007f1e <DMA_Init+0x20e>
 8007e9a:	bf00      	nop
 8007e9c:	40020050 	.word	0x40020050
 8007ea0:	50020050 	.word	0x50020050
 8007ea4:	400200d0 	.word	0x400200d0
 8007ea8:	500200d0 	.word	0x500200d0
 8007eac:	40020150 	.word	0x40020150
 8007eb0:	50020150 	.word	0x50020150
 8007eb4:	400201d0 	.word	0x400201d0
 8007eb8:	500201d0 	.word	0x500201d0
 8007ebc:	40020250 	.word	0x40020250
 8007ec0:	50020250 	.word	0x50020250
 8007ec4:	400202d0 	.word	0x400202d0
 8007ec8:	500202d0 	.word	0x500202d0
 8007ecc:	40020350 	.word	0x40020350
 8007ed0:	50020350 	.word	0x50020350
 8007ed4:	400203d0 	.word	0x400203d0
 8007ed8:	500203d0 	.word	0x500203d0
 8007edc:	40020450 	.word	0x40020450
 8007ee0:	50020450 	.word	0x50020450
 8007ee4:	400204d0 	.word	0x400204d0
 8007ee8:	500204d0 	.word	0x500204d0
 8007eec:	40020550 	.word	0x40020550
 8007ef0:	50020550 	.word	0x50020550
 8007ef4:	400205d0 	.word	0x400205d0
 8007ef8:	500205d0 	.word	0x500205d0
 8007efc:	40020650 	.word	0x40020650
 8007f00:	50020650 	.word	0x50020650
 8007f04:	400206d0 	.word	0x400206d0
 8007f08:	500206d0 	.word	0x500206d0
 8007f0c:	40020750 	.word	0x40020750
 8007f10:	50020750 	.word	0x50020750
 8007f14:	400207d0 	.word	0x400207d0
 8007f18:	500207d0 	.word	0x500207d0
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d012      	beq.n	8007f48 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	051b      	lsls	r3, r3, #20
 8007f2e:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8007f32:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8007f40:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4e:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	689a      	ldr	r2, [r3, #8]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f7a:	f040 80b0 	bne.w	80080de <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a82      	ldr	r2, [pc, #520]	; (800818c <DMA_Init+0x47c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	f000 80a0 	beq.w	80080ca <DMA_Init+0x3ba>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a80      	ldr	r2, [pc, #512]	; (8008190 <DMA_Init+0x480>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	f000 809a 	beq.w	80080ca <DMA_Init+0x3ba>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a7e      	ldr	r2, [pc, #504]	; (8008194 <DMA_Init+0x484>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	f000 8094 	beq.w	80080ca <DMA_Init+0x3ba>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a7c      	ldr	r2, [pc, #496]	; (8008198 <DMA_Init+0x488>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	f000 808e 	beq.w	80080ca <DMA_Init+0x3ba>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a7a      	ldr	r2, [pc, #488]	; (800819c <DMA_Init+0x48c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	f000 8088 	beq.w	80080ca <DMA_Init+0x3ba>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a78      	ldr	r2, [pc, #480]	; (80081a0 <DMA_Init+0x490>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	f000 8082 	beq.w	80080ca <DMA_Init+0x3ba>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a76      	ldr	r2, [pc, #472]	; (80081a4 <DMA_Init+0x494>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d07c      	beq.n	80080ca <DMA_Init+0x3ba>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a74      	ldr	r2, [pc, #464]	; (80081a8 <DMA_Init+0x498>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d077      	beq.n	80080ca <DMA_Init+0x3ba>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a73      	ldr	r2, [pc, #460]	; (80081ac <DMA_Init+0x49c>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d072      	beq.n	80080ca <DMA_Init+0x3ba>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a71      	ldr	r2, [pc, #452]	; (80081b0 <DMA_Init+0x4a0>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d06d      	beq.n	80080ca <DMA_Init+0x3ba>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a70      	ldr	r2, [pc, #448]	; (80081b4 <DMA_Init+0x4a4>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d068      	beq.n	80080ca <DMA_Init+0x3ba>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a6e      	ldr	r2, [pc, #440]	; (80081b8 <DMA_Init+0x4a8>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d063      	beq.n	80080ca <DMA_Init+0x3ba>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a6d      	ldr	r2, [pc, #436]	; (80081bc <DMA_Init+0x4ac>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d05e      	beq.n	80080ca <DMA_Init+0x3ba>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a6b      	ldr	r2, [pc, #428]	; (80081c0 <DMA_Init+0x4b0>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d059      	beq.n	80080ca <DMA_Init+0x3ba>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a6a      	ldr	r2, [pc, #424]	; (80081c4 <DMA_Init+0x4b4>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d054      	beq.n	80080ca <DMA_Init+0x3ba>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a68      	ldr	r2, [pc, #416]	; (80081c8 <DMA_Init+0x4b8>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d04f      	beq.n	80080ca <DMA_Init+0x3ba>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a67      	ldr	r2, [pc, #412]	; (80081cc <DMA_Init+0x4bc>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d04a      	beq.n	80080ca <DMA_Init+0x3ba>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a65      	ldr	r2, [pc, #404]	; (80081d0 <DMA_Init+0x4c0>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d045      	beq.n	80080ca <DMA_Init+0x3ba>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a64      	ldr	r2, [pc, #400]	; (80081d4 <DMA_Init+0x4c4>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d040      	beq.n	80080ca <DMA_Init+0x3ba>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a62      	ldr	r2, [pc, #392]	; (80081d8 <DMA_Init+0x4c8>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d03b      	beq.n	80080ca <DMA_Init+0x3ba>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a61      	ldr	r2, [pc, #388]	; (80081dc <DMA_Init+0x4cc>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d036      	beq.n	80080ca <DMA_Init+0x3ba>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a5f      	ldr	r2, [pc, #380]	; (80081e0 <DMA_Init+0x4d0>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d031      	beq.n	80080ca <DMA_Init+0x3ba>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a5e      	ldr	r2, [pc, #376]	; (80081e4 <DMA_Init+0x4d4>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d02c      	beq.n	80080ca <DMA_Init+0x3ba>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a5c      	ldr	r2, [pc, #368]	; (80081e8 <DMA_Init+0x4d8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d027      	beq.n	80080ca <DMA_Init+0x3ba>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a5b      	ldr	r2, [pc, #364]	; (80081ec <DMA_Init+0x4dc>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d022      	beq.n	80080ca <DMA_Init+0x3ba>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a59      	ldr	r2, [pc, #356]	; (80081f0 <DMA_Init+0x4e0>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d01d      	beq.n	80080ca <DMA_Init+0x3ba>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a58      	ldr	r2, [pc, #352]	; (80081f4 <DMA_Init+0x4e4>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d018      	beq.n	80080ca <DMA_Init+0x3ba>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a56      	ldr	r2, [pc, #344]	; (80081f8 <DMA_Init+0x4e8>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d013      	beq.n	80080ca <DMA_Init+0x3ba>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a55      	ldr	r2, [pc, #340]	; (80081fc <DMA_Init+0x4ec>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d00e      	beq.n	80080ca <DMA_Init+0x3ba>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a53      	ldr	r2, [pc, #332]	; (8008200 <DMA_Init+0x4f0>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d009      	beq.n	80080ca <DMA_Init+0x3ba>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a52      	ldr	r2, [pc, #328]	; (8008204 <DMA_Init+0x4f4>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d004      	beq.n	80080ca <DMA_Init+0x3ba>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a50      	ldr	r2, [pc, #320]	; (8008208 <DMA_Init+0x4f8>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d101      	bne.n	80080ce <DMA_Init+0x3be>
 80080ca:	2301      	movs	r3, #1
 80080cc:	e000      	b.n	80080d0 <DMA_Init+0x3c0>
 80080ce:	2300      	movs	r3, #0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00d      	beq.n	80080f0 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	e008      	b.n	80080f0 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080e6:	d103      	bne.n	80080f0 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080ee:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080f6:	4b45      	ldr	r3, [pc, #276]	; (800820c <DMA_Init+0x4fc>)
 80080f8:	4013      	ands	r3, r2
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	6812      	ldr	r2, [r2, #0]
 80080fe:	68f9      	ldr	r1, [r7, #12]
 8008100:	430b      	orrs	r3, r1
 8008102:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2200      	movs	r2, #0
 800810a:	649a      	str	r2, [r3, #72]	; 0x48


  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a36      	ldr	r2, [pc, #216]	; (80081ec <DMA_Init+0x4dc>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d022      	beq.n	800815c <DMA_Init+0x44c>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a35      	ldr	r2, [pc, #212]	; (80081f0 <DMA_Init+0x4e0>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d01d      	beq.n	800815c <DMA_Init+0x44c>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a33      	ldr	r2, [pc, #204]	; (80081f4 <DMA_Init+0x4e4>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d018      	beq.n	800815c <DMA_Init+0x44c>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a32      	ldr	r2, [pc, #200]	; (80081f8 <DMA_Init+0x4e8>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d013      	beq.n	800815c <DMA_Init+0x44c>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a30      	ldr	r2, [pc, #192]	; (80081fc <DMA_Init+0x4ec>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d00e      	beq.n	800815c <DMA_Init+0x44c>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a2f      	ldr	r2, [pc, #188]	; (8008200 <DMA_Init+0x4f0>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d009      	beq.n	800815c <DMA_Init+0x44c>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a2d      	ldr	r2, [pc, #180]	; (8008204 <DMA_Init+0x4f4>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d004      	beq.n	800815c <DMA_Init+0x44c>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a2c      	ldr	r2, [pc, #176]	; (8008208 <DMA_Init+0x4f8>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d101      	bne.n	8008160 <DMA_Init+0x450>
 800815c:	2301      	movs	r3, #1
 800815e:	e000      	b.n	8008162 <DMA_Init+0x452>
 8008160:	2300      	movs	r3, #0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2200      	movs	r2, #0
 800816c:	655a      	str	r2, [r3, #84]	; 0x54


    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2200      	movs	r2, #0
 8008174:	659a      	str	r2, [r3, #88]	; 0x58
  }


  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2200      	movs	r2, #0
 800817c:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800817e:	bf00      	nop
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	40020050 	.word	0x40020050
 8008190:	50020050 	.word	0x50020050
 8008194:	400200d0 	.word	0x400200d0
 8008198:	500200d0 	.word	0x500200d0
 800819c:	40020150 	.word	0x40020150
 80081a0:	50020150 	.word	0x50020150
 80081a4:	400201d0 	.word	0x400201d0
 80081a8:	500201d0 	.word	0x500201d0
 80081ac:	40020250 	.word	0x40020250
 80081b0:	50020250 	.word	0x50020250
 80081b4:	400202d0 	.word	0x400202d0
 80081b8:	500202d0 	.word	0x500202d0
 80081bc:	40020350 	.word	0x40020350
 80081c0:	50020350 	.word	0x50020350
 80081c4:	400203d0 	.word	0x400203d0
 80081c8:	500203d0 	.word	0x500203d0
 80081cc:	40020450 	.word	0x40020450
 80081d0:	50020450 	.word	0x50020450
 80081d4:	400204d0 	.word	0x400204d0
 80081d8:	500204d0 	.word	0x500204d0
 80081dc:	40020550 	.word	0x40020550
 80081e0:	50020550 	.word	0x50020550
 80081e4:	400205d0 	.word	0x400205d0
 80081e8:	500205d0 	.word	0x500205d0
 80081ec:	40020650 	.word	0x40020650
 80081f0:	50020650 	.word	0x50020650
 80081f4:	400206d0 	.word	0x400206d0
 80081f8:	500206d0 	.word	0x500206d0
 80081fc:	40020750 	.word	0x40020750
 8008200:	50020750 	.word	0x50020750
 8008204:	400207d0 	.word	0x400207d0
 8008208:	500207d0 	.word	0x500207d0
 800820c:	3cc03180 	.word	0x3cc03180

08008210 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e053      	b.n	80082ca <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d106      	bne.n	800823c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7f9 f9be 	bl	80015b8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800824e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	6851      	ldr	r1, [r2, #4]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	69d2      	ldr	r2, [r2, #28]
 800825a:	4311      	orrs	r1, r2
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	6812      	ldr	r2, [r2, #0]
 8008260:	430b      	orrs	r3, r1
 8008262:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800826a:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 800826e:	f023 0301 	bic.w	r3, r3, #1
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	6891      	ldr	r1, [r2, #8]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	6992      	ldr	r2, [r2, #24]
 800827a:	4311      	orrs	r1, r2
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	6812      	ldr	r2, [r2, #0]
 8008280:	430b      	orrs	r3, r1
 8008282:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828a:	0c1b      	lsrs	r3, r3, #16
 800828c:	041b      	lsls	r3, r3, #16
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	68d1      	ldr	r1, [r2, #12]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	6812      	ldr	r2, [r2, #0]
 8008296:	430b      	orrs	r3, r1
 8008298:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	051a      	lsls	r2, r3, #20
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	055b      	lsls	r3, r3, #21
 80082b0:	431a      	orrs	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d026      	beq.n	8008342 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d021      	beq.n	8008342 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800830c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008312:	f043 0201 	orr.w	r2, r3, #1
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2201      	movs	r2, #1
 8008320:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2204      	movs	r2, #4
 8008326:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f003 0320 	and.w	r3, r3, #32
 8008348:	2b00      	cmp	r3, #0
 800834a:	d026      	beq.n	800839a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d021      	beq.n	800839a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008364:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2220      	movs	r2, #32
 800836c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008372:	f043 0202 	orr.w	r2, r3, #2
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2204      	movs	r2, #4
 800837e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f003 0308 	and.w	r3, r3, #8
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d026      	beq.n	80083f2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d021      	beq.n	80083f2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083bc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2208      	movs	r2, #8
 80083c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ca:	f043 0204 	orr.w	r2, r3, #4
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2204      	movs	r2, #4
 80083d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d013      	beq.n	8008424 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00e      	beq.n	8008424 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008414:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2204      	movs	r2, #4
 800841c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f853 	bl	80084ca <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f003 0302 	and.w	r3, r3, #2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d024      	beq.n	8008478 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01f      	beq.n	8008478 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008446:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2202      	movs	r2, #2
 800844e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferCpltCallback != NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d003      	beq.n	8008478 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f003 0310 	and.w	r3, r3, #16
 800847e:	2b00      	cmp	r3, #0
 8008480:	d01f      	beq.n	80084c2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d01a      	beq.n	80084c2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800849a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2210      	movs	r2, #16
 80084a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f80e 	bl	80084de <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80084c2:	bf00      	nop
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80084d2:	bf00      	nop
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80084de:	b480      	push	{r7}
 80084e0:	b083      	sub	sp, #12
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80084e6:	bf00      	nop
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b085      	sub	sp, #20
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	60f8      	str	r0, [r7, #12]
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	607a      	str	r2, [r7, #4]
 80084fe:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	019a      	lsls	r2, r3, #6
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	431a      	orrs	r2, r3
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	021b      	lsls	r3, r3, #8
 800850c:	431a      	orrs	r2, r3
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	041b      	lsls	r3, r3, #16
 8008512:	431a      	orrs	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008518:	bf00      	nop
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8008532:	f7fe ff39 	bl	80073a8 <HAL_GetTick>
 8008536:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008538:	e008      	b.n	800854c <DSI_ShortWrite+0x28>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800853a:	f7fe ff35 	bl	80073a8 <HAL_GetTick>
 800853e:	4602      	mov	r2, r0
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	2b64      	cmp	r3, #100	; 0x64
 8008546:	d901      	bls.n	800854c <DSI_ShortWrite+0x28>
    {
      return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e015      	b.n	8008578 <DSI_ShortWrite+0x54>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0ef      	beq.n	800853a <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	019a      	lsls	r2, r3, #6
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	431a      	orrs	r2, r3
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	021b      	lsls	r3, r3, #8
 8008566:	ea42 0103 	orr.w	r1, r2, r3
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	041a      	lsls	r2, r3, #16
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	430a      	orrs	r2, r1
 8008574:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8008598:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	; 0xc04
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	00da      	lsls	r2, r3, #3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	220e      	movs	r2, #14
 80085ba:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	; 0xc70
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f022 021f 	bic.w	r2, r2, #31
 80085ce:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	6912      	ldr	r2, [r2, #16]
 80085da:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	220e      	movs	r2, #14
 80085e4:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	; 0xd08
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 021f 	bic.w	r2, r2, #31
 80085f8:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	6912      	ldr	r2, [r2, #16]
 8008604:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	220e      	movs	r2, #14
 800860e:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	; 0xc5c
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008622:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008636:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d007      	beq.n	8008652 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8008646:	2b02      	cmp	r3, #2
 8008648:	d003      	beq.n	8008652 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 800864e:	2b05      	cmp	r3, #5
 8008650:	d10a      	bne.n	8008668 <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2200      	movs	r2, #0
 8008658:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2200      	movs	r2, #0
 8008662:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8008666:	e02c      	b.n	80086c2 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00b      	beq.n	8008688 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8008674:	2b03      	cmp	r3, #3
 8008676:	d007      	beq.n	8008688 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 800867c:	2b04      	cmp	r3, #4
 800867e:	d003      	beq.n	8008688 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8008684:	2b06      	cmp	r3, #6
 8008686:	d10a      	bne.n	800869e <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2210      	movs	r2, #16
 800868e:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2210      	movs	r2, #16
 8008698:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 800869c:	e011      	b.n	80086c2 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	2b07      	cmp	r3, #7
 80086a4:	d003      	beq.n	80086ae <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 80086aa:	2b08      	cmp	r3, #8
 80086ac:	d109      	bne.n	80086c2 <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2220      	movs	r2, #32
 80086b4:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2220      	movs	r2, #32
 80086be:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f022 020f 	bic.w	r2, r2, #15
 80086d2:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	; 0xcf8
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f022 020f 	bic.w	r2, r2, #15
 80086e6:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	6952      	ldr	r2, [r2, #20]
 80086f2:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	6952      	ldr	r2, [r2, #20]
 80086fe:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

}
 8008702:	bf00      	nop
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8008728:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	075a      	lsls	r2, r3, #29
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	430a      	orrs	r2, r1
 8008740:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8008754:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	031a      	lsls	r2, r3, #12
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	430a      	orrs	r2, r1
 800876c:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	021a      	lsls	r2, r3, #8
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e0c3      	b.n	8008930 <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	7e5b      	ldrb	r3, [r3, #25]
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d102      	bne.n	80087b8 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7f8 ff28 	bl	8001608 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2203      	movs	r2, #3
 80087bc:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087ce:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 80087d2:	2002      	movs	r0, #2
 80087d4:	f7fe fdf4 	bl	80073c0 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	4b54      	ldr	r3, [pc, #336]	; (8008938 <HAL_DSI_Init+0x1a4>)
 80087e6:	400b      	ands	r3, r1
 80087e8:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008800:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008808:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff feb3 	bl	8008580 <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7ff ff76 	bl	800870e <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8008822:	2300      	movs	r3, #0
 8008824:	60bb      	str	r3, [r7, #8]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f042 0201 	orr.w	r2, r2, #1
 8008836:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	60bb      	str	r3, [r7, #8]
 8008848:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800884a:	2001      	movs	r0, #1
 800884c:	f7fe fdb8 	bl	80073c0 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8008850:	f7fe fdaa 	bl	80073a8 <HAL_GetTick>
 8008854:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008856:	e008      	b.n	800886a <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008858:	f7fe fda6 	bl	80073a8 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	2b64      	cmp	r3, #100	; 0x64
 8008864:	d901      	bls.n	800886a <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e062      	b.n	8008930 <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0ee      	beq.n	8008858 <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f042 0206 	orr.w	r2, r2, #6
 800888a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f022 0203 	bic.w	r2, r2, #3
 800889e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	431a      	orrs	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f042 0201 	orr.w	r2, r2, #1
 80088b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 0203 	bic.w	r2, r2, #3
 80088cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68da      	ldr	r2, [r3, #12]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	430a      	orrs	r2, r1
 80088e2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689a      	ldr	r2, [r3, #8]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80088f4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6899      	ldr	r1, [r3, #8]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	689a      	ldr	r2, [r3, #8]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2200      	movs	r2, #0
 800890e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2200      	movs	r2, #0
 8008918:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	e0000003 	.word	0xe0000003

0800893c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	7e1b      	ldrb	r3, [r3, #24]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d101      	bne.n	8008952 <HAL_DSI_ConfigErrorMonitor+0x16>
 800894e:	2302      	movs	r3, #2
 8008950:	e0ba      	b.n	8008ac8 <HAL_DSI_ConfigErrorMonitor+0x18c>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2200      	movs	r2, #0
 800895e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2200      	movs	r2, #0
 8008968:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00b      	beq.n	8008994 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	6812      	ldr	r2, [r2, #0]
 8008988:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800898c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8008990:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	f003 0302 	and.w	r3, r3, #2
 800899a:	2b00      	cmp	r3, #0
 800899c:	d009      	beq.n	80089b2 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80089ae:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d009      	beq.n	80089d0 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f042 0201 	orr.w	r2, r2, #1
 80089cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	f003 0308 	and.w	r3, r3, #8
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d009      	beq.n	80089ee <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f042 0202 	orr.w	r2, r2, #2
 80089ea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	f003 0310 	and.w	r3, r3, #16
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d009      	beq.n	8008a0c <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f042 020c 	orr.w	r2, r2, #12
 8008a08:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	f003 0320 	and.w	r3, r3, #32
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d009      	beq.n	8008a2a <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0210 	orr.w	r2, r2, #16
 8008a26:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d009      	beq.n	8008a48 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f042 0220 	orr.w	r2, r2, #32
 8008a44:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d009      	beq.n	8008a66 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a62:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d009      	beq.n	8008a84 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a80:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d009      	beq.n	8008aa2 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8008a9e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d009      	beq.n	8008ac0 <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008abc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	7e1b      	ldrb	r3, [r3, #24]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_DSI_SetGenericVCID+0x16>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e019      	b.n	8008b1e <HAL_DSI_SetGenericVCID+0x4a>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 8008afe:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6b19      	ldr	r1, [r3, #48]	; 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	430a      	orrs	r2, r1
 8008b14:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b083      	sub	sp, #12
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	7e1b      	ldrb	r3, [r3, #24]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d101      	bne.n	8008b40 <HAL_DSI_ConfigVideoMode+0x16>
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	e1f6      	b.n	8008f2e <HAL_DSI_ConfigVideoMode+0x404>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	761a      	strb	r2, [r3, #24]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f022 0201 	bic.w	r2, r2, #1
 8008b54:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 0201 	bic.w	r2, r2, #1
 8008b66:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f022 0203 	bic.w	r2, r2, #3
 8008b78:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	68da      	ldr	r2, [r3, #12]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	430a      	orrs	r2, r1
 8008b8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	6812      	ldr	r2, [r2, #0]
 8008b96:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008b9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008b9e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	691a      	ldr	r2, [r3, #16]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	6812      	ldr	r2, [r2, #0]
 8008bbc:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8008bc0:	f023 031f 	bic.w	r3, r3, #31
 8008bc4:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	695a      	ldr	r2, [r3, #20]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	6812      	ldr	r2, [r2, #0]
 8008be2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8008be6:	f023 031f 	bic.w	r3, r3, #31
 8008bea:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	699a      	ldr	r2, [r3, #24]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68da      	ldr	r2, [r3, #12]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f022 0203 	bic.w	r2, r2, #3
 8008c0c:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68d9      	ldr	r1, [r3, #12]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	695a      	ldr	r2, [r3, #20]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 0207 	bic.w	r2, r2, #7
 8008c2e:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6959      	ldr	r1, [r3, #20]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	431a      	orrs	r2, r3
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	69db      	ldr	r3, [r3, #28]
 8008c44:	431a      	orrs	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	691a      	ldr	r2, [r3, #16]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f022 020f 	bic.w	r2, r2, #15
 8008c5c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6919      	ldr	r1, [r3, #16]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f022 020e 	bic.w	r2, r2, #14
 8008c80:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	005a      	lsls	r2, r3, #1
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d110      	bne.n	8008cc6 <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	691a      	ldr	r2, [r3, #16]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cb2:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6919      	ldr	r1, [r3, #16]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	689a      	ldr	r2, [r3, #8]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	6812      	ldr	r2, [r2, #0]
 8008cd0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008cd4:	f023 030f 	bic.w	r3, r3, #15
 8008cd8:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	430a      	orrs	r2, r1
 8008cea:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	6812      	ldr	r2, [r2, #0]
 8008cf6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008cfa:	f023 030f 	bic.w	r3, r3, #15
 8008cfe:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6812      	ldr	r2, [r2, #0]
 8008d1c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008d20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d24:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	430a      	orrs	r2, r1
 8008d36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	6812      	ldr	r2, [r2, #0]
 8008d42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008d46:	f023 0303 	bic.w	r3, r3, #3
 8008d4a:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	6812      	ldr	r2, [r2, #0]
 8008d68:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008d6c:	f023 0303 	bic.w	r3, r3, #3
 8008d70:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	430a      	orrs	r2, r1
 8008d82:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	6812      	ldr	r2, [r2, #0]
 8008d8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008d92:	f023 0303 	bic.w	r3, r3, #3
 8008d96:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	6812      	ldr	r2, [r2, #0]
 8008db4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008db8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008dbc:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008dde:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	430a      	orrs	r2, r1
 8008df0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	699a      	ldr	r2, [r3, #24]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8008e00:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6999      	ldr	r1, [r3, #24]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e0c:	041a      	lsls	r2, r3, #16
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	430a      	orrs	r2, r1
 8008e14:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	699a      	ldr	r2, [r3, #24]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008e24:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	6999      	ldr	r1, [r3, #24]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	430a      	orrs	r2, r1
 8008e36:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e46:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	430a      	orrs	r2, r1
 8008e58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e68:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	430a      	orrs	r2, r1
 8008e7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e8a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	430a      	orrs	r2, r1
 8008e9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008eac:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	430a      	orrs	r2, r1
 8008ebe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008ece:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ef0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	430a      	orrs	r2, r1
 8008f02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008f12:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	430a      	orrs	r2, r1
 8008f24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b083      	sub	sp, #12
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	7e1b      	ldrb	r3, [r3, #24]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d101      	bne.n	8008f50 <HAL_DSI_ConfigFlowControl+0x16>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e016      	b.n	8008f7e <HAL_DSI_ConfigFlowControl+0x44>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008f64:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	430a      	orrs	r2, r1
 8008f74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b085      	sub	sp, #20
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	7e1b      	ldrb	r3, [r3, #24]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d101      	bne.n	8008fa0 <HAL_DSI_ConfigPhyTimer+0x16>
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	e084      	b.n	80090aa <HAL_DSI_ConfigPhyTimer+0x120>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	441a      	add	r2, r3
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	6859      	ldr	r1, [r3, #4]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	695a      	ldr	r2, [r3, #20]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	005b      	lsls	r3, r3, #1
 8008fc0:	4413      	add	r3, r2
 8008fc2:	18ca      	adds	r2, r1, r3
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	68da      	ldr	r2, [r3, #12]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	005b      	lsls	r3, r3, #1
 8008fd2:	441a      	add	r2, r3
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	bf38      	it	cc
 8008fe4:	4613      	movcc	r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8008ff8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	041a      	lsls	r2, r3, #16
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	431a      	orrs	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	430a      	orrs	r2, r1
 8009012:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8009026:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	68da      	ldr	r2, [r3, #12]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	041b      	lsls	r3, r3, #16
 800903c:	431a      	orrs	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	6812      	ldr	r2, [r2, #0]
 8009054:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009058:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800905c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	691a      	ldr	r2, [r3, #16]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	430a      	orrs	r2, r1
 8009072:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8009086:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	021a      	lsls	r2, r3, #8
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	430a      	orrs	r2, r1
 800909e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	7e1b      	ldrb	r3, [r3, #24]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d101      	bne.n	80090cc <HAL_DSI_ConfigHostTimeouts+0x16>
 80090c8:	2302      	movs	r3, #2
 80090ca:	e0b4      	b.n	8009236 <HAL_DSI_ConfigHostTimeouts+0x180>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689a      	ldr	r2, [r3, #8]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80090e0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6899      	ldr	r1, [r3, #8]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	021a      	lsls	r2, r3, #8
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	430a      	orrs	r2, r1
 80090f4:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	b292      	uxth	r2, r2
 8009102:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	041a      	lsls	r2, r3, #16
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	430a      	orrs	r2, r1
 8009116:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	6812      	ldr	r2, [r2, #0]
 8009122:	0c1b      	lsrs	r3, r3, #16
 8009124:	041b      	lsls	r3, r3, #16
 8009126:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	689a      	ldr	r2, [r3, #8]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	430a      	orrs	r2, r1
 8009138:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	6812      	ldr	r2, [r2, #0]
 8009144:	0c1b      	lsrs	r3, r3, #16
 8009146:	041b      	lsls	r3, r3, #16
 8009148:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	68da      	ldr	r2, [r3, #12]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	430a      	orrs	r2, r1
 800915a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	6812      	ldr	r2, [r2, #0]
 8009168:	0c1b      	lsrs	r3, r3, #16
 800916a:	041b      	lsls	r3, r3, #16
 800916c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	691a      	ldr	r2, [r3, #16]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	6812      	ldr	r2, [r2, #0]
 8009192:	0c1b      	lsrs	r3, r3, #16
 8009194:	041b      	lsls	r3, r3, #16
 8009196:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	695a      	ldr	r2, [r3, #20]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	430a      	orrs	r2, r1
 80091ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80091c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	699a      	ldr	r2, [r3, #24]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	6812      	ldr	r2, [r2, #0]
 80091e6:	0c1b      	lsrs	r3, r3, #16
 80091e8:	041b      	lsls	r3, r3, #16
 80091ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	69da      	ldr	r2, [r3, #28]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	430a      	orrs	r2, r1
 8009200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	6812      	ldr	r2, [r2, #0]
 8009210:	0c1b      	lsrs	r3, r3, #16
 8009212:	041b      	lsls	r3, r3, #16
 8009214:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	6a1a      	ldr	r2, [r3, #32]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8009242:	b480      	push	{r7}
 8009244:	b085      	sub	sp, #20
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	7e1b      	ldrb	r3, [r3, #24]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d101      	bne.n	8009256 <HAL_DSI_Start+0x14>
 8009252:	2302      	movs	r3, #2
 8009254:	e02b      	b.n	80092ae <HAL_DSI_Start+0x6c>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	761a      	strb	r2, [r3, #24]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800925c:	2300      	movs	r3, #0
 800925e:	60fb      	str	r3, [r7, #12]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685a      	ldr	r2, [r3, #4]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f042 0201 	orr.w	r2, r2, #1
 800926e:	605a      	str	r2, [r3, #4]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	60fb      	str	r3, [r7, #12]
 800927c:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800927e:	2300      	movs	r3, #0
 8009280:	60bb      	str	r3, [r7, #8]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f042 0208 	orr.w	r2, r2, #8
 8009292:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800929e:	f003 0308 	and.w	r3, r3, #8
 80092a2:	60bb      	str	r3, [r7, #8]
 80092a4:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b088      	sub	sp, #32
 80092be:	af02      	add	r7, sp, #8
 80092c0:	60f8      	str	r0, [r7, #12]
 80092c2:	60b9      	str	r1, [r7, #8]
 80092c4:	607a      	str	r2, [r7, #4]
 80092c6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	7e1b      	ldrb	r3, [r3, #24]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d101      	bne.n	80092d4 <HAL_DSI_ShortWrite+0x1a>
 80092d0:	2302      	movs	r3, #2
 80092d2:	e010      	b.n	80092f6 <HAL_DSI_ShortWrite+0x3c>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2201      	movs	r2, #1
 80092d8:	761a      	strb	r2, [r3, #24]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80092da:	6a3b      	ldr	r3, [r7, #32]
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	68b9      	ldr	r1, [r7, #8]
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f7ff f91d 	bl	8008524 <DSI_ShortWrite>
 80092ea:	4603      	mov	r3, r0
 80092ec:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	761a      	strb	r2, [r3, #24]

  return status;
 80092f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b08c      	sub	sp, #48	; 0x30
 8009302:	af02      	add	r7, sp, #8
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	607a      	str	r2, [r7, #4]
 800930a:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 800930c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800930e:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	7e1b      	ldrb	r3, [r3, #24]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d101      	bne.n	800931c <HAL_DSI_LongWrite+0x1e>
 8009318:	2302      	movs	r3, #2
 800931a:	e083      	b.n	8009424 <HAL_DSI_LongWrite+0x126>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2201      	movs	r2, #1
 8009320:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8009322:	f7fe f841 	bl	80073a8 <HAL_GetTick>
 8009326:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8009328:	e00b      	b.n	8009342 <HAL_DSI_LongWrite+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800932a:	f7fe f83d 	bl	80073a8 <HAL_GetTick>
 800932e:	4602      	mov	r2, r0
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	2b64      	cmp	r3, #100	; 0x64
 8009336:	d904      	bls.n	8009342 <HAL_DSI_LongWrite+0x44>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e070      	b.n	8009424 <HAL_DSI_LongWrite+0x126>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	2b00      	cmp	r3, #0
 800934e:	d0ec      	beq.n	800932a <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8009350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009352:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	2b03      	cmp	r3, #3
 8009358:	bf28      	it	cs
 800935a:	2303      	movcs	r3, #3
 800935c:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800935e:	2300      	movs	r3, #0
 8009360:	623b      	str	r3, [r7, #32]
 8009362:	e00f      	b.n	8009384 <HAL_DSI_LongWrite+0x86>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8009364:	69ba      	ldr	r2, [r7, #24]
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	4413      	add	r3, r2
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	461a      	mov	r2, r3
 800936e:	6a3b      	ldr	r3, [r7, #32]
 8009370:	3301      	adds	r3, #1
 8009372:	00db      	lsls	r3, r3, #3
 8009374:	fa02 f303 	lsl.w	r3, r2, r3
 8009378:	69fa      	ldr	r2, [r7, #28]
 800937a:	4313      	orrs	r3, r2
 800937c:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	3301      	adds	r3, #1
 8009382:	623b      	str	r3, [r7, #32]
 8009384:	6a3a      	ldr	r2, [r7, #32]
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	429a      	cmp	r2, r3
 800938a:	d3eb      	bcc.n	8009364 <HAL_DSI_LongWrite+0x66>
  }
  hdsi->Instance->GPDR = fifoword;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	69fa      	ldr	r2, [r7, #28]
 8009392:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8009394:	683a      	ldr	r2, [r7, #0]
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 800939c:	69ba      	ldr	r2, [r7, #24]
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	4413      	add	r3, r2
 80093a2:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80093a4:	e028      	b.n	80093f8 <HAL_DSI_LongWrite+0xfa>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80093a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a8:	2b04      	cmp	r3, #4
 80093aa:	bf28      	it	cs
 80093ac:	2304      	movcs	r3, #4
 80093ae:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80093b0:	2300      	movs	r3, #0
 80093b2:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80093b4:	2300      	movs	r3, #0
 80093b6:	623b      	str	r3, [r7, #32]
 80093b8:	e00e      	b.n	80093d8 <HAL_DSI_LongWrite+0xda>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80093ba:	69ba      	ldr	r2, [r7, #24]
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	4413      	add	r3, r2
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	461a      	mov	r2, r3
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	00db      	lsls	r3, r3, #3
 80093c8:	fa02 f303 	lsl.w	r3, r2, r3
 80093cc:	69fa      	ldr	r2, [r7, #28]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80093d2:	6a3b      	ldr	r3, [r7, #32]
 80093d4:	3301      	adds	r3, #1
 80093d6:	623b      	str	r3, [r7, #32]
 80093d8:	6a3a      	ldr	r2, [r7, #32]
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d3ec      	bcc.n	80093ba <HAL_DSI_LongWrite+0xbc>
    }
    hdsi->Instance->GPDR = fifoword;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	69fa      	ldr	r2, [r7, #28]
 80093e6:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80093e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80093f0:	69ba      	ldr	r2, [r7, #24]
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	4413      	add	r3, r2
 80093f6:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1d3      	bne.n	80093a6 <HAL_DSI_LongWrite+0xa8>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8009406:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	3301      	adds	r3, #1
 800940c:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800940e:	b2db      	uxtb	r3, r3
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	4613      	mov	r3, r2
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	68b9      	ldr	r1, [r7, #8]
 8009418:	f7ff f86b 	bl	80084f2 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3728      	adds	r7, #40	; 0x28
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <HAL_DSI_EnterULPM>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_EnterULPM(DSI_HandleTypeDef *hdsi)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	7e1b      	ldrb	r3, [r3, #24]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d101      	bne.n	8009440 <HAL_DSI_EnterULPM+0x14>
 800943c:	2302      	movs	r3, #2
 800943e:	e106      	b.n	800964e <HAL_DSI_EnterULPM+0x222>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	761a      	strb	r2, [r3, #24]

  /* Verify the initial status of the DSI Host */

  /* Verify that the clock lane and the digital section of the D-PHY are enabled */
  if ((hdsi->Instance->PCTLR & (DSI_PCTLR_CKE | DSI_PCTLR_DEN)) != (DSI_PCTLR_CKE | DSI_PCTLR_DEN))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800944e:	f003 0306 	and.w	r3, r3, #6
 8009452:	2b06      	cmp	r3, #6
 8009454:	d004      	beq.n	8009460 <HAL_DSI_EnterULPM+0x34>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e0f6      	b.n	800964e <HAL_DSI_EnterULPM+0x222>
  }

  /* Verify that the D-PHY PLL and the reference bias are enabled */
  if ((hdsi->Instance->WRPCR & DSI_WRPCR_PLLEN) != DSI_WRPCR_PLLEN)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b01      	cmp	r3, #1
 800946e:	d004      	beq.n	800947a <HAL_DSI_EnterULPM+0x4e>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e0e9      	b.n	800964e <HAL_DSI_EnterULPM+0x222>
  }
  else if ((hdsi->Instance->BCFGR  & DSI_BCFGR_PWRUP) != DSI_BCFGR_PWRUP)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8009482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009486:	2b40      	cmp	r3, #64	; 0x40
 8009488:	d004      	beq.n	8009494 <HAL_DSI_EnterULPM+0x68>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e0dc      	b.n	800964e <HAL_DSI_EnterULPM+0x222>
  {
    /* Nothing to do */
  }

  /* Verify that there are no ULPS exit or request on both data and clock lanes */
  if ((hdsi->Instance->PUCR & (DSI_PUCR_UEDL | DSI_PUCR_URDL | DSI_PUCR_UECL | DSI_PUCR_URCL)) != 0U)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800949c:	f003 030f 	and.w	r3, r3, #15
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d004      	beq.n	80094ae <HAL_DSI_EnterULPM+0x82>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e0cf      	b.n	800964e <HAL_DSI_EnterULPM+0x222>
  }

  /* Verify that there are no Transmission trigger */
  if ((hdsi->Instance->PTTCR & DSI_PTTCR_TX_TRIG) != 0U)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80094b6:	f003 030f 	and.w	r3, r3, #15
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d004      	beq.n	80094c8 <HAL_DSI_EnterULPM+0x9c>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e0c2      	b.n	800964e <HAL_DSI_EnterULPM+0x222>
  }

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80094c8:	2001      	movs	r0, #1
 80094ca:	f7fd ff79 	bl	80073c0 <HAL_Delay>

  /* Verify that D-PHY PLL is locked */
  tickstart = HAL_GetTick();
 80094ce:	f7fd ff6b 	bl	80073a8 <HAL_GetTick>
 80094d2:	60f8      	str	r0, [r7, #12]

  while ((__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U))
 80094d4:	e00b      	b.n	80094ee <HAL_DSI_EnterULPM+0xc2>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80094d6:	f7fd ff67 	bl	80073a8 <HAL_GetTick>
 80094da:	4602      	mov	r2, r0
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	2b64      	cmp	r3, #100	; 0x64
 80094e2:	d904      	bls.n	80094ee <HAL_DSI_EnterULPM+0xc2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e0af      	b.n	800964e <HAL_DSI_EnterULPM+0x222>
  while ((__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80094f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d0eb      	beq.n	80094d6 <HAL_DSI_EnterULPM+0xaa>
    }
  }

  /* Verify that all active lanes are in Stop state */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009506:	f003 0303 	and.w	r3, r3, #3
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10c      	bne.n	8009528 <HAL_DSI_EnterULPM+0xfc>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009516:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800951a:	2b30      	cmp	r3, #48	; 0x30
 800951c:	d01f      	beq.n	800955e <HAL_DSI_EnterULPM+0x132>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e092      	b.n	800964e <HAL_DSI_EnterULPM+0x222>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009530:	f003 0303 	and.w	r3, r3, #3
 8009534:	2b01      	cmp	r3, #1
 8009536:	d10d      	bne.n	8009554 <HAL_DSI_EnterULPM+0x128>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | \
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009540:	f403 73d8 	and.w	r3, r3, #432	; 0x1b0
 8009544:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8009548:	d009      	beq.n	800955e <HAL_DSI_EnterULPM+0x132>
                                DSI_PSR_UAN1)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_UAN1))
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e07c      	b.n	800964e <HAL_DSI_EnterULPM+0x222>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e077      	b.n	800964e <HAL_DSI_EnterULPM+0x222>
  }

  /* Clock lane configuration: no more HS request */
  hdsi->Instance->CLCR &= ~DSI_CLCR_DPCC;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f022 0201 	bic.w	r2, r2, #1
 800956e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Use system PLL as byte lane clock source before stopping DSIPHY clock source */
  __HAL_RCC_DSI_CONFIG(RCC_DSICLKSOURCE_PLL3);
 8009572:	4b39      	ldr	r3, [pc, #228]	; (8009658 <HAL_DSI_EnterULPM+0x22c>)
 8009574:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009578:	4a37      	ldr	r2, [pc, #220]	; (8009658 <HAL_DSI_EnterULPM+0x22c>)
 800957a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800957e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4

  /* ULPS Request on Clock and Data Lanes */
  hdsi->Instance->PUCR |= (DSI_PUCR_URCL | DSI_PUCR_URDL);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f042 0205 	orr.w	r2, r2, #5
 8009592:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Get tick */
  tickstart = HAL_GetTick();
 8009596:	f7fd ff07 	bl	80073a8 <HAL_GetTick>
 800959a:	60f8      	str	r0, [r7, #12]

  /* Wait until all active lanes enter ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095a4:	f003 0303 	and.w	r3, r3, #3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d115      	bne.n	80095d8 <HAL_DSI_EnterULPM+0x1ac>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != 0U)
 80095ac:	e00b      	b.n	80095c6 <HAL_DSI_EnterULPM+0x19a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80095ae:	f7fd fefb 	bl	80073a8 <HAL_GetTick>
 80095b2:	4602      	mov	r2, r0
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	2b64      	cmp	r3, #100	; 0x64
 80095ba:	d904      	bls.n	80095c6 <HAL_DSI_EnterULPM+0x19a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e043      	b.n	800964e <HAL_DSI_EnterULPM+0x222>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != 0U)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1eb      	bne.n	80095ae <HAL_DSI_EnterULPM+0x182>
 80095d6:	e022      	b.n	800961e <HAL_DSI_EnterULPM+0x1f2>
      }
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095e0:	f003 0303 	and.w	r3, r3, #3
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d115      	bne.n	8009614 <HAL_DSI_EnterULPM+0x1e8>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != 0U)
 80095e8:	e00b      	b.n	8009602 <HAL_DSI_EnterULPM+0x1d6>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80095ea:	f7fd fedd 	bl	80073a8 <HAL_GetTick>
 80095ee:	4602      	mov	r2, r0
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	2b64      	cmp	r3, #100	; 0x64
 80095f6:	d904      	bls.n	8009602 <HAL_DSI_EnterULPM+0x1d6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e025      	b.n	800964e <HAL_DSI_EnterULPM+0x222>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != 0U)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800960a:	f403 7394 	and.w	r3, r3, #296	; 0x128
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1eb      	bne.n	80095ea <HAL_DSI_EnterULPM+0x1be>
 8009612:	e004      	b.n	800961e <HAL_DSI_EnterULPM+0x1f2>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e017      	b.n	800964e <HAL_DSI_EnterULPM+0x222>
  }

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 800961e:	2300      	movs	r3, #0
 8009620:	60bb      	str	r3, [r7, #8]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 0201 	bic.w	r2, r2, #1
 8009632:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	60bb      	str	r3, [r7, #8]
 8009644:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	46020c00 	.word	0x46020c00

0800965c <HAL_DSI_ExitULPM>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ExitULPM(DSI_HandleTypeDef *hdsi)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	7e1b      	ldrb	r3, [r3, #24]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d101      	bne.n	8009670 <HAL_DSI_ExitULPM+0x14>
 800966c:	2302      	movs	r3, #2
 800966e:	e125      	b.n	80098bc <HAL_DSI_ExitULPM+0x260>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	761a      	strb	r2, [r3, #24]

  /* Verify that all active lanes are in ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800967e:	f003 0303 	and.w	r3, r3, #3
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10c      	bne.n	80096a0 <HAL_DSI_ExitULPM+0x44>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_RUE0 | DSI_PSR_UAN0 | DSI_PSR_PSS0 | \
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800968e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009692:	2b00      	cmp	r3, #0
 8009694:	d01e      	beq.n	80096d4 <HAL_DSI_ExitULPM+0x78>
                                DSI_PSR_UANC | DSI_PSR_PSSC | DSI_PSR_PD)) != 0U)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	761a      	strb	r2, [r3, #24]

      return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e10d      	b.n	80098bc <HAL_DSI_ExitULPM+0x260>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80096a8:	f003 0303 	and.w	r3, r3, #3
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d10c      	bne.n	80096ca <HAL_DSI_ExitULPM+0x6e>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_RUE0 | DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_UAN1 | \
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096b8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d009      	beq.n	80096d4 <HAL_DSI_ExitULPM+0x78>
                                DSI_PSR_PSS1 | DSI_PSR_UANC | DSI_PSR_PSSC | DSI_PSR_PD)) != 0U)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	761a      	strb	r2, [r3, #24]

      return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e0f8      	b.n	80098bc <HAL_DSI_ExitULPM+0x260>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e0f3      	b.n	80098bc <HAL_DSI_ExitULPM+0x260>
  }

  /* Turn on the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80096d4:	2300      	movs	r3, #0
 80096d6:	60bb      	str	r3, [r7, #8]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f042 0201 	orr.w	r2, r2, #1
 80096e8:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80096f4:	f003 0301 	and.w	r3, r3, #1
 80096f8:	60bb      	str	r3, [r7, #8]
 80096fa:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80096fc:	2001      	movs	r0, #1
 80096fe:	f7fd fe5f 	bl	80073c0 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8009702:	f7fd fe51 	bl	80073a8 <HAL_GetTick>
 8009706:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8009708:	e00b      	b.n	8009722 <HAL_DSI_ExitULPM+0xc6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800970a:	f7fd fe4d 	bl	80073a8 <HAL_GetTick>
 800970e:	4602      	mov	r2, r0
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	2b64      	cmp	r3, #100	; 0x64
 8009716:	d904      	bls.n	8009722 <HAL_DSI_ExitULPM+0xc6>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 800971e:	2303      	movs	r3, #3
 8009720:	e0cc      	b.n	80098bc <HAL_DSI_ExitULPM+0x260>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800972a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800972e:	2b00      	cmp	r3, #0
 8009730:	d0eb      	beq.n	800970a <HAL_DSI_ExitULPM+0xae>
    }
  }

  /* Exit ULPS on Clock and Data Lanes */
  hdsi->Instance->PUCR |= (DSI_PUCR_UECL | DSI_PUCR_UEDL);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f042 020a 	orr.w	r2, r2, #10
 8009742:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Get tick */
  tickstart = HAL_GetTick();
 8009746:	f7fd fe2f 	bl	80073a8 <HAL_GetTick>
 800974a:	60f8      	str	r0, [r7, #12]

  /* Wait until all active lanes exit ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009754:	f003 0303 	and.w	r3, r3, #3
 8009758:	2b00      	cmp	r3, #0
 800975a:	d115      	bne.n	8009788 <HAL_DSI_ExitULPM+0x12c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UANC))
 800975c:	e00b      	b.n	8009776 <HAL_DSI_ExitULPM+0x11a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800975e:	f7fd fe23 	bl	80073a8 <HAL_GetTick>
 8009762:	4602      	mov	r2, r0
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	2b64      	cmp	r3, #100	; 0x64
 800976a:	d904      	bls.n	8009776 <HAL_DSI_ExitULPM+0x11a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009772:	2303      	movs	r3, #3
 8009774:	e0a2      	b.n	80098bc <HAL_DSI_ExitULPM+0x260>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UANC))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800977e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009782:	2b28      	cmp	r3, #40	; 0x28
 8009784:	d1eb      	bne.n	800975e <HAL_DSI_ExitULPM+0x102>
 8009786:	e023      	b.n	80097d0 <HAL_DSI_ExitULPM+0x174>
      }
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009790:	f003 0303 	and.w	r3, r3, #3
 8009794:	2b01      	cmp	r3, #1
 8009796:	d116      	bne.n	80097c6 <HAL_DSI_ExitULPM+0x16a>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UAN1 |
 8009798:	e00b      	b.n	80097b2 <HAL_DSI_ExitULPM+0x156>
                                                                                    DSI_PSR_UANC))
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800979a:	f7fd fe05 	bl	80073a8 <HAL_GetTick>
 800979e:	4602      	mov	r2, r0
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	2b64      	cmp	r3, #100	; 0x64
 80097a6:	d904      	bls.n	80097b2 <HAL_DSI_ExitULPM+0x156>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e084      	b.n	80098bc <HAL_DSI_ExitULPM+0x260>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UAN1 |
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80097ba:	f403 7394 	and.w	r3, r3, #296	; 0x128
 80097be:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 80097c2:	d1ea      	bne.n	800979a <HAL_DSI_ExitULPM+0x13e>
 80097c4:	e004      	b.n	80097d0 <HAL_DSI_ExitULPM+0x174>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e075      	b.n	80098bc <HAL_DSI_ExitULPM+0x260>
  }

  /* wait for 1 ms */
  HAL_Delay(1U);
 80097d0:	2001      	movs	r0, #1
 80097d2:	f7fd fdf5 	bl	80073c0 <HAL_Delay>

  /* De-assert the ULPM requests and the ULPM exit bits */
  hdsi->Instance->PUCR = 0U;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2200      	movs	r2, #0
 80097dc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Switch the lane byte clock source in the RCC from system PLL to D-PHY */
  __HAL_RCC_DSI_CONFIG(RCC_DSICLKSOURCE_DSIPHY);
 80097e0:	4b38      	ldr	r3, [pc, #224]	; (80098c4 <HAL_DSI_ExitULPM+0x268>)
 80097e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80097e6:	4a37      	ldr	r2, [pc, #220]	; (80098c4 <HAL_DSI_ExitULPM+0x268>)
 80097e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097ec:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4

  /* Restore clock lane configuration to HS */
  hdsi->Instance->CLCR |= DSI_CLCR_DPCC;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f042 0201 	orr.w	r2, r2, #1
 8009800:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Verify that D-PHY PLL is enabled */
  if ((hdsi->Instance->WRPCR & DSI_WRPCR_PLLEN) != DSI_WRPCR_PLLEN)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800980c:	f003 0301 	and.w	r3, r3, #1
 8009810:	2b01      	cmp	r3, #1
 8009812:	d004      	beq.n	800981e <HAL_DSI_ExitULPM+0x1c2>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e04e      	b.n	80098bc <HAL_DSI_ExitULPM+0x260>
  }

  /* Verify that all active lanes are in Stop state */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009826:	f003 0303 	and.w	r3, r3, #3
 800982a:	2b00      	cmp	r3, #0
 800982c:	d10c      	bne.n	8009848 <HAL_DSI_ExitULPM+0x1ec>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009836:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800983a:	2b30      	cmp	r3, #48	; 0x30
 800983c:	d01f      	beq.n	800987e <HAL_DSI_ExitULPM+0x222>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e039      	b.n	80098bc <HAL_DSI_ExitULPM+0x260>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009850:	f003 0303 	and.w	r3, r3, #3
 8009854:	2b01      	cmp	r3, #1
 8009856:	d10d      	bne.n	8009874 <HAL_DSI_ExitULPM+0x218>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | \
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009860:	f403 73d8 	and.w	r3, r3, #432	; 0x1b0
 8009864:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8009868:	d009      	beq.n	800987e <HAL_DSI_ExitULPM+0x222>
                                DSI_PSR_UAN1)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_UAN1))
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	e023      	b.n	80098bc <HAL_DSI_ExitULPM+0x260>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e01e      	b.n	80098bc <HAL_DSI_ExitULPM+0x260>
  }

  /* Verify that D-PHY PLL is locked */
  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800987e:	2001      	movs	r0, #1
 8009880:	f7fd fd9e 	bl	80073c0 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8009884:	f7fd fd90 	bl	80073a8 <HAL_GetTick>
 8009888:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800988a:	e00b      	b.n	80098a4 <HAL_DSI_ExitULPM+0x248>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800988c:	f7fd fd8c 	bl	80073a8 <HAL_GetTick>
 8009890:	4602      	mov	r2, r0
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	2b64      	cmp	r3, #100	; 0x64
 8009898:	d904      	bls.n	80098a4 <HAL_DSI_ExitULPM+0x248>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e00b      	b.n	80098bc <HAL_DSI_ExitULPM+0x260>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80098ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d0eb      	beq.n	800988c <HAL_DSI_ExitULPM+0x230>
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	46020c00 	.word	0x46020c00

080098c8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b089      	sub	sp, #36	; 0x24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80098d2:	2300      	movs	r3, #0
 80098d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80098da:	e1ba      	b.n	8009c52 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	2101      	movs	r1, #1
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	fa01 f303 	lsl.w	r3, r1, r3
 80098e8:	4013      	ands	r3, r2
 80098ea:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f000 81aa 	beq.w	8009c4c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a55      	ldr	r2, [pc, #340]	; (8009a50 <HAL_GPIO_Init+0x188>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d15d      	bne.n	80099bc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8009906:	2201      	movs	r2, #1
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	fa02 f303 	lsl.w	r3, r2, r3
 800990e:	43db      	mvns	r3, r3
 8009910:	69fa      	ldr	r2, [r7, #28]
 8009912:	4013      	ands	r3, r2
 8009914:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f003 0201 	and.w	r2, r3, #1
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	fa02 f303 	lsl.w	r3, r2, r3
 8009924:	69fa      	ldr	r2, [r7, #28]
 8009926:	4313      	orrs	r3, r2
 8009928:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	69fa      	ldr	r2, [r7, #28]
 800992e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8009930:	4a48      	ldr	r2, [pc, #288]	; (8009a54 <HAL_GPIO_Init+0x18c>)
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009938:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800993a:	4a46      	ldr	r2, [pc, #280]	; (8009a54 <HAL_GPIO_Init+0x18c>)
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	00db      	lsls	r3, r3, #3
 8009940:	4413      	add	r3, r2
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	08da      	lsrs	r2, r3, #3
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	3208      	adds	r2, #8
 800994e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009952:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	f003 0307 	and.w	r3, r3, #7
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	220f      	movs	r2, #15
 800995e:	fa02 f303 	lsl.w	r3, r2, r3
 8009962:	43db      	mvns	r3, r3
 8009964:	69fa      	ldr	r2, [r7, #28]
 8009966:	4013      	ands	r3, r2
 8009968:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	f003 0307 	and.w	r3, r3, #7
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	220b      	movs	r2, #11
 8009974:	fa02 f303 	lsl.w	r3, r2, r3
 8009978:	69fa      	ldr	r2, [r7, #28]
 800997a:	4313      	orrs	r3, r2
 800997c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	08da      	lsrs	r2, r3, #3
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	3208      	adds	r2, #8
 8009986:	69f9      	ldr	r1, [r7, #28]
 8009988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	005b      	lsls	r3, r3, #1
 8009996:	2203      	movs	r2, #3
 8009998:	fa02 f303 	lsl.w	r3, r2, r3
 800999c:	43db      	mvns	r3, r3
 800999e:	69fa      	ldr	r2, [r7, #28]
 80099a0:	4013      	ands	r3, r2
 80099a2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	005b      	lsls	r3, r3, #1
 80099a8:	2202      	movs	r2, #2
 80099aa:	fa02 f303 	lsl.w	r3, r2, r3
 80099ae:	69fa      	ldr	r2, [r7, #28]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	69fa      	ldr	r2, [r7, #28]
 80099b8:	601a      	str	r2, [r3, #0]
 80099ba:	e067      	b.n	8009a8c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d003      	beq.n	80099cc <HAL_GPIO_Init+0x104>
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	2b12      	cmp	r3, #18
 80099ca:	d145      	bne.n	8009a58 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	08da      	lsrs	r2, r3, #3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	3208      	adds	r2, #8
 80099d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f003 0307 	and.w	r3, r3, #7
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	220f      	movs	r2, #15
 80099e4:	fa02 f303 	lsl.w	r3, r2, r3
 80099e8:	43db      	mvns	r3, r3
 80099ea:	69fa      	ldr	r2, [r7, #28]
 80099ec:	4013      	ands	r3, r2
 80099ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	f003 020f 	and.w	r2, r3, #15
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	f003 0307 	and.w	r3, r3, #7
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	fa02 f303 	lsl.w	r3, r2, r3
 8009a04:	69fa      	ldr	r2, [r7, #28]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	08da      	lsrs	r2, r3, #3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	3208      	adds	r2, #8
 8009a12:	69f9      	ldr	r1, [r7, #28]
 8009a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	005b      	lsls	r3, r3, #1
 8009a22:	2203      	movs	r2, #3
 8009a24:	fa02 f303 	lsl.w	r3, r2, r3
 8009a28:	43db      	mvns	r3, r3
 8009a2a:	69fa      	ldr	r2, [r7, #28]
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	f003 0203 	and.w	r2, r3, #3
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	005b      	lsls	r3, r3, #1
 8009a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a40:	69fa      	ldr	r2, [r7, #28]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	69fa      	ldr	r2, [r7, #28]
 8009a4a:	601a      	str	r2, [r3, #0]
 8009a4c:	e01e      	b.n	8009a8c <HAL_GPIO_Init+0x1c4>
 8009a4e:	bf00      	nop
 8009a50:	46020000 	.word	0x46020000
 8009a54:	0802a868 	.word	0x0802a868
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	005b      	lsls	r3, r3, #1
 8009a62:	2203      	movs	r2, #3
 8009a64:	fa02 f303 	lsl.w	r3, r2, r3
 8009a68:	43db      	mvns	r3, r3
 8009a6a:	69fa      	ldr	r2, [r7, #28]
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f003 0203 	and.w	r2, r3, #3
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	005b      	lsls	r3, r3, #1
 8009a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a80:	69fa      	ldr	r2, [r7, #28]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	69fa      	ldr	r2, [r7, #28]
 8009a8a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d00b      	beq.n	8009aac <HAL_GPIO_Init+0x1e4>
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d007      	beq.n	8009aac <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009aa0:	2b11      	cmp	r3, #17
 8009aa2:	d003      	beq.n	8009aac <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	2b12      	cmp	r3, #18
 8009aaa:	d130      	bne.n	8009b0e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	005b      	lsls	r3, r3, #1
 8009ab6:	2203      	movs	r2, #3
 8009ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8009abc:	43db      	mvns	r3, r3
 8009abe:	69fa      	ldr	r2, [r7, #28]
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	68da      	ldr	r2, [r3, #12]
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	005b      	lsls	r3, r3, #1
 8009acc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad0:	69fa      	ldr	r2, [r7, #28]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	69fa      	ldr	r2, [r7, #28]
 8009ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aea:	43db      	mvns	r3, r3
 8009aec:	69fa      	ldr	r2, [r7, #28]
 8009aee:	4013      	ands	r3, r2
 8009af0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	091b      	lsrs	r3, r3, #4
 8009af8:	f003 0201 	and.w	r2, r3, #1
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	fa02 f303 	lsl.w	r3, r2, r3
 8009b02:	69fa      	ldr	r2, [r7, #28]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	69fa      	ldr	r2, [r7, #28]
 8009b0c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	2b03      	cmp	r3, #3
 8009b14:	d017      	beq.n	8009b46 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	005b      	lsls	r3, r3, #1
 8009b20:	2203      	movs	r2, #3
 8009b22:	fa02 f303 	lsl.w	r3, r2, r3
 8009b26:	43db      	mvns	r3, r3
 8009b28:	69fa      	ldr	r2, [r7, #28]
 8009b2a:	4013      	ands	r3, r2
 8009b2c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	689a      	ldr	r2, [r3, #8]
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	005b      	lsls	r3, r3, #1
 8009b36:	fa02 f303 	lsl.w	r3, r2, r3
 8009b3a:	69fa      	ldr	r2, [r7, #28]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	69fa      	ldr	r2, [r7, #28]
 8009b44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d07c      	beq.n	8009c4c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8009b52:	4a47      	ldr	r2, [pc, #284]	; (8009c70 <HAL_GPIO_Init+0x3a8>)
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	089b      	lsrs	r3, r3, #2
 8009b58:	3318      	adds	r3, #24
 8009b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b5e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	f003 0303 	and.w	r3, r3, #3
 8009b66:	00db      	lsls	r3, r3, #3
 8009b68:	220f      	movs	r2, #15
 8009b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6e:	43db      	mvns	r3, r3
 8009b70:	69fa      	ldr	r2, [r7, #28]
 8009b72:	4013      	ands	r3, r2
 8009b74:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	0a9a      	lsrs	r2, r3, #10
 8009b7a:	4b3e      	ldr	r3, [pc, #248]	; (8009c74 <HAL_GPIO_Init+0x3ac>)
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	f002 0203 	and.w	r2, r2, #3
 8009b84:	00d2      	lsls	r2, r2, #3
 8009b86:	4093      	lsls	r3, r2
 8009b88:	69fa      	ldr	r2, [r7, #28]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8009b8e:	4938      	ldr	r1, [pc, #224]	; (8009c70 <HAL_GPIO_Init+0x3a8>)
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	089b      	lsrs	r3, r3, #2
 8009b94:	3318      	adds	r3, #24
 8009b96:	69fa      	ldr	r2, [r7, #28]
 8009b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8009b9c:	4b34      	ldr	r3, [pc, #208]	; (8009c70 <HAL_GPIO_Init+0x3a8>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	43db      	mvns	r3, r3
 8009ba6:	69fa      	ldr	r2, [r7, #28]
 8009ba8:	4013      	ands	r3, r2
 8009baa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d003      	beq.n	8009bc0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8009bb8:	69fa      	ldr	r2, [r7, #28]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8009bc0:	4a2b      	ldr	r2, [pc, #172]	; (8009c70 <HAL_GPIO_Init+0x3a8>)
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8009bc6:	4b2a      	ldr	r3, [pc, #168]	; (8009c70 <HAL_GPIO_Init+0x3a8>)
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	43db      	mvns	r3, r3
 8009bd0:	69fa      	ldr	r2, [r7, #28]
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d003      	beq.n	8009bea <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8009be2:	69fa      	ldr	r2, [r7, #28]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8009bea:	4a21      	ldr	r2, [pc, #132]	; (8009c70 <HAL_GPIO_Init+0x3a8>)
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8009bf0:	4b1f      	ldr	r3, [pc, #124]	; (8009c70 <HAL_GPIO_Init+0x3a8>)
 8009bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bf6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	43db      	mvns	r3, r3
 8009bfc:	69fa      	ldr	r2, [r7, #28]
 8009bfe:	4013      	ands	r3, r2
 8009c00:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8009c0e:	69fa      	ldr	r2, [r7, #28]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8009c16:	4a16      	ldr	r2, [pc, #88]	; (8009c70 <HAL_GPIO_Init+0x3a8>)
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8009c1e:	4b14      	ldr	r3, [pc, #80]	; (8009c70 <HAL_GPIO_Init+0x3a8>)
 8009c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c24:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	43db      	mvns	r3, r3
 8009c2a:	69fa      	ldr	r2, [r7, #28]
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d003      	beq.n	8009c44 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8009c3c:	69fa      	ldr	r2, [r7, #28]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8009c44:	4a0a      	ldr	r2, [pc, #40]	; (8009c70 <HAL_GPIO_Init+0x3a8>)
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	fa22 f303 	lsr.w	r3, r2, r3
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f47f ae3d 	bne.w	80098dc <HAL_GPIO_Init+0x14>
  }
}
 8009c62:	bf00      	nop
 8009c64:	bf00      	nop
 8009c66:	3724      	adds	r7, #36	; 0x24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	46022000 	.word	0x46022000
 8009c74:	002f7f7f 	.word	0x002f7f7f

08009c78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b089      	sub	sp, #36	; 0x24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8009c82:	2300      	movs	r3, #0
 8009c84:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8009c8a:	e0bc      	b.n	8009e06 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	fa02 f303 	lsl.w	r3, r2, r3
 8009c94:	683a      	ldr	r2, [r7, #0]
 8009c96:	4013      	ands	r3, r2
 8009c98:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 80ad 	beq.w	8009e00 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a5e      	ldr	r2, [pc, #376]	; (8009e24 <HAL_GPIO_DeInit+0x1ac>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d115      	bne.n	8009cda <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8009cae:	4a5e      	ldr	r2, [pc, #376]	; (8009e28 <HAL_GPIO_DeInit+0x1b0>)
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009cb6:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8009cb8:	4a5b      	ldr	r2, [pc, #364]	; (8009e28 <HAL_GPIO_DeInit+0x1b0>)
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	00db      	lsls	r3, r3, #3
 8009cbe:	4413      	add	r3, r2
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8009cc4:	4b57      	ldr	r3, [pc, #348]	; (8009e24 <HAL_GPIO_DeInit+0x1ac>)
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	2101      	movs	r1, #1
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8009cd0:	43db      	mvns	r3, r3
 8009cd2:	4954      	ldr	r1, [pc, #336]	; (8009e24 <HAL_GPIO_DeInit+0x1ac>)
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	600b      	str	r3, [r1, #0]
 8009cd8:	e053      	b.n	8009d82 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8009cda:	4a54      	ldr	r2, [pc, #336]	; (8009e2c <HAL_GPIO_DeInit+0x1b4>)
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	089b      	lsrs	r3, r3, #2
 8009ce0:	3318      	adds	r3, #24
 8009ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ce6:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	f003 0303 	and.w	r3, r3, #3
 8009cee:	00db      	lsls	r3, r3, #3
 8009cf0:	220f      	movs	r2, #15
 8009cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	0a9a      	lsrs	r2, r3, #10
 8009d00:	4b4b      	ldr	r3, [pc, #300]	; (8009e30 <HAL_GPIO_DeInit+0x1b8>)
 8009d02:	4013      	ands	r3, r2
 8009d04:	69ba      	ldr	r2, [r7, #24]
 8009d06:	f002 0203 	and.w	r2, r2, #3
 8009d0a:	00d2      	lsls	r2, r2, #3
 8009d0c:	4093      	lsls	r3, r2
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d136      	bne.n	8009d82 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8009d14:	4b45      	ldr	r3, [pc, #276]	; (8009e2c <HAL_GPIO_DeInit+0x1b4>)
 8009d16:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	43db      	mvns	r3, r3
 8009d1e:	4943      	ldr	r1, [pc, #268]	; (8009e2c <HAL_GPIO_DeInit+0x1b4>)
 8009d20:	4013      	ands	r3, r2
 8009d22:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8009d26:	4b41      	ldr	r3, [pc, #260]	; (8009e2c <HAL_GPIO_DeInit+0x1b4>)
 8009d28:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	43db      	mvns	r3, r3
 8009d30:	493e      	ldr	r1, [pc, #248]	; (8009e2c <HAL_GPIO_DeInit+0x1b4>)
 8009d32:	4013      	ands	r3, r2
 8009d34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8009d38:	4b3c      	ldr	r3, [pc, #240]	; (8009e2c <HAL_GPIO_DeInit+0x1b4>)
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	43db      	mvns	r3, r3
 8009d40:	493a      	ldr	r1, [pc, #232]	; (8009e2c <HAL_GPIO_DeInit+0x1b4>)
 8009d42:	4013      	ands	r3, r2
 8009d44:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8009d46:	4b39      	ldr	r3, [pc, #228]	; (8009e2c <HAL_GPIO_DeInit+0x1b4>)
 8009d48:	685a      	ldr	r2, [r3, #4]
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	43db      	mvns	r3, r3
 8009d4e:	4937      	ldr	r1, [pc, #220]	; (8009e2c <HAL_GPIO_DeInit+0x1b4>)
 8009d50:	4013      	ands	r3, r2
 8009d52:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	f003 0303 	and.w	r3, r3, #3
 8009d5a:	00db      	lsls	r3, r3, #3
 8009d5c:	220f      	movs	r2, #15
 8009d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d62:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8009d64:	4a31      	ldr	r2, [pc, #196]	; (8009e2c <HAL_GPIO_DeInit+0x1b4>)
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	089b      	lsrs	r3, r3, #2
 8009d6a:	3318      	adds	r3, #24
 8009d6c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	43da      	mvns	r2, r3
 8009d74:	482d      	ldr	r0, [pc, #180]	; (8009e2c <HAL_GPIO_DeInit+0x1b4>)
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	089b      	lsrs	r3, r3, #2
 8009d7a:	400a      	ands	r2, r1
 8009d7c:	3318      	adds	r3, #24
 8009d7e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	2103      	movs	r1, #3
 8009d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d90:	431a      	orrs	r2, r3
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	08da      	lsrs	r2, r3, #3
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	3208      	adds	r2, #8
 8009d9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	f003 0307 	and.w	r3, r3, #7
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	220f      	movs	r2, #15
 8009dac:	fa02 f303 	lsl.w	r3, r2, r3
 8009db0:	43db      	mvns	r3, r3
 8009db2:	69fa      	ldr	r2, [r7, #28]
 8009db4:	08d2      	lsrs	r2, r2, #3
 8009db6:	4019      	ands	r1, r3
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	3208      	adds	r2, #8
 8009dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	689a      	ldr	r2, [r3, #8]
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	005b      	lsls	r3, r3, #1
 8009dc8:	2103      	movs	r1, #3
 8009dca:	fa01 f303 	lsl.w	r3, r1, r3
 8009dce:	43db      	mvns	r3, r3
 8009dd0:	401a      	ands	r2, r3
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	2101      	movs	r1, #1
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	fa01 f303 	lsl.w	r3, r1, r3
 8009de2:	43db      	mvns	r3, r3
 8009de4:	401a      	ands	r2, r3
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	68da      	ldr	r2, [r3, #12]
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	005b      	lsls	r3, r3, #1
 8009df2:	2103      	movs	r1, #3
 8009df4:	fa01 f303 	lsl.w	r3, r1, r3
 8009df8:	43db      	mvns	r3, r3
 8009dfa:	401a      	ands	r2, r3
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	3301      	adds	r3, #1
 8009e04:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f47f af3c 	bne.w	8009c8c <HAL_GPIO_DeInit+0x14>
  }
}
 8009e14:	bf00      	nop
 8009e16:	bf00      	nop
 8009e18:	3724      	adds	r7, #36	; 0x24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	46020000 	.word	0x46020000
 8009e28:	0802a868 	.word	0x0802a868
 8009e2c:	46022000 	.word	0x46022000
 8009e30:	002f7f7f 	.word	0x002f7f7f

08009e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	691a      	ldr	r2, [r3, #16]
 8009e44:	887b      	ldrh	r3, [r7, #2]
 8009e46:	4013      	ands	r3, r2
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	73fb      	strb	r3, [r7, #15]
 8009e50:	e001      	b.n	8009e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009e52:	2300      	movs	r3, #0
 8009e54:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8009e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	807b      	strh	r3, [r7, #2]
 8009e70:	4613      	mov	r3, r2
 8009e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e74:	787b      	ldrb	r3, [r7, #1]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009e7a:	887a      	ldrh	r2, [r7, #2]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8009e80:	e002      	b.n	8009e88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8009e82:	887a      	ldrh	r2, [r7, #2]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009e88:	bf00      	nop
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	695b      	ldr	r3, [r3, #20]
 8009ea4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009ea6:	887a      	ldrh	r2, [r7, #2]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	4013      	ands	r3, r2
 8009eac:	041a      	lsls	r2, r3, #16
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	43d9      	mvns	r1, r3
 8009eb2:	887b      	ldrh	r3, [r7, #2]
 8009eb4:	400b      	ands	r3, r1
 8009eb6:	431a      	orrs	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	619a      	str	r2, [r3, #24]
}
 8009ebc:	bf00      	nop
 8009ebe:	3714      	adds	r7, #20
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <HAL_GPIO_EnableHighSPeedLowVoltage>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_EnableHighSPeedLowVoltage(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b08b      	sub	sp, #44	; 0x2c
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	807b      	strh	r3, [r7, #2]
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8009edc:	e03c      	b.n	8009f58 <HAL_GPIO_EnableHighSPeedLowVoltage+0x90>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 8009ede:	887a      	ldrh	r2, [r7, #2]
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	6a3b      	ldr	r3, [r7, #32]
 8009ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ee8:	4013      	ands	r3, r2
 8009eea:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d02f      	beq.n	8009f52 <HAL_GPIO_EnableHighSPeedLowVoltage+0x8a>
    {
      /* In case of LPGPIO Port */
      if (GPIOx == LPGPIO1)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	4a1f      	ldr	r2, [pc, #124]	; (8009f74 <HAL_GPIO_EnableHighSPeedLowVoltage+0xac>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d120      	bne.n	8009f3c <HAL_GPIO_EnableHighSPeedLowVoltage+0x74>
      {
        /* Get GPIO pin position */
        position = POSITION_VAL(GPIO_Pin);
 8009efa:	887b      	ldrh	r3, [r7, #2]
 8009efc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	fa93 f3a3 	rbit	r3, r3
 8009f04:	60fb      	str	r3, [r7, #12]
  return result;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d101      	bne.n	8009f14 <HAL_GPIO_EnableHighSPeedLowVoltage+0x4c>
    return 32U;
 8009f10:	2320      	movs	r3, #32
 8009f12:	e003      	b.n	8009f1c <HAL_GPIO_EnableHighSPeedLowVoltage+0x54>
  return __builtin_clz(value);
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	fab3 f383 	clz	r3, r3
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	623b      	str	r3, [r7, #32]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8009f1e:	4a16      	ldr	r2, [pc, #88]	; (8009f78 <HAL_GPIO_EnableHighSPeedLowVoltage+0xb0>)
 8009f20:	6a3b      	ldr	r3, [r7, #32]
 8009f22:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009f26:	61fb      	str	r3, [r7, #28]
        pin_position = (1UL << (LPGPIO_Map[position].Pin_Pos));
 8009f28:	4a13      	ldr	r2, [pc, #76]	; (8009f78 <HAL_GPIO_EnableHighSPeedLowVoltage+0xb0>)
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	00db      	lsls	r3, r3, #3
 8009f2e:	4413      	add	r3, r2
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	fa02 f303 	lsl.w	r3, r2, r3
 8009f38:	627b      	str	r3, [r7, #36]	; 0x24
 8009f3a:	e004      	b.n	8009f46 <HAL_GPIO_EnableHighSPeedLowVoltage+0x7e>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Save GPIO pin pos */
        pin_position = (1UL << position);
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	fa02 f303 	lsl.w	r3, r2, r3
 8009f44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      /* Set HSLVR gpio pin */
      SET_BIT(p_gpio->HSLVR, pin_position);
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4c:	431a      	orrs	r2, r3
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    position++;
 8009f52:	6a3b      	ldr	r3, [r7, #32]
 8009f54:	3301      	adds	r3, #1
 8009f56:	623b      	str	r3, [r7, #32]
  while ((GPIO_Pin >> position) != 0U)
 8009f58:	887a      	ldrh	r2, [r7, #2]
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	fa42 f303 	asr.w	r3, r2, r3
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1bc      	bne.n	8009ede <HAL_GPIO_EnableHighSPeedLowVoltage+0x16>
  }
}
 8009f64:	bf00      	nop
 8009f66:	bf00      	nop
 8009f68:	372c      	adds	r7, #44	; 0x2c
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	46020000 	.word	0x46020000
 8009f78:	0802a868 	.word	0x0802a868

08009f7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	4603      	mov	r3, r0
 8009f84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8009f86:	4b0f      	ldr	r3, [pc, #60]	; (8009fc4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009f88:	68da      	ldr	r2, [r3, #12]
 8009f8a:	88fb      	ldrh	r3, [r7, #6]
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d006      	beq.n	8009fa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8009f92:	4a0c      	ldr	r2, [pc, #48]	; (8009fc4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009f94:	88fb      	ldrh	r3, [r7, #6]
 8009f96:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8009f98:	88fb      	ldrh	r3, [r7, #6]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f000 f814 	bl	8009fc8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8009fa0:	4b08      	ldr	r3, [pc, #32]	; (8009fc4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009fa2:	691a      	ldr	r2, [r3, #16]
 8009fa4:	88fb      	ldrh	r3, [r7, #6]
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d006      	beq.n	8009fba <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8009fac:	4a05      	ldr	r2, [pc, #20]	; (8009fc4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009fae:	88fb      	ldrh	r3, [r7, #6]
 8009fb0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8009fb2:	88fb      	ldrh	r3, [r7, #6]
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7f7 ff05 	bl	8001dc4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8009fba:	bf00      	nop
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	46022000 	.word	0x46022000

08009fc8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	4603      	mov	r3, r0
 8009fd0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8009fd2:	bf00      	nop
 8009fd4:	370c      	adds	r7, #12
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b082      	sub	sp, #8
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d101      	bne.n	8009ff0 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	e01c      	b.n	800a02a <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	795b      	ldrb	r3, [r3, #5]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d105      	bne.n	800a004 <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7f7 fb27 	bl	800164c <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	791b      	ldrb	r3, [r3, #4]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d101      	bne.n	800a010 <HAL_GPU2D_Init+0x32>
 800a00c:	2302      	movs	r3, #2
 800a00e:	e00c      	b.n	800a02a <HAL_GPU2D_Init+0x4c>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <HAL_GPU2D_ReadRegister>:
  *                   the configuration information for the GPU2D.
  * @param  offset    The register offset from GPU2D base address to read.
  * @retval Register value
  */
uint32_t HAL_GPU2D_ReadRegister(GPU2D_HandleTypeDef *hgpu2d, uint32_t offset)
{
 800a032:	b480      	push	{r7}
 800a034:	b085      	sub	sp, #20
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	6039      	str	r1, [r7, #0]
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
  assert_param(IS_GPU2D_OFFSET(offset));

  /* No locking is required since reading a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  value = GPU2D_ReadReg(hgpu2d->Instance, offset);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	4413      	add	r3, r2
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	60fb      	str	r3, [r7, #12]

  return value;
 800a048:	68fb      	ldr	r3, [r7, #12]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr

0800a056 <HAL_GPU2D_WriteRegister>:
  * @param  offset    The register offset from GPU2D base address to write.
  * @param  value     The value to be written to provided register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_WriteRegister(GPU2D_HandleTypeDef *hgpu2d, uint32_t offset, uint32_t value)
{
 800a056:	b480      	push	{r7}
 800a058:	b085      	sub	sp, #20
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	60f8      	str	r0, [r7, #12]
 800a05e:	60b9      	str	r1, [r7, #8]
 800a060:	607a      	str	r2, [r7, #4]
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
  assert_param(IS_GPU2D_OFFSET(offset));

  /* No locking is required since writing a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  GPU2D_WriteReg(hgpu2d->Instance, offset, value);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	4413      	add	r3, r2
 800a06a:	461a      	mov	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3714      	adds	r7, #20
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b086      	sub	sp, #24
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	33f8      	adds	r3, #248	; 0xf8
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	2b00      	cmp	r3, #0
 800a098:	d013      	beq.n	800a0c2 <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	33f8      	adds	r3, #248	; 0xf8
 800a0a0:	613b      	str	r3, [r7, #16]
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f023 0201 	bic.w	r2, r3, #1
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 800a0ba:	68f9      	ldr	r1, [r7, #12]
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f7f8 fd0b 	bl	8002ad8 <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 800a0c2:	bf00      	nop
 800a0c4:	3718      	adds	r7, #24
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b082      	sub	sp, #8
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f804 	bl	800a0e0 <HAL_GPU2D_ErrorCallback>
}
 800a0d8:	bf00      	nop
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 800a0e8:	e7fe      	b.n	800a0e8 <HAL_GPU2D_ErrorCallback+0x8>

0800a0ea <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b082      	sub	sp, #8
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d101      	bne.n	800a0fc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e081      	b.n	800a200 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b00      	cmp	r3, #0
 800a106:	d106      	bne.n	800a116 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f8a8 	bl	800a266 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2224      	movs	r2, #36	; 0x24
 800a11a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f022 0201 	bic.w	r2, r2, #1
 800a12c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	685a      	ldr	r2, [r3, #4]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a13a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	689a      	ldr	r2, [r3, #8]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a14a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d107      	bne.n	800a164 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a160:	609a      	str	r2, [r3, #8]
 800a162:	e006      	b.n	800a172 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	689a      	ldr	r2, [r3, #8]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a170:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	2b02      	cmp	r3, #2
 800a178:	d104      	bne.n	800a184 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a182:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	6812      	ldr	r2, [r2, #0]
 800a18e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a196:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68da      	ldr	r2, [r3, #12]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a1a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	691a      	ldr	r2, [r3, #16]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	695b      	ldr	r3, [r3, #20]
 800a1b0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	69d9      	ldr	r1, [r3, #28]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a1a      	ldr	r2, [r3, #32]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f042 0201 	orr.w	r2, r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2220      	movs	r2, #32
 800a1ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d101      	bne.n	800a21a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e021      	b.n	800a25e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2224      	movs	r2, #36	; 0x24
 800a21e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f022 0201 	bic.w	r2, r2, #1
 800a230:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f821 	bl	800a27a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a25c:	2300      	movs	r3, #0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a266:	b480      	push	{r7}
 800a268:	b083      	sub	sp, #12
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800a26e:	bf00      	nop
 800a270:	370c      	adds	r7, #12
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr

0800a27a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b083      	sub	sp, #12
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800a282:	bf00      	nop
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
	...

0800a290 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b088      	sub	sp, #32
 800a294:	af02      	add	r7, sp, #8
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	607a      	str	r2, [r7, #4]
 800a29a:	461a      	mov	r2, r3
 800a29c:	460b      	mov	r3, r1
 800a29e:	817b      	strh	r3, [r7, #10]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	2b20      	cmp	r3, #32
 800a2ae:	f040 80db 	bne.w	800a468 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d101      	bne.n	800a2c0 <HAL_I2C_Master_Receive+0x30>
 800a2bc:	2302      	movs	r3, #2
 800a2be:	e0d4      	b.n	800a46a <HAL_I2C_Master_Receive+0x1da>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a2c8:	f7fd f86e 	bl	80073a8 <HAL_GetTick>
 800a2cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	2319      	movs	r3, #25
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f000 fbe2 	bl	800aaa4 <I2C_WaitOnFlagUntilTimeout>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e0bf      	b.n	800a46a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2222      	movs	r2, #34	; 0x22
 800a2ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2210      	movs	r2, #16
 800a2f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	893a      	ldrh	r2, [r7, #8]
 800a30a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a316:	b29b      	uxth	r3, r3
 800a318:	2bff      	cmp	r3, #255	; 0xff
 800a31a:	d90e      	bls.n	800a33a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	22ff      	movs	r2, #255	; 0xff
 800a320:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a326:	b2da      	uxtb	r2, r3
 800a328:	8979      	ldrh	r1, [r7, #10]
 800a32a:	4b52      	ldr	r3, [pc, #328]	; (800a474 <HAL_I2C_Master_Receive+0x1e4>)
 800a32c:	9300      	str	r3, [sp, #0]
 800a32e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f000 fdf2 	bl	800af1c <I2C_TransferConfig>
 800a338:	e06d      	b.n	800a416 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a33e:	b29a      	uxth	r2, r3
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	8979      	ldrh	r1, [r7, #10]
 800a34c:	4b49      	ldr	r3, [pc, #292]	; (800a474 <HAL_I2C_Master_Receive+0x1e4>)
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f000 fde1 	bl	800af1c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800a35a:	e05c      	b.n	800a416 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	6a39      	ldr	r1, [r7, #32]
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f000 fc79 	bl	800ac58 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d001      	beq.n	800a370 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e07c      	b.n	800a46a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37a:	b2d2      	uxtb	r2, r2
 800a37c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a382:	1c5a      	adds	r2, r3, #1
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a38c:	3b01      	subs	r3, #1
 800a38e:	b29a      	uxth	r2, r3
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a398:	b29b      	uxth	r3, r3
 800a39a:	3b01      	subs	r3, #1
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d034      	beq.n	800a416 <HAL_I2C_Master_Receive+0x186>
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d130      	bne.n	800a416 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	6a3b      	ldr	r3, [r7, #32]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	2180      	movs	r1, #128	; 0x80
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 fb70 	bl	800aaa4 <I2C_WaitOnFlagUntilTimeout>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e04d      	b.n	800a46a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	2bff      	cmp	r3, #255	; 0xff
 800a3d6:	d90e      	bls.n	800a3f6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	22ff      	movs	r2, #255	; 0xff
 800a3dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	8979      	ldrh	r1, [r7, #10]
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f000 fd94 	bl	800af1c <I2C_TransferConfig>
 800a3f4:	e00f      	b.n	800a416 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a404:	b2da      	uxtb	r2, r3
 800a406:	8979      	ldrh	r1, [r7, #10]
 800a408:	2300      	movs	r3, #0
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f000 fd83 	bl	800af1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d19d      	bne.n	800a35c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a420:	697a      	ldr	r2, [r7, #20]
 800a422:	6a39      	ldr	r1, [r7, #32]
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f000 fbd3 	bl	800abd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d001      	beq.n	800a434 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	e01a      	b.n	800a46a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2220      	movs	r2, #32
 800a43a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6859      	ldr	r1, [r3, #4]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	4b0c      	ldr	r3, [pc, #48]	; (800a478 <HAL_I2C_Master_Receive+0x1e8>)
 800a448:	400b      	ands	r3, r1
 800a44a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2220      	movs	r2, #32
 800a450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a464:	2300      	movs	r3, #0
 800a466:	e000      	b.n	800a46a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a468:	2302      	movs	r3, #2
  }
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3718      	adds	r7, #24
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	80002400 	.word	0x80002400
 800a478:	fe00e800 	.word	0xfe00e800

0800a47c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b088      	sub	sp, #32
 800a480:	af02      	add	r7, sp, #8
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	4608      	mov	r0, r1
 800a486:	4611      	mov	r1, r2
 800a488:	461a      	mov	r2, r3
 800a48a:	4603      	mov	r3, r0
 800a48c:	817b      	strh	r3, [r7, #10]
 800a48e:	460b      	mov	r3, r1
 800a490:	813b      	strh	r3, [r7, #8]
 800a492:	4613      	mov	r3, r2
 800a494:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b20      	cmp	r3, #32
 800a4a0:	f040 80f9 	bne.w	800a696 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4a4:	6a3b      	ldr	r3, [r7, #32]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d002      	beq.n	800a4b0 <HAL_I2C_Mem_Write+0x34>
 800a4aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d105      	bne.n	800a4bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e0ed      	b.n	800a698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d101      	bne.n	800a4ca <HAL_I2C_Mem_Write+0x4e>
 800a4c6:	2302      	movs	r3, #2
 800a4c8:	e0e6      	b.n	800a698 <HAL_I2C_Mem_Write+0x21c>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a4d2:	f7fc ff69 	bl	80073a8 <HAL_GetTick>
 800a4d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	2319      	movs	r3, #25
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f000 fadd 	bl	800aaa4 <I2C_WaitOnFlagUntilTimeout>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d001      	beq.n	800a4f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e0d1      	b.n	800a698 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2221      	movs	r2, #33	; 0x21
 800a4f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2240      	movs	r2, #64	; 0x40
 800a500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6a3a      	ldr	r2, [r7, #32]
 800a50e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a51c:	88f8      	ldrh	r0, [r7, #6]
 800a51e:	893a      	ldrh	r2, [r7, #8]
 800a520:	8979      	ldrh	r1, [r7, #10]
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	9301      	str	r3, [sp, #4]
 800a526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	4603      	mov	r3, r0
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f000 f9ed 	bl	800a90c <I2C_RequestMemoryWrite>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d005      	beq.n	800a544 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e0a9      	b.n	800a698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a548:	b29b      	uxth	r3, r3
 800a54a:	2bff      	cmp	r3, #255	; 0xff
 800a54c:	d90e      	bls.n	800a56c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	22ff      	movs	r2, #255	; 0xff
 800a552:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	8979      	ldrh	r1, [r7, #10]
 800a55c:	2300      	movs	r3, #0
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 fcd9 	bl	800af1c <I2C_TransferConfig>
 800a56a:	e00f      	b.n	800a58c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a570:	b29a      	uxth	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a57a:	b2da      	uxtb	r2, r3
 800a57c:	8979      	ldrh	r1, [r7, #10]
 800a57e:	2300      	movs	r3, #0
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f000 fcc8 	bl	800af1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f000 fad6 	bl	800ab42 <I2C_WaitOnTXISFlagUntilTimeout>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d001      	beq.n	800a5a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	e07b      	b.n	800a698 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a4:	781a      	ldrb	r2, [r3, #0]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b0:	1c5a      	adds	r2, r3, #1
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d034      	beq.n	800a644 <HAL_I2C_Mem_Write+0x1c8>
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d130      	bne.n	800a644 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	2180      	movs	r1, #128	; 0x80
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	f000 fa59 	bl	800aaa4 <I2C_WaitOnFlagUntilTimeout>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e04d      	b.n	800a698 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a600:	b29b      	uxth	r3, r3
 800a602:	2bff      	cmp	r3, #255	; 0xff
 800a604:	d90e      	bls.n	800a624 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	22ff      	movs	r2, #255	; 0xff
 800a60a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a610:	b2da      	uxtb	r2, r3
 800a612:	8979      	ldrh	r1, [r7, #10]
 800a614:	2300      	movs	r3, #0
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f000 fc7d 	bl	800af1c <I2C_TransferConfig>
 800a622:	e00f      	b.n	800a644 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a628:	b29a      	uxth	r2, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a632:	b2da      	uxtb	r2, r3
 800a634:	8979      	ldrh	r1, [r7, #10]
 800a636:	2300      	movs	r3, #0
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f000 fc6c 	bl	800af1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a648:	b29b      	uxth	r3, r3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d19e      	bne.n	800a58c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f000 fabc 	bl	800abd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d001      	beq.n	800a662 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e01a      	b.n	800a698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2220      	movs	r2, #32
 800a668:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	6859      	ldr	r1, [r3, #4]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	4b0a      	ldr	r3, [pc, #40]	; (800a6a0 <HAL_I2C_Mem_Write+0x224>)
 800a676:	400b      	ands	r3, r1
 800a678:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2220      	movs	r2, #32
 800a67e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	e000      	b.n	800a698 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a696:	2302      	movs	r3, #2
  }
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3718      	adds	r7, #24
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	fe00e800 	.word	0xfe00e800

0800a6a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b088      	sub	sp, #32
 800a6a8:	af02      	add	r7, sp, #8
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	4608      	mov	r0, r1
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	817b      	strh	r3, [r7, #10]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	813b      	strh	r3, [r7, #8]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	2b20      	cmp	r3, #32
 800a6c8:	f040 80fd 	bne.w	800a8c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d002      	beq.n	800a6d8 <HAL_I2C_Mem_Read+0x34>
 800a6d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d105      	bne.n	800a6e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e0f1      	b.n	800a8c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d101      	bne.n	800a6f2 <HAL_I2C_Mem_Read+0x4e>
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	e0ea      	b.n	800a8c8 <HAL_I2C_Mem_Read+0x224>
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a6fa:	f7fc fe55 	bl	80073a8 <HAL_GetTick>
 800a6fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	2319      	movs	r3, #25
 800a706:	2201      	movs	r2, #1
 800a708:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f000 f9c9 	bl	800aaa4 <I2C_WaitOnFlagUntilTimeout>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d001      	beq.n	800a71c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e0d5      	b.n	800a8c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2222      	movs	r2, #34	; 0x22
 800a720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2240      	movs	r2, #64	; 0x40
 800a728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6a3a      	ldr	r2, [r7, #32]
 800a736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a73c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a744:	88f8      	ldrh	r0, [r7, #6]
 800a746:	893a      	ldrh	r2, [r7, #8]
 800a748:	8979      	ldrh	r1, [r7, #10]
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	9301      	str	r3, [sp, #4]
 800a74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	4603      	mov	r3, r0
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f000 f92d 	bl	800a9b4 <I2C_RequestMemoryRead>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d005      	beq.n	800a76c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e0ad      	b.n	800a8c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a770:	b29b      	uxth	r3, r3
 800a772:	2bff      	cmp	r3, #255	; 0xff
 800a774:	d90e      	bls.n	800a794 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	22ff      	movs	r2, #255	; 0xff
 800a77a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a780:	b2da      	uxtb	r2, r3
 800a782:	8979      	ldrh	r1, [r7, #10]
 800a784:	4b52      	ldr	r3, [pc, #328]	; (800a8d0 <HAL_I2C_Mem_Read+0x22c>)
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f000 fbc5 	bl	800af1c <I2C_TransferConfig>
 800a792:	e00f      	b.n	800a7b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a798:	b29a      	uxth	r2, r3
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	8979      	ldrh	r1, [r7, #10]
 800a7a6:	4b4a      	ldr	r3, [pc, #296]	; (800a8d0 <HAL_I2C_Mem_Read+0x22c>)
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f000 fbb4 	bl	800af1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2104      	movs	r1, #4
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f000 f970 	bl	800aaa4 <I2C_WaitOnFlagUntilTimeout>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e07c      	b.n	800a8c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d8:	b2d2      	uxtb	r2, r2
 800a7da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e0:	1c5a      	adds	r2, r3, #1
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a804:	b29b      	uxth	r3, r3
 800a806:	2b00      	cmp	r3, #0
 800a808:	d034      	beq.n	800a874 <HAL_I2C_Mem_Read+0x1d0>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d130      	bne.n	800a874 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a818:	2200      	movs	r2, #0
 800a81a:	2180      	movs	r1, #128	; 0x80
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f000 f941 	bl	800aaa4 <I2C_WaitOnFlagUntilTimeout>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d001      	beq.n	800a82c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	e04d      	b.n	800a8c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a830:	b29b      	uxth	r3, r3
 800a832:	2bff      	cmp	r3, #255	; 0xff
 800a834:	d90e      	bls.n	800a854 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	22ff      	movs	r2, #255	; 0xff
 800a83a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a840:	b2da      	uxtb	r2, r3
 800a842:	8979      	ldrh	r1, [r7, #10]
 800a844:	2300      	movs	r3, #0
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f000 fb65 	bl	800af1c <I2C_TransferConfig>
 800a852:	e00f      	b.n	800a874 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a858:	b29a      	uxth	r2, r3
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a862:	b2da      	uxtb	r2, r3
 800a864:	8979      	ldrh	r1, [r7, #10]
 800a866:	2300      	movs	r3, #0
 800a868:	9300      	str	r3, [sp, #0]
 800a86a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f000 fb54 	bl	800af1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a878:	b29b      	uxth	r3, r3
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d19a      	bne.n	800a7b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a87e:	697a      	ldr	r2, [r7, #20]
 800a880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f000 f9a4 	bl	800abd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e01a      	b.n	800a8c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2220      	movs	r2, #32
 800a898:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	6859      	ldr	r1, [r3, #4]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	4b0b      	ldr	r3, [pc, #44]	; (800a8d4 <HAL_I2C_Mem_Read+0x230>)
 800a8a6:	400b      	ands	r3, r1
 800a8a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2220      	movs	r2, #32
 800a8ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	e000      	b.n	800a8c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a8c6:	2302      	movs	r3, #2
  }
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3718      	adds	r7, #24
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	80002400 	.word	0x80002400
 800a8d4:	fe00e800 	.word	0xfe00e800

0800a8d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8e6:	b2db      	uxtb	r3, r3
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800a900:	4618      	mov	r0, r3
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b086      	sub	sp, #24
 800a910:	af02      	add	r7, sp, #8
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	4608      	mov	r0, r1
 800a916:	4611      	mov	r1, r2
 800a918:	461a      	mov	r2, r3
 800a91a:	4603      	mov	r3, r0
 800a91c:	817b      	strh	r3, [r7, #10]
 800a91e:	460b      	mov	r3, r1
 800a920:	813b      	strh	r3, [r7, #8]
 800a922:	4613      	mov	r3, r2
 800a924:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a926:	88fb      	ldrh	r3, [r7, #6]
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	8979      	ldrh	r1, [r7, #10]
 800a92c:	4b20      	ldr	r3, [pc, #128]	; (800a9b0 <I2C_RequestMemoryWrite+0xa4>)
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a934:	68f8      	ldr	r0, [r7, #12]
 800a936:	f000 faf1 	bl	800af1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a93a:	69fa      	ldr	r2, [r7, #28]
 800a93c:	69b9      	ldr	r1, [r7, #24]
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f000 f8ff 	bl	800ab42 <I2C_WaitOnTXISFlagUntilTimeout>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d001      	beq.n	800a94e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	e02c      	b.n	800a9a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a94e:	88fb      	ldrh	r3, [r7, #6]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d105      	bne.n	800a960 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a954:	893b      	ldrh	r3, [r7, #8]
 800a956:	b2da      	uxtb	r2, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	629a      	str	r2, [r3, #40]	; 0x28
 800a95e:	e015      	b.n	800a98c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a960:	893b      	ldrh	r3, [r7, #8]
 800a962:	0a1b      	lsrs	r3, r3, #8
 800a964:	b29b      	uxth	r3, r3
 800a966:	b2da      	uxtb	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a96e:	69fa      	ldr	r2, [r7, #28]
 800a970:	69b9      	ldr	r1, [r7, #24]
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f000 f8e5 	bl	800ab42 <I2C_WaitOnTXISFlagUntilTimeout>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d001      	beq.n	800a982 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	e012      	b.n	800a9a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a982:	893b      	ldrh	r3, [r7, #8]
 800a984:	b2da      	uxtb	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	2200      	movs	r2, #0
 800a994:	2180      	movs	r1, #128	; 0x80
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f000 f884 	bl	800aaa4 <I2C_WaitOnFlagUntilTimeout>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d001      	beq.n	800a9a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e000      	b.n	800a9a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	80002000 	.word	0x80002000

0800a9b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b086      	sub	sp, #24
 800a9b8:	af02      	add	r7, sp, #8
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	4608      	mov	r0, r1
 800a9be:	4611      	mov	r1, r2
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	817b      	strh	r3, [r7, #10]
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	813b      	strh	r3, [r7, #8]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a9ce:	88fb      	ldrh	r3, [r7, #6]
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	8979      	ldrh	r1, [r7, #10]
 800a9d4:	4b20      	ldr	r3, [pc, #128]	; (800aa58 <I2C_RequestMemoryRead+0xa4>)
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	2300      	movs	r3, #0
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f000 fa9e 	bl	800af1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9e0:	69fa      	ldr	r2, [r7, #28]
 800a9e2:	69b9      	ldr	r1, [r7, #24]
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f000 f8ac 	bl	800ab42 <I2C_WaitOnTXISFlagUntilTimeout>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d001      	beq.n	800a9f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e02c      	b.n	800aa4e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a9f4:	88fb      	ldrh	r3, [r7, #6]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d105      	bne.n	800aa06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a9fa:	893b      	ldrh	r3, [r7, #8]
 800a9fc:	b2da      	uxtb	r2, r3
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	629a      	str	r2, [r3, #40]	; 0x28
 800aa04:	e015      	b.n	800aa32 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800aa06:	893b      	ldrh	r3, [r7, #8]
 800aa08:	0a1b      	lsrs	r3, r3, #8
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa14:	69fa      	ldr	r2, [r7, #28]
 800aa16:	69b9      	ldr	r1, [r7, #24]
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f000 f892 	bl	800ab42 <I2C_WaitOnTXISFlagUntilTimeout>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d001      	beq.n	800aa28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	e012      	b.n	800aa4e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aa28:	893b      	ldrh	r3, [r7, #8]
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	2140      	movs	r1, #64	; 0x40
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 f831 	bl	800aaa4 <I2C_WaitOnFlagUntilTimeout>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d001      	beq.n	800aa4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e000      	b.n	800aa4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	80002000 	.word	0x80002000

0800aa5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	f003 0302 	and.w	r3, r3, #2
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d103      	bne.n	800aa7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2200      	movs	r2, #0
 800aa78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d007      	beq.n	800aa98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	699a      	ldr	r2, [r3, #24]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f042 0201 	orr.w	r2, r2, #1
 800aa96:	619a      	str	r2, [r3, #24]
  }
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	603b      	str	r3, [r7, #0]
 800aab0:	4613      	mov	r3, r2
 800aab2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aab4:	e031      	b.n	800ab1a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aabc:	d02d      	beq.n	800ab1a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aabe:	f7fc fc73 	bl	80073a8 <HAL_GetTick>
 800aac2:	4602      	mov	r2, r0
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	683a      	ldr	r2, [r7, #0]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d302      	bcc.n	800aad4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d122      	bne.n	800ab1a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	699a      	ldr	r2, [r3, #24]
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	4013      	ands	r3, r2
 800aade:	68ba      	ldr	r2, [r7, #8]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	bf0c      	ite	eq
 800aae4:	2301      	moveq	r3, #1
 800aae6:	2300      	movne	r3, #0
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	461a      	mov	r2, r3
 800aaec:	79fb      	ldrb	r3, [r7, #7]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d113      	bne.n	800ab1a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaf6:	f043 0220 	orr.w	r2, r3, #32
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2220      	movs	r2, #32
 800ab02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800ab16:	2301      	movs	r3, #1
 800ab18:	e00f      	b.n	800ab3a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	699a      	ldr	r2, [r3, #24]
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	4013      	ands	r3, r2
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	bf0c      	ite	eq
 800ab2a:	2301      	moveq	r3, #1
 800ab2c:	2300      	movne	r3, #0
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	461a      	mov	r2, r3
 800ab32:	79fb      	ldrb	r3, [r7, #7]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d0be      	beq.n	800aab6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b084      	sub	sp, #16
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	60f8      	str	r0, [r7, #12]
 800ab4a:	60b9      	str	r1, [r7, #8]
 800ab4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ab4e:	e033      	b.n	800abb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	68b9      	ldr	r1, [r7, #8]
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f000 f901 	bl	800ad5c <I2C_IsErrorOccurred>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	e031      	b.n	800abc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6a:	d025      	beq.n	800abb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab6c:	f7fc fc1c 	bl	80073a8 <HAL_GetTick>
 800ab70:	4602      	mov	r2, r0
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	1ad3      	subs	r3, r2, r3
 800ab76:	68ba      	ldr	r2, [r7, #8]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d302      	bcc.n	800ab82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d11a      	bne.n	800abb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	f003 0302 	and.w	r3, r3, #2
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	d013      	beq.n	800abb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab94:	f043 0220 	orr.w	r2, r3, #32
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2220      	movs	r2, #32
 800aba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2200      	movs	r2, #0
 800abb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e007      	b.n	800abc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	699b      	ldr	r3, [r3, #24]
 800abbe:	f003 0302 	and.w	r3, r3, #2
 800abc2:	2b02      	cmp	r3, #2
 800abc4:	d1c4      	bne.n	800ab50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800abdc:	e02f      	b.n	800ac3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	68b9      	ldr	r1, [r7, #8]
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f000 f8ba 	bl	800ad5c <I2C_IsErrorOccurred>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d001      	beq.n	800abf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e02d      	b.n	800ac4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abf2:	f7fc fbd9 	bl	80073a8 <HAL_GetTick>
 800abf6:	4602      	mov	r2, r0
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d302      	bcc.n	800ac08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d11a      	bne.n	800ac3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	f003 0320 	and.w	r3, r3, #32
 800ac12:	2b20      	cmp	r3, #32
 800ac14:	d013      	beq.n	800ac3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac1a:	f043 0220 	orr.w	r2, r3, #32
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2220      	movs	r2, #32
 800ac26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e007      	b.n	800ac4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	699b      	ldr	r3, [r3, #24]
 800ac44:	f003 0320 	and.w	r3, r3, #32
 800ac48:	2b20      	cmp	r3, #32
 800ac4a:	d1c8      	bne.n	800abde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
	...

0800ac58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac64:	e06b      	b.n	800ad3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	68b9      	ldr	r1, [r7, #8]
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f000 f876 	bl	800ad5c <I2C_IsErrorOccurred>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	e069      	b.n	800ad4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	699b      	ldr	r3, [r3, #24]
 800ac80:	f003 0320 	and.w	r3, r3, #32
 800ac84:	2b20      	cmp	r3, #32
 800ac86:	d138      	bne.n	800acfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	f003 0304 	and.w	r3, r3, #4
 800ac92:	2b04      	cmp	r3, #4
 800ac94:	d105      	bne.n	800aca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	e055      	b.n	800ad4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	699b      	ldr	r3, [r3, #24]
 800aca8:	f003 0310 	and.w	r3, r3, #16
 800acac:	2b10      	cmp	r3, #16
 800acae:	d107      	bne.n	800acc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2210      	movs	r2, #16
 800acb6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2204      	movs	r2, #4
 800acbc:	645a      	str	r2, [r3, #68]	; 0x44
 800acbe:	e002      	b.n	800acc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2200      	movs	r2, #0
 800acc4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2220      	movs	r2, #32
 800accc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	6859      	ldr	r1, [r3, #4]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	4b1f      	ldr	r3, [pc, #124]	; (800ad58 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800acda:	400b      	ands	r3, r1
 800acdc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2220      	movs	r2, #32
 800ace2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	e029      	b.n	800ad4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acfa:	f7fc fb55 	bl	80073a8 <HAL_GetTick>
 800acfe:	4602      	mov	r2, r0
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	1ad3      	subs	r3, r2, r3
 800ad04:	68ba      	ldr	r2, [r7, #8]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d302      	bcc.n	800ad10 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d116      	bne.n	800ad3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	699b      	ldr	r3, [r3, #24]
 800ad16:	f003 0304 	and.w	r3, r3, #4
 800ad1a:	2b04      	cmp	r3, #4
 800ad1c:	d00f      	beq.n	800ad3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad22:	f043 0220 	orr.w	r2, r3, #32
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2220      	movs	r2, #32
 800ad2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e007      	b.n	800ad4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	f003 0304 	and.w	r3, r3, #4
 800ad48:	2b04      	cmp	r3, #4
 800ad4a:	d18c      	bne.n	800ac66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	fe00e800 	.word	0xfe00e800

0800ad5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b08a      	sub	sp, #40	; 0x28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	f003 0310 	and.w	r3, r3, #16
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d068      	beq.n	800ae5a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2210      	movs	r2, #16
 800ad8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ad90:	e049      	b.n	800ae26 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad98:	d045      	beq.n	800ae26 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ad9a:	f7fc fb05 	bl	80073a8 <HAL_GetTick>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	1ad3      	subs	r3, r2, r3
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d302      	bcc.n	800adb0 <I2C_IsErrorOccurred+0x54>
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d13a      	bne.n	800ae26 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800adc2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800add2:	d121      	bne.n	800ae18 <I2C_IsErrorOccurred+0xbc>
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adda:	d01d      	beq.n	800ae18 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800addc:	7cfb      	ldrb	r3, [r7, #19]
 800adde:	2b20      	cmp	r3, #32
 800ade0:	d01a      	beq.n	800ae18 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800adf0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800adf2:	f7fc fad9 	bl	80073a8 <HAL_GetTick>
 800adf6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800adf8:	e00e      	b.n	800ae18 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800adfa:	f7fc fad5 	bl	80073a8 <HAL_GetTick>
 800adfe:	4602      	mov	r2, r0
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	2b19      	cmp	r3, #25
 800ae06:	d907      	bls.n	800ae18 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ae08:	6a3b      	ldr	r3, [r7, #32]
 800ae0a:	f043 0320 	orr.w	r3, r3, #32
 800ae0e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800ae16:	e006      	b.n	800ae26 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	f003 0320 	and.w	r3, r3, #32
 800ae22:	2b20      	cmp	r3, #32
 800ae24:	d1e9      	bne.n	800adfa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	699b      	ldr	r3, [r3, #24]
 800ae2c:	f003 0320 	and.w	r3, r3, #32
 800ae30:	2b20      	cmp	r3, #32
 800ae32:	d003      	beq.n	800ae3c <I2C_IsErrorOccurred+0xe0>
 800ae34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d0aa      	beq.n	800ad92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ae3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d103      	bne.n	800ae4c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2220      	movs	r2, #32
 800ae4a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	f043 0304 	orr.w	r3, r3, #4
 800ae52:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	699b      	ldr	r3, [r3, #24]
 800ae60:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00b      	beq.n	800ae84 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ae6c:	6a3b      	ldr	r3, [r7, #32]
 800ae6e:	f043 0301 	orr.w	r3, r3, #1
 800ae72:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00b      	beq.n	800aea6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ae8e:	6a3b      	ldr	r3, [r7, #32]
 800ae90:	f043 0308 	orr.w	r3, r3, #8
 800ae94:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d00b      	beq.n	800aec8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800aeb0:	6a3b      	ldr	r3, [r7, #32]
 800aeb2:	f043 0302 	orr.w	r3, r3, #2
 800aeb6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aec0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800aec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d01c      	beq.n	800af0a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f7ff fdc3 	bl	800aa5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	6859      	ldr	r1, [r3, #4]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	4b0d      	ldr	r3, [pc, #52]	; (800af18 <I2C_IsErrorOccurred+0x1bc>)
 800aee2:	400b      	ands	r3, r1
 800aee4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeea:	6a3b      	ldr	r3, [r7, #32]
 800aeec:	431a      	orrs	r2, r3
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2220      	movs	r2, #32
 800aef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800af0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3728      	adds	r7, #40	; 0x28
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	fe00e800 	.word	0xfe00e800

0800af1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b087      	sub	sp, #28
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	607b      	str	r3, [r7, #4]
 800af26:	460b      	mov	r3, r1
 800af28:	817b      	strh	r3, [r7, #10]
 800af2a:	4613      	mov	r3, r2
 800af2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af2e:	897b      	ldrh	r3, [r7, #10]
 800af30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800af34:	7a7b      	ldrb	r3, [r7, #9]
 800af36:	041b      	lsls	r3, r3, #16
 800af38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af3c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af42:	6a3b      	ldr	r3, [r7, #32]
 800af44:	4313      	orrs	r3, r2
 800af46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af4a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	685a      	ldr	r2, [r3, #4]
 800af52:	6a3b      	ldr	r3, [r7, #32]
 800af54:	0d5b      	lsrs	r3, r3, #21
 800af56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800af5a:	4b08      	ldr	r3, [pc, #32]	; (800af7c <I2C_TransferConfig+0x60>)
 800af5c:	430b      	orrs	r3, r1
 800af5e:	43db      	mvns	r3, r3
 800af60:	ea02 0103 	and.w	r1, r2, r3
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	697a      	ldr	r2, [r7, #20]
 800af6a:	430a      	orrs	r2, r1
 800af6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800af6e:	bf00      	nop
 800af70:	371c      	adds	r7, #28
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	03ff63ff 	.word	0x03ff63ff

0800af80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b20      	cmp	r3, #32
 800af94:	d138      	bne.n	800b008 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d101      	bne.n	800afa4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800afa0:	2302      	movs	r3, #2
 800afa2:	e032      	b.n	800b00a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2224      	movs	r2, #36	; 0x24
 800afb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f022 0201 	bic.w	r2, r2, #1
 800afc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800afd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	6819      	ldr	r1, [r3, #0]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	430a      	orrs	r2, r1
 800afe2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f042 0201 	orr.w	r2, r2, #1
 800aff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2220      	movs	r2, #32
 800aff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b004:	2300      	movs	r3, #0
 800b006:	e000      	b.n	800b00a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b008:	2302      	movs	r3, #2
  }
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr

0800b016 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b016:	b480      	push	{r7}
 800b018:	b085      	sub	sp, #20
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
 800b01e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b026:	b2db      	uxtb	r3, r3
 800b028:	2b20      	cmp	r3, #32
 800b02a:	d139      	bne.n	800b0a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b032:	2b01      	cmp	r3, #1
 800b034:	d101      	bne.n	800b03a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b036:	2302      	movs	r3, #2
 800b038:	e033      	b.n	800b0a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2201      	movs	r2, #1
 800b03e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2224      	movs	r2, #36	; 0x24
 800b046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f022 0201 	bic.w	r2, r2, #1
 800b058:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b068:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	021b      	lsls	r3, r3, #8
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	4313      	orrs	r3, r2
 800b072:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f042 0201 	orr.w	r2, r2, #1
 800b08a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2220      	movs	r2, #32
 800b090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b09c:	2300      	movs	r3, #0
 800b09e:	e000      	b.n	800b0a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b0a0:	2302      	movs	r3, #2
  }
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3714      	adds	r7, #20
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
	...

0800b0b0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800b0bc:	4b0b      	ldr	r3, [pc, #44]	; (800b0ec <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f003 0301 	and.w	r3, r3, #1
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	73fb      	strb	r3, [r7, #15]
 800b0cc:	e007      	b.n	800b0de <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800b0ce:	4b07      	ldr	r3, [pc, #28]	; (800b0ec <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f023 0204 	bic.w	r2, r3, #4
 800b0d6:	4905      	ldr	r1, [pc, #20]	; (800b0ec <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	600b      	str	r3, [r1, #0]
  }

  return status;
 800b0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3714      	adds	r7, #20
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr
 800b0ec:	40030400 	.word	0x40030400

0800b0f0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800b0f4:	4b05      	ldr	r3, [pc, #20]	; (800b10c <HAL_ICACHE_Enable+0x1c>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a04      	ldr	r2, [pc, #16]	; (800b10c <HAL_ICACHE_Enable+0x1c>)
 800b0fa:	f043 0301 	orr.w	r3, r3, #1
 800b0fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	40030400 	.word	0x40030400

0800b110 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e0bf      	b.n	800b2a2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d106      	bne.n	800b13c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7f6 fb00 	bl	800173c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2202      	movs	r2, #2
 800b140:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	699a      	ldr	r2, [r3, #24]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800b152:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	6999      	ldr	r1, [r3, #24]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	685a      	ldr	r2, [r3, #4]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b168:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	430a      	orrs	r2, r1
 800b176:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	6899      	ldr	r1, [r3, #8]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	4b4a      	ldr	r3, [pc, #296]	; (800b2ac <HAL_LTDC_Init+0x19c>)
 800b184:	400b      	ands	r3, r1
 800b186:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	695b      	ldr	r3, [r3, #20]
 800b18c:	041b      	lsls	r3, r3, #16
 800b18e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	6899      	ldr	r1, [r3, #8]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	699a      	ldr	r2, [r3, #24]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	431a      	orrs	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	430a      	orrs	r2, r1
 800b1a4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	68d9      	ldr	r1, [r3, #12]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	4b3e      	ldr	r3, [pc, #248]	; (800b2ac <HAL_LTDC_Init+0x19c>)
 800b1b2:	400b      	ands	r3, r1
 800b1b4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	69db      	ldr	r3, [r3, #28]
 800b1ba:	041b      	lsls	r3, r3, #16
 800b1bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68d9      	ldr	r1, [r3, #12]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6a1a      	ldr	r2, [r3, #32]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	431a      	orrs	r2, r3
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	430a      	orrs	r2, r1
 800b1d2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	6919      	ldr	r1, [r3, #16]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	4b33      	ldr	r3, [pc, #204]	; (800b2ac <HAL_LTDC_Init+0x19c>)
 800b1e0:	400b      	ands	r3, r1
 800b1e2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e8:	041b      	lsls	r3, r3, #16
 800b1ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6919      	ldr	r1, [r3, #16]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	431a      	orrs	r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	430a      	orrs	r2, r1
 800b200:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	6959      	ldr	r1, [r3, #20]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	4b27      	ldr	r3, [pc, #156]	; (800b2ac <HAL_LTDC_Init+0x19c>)
 800b20e:	400b      	ands	r3, r1
 800b210:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b216:	041b      	lsls	r3, r3, #16
 800b218:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	6959      	ldr	r1, [r3, #20]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	431a      	orrs	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	430a      	orrs	r2, r1
 800b22e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b236:	021b      	lsls	r3, r3, #8
 800b238:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b240:	041b      	lsls	r3, r3, #16
 800b242:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800b252:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	4313      	orrs	r3, r2
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800b266:	431a      	orrs	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	430a      	orrs	r2, r1
 800b26e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f042 0206 	orr.w	r2, r2, #6
 800b27e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	699a      	ldr	r2, [r3, #24]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f042 0201 	orr.w	r2, r2, #1
 800b28e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	f000f800 	.word	0xf000f800

0800b2b0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2c6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f003 0304 	and.w	r3, r3, #4
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d023      	beq.n	800b31a <HAL_LTDC_IRQHandler+0x6a>
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	f003 0304 	and.w	r3, r3, #4
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d01e      	beq.n	800b31a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f022 0204 	bic.w	r2, r2, #4
 800b2ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2204      	movs	r2, #4
 800b2f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b2fa:	f043 0201 	orr.w	r2, r3, #1
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2204      	movs	r2, #4
 800b308:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f86f 	bl	800b3f8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f003 0302 	and.w	r3, r3, #2
 800b320:	2b00      	cmp	r3, #0
 800b322:	d023      	beq.n	800b36c <HAL_LTDC_IRQHandler+0xbc>
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	f003 0302 	and.w	r3, r3, #2
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d01e      	beq.n	800b36c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f022 0202 	bic.w	r2, r2, #2
 800b33c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2202      	movs	r2, #2
 800b344:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b34c:	f043 0202 	orr.w	r2, r3, #2
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2204      	movs	r2, #4
 800b35a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2200      	movs	r2, #0
 800b362:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 f846 	bl	800b3f8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f003 0301 	and.w	r3, r3, #1
 800b372:	2b00      	cmp	r3, #0
 800b374:	d01b      	beq.n	800b3ae <HAL_LTDC_IRQHandler+0xfe>
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	f003 0301 	and.w	r3, r3, #1
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d016      	beq.n	800b3ae <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f022 0201 	bic.w	r2, r2, #1
 800b38e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2201      	movs	r2, #1
 800b396:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f7f7 fb63 	bl	8002a74 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f003 0308 	and.w	r3, r3, #8
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d01b      	beq.n	800b3f0 <HAL_LTDC_IRQHandler+0x140>
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	f003 0308 	and.w	r3, r3, #8
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d016      	beq.n	800b3f0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f022 0208 	bic.w	r2, r2, #8
 800b3d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2208      	movs	r2, #8
 800b3d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2201      	movs	r2, #1
 800b3de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 f80e 	bl	800b40c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800b3f0:	bf00      	nop
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800b400:	bf00      	nop
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b420:	b5b0      	push	{r4, r5, r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b432:	2b01      	cmp	r3, #1
 800b434:	d101      	bne.n	800b43a <HAL_LTDC_ConfigLayer+0x1a>
 800b436:	2302      	movs	r3, #2
 800b438:	e02c      	b.n	800b494 <HAL_LTDC_ConfigLayer+0x74>
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2201      	movs	r2, #1
 800b43e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2202      	movs	r2, #2
 800b446:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2134      	movs	r1, #52	; 0x34
 800b450:	fb01 f303 	mul.w	r3, r1, r3
 800b454:	4413      	add	r3, r2
 800b456:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	4614      	mov	r4, r2
 800b45e:	461d      	mov	r5, r3
 800b460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b46a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	68b9      	ldr	r1, [r7, #8]
 800b474:	68f8      	ldr	r0, [r7, #12]
 800b476:	f000 f87f 	bl	800b578 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2201      	movs	r2, #1
 800b480:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2201      	movs	r2, #1
 800b486:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bdb0      	pop	{r4, r5, r7, pc}

0800b49c <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b086      	sub	sp, #24
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d101      	bne.n	800b4b6 <HAL_LTDC_SetAddress+0x1a>
 800b4b2:	2302      	movs	r3, #2
 800b4b4:	e024      	b.n	800b500 <HAL_LTDC_SetAddress+0x64>
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2202      	movs	r2, #2
 800b4c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2234      	movs	r2, #52	; 0x34
 800b4ca:	fb02 f303 	mul.w	r3, r2, r3
 800b4ce:	3338      	adds	r3, #56	; 0x38
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	6979      	ldr	r1, [r7, #20]
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f000 f849 	bl	800b578 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3718      	adds	r7, #24
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d101      	bne.n	800b520 <HAL_LTDC_ProgramLineEvent+0x18>
 800b51c:	2302      	movs	r3, #2
 800b51e:	e023      	b.n	800b568 <HAL_LTDC_ProgramLineEvent+0x60>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2202      	movs	r2, #2
 800b52c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f022 0201 	bic.w	r2, r2, #1
 800b53e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800b540:	4a0c      	ldr	r2, [pc, #48]	; (800b574 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f042 0201 	orr.w	r2, r2, #1
 800b554:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr
 800b574:	40016800 	.word	0x40016800

0800b578 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b578:	b480      	push	{r7}
 800b57a:	b089      	sub	sp, #36	; 0x24
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	685a      	ldr	r2, [r3, #4]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	0c1b      	lsrs	r3, r3, #16
 800b590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b594:	4413      	add	r3, r2
 800b596:	041b      	lsls	r3, r3, #16
 800b598:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	01db      	lsls	r3, r3, #7
 800b5a4:	4413      	add	r3, r2
 800b5a6:	3384      	adds	r3, #132	; 0x84
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	6812      	ldr	r2, [r2, #0]
 800b5ae:	4611      	mov	r1, r2
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	01d2      	lsls	r2, r2, #7
 800b5b4:	440a      	add	r2, r1
 800b5b6:	3284      	adds	r2, #132	; 0x84
 800b5b8:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800b5bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	0c1b      	lsrs	r3, r3, #16
 800b5ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b5ce:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b5d0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	01db      	lsls	r3, r3, #7
 800b5dc:	440b      	add	r3, r1
 800b5de:	3384      	adds	r3, #132	; 0x84
 800b5e0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b5e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	68da      	ldr	r2, [r3, #12]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5f6:	4413      	add	r3, r2
 800b5f8:	041b      	lsls	r3, r3, #16
 800b5fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	461a      	mov	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	01db      	lsls	r3, r3, #7
 800b606:	4413      	add	r3, r2
 800b608:	3384      	adds	r3, #132	; 0x84
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	6812      	ldr	r2, [r2, #0]
 800b610:	4611      	mov	r1, r2
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	01d2      	lsls	r2, r2, #7
 800b616:	440a      	add	r2, r1
 800b618:	3284      	adds	r2, #132	; 0x84
 800b61a:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800b61e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	689a      	ldr	r2, [r3, #8]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b62e:	4413      	add	r3, r2
 800b630:	1c5a      	adds	r2, r3, #1
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4619      	mov	r1, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	01db      	lsls	r3, r3, #7
 800b63c:	440b      	add	r3, r1
 800b63e:	3384      	adds	r3, #132	; 0x84
 800b640:	4619      	mov	r1, r3
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	4313      	orrs	r3, r2
 800b646:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	461a      	mov	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	01db      	lsls	r3, r3, #7
 800b652:	4413      	add	r3, r2
 800b654:	3384      	adds	r3, #132	; 0x84
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	6812      	ldr	r2, [r2, #0]
 800b65c:	4611      	mov	r1, r2
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	01d2      	lsls	r2, r2, #7
 800b662:	440a      	add	r2, r1
 800b664:	3284      	adds	r2, #132	; 0x84
 800b666:	f023 0307 	bic.w	r3, r3, #7
 800b66a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	461a      	mov	r2, r3
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	01db      	lsls	r3, r3, #7
 800b676:	4413      	add	r3, r2
 800b678:	3384      	adds	r3, #132	; 0x84
 800b67a:	461a      	mov	r2, r3
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	691b      	ldr	r3, [r3, #16]
 800b680:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b688:	021b      	lsls	r3, r3, #8
 800b68a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b692:	041b      	lsls	r3, r3, #16
 800b694:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	699b      	ldr	r3, [r3, #24]
 800b69a:	061b      	lsls	r3, r3, #24
 800b69c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	01db      	lsls	r3, r3, #7
 800b6a8:	4413      	add	r3, r2
 800b6aa:	3384      	adds	r3, #132	; 0x84
 800b6ac:	699b      	ldr	r3, [r3, #24]
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	01db      	lsls	r3, r3, #7
 800b6b8:	4413      	add	r3, r2
 800b6ba:	3384      	adds	r3, #132	; 0x84
 800b6bc:	461a      	mov	r2, r3
 800b6be:	2300      	movs	r3, #0
 800b6c0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	431a      	orrs	r2, r3
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	431a      	orrs	r2, r3
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	01db      	lsls	r3, r3, #7
 800b6dc:	440b      	add	r3, r1
 800b6de:	3384      	adds	r3, #132	; 0x84
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	01db      	lsls	r3, r3, #7
 800b6f2:	4413      	add	r3, r2
 800b6f4:	3384      	adds	r3, #132	; 0x84
 800b6f6:	695b      	ldr	r3, [r3, #20]
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	6812      	ldr	r2, [r2, #0]
 800b6fc:	4611      	mov	r1, r2
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	01d2      	lsls	r2, r2, #7
 800b702:	440a      	add	r2, r1
 800b704:	3284      	adds	r2, #132	; 0x84
 800b706:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b70a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	461a      	mov	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	01db      	lsls	r3, r3, #7
 800b716:	4413      	add	r3, r2
 800b718:	3384      	adds	r3, #132	; 0x84
 800b71a:	461a      	mov	r2, r3
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	695b      	ldr	r3, [r3, #20]
 800b720:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	461a      	mov	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	01db      	lsls	r3, r3, #7
 800b72c:	4413      	add	r3, r2
 800b72e:	3384      	adds	r3, #132	; 0x84
 800b730:	69db      	ldr	r3, [r3, #28]
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	6812      	ldr	r2, [r2, #0]
 800b736:	4611      	mov	r1, r2
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	01d2      	lsls	r2, r2, #7
 800b73c:	440a      	add	r2, r1
 800b73e:	3284      	adds	r2, #132	; 0x84
 800b740:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b744:	f023 0307 	bic.w	r3, r3, #7
 800b748:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	69da      	ldr	r2, [r3, #28]
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	6a1b      	ldr	r3, [r3, #32]
 800b752:	68f9      	ldr	r1, [r7, #12]
 800b754:	6809      	ldr	r1, [r1, #0]
 800b756:	4608      	mov	r0, r1
 800b758:	6879      	ldr	r1, [r7, #4]
 800b75a:	01c9      	lsls	r1, r1, #7
 800b75c:	4401      	add	r1, r0
 800b75e:	3184      	adds	r1, #132	; 0x84
 800b760:	4313      	orrs	r3, r2
 800b762:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	461a      	mov	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	01db      	lsls	r3, r3, #7
 800b76e:	4413      	add	r3, r2
 800b770:	3384      	adds	r3, #132	; 0x84
 800b772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	461a      	mov	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	01db      	lsls	r3, r3, #7
 800b77e:	4413      	add	r3, r2
 800b780:	3384      	adds	r3, #132	; 0x84
 800b782:	461a      	mov	r2, r3
 800b784:	2300      	movs	r3, #0
 800b786:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	461a      	mov	r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	01db      	lsls	r3, r3, #7
 800b792:	4413      	add	r3, r2
 800b794:	3384      	adds	r3, #132	; 0x84
 800b796:	461a      	mov	r2, r3
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	691b      	ldr	r3, [r3, #16]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d102      	bne.n	800b7ac <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800b7a6:	2304      	movs	r3, #4
 800b7a8:	61fb      	str	r3, [r7, #28]
 800b7aa:	e01b      	b.n	800b7e4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	691b      	ldr	r3, [r3, #16]
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d102      	bne.n	800b7ba <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800b7b4:	2303      	movs	r3, #3
 800b7b6:	61fb      	str	r3, [r7, #28]
 800b7b8:	e014      	b.n	800b7e4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	2b04      	cmp	r3, #4
 800b7c0:	d00b      	beq.n	800b7da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b7c6:	2b02      	cmp	r3, #2
 800b7c8:	d007      	beq.n	800b7da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b7ce:	2b03      	cmp	r3, #3
 800b7d0:	d003      	beq.n	800b7da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b7d6:	2b07      	cmp	r3, #7
 800b7d8:	d102      	bne.n	800b7e0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800b7da:	2302      	movs	r3, #2
 800b7dc:	61fb      	str	r3, [r7, #28]
 800b7de:	e001      	b.n	800b7e4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	01db      	lsls	r3, r3, #7
 800b7ee:	4413      	add	r3, r2
 800b7f0:	3384      	adds	r3, #132	; 0x84
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	6812      	ldr	r2, [r2, #0]
 800b7f8:	4611      	mov	r1, r2
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	01d2      	lsls	r2, r2, #7
 800b7fe:	440a      	add	r2, r1
 800b800:	3284      	adds	r2, #132	; 0x84
 800b802:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800b806:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b80c:	69fa      	ldr	r2, [r7, #28]
 800b80e:	fb02 f303 	mul.w	r3, r2, r3
 800b812:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	6859      	ldr	r1, [r3, #4]
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	1acb      	subs	r3, r1, r3
 800b81e:	69f9      	ldr	r1, [r7, #28]
 800b820:	fb01 f303 	mul.w	r3, r1, r3
 800b824:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800b826:	68f9      	ldr	r1, [r7, #12]
 800b828:	6809      	ldr	r1, [r1, #0]
 800b82a:	4608      	mov	r0, r1
 800b82c:	6879      	ldr	r1, [r7, #4]
 800b82e:	01c9      	lsls	r1, r1, #7
 800b830:	4401      	add	r1, r0
 800b832:	3184      	adds	r1, #132	; 0x84
 800b834:	4313      	orrs	r3, r2
 800b836:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	461a      	mov	r2, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	01db      	lsls	r3, r3, #7
 800b842:	4413      	add	r3, r2
 800b844:	3384      	adds	r3, #132	; 0x84
 800b846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	6812      	ldr	r2, [r2, #0]
 800b84c:	4611      	mov	r1, r2
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	01d2      	lsls	r2, r2, #7
 800b852:	440a      	add	r2, r1
 800b854:	3284      	adds	r2, #132	; 0x84
 800b856:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b85a:	f023 0307 	bic.w	r3, r3, #7
 800b85e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	461a      	mov	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	01db      	lsls	r3, r3, #7
 800b86a:	4413      	add	r3, r2
 800b86c:	3384      	adds	r3, #132	; 0x84
 800b86e:	461a      	mov	r2, r3
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b874:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	461a      	mov	r2, r3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	01db      	lsls	r3, r3, #7
 800b880:	4413      	add	r3, r2
 800b882:	3384      	adds	r3, #132	; 0x84
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	6812      	ldr	r2, [r2, #0]
 800b88a:	4611      	mov	r1, r2
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	01d2      	lsls	r2, r2, #7
 800b890:	440a      	add	r2, r1
 800b892:	3284      	adds	r2, #132	; 0x84
 800b894:	f043 0301 	orr.w	r3, r3, #1
 800b898:	6013      	str	r3, [r2, #0]
}
 800b89a:	bf00      	nop
 800b89c:	3724      	adds	r7, #36	; 0x24
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr
	...

0800b8a8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800b8b0:	4b39      	ldr	r3, [pc, #228]	; (800b998 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b8b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b8b8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d10b      	bne.n	800b8da <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8c8:	d905      	bls.n	800b8d6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800b8ca:	4b33      	ldr	r3, [pc, #204]	; (800b998 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	4a32      	ldr	r2, [pc, #200]	; (800b998 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b8d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8d4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	e057      	b.n	800b98a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8e0:	d90a      	bls.n	800b8f8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800b8e2:	4b2d      	ldr	r3, [pc, #180]	; (800b998 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	4a2a      	ldr	r2, [pc, #168]	; (800b998 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b8f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8f4:	60d3      	str	r3, [r2, #12]
 800b8f6:	e007      	b.n	800b908 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800b8f8:	4b27      	ldr	r3, [pc, #156]	; (800b998 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b900:	4925      	ldr	r1, [pc, #148]	; (800b998 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	4313      	orrs	r3, r2
 800b906:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b908:	4b24      	ldr	r3, [pc, #144]	; (800b99c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a24      	ldr	r2, [pc, #144]	; (800b9a0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800b90e:	fba2 2303 	umull	r2, r3, r2, r3
 800b912:	099b      	lsrs	r3, r3, #6
 800b914:	2232      	movs	r2, #50	; 0x32
 800b916:	fb02 f303 	mul.w	r3, r2, r3
 800b91a:	4a21      	ldr	r2, [pc, #132]	; (800b9a0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800b91c:	fba2 2303 	umull	r2, r3, r2, r3
 800b920:	099b      	lsrs	r3, r3, #6
 800b922:	3301      	adds	r3, #1
 800b924:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800b926:	e002      	b.n	800b92e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	3b01      	subs	r3, #1
 800b92c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800b92e:	4b1a      	ldr	r3, [pc, #104]	; (800b998 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b936:	2b00      	cmp	r3, #0
 800b938:	d102      	bne.n	800b940 <HAL_PWREx_ControlVoltageScaling+0x98>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1f3      	bne.n	800b928 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d01b      	beq.n	800b97e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b946:	4b15      	ldr	r3, [pc, #84]	; (800b99c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a15      	ldr	r2, [pc, #84]	; (800b9a0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800b94c:	fba2 2303 	umull	r2, r3, r2, r3
 800b950:	099b      	lsrs	r3, r3, #6
 800b952:	2232      	movs	r2, #50	; 0x32
 800b954:	fb02 f303 	mul.w	r3, r2, r3
 800b958:	4a11      	ldr	r2, [pc, #68]	; (800b9a0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800b95a:	fba2 2303 	umull	r2, r3, r2, r3
 800b95e:	099b      	lsrs	r3, r3, #6
 800b960:	3301      	adds	r3, #1
 800b962:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800b964:	e002      	b.n	800b96c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	3b01      	subs	r3, #1
 800b96a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800b96c:	4b0a      	ldr	r3, [pc, #40]	; (800b998 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b96e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b974:	2b00      	cmp	r3, #0
 800b976:	d102      	bne.n	800b97e <HAL_PWREx_ControlVoltageScaling+0xd6>
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d1f3      	bne.n	800b966 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d101      	bne.n	800b988 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	e000      	b.n	800b98a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3714      	adds	r7, #20
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr
 800b996:	bf00      	nop
 800b998:	46020800 	.word	0x46020800
 800b99c:	20000048 	.word	0x20000048
 800b9a0:	10624dd3 	.word	0x10624dd3

0800b9a4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800b9a8:	4b04      	ldr	r3, [pc, #16]	; (800b9bc <HAL_PWREx_GetVoltageRange+0x18>)
 800b9aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	46020800 	.word	0x46020800

0800b9c0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b9c8:	4b22      	ldr	r3, [pc, #136]	; (800ba54 <HAL_PWREx_ConfigSupply+0x94>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a22      	ldr	r2, [pc, #136]	; (800ba58 <HAL_PWREx_ConfigSupply+0x98>)
 800b9ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b9d2:	099b      	lsrs	r3, r3, #6
 800b9d4:	2232      	movs	r2, #50	; 0x32
 800b9d6:	fb02 f303 	mul.w	r3, r2, r3
 800b9da:	4a1f      	ldr	r2, [pc, #124]	; (800ba58 <HAL_PWREx_ConfigSupply+0x98>)
 800b9dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b9e0:	099b      	lsrs	r3, r3, #6
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d113      	bne.n	800ba14 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800b9ec:	4b1b      	ldr	r3, [pc, #108]	; (800ba5c <HAL_PWREx_ConfigSupply+0x9c>)
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	4a1a      	ldr	r2, [pc, #104]	; (800ba5c <HAL_PWREx_ConfigSupply+0x9c>)
 800b9f2:	f023 0302 	bic.w	r3, r3, #2
 800b9f6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800b9f8:	e002      	b.n	800ba00 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800ba00:	4b16      	ldr	r3, [pc, #88]	; (800ba5c <HAL_PWREx_ConfigSupply+0x9c>)
 800ba02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba04:	f003 0302 	and.w	r3, r3, #2
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d116      	bne.n	800ba3a <HAL_PWREx_ConfigSupply+0x7a>
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1f3      	bne.n	800b9fa <HAL_PWREx_ConfigSupply+0x3a>
 800ba12:	e012      	b.n	800ba3a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800ba14:	4b11      	ldr	r3, [pc, #68]	; (800ba5c <HAL_PWREx_ConfigSupply+0x9c>)
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	4a10      	ldr	r2, [pc, #64]	; (800ba5c <HAL_PWREx_ConfigSupply+0x9c>)
 800ba1a:	f043 0302 	orr.w	r3, r3, #2
 800ba1e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800ba20:	e002      	b.n	800ba28 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	3b01      	subs	r3, #1
 800ba26:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800ba28:	4b0c      	ldr	r3, [pc, #48]	; (800ba5c <HAL_PWREx_ConfigSupply+0x9c>)
 800ba2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba2c:	f003 0302 	and.w	r3, r3, #2
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d102      	bne.n	800ba3a <HAL_PWREx_ConfigSupply+0x7a>
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1f3      	bne.n	800ba22 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d101      	bne.n	800ba44 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800ba40:	2303      	movs	r3, #3
 800ba42:	e000      	b.n	800ba46 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3714      	adds	r7, #20
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	20000048 	.word	0x20000048
 800ba58:	10624dd3 	.word	0x10624dd3
 800ba5c:	46020800 	.word	0x46020800

0800ba60 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800ba60:	b480      	push	{r7}
 800ba62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800ba64:	4b05      	ldr	r3, [pc, #20]	; (800ba7c <HAL_PWREx_EnableVddIO2+0x1c>)
 800ba66:	691b      	ldr	r3, [r3, #16]
 800ba68:	4a04      	ldr	r2, [pc, #16]	; (800ba7c <HAL_PWREx_EnableVddIO2+0x1c>)
 800ba6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba6e:	6113      	str	r3, [r2, #16]
}
 800ba70:	bf00      	nop
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	46020800 	.word	0x46020800

0800ba80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800ba80:	b480      	push	{r7}
 800ba82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800ba84:	4b05      	ldr	r3, [pc, #20]	; (800ba9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800ba86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba88:	4a04      	ldr	r2, [pc, #16]	; (800ba9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800ba8a:	f043 0301 	orr.w	r3, r3, #1
 800ba8e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800ba90:	bf00      	nop
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	46020800 	.word	0x46020800

0800baa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b08e      	sub	sp, #56	; 0x38
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800baa8:	2300      	movs	r3, #0
 800baaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d102      	bne.n	800baba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	f000 bec8 	b.w	800c84a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800baba:	4b99      	ldr	r3, [pc, #612]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800babc:	69db      	ldr	r3, [r3, #28]
 800babe:	f003 030c 	and.w	r3, r3, #12
 800bac2:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bac4:	4b96      	ldr	r3, [pc, #600]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac8:	f003 0303 	and.w	r3, r3, #3
 800bacc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f003 0310 	and.w	r3, r3, #16
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f000 816c 	beq.w	800bdb4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800badc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d007      	beq.n	800baf2 <HAL_RCC_OscConfig+0x52>
 800bae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae4:	2b0c      	cmp	r3, #12
 800bae6:	f040 80de 	bne.w	800bca6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800baea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baec:	2b01      	cmp	r3, #1
 800baee:	f040 80da 	bne.w	800bca6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	69db      	ldr	r3, [r3, #28]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d102      	bne.n	800bb00 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800bafa:	2301      	movs	r3, #1
 800bafc:	f000 bea5 	b.w	800c84a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb04:	4b86      	ldr	r3, [pc, #536]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d004      	beq.n	800bb1a <HAL_RCC_OscConfig+0x7a>
 800bb10:	4b83      	ldr	r3, [pc, #524]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bb18:	e005      	b.n	800bb26 <HAL_RCC_OscConfig+0x86>
 800bb1a:	4b81      	ldr	r3, [pc, #516]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bb1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bb20:	041b      	lsls	r3, r3, #16
 800bb22:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d255      	bcs.n	800bbd6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10a      	bne.n	800bb46 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb34:	4618      	mov	r0, r3
 800bb36:	f001 fa17 	bl	800cf68 <RCC_SetFlashLatencyFromMSIRange>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800bb40:	2301      	movs	r3, #1
 800bb42:	f000 be82 	b.w	800c84a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800bb46:	4b76      	ldr	r3, [pc, #472]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	4a75      	ldr	r2, [pc, #468]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bb4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bb50:	6093      	str	r3, [r2, #8]
 800bb52:	4b73      	ldr	r3, [pc, #460]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5e:	4970      	ldr	r1, [pc, #448]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bb60:	4313      	orrs	r3, r2
 800bb62:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb68:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800bb6c:	d309      	bcc.n	800bb82 <HAL_RCC_OscConfig+0xe2>
 800bb6e:	4b6c      	ldr	r3, [pc, #432]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	f023 021f 	bic.w	r2, r3, #31
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6a1b      	ldr	r3, [r3, #32]
 800bb7a:	4969      	ldr	r1, [pc, #420]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	60cb      	str	r3, [r1, #12]
 800bb80:	e07e      	b.n	800bc80 <HAL_RCC_OscConfig+0x1e0>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	da0a      	bge.n	800bba0 <HAL_RCC_OscConfig+0x100>
 800bb8a:	4b65      	ldr	r3, [pc, #404]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6a1b      	ldr	r3, [r3, #32]
 800bb96:	015b      	lsls	r3, r3, #5
 800bb98:	4961      	ldr	r1, [pc, #388]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	60cb      	str	r3, [r1, #12]
 800bb9e:	e06f      	b.n	800bc80 <HAL_RCC_OscConfig+0x1e0>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bba8:	d30a      	bcc.n	800bbc0 <HAL_RCC_OscConfig+0x120>
 800bbaa:	4b5d      	ldr	r3, [pc, #372]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	029b      	lsls	r3, r3, #10
 800bbb8:	4959      	ldr	r1, [pc, #356]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	60cb      	str	r3, [r1, #12]
 800bbbe:	e05f      	b.n	800bc80 <HAL_RCC_OscConfig+0x1e0>
 800bbc0:	4b57      	ldr	r3, [pc, #348]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6a1b      	ldr	r3, [r3, #32]
 800bbcc:	03db      	lsls	r3, r3, #15
 800bbce:	4954      	ldr	r1, [pc, #336]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	60cb      	str	r3, [r1, #12]
 800bbd4:	e054      	b.n	800bc80 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800bbd6:	4b52      	ldr	r3, [pc, #328]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bbd8:	689b      	ldr	r3, [r3, #8]
 800bbda:	4a51      	ldr	r2, [pc, #324]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bbdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bbe0:	6093      	str	r3, [r2, #8]
 800bbe2:	4b4f      	ldr	r3, [pc, #316]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbee:	494c      	ldr	r1, [pc, #304]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800bbfc:	d309      	bcc.n	800bc12 <HAL_RCC_OscConfig+0x172>
 800bbfe:	4b48      	ldr	r3, [pc, #288]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	f023 021f 	bic.w	r2, r3, #31
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a1b      	ldr	r3, [r3, #32]
 800bc0a:	4945      	ldr	r1, [pc, #276]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	60cb      	str	r3, [r1, #12]
 800bc10:	e028      	b.n	800bc64 <HAL_RCC_OscConfig+0x1c4>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	da0a      	bge.n	800bc30 <HAL_RCC_OscConfig+0x190>
 800bc1a:	4b41      	ldr	r3, [pc, #260]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bc1c:	68db      	ldr	r3, [r3, #12]
 800bc1e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a1b      	ldr	r3, [r3, #32]
 800bc26:	015b      	lsls	r3, r3, #5
 800bc28:	493d      	ldr	r1, [pc, #244]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	60cb      	str	r3, [r1, #12]
 800bc2e:	e019      	b.n	800bc64 <HAL_RCC_OscConfig+0x1c4>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc38:	d30a      	bcc.n	800bc50 <HAL_RCC_OscConfig+0x1b0>
 800bc3a:	4b39      	ldr	r3, [pc, #228]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6a1b      	ldr	r3, [r3, #32]
 800bc46:	029b      	lsls	r3, r3, #10
 800bc48:	4935      	ldr	r1, [pc, #212]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	60cb      	str	r3, [r1, #12]
 800bc4e:	e009      	b.n	800bc64 <HAL_RCC_OscConfig+0x1c4>
 800bc50:	4b33      	ldr	r3, [pc, #204]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a1b      	ldr	r3, [r3, #32]
 800bc5c:	03db      	lsls	r3, r3, #15
 800bc5e:	4930      	ldr	r1, [pc, #192]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bc60:	4313      	orrs	r3, r2
 800bc62:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d10a      	bne.n	800bc80 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f001 f97a 	bl	800cf68 <RCC_SetFlashLatencyFromMSIRange>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d002      	beq.n	800bc80 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	f000 bde5 	b.w	800c84a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800bc80:	f001 f8e4 	bl	800ce4c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800bc84:	4b27      	ldr	r3, [pc, #156]	; (800bd24 <HAL_RCC_OscConfig+0x284>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7f5 fde3 	bl	8001854 <HAL_InitTick>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800bc94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	f000 808a 	beq.w	800bdb2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800bc9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bca2:	f000 bdd2 	b.w	800c84a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	69db      	ldr	r3, [r3, #28]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d066      	beq.n	800bd7c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800bcae:	4b1c      	ldr	r3, [pc, #112]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a1b      	ldr	r2, [pc, #108]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bcb4:	f043 0301 	orr.w	r3, r3, #1
 800bcb8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bcba:	f7fb fb75 	bl	80073a8 <HAL_GetTick>
 800bcbe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800bcc0:	e009      	b.n	800bcd6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bcc2:	f7fb fb71 	bl	80073a8 <HAL_GetTick>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcca:	1ad3      	subs	r3, r2, r3
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	d902      	bls.n	800bcd6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800bcd0:	2303      	movs	r3, #3
 800bcd2:	f000 bdba 	b.w	800c84a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800bcd6:	4b12      	ldr	r3, [pc, #72]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f003 0304 	and.w	r3, r3, #4
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d0ef      	beq.n	800bcc2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800bce2:	4b0f      	ldr	r3, [pc, #60]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	4a0e      	ldr	r2, [pc, #56]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bce8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bcec:	6093      	str	r3, [r2, #8]
 800bcee:	4b0c      	ldr	r3, [pc, #48]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfa:	4909      	ldr	r1, [pc, #36]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd04:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800bd08:	d30e      	bcc.n	800bd28 <HAL_RCC_OscConfig+0x288>
 800bd0a:	4b05      	ldr	r3, [pc, #20]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bd0c:	68db      	ldr	r3, [r3, #12]
 800bd0e:	f023 021f 	bic.w	r2, r3, #31
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a1b      	ldr	r3, [r3, #32]
 800bd16:	4902      	ldr	r1, [pc, #8]	; (800bd20 <HAL_RCC_OscConfig+0x280>)
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	60cb      	str	r3, [r1, #12]
 800bd1c:	e04a      	b.n	800bdb4 <HAL_RCC_OscConfig+0x314>
 800bd1e:	bf00      	nop
 800bd20:	46020c00 	.word	0x46020c00
 800bd24:	2000004c 	.word	0x2000004c
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	da0a      	bge.n	800bd46 <HAL_RCC_OscConfig+0x2a6>
 800bd30:	4b98      	ldr	r3, [pc, #608]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6a1b      	ldr	r3, [r3, #32]
 800bd3c:	015b      	lsls	r3, r3, #5
 800bd3e:	4995      	ldr	r1, [pc, #596]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bd40:	4313      	orrs	r3, r2
 800bd42:	60cb      	str	r3, [r1, #12]
 800bd44:	e036      	b.n	800bdb4 <HAL_RCC_OscConfig+0x314>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd4e:	d30a      	bcc.n	800bd66 <HAL_RCC_OscConfig+0x2c6>
 800bd50:	4b90      	ldr	r3, [pc, #576]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a1b      	ldr	r3, [r3, #32]
 800bd5c:	029b      	lsls	r3, r3, #10
 800bd5e:	498d      	ldr	r1, [pc, #564]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bd60:	4313      	orrs	r3, r2
 800bd62:	60cb      	str	r3, [r1, #12]
 800bd64:	e026      	b.n	800bdb4 <HAL_RCC_OscConfig+0x314>
 800bd66:	4b8b      	ldr	r3, [pc, #556]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bd68:	68db      	ldr	r3, [r3, #12]
 800bd6a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a1b      	ldr	r3, [r3, #32]
 800bd72:	03db      	lsls	r3, r3, #15
 800bd74:	4987      	ldr	r1, [pc, #540]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bd76:	4313      	orrs	r3, r2
 800bd78:	60cb      	str	r3, [r1, #12]
 800bd7a:	e01b      	b.n	800bdb4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800bd7c:	4b85      	ldr	r3, [pc, #532]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a84      	ldr	r2, [pc, #528]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bd82:	f023 0301 	bic.w	r3, r3, #1
 800bd86:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bd88:	f7fb fb0e 	bl	80073a8 <HAL_GetTick>
 800bd8c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800bd8e:	e009      	b.n	800bda4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bd90:	f7fb fb0a 	bl	80073a8 <HAL_GetTick>
 800bd94:	4602      	mov	r2, r0
 800bd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd98:	1ad3      	subs	r3, r2, r3
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	d902      	bls.n	800bda4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800bd9e:	2303      	movs	r3, #3
 800bda0:	f000 bd53 	b.w	800c84a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800bda4:	4b7b      	ldr	r3, [pc, #492]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f003 0304 	and.w	r3, r3, #4
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d1ef      	bne.n	800bd90 <HAL_RCC_OscConfig+0x2f0>
 800bdb0:	e000      	b.n	800bdb4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bdb2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f003 0301 	and.w	r3, r3, #1
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f000 808b 	beq.w	800bed8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800bdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc4:	2b08      	cmp	r3, #8
 800bdc6:	d005      	beq.n	800bdd4 <HAL_RCC_OscConfig+0x334>
 800bdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdca:	2b0c      	cmp	r3, #12
 800bdcc:	d109      	bne.n	800bde2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd0:	2b03      	cmp	r3, #3
 800bdd2:	d106      	bne.n	800bde2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d17d      	bne.n	800bed8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800bddc:	2301      	movs	r3, #1
 800bdde:	f000 bd34 	b.w	800c84a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdea:	d106      	bne.n	800bdfa <HAL_RCC_OscConfig+0x35a>
 800bdec:	4b69      	ldr	r3, [pc, #420]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a68      	ldr	r2, [pc, #416]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bdf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdf6:	6013      	str	r3, [r2, #0]
 800bdf8:	e041      	b.n	800be7e <HAL_RCC_OscConfig+0x3de>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be02:	d112      	bne.n	800be2a <HAL_RCC_OscConfig+0x38a>
 800be04:	4b63      	ldr	r3, [pc, #396]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4a62      	ldr	r2, [pc, #392]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800be0e:	6013      	str	r3, [r2, #0]
 800be10:	4b60      	ldr	r3, [pc, #384]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a5f      	ldr	r2, [pc, #380]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be16:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be1a:	6013      	str	r3, [r2, #0]
 800be1c:	4b5d      	ldr	r3, [pc, #372]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a5c      	ldr	r2, [pc, #368]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be26:	6013      	str	r3, [r2, #0]
 800be28:	e029      	b.n	800be7e <HAL_RCC_OscConfig+0x3de>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800be32:	d112      	bne.n	800be5a <HAL_RCC_OscConfig+0x3ba>
 800be34:	4b57      	ldr	r3, [pc, #348]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a56      	ldr	r2, [pc, #344]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800be3e:	6013      	str	r3, [r2, #0]
 800be40:	4b54      	ldr	r3, [pc, #336]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a53      	ldr	r2, [pc, #332]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be4a:	6013      	str	r3, [r2, #0]
 800be4c:	4b51      	ldr	r3, [pc, #324]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a50      	ldr	r2, [pc, #320]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be56:	6013      	str	r3, [r2, #0]
 800be58:	e011      	b.n	800be7e <HAL_RCC_OscConfig+0x3de>
 800be5a:	4b4e      	ldr	r3, [pc, #312]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a4d      	ldr	r2, [pc, #308]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be64:	6013      	str	r3, [r2, #0]
 800be66:	4b4b      	ldr	r3, [pc, #300]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a4a      	ldr	r2, [pc, #296]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be70:	6013      	str	r3, [r2, #0]
 800be72:	4b48      	ldr	r3, [pc, #288]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a47      	ldr	r2, [pc, #284]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800be78:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d014      	beq.n	800beb0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800be86:	f7fb fa8f 	bl	80073a8 <HAL_GetTick>
 800be8a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be8c:	e009      	b.n	800bea2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be8e:	f7fb fa8b 	bl	80073a8 <HAL_GetTick>
 800be92:	4602      	mov	r2, r0
 800be94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be96:	1ad3      	subs	r3, r2, r3
 800be98:	2b64      	cmp	r3, #100	; 0x64
 800be9a:	d902      	bls.n	800bea2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800be9c:	2303      	movs	r3, #3
 800be9e:	f000 bcd4 	b.w	800c84a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bea2:	4b3c      	ldr	r3, [pc, #240]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d0ef      	beq.n	800be8e <HAL_RCC_OscConfig+0x3ee>
 800beae:	e013      	b.n	800bed8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800beb0:	f7fb fa7a 	bl	80073a8 <HAL_GetTick>
 800beb4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800beb6:	e009      	b.n	800becc <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800beb8:	f7fb fa76 	bl	80073a8 <HAL_GetTick>
 800bebc:	4602      	mov	r2, r0
 800bebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec0:	1ad3      	subs	r3, r2, r3
 800bec2:	2b64      	cmp	r3, #100	; 0x64
 800bec4:	d902      	bls.n	800becc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800bec6:	2303      	movs	r3, #3
 800bec8:	f000 bcbf 	b.w	800c84a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800becc:	4b31      	ldr	r3, [pc, #196]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d1ef      	bne.n	800beb8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f003 0302 	and.w	r3, r3, #2
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d05f      	beq.n	800bfa4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800bee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee6:	2b04      	cmp	r3, #4
 800bee8:	d005      	beq.n	800bef6 <HAL_RCC_OscConfig+0x456>
 800beea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beec:	2b0c      	cmp	r3, #12
 800beee:	d114      	bne.n	800bf1a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800bef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d111      	bne.n	800bf1a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d102      	bne.n	800bf04 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800befe:	2301      	movs	r3, #1
 800bf00:	f000 bca3 	b.w	800c84a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800bf04:	4b23      	ldr	r3, [pc, #140]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bf06:	691b      	ldr	r3, [r3, #16]
 800bf08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	691b      	ldr	r3, [r3, #16]
 800bf10:	041b      	lsls	r3, r3, #16
 800bf12:	4920      	ldr	r1, [pc, #128]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bf14:	4313      	orrs	r3, r2
 800bf16:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800bf18:	e044      	b.n	800bfa4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d024      	beq.n	800bf6c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800bf22:	4b1c      	ldr	r3, [pc, #112]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a1b      	ldr	r2, [pc, #108]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bf28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf2c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bf2e:	f7fb fa3b 	bl	80073a8 <HAL_GetTick>
 800bf32:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bf34:	e009      	b.n	800bf4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf36:	f7fb fa37 	bl	80073a8 <HAL_GetTick>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	2b02      	cmp	r3, #2
 800bf42:	d902      	bls.n	800bf4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800bf44:	2303      	movs	r3, #3
 800bf46:	f000 bc80 	b.w	800c84a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bf4a:	4b12      	ldr	r3, [pc, #72]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d0ef      	beq.n	800bf36 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800bf56:	4b0f      	ldr	r3, [pc, #60]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bf58:	691b      	ldr	r3, [r3, #16]
 800bf5a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	691b      	ldr	r3, [r3, #16]
 800bf62:	041b      	lsls	r3, r3, #16
 800bf64:	490b      	ldr	r1, [pc, #44]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bf66:	4313      	orrs	r3, r2
 800bf68:	610b      	str	r3, [r1, #16]
 800bf6a:	e01b      	b.n	800bfa4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800bf6c:	4b09      	ldr	r3, [pc, #36]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a08      	ldr	r2, [pc, #32]	; (800bf94 <HAL_RCC_OscConfig+0x4f4>)
 800bf72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf76:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bf78:	f7fb fa16 	bl	80073a8 <HAL_GetTick>
 800bf7c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bf7e:	e00b      	b.n	800bf98 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf80:	f7fb fa12 	bl	80073a8 <HAL_GetTick>
 800bf84:	4602      	mov	r2, r0
 800bf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	2b02      	cmp	r3, #2
 800bf8c:	d904      	bls.n	800bf98 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800bf8e:	2303      	movs	r3, #3
 800bf90:	f000 bc5b 	b.w	800c84a <HAL_RCC_OscConfig+0xdaa>
 800bf94:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bf98:	4baf      	ldr	r3, [pc, #700]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1ed      	bne.n	800bf80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 0308 	and.w	r3, r3, #8
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	f000 80c8 	beq.w	800c142 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bfb8:	4ba7      	ldr	r3, [pc, #668]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800bfba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfbe:	f003 0304 	and.w	r3, r3, #4
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d111      	bne.n	800bfea <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bfc6:	4ba4      	ldr	r3, [pc, #656]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800bfc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfcc:	4aa2      	ldr	r2, [pc, #648]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800bfce:	f043 0304 	orr.w	r3, r3, #4
 800bfd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800bfd6:	4ba0      	ldr	r3, [pc, #640]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800bfd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfdc:	f003 0304 	and.w	r3, r3, #4
 800bfe0:	617b      	str	r3, [r7, #20]
 800bfe2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bfea:	4b9c      	ldr	r3, [pc, #624]	; (800c25c <HAL_RCC_OscConfig+0x7bc>)
 800bfec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfee:	f003 0301 	and.w	r3, r3, #1
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d119      	bne.n	800c02a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800bff6:	4b99      	ldr	r3, [pc, #612]	; (800c25c <HAL_RCC_OscConfig+0x7bc>)
 800bff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bffa:	4a98      	ldr	r2, [pc, #608]	; (800c25c <HAL_RCC_OscConfig+0x7bc>)
 800bffc:	f043 0301 	orr.w	r3, r3, #1
 800c000:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c002:	f7fb f9d1 	bl	80073a8 <HAL_GetTick>
 800c006:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c008:	e009      	b.n	800c01e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c00a:	f7fb f9cd 	bl	80073a8 <HAL_GetTick>
 800c00e:	4602      	mov	r2, r0
 800c010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	2b02      	cmp	r3, #2
 800c016:	d902      	bls.n	800c01e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800c018:	2303      	movs	r3, #3
 800c01a:	f000 bc16 	b.w	800c84a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c01e:	4b8f      	ldr	r3, [pc, #572]	; (800c25c <HAL_RCC_OscConfig+0x7bc>)
 800c020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c022:	f003 0301 	and.w	r3, r3, #1
 800c026:	2b00      	cmp	r3, #0
 800c028:	d0ef      	beq.n	800c00a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	695b      	ldr	r3, [r3, #20]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d05f      	beq.n	800c0f2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800c032:	4b89      	ldr	r3, [pc, #548]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c038:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	699a      	ldr	r2, [r3, #24]
 800c03e:	6a3b      	ldr	r3, [r7, #32]
 800c040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c044:	429a      	cmp	r2, r3
 800c046:	d037      	beq.n	800c0b8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800c048:	6a3b      	ldr	r3, [r7, #32]
 800c04a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d006      	beq.n	800c060 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800c052:	6a3b      	ldr	r3, [r7, #32]
 800c054:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d101      	bne.n	800c060 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800c05c:	2301      	movs	r3, #1
 800c05e:	e3f4      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800c060:	6a3b      	ldr	r3, [r7, #32]
 800c062:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c066:	2b00      	cmp	r3, #0
 800c068:	d01b      	beq.n	800c0a2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800c06a:	4b7b      	ldr	r3, [pc, #492]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c06c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c070:	4a79      	ldr	r2, [pc, #484]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c072:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800c076:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800c07a:	f7fb f995 	bl	80073a8 <HAL_GetTick>
 800c07e:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c080:	e008      	b.n	800c094 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c082:	f7fb f991 	bl	80073a8 <HAL_GetTick>
 800c086:	4602      	mov	r2, r0
 800c088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08a:	1ad3      	subs	r3, r2, r3
 800c08c:	2b05      	cmp	r3, #5
 800c08e:	d901      	bls.n	800c094 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800c090:	2303      	movs	r3, #3
 800c092:	e3da      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c094:	4b70      	ldr	r3, [pc, #448]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c096:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c09a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d1ef      	bne.n	800c082 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800c0a2:	4b6d      	ldr	r3, [pc, #436]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c0a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0a8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	699b      	ldr	r3, [r3, #24]
 800c0b0:	4969      	ldr	r1, [pc, #420]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800c0b8:	4b67      	ldr	r3, [pc, #412]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c0ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0be:	4a66      	ldr	r2, [pc, #408]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c0c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c0c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800c0c8:	f7fb f96e 	bl	80073a8 <HAL_GetTick>
 800c0cc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c0ce:	e008      	b.n	800c0e2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c0d0:	f7fb f96a 	bl	80073a8 <HAL_GetTick>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	2b05      	cmp	r3, #5
 800c0dc:	d901      	bls.n	800c0e2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800c0de:	2303      	movs	r3, #3
 800c0e0:	e3b3      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c0e2:	4b5d      	ldr	r3, [pc, #372]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c0e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d0ef      	beq.n	800c0d0 <HAL_RCC_OscConfig+0x630>
 800c0f0:	e01b      	b.n	800c12a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800c0f2:	4b59      	ldr	r3, [pc, #356]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c0f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0f8:	4a57      	ldr	r2, [pc, #348]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c0fa:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800c0fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800c102:	f7fb f951 	bl	80073a8 <HAL_GetTick>
 800c106:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c108:	e008      	b.n	800c11c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c10a:	f7fb f94d 	bl	80073a8 <HAL_GetTick>
 800c10e:	4602      	mov	r2, r0
 800c110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c112:	1ad3      	subs	r3, r2, r3
 800c114:	2b05      	cmp	r3, #5
 800c116:	d901      	bls.n	800c11c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800c118:	2303      	movs	r3, #3
 800c11a:	e396      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c11c:	4b4e      	ldr	r3, [pc, #312]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c11e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c122:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c126:	2b00      	cmp	r3, #0
 800c128:	d1ef      	bne.n	800c10a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c12a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d107      	bne.n	800c142 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c132:	4b49      	ldr	r3, [pc, #292]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c138:	4a47      	ldr	r2, [pc, #284]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c13a:	f023 0304 	bic.w	r3, r3, #4
 800c13e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f003 0304 	and.w	r3, r3, #4
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f000 8111 	beq.w	800c372 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800c150:	2300      	movs	r3, #0
 800c152:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c156:	4b40      	ldr	r3, [pc, #256]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c15c:	f003 0304 	and.w	r3, r3, #4
 800c160:	2b00      	cmp	r3, #0
 800c162:	d111      	bne.n	800c188 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c164:	4b3c      	ldr	r3, [pc, #240]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c16a:	4a3b      	ldr	r2, [pc, #236]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c16c:	f043 0304 	orr.w	r3, r3, #4
 800c170:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c174:	4b38      	ldr	r3, [pc, #224]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c17a:	f003 0304 	and.w	r3, r3, #4
 800c17e:	613b      	str	r3, [r7, #16]
 800c180:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800c182:	2301      	movs	r3, #1
 800c184:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c188:	4b34      	ldr	r3, [pc, #208]	; (800c25c <HAL_RCC_OscConfig+0x7bc>)
 800c18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c18c:	f003 0301 	and.w	r3, r3, #1
 800c190:	2b00      	cmp	r3, #0
 800c192:	d118      	bne.n	800c1c6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c194:	4b31      	ldr	r3, [pc, #196]	; (800c25c <HAL_RCC_OscConfig+0x7bc>)
 800c196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c198:	4a30      	ldr	r2, [pc, #192]	; (800c25c <HAL_RCC_OscConfig+0x7bc>)
 800c19a:	f043 0301 	orr.w	r3, r3, #1
 800c19e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c1a0:	f7fb f902 	bl	80073a8 <HAL_GetTick>
 800c1a4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c1a6:	e008      	b.n	800c1ba <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c1a8:	f7fb f8fe 	bl	80073a8 <HAL_GetTick>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b0:	1ad3      	subs	r3, r2, r3
 800c1b2:	2b02      	cmp	r3, #2
 800c1b4:	d901      	bls.n	800c1ba <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800c1b6:	2303      	movs	r3, #3
 800c1b8:	e347      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c1ba:	4b28      	ldr	r3, [pc, #160]	; (800c25c <HAL_RCC_OscConfig+0x7bc>)
 800c1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1be:	f003 0301 	and.w	r3, r3, #1
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d0f0      	beq.n	800c1a8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	f003 0301 	and.w	r3, r3, #1
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d01f      	beq.n	800c212 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	f003 0304 	and.w	r3, r3, #4
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d010      	beq.n	800c200 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c1de:	4b1e      	ldr	r3, [pc, #120]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c1e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c1e4:	4a1c      	ldr	r2, [pc, #112]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c1e6:	f043 0304 	orr.w	r3, r3, #4
 800c1ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c1ee:	4b1a      	ldr	r3, [pc, #104]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c1f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c1f4:	4a18      	ldr	r2, [pc, #96]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c1f6:	f043 0301 	orr.w	r3, r3, #1
 800c1fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c1fe:	e018      	b.n	800c232 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c200:	4b15      	ldr	r3, [pc, #84]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c206:	4a14      	ldr	r2, [pc, #80]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c208:	f043 0301 	orr.w	r3, r3, #1
 800c20c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c210:	e00f      	b.n	800c232 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c212:	4b11      	ldr	r3, [pc, #68]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c218:	4a0f      	ldr	r2, [pc, #60]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c21a:	f023 0301 	bic.w	r3, r3, #1
 800c21e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c222:	4b0d      	ldr	r3, [pc, #52]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c224:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c228:	4a0b      	ldr	r2, [pc, #44]	; (800c258 <HAL_RCC_OscConfig+0x7b8>)
 800c22a:	f023 0304 	bic.w	r3, r3, #4
 800c22e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	689b      	ldr	r3, [r3, #8]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d057      	beq.n	800c2ea <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800c23a:	f7fb f8b5 	bl	80073a8 <HAL_GetTick>
 800c23e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c240:	e00e      	b.n	800c260 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c242:	f7fb f8b1 	bl	80073a8 <HAL_GetTick>
 800c246:	4602      	mov	r2, r0
 800c248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24a:	1ad3      	subs	r3, r2, r3
 800c24c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c250:	4293      	cmp	r3, r2
 800c252:	d905      	bls.n	800c260 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800c254:	2303      	movs	r3, #3
 800c256:	e2f8      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
 800c258:	46020c00 	.word	0x46020c00
 800c25c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c260:	4b9c      	ldr	r3, [pc, #624]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c266:	f003 0302 	and.w	r3, r3, #2
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d0e9      	beq.n	800c242 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	689b      	ldr	r3, [r3, #8]
 800c272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c276:	2b00      	cmp	r3, #0
 800c278:	d01b      	beq.n	800c2b2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c27a:	4b96      	ldr	r3, [pc, #600]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c27c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c280:	4a94      	ldr	r2, [pc, #592]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c286:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c28a:	e00a      	b.n	800c2a2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c28c:	f7fb f88c 	bl	80073a8 <HAL_GetTick>
 800c290:	4602      	mov	r2, r0
 800c292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	f241 3288 	movw	r2, #5000	; 0x1388
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d901      	bls.n	800c2a2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800c29e:	2303      	movs	r3, #3
 800c2a0:	e2d3      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c2a2:	4b8c      	ldr	r3, [pc, #560]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c2a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d0ed      	beq.n	800c28c <HAL_RCC_OscConfig+0x7ec>
 800c2b0:	e053      	b.n	800c35a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c2b2:	4b88      	ldr	r3, [pc, #544]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c2b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2b8:	4a86      	ldr	r2, [pc, #536]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c2ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c2c2:	e00a      	b.n	800c2da <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c2c4:	f7fb f870 	bl	80073a8 <HAL_GetTick>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2cc:	1ad3      	subs	r3, r2, r3
 800c2ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d901      	bls.n	800c2da <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800c2d6:	2303      	movs	r3, #3
 800c2d8:	e2b7      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c2da:	4b7e      	ldr	r3, [pc, #504]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c2dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1ed      	bne.n	800c2c4 <HAL_RCC_OscConfig+0x824>
 800c2e8:	e037      	b.n	800c35a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800c2ea:	f7fb f85d 	bl	80073a8 <HAL_GetTick>
 800c2ee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c2f0:	e00a      	b.n	800c308 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c2f2:	f7fb f859 	bl	80073a8 <HAL_GetTick>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c300:	4293      	cmp	r3, r2
 800c302:	d901      	bls.n	800c308 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800c304:	2303      	movs	r3, #3
 800c306:	e2a0      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c308:	4b72      	ldr	r3, [pc, #456]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c30a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c30e:	f003 0302 	and.w	r3, r3, #2
 800c312:	2b00      	cmp	r3, #0
 800c314:	d1ed      	bne.n	800c2f2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800c316:	4b6f      	ldr	r3, [pc, #444]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c31c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c320:	2b00      	cmp	r3, #0
 800c322:	d01a      	beq.n	800c35a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c324:	4b6b      	ldr	r3, [pc, #428]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c32a:	4a6a      	ldr	r2, [pc, #424]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c32c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c330:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c334:	e00a      	b.n	800c34c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c336:	f7fb f837 	bl	80073a8 <HAL_GetTick>
 800c33a:	4602      	mov	r2, r0
 800c33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33e:	1ad3      	subs	r3, r2, r3
 800c340:	f241 3288 	movw	r2, #5000	; 0x1388
 800c344:	4293      	cmp	r3, r2
 800c346:	d901      	bls.n	800c34c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800c348:	2303      	movs	r3, #3
 800c34a:	e27e      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c34c:	4b61      	ldr	r3, [pc, #388]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c34e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1ed      	bne.n	800c336 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c35a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d107      	bne.n	800c372 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c362:	4b5c      	ldr	r3, [pc, #368]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c368:	4a5a      	ldr	r2, [pc, #360]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c36a:	f023 0304 	bic.w	r3, r3, #4
 800c36e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f003 0320 	and.w	r3, r3, #32
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d036      	beq.n	800c3ec <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c382:	2b00      	cmp	r3, #0
 800c384:	d019      	beq.n	800c3ba <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800c386:	4b53      	ldr	r3, [pc, #332]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a52      	ldr	r2, [pc, #328]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c38c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c390:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c392:	f7fb f809 	bl	80073a8 <HAL_GetTick>
 800c396:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c398:	e008      	b.n	800c3ac <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c39a:	f7fb f805 	bl	80073a8 <HAL_GetTick>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a2:	1ad3      	subs	r3, r2, r3
 800c3a4:	2b02      	cmp	r3, #2
 800c3a6:	d901      	bls.n	800c3ac <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800c3a8:	2303      	movs	r3, #3
 800c3aa:	e24e      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c3ac:	4b49      	ldr	r3, [pc, #292]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d0f0      	beq.n	800c39a <HAL_RCC_OscConfig+0x8fa>
 800c3b8:	e018      	b.n	800c3ec <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800c3ba:	4b46      	ldr	r3, [pc, #280]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a45      	ldr	r2, [pc, #276]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c3c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3c4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c3c6:	f7fa ffef 	bl	80073a8 <HAL_GetTick>
 800c3ca:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c3cc:	e008      	b.n	800c3e0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c3ce:	f7fa ffeb 	bl	80073a8 <HAL_GetTick>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d6:	1ad3      	subs	r3, r2, r3
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	d901      	bls.n	800c3e0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800c3dc:	2303      	movs	r3, #3
 800c3de:	e234      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c3e0:	4b3c      	ldr	r3, [pc, #240]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d1f0      	bne.n	800c3ce <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d036      	beq.n	800c466 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d019      	beq.n	800c434 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800c400:	4b34      	ldr	r3, [pc, #208]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a33      	ldr	r2, [pc, #204]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c40a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c40c:	f7fa ffcc 	bl	80073a8 <HAL_GetTick>
 800c410:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c412:	e008      	b.n	800c426 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c414:	f7fa ffc8 	bl	80073a8 <HAL_GetTick>
 800c418:	4602      	mov	r2, r0
 800c41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41c:	1ad3      	subs	r3, r2, r3
 800c41e:	2b02      	cmp	r3, #2
 800c420:	d901      	bls.n	800c426 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800c422:	2303      	movs	r3, #3
 800c424:	e211      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c426:	4b2b      	ldr	r3, [pc, #172]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d0f0      	beq.n	800c414 <HAL_RCC_OscConfig+0x974>
 800c432:	e018      	b.n	800c466 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800c434:	4b27      	ldr	r3, [pc, #156]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a26      	ldr	r2, [pc, #152]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c43a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c43e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c440:	f7fa ffb2 	bl	80073a8 <HAL_GetTick>
 800c444:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c446:	e008      	b.n	800c45a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c448:	f7fa ffae 	bl	80073a8 <HAL_GetTick>
 800c44c:	4602      	mov	r2, r0
 800c44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	2b02      	cmp	r3, #2
 800c454:	d901      	bls.n	800c45a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800c456:	2303      	movs	r3, #3
 800c458:	e1f7      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c45a:	4b1e      	ldr	r3, [pc, #120]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c462:	2b00      	cmp	r3, #0
 800c464:	d1f0      	bne.n	800c448 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d07f      	beq.n	800c572 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c476:	2b00      	cmp	r3, #0
 800c478:	d062      	beq.n	800c540 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800c47a:	4b16      	ldr	r3, [pc, #88]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	4a15      	ldr	r2, [pc, #84]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c480:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c484:	6093      	str	r3, [r2, #8]
 800c486:	4b13      	ldr	r3, [pc, #76]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c492:	4910      	ldr	r1, [pc, #64]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c494:	4313      	orrs	r3, r2
 800c496:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c4a0:	d309      	bcc.n	800c4b6 <HAL_RCC_OscConfig+0xa16>
 800c4a2:	4b0c      	ldr	r3, [pc, #48]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	f023 021f 	bic.w	r2, r3, #31
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6a1b      	ldr	r3, [r3, #32]
 800c4ae:	4909      	ldr	r1, [pc, #36]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	60cb      	str	r3, [r1, #12]
 800c4b4:	e02a      	b.n	800c50c <HAL_RCC_OscConfig+0xa6c>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	da0c      	bge.n	800c4d8 <HAL_RCC_OscConfig+0xa38>
 800c4be:	4b05      	ldr	r3, [pc, #20]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6a1b      	ldr	r3, [r3, #32]
 800c4ca:	015b      	lsls	r3, r3, #5
 800c4cc:	4901      	ldr	r1, [pc, #4]	; (800c4d4 <HAL_RCC_OscConfig+0xa34>)
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	60cb      	str	r3, [r1, #12]
 800c4d2:	e01b      	b.n	800c50c <HAL_RCC_OscConfig+0xa6c>
 800c4d4:	46020c00 	.word	0x46020c00
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4e0:	d30a      	bcc.n	800c4f8 <HAL_RCC_OscConfig+0xa58>
 800c4e2:	4ba1      	ldr	r3, [pc, #644]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6a1b      	ldr	r3, [r3, #32]
 800c4ee:	029b      	lsls	r3, r3, #10
 800c4f0:	499d      	ldr	r1, [pc, #628]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	60cb      	str	r3, [r1, #12]
 800c4f6:	e009      	b.n	800c50c <HAL_RCC_OscConfig+0xa6c>
 800c4f8:	4b9b      	ldr	r3, [pc, #620]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6a1b      	ldr	r3, [r3, #32]
 800c504:	03db      	lsls	r3, r3, #15
 800c506:	4998      	ldr	r1, [pc, #608]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c508:	4313      	orrs	r3, r2
 800c50a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800c50c:	4b96      	ldr	r3, [pc, #600]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a95      	ldr	r2, [pc, #596]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c512:	f043 0310 	orr.w	r3, r3, #16
 800c516:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c518:	f7fa ff46 	bl	80073a8 <HAL_GetTick>
 800c51c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c51e:	e008      	b.n	800c532 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c520:	f7fa ff42 	bl	80073a8 <HAL_GetTick>
 800c524:	4602      	mov	r2, r0
 800c526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c528:	1ad3      	subs	r3, r2, r3
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	d901      	bls.n	800c532 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800c52e:	2303      	movs	r3, #3
 800c530:	e18b      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c532:	4b8d      	ldr	r3, [pc, #564]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f003 0320 	and.w	r3, r3, #32
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d0f0      	beq.n	800c520 <HAL_RCC_OscConfig+0xa80>
 800c53e:	e018      	b.n	800c572 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800c540:	4b89      	ldr	r3, [pc, #548]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a88      	ldr	r2, [pc, #544]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c546:	f023 0310 	bic.w	r3, r3, #16
 800c54a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c54c:	f7fa ff2c 	bl	80073a8 <HAL_GetTick>
 800c550:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c552:	e008      	b.n	800c566 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c554:	f7fa ff28 	bl	80073a8 <HAL_GetTick>
 800c558:	4602      	mov	r2, r0
 800c55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55c:	1ad3      	subs	r3, r2, r3
 800c55e:	2b02      	cmp	r3, #2
 800c560:	d901      	bls.n	800c566 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800c562:	2303      	movs	r3, #3
 800c564:	e171      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c566:	4b80      	ldr	r3, [pc, #512]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f003 0320 	and.w	r3, r3, #32
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1f0      	bne.n	800c554 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c576:	2b00      	cmp	r3, #0
 800c578:	f000 8166 	beq.w	800c848 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800c57c:	2300      	movs	r3, #0
 800c57e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c582:	4b79      	ldr	r3, [pc, #484]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c584:	69db      	ldr	r3, [r3, #28]
 800c586:	f003 030c 	and.w	r3, r3, #12
 800c58a:	2b0c      	cmp	r3, #12
 800c58c:	f000 80f2 	beq.w	800c774 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c594:	2b02      	cmp	r3, #2
 800c596:	f040 80c5 	bne.w	800c724 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800c59a:	4b73      	ldr	r3, [pc, #460]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a72      	ldr	r2, [pc, #456]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c5a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c5a4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c5a6:	f7fa feff 	bl	80073a8 <HAL_GetTick>
 800c5aa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c5ac:	e008      	b.n	800c5c0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c5ae:	f7fa fefb 	bl	80073a8 <HAL_GetTick>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b6:	1ad3      	subs	r3, r2, r3
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	d901      	bls.n	800c5c0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800c5bc:	2303      	movs	r3, #3
 800c5be:	e144      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c5c0:	4b69      	ldr	r3, [pc, #420]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1f0      	bne.n	800c5ae <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c5cc:	4b66      	ldr	r3, [pc, #408]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c5ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5d2:	f003 0304 	and.w	r3, r3, #4
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d111      	bne.n	800c5fe <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800c5da:	4b63      	ldr	r3, [pc, #396]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c5dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5e0:	4a61      	ldr	r2, [pc, #388]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c5e2:	f043 0304 	orr.w	r3, r3, #4
 800c5e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c5ea:	4b5f      	ldr	r3, [pc, #380]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c5ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5f0:	f003 0304 	and.w	r3, r3, #4
 800c5f4:	60fb      	str	r3, [r7, #12]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800c5fe:	4b5b      	ldr	r3, [pc, #364]	; (800c76c <HAL_RCC_OscConfig+0xccc>)
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c606:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c60a:	d102      	bne.n	800c612 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800c60c:	2301      	movs	r3, #1
 800c60e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c612:	4b56      	ldr	r3, [pc, #344]	; (800c76c <HAL_RCC_OscConfig+0xccc>)
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	4a55      	ldr	r2, [pc, #340]	; (800c76c <HAL_RCC_OscConfig+0xccc>)
 800c618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c61c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800c61e:	4b52      	ldr	r3, [pc, #328]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c626:	f023 0303 	bic.w	r3, r3, #3
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c632:	3a01      	subs	r2, #1
 800c634:	0212      	lsls	r2, r2, #8
 800c636:	4311      	orrs	r1, r2
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c63c:	430a      	orrs	r2, r1
 800c63e:	494a      	ldr	r1, [pc, #296]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c640:	4313      	orrs	r3, r2
 800c642:	628b      	str	r3, [r1, #40]	; 0x28
 800c644:	4b48      	ldr	r3, [pc, #288]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c648:	4b49      	ldr	r3, [pc, #292]	; (800c770 <HAL_RCC_OscConfig+0xcd0>)
 800c64a:	4013      	ands	r3, r2
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c650:	3a01      	subs	r2, #1
 800c652:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c65a:	3a01      	subs	r2, #1
 800c65c:	0252      	lsls	r2, r2, #9
 800c65e:	b292      	uxth	r2, r2
 800c660:	4311      	orrs	r1, r2
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c666:	3a01      	subs	r2, #1
 800c668:	0412      	lsls	r2, r2, #16
 800c66a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c66e:	4311      	orrs	r1, r2
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c674:	3a01      	subs	r2, #1
 800c676:	0612      	lsls	r2, r2, #24
 800c678:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c67c:	430a      	orrs	r2, r1
 800c67e:	493a      	ldr	r1, [pc, #232]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c680:	4313      	orrs	r3, r2
 800c682:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800c684:	4b38      	ldr	r3, [pc, #224]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c688:	4a37      	ldr	r2, [pc, #220]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c68a:	f023 0310 	bic.w	r3, r3, #16
 800c68e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c694:	4a34      	ldr	r2, [pc, #208]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c696:	00db      	lsls	r3, r3, #3
 800c698:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800c69a:	4b33      	ldr	r3, [pc, #204]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c69e:	4a32      	ldr	r2, [pc, #200]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c6a0:	f043 0310 	orr.w	r3, r3, #16
 800c6a4:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800c6a6:	4b30      	ldr	r3, [pc, #192]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6aa:	f023 020c 	bic.w	r2, r3, #12
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6b2:	492d      	ldr	r1, [pc, #180]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800c6b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d105      	bne.n	800c6cc <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c6c0:	4b2a      	ldr	r3, [pc, #168]	; (800c76c <HAL_RCC_OscConfig+0xccc>)
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	4a29      	ldr	r2, [pc, #164]	; (800c76c <HAL_RCC_OscConfig+0xccc>)
 800c6c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c6ca:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800c6cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d107      	bne.n	800c6e4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800c6d4:	4b24      	ldr	r3, [pc, #144]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c6d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6da:	4a23      	ldr	r2, [pc, #140]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c6dc:	f023 0304 	bic.w	r3, r3, #4
 800c6e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c6e4:	4b20      	ldr	r3, [pc, #128]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6e8:	4a1f      	ldr	r2, [pc, #124]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c6ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c6ee:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800c6f0:	4b1d      	ldr	r3, [pc, #116]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a1c      	ldr	r2, [pc, #112]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c6f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c6fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c6fc:	f7fa fe54 	bl	80073a8 <HAL_GetTick>
 800c700:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c702:	e008      	b.n	800c716 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c704:	f7fa fe50 	bl	80073a8 <HAL_GetTick>
 800c708:	4602      	mov	r2, r0
 800c70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	2b02      	cmp	r3, #2
 800c710:	d901      	bls.n	800c716 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800c712:	2303      	movs	r3, #3
 800c714:	e099      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c716:	4b14      	ldr	r3, [pc, #80]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d0f0      	beq.n	800c704 <HAL_RCC_OscConfig+0xc64>
 800c722:	e091      	b.n	800c848 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800c724:	4b10      	ldr	r3, [pc, #64]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a0f      	ldr	r2, [pc, #60]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c72a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c72e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c730:	f7fa fe3a 	bl	80073a8 <HAL_GetTick>
 800c734:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c736:	e008      	b.n	800c74a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c738:	f7fa fe36 	bl	80073a8 <HAL_GetTick>
 800c73c:	4602      	mov	r2, r0
 800c73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	2b02      	cmp	r3, #2
 800c744:	d901      	bls.n	800c74a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800c746:	2303      	movs	r3, #3
 800c748:	e07f      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c74a:	4b07      	ldr	r3, [pc, #28]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1f0      	bne.n	800c738 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800c756:	4b04      	ldr	r3, [pc, #16]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c75a:	4a03      	ldr	r2, [pc, #12]	; (800c768 <HAL_RCC_OscConfig+0xcc8>)
 800c75c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c760:	f023 0303 	bic.w	r3, r3, #3
 800c764:	6293      	str	r3, [r2, #40]	; 0x28
 800c766:	e06f      	b.n	800c848 <HAL_RCC_OscConfig+0xda8>
 800c768:	46020c00 	.word	0x46020c00
 800c76c:	46020800 	.word	0x46020800
 800c770:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800c774:	4b37      	ldr	r3, [pc, #220]	; (800c854 <HAL_RCC_OscConfig+0xdb4>)
 800c776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c778:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c77a:	4b36      	ldr	r3, [pc, #216]	; (800c854 <HAL_RCC_OscConfig+0xdb4>)
 800c77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c77e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c784:	2b01      	cmp	r3, #1
 800c786:	d039      	beq.n	800c7fc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800c788:	69fb      	ldr	r3, [r7, #28]
 800c78a:	f003 0203 	and.w	r2, r3, #3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c792:	429a      	cmp	r2, r3
 800c794:	d132      	bne.n	800c7fc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	0a1b      	lsrs	r3, r3, #8
 800c79a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d129      	bne.n	800c7fc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d122      	bne.n	800c7fc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7c0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d11a      	bne.n	800c7fc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	0a5b      	lsrs	r3, r3, #9
 800c7ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d111      	bne.n	800c7fc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	0c1b      	lsrs	r3, r3, #16
 800c7dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7e4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d108      	bne.n	800c7fc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800c7ea:	69bb      	ldr	r3, [r7, #24]
 800c7ec:	0e1b      	lsrs	r3, r3, #24
 800c7ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7f6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d001      	beq.n	800c800 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e024      	b.n	800c84a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800c800:	4b14      	ldr	r3, [pc, #80]	; (800c854 <HAL_RCC_OscConfig+0xdb4>)
 800c802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c804:	08db      	lsrs	r3, r3, #3
 800c806:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800c80e:	429a      	cmp	r2, r3
 800c810:	d01a      	beq.n	800c848 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800c812:	4b10      	ldr	r3, [pc, #64]	; (800c854 <HAL_RCC_OscConfig+0xdb4>)
 800c814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c816:	4a0f      	ldr	r2, [pc, #60]	; (800c854 <HAL_RCC_OscConfig+0xdb4>)
 800c818:	f023 0310 	bic.w	r3, r3, #16
 800c81c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c81e:	f7fa fdc3 	bl	80073a8 <HAL_GetTick>
 800c822:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800c824:	bf00      	nop
 800c826:	f7fa fdbf 	bl	80073a8 <HAL_GetTick>
 800c82a:	4602      	mov	r2, r0
 800c82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82e:	4293      	cmp	r3, r2
 800c830:	d0f9      	beq.n	800c826 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c836:	4a07      	ldr	r2, [pc, #28]	; (800c854 <HAL_RCC_OscConfig+0xdb4>)
 800c838:	00db      	lsls	r3, r3, #3
 800c83a:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800c83c:	4b05      	ldr	r3, [pc, #20]	; (800c854 <HAL_RCC_OscConfig+0xdb4>)
 800c83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c840:	4a04      	ldr	r2, [pc, #16]	; (800c854 <HAL_RCC_OscConfig+0xdb4>)
 800c842:	f043 0310 	orr.w	r3, r3, #16
 800c846:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800c848:	2300      	movs	r3, #0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3738      	adds	r7, #56	; 0x38
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	46020c00 	.word	0x46020c00

0800c858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b086      	sub	sp, #24
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d101      	bne.n	800c86c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	e1d9      	b.n	800cc20 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c86c:	4b9b      	ldr	r3, [pc, #620]	; (800cadc <HAL_RCC_ClockConfig+0x284>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f003 030f 	and.w	r3, r3, #15
 800c874:	683a      	ldr	r2, [r7, #0]
 800c876:	429a      	cmp	r2, r3
 800c878:	d910      	bls.n	800c89c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c87a:	4b98      	ldr	r3, [pc, #608]	; (800cadc <HAL_RCC_ClockConfig+0x284>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f023 020f 	bic.w	r2, r3, #15
 800c882:	4996      	ldr	r1, [pc, #600]	; (800cadc <HAL_RCC_ClockConfig+0x284>)
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	4313      	orrs	r3, r2
 800c888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c88a:	4b94      	ldr	r3, [pc, #592]	; (800cadc <HAL_RCC_ClockConfig+0x284>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f003 030f 	and.w	r3, r3, #15
 800c892:	683a      	ldr	r2, [r7, #0]
 800c894:	429a      	cmp	r2, r3
 800c896:	d001      	beq.n	800c89c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c898:	2301      	movs	r3, #1
 800c89a:	e1c1      	b.n	800cc20 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f003 0310 	and.w	r3, r3, #16
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d010      	beq.n	800c8ca <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	695a      	ldr	r2, [r3, #20]
 800c8ac:	4b8c      	ldr	r3, [pc, #560]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d908      	bls.n	800c8ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800c8b8:	4b89      	ldr	r3, [pc, #548]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	695b      	ldr	r3, [r3, #20]
 800c8c4:	4986      	ldr	r1, [pc, #536]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f003 0308 	and.w	r3, r3, #8
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d012      	beq.n	800c8fc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	691a      	ldr	r2, [r3, #16]
 800c8da:	4b81      	ldr	r3, [pc, #516]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c8dc:	6a1b      	ldr	r3, [r3, #32]
 800c8de:	091b      	lsrs	r3, r3, #4
 800c8e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d909      	bls.n	800c8fc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800c8e8:	4b7d      	ldr	r3, [pc, #500]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c8ea:	6a1b      	ldr	r3, [r3, #32]
 800c8ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	011b      	lsls	r3, r3, #4
 800c8f6:	497a      	ldr	r1, [pc, #488]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f003 0304 	and.w	r3, r3, #4
 800c904:	2b00      	cmp	r3, #0
 800c906:	d010      	beq.n	800c92a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	68da      	ldr	r2, [r3, #12]
 800c90c:	4b74      	ldr	r3, [pc, #464]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c90e:	6a1b      	ldr	r3, [r3, #32]
 800c910:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c914:	429a      	cmp	r2, r3
 800c916:	d908      	bls.n	800c92a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800c918:	4b71      	ldr	r3, [pc, #452]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c91a:	6a1b      	ldr	r3, [r3, #32]
 800c91c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	68db      	ldr	r3, [r3, #12]
 800c924:	496e      	ldr	r1, [pc, #440]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c926:	4313      	orrs	r3, r2
 800c928:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f003 0302 	and.w	r3, r3, #2
 800c932:	2b00      	cmp	r3, #0
 800c934:	d010      	beq.n	800c958 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	689a      	ldr	r2, [r3, #8]
 800c93a:	4b69      	ldr	r3, [pc, #420]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c93c:	6a1b      	ldr	r3, [r3, #32]
 800c93e:	f003 030f 	and.w	r3, r3, #15
 800c942:	429a      	cmp	r2, r3
 800c944:	d908      	bls.n	800c958 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800c946:	4b66      	ldr	r3, [pc, #408]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c948:	6a1b      	ldr	r3, [r3, #32]
 800c94a:	f023 020f 	bic.w	r2, r3, #15
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	4963      	ldr	r1, [pc, #396]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c954:	4313      	orrs	r3, r2
 800c956:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f003 0301 	and.w	r3, r3, #1
 800c960:	2b00      	cmp	r3, #0
 800c962:	f000 80d2 	beq.w	800cb0a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800c966:	2300      	movs	r3, #0
 800c968:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	2b03      	cmp	r3, #3
 800c970:	d143      	bne.n	800c9fa <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c972:	4b5b      	ldr	r3, [pc, #364]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c978:	f003 0304 	and.w	r3, r3, #4
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d110      	bne.n	800c9a2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800c980:	4b57      	ldr	r3, [pc, #348]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c986:	4a56      	ldr	r2, [pc, #344]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c988:	f043 0304 	orr.w	r3, r3, #4
 800c98c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c990:	4b53      	ldr	r3, [pc, #332]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c996:	f003 0304 	and.w	r3, r3, #4
 800c99a:	60bb      	str	r3, [r7, #8]
 800c99c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800c9a2:	f7fa fd01 	bl	80073a8 <HAL_GetTick>
 800c9a6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800c9a8:	4b4e      	ldr	r3, [pc, #312]	; (800cae4 <HAL_RCC_ClockConfig+0x28c>)
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d00f      	beq.n	800c9d4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800c9b4:	e008      	b.n	800c9c8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800c9b6:	f7fa fcf7 	bl	80073a8 <HAL_GetTick>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	2b02      	cmp	r3, #2
 800c9c2:	d901      	bls.n	800c9c8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800c9c4:	2303      	movs	r3, #3
 800c9c6:	e12b      	b.n	800cc20 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800c9c8:	4b46      	ldr	r3, [pc, #280]	; (800cae4 <HAL_RCC_ClockConfig+0x28c>)
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d0f0      	beq.n	800c9b6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800c9d4:	7dfb      	ldrb	r3, [r7, #23]
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d107      	bne.n	800c9ea <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800c9da:	4b41      	ldr	r3, [pc, #260]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c9dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9e0:	4a3f      	ldr	r2, [pc, #252]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c9e2:	f023 0304 	bic.w	r3, r3, #4
 800c9e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c9ea:	4b3d      	ldr	r3, [pc, #244]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d121      	bne.n	800ca3a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e112      	b.n	800cc20 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	2b02      	cmp	r3, #2
 800ca00:	d107      	bne.n	800ca12 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ca02:	4b37      	ldr	r3, [pc, #220]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d115      	bne.n	800ca3a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e106      	b.n	800cc20 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d107      	bne.n	800ca2a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ca1a:	4b31      	ldr	r3, [pc, #196]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f003 0304 	and.w	r3, r3, #4
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d109      	bne.n	800ca3a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ca26:	2301      	movs	r3, #1
 800ca28:	e0fa      	b.n	800cc20 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ca2a:	4b2d      	ldr	r3, [pc, #180]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d101      	bne.n	800ca3a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ca36:	2301      	movs	r3, #1
 800ca38:	e0f2      	b.n	800cc20 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800ca3a:	4b29      	ldr	r3, [pc, #164]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800ca3c:	69db      	ldr	r3, [r3, #28]
 800ca3e:	f023 0203 	bic.w	r2, r3, #3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	4926      	ldr	r1, [pc, #152]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800ca4c:	f7fa fcac 	bl	80073a8 <HAL_GetTick>
 800ca50:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	2b03      	cmp	r3, #3
 800ca58:	d112      	bne.n	800ca80 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ca5a:	e00a      	b.n	800ca72 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca5c:	f7fa fca4 	bl	80073a8 <HAL_GetTick>
 800ca60:	4602      	mov	r2, r0
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d901      	bls.n	800ca72 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800ca6e:	2303      	movs	r3, #3
 800ca70:	e0d6      	b.n	800cc20 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ca72:	4b1b      	ldr	r3, [pc, #108]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800ca74:	69db      	ldr	r3, [r3, #28]
 800ca76:	f003 030c 	and.w	r3, r3, #12
 800ca7a:	2b0c      	cmp	r3, #12
 800ca7c:	d1ee      	bne.n	800ca5c <HAL_RCC_ClockConfig+0x204>
 800ca7e:	e044      	b.n	800cb0a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	2b02      	cmp	r3, #2
 800ca86:	d112      	bne.n	800caae <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800ca88:	e00a      	b.n	800caa0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca8a:	f7fa fc8d 	bl	80073a8 <HAL_GetTick>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	1ad3      	subs	r3, r2, r3
 800ca94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d901      	bls.n	800caa0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ca9c:	2303      	movs	r3, #3
 800ca9e:	e0bf      	b.n	800cc20 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800caa0:	4b0f      	ldr	r3, [pc, #60]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800caa2:	69db      	ldr	r3, [r3, #28]
 800caa4:	f003 030c 	and.w	r3, r3, #12
 800caa8:	2b08      	cmp	r3, #8
 800caaa:	d1ee      	bne.n	800ca8a <HAL_RCC_ClockConfig+0x232>
 800caac:	e02d      	b.n	800cb0a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d123      	bne.n	800cafe <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800cab6:	e00a      	b.n	800cace <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cab8:	f7fa fc76 	bl	80073a8 <HAL_GetTick>
 800cabc:	4602      	mov	r2, r0
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	1ad3      	subs	r3, r2, r3
 800cac2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d901      	bls.n	800cace <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800caca:	2303      	movs	r3, #3
 800cacc:	e0a8      	b.n	800cc20 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800cace:	4b04      	ldr	r3, [pc, #16]	; (800cae0 <HAL_RCC_ClockConfig+0x288>)
 800cad0:	69db      	ldr	r3, [r3, #28]
 800cad2:	f003 030c 	and.w	r3, r3, #12
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d1ee      	bne.n	800cab8 <HAL_RCC_ClockConfig+0x260>
 800cada:	e016      	b.n	800cb0a <HAL_RCC_ClockConfig+0x2b2>
 800cadc:	40022000 	.word	0x40022000
 800cae0:	46020c00 	.word	0x46020c00
 800cae4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cae8:	f7fa fc5e 	bl	80073a8 <HAL_GetTick>
 800caec:	4602      	mov	r2, r0
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	1ad3      	subs	r3, r2, r3
 800caf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d901      	bls.n	800cafe <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800cafa:	2303      	movs	r3, #3
 800cafc:	e090      	b.n	800cc20 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800cafe:	4b4a      	ldr	r3, [pc, #296]	; (800cc28 <HAL_RCC_ClockConfig+0x3d0>)
 800cb00:	69db      	ldr	r3, [r3, #28]
 800cb02:	f003 030c 	and.w	r3, r3, #12
 800cb06:	2b04      	cmp	r3, #4
 800cb08:	d1ee      	bne.n	800cae8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f003 0302 	and.w	r3, r3, #2
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d010      	beq.n	800cb38 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	689a      	ldr	r2, [r3, #8]
 800cb1a:	4b43      	ldr	r3, [pc, #268]	; (800cc28 <HAL_RCC_ClockConfig+0x3d0>)
 800cb1c:	6a1b      	ldr	r3, [r3, #32]
 800cb1e:	f003 030f 	and.w	r3, r3, #15
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d208      	bcs.n	800cb38 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800cb26:	4b40      	ldr	r3, [pc, #256]	; (800cc28 <HAL_RCC_ClockConfig+0x3d0>)
 800cb28:	6a1b      	ldr	r3, [r3, #32]
 800cb2a:	f023 020f 	bic.w	r2, r3, #15
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	493d      	ldr	r1, [pc, #244]	; (800cc28 <HAL_RCC_ClockConfig+0x3d0>)
 800cb34:	4313      	orrs	r3, r2
 800cb36:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cb38:	4b3c      	ldr	r3, [pc, #240]	; (800cc2c <HAL_RCC_ClockConfig+0x3d4>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f003 030f 	and.w	r3, r3, #15
 800cb40:	683a      	ldr	r2, [r7, #0]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d210      	bcs.n	800cb68 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb46:	4b39      	ldr	r3, [pc, #228]	; (800cc2c <HAL_RCC_ClockConfig+0x3d4>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f023 020f 	bic.w	r2, r3, #15
 800cb4e:	4937      	ldr	r1, [pc, #220]	; (800cc2c <HAL_RCC_ClockConfig+0x3d4>)
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb56:	4b35      	ldr	r3, [pc, #212]	; (800cc2c <HAL_RCC_ClockConfig+0x3d4>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f003 030f 	and.w	r3, r3, #15
 800cb5e:	683a      	ldr	r2, [r7, #0]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d001      	beq.n	800cb68 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800cb64:	2301      	movs	r3, #1
 800cb66:	e05b      	b.n	800cc20 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f003 0304 	and.w	r3, r3, #4
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d010      	beq.n	800cb96 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	68da      	ldr	r2, [r3, #12]
 800cb78:	4b2b      	ldr	r3, [pc, #172]	; (800cc28 <HAL_RCC_ClockConfig+0x3d0>)
 800cb7a:	6a1b      	ldr	r3, [r3, #32]
 800cb7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d208      	bcs.n	800cb96 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800cb84:	4b28      	ldr	r3, [pc, #160]	; (800cc28 <HAL_RCC_ClockConfig+0x3d0>)
 800cb86:	6a1b      	ldr	r3, [r3, #32]
 800cb88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	68db      	ldr	r3, [r3, #12]
 800cb90:	4925      	ldr	r1, [pc, #148]	; (800cc28 <HAL_RCC_ClockConfig+0x3d0>)
 800cb92:	4313      	orrs	r3, r2
 800cb94:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f003 0308 	and.w	r3, r3, #8
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d012      	beq.n	800cbc8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	691a      	ldr	r2, [r3, #16]
 800cba6:	4b20      	ldr	r3, [pc, #128]	; (800cc28 <HAL_RCC_ClockConfig+0x3d0>)
 800cba8:	6a1b      	ldr	r3, [r3, #32]
 800cbaa:	091b      	lsrs	r3, r3, #4
 800cbac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d209      	bcs.n	800cbc8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800cbb4:	4b1c      	ldr	r3, [pc, #112]	; (800cc28 <HAL_RCC_ClockConfig+0x3d0>)
 800cbb6:	6a1b      	ldr	r3, [r3, #32]
 800cbb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	691b      	ldr	r3, [r3, #16]
 800cbc0:	011b      	lsls	r3, r3, #4
 800cbc2:	4919      	ldr	r1, [pc, #100]	; (800cc28 <HAL_RCC_ClockConfig+0x3d0>)
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f003 0310 	and.w	r3, r3, #16
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d010      	beq.n	800cbf6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	695a      	ldr	r2, [r3, #20]
 800cbd8:	4b13      	ldr	r3, [pc, #76]	; (800cc28 <HAL_RCC_ClockConfig+0x3d0>)
 800cbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d208      	bcs.n	800cbf6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800cbe4:	4b10      	ldr	r3, [pc, #64]	; (800cc28 <HAL_RCC_ClockConfig+0x3d0>)
 800cbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	695b      	ldr	r3, [r3, #20]
 800cbf0:	490d      	ldr	r1, [pc, #52]	; (800cc28 <HAL_RCC_ClockConfig+0x3d0>)
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800cbf6:	f000 f821 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	4b0a      	ldr	r3, [pc, #40]	; (800cc28 <HAL_RCC_ClockConfig+0x3d0>)
 800cbfe:	6a1b      	ldr	r3, [r3, #32]
 800cc00:	f003 030f 	and.w	r3, r3, #15
 800cc04:	490a      	ldr	r1, [pc, #40]	; (800cc30 <HAL_RCC_ClockConfig+0x3d8>)
 800cc06:	5ccb      	ldrb	r3, [r1, r3]
 800cc08:	fa22 f303 	lsr.w	r3, r2, r3
 800cc0c:	4a09      	ldr	r2, [pc, #36]	; (800cc34 <HAL_RCC_ClockConfig+0x3dc>)
 800cc0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800cc10:	4b09      	ldr	r3, [pc, #36]	; (800cc38 <HAL_RCC_ClockConfig+0x3e0>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7f4 fe1d 	bl	8001854 <HAL_InitTick>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	73fb      	strb	r3, [r7, #15]

  return status;
 800cc1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3718      	adds	r7, #24
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	46020c00 	.word	0x46020c00
 800cc2c:	40022000 	.word	0x40022000
 800cc30:	0802a810 	.word	0x0802a810
 800cc34:	20000048 	.word	0x20000048
 800cc38:	2000004c 	.word	0x2000004c

0800cc3c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b08b      	sub	sp, #44	; 0x2c
 800cc40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800cc42:	2300      	movs	r3, #0
 800cc44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800cc46:	2300      	movs	r3, #0
 800cc48:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc4a:	4b7b      	ldr	r3, [pc, #492]	; (800ce38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc4c:	69db      	ldr	r3, [r3, #28]
 800cc4e:	f003 030c 	and.w	r3, r3, #12
 800cc52:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cc54:	4b78      	ldr	r3, [pc, #480]	; (800ce38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc58:	f003 0303 	and.w	r3, r3, #3
 800cc5c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d005      	beq.n	800cc70 <HAL_RCC_GetSysClockFreq+0x34>
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	2b0c      	cmp	r3, #12
 800cc68:	d121      	bne.n	800ccae <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d11e      	bne.n	800ccae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800cc70:	4b71      	ldr	r3, [pc, #452]	; (800ce38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d107      	bne.n	800cc8c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800cc7c:	4b6e      	ldr	r3, [pc, #440]	; (800ce38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cc82:	0b1b      	lsrs	r3, r3, #12
 800cc84:	f003 030f 	and.w	r3, r3, #15
 800cc88:	627b      	str	r3, [r7, #36]	; 0x24
 800cc8a:	e005      	b.n	800cc98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800cc8c:	4b6a      	ldr	r3, [pc, #424]	; (800ce38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	0f1b      	lsrs	r3, r3, #28
 800cc92:	f003 030f 	and.w	r3, r3, #15
 800cc96:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800cc98:	4a68      	ldr	r2, [pc, #416]	; (800ce3c <HAL_RCC_GetSysClockFreq+0x200>)
 800cc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cca0:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d110      	bne.n	800ccca <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800cca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccaa:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ccac:	e00d      	b.n	800ccca <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ccae:	4b62      	ldr	r3, [pc, #392]	; (800ce38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ccb0:	69db      	ldr	r3, [r3, #28]
 800ccb2:	f003 030c 	and.w	r3, r3, #12
 800ccb6:	2b04      	cmp	r3, #4
 800ccb8:	d102      	bne.n	800ccc0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ccba:	4b61      	ldr	r3, [pc, #388]	; (800ce40 <HAL_RCC_GetSysClockFreq+0x204>)
 800ccbc:	623b      	str	r3, [r7, #32]
 800ccbe:	e004      	b.n	800ccca <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	2b08      	cmp	r3, #8
 800ccc4:	d101      	bne.n	800ccca <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ccc6:	4b5e      	ldr	r3, [pc, #376]	; (800ce40 <HAL_RCC_GetSysClockFreq+0x204>)
 800ccc8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	2b0c      	cmp	r3, #12
 800ccce:	f040 80ac 	bne.w	800ce2a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ccd2:	4b59      	ldr	r3, [pc, #356]	; (800ce38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ccd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd6:	f003 0303 	and.w	r3, r3, #3
 800ccda:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ccdc:	4b56      	ldr	r3, [pc, #344]	; (800ce38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ccde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cce0:	0a1b      	lsrs	r3, r3, #8
 800cce2:	f003 030f 	and.w	r3, r3, #15
 800cce6:	3301      	adds	r3, #1
 800cce8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ccea:	4b53      	ldr	r3, [pc, #332]	; (800ce38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ccec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccee:	091b      	lsrs	r3, r3, #4
 800ccf0:	f003 0301 	and.w	r3, r3, #1
 800ccf4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800ccf6:	4b50      	ldr	r3, [pc, #320]	; (800ce38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ccf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccfa:	08db      	lsrs	r3, r3, #3
 800ccfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd00:	68ba      	ldr	r2, [r7, #8]
 800cd02:	fb02 f303 	mul.w	r3, r2, r3
 800cd06:	ee07 3a90 	vmov	s15, r3
 800cd0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd0e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	f000 8086 	beq.w	800ce26 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	2b02      	cmp	r3, #2
 800cd1e:	d003      	beq.n	800cd28 <HAL_RCC_GetSysClockFreq+0xec>
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	2b03      	cmp	r3, #3
 800cd24:	d022      	beq.n	800cd6c <HAL_RCC_GetSysClockFreq+0x130>
 800cd26:	e043      	b.n	800cdb0 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	ee07 3a90 	vmov	s15, r3
 800cd2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd32:	eddf 6a44 	vldr	s13, [pc, #272]	; 800ce44 <HAL_RCC_GetSysClockFreq+0x208>
 800cd36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd3a:	4b3f      	ldr	r3, [pc, #252]	; (800ce38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cd3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd42:	ee07 3a90 	vmov	s15, r3
 800cd46:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cd4a:	ed97 6a01 	vldr	s12, [r7, #4]
 800cd4e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800ce48 <HAL_RCC_GetSysClockFreq+0x20c>
 800cd52:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cd56:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cd5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cd62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd66:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800cd6a:	e046      	b.n	800cdfa <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	ee07 3a90 	vmov	s15, r3
 800cd72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd76:	eddf 6a33 	vldr	s13, [pc, #204]	; 800ce44 <HAL_RCC_GetSysClockFreq+0x208>
 800cd7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd7e:	4b2e      	ldr	r3, [pc, #184]	; (800ce38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cd80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd86:	ee07 3a90 	vmov	s15, r3
 800cd8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cd8e:	ed97 6a01 	vldr	s12, [r7, #4]
 800cd92:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800ce48 <HAL_RCC_GetSysClockFreq+0x20c>
 800cd96:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cd9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cd9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cda2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdaa:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800cdae:	e024      	b.n	800cdfa <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb2:	ee07 3a90 	vmov	s15, r3
 800cdb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	ee07 3a90 	vmov	s15, r3
 800cdc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdc8:	4b1b      	ldr	r3, [pc, #108]	; (800ce38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cdca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd0:	ee07 3a90 	vmov	s15, r3
 800cdd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cdd8:	ed97 6a01 	vldr	s12, [r7, #4]
 800cddc:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800ce48 <HAL_RCC_GetSysClockFreq+0x20c>
 800cde0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cde4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cde8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdec:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cdf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdf4:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800cdf8:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800cdfa:	4b0f      	ldr	r3, [pc, #60]	; (800ce38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cdfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdfe:	0e1b      	lsrs	r3, r3, #24
 800ce00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce04:	3301      	adds	r3, #1
 800ce06:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	ee07 3a90 	vmov	s15, r3
 800ce0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ce12:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce1e:	ee17 3a90 	vmov	r3, s15
 800ce22:	623b      	str	r3, [r7, #32]
 800ce24:	e001      	b.n	800ce2a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800ce26:	2300      	movs	r3, #0
 800ce28:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800ce2a:	6a3b      	ldr	r3, [r7, #32]
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	372c      	adds	r7, #44	; 0x2c
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr
 800ce38:	46020c00 	.word	0x46020c00
 800ce3c:	0802a828 	.word	0x0802a828
 800ce40:	00f42400 	.word	0x00f42400
 800ce44:	4b742400 	.word	0x4b742400
 800ce48:	46000000 	.word	0x46000000

0800ce4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800ce50:	f7ff fef4 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800ce54:	4602      	mov	r2, r0
 800ce56:	4b07      	ldr	r3, [pc, #28]	; (800ce74 <HAL_RCC_GetHCLKFreq+0x28>)
 800ce58:	6a1b      	ldr	r3, [r3, #32]
 800ce5a:	f003 030f 	and.w	r3, r3, #15
 800ce5e:	4906      	ldr	r1, [pc, #24]	; (800ce78 <HAL_RCC_GetHCLKFreq+0x2c>)
 800ce60:	5ccb      	ldrb	r3, [r1, r3]
 800ce62:	fa22 f303 	lsr.w	r3, r2, r3
 800ce66:	4a05      	ldr	r2, [pc, #20]	; (800ce7c <HAL_RCC_GetHCLKFreq+0x30>)
 800ce68:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800ce6a:	4b04      	ldr	r3, [pc, #16]	; (800ce7c <HAL_RCC_GetHCLKFreq+0x30>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	46020c00 	.word	0x46020c00
 800ce78:	0802a810 	.word	0x0802a810
 800ce7c:	20000048 	.word	0x20000048

0800ce80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800ce84:	f7ff ffe2 	bl	800ce4c <HAL_RCC_GetHCLKFreq>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	4b05      	ldr	r3, [pc, #20]	; (800cea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ce8c:	6a1b      	ldr	r3, [r3, #32]
 800ce8e:	091b      	lsrs	r3, r3, #4
 800ce90:	f003 0307 	and.w	r3, r3, #7
 800ce94:	4903      	ldr	r1, [pc, #12]	; (800cea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ce96:	5ccb      	ldrb	r3, [r1, r3]
 800ce98:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	46020c00 	.word	0x46020c00
 800cea4:	0802a820 	.word	0x0802a820

0800cea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800ceac:	f7ff ffce 	bl	800ce4c <HAL_RCC_GetHCLKFreq>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	4b05      	ldr	r3, [pc, #20]	; (800cec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ceb4:	6a1b      	ldr	r3, [r3, #32]
 800ceb6:	0a1b      	lsrs	r3, r3, #8
 800ceb8:	f003 0307 	and.w	r3, r3, #7
 800cebc:	4903      	ldr	r1, [pc, #12]	; (800cecc <HAL_RCC_GetPCLK2Freq+0x24>)
 800cebe:	5ccb      	ldrb	r3, [r1, r3]
 800cec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	46020c00 	.word	0x46020c00
 800cecc:	0802a820 	.word	0x0802a820

0800ced0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800ced4:	f7ff ffba 	bl	800ce4c <HAL_RCC_GetHCLKFreq>
 800ced8:	4602      	mov	r2, r0
 800ceda:	4b05      	ldr	r3, [pc, #20]	; (800cef0 <HAL_RCC_GetPCLK3Freq+0x20>)
 800cedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cede:	091b      	lsrs	r3, r3, #4
 800cee0:	f003 0307 	and.w	r3, r3, #7
 800cee4:	4903      	ldr	r1, [pc, #12]	; (800cef4 <HAL_RCC_GetPCLK3Freq+0x24>)
 800cee6:	5ccb      	ldrb	r3, [r1, r3]
 800cee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	46020c00 	.word	0x46020c00
 800cef4:	0802a820 	.word	0x0802a820

0800cef8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	221f      	movs	r2, #31
 800cf06:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800cf08:	4b15      	ldr	r3, [pc, #84]	; (800cf60 <HAL_RCC_GetClockConfig+0x68>)
 800cf0a:	69db      	ldr	r3, [r3, #28]
 800cf0c:	f003 0203 	and.w	r2, r3, #3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800cf14:	4b12      	ldr	r3, [pc, #72]	; (800cf60 <HAL_RCC_GetClockConfig+0x68>)
 800cf16:	6a1b      	ldr	r3, [r3, #32]
 800cf18:	f003 020f 	and.w	r2, r3, #15
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800cf20:	4b0f      	ldr	r3, [pc, #60]	; (800cf60 <HAL_RCC_GetClockConfig+0x68>)
 800cf22:	6a1b      	ldr	r3, [r3, #32]
 800cf24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800cf2c:	4b0c      	ldr	r3, [pc, #48]	; (800cf60 <HAL_RCC_GetClockConfig+0x68>)
 800cf2e:	6a1b      	ldr	r3, [r3, #32]
 800cf30:	091b      	lsrs	r3, r3, #4
 800cf32:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800cf3a:	4b09      	ldr	r3, [pc, #36]	; (800cf60 <HAL_RCC_GetClockConfig+0x68>)
 800cf3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf3e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cf46:	4b07      	ldr	r3, [pc, #28]	; (800cf64 <HAL_RCC_GetClockConfig+0x6c>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f003 020f 	and.w	r2, r3, #15
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	601a      	str	r2, [r3, #0]
}
 800cf52:	bf00      	nop
 800cf54:	370c      	adds	r7, #12
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr
 800cf5e:	bf00      	nop
 800cf60:	46020c00 	.word	0x46020c00
 800cf64:	40022000 	.word	0x40022000

0800cf68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cf70:	4b3e      	ldr	r3, [pc, #248]	; (800d06c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cf72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf76:	f003 0304 	and.w	r3, r3, #4
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d003      	beq.n	800cf86 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800cf7e:	f7fe fd11 	bl	800b9a4 <HAL_PWREx_GetVoltageRange>
 800cf82:	6178      	str	r0, [r7, #20]
 800cf84:	e019      	b.n	800cfba <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800cf86:	4b39      	ldr	r3, [pc, #228]	; (800d06c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cf88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf8c:	4a37      	ldr	r2, [pc, #220]	; (800d06c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cf8e:	f043 0304 	orr.w	r3, r3, #4
 800cf92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800cf96:	4b35      	ldr	r3, [pc, #212]	; (800d06c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cf98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf9c:	f003 0304 	and.w	r3, r3, #4
 800cfa0:	60fb      	str	r3, [r7, #12]
 800cfa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cfa4:	f7fe fcfe 	bl	800b9a4 <HAL_PWREx_GetVoltageRange>
 800cfa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800cfaa:	4b30      	ldr	r3, [pc, #192]	; (800d06c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cfac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfb0:	4a2e      	ldr	r2, [pc, #184]	; (800d06c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cfb2:	f023 0304 	bic.w	r3, r3, #4
 800cfb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cfc0:	d003      	beq.n	800cfca <RCC_SetFlashLatencyFromMSIRange+0x62>
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfc8:	d109      	bne.n	800cfde <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfd0:	d202      	bcs.n	800cfd8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800cfd6:	e033      	b.n	800d040 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800cfd8:	2300      	movs	r3, #0
 800cfda:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800cfdc:	e030      	b.n	800d040 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfe4:	d208      	bcs.n	800cff8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfec:	d102      	bne.n	800cff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800cfee:	2303      	movs	r3, #3
 800cff0:	613b      	str	r3, [r7, #16]
 800cff2:	e025      	b.n	800d040 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800cff4:	2301      	movs	r3, #1
 800cff6:	e035      	b.n	800d064 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cffe:	d90f      	bls.n	800d020 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d109      	bne.n	800d01a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d00c:	d902      	bls.n	800d014 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800d00e:	2300      	movs	r3, #0
 800d010:	613b      	str	r3, [r7, #16]
 800d012:	e015      	b.n	800d040 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800d014:	2301      	movs	r3, #1
 800d016:	613b      	str	r3, [r7, #16]
 800d018:	e012      	b.n	800d040 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800d01a:	2300      	movs	r3, #0
 800d01c:	613b      	str	r3, [r7, #16]
 800d01e:	e00f      	b.n	800d040 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d026:	d109      	bne.n	800d03c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d02e:	d102      	bne.n	800d036 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800d030:	2301      	movs	r3, #1
 800d032:	613b      	str	r3, [r7, #16]
 800d034:	e004      	b.n	800d040 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800d036:	2302      	movs	r3, #2
 800d038:	613b      	str	r3, [r7, #16]
 800d03a:	e001      	b.n	800d040 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800d03c:	2301      	movs	r3, #1
 800d03e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d040:	4b0b      	ldr	r3, [pc, #44]	; (800d070 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f023 020f 	bic.w	r2, r3, #15
 800d048:	4909      	ldr	r1, [pc, #36]	; (800d070 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	4313      	orrs	r3, r2
 800d04e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800d050:	4b07      	ldr	r3, [pc, #28]	; (800d070 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f003 030f 	and.w	r3, r3, #15
 800d058:	693a      	ldr	r2, [r7, #16]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d001      	beq.n	800d062 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800d05e:	2301      	movs	r3, #1
 800d060:	e000      	b.n	800d064 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800d062:	2300      	movs	r3, #0
}
 800d064:	4618      	mov	r0, r3
 800d066:	3718      	adds	r7, #24
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	46020c00 	.word	0x46020c00
 800d070:	40022000 	.word	0x40022000

0800d074 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800d074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d078:	b0c8      	sub	sp, #288	; 0x120
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d080:	2300      	movs	r3, #0
 800d082:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d086:	2300      	movs	r3, #0
 800d088:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d08c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d094:	f002 0401 	and.w	r4, r2, #1
 800d098:	2500      	movs	r5, #0
 800d09a:	ea54 0305 	orrs.w	r3, r4, r5
 800d09e:	d00b      	beq.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800d0a0:	4bd5      	ldr	r3, [pc, #852]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d0a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d0a6:	f023 0103 	bic.w	r1, r3, #3
 800d0aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0b0:	4ad1      	ldr	r2, [pc, #836]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d0b2:	430b      	orrs	r3, r1
 800d0b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d0b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c0:	f002 0802 	and.w	r8, r2, #2
 800d0c4:	f04f 0900 	mov.w	r9, #0
 800d0c8:	ea58 0309 	orrs.w	r3, r8, r9
 800d0cc:	d00b      	beq.n	800d0e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800d0ce:	4bca      	ldr	r3, [pc, #808]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d0d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d0d4:	f023 010c 	bic.w	r1, r3, #12
 800d0d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0de:	4ac6      	ldr	r2, [pc, #792]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d0e0:	430b      	orrs	r3, r1
 800d0e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d0e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ee:	f002 0a04 	and.w	sl, r2, #4
 800d0f2:	f04f 0b00 	mov.w	fp, #0
 800d0f6:	ea5a 030b 	orrs.w	r3, sl, fp
 800d0fa:	d00b      	beq.n	800d114 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800d0fc:	4bbe      	ldr	r3, [pc, #760]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d0fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d102:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800d106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d10c:	4aba      	ldr	r2, [pc, #744]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d10e:	430b      	orrs	r3, r1
 800d110:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11c:	f002 0308 	and.w	r3, r2, #8
 800d120:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d124:	2300      	movs	r3, #0
 800d126:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d12a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800d12e:	460b      	mov	r3, r1
 800d130:	4313      	orrs	r3, r2
 800d132:	d00b      	beq.n	800d14c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800d134:	4bb0      	ldr	r3, [pc, #704]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d13a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d13e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d144:	4aac      	ldr	r2, [pc, #688]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d146:	430b      	orrs	r3, r1
 800d148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d14c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d154:	f002 0310 	and.w	r3, r2, #16
 800d158:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d15c:	2300      	movs	r3, #0
 800d15e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d162:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800d166:	460b      	mov	r3, r1
 800d168:	4313      	orrs	r3, r2
 800d16a:	d00b      	beq.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800d16c:	4ba2      	ldr	r3, [pc, #648]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d16e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d172:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d17a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d17c:	4a9e      	ldr	r2, [pc, #632]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d17e:	430b      	orrs	r3, r1
 800d180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800d190:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d194:	2300      	movs	r3, #0
 800d196:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d19a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800d19e:	460b      	mov	r3, r1
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	d00b      	beq.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800d1a4:	4b94      	ldr	r3, [pc, #592]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d1a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d1aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d1ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1b4:	4a90      	ldr	r2, [pc, #576]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d1b6:	430b      	orrs	r3, r1
 800d1b8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d1bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c4:	f002 0320 	and.w	r3, r2, #32
 800d1c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d1d2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	d00b      	beq.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800d1dc:	4b86      	ldr	r3, [pc, #536]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d1de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d1e2:	f023 0107 	bic.w	r1, r3, #7
 800d1e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1ec:	4a82      	ldr	r2, [pc, #520]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d1ee:	430b      	orrs	r3, r1
 800d1f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d1f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fc:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d200:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d204:	2300      	movs	r3, #0
 800d206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d20a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800d20e:	460b      	mov	r3, r1
 800d210:	4313      	orrs	r3, r2
 800d212:	d00b      	beq.n	800d22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800d214:	4b78      	ldr	r3, [pc, #480]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d21a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800d21e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d224:	4a74      	ldr	r2, [pc, #464]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d226:	430b      	orrs	r3, r1
 800d228:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d22c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d234:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d23c:	2300      	movs	r3, #0
 800d23e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d242:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d246:	460b      	mov	r3, r1
 800d248:	4313      	orrs	r3, r2
 800d24a:	d00b      	beq.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800d24c:	4b6a      	ldr	r3, [pc, #424]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d24e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d252:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d25a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d25c:	4a66      	ldr	r2, [pc, #408]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d25e:	430b      	orrs	r3, r1
 800d260:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800d270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d274:	2300      	movs	r3, #0
 800d276:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d27a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800d27e:	460b      	mov	r3, r1
 800d280:	4313      	orrs	r3, r2
 800d282:	d00b      	beq.n	800d29c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800d284:	4b5c      	ldr	r3, [pc, #368]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d286:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d28a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d28e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d294:	4a58      	ldr	r2, [pc, #352]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d296:	430b      	orrs	r3, r1
 800d298:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d29c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d2a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d2b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d2b6:	460b      	mov	r3, r1
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	d00b      	beq.n	800d2d4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800d2bc:	4b4e      	ldr	r3, [pc, #312]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d2be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d2c2:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800d2c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2cc:	4a4a      	ldr	r2, [pc, #296]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d2ce:	430b      	orrs	r3, r1
 800d2d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800d2d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2dc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800d2e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d2ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d2ee:	460b      	mov	r3, r1
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	d00b      	beq.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800d2f4:	4b40      	ldr	r3, [pc, #256]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d2f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d2fa:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800d2fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d304:	4a3c      	ldr	r2, [pc, #240]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d306:	430b      	orrs	r3, r1
 800d308:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800d30c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d314:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800d318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d31c:	2300      	movs	r3, #0
 800d31e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d322:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d326:	460b      	mov	r3, r1
 800d328:	4313      	orrs	r3, r2
 800d32a:	d00c      	beq.n	800d346 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800d32c:	4b32      	ldr	r3, [pc, #200]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d32e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d332:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800d336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d33a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d33e:	4a2e      	ldr	r2, [pc, #184]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d340:	430b      	orrs	r3, r1
 800d342:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34e:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800d352:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d356:	2300      	movs	r3, #0
 800d358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d35c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d360:	460b      	mov	r3, r1
 800d362:	4313      	orrs	r3, r2
 800d364:	d00c      	beq.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800d366:	4b24      	ldr	r3, [pc, #144]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d36c:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800d370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d378:	4a1f      	ldr	r2, [pc, #124]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d37a:	430b      	orrs	r3, r1
 800d37c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d388:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800d38c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d390:	2300      	movs	r3, #0
 800d392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d396:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d39a:	460b      	mov	r3, r1
 800d39c:	4313      	orrs	r3, r2
 800d39e:	d00c      	beq.n	800d3ba <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800d3a0:	4b15      	ldr	r3, [pc, #84]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d3a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d3a6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800d3aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3b2:	4a11      	ldr	r2, [pc, #68]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d3b4:	430b      	orrs	r3, r1
 800d3b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800d3ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800d3c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d3d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	d010      	beq.n	800d3fc <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800d3da:	4b07      	ldr	r3, [pc, #28]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d3dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d3e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d3e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3ec:	4a02      	ldr	r2, [pc, #8]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d3ee:	430b      	orrs	r3, r1
 800d3f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d3f4:	e002      	b.n	800d3fc <HAL_RCCEx_PeriphCLKConfig+0x388>
 800d3f6:	bf00      	nop
 800d3f8:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d3fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d404:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800d408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d40c:	2300      	movs	r3, #0
 800d40e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d412:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d416:	460b      	mov	r3, r1
 800d418:	4313      	orrs	r3, r2
 800d41a:	d04c      	beq.n	800d4b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800d41c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d420:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d424:	2b80      	cmp	r3, #128	; 0x80
 800d426:	d02d      	beq.n	800d484 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800d428:	2b80      	cmp	r3, #128	; 0x80
 800d42a:	d827      	bhi.n	800d47c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800d42c:	2b60      	cmp	r3, #96	; 0x60
 800d42e:	d02b      	beq.n	800d488 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800d430:	2b60      	cmp	r3, #96	; 0x60
 800d432:	d823      	bhi.n	800d47c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800d434:	2b40      	cmp	r3, #64	; 0x40
 800d436:	d006      	beq.n	800d446 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800d438:	2b40      	cmp	r3, #64	; 0x40
 800d43a:	d81f      	bhi.n	800d47c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d009      	beq.n	800d454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800d440:	2b20      	cmp	r3, #32
 800d442:	d011      	beq.n	800d468 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800d444:	e01a      	b.n	800d47c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d446:	4bc0      	ldr	r3, [pc, #768]	; (800d748 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d44a:	4abf      	ldr	r2, [pc, #764]	; (800d748 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d44c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d450:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d452:	e01a      	b.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d458:	3308      	adds	r3, #8
 800d45a:	4618      	mov	r0, r3
 800d45c:	f002 fd02 	bl	800fe64 <RCCEx_PLL2_Config>
 800d460:	4603      	mov	r3, r0
 800d462:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d466:	e010      	b.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d468:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d46c:	332c      	adds	r3, #44	; 0x2c
 800d46e:	4618      	mov	r0, r3
 800d470:	f002 fd90 	bl	800ff94 <RCCEx_PLL3_Config>
 800d474:	4603      	mov	r3, r0
 800d476:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d47a:	e006      	b.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d47c:	2301      	movs	r3, #1
 800d47e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d482:	e002      	b.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800d484:	bf00      	nop
 800d486:	e000      	b.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800d488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d48a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d10d      	bne.n	800d4ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800d492:	4bad      	ldr	r3, [pc, #692]	; (800d748 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d494:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d498:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800d49c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d4a4:	4aa8      	ldr	r2, [pc, #672]	; (800d748 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d4a6:	430b      	orrs	r3, r1
 800d4a8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d4ac:	e003      	b.n	800d4b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4ae:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d4b2:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d4b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4be:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800d4c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d4cc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	d053      	beq.n	800d57e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800d4d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d4de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4e2:	d033      	beq.n	800d54c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800d4e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4e8:	d82c      	bhi.n	800d544 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800d4ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d4ee:	d02f      	beq.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800d4f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d4f4:	d826      	bhi.n	800d544 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800d4f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4fa:	d008      	beq.n	800d50e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800d4fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d500:	d820      	bhi.n	800d544 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800d502:	2b00      	cmp	r3, #0
 800d504:	d00a      	beq.n	800d51c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800d506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d50a:	d011      	beq.n	800d530 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d50c:	e01a      	b.n	800d544 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d50e:	4b8e      	ldr	r3, [pc, #568]	; (800d748 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d512:	4a8d      	ldr	r2, [pc, #564]	; (800d748 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d518:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d51a:	e01a      	b.n	800d552 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d51c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d520:	3308      	adds	r3, #8
 800d522:	4618      	mov	r0, r3
 800d524:	f002 fc9e 	bl	800fe64 <RCCEx_PLL2_Config>
 800d528:	4603      	mov	r3, r0
 800d52a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d52e:	e010      	b.n	800d552 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d534:	332c      	adds	r3, #44	; 0x2c
 800d536:	4618      	mov	r0, r3
 800d538:	f002 fd2c 	bl	800ff94 <RCCEx_PLL3_Config>
 800d53c:	4603      	mov	r3, r0
 800d53e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d542:	e006      	b.n	800d552 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d544:	2301      	movs	r3, #1
 800d546:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d54a:	e002      	b.n	800d552 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800d54c:	bf00      	nop
 800d54e:	e000      	b.n	800d552 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800d550:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d552:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d556:	2b00      	cmp	r3, #0
 800d558:	d10d      	bne.n	800d576 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800d55a:	4b7b      	ldr	r3, [pc, #492]	; (800d748 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d55c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d560:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800d564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d568:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d56c:	4a76      	ldr	r2, [pc, #472]	; (800d748 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d56e:	430b      	orrs	r3, r1
 800d570:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d574:	e003      	b.n	800d57e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d576:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d57a:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800d57e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d586:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800d58a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d58e:	2300      	movs	r3, #0
 800d590:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d594:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d598:	460b      	mov	r3, r1
 800d59a:	4313      	orrs	r3, r2
 800d59c:	d046      	beq.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800d59e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d5a6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d5aa:	d028      	beq.n	800d5fe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d5ac:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d5b0:	d821      	bhi.n	800d5f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800d5b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5b6:	d022      	beq.n	800d5fe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d5b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5bc:	d81b      	bhi.n	800d5f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800d5be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d5c2:	d01c      	beq.n	800d5fe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d5c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d5c8:	d815      	bhi.n	800d5f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800d5ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5ce:	d008      	beq.n	800d5e2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800d5d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5d4:	d80f      	bhi.n	800d5f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d011      	beq.n	800d5fe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d5da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5de:	d00e      	beq.n	800d5fe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d5e0:	e009      	b.n	800d5f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d5e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5e6:	3308      	adds	r3, #8
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f002 fc3b 	bl	800fe64 <RCCEx_PLL2_Config>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d5f4:	e004      	b.n	800d600 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d5fc:	e000      	b.n	800d600 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800d5fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d600:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d604:	2b00      	cmp	r3, #0
 800d606:	d10d      	bne.n	800d624 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800d608:	4b4f      	ldr	r3, [pc, #316]	; (800d748 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d60a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d60e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800d612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d616:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d61a:	4a4b      	ldr	r2, [pc, #300]	; (800d748 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d61c:	430b      	orrs	r3, r1
 800d61e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d622:	e003      	b.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d624:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d628:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800d62c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d634:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d63c:	2300      	movs	r3, #0
 800d63e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d642:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d646:	460b      	mov	r3, r1
 800d648:	4313      	orrs	r3, r2
 800d64a:	d03f      	beq.n	800d6cc <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800d64c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d654:	2b04      	cmp	r3, #4
 800d656:	d81e      	bhi.n	800d696 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800d658:	a201      	add	r2, pc, #4	; (adr r2, 800d660 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800d65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d65e:	bf00      	nop
 800d660:	0800d69f 	.word	0x0800d69f
 800d664:	0800d675 	.word	0x0800d675
 800d668:	0800d683 	.word	0x0800d683
 800d66c:	0800d69f 	.word	0x0800d69f
 800d670:	0800d69f 	.word	0x0800d69f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d674:	4b34      	ldr	r3, [pc, #208]	; (800d748 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d678:	4a33      	ldr	r2, [pc, #204]	; (800d748 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d67a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d67e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800d680:	e00e      	b.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d682:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d686:	332c      	adds	r3, #44	; 0x2c
 800d688:	4618      	mov	r0, r3
 800d68a:	f002 fc83 	bl	800ff94 <RCCEx_PLL3_Config>
 800d68e:	4603      	mov	r3, r0
 800d690:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d694:	e004      	b.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d696:	2301      	movs	r3, #1
 800d698:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d69c:	e000      	b.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800d69e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d6a0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d10d      	bne.n	800d6c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800d6a8:	4b27      	ldr	r3, [pc, #156]	; (800d748 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d6aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d6ae:	f023 0107 	bic.w	r1, r3, #7
 800d6b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d6ba:	4a23      	ldr	r2, [pc, #140]	; (800d748 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d6bc:	430b      	orrs	r3, r1
 800d6be:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d6c2:	e003      	b.n	800d6cc <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6c4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d6c8:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800d6cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d4:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800d6d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800d6da:	2300      	movs	r3, #0
 800d6dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d6de:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	d04c      	beq.n	800d782 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800d6e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d6f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d6f4:	d02a      	beq.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800d6f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d6fa:	d821      	bhi.n	800d740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800d6fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d700:	d026      	beq.n	800d750 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800d702:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d706:	d81b      	bhi.n	800d740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800d708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d70c:	d00e      	beq.n	800d72c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800d70e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d712:	d815      	bhi.n	800d740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800d714:	2b00      	cmp	r3, #0
 800d716:	d01d      	beq.n	800d754 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800d718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d71c:	d110      	bne.n	800d740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d71e:	4b0a      	ldr	r3, [pc, #40]	; (800d748 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d722:	4a09      	ldr	r2, [pc, #36]	; (800d748 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d728:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800d72a:	e014      	b.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d72c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d730:	332c      	adds	r3, #44	; 0x2c
 800d732:	4618      	mov	r0, r3
 800d734:	f002 fc2e 	bl	800ff94 <RCCEx_PLL3_Config>
 800d738:	4603      	mov	r3, r0
 800d73a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d73e:	e00a      	b.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d740:	2301      	movs	r3, #1
 800d742:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d746:	e006      	b.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800d748:	46020c00 	.word	0x46020c00
        break;
 800d74c:	bf00      	nop
 800d74e:	e002      	b.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800d750:	bf00      	nop
 800d752:	e000      	b.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800d754:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d756:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d10d      	bne.n	800d77a <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800d75e:	4baf      	ldr	r3, [pc, #700]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d760:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d764:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800d768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d76c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d770:	4aaa      	ldr	r2, [pc, #680]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d772:	430b      	orrs	r3, r1
 800d774:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d778:	e003      	b.n	800d782 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d77a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d77e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d78e:	673b      	str	r3, [r7, #112]	; 0x70
 800d790:	2300      	movs	r3, #0
 800d792:	677b      	str	r3, [r7, #116]	; 0x74
 800d794:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d798:	460b      	mov	r3, r1
 800d79a:	4313      	orrs	r3, r2
 800d79c:	f000 80b5 	beq.w	800d90a <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d7a6:	4b9d      	ldr	r3, [pc, #628]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d7a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d7ac:	f003 0304 	and.w	r3, r3, #4
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d113      	bne.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d7b4:	4b99      	ldr	r3, [pc, #612]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d7b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d7ba:	4a98      	ldr	r2, [pc, #608]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d7bc:	f043 0304 	orr.w	r3, r3, #4
 800d7c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d7c4:	4b95      	ldr	r3, [pc, #596]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d7c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d7ca:	f003 0304 	and.w	r3, r3, #4
 800d7ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800d7d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
      pwrclkchanged = SET;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800d7dc:	4b90      	ldr	r3, [pc, #576]	; (800da20 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800d7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7e0:	4a8f      	ldr	r2, [pc, #572]	; (800da20 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800d7e2:	f043 0301 	orr.w	r3, r3, #1
 800d7e6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d7e8:	f7f9 fdde 	bl	80073a8 <HAL_GetTick>
 800d7ec:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d7f0:	e00b      	b.n	800d80a <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d7f2:	f7f9 fdd9 	bl	80073a8 <HAL_GetTick>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7fc:	1ad3      	subs	r3, r2, r3
 800d7fe:	2b02      	cmp	r3, #2
 800d800:	d903      	bls.n	800d80a <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800d802:	2303      	movs	r3, #3
 800d804:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d808:	e005      	b.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d80a:	4b85      	ldr	r3, [pc, #532]	; (800da20 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800d80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d80e:	f003 0301 	and.w	r3, r3, #1
 800d812:	2b00      	cmp	r3, #0
 800d814:	d0ed      	beq.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800d816:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d165      	bne.n	800d8ea <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d81e:	4b7f      	ldr	r3, [pc, #508]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d828:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800d82c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d830:	2b00      	cmp	r3, #0
 800d832:	d023      	beq.n	800d87c <HAL_RCCEx_PeriphCLKConfig+0x808>
 800d834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d838:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800d83c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d840:	4293      	cmp	r3, r2
 800d842:	d01b      	beq.n	800d87c <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d844:	4b75      	ldr	r3, [pc, #468]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d84a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d84e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d852:	4b72      	ldr	r3, [pc, #456]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d858:	4a70      	ldr	r2, [pc, #448]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d85a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d85e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d862:	4b6e      	ldr	r3, [pc, #440]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d868:	4a6c      	ldr	r2, [pc, #432]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d86a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d86e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d872:	4a6a      	ldr	r2, [pc, #424]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d874:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d878:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d87c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d880:	f003 0301 	and.w	r3, r3, #1
 800d884:	2b00      	cmp	r3, #0
 800d886:	d019      	beq.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d888:	f7f9 fd8e 	bl	80073a8 <HAL_GetTick>
 800d88c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d890:	e00d      	b.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d892:	f7f9 fd89 	bl	80073a8 <HAL_GetTick>
 800d896:	4602      	mov	r2, r0
 800d898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d89c:	1ad2      	subs	r2, r2, r3
 800d89e:	f241 3388 	movw	r3, #5000	; 0x1388
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d903      	bls.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800d8a6:	2303      	movs	r3, #3
 800d8a8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
            break;
 800d8ac:	e006      	b.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d8ae:	4b5b      	ldr	r3, [pc, #364]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d8b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d8b4:	f003 0302 	and.w	r3, r3, #2
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d0ea      	beq.n	800d892 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800d8bc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d10d      	bne.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800d8c4:	4b55      	ldr	r3, [pc, #340]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d8c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d8ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d8ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8d2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800d8d6:	4a51      	ldr	r2, [pc, #324]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d8d8:	430b      	orrs	r3, r1
 800d8da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800d8de:	e008      	b.n	800d8f2 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d8e0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d8e4:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 800d8e8:	e003      	b.n	800d8f2 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8ea:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d8ee:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d8f2:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d107      	bne.n	800d90a <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d8fa:	4b48      	ldr	r3, [pc, #288]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d8fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d900:	4a46      	ldr	r2, [pc, #280]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d902:	f023 0304 	bic.w	r3, r3, #4
 800d906:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800d90a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d912:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800d916:	66bb      	str	r3, [r7, #104]	; 0x68
 800d918:	2300      	movs	r3, #0
 800d91a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d91c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d920:	460b      	mov	r3, r1
 800d922:	4313      	orrs	r3, r2
 800d924:	d042      	beq.n	800d9ac <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800d926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d92a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d92e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d932:	d022      	beq.n	800d97a <HAL_RCCEx_PeriphCLKConfig+0x906>
 800d934:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d938:	d81b      	bhi.n	800d972 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800d93a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d93e:	d011      	beq.n	800d964 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800d940:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d944:	d815      	bhi.n	800d972 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800d946:	2b00      	cmp	r3, #0
 800d948:	d019      	beq.n	800d97e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800d94a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d94e:	d110      	bne.n	800d972 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d954:	3308      	adds	r3, #8
 800d956:	4618      	mov	r0, r3
 800d958:	f002 fa84 	bl	800fe64 <RCCEx_PLL2_Config>
 800d95c:	4603      	mov	r3, r0
 800d95e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d962:	e00d      	b.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d964:	4b2d      	ldr	r3, [pc, #180]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d968:	4a2c      	ldr	r2, [pc, #176]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d96a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d96e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800d970:	e006      	b.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d972:	2301      	movs	r3, #1
 800d974:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d978:	e002      	b.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800d97a:	bf00      	nop
 800d97c:	e000      	b.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800d97e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d980:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d984:	2b00      	cmp	r3, #0
 800d986:	d10d      	bne.n	800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800d988:	4b24      	ldr	r3, [pc, #144]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d98a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d98e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800d992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d996:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d99a:	4a20      	ldr	r2, [pc, #128]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d99c:	430b      	orrs	r3, r1
 800d99e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d9a2:	e003      	b.n	800d9ac <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9a4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d9a8:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d9ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d9b8:	663b      	str	r3, [r7, #96]	; 0x60
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	667b      	str	r3, [r7, #100]	; 0x64
 800d9be:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	d031      	beq.n	800da2c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800d9c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d9d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9d4:	d00b      	beq.n	800d9ee <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800d9d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9da:	d804      	bhi.n	800d9e6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d008      	beq.n	800d9f2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800d9e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9e4:	d007      	beq.n	800d9f6 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d9ec:	e004      	b.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800d9ee:	bf00      	nop
 800d9f0:	e002      	b.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800d9f2:	bf00      	nop
 800d9f4:	e000      	b.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800d9f6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d9f8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d111      	bne.n	800da24 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800da00:	4b06      	ldr	r3, [pc, #24]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800da02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800da06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800da0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800da12:	4a02      	ldr	r2, [pc, #8]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800da14:	430b      	orrs	r3, r1
 800da16:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800da1a:	e007      	b.n	800da2c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800da1c:	46020c00 	.word	0x46020c00
 800da20:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da24:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800da28:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800da2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da34:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800da38:	65bb      	str	r3, [r7, #88]	; 0x58
 800da3a:	2300      	movs	r3, #0
 800da3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800da42:	460b      	mov	r3, r1
 800da44:	4313      	orrs	r3, r2
 800da46:	d00c      	beq.n	800da62 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800da48:	4bb2      	ldr	r3, [pc, #712]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800da4e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800da52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800da5a:	4aae      	ldr	r2, [pc, #696]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da5c:	430b      	orrs	r3, r1
 800da5e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800da62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800da6e:	653b      	str	r3, [r7, #80]	; 0x50
 800da70:	2300      	movs	r3, #0
 800da72:	657b      	str	r3, [r7, #84]	; 0x54
 800da74:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800da78:	460b      	mov	r3, r1
 800da7a:	4313      	orrs	r3, r2
 800da7c:	d019      	beq.n	800dab2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800da7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800da86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da8a:	d105      	bne.n	800da98 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800da8c:	4ba1      	ldr	r3, [pc, #644]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da90:	4aa0      	ldr	r2, [pc, #640]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da96:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800da98:	4b9e      	ldr	r3, [pc, #632]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800da9e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800daa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800daa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800daaa:	4a9a      	ldr	r2, [pc, #616]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800daac:	430b      	orrs	r3, r1
 800daae:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800dab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daba:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800dabe:	64bb      	str	r3, [r7, #72]	; 0x48
 800dac0:	2300      	movs	r3, #0
 800dac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dac4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800dac8:	460b      	mov	r3, r1
 800daca:	4313      	orrs	r3, r2
 800dacc:	d00c      	beq.n	800dae8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800dace:	4b91      	ldr	r3, [pc, #580]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dad4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800dad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dadc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800dae0:	4a8c      	ldr	r2, [pc, #560]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dae2:	430b      	orrs	r3, r1
 800dae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800dae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800daec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800daf4:	643b      	str	r3, [r7, #64]	; 0x40
 800daf6:	2300      	movs	r3, #0
 800daf8:	647b      	str	r3, [r7, #68]	; 0x44
 800dafa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800dafe:	460b      	mov	r3, r1
 800db00:	4313      	orrs	r3, r2
 800db02:	d00c      	beq.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800db04:	4b83      	ldr	r3, [pc, #524]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db0a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800db0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db12:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800db16:	4a7f      	ldr	r2, [pc, #508]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db18:	430b      	orrs	r3, r1
 800db1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800db1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db26:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800db2a:	63bb      	str	r3, [r7, #56]	; 0x38
 800db2c:	2300      	movs	r3, #0
 800db2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db30:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800db34:	460b      	mov	r3, r1
 800db36:	4313      	orrs	r3, r2
 800db38:	d00c      	beq.n	800db54 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800db3a:	4b76      	ldr	r3, [pc, #472]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800db40:	f023 0118 	bic.w	r1, r3, #24
 800db44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db48:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800db4c:	4a71      	ldr	r2, [pc, #452]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db4e:	430b      	orrs	r3, r1
 800db50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800db54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800db60:	633b      	str	r3, [r7, #48]	; 0x30
 800db62:	2300      	movs	r3, #0
 800db64:	637b      	str	r3, [r7, #52]	; 0x34
 800db66:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800db6a:	460b      	mov	r3, r1
 800db6c:	4313      	orrs	r3, r2
 800db6e:	d032      	beq.n	800dbd6 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800db70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800db78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800db7c:	d105      	bne.n	800db8a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db7e:	4b65      	ldr	r3, [pc, #404]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db82:	4a64      	ldr	r2, [pc, #400]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db88:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800db8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800db92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800db96:	d108      	bne.n	800dbaa <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800db98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db9c:	3308      	adds	r3, #8
 800db9e:	4618      	mov	r0, r3
 800dba0:	f002 f960 	bl	800fe64 <RCCEx_PLL2_Config>
 800dba4:	4603      	mov	r3, r0
 800dba6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }
    if (ret == HAL_OK)
 800dbaa:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d10d      	bne.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800dbb2:	4b58      	ldr	r3, [pc, #352]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dbb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dbb8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800dbbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbc0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dbc4:	4a53      	ldr	r2, [pc, #332]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dbc6:	430b      	orrs	r3, r1
 800dbc8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800dbcc:	e003      	b.n	800dbd6 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbce:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dbd2:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800dbd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbde:	2100      	movs	r1, #0
 800dbe0:	62b9      	str	r1, [r7, #40]	; 0x28
 800dbe2:	f003 0301 	and.w	r3, r3, #1
 800dbe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbe8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800dbec:	460b      	mov	r3, r1
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	d04a      	beq.n	800dc88 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800dbf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbf6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800dbfa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800dbfe:	d01e      	beq.n	800dc3e <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800dc00:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800dc04:	d825      	bhi.n	800dc52 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800dc06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dc0a:	d00e      	beq.n	800dc2a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800dc0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dc10:	d81f      	bhi.n	800dc52 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d021      	beq.n	800dc5a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800dc16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc1a:	d11a      	bne.n	800dc52 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc1c:	4b3d      	ldr	r3, [pc, #244]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dc1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc20:	4a3c      	ldr	r2, [pc, #240]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dc22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc26:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800dc28:	e018      	b.n	800dc5c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dc2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc2e:	3308      	adds	r3, #8
 800dc30:	4618      	mov	r0, r3
 800dc32:	f002 f917 	bl	800fe64 <RCCEx_PLL2_Config>
 800dc36:	4603      	mov	r3, r0
 800dc38:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800dc3c:	e00e      	b.n	800dc5c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dc3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc42:	332c      	adds	r3, #44	; 0x2c
 800dc44:	4618      	mov	r0, r3
 800dc46:	f002 f9a5 	bl	800ff94 <RCCEx_PLL3_Config>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800dc50:	e004      	b.n	800dc5c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800dc52:	2301      	movs	r3, #1
 800dc54:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dc58:	e000      	b.n	800dc5c <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800dc5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc5c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d10d      	bne.n	800dc80 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800dc64:	4b2b      	ldr	r3, [pc, #172]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dc66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dc6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dc6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc72:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800dc76:	4927      	ldr	r1, [pc, #156]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dc78:	4313      	orrs	r3, r2
 800dc7a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800dc7e:	e003      	b.n	800dc88 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc80:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dc84:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800dc88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc90:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800dc94:	623b      	str	r3, [r7, #32]
 800dc96:	2300      	movs	r3, #0
 800dc98:	627b      	str	r3, [r7, #36]	; 0x24
 800dc9a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800dc9e:	460b      	mov	r3, r1
 800dca0:	4313      	orrs	r3, r2
 800dca2:	d03d      	beq.n	800dd20 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800dca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dcb0:	d00e      	beq.n	800dcd0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800dcb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dcb6:	d815      	bhi.n	800dce4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d017      	beq.n	800dcec <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800dcbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dcc0:	d110      	bne.n	800dce4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dcc2:	4b14      	ldr	r3, [pc, #80]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dcc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcc6:	4a13      	ldr	r2, [pc, #76]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dcc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dccc:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800dcce:	e00e      	b.n	800dcee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dcd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcd4:	3308      	adds	r3, #8
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f002 f8c4 	bl	800fe64 <RCCEx_PLL2_Config>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800dce2:	e004      	b.n	800dcee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800dce4:	2301      	movs	r3, #1
 800dce6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dcea:	e000      	b.n	800dcee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800dcec:	bf00      	nop
    }
    if (ret == HAL_OK)
 800dcee:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d110      	bne.n	800dd18 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800dcf6:	4b07      	ldr	r3, [pc, #28]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dcf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dcfc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800dd00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd08:	4902      	ldr	r1, [pc, #8]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dd0a:	4313      	orrs	r3, r2
 800dd0c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800dd10:	e006      	b.n	800dd20 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800dd12:	bf00      	nop
 800dd14:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd18:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dd1c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800dd20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd28:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800dd2c:	61bb      	str	r3, [r7, #24]
 800dd2e:	2300      	movs	r3, #0
 800dd30:	61fb      	str	r3, [r7, #28]
 800dd32:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800dd36:	460b      	mov	r3, r1
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	d00c      	beq.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800dd3c:	4b68      	ldr	r3, [pc, #416]	; (800dee0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800dd3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dd42:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800dd46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800dd4e:	4964      	ldr	r1, [pc, #400]	; (800dee0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800dd50:	4313      	orrs	r3, r2
 800dd52:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dd56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5e:	2100      	movs	r1, #0
 800dd60:	6139      	str	r1, [r7, #16]
 800dd62:	f003 0302 	and.w	r3, r3, #2
 800dd66:	617b      	str	r3, [r7, #20]
 800dd68:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	d036      	beq.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800dd72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d00c      	beq.n	800dd98 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800dd7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dd82:	d113      	bne.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dd84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd88:	3308      	adds	r3, #8
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f002 f86a 	bl	800fe64 <RCCEx_PLL2_Config>
 800dd90:	4603      	mov	r3, r0
 800dd92:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800dd96:	e00d      	b.n	800ddb4 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dd98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd9c:	332c      	adds	r3, #44	; 0x2c
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f002 f8f8 	bl	800ff94 <RCCEx_PLL3_Config>
 800dda4:	4603      	mov	r3, r0
 800dda6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800ddaa:	e003      	b.n	800ddb4 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800ddac:	2301      	movs	r3, #1
 800ddae:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800ddb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ddb4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d10d      	bne.n	800ddd8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800ddbc:	4b48      	ldr	r3, [pc, #288]	; (800dee0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800ddbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ddc2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ddc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ddce:	4944      	ldr	r1, [pc, #272]	; (800dee0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800ddd0:	4313      	orrs	r3, r2
 800ddd2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800ddd6:	e003      	b.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddd8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dddc:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800dde0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde8:	2100      	movs	r1, #0
 800ddea:	60b9      	str	r1, [r7, #8]
 800ddec:	f003 0304 	and.w	r3, r3, #4
 800ddf0:	60fb      	str	r3, [r7, #12]
 800ddf2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	d024      	beq.n	800de46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800ddfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800de04:	2b00      	cmp	r3, #0
 800de06:	d108      	bne.n	800de1a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800de08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de0c:	332c      	adds	r3, #44	; 0x2c
 800de0e:	4618      	mov	r0, r3
 800de10:	f002 f8c0 	bl	800ff94 <RCCEx_PLL3_Config>
 800de14:	4603      	mov	r3, r0
 800de16:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }

    if (ret == HAL_OK)
 800de1a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d10d      	bne.n	800de3e <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800de22:	4b2f      	ldr	r3, [pc, #188]	; (800dee0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800de24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800de28:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800de2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800de34:	492a      	ldr	r1, [pc, #168]	; (800dee0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800de36:	4313      	orrs	r3, r2
 800de38:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800de3c:	e003      	b.n	800de46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de3e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800de42:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800de46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4e:	2100      	movs	r1, #0
 800de50:	6039      	str	r1, [r7, #0]
 800de52:	f003 0308 	and.w	r3, r3, #8
 800de56:	607b      	str	r3, [r7, #4]
 800de58:	e9d7 1200 	ldrd	r1, r2, [r7]
 800de5c:	460b      	mov	r3, r1
 800de5e:	4313      	orrs	r3, r2
 800de60:	d036      	beq.n	800ded0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800de62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de66:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800de6a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800de6e:	d00d      	beq.n	800de8c <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800de70:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800de74:	d811      	bhi.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800de76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de7a:	d012      	beq.n	800dea2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800de7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de80:	d80b      	bhi.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800de82:	2b00      	cmp	r3, #0
 800de84:	d00d      	beq.n	800dea2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800de86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de8a:	d106      	bne.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800de8c:	4b14      	ldr	r3, [pc, #80]	; (800dee0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800de8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de90:	4a13      	ldr	r2, [pc, #76]	; (800dee0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800de92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de96:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800de98:	e004      	b.n	800dea4 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800de9a:	2301      	movs	r3, #1
 800de9c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dea0:	e000      	b.n	800dea4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800dea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dea4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d10d      	bne.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800deac:	4b0c      	ldr	r3, [pc, #48]	; (800dee0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800deae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800deb2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800deb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800deba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800debe:	4908      	ldr	r1, [pc, #32]	; (800dee0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800dec0:	4313      	orrs	r3, r2
 800dec2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800dec6:	e003      	b.n	800ded0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dec8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800decc:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800ded0:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800deda:	46bd      	mov	sp, r7
 800dedc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dee0:	46020c00 	.word	0x46020c00

0800dee4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b089      	sub	sp, #36	; 0x24
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800deec:	4bad      	ldr	r3, [pc, #692]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800deee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800def0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800def4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800def6:	4bab      	ldr	r3, [pc, #684]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800def8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800defa:	f003 0303 	and.w	r3, r3, #3
 800defe:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800df00:	4ba8      	ldr	r3, [pc, #672]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800df02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df04:	0a1b      	lsrs	r3, r3, #8
 800df06:	f003 030f 	and.w	r3, r3, #15
 800df0a:	3301      	adds	r3, #1
 800df0c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800df0e:	4ba5      	ldr	r3, [pc, #660]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800df10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df12:	091b      	lsrs	r3, r3, #4
 800df14:	f003 0301 	and.w	r3, r3, #1
 800df18:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800df1a:	4ba2      	ldr	r3, [pc, #648]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800df1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df1e:	08db      	lsrs	r3, r3, #3
 800df20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800df24:	68fa      	ldr	r2, [r7, #12]
 800df26:	fb02 f303 	mul.w	r3, r2, r3
 800df2a:	ee07 3a90 	vmov	s15, r3
 800df2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df32:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	f000 8123 	beq.w	800e184 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	2b03      	cmp	r3, #3
 800df42:	d062      	beq.n	800e00a <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	2b03      	cmp	r3, #3
 800df48:	f200 8081 	bhi.w	800e04e <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d024      	beq.n	800df9c <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	2b02      	cmp	r3, #2
 800df56:	d17a      	bne.n	800e04e <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	ee07 3a90 	vmov	s15, r3
 800df5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df62:	eddf 6a91 	vldr	s13, [pc, #580]	; 800e1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800df66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df6a:	4b8e      	ldr	r3, [pc, #568]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800df6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df72:	ee07 3a90 	vmov	s15, r3
 800df76:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800df7a:	ed97 6a02 	vldr	s12, [r7, #8]
 800df7e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800e1ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800df82:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800df86:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800df8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800df92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df9a:	e08f      	b.n	800e0bc <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800df9c:	4b81      	ldr	r3, [pc, #516]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800df9e:	689b      	ldr	r3, [r3, #8]
 800dfa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d005      	beq.n	800dfb4 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 800dfa8:	4b7e      	ldr	r3, [pc, #504]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800dfaa:	689b      	ldr	r3, [r3, #8]
 800dfac:	0f1b      	lsrs	r3, r3, #28
 800dfae:	f003 030f 	and.w	r3, r3, #15
 800dfb2:	e006      	b.n	800dfc2 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 800dfb4:	4b7b      	ldr	r3, [pc, #492]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800dfb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dfba:	041b      	lsls	r3, r3, #16
 800dfbc:	0f1b      	lsrs	r3, r3, #28
 800dfbe:	f003 030f 	and.w	r3, r3, #15
 800dfc2:	4a7b      	ldr	r2, [pc, #492]	; (800e1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800dfc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfc8:	ee07 3a90 	vmov	s15, r3
 800dfcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	ee07 3a90 	vmov	s15, r3
 800dfd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dfde:	69bb      	ldr	r3, [r7, #24]
 800dfe0:	ee07 3a90 	vmov	s15, r3
 800dfe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfe8:	ed97 6a02 	vldr	s12, [r7, #8]
 800dfec:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800e1ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800dff0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dff8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e000:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e004:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e008:	e058      	b.n	800e0bc <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	ee07 3a90 	vmov	s15, r3
 800e010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e014:	eddf 6a64 	vldr	s13, [pc, #400]	; 800e1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800e018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e01c:	4b61      	ldr	r3, [pc, #388]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e024:	ee07 3a90 	vmov	s15, r3
 800e028:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e02c:	ed97 6a02 	vldr	s12, [r7, #8]
 800e030:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800e1ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e034:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e038:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e03c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e040:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e044:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e048:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e04c:	e036      	b.n	800e0bc <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e04e:	4b55      	ldr	r3, [pc, #340]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e056:	2b00      	cmp	r3, #0
 800e058:	d005      	beq.n	800e066 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 800e05a:	4b52      	ldr	r3, [pc, #328]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	0f1b      	lsrs	r3, r3, #28
 800e060:	f003 030f 	and.w	r3, r3, #15
 800e064:	e006      	b.n	800e074 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 800e066:	4b4f      	ldr	r3, [pc, #316]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e068:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e06c:	041b      	lsls	r3, r3, #16
 800e06e:	0f1b      	lsrs	r3, r3, #28
 800e070:	f003 030f 	and.w	r3, r3, #15
 800e074:	4a4e      	ldr	r2, [pc, #312]	; (800e1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800e076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e07a:	ee07 3a90 	vmov	s15, r3
 800e07e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	ee07 3a90 	vmov	s15, r3
 800e088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e08c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e090:	69bb      	ldr	r3, [r7, #24]
 800e092:	ee07 3a90 	vmov	s15, r3
 800e096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e09a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e09e:	eddf 5a43 	vldr	s11, [pc, #268]	; 800e1ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e0a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e0a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e0aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e0ba:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800e0bc:	4b39      	ldr	r3, [pc, #228]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d017      	beq.n	800e0f8 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e0c8:	4b36      	ldr	r3, [pc, #216]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0cc:	0a5b      	lsrs	r3, r3, #9
 800e0ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0d2:	ee07 3a90 	vmov	s15, r3
 800e0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800e0da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e0de:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e0e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0ee:	ee17 2a90 	vmov	r2, s15
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	601a      	str	r2, [r3, #0]
 800e0f6:	e002      	b.n	800e0fe <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800e0fe:	4b29      	ldr	r3, [pc, #164]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e106:	2b00      	cmp	r3, #0
 800e108:	d017      	beq.n	800e13a <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e10a:	4b26      	ldr	r3, [pc, #152]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e10e:	0c1b      	lsrs	r3, r3, #16
 800e110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e114:	ee07 3a90 	vmov	s15, r3
 800e118:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800e11c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e120:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e124:	edd7 6a07 	vldr	s13, [r7, #28]
 800e128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e12c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e130:	ee17 2a90 	vmov	r2, s15
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	605a      	str	r2, [r3, #4]
 800e138:	e002      	b.n	800e140 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2200      	movs	r2, #0
 800e13e:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800e140:	4b18      	ldr	r3, [pc, #96]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d017      	beq.n	800e17c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e14c:	4b15      	ldr	r3, [pc, #84]	; (800e1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e150:	0e1b      	lsrs	r3, r3, #24
 800e152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e156:	ee07 3a90 	vmov	s15, r3
 800e15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800e15e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e162:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e166:	edd7 6a07 	vldr	s13, [r7, #28]
 800e16a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e16e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e172:	ee17 2a90 	vmov	r2, s15
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e17a:	e00c      	b.n	800e196 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2200      	movs	r2, #0
 800e180:	609a      	str	r2, [r3, #8]
}
 800e182:	e008      	b.n	800e196 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2200      	movs	r2, #0
 800e194:	609a      	str	r2, [r3, #8]
}
 800e196:	bf00      	nop
 800e198:	3724      	adds	r7, #36	; 0x24
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr
 800e1a2:	bf00      	nop
 800e1a4:	46020c00 	.word	0x46020c00
 800e1a8:	4b742400 	.word	0x4b742400
 800e1ac:	46000000 	.word	0x46000000
 800e1b0:	0802a828 	.word	0x0802a828

0800e1b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b089      	sub	sp, #36	; 0x24
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800e1bc:	4bad      	ldr	r3, [pc, #692]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e1be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1c4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800e1c6:	4bab      	ldr	r3, [pc, #684]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ca:	f003 0303 	and.w	r3, r3, #3
 800e1ce:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800e1d0:	4ba8      	ldr	r3, [pc, #672]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d4:	0a1b      	lsrs	r3, r3, #8
 800e1d6:	f003 030f 	and.w	r3, r3, #15
 800e1da:	3301      	adds	r3, #1
 800e1dc:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800e1de:	4ba5      	ldr	r3, [pc, #660]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e2:	091b      	lsrs	r3, r3, #4
 800e1e4:	f003 0301 	and.w	r3, r3, #1
 800e1e8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800e1ea:	4ba2      	ldr	r3, [pc, #648]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ee:	08db      	lsrs	r3, r3, #3
 800e1f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e1f4:	68fa      	ldr	r2, [r7, #12]
 800e1f6:	fb02 f303 	mul.w	r3, r2, r3
 800e1fa:	ee07 3a90 	vmov	s15, r3
 800e1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e202:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	f000 8123 	beq.w	800e454 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	2b03      	cmp	r3, #3
 800e212:	d062      	beq.n	800e2da <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	2b03      	cmp	r3, #3
 800e218:	f200 8081 	bhi.w	800e31e <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d024      	beq.n	800e26c <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	2b02      	cmp	r3, #2
 800e226:	d17a      	bne.n	800e31e <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	ee07 3a90 	vmov	s15, r3
 800e22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e232:	eddf 6a91 	vldr	s13, [pc, #580]	; 800e478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800e236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e23a:	4b8e      	ldr	r3, [pc, #568]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e23e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e242:	ee07 3a90 	vmov	s15, r3
 800e246:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e24a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e24e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800e47c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e252:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e256:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e25a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e25e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e262:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e26a:	e08f      	b.n	800e38c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e26c:	4b81      	ldr	r3, [pc, #516]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e26e:	689b      	ldr	r3, [r3, #8]
 800e270:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e274:	2b00      	cmp	r3, #0
 800e276:	d005      	beq.n	800e284 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 800e278:	4b7e      	ldr	r3, [pc, #504]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	0f1b      	lsrs	r3, r3, #28
 800e27e:	f003 030f 	and.w	r3, r3, #15
 800e282:	e006      	b.n	800e292 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 800e284:	4b7b      	ldr	r3, [pc, #492]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e286:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e28a:	041b      	lsls	r3, r3, #16
 800e28c:	0f1b      	lsrs	r3, r3, #28
 800e28e:	f003 030f 	and.w	r3, r3, #15
 800e292:	4a7b      	ldr	r2, [pc, #492]	; (800e480 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800e294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e298:	ee07 3a90 	vmov	s15, r3
 800e29c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	ee07 3a90 	vmov	s15, r3
 800e2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e2ae:	69bb      	ldr	r3, [r7, #24]
 800e2b0:	ee07 3a90 	vmov	s15, r3
 800e2b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2b8:	ed97 6a02 	vldr	s12, [r7, #8]
 800e2bc:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800e47c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e2c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e2cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e2d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e2d8:	e058      	b.n	800e38c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	ee07 3a90 	vmov	s15, r3
 800e2e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2e4:	eddf 6a64 	vldr	s13, [pc, #400]	; 800e478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800e2e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2ec:	4b61      	ldr	r3, [pc, #388]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e2ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2f4:	ee07 3a90 	vmov	s15, r3
 800e2f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e2fc:	ed97 6a02 	vldr	s12, [r7, #8]
 800e300:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800e47c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e304:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e308:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e30c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e310:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e314:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e318:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e31c:	e036      	b.n	800e38c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e31e:	4b55      	ldr	r3, [pc, #340]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e320:	689b      	ldr	r3, [r3, #8]
 800e322:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e326:	2b00      	cmp	r3, #0
 800e328:	d005      	beq.n	800e336 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 800e32a:	4b52      	ldr	r3, [pc, #328]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e32c:	689b      	ldr	r3, [r3, #8]
 800e32e:	0f1b      	lsrs	r3, r3, #28
 800e330:	f003 030f 	and.w	r3, r3, #15
 800e334:	e006      	b.n	800e344 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 800e336:	4b4f      	ldr	r3, [pc, #316]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e338:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e33c:	041b      	lsls	r3, r3, #16
 800e33e:	0f1b      	lsrs	r3, r3, #28
 800e340:	f003 030f 	and.w	r3, r3, #15
 800e344:	4a4e      	ldr	r2, [pc, #312]	; (800e480 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800e346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e34a:	ee07 3a90 	vmov	s15, r3
 800e34e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	ee07 3a90 	vmov	s15, r3
 800e358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e35c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e360:	69bb      	ldr	r3, [r7, #24]
 800e362:	ee07 3a90 	vmov	s15, r3
 800e366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e36a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e36e:	eddf 5a43 	vldr	s11, [pc, #268]	; 800e47c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e37a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e37e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e382:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e38a:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800e38c:	4b39      	ldr	r3, [pc, #228]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e394:	2b00      	cmp	r3, #0
 800e396:	d017      	beq.n	800e3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e398:	4b36      	ldr	r3, [pc, #216]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e39a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e39c:	0a5b      	lsrs	r3, r3, #9
 800e39e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3a2:	ee07 3a90 	vmov	s15, r3
 800e3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800e3aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e3ae:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e3b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800e3b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e3ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3be:	ee17 2a90 	vmov	r2, s15
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	601a      	str	r2, [r3, #0]
 800e3c6:	e002      	b.n	800e3ce <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800e3ce:	4b29      	ldr	r3, [pc, #164]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d017      	beq.n	800e40a <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e3da:	4b26      	ldr	r3, [pc, #152]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e3dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3de:	0c1b      	lsrs	r3, r3, #16
 800e3e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3e4:	ee07 3a90 	vmov	s15, r3
 800e3e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800e3ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e3f0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e3f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800e3f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e3fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e400:	ee17 2a90 	vmov	r2, s15
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	605a      	str	r2, [r3, #4]
 800e408:	e002      	b.n	800e410 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2200      	movs	r2, #0
 800e40e:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800e410:	4b18      	ldr	r3, [pc, #96]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d017      	beq.n	800e44c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e41c:	4b15      	ldr	r3, [pc, #84]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e420:	0e1b      	lsrs	r3, r3, #24
 800e422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e426:	ee07 3a90 	vmov	s15, r3
 800e42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800e42e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e432:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e436:	edd7 6a07 	vldr	s13, [r7, #28]
 800e43a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e43e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e442:	ee17 2a90 	vmov	r2, s15
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e44a:	e00c      	b.n	800e466 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2200      	movs	r2, #0
 800e450:	609a      	str	r2, [r3, #8]
}
 800e452:	e008      	b.n	800e466 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2200      	movs	r2, #0
 800e458:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2200      	movs	r2, #0
 800e45e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	609a      	str	r2, [r3, #8]
}
 800e466:	bf00      	nop
 800e468:	3724      	adds	r7, #36	; 0x24
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop
 800e474:	46020c00 	.word	0x46020c00
 800e478:	4b742400 	.word	0x4b742400
 800e47c:	46000000 	.word	0x46000000
 800e480:	0802a828 	.word	0x0802a828

0800e484 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e484:	b480      	push	{r7}
 800e486:	b089      	sub	sp, #36	; 0x24
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800e48c:	4bad      	ldr	r3, [pc, #692]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e48e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e494:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800e496:	4bab      	ldr	r3, [pc, #684]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e49a:	f003 0303 	and.w	r3, r3, #3
 800e49e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800e4a0:	4ba8      	ldr	r3, [pc, #672]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4a4:	0a1b      	lsrs	r3, r3, #8
 800e4a6:	f003 030f 	and.w	r3, r3, #15
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800e4ae:	4ba5      	ldr	r3, [pc, #660]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4b2:	091b      	lsrs	r3, r3, #4
 800e4b4:	f003 0301 	and.w	r3, r3, #1
 800e4b8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800e4ba:	4ba2      	ldr	r3, [pc, #648]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e4bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4be:	08db      	lsrs	r3, r3, #3
 800e4c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4c4:	68fa      	ldr	r2, [r7, #12]
 800e4c6:	fb02 f303 	mul.w	r3, r2, r3
 800e4ca:	ee07 3a90 	vmov	s15, r3
 800e4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4d2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f000 8123 	beq.w	800e724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	2b03      	cmp	r3, #3
 800e4e2:	d062      	beq.n	800e5aa <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	2b03      	cmp	r3, #3
 800e4e8:	f200 8081 	bhi.w	800e5ee <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d024      	beq.n	800e53c <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	2b02      	cmp	r3, #2
 800e4f6:	d17a      	bne.n	800e5ee <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	ee07 3a90 	vmov	s15, r3
 800e4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e502:	eddf 6a91 	vldr	s13, [pc, #580]	; 800e748 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800e506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e50a:	4b8e      	ldr	r3, [pc, #568]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e50c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e512:	ee07 3a90 	vmov	s15, r3
 800e516:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800e51a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e51e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800e74c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800e522:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e526:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800e52a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e532:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e536:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800e53a:	e08f      	b.n	800e65c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e53c:	4b81      	ldr	r3, [pc, #516]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e53e:	689b      	ldr	r3, [r3, #8]
 800e540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e544:	2b00      	cmp	r3, #0
 800e546:	d005      	beq.n	800e554 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 800e548:	4b7e      	ldr	r3, [pc, #504]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e54a:	689b      	ldr	r3, [r3, #8]
 800e54c:	0f1b      	lsrs	r3, r3, #28
 800e54e:	f003 030f 	and.w	r3, r3, #15
 800e552:	e006      	b.n	800e562 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 800e554:	4b7b      	ldr	r3, [pc, #492]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e556:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e55a:	041b      	lsls	r3, r3, #16
 800e55c:	0f1b      	lsrs	r3, r3, #28
 800e55e:	f003 030f 	and.w	r3, r3, #15
 800e562:	4a7b      	ldr	r2, [pc, #492]	; (800e750 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800e564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e568:	ee07 3a90 	vmov	s15, r3
 800e56c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	ee07 3a90 	vmov	s15, r3
 800e576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e57a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e57e:	69bb      	ldr	r3, [r7, #24]
 800e580:	ee07 3a90 	vmov	s15, r3
 800e584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e588:	ed97 6a02 	vldr	s12, [r7, #8]
 800e58c:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800e74c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800e590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e59c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e5a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e5a8:	e058      	b.n	800e65c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	ee07 3a90 	vmov	s15, r3
 800e5b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5b4:	eddf 6a64 	vldr	s13, [pc, #400]	; 800e748 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800e5b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5bc:	4b61      	ldr	r3, [pc, #388]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e5be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5c4:	ee07 3a90 	vmov	s15, r3
 800e5c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800e5cc:	ed97 6a02 	vldr	s12, [r7, #8]
 800e5d0:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800e74c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800e5d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e5d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800e5dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e5e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e5e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e5ec:	e036      	b.n	800e65c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e5ee:	4b55      	ldr	r3, [pc, #340]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e5f0:	689b      	ldr	r3, [r3, #8]
 800e5f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d005      	beq.n	800e606 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 800e5fa:	4b52      	ldr	r3, [pc, #328]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e5fc:	689b      	ldr	r3, [r3, #8]
 800e5fe:	0f1b      	lsrs	r3, r3, #28
 800e600:	f003 030f 	and.w	r3, r3, #15
 800e604:	e006      	b.n	800e614 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 800e606:	4b4f      	ldr	r3, [pc, #316]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e608:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e60c:	041b      	lsls	r3, r3, #16
 800e60e:	0f1b      	lsrs	r3, r3, #28
 800e610:	f003 030f 	and.w	r3, r3, #15
 800e614:	4a4e      	ldr	r2, [pc, #312]	; (800e750 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800e616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e61a:	ee07 3a90 	vmov	s15, r3
 800e61e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	ee07 3a90 	vmov	s15, r3
 800e628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e62c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	ee07 3a90 	vmov	s15, r3
 800e636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e63a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e63e:	eddf 5a43 	vldr	s11, [pc, #268]	; 800e74c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800e642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e64a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e64e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e652:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e656:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e65a:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800e65c:	4b39      	ldr	r3, [pc, #228]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e664:	2b00      	cmp	r3, #0
 800e666:	d017      	beq.n	800e698 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e668:	4b36      	ldr	r3, [pc, #216]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e66a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e66c:	0a5b      	lsrs	r3, r3, #9
 800e66e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e672:	ee07 3a90 	vmov	s15, r3
 800e676:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800e67a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e67e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e682:	edd7 6a07 	vldr	s13, [r7, #28]
 800e686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e68a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e68e:	ee17 2a90 	vmov	r2, s15
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	601a      	str	r2, [r3, #0]
 800e696:	e002      	b.n	800e69e <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2200      	movs	r2, #0
 800e69c:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800e69e:	4b29      	ldr	r3, [pc, #164]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d017      	beq.n	800e6da <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e6aa:	4b26      	ldr	r3, [pc, #152]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e6ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6ae:	0c1b      	lsrs	r3, r3, #16
 800e6b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6b4:	ee07 3a90 	vmov	s15, r3
 800e6b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800e6bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e6c0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e6c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800e6c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6d0:	ee17 2a90 	vmov	r2, s15
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	605a      	str	r2, [r3, #4]
 800e6d8:	e002      	b.n	800e6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800e6e0:	4b18      	ldr	r3, [pc, #96]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d017      	beq.n	800e71c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e6ec:	4b15      	ldr	r3, [pc, #84]	; (800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e6ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6f0:	0e1b      	lsrs	r3, r3, #24
 800e6f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6f6:	ee07 3a90 	vmov	s15, r3
 800e6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800e6fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e702:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e706:	edd7 6a07 	vldr	s13, [r7, #28]
 800e70a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e70e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e712:	ee17 2a90 	vmov	r2, s15
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800e71a:	e00c      	b.n	800e736 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2200      	movs	r2, #0
 800e720:	609a      	str	r2, [r3, #8]
}
 800e722:	e008      	b.n	800e736 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2200      	movs	r2, #0
 800e728:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2200      	movs	r2, #0
 800e72e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2200      	movs	r2, #0
 800e734:	609a      	str	r2, [r3, #8]
}
 800e736:	bf00      	nop
 800e738:	3724      	adds	r7, #36	; 0x24
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr
 800e742:	bf00      	nop
 800e744:	46020c00 	.word	0x46020c00
 800e748:	4b742400 	.word	0x4b742400
 800e74c:	46000000 	.word	0x46000000
 800e750:	0802a828 	.word	0x0802a828

0800e754 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b08e      	sub	sp, #56	; 0x38
 800e758:	af00      	add	r7, sp, #0
 800e75a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800e75e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e762:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800e766:	430b      	orrs	r3, r1
 800e768:	d145      	bne.n	800e7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800e76a:	4ba7      	ldr	r3, [pc, #668]	; (800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e76c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e774:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800e776:	4ba4      	ldr	r3, [pc, #656]	; (800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e77c:	f003 0302 	and.w	r3, r3, #2
 800e780:	2b02      	cmp	r3, #2
 800e782:	d108      	bne.n	800e796 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800e784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e78a:	d104      	bne.n	800e796 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800e78c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e790:	637b      	str	r3, [r7, #52]	; 0x34
 800e792:	f001 bb58 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800e796:	4b9c      	ldr	r3, [pc, #624]	; (800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e79c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e7a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e7a4:	d114      	bne.n	800e7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800e7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7ac:	d110      	bne.n	800e7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e7ae:	4b96      	ldr	r3, [pc, #600]	; (800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e7b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e7b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e7b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e7bc:	d103      	bne.n	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800e7be:	23fa      	movs	r3, #250	; 0xfa
 800e7c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e7c2:	f001 bb40 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800e7c6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e7ca:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e7cc:	f001 bb3b 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800e7d0:	4b8d      	ldr	r3, [pc, #564]	; (800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e7d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e7dc:	d107      	bne.n	800e7ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800e7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e7e4:	d103      	bne.n	800e7ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800e7e6:	4b89      	ldr	r3, [pc, #548]	; (800ea0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800e7e8:	637b      	str	r3, [r7, #52]	; 0x34
 800e7ea:	f001 bb2c 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	637b      	str	r3, [r7, #52]	; 0x34
 800e7f2:	f001 bb28 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e7f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7fa:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800e7fe:	430b      	orrs	r3, r1
 800e800:	d151      	bne.n	800e8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800e802:	4b81      	ldr	r3, [pc, #516]	; (800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e804:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e808:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800e80c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e810:	2b80      	cmp	r3, #128	; 0x80
 800e812:	d035      	beq.n	800e880 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800e814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e816:	2b80      	cmp	r3, #128	; 0x80
 800e818:	d841      	bhi.n	800e89e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81c:	2b60      	cmp	r3, #96	; 0x60
 800e81e:	d02a      	beq.n	800e876 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800e820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e822:	2b60      	cmp	r3, #96	; 0x60
 800e824:	d83b      	bhi.n	800e89e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e828:	2b40      	cmp	r3, #64	; 0x40
 800e82a:	d009      	beq.n	800e840 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82e:	2b40      	cmp	r3, #64	; 0x40
 800e830:	d835      	bhi.n	800e89e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e834:	2b00      	cmp	r3, #0
 800e836:	d00c      	beq.n	800e852 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800e838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e83a:	2b20      	cmp	r3, #32
 800e83c:	d012      	beq.n	800e864 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800e83e:	e02e      	b.n	800e89e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e844:	4618      	mov	r0, r3
 800e846:	f7ff fb4d 	bl	800dee4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e84e:	f001 bafa 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e852:	f107 0318 	add.w	r3, r7, #24
 800e856:	4618      	mov	r0, r3
 800e858:	f7ff fcac 	bl	800e1b4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800e85c:	69bb      	ldr	r3, [r7, #24]
 800e85e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e860:	f001 baf1 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e864:	f107 030c 	add.w	r3, r7, #12
 800e868:	4618      	mov	r0, r3
 800e86a:	f7ff fe0b 	bl	800e484 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e872:	f001 bae8 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e876:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e87a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e87c:	f001 bae3 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e880:	4b61      	ldr	r3, [pc, #388]	; (800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e88c:	d103      	bne.n	800e896 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800e88e:	4b60      	ldr	r3, [pc, #384]	; (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e890:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e892:	f001 bad8 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800e896:	2300      	movs	r3, #0
 800e898:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e89a:	f001 bad4 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :
      {
        frequency = 0U;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e8a2:	f001 bad0 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800e8a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8aa:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800e8ae:	430b      	orrs	r3, r1
 800e8b0:	d158      	bne.n	800e964 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800e8b2:	4b55      	ldr	r3, [pc, #340]	; (800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e8b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e8b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e8bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8c4:	d03b      	beq.n	800e93e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800e8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8cc:	d846      	bhi.n	800e95c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e8d4:	d02e      	beq.n	800e934 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800e8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e8dc:	d83e      	bhi.n	800e95c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8e4:	d00b      	beq.n	800e8fe <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800e8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8ec:	d836      	bhi.n	800e95c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d00d      	beq.n	800e910 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800e8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8fa:	d012      	beq.n	800e922 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800e8fc:	e02e      	b.n	800e95c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e8fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e902:	4618      	mov	r0, r3
 800e904:	f7ff faee 	bl	800dee4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e90c:	f001 ba9b 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e910:	f107 0318 	add.w	r3, r7, #24
 800e914:	4618      	mov	r0, r3
 800e916:	f7ff fc4d 	bl	800e1b4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800e91a:	69bb      	ldr	r3, [r7, #24]
 800e91c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e91e:	f001 ba92 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e922:	f107 030c 	add.w	r3, r7, #12
 800e926:	4618      	mov	r0, r3
 800e928:	f7ff fdac 	bl	800e484 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e930:	f001 ba89 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e934:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e938:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e93a:	f001 ba84 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e93e:	4b32      	ldr	r3, [pc, #200]	; (800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e94a:	d103      	bne.n	800e954 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800e94c:	4b30      	ldr	r3, [pc, #192]	; (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e94e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e950:	f001 ba79 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800e954:	2300      	movs	r3, #0
 800e956:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e958:	f001 ba75 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :

        frequency = 0U;
 800e95c:	2300      	movs	r3, #0
 800e95e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e960:	f001 ba71 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800e964:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e968:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800e96c:	430b      	orrs	r3, r1
 800e96e:	d126      	bne.n	800e9be <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800e970:	4b25      	ldr	r3, [pc, #148]	; (800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e972:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e97a:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800e97c:	4b22      	ldr	r3, [pc, #136]	; (800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e988:	d106      	bne.n	800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800e98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d103      	bne.n	800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800e990:	4b1f      	ldr	r3, [pc, #124]	; (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e992:	637b      	str	r3, [r7, #52]	; 0x34
 800e994:	f001 ba57 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800e998:	4b1b      	ldr	r3, [pc, #108]	; (800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e9a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9a4:	d107      	bne.n	800e9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800e9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e9ac:	d103      	bne.n	800e9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800e9ae:	4b19      	ldr	r3, [pc, #100]	; (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800e9b0:	637b      	str	r3, [r7, #52]	; 0x34
 800e9b2:	f001 ba48 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	637b      	str	r3, [r7, #52]	; 0x34
 800e9ba:	f001 ba44 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800e9be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9c2:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800e9c6:	430b      	orrs	r3, r1
 800e9c8:	d16e      	bne.n	800eaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800e9ca:	4b0f      	ldr	r3, [pc, #60]	; (800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e9cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e9d0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800e9d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e9dc:	d03d      	beq.n	800ea5a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800e9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e9e4:	d85c      	bhi.n	800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800e9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e9ec:	d014      	beq.n	800ea18 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800e9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e9f4:	d854      	bhi.n	800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800e9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d01f      	beq.n	800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800e9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ea02:	d012      	beq.n	800ea2a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800ea04:	e04c      	b.n	800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ea06:	bf00      	nop
 800ea08:	46020c00 	.word	0x46020c00
 800ea0c:	0007a120 	.word	0x0007a120
 800ea10:	00f42400 	.word	0x00f42400
 800ea14:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ea18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7ff fa61 	bl	800dee4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800ea22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea26:	f001 ba0e 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea2a:	f107 0318 	add.w	r3, r7, #24
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7ff fbc0 	bl	800e1b4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea38:	f001 ba05 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800ea3c:	4ba7      	ldr	r3, [pc, #668]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ea44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea48:	d103      	bne.n	800ea52 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800ea4a:	4ba5      	ldr	r3, [pc, #660]	; (800ece0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ea4c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ea4e:	f001 b9fa 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800ea52:	2300      	movs	r3, #0
 800ea54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea56:	f001 b9f6 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ea5a:	4ba0      	ldr	r3, [pc, #640]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f003 0320 	and.w	r3, r3, #32
 800ea62:	2b20      	cmp	r3, #32
 800ea64:	d118      	bne.n	800ea98 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ea66:	4b9d      	ldr	r3, [pc, #628]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ea68:	689b      	ldr	r3, [r3, #8]
 800ea6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d005      	beq.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ea72:	4b9a      	ldr	r3, [pc, #616]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ea74:	689b      	ldr	r3, [r3, #8]
 800ea76:	0e1b      	lsrs	r3, r3, #24
 800ea78:	f003 030f 	and.w	r3, r3, #15
 800ea7c:	e006      	b.n	800ea8c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800ea7e:	4b97      	ldr	r3, [pc, #604]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ea80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ea84:	041b      	lsls	r3, r3, #16
 800ea86:	0e1b      	lsrs	r3, r3, #24
 800ea88:	f003 030f 	and.w	r3, r3, #15
 800ea8c:	4a95      	ldr	r2, [pc, #596]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ea8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea92:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ea94:	f001 b9d7 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea9c:	f001 b9d3 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :

        frequency = 0U;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eaa4:	f001 b9cf 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800eaa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eaac:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800eab0:	430b      	orrs	r3, r1
 800eab2:	d17f      	bne.n	800ebb4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800eab4:	4b89      	ldr	r3, [pc, #548]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eab6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800eaba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eabe:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800eac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d165      	bne.n	800eb92 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800eac6:	4b85      	ldr	r3, [pc, #532]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eacc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800ead0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800ead2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ead8:	d034      	beq.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800eada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eadc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800eae0:	d853      	bhi.n	800eb8a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800eae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eae8:	d00b      	beq.n	800eb02 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800eaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eaf0:	d84b      	bhi.n	800eb8a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800eaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d016      	beq.n	800eb26 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800eaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800eafe:	d009      	beq.n	800eb14 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800eb00:	e043      	b.n	800eb8a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eb02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7ff f9ec 	bl	800dee4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800eb10:	f001 b999 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb14:	f107 0318 	add.w	r3, r7, #24
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7ff fb4b 	bl	800e1b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800eb1e:	69fb      	ldr	r3, [r7, #28]
 800eb20:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800eb22:	f001 b990 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800eb26:	4b6d      	ldr	r3, [pc, #436]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eb2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb32:	d103      	bne.n	800eb3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800eb34:	4b6a      	ldr	r3, [pc, #424]	; (800ece0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800eb36:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800eb38:	f001 b985 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
            frequency = 0U;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800eb40:	f001 b981 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800eb44:	4b65      	ldr	r3, [pc, #404]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f003 0320 	and.w	r3, r3, #32
 800eb4c:	2b20      	cmp	r3, #32
 800eb4e:	d118      	bne.n	800eb82 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800eb50:	4b62      	ldr	r3, [pc, #392]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eb52:	689b      	ldr	r3, [r3, #8]
 800eb54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d005      	beq.n	800eb68 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800eb5c:	4b5f      	ldr	r3, [pc, #380]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	0e1b      	lsrs	r3, r3, #24
 800eb62:	f003 030f 	and.w	r3, r3, #15
 800eb66:	e006      	b.n	800eb76 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800eb68:	4b5c      	ldr	r3, [pc, #368]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eb6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800eb6e:	041b      	lsls	r3, r3, #16
 800eb70:	0e1b      	lsrs	r3, r3, #24
 800eb72:	f003 030f 	and.w	r3, r3, #15
 800eb76:	4a5b      	ldr	r2, [pc, #364]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800eb78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb7c:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800eb7e:	f001 b962 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
            frequency = 0U;
 800eb82:	2300      	movs	r3, #0
 800eb84:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800eb86:	f001 b95e 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        default :
        {
          frequency = 0U;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800eb8e:	f001 b95a 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800eb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eb98:	d108      	bne.n	800ebac <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eb9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7ff f9a0 	bl	800dee4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800eba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba6:	637b      	str	r3, [r7, #52]	; 0x34
 800eba8:	f001 b94d 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else
    {
      frequency = 0U;
 800ebac:	2300      	movs	r3, #0
 800ebae:	637b      	str	r3, [r7, #52]	; 0x34
 800ebb0:	f001 b949 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800ebb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebb8:	1e51      	subs	r1, r2, #1
 800ebba:	430b      	orrs	r3, r1
 800ebbc:	d136      	bne.n	800ec2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800ebbe:	4b47      	ldr	r3, [pc, #284]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ebc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ebc4:	f003 0303 	and.w	r3, r3, #3
 800ebc8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800ebca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d104      	bne.n	800ebda <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800ebd0:	f7fe f96a 	bl	800cea8 <HAL_RCC_GetPCLK2Freq>
 800ebd4:	6378      	str	r0, [r7, #52]	; 0x34
 800ebd6:	f001 b936 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800ebda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d104      	bne.n	800ebea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ebe0:	f7fe f82c 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800ebe4:	6378      	str	r0, [r7, #52]	; 0x34
 800ebe6:	f001 b92e 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800ebea:	4b3c      	ldr	r3, [pc, #240]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ebf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebf6:	d106      	bne.n	800ec06 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800ebf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebfa:	2b02      	cmp	r3, #2
 800ebfc:	d103      	bne.n	800ec06 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800ebfe:	4b3a      	ldr	r3, [pc, #232]	; (800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ec00:	637b      	str	r3, [r7, #52]	; 0x34
 800ec02:	f001 b920 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800ec06:	4b35      	ldr	r3, [pc, #212]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ec08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ec0c:	f003 0302 	and.w	r3, r3, #2
 800ec10:	2b02      	cmp	r3, #2
 800ec12:	d107      	bne.n	800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800ec14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec16:	2b03      	cmp	r3, #3
 800ec18:	d104      	bne.n	800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800ec1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ec20:	f001 b911 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800ec24:	2300      	movs	r3, #0
 800ec26:	637b      	str	r3, [r7, #52]	; 0x34
 800ec28:	f001 b90d 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800ec2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec30:	1e91      	subs	r1, r2, #2
 800ec32:	430b      	orrs	r3, r1
 800ec34:	d136      	bne.n	800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ec36:	4b29      	ldr	r3, [pc, #164]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ec38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec3c:	f003 030c 	and.w	r3, r3, #12
 800ec40:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800ec42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d104      	bne.n	800ec52 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ec48:	f7fe f91a 	bl	800ce80 <HAL_RCC_GetPCLK1Freq>
 800ec4c:	6378      	str	r0, [r7, #52]	; 0x34
 800ec4e:	f001 b8fa 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800ec52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec54:	2b04      	cmp	r3, #4
 800ec56:	d104      	bne.n	800ec62 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ec58:	f7fd fff0 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800ec5c:	6378      	str	r0, [r7, #52]	; 0x34
 800ec5e:	f001 b8f2 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800ec62:	4b1e      	ldr	r3, [pc, #120]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ec6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec6e:	d106      	bne.n	800ec7e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ec70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec72:	2b08      	cmp	r3, #8
 800ec74:	d103      	bne.n	800ec7e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800ec76:	4b1c      	ldr	r3, [pc, #112]	; (800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ec78:	637b      	str	r3, [r7, #52]	; 0x34
 800ec7a:	f001 b8e4 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800ec7e:	4b17      	ldr	r3, [pc, #92]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ec80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ec84:	f003 0302 	and.w	r3, r3, #2
 800ec88:	2b02      	cmp	r3, #2
 800ec8a:	d107      	bne.n	800ec9c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800ec8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8e:	2b0c      	cmp	r3, #12
 800ec90:	d104      	bne.n	800ec9c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800ec92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec96:	637b      	str	r3, [r7, #52]	; 0x34
 800ec98:	f001 b8d5 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	637b      	str	r3, [r7, #52]	; 0x34
 800eca0:	f001 b8d1 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800eca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eca8:	1f11      	subs	r1, r2, #4
 800ecaa:	430b      	orrs	r3, r1
 800ecac:	d13f      	bne.n	800ed2e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ecae:	4b0b      	ldr	r3, [pc, #44]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ecb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ecb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ecb8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800ecba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d104      	bne.n	800ecca <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ecc0:	f7fe f8de 	bl	800ce80 <HAL_RCC_GetPCLK1Freq>
 800ecc4:	6378      	str	r0, [r7, #52]	; 0x34
 800ecc6:	f001 b8be 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800ecca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eccc:	2b10      	cmp	r3, #16
 800ecce:	d10d      	bne.n	800ecec <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ecd0:	f7fd ffb4 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800ecd4:	6378      	str	r0, [r7, #52]	; 0x34
 800ecd6:	f001 b8b6 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800ecda:	bf00      	nop
 800ecdc:	46020c00 	.word	0x46020c00
 800ece0:	02dc6c00 	.word	0x02dc6c00
 800ece4:	0802a828 	.word	0x0802a828
 800ece8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800ecec:	4ba8      	ldr	r3, [pc, #672]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ecf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ecf8:	d106      	bne.n	800ed08 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800ecfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfc:	2b20      	cmp	r3, #32
 800ecfe:	d103      	bne.n	800ed08 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800ed00:	4ba4      	ldr	r3, [pc, #656]	; (800ef94 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ed02:	637b      	str	r3, [r7, #52]	; 0x34
 800ed04:	f001 b89f 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800ed08:	4ba1      	ldr	r3, [pc, #644]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ed0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ed0e:	f003 0302 	and.w	r3, r3, #2
 800ed12:	2b02      	cmp	r3, #2
 800ed14:	d107      	bne.n	800ed26 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ed16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed18:	2b30      	cmp	r3, #48	; 0x30
 800ed1a:	d104      	bne.n	800ed26 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800ed1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed20:	637b      	str	r3, [r7, #52]	; 0x34
 800ed22:	f001 b890 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800ed26:	2300      	movs	r3, #0
 800ed28:	637b      	str	r3, [r7, #52]	; 0x34
 800ed2a:	f001 b88c 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800ed2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed32:	f1a2 0108 	sub.w	r1, r2, #8
 800ed36:	430b      	orrs	r3, r1
 800ed38:	d136      	bne.n	800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800ed3a:	4b95      	ldr	r3, [pc, #596]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ed3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ed44:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800ed46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d104      	bne.n	800ed56 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ed4c:	f7fe f898 	bl	800ce80 <HAL_RCC_GetPCLK1Freq>
 800ed50:	6378      	str	r0, [r7, #52]	; 0x34
 800ed52:	f001 b878 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800ed56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed58:	2b40      	cmp	r3, #64	; 0x40
 800ed5a:	d104      	bne.n	800ed66 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ed5c:	f7fd ff6e 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800ed60:	6378      	str	r0, [r7, #52]	; 0x34
 800ed62:	f001 b870 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800ed66:	4b8a      	ldr	r3, [pc, #552]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed72:	d106      	bne.n	800ed82 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800ed74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed76:	2b80      	cmp	r3, #128	; 0x80
 800ed78:	d103      	bne.n	800ed82 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800ed7a:	4b86      	ldr	r3, [pc, #536]	; (800ef94 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ed7c:	637b      	str	r3, [r7, #52]	; 0x34
 800ed7e:	f001 b862 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800ed82:	4b83      	ldr	r3, [pc, #524]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ed84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ed88:	f003 0302 	and.w	r3, r3, #2
 800ed8c:	2b02      	cmp	r3, #2
 800ed8e:	d107      	bne.n	800eda0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ed90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed92:	2bc0      	cmp	r3, #192	; 0xc0
 800ed94:	d104      	bne.n	800eda0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800ed96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ed9c:	f001 b853 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800eda0:	2300      	movs	r3, #0
 800eda2:	637b      	str	r3, [r7, #52]	; 0x34
 800eda4:	f001 b84f 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800eda8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edac:	f1a2 0110 	sub.w	r1, r2, #16
 800edb0:	430b      	orrs	r3, r1
 800edb2:	d139      	bne.n	800ee28 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800edb4:	4b76      	ldr	r3, [pc, #472]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800edb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800edba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800edbe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800edc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d104      	bne.n	800edd0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800edc6:	f7fe f85b 	bl	800ce80 <HAL_RCC_GetPCLK1Freq>
 800edca:	6378      	str	r0, [r7, #52]	; 0x34
 800edcc:	f001 b83b 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800edd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edd6:	d104      	bne.n	800ede2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800edd8:	f7fd ff30 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800eddc:	6378      	str	r0, [r7, #52]	; 0x34
 800edde:	f001 b832 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800ede2:	4b6b      	ldr	r3, [pc, #428]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800edea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edee:	d107      	bne.n	800ee00 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800edf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edf6:	d103      	bne.n	800ee00 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800edf8:	4b66      	ldr	r3, [pc, #408]	; (800ef94 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800edfa:	637b      	str	r3, [r7, #52]	; 0x34
 800edfc:	f001 b823 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800ee00:	4b63      	ldr	r3, [pc, #396]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ee02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ee06:	f003 0302 	and.w	r3, r3, #2
 800ee0a:	2b02      	cmp	r3, #2
 800ee0c:	d108      	bne.n	800ee20 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800ee0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee14:	d104      	bne.n	800ee20 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800ee16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee1a:	637b      	str	r3, [r7, #52]	; 0x34
 800ee1c:	f001 b813 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800ee20:	2300      	movs	r3, #0
 800ee22:	637b      	str	r3, [r7, #52]	; 0x34
 800ee24:	f001 b80f 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800ee28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee2c:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800ee30:	430b      	orrs	r3, r1
 800ee32:	d139      	bne.n	800eea8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800ee34:	4b56      	ldr	r3, [pc, #344]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ee36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ee3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ee3e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800ee40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d104      	bne.n	800ee50 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ee46:	f7fe f81b 	bl	800ce80 <HAL_RCC_GetPCLK1Freq>
 800ee4a:	6378      	str	r0, [r7, #52]	; 0x34
 800ee4c:	f000 bffb 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800ee50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee56:	d104      	bne.n	800ee62 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ee58:	f7fd fef0 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800ee5c:	6378      	str	r0, [r7, #52]	; 0x34
 800ee5e:	f000 bff2 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800ee62:	4b4b      	ldr	r3, [pc, #300]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ee6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee6e:	d107      	bne.n	800ee80 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800ee70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee76:	d103      	bne.n	800ee80 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800ee78:	4b46      	ldr	r3, [pc, #280]	; (800ef94 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ee7a:	637b      	str	r3, [r7, #52]	; 0x34
 800ee7c:	f000 bfe3 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800ee80:	4b43      	ldr	r3, [pc, #268]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ee82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ee86:	f003 0302 	and.w	r3, r3, #2
 800ee8a:	2b02      	cmp	r3, #2
 800ee8c:	d108      	bne.n	800eea0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800ee8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ee94:	d104      	bne.n	800eea0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800ee96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ee9c:	f000 bfd3 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800eea0:	2300      	movs	r3, #0
 800eea2:	637b      	str	r3, [r7, #52]	; 0x34
 800eea4:	f000 bfcf 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800eea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eeac:	f1a2 0120 	sub.w	r1, r2, #32
 800eeb0:	430b      	orrs	r3, r1
 800eeb2:	d158      	bne.n	800ef66 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800eeb4:	4b36      	ldr	r3, [pc, #216]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800eeb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eeba:	f003 0307 	and.w	r3, r3, #7
 800eebe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800eec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d104      	bne.n	800eed0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800eec6:	f7fe f803 	bl	800ced0 <HAL_RCC_GetPCLK3Freq>
 800eeca:	6378      	str	r0, [r7, #52]	; 0x34
 800eecc:	f000 bfbb 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800eed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d104      	bne.n	800eee0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800eed6:	f7fd feb1 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800eeda:	6378      	str	r0, [r7, #52]	; 0x34
 800eedc:	f000 bfb3 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800eee0:	4b2b      	ldr	r3, [pc, #172]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eeec:	d106      	bne.n	800eefc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800eeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef0:	2b02      	cmp	r3, #2
 800eef2:	d103      	bne.n	800eefc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800eef4:	4b27      	ldr	r3, [pc, #156]	; (800ef94 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800eef6:	637b      	str	r3, [r7, #52]	; 0x34
 800eef8:	f000 bfa5 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800eefc:	4b24      	ldr	r3, [pc, #144]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800eefe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ef02:	f003 0302 	and.w	r3, r3, #2
 800ef06:	2b02      	cmp	r3, #2
 800ef08:	d107      	bne.n	800ef1a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800ef0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0c:	2b03      	cmp	r3, #3
 800ef0e:	d104      	bne.n	800ef1a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800ef10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef14:	637b      	str	r3, [r7, #52]	; 0x34
 800ef16:	f000 bf96 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800ef1a:	4b1d      	ldr	r3, [pc, #116]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	f003 0320 	and.w	r3, r3, #32
 800ef22:	2b20      	cmp	r3, #32
 800ef24:	d11b      	bne.n	800ef5e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800ef26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef28:	2b04      	cmp	r3, #4
 800ef2a:	d118      	bne.n	800ef5e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ef2c:	4b18      	ldr	r3, [pc, #96]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ef2e:	689b      	ldr	r3, [r3, #8]
 800ef30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d005      	beq.n	800ef44 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800ef38:	4b15      	ldr	r3, [pc, #84]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ef3a:	689b      	ldr	r3, [r3, #8]
 800ef3c:	0e1b      	lsrs	r3, r3, #24
 800ef3e:	f003 030f 	and.w	r3, r3, #15
 800ef42:	e006      	b.n	800ef52 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800ef44:	4b12      	ldr	r3, [pc, #72]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ef46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ef4a:	041b      	lsls	r3, r3, #16
 800ef4c:	0e1b      	lsrs	r3, r3, #24
 800ef4e:	f003 030f 	and.w	r3, r3, #15
 800ef52:	4a11      	ldr	r2, [pc, #68]	; (800ef98 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ef54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef58:	637b      	str	r3, [r7, #52]	; 0x34
 800ef5a:	f000 bf74 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	637b      	str	r3, [r7, #52]	; 0x34
 800ef62:	f000 bf70 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800ef66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef6a:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ef6e:	430b      	orrs	r3, r1
 800ef70:	d172      	bne.n	800f058 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800ef72:	4b07      	ldr	r3, [pc, #28]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ef74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ef78:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ef7c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800ef7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef84:	d10a      	bne.n	800ef9c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ef86:	f7fd fe59 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800ef8a:	6378      	str	r0, [r7, #52]	; 0x34
 800ef8c:	f000 bf5b 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800ef90:	46020c00 	.word	0x46020c00
 800ef94:	00f42400 	.word	0x00f42400
 800ef98:	0802a828 	.word	0x0802a828
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800ef9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efa2:	d108      	bne.n	800efb6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efa4:	f107 0318 	add.w	r3, r7, #24
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7ff f903 	bl	800e1b4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800efae:	6a3b      	ldr	r3, [r7, #32]
 800efb0:	637b      	str	r3, [r7, #52]	; 0x34
 800efb2:	f000 bf48 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800efb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d104      	bne.n	800efc6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800efbc:	f7fd ff46 	bl	800ce4c <HAL_RCC_GetHCLKFreq>
 800efc0:	6378      	str	r0, [r7, #52]	; 0x34
 800efc2:	f000 bf40 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800efc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800efcc:	d122      	bne.n	800f014 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800efce:	4baa      	ldr	r3, [pc, #680]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f003 0320 	and.w	r3, r3, #32
 800efd6:	2b20      	cmp	r3, #32
 800efd8:	d118      	bne.n	800f00c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800efda:	4ba7      	ldr	r3, [pc, #668]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800efdc:	689b      	ldr	r3, [r3, #8]
 800efde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d005      	beq.n	800eff2 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800efe6:	4ba4      	ldr	r3, [pc, #656]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800efe8:	689b      	ldr	r3, [r3, #8]
 800efea:	0e1b      	lsrs	r3, r3, #24
 800efec:	f003 030f 	and.w	r3, r3, #15
 800eff0:	e006      	b.n	800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800eff2:	4ba1      	ldr	r3, [pc, #644]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800eff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800eff8:	041b      	lsls	r3, r3, #16
 800effa:	0e1b      	lsrs	r3, r3, #24
 800effc:	f003 030f 	and.w	r3, r3, #15
 800f000:	4a9e      	ldr	r2, [pc, #632]	; (800f27c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800f002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f006:	637b      	str	r3, [r7, #52]	; 0x34
 800f008:	f000 bf1d 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 800f00c:	2300      	movs	r3, #0
 800f00e:	637b      	str	r3, [r7, #52]	; 0x34
 800f010:	f000 bf19 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800f014:	4b98      	ldr	r3, [pc, #608]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f01c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f020:	d107      	bne.n	800f032 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800f022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f024:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f028:	d103      	bne.n	800f032 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800f02a:	4b95      	ldr	r3, [pc, #596]	; (800f280 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800f02c:	637b      	str	r3, [r7, #52]	; 0x34
 800f02e:	f000 bf0a 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800f032:	4b91      	ldr	r3, [pc, #580]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f03a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f03e:	d107      	bne.n	800f050 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800f040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f046:	d103      	bne.n	800f050 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800f048:	4b8d      	ldr	r3, [pc, #564]	; (800f280 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800f04a:	637b      	str	r3, [r7, #52]	; 0x34
 800f04c:	f000 befb 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800f050:	2300      	movs	r3, #0
 800f052:	637b      	str	r3, [r7, #52]	; 0x34
 800f054:	f000 bef7 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800f058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f05c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800f060:	430b      	orrs	r3, r1
 800f062:	d158      	bne.n	800f116 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800f064:	4b84      	ldr	r3, [pc, #528]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f066:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f06a:	f003 0307 	and.w	r3, r3, #7
 800f06e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f072:	2b04      	cmp	r3, #4
 800f074:	d84b      	bhi.n	800f10e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800f076:	a201      	add	r2, pc, #4	; (adr r2, 800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800f078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f07c:	0800f0b5 	.word	0x0800f0b5
 800f080:	0800f091 	.word	0x0800f091
 800f084:	0800f0a3 	.word	0x0800f0a3
 800f088:	0800f0bf 	.word	0x0800f0bf
 800f08c:	0800f0c9 	.word	0x0800f0c9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f094:	4618      	mov	r0, r3
 800f096:	f7fe ff25 	bl	800dee4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f09e:	f000 bed2 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f0a2:	f107 030c 	add.w	r3, r7, #12
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7ff f9ec 	bl	800e484 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f0b0:	f000 bec9 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f0b4:	f7fd feca 	bl	800ce4c <HAL_RCC_GetHCLKFreq>
 800f0b8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f0ba:	f000 bec4 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f0be:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f0c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f0c4:	f000 bebf 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f0c8:	4b6b      	ldr	r3, [pc, #428]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	f003 0320 	and.w	r3, r3, #32
 800f0d0:	2b20      	cmp	r3, #32
 800f0d2:	d118      	bne.n	800f106 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f0d4:	4b68      	ldr	r3, [pc, #416]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f0d6:	689b      	ldr	r3, [r3, #8]
 800f0d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d005      	beq.n	800f0ec <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800f0e0:	4b65      	ldr	r3, [pc, #404]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f0e2:	689b      	ldr	r3, [r3, #8]
 800f0e4:	0e1b      	lsrs	r3, r3, #24
 800f0e6:	f003 030f 	and.w	r3, r3, #15
 800f0ea:	e006      	b.n	800f0fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800f0ec:	4b62      	ldr	r3, [pc, #392]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f0ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f0f2:	041b      	lsls	r3, r3, #16
 800f0f4:	0e1b      	lsrs	r3, r3, #24
 800f0f6:	f003 030f 	and.w	r3, r3, #15
 800f0fa:	4a60      	ldr	r2, [pc, #384]	; (800f27c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800f0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f100:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f102:	f000 bea0 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f106:	2300      	movs	r3, #0
 800f108:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f10a:	f000 be9c 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800f10e:	2300      	movs	r3, #0
 800f110:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f112:	f000 be98 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800f116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f11a:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800f11e:	430b      	orrs	r3, r1
 800f120:	d167      	bne.n	800f1f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800f122:	4b55      	ldr	r3, [pc, #340]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f128:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f12c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f130:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f134:	d036      	beq.n	800f1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800f136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f138:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f13c:	d855      	bhi.n	800f1ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f140:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f144:	d029      	beq.n	800f19a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800f146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f148:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f14c:	d84d      	bhi.n	800f1ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f154:	d013      	beq.n	800f17e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800f156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f15c:	d845      	bhi.n	800f1ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f160:	2b00      	cmp	r3, #0
 800f162:	d015      	beq.n	800f190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800f164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f16a:	d13e      	bne.n	800f1ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f16c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f170:	4618      	mov	r0, r3
 800f172:	f7fe feb7 	bl	800dee4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f178:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f17a:	f000 be64 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f17e:	f107 030c 	add.w	r3, r7, #12
 800f182:	4618      	mov	r0, r3
 800f184:	f7ff f97e 	bl	800e484 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f18c:	f000 be5b 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f190:	f7fd fe5c 	bl	800ce4c <HAL_RCC_GetHCLKFreq>
 800f194:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f196:	f000 be56 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f19a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f19e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f1a0:	f000 be51 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f1a4:	4b34      	ldr	r3, [pc, #208]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	f003 0320 	and.w	r3, r3, #32
 800f1ac:	2b20      	cmp	r3, #32
 800f1ae:	d118      	bne.n	800f1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f1b0:	4b31      	ldr	r3, [pc, #196]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d005      	beq.n	800f1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800f1bc:	4b2e      	ldr	r3, [pc, #184]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f1be:	689b      	ldr	r3, [r3, #8]
 800f1c0:	0e1b      	lsrs	r3, r3, #24
 800f1c2:	f003 030f 	and.w	r3, r3, #15
 800f1c6:	e006      	b.n	800f1d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f1c8:	4b2b      	ldr	r3, [pc, #172]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f1ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f1ce:	041b      	lsls	r3, r3, #16
 800f1d0:	0e1b      	lsrs	r3, r3, #24
 800f1d2:	f003 030f 	and.w	r3, r3, #15
 800f1d6:	4a29      	ldr	r2, [pc, #164]	; (800f27c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800f1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1dc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f1de:	f000 be32 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f1e6:	f000 be2e 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f1ee:	f000 be2a 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800f1f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1f6:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800f1fa:	430b      	orrs	r3, r1
 800f1fc:	d153      	bne.n	800f2a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800f1fe:	4b1e      	ldr	r3, [pc, #120]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f204:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f208:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800f20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d104      	bne.n	800f21a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f210:	f7fd fe36 	bl	800ce80 <HAL_RCC_GetPCLK1Freq>
 800f214:	6378      	str	r0, [r7, #52]	; 0x34
 800f216:	f000 be16 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800f21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f220:	d104      	bne.n	800f22c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f222:	f7fd fd0b 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800f226:	6378      	str	r0, [r7, #52]	; 0x34
 800f228:	f000 be0d 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800f22c:	4b12      	ldr	r3, [pc, #72]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f238:	d107      	bne.n	800f24a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800f23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f240:	d103      	bne.n	800f24a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800f242:	4b0f      	ldr	r3, [pc, #60]	; (800f280 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800f244:	637b      	str	r3, [r7, #52]	; 0x34
 800f246:	f000 bdfe 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800f24a:	4b0b      	ldr	r3, [pc, #44]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f003 0320 	and.w	r3, r3, #32
 800f252:	2b20      	cmp	r3, #32
 800f254:	d123      	bne.n	800f29e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800f256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f25c:	d11f      	bne.n	800f29e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f25e:	4b06      	ldr	r3, [pc, #24]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f260:	689b      	ldr	r3, [r3, #8]
 800f262:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f266:	2b00      	cmp	r3, #0
 800f268:	d00c      	beq.n	800f284 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800f26a:	4b03      	ldr	r3, [pc, #12]	; (800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f26c:	689b      	ldr	r3, [r3, #8]
 800f26e:	0e1b      	lsrs	r3, r3, #24
 800f270:	f003 030f 	and.w	r3, r3, #15
 800f274:	e00d      	b.n	800f292 <HAL_RCCEx_GetPeriphCLKFreq+0xb3e>
 800f276:	bf00      	nop
 800f278:	46020c00 	.word	0x46020c00
 800f27c:	0802a828 	.word	0x0802a828
 800f280:	00f42400 	.word	0x00f42400
 800f284:	4ba0      	ldr	r3, [pc, #640]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f286:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f28a:	041b      	lsls	r3, r3, #16
 800f28c:	0e1b      	lsrs	r3, r3, #24
 800f28e:	f003 030f 	and.w	r3, r3, #15
 800f292:	4a9e      	ldr	r2, [pc, #632]	; (800f50c <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f298:	637b      	str	r3, [r7, #52]	; 0x34
 800f29a:	f000 bdd4 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	637b      	str	r3, [r7, #52]	; 0x34
 800f2a2:	f000 bdd0 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800f2a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2aa:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800f2ae:	430b      	orrs	r3, r1
 800f2b0:	d14c      	bne.n	800f34c <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800f2b2:	4b95      	ldr	r3, [pc, #596]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f2b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f2b8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f2bc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800f2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d104      	bne.n	800f2ce <HAL_RCCEx_GetPeriphCLKFreq+0xb7a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f2c4:	f7fd fddc 	bl	800ce80 <HAL_RCC_GetPCLK1Freq>
 800f2c8:	6378      	str	r0, [r7, #52]	; 0x34
 800f2ca:	f000 bdbc 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800f2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2d4:	d104      	bne.n	800f2e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f2d6:	f7fd fcb1 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800f2da:	6378      	str	r0, [r7, #52]	; 0x34
 800f2dc:	f000 bdb3 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800f2e0:	4b89      	ldr	r3, [pc, #548]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f2e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f2ec:	d107      	bne.n	800f2fe <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800f2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2f4:	d103      	bne.n	800f2fe <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
    {
      frequency = HSI_VALUE;
 800f2f6:	4b86      	ldr	r3, [pc, #536]	; (800f510 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f2f8:	637b      	str	r3, [r7, #52]	; 0x34
 800f2fa:	f000 bda4 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800f2fe:	4b82      	ldr	r3, [pc, #520]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f003 0320 	and.w	r3, r3, #32
 800f306:	2b20      	cmp	r3, #32
 800f308:	d11c      	bne.n	800f344 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
 800f30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f30c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f310:	d118      	bne.n	800f344 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f312:	4b7d      	ldr	r3, [pc, #500]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f314:	689b      	ldr	r3, [r3, #8]
 800f316:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d005      	beq.n	800f32a <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 800f31e:	4b7a      	ldr	r3, [pc, #488]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f320:	689b      	ldr	r3, [r3, #8]
 800f322:	0e1b      	lsrs	r3, r3, #24
 800f324:	f003 030f 	and.w	r3, r3, #15
 800f328:	e006      	b.n	800f338 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 800f32a:	4b77      	ldr	r3, [pc, #476]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f32c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f330:	041b      	lsls	r3, r3, #16
 800f332:	0e1b      	lsrs	r3, r3, #24
 800f334:	f003 030f 	and.w	r3, r3, #15
 800f338:	4a74      	ldr	r2, [pc, #464]	; (800f50c <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f33e:	637b      	str	r3, [r7, #52]	; 0x34
 800f340:	f000 bd81 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800f344:	2300      	movs	r3, #0
 800f346:	637b      	str	r3, [r7, #52]	; 0x34
 800f348:	f000 bd7d 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800f34c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f350:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800f354:	430b      	orrs	r3, r1
 800f356:	d158      	bne.n	800f40a <HAL_RCCEx_GetPeriphCLKFreq+0xcb6>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800f358:	4b6b      	ldr	r3, [pc, #428]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f35a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f35e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f362:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f366:	2bc0      	cmp	r3, #192	; 0xc0
 800f368:	d028      	beq.n	800f3bc <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 800f36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36c:	2bc0      	cmp	r3, #192	; 0xc0
 800f36e:	d848      	bhi.n	800f402 <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
 800f370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f372:	2b80      	cmp	r3, #128	; 0x80
 800f374:	d00e      	beq.n	800f394 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
 800f376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f378:	2b80      	cmp	r3, #128	; 0x80
 800f37a:	d842      	bhi.n	800f402 <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
 800f37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d003      	beq.n	800f38a <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 800f382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f384:	2b40      	cmp	r3, #64	; 0x40
 800f386:	d014      	beq.n	800f3b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
 800f388:	e03b      	b.n	800f402 <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800f38a:	f7fd fda1 	bl	800ced0 <HAL_RCC_GetPCLK3Freq>
 800f38e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f390:	f000 bd59 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f394:	4b5c      	ldr	r3, [pc, #368]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f39c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3a0:	d103      	bne.n	800f3aa <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
        {
          frequency = HSI_VALUE;
 800f3a2:	4b5b      	ldr	r3, [pc, #364]	; (800f510 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f3a4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f3a6:	f000 bd4e 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f3ae:	f000 bd4a 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800f3b2:	f7fd fc43 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800f3b6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f3b8:	f000 bd45 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f3bc:	4b52      	ldr	r3, [pc, #328]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f003 0320 	and.w	r3, r3, #32
 800f3c4:	2b20      	cmp	r3, #32
 800f3c6:	d118      	bne.n	800f3fa <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f3c8:	4b4f      	ldr	r3, [pc, #316]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d005      	beq.n	800f3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
 800f3d4:	4b4c      	ldr	r3, [pc, #304]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f3d6:	689b      	ldr	r3, [r3, #8]
 800f3d8:	0e1b      	lsrs	r3, r3, #24
 800f3da:	f003 030f 	and.w	r3, r3, #15
 800f3de:	e006      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800f3e0:	4b49      	ldr	r3, [pc, #292]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f3e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f3e6:	041b      	lsls	r3, r3, #16
 800f3e8:	0e1b      	lsrs	r3, r3, #24
 800f3ea:	f003 030f 	and.w	r3, r3, #15
 800f3ee:	4a47      	ldr	r2, [pc, #284]	; (800f50c <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f3f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3f4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f3f6:	f000 bd26 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f3fe:	f000 bd22 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      default:
      {
        frequency = 0U;
 800f402:	2300      	movs	r3, #0
 800f404:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f406:	f000 bd1e 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800f40a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f40e:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800f412:	430b      	orrs	r3, r1
 800f414:	d14c      	bne.n	800f4b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800f416:	4b3c      	ldr	r3, [pc, #240]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f41c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f420:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800f422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f424:	2b00      	cmp	r3, #0
 800f426:	d104      	bne.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f428:	f7fd fd2a 	bl	800ce80 <HAL_RCC_GetPCLK1Freq>
 800f42c:	6378      	str	r0, [r7, #52]	; 0x34
 800f42e:	f000 bd0a 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800f432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f438:	d104      	bne.n	800f444 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f43a:	f7fd fbff 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800f43e:	6378      	str	r0, [r7, #52]	; 0x34
 800f440:	f000 bd01 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800f444:	4b30      	ldr	r3, [pc, #192]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f44c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f450:	d107      	bne.n	800f462 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 800f452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f458:	d103      	bne.n	800f462 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
    {
      frequency = HSI_VALUE;
 800f45a:	4b2d      	ldr	r3, [pc, #180]	; (800f510 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f45c:	637b      	str	r3, [r7, #52]	; 0x34
 800f45e:	f000 bcf2 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800f462:	4b29      	ldr	r3, [pc, #164]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f003 0320 	and.w	r3, r3, #32
 800f46a:	2b20      	cmp	r3, #32
 800f46c:	d11c      	bne.n	800f4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800f46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f470:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f474:	d118      	bne.n	800f4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f476:	4b24      	ldr	r3, [pc, #144]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f478:	689b      	ldr	r3, [r3, #8]
 800f47a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d005      	beq.n	800f48e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800f482:	4b21      	ldr	r3, [pc, #132]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f484:	689b      	ldr	r3, [r3, #8]
 800f486:	0e1b      	lsrs	r3, r3, #24
 800f488:	f003 030f 	and.w	r3, r3, #15
 800f48c:	e006      	b.n	800f49c <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 800f48e:	4b1e      	ldr	r3, [pc, #120]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f490:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f494:	041b      	lsls	r3, r3, #16
 800f496:	0e1b      	lsrs	r3, r3, #24
 800f498:	f003 030f 	and.w	r3, r3, #15
 800f49c:	4a1b      	ldr	r2, [pc, #108]	; (800f50c <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f49e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4a2:	637b      	str	r3, [r7, #52]	; 0x34
 800f4a4:	f000 bccf 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	637b      	str	r3, [r7, #52]	; 0x34
 800f4ac:	f000 bccb 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800f4b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4b4:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800f4b8:	430b      	orrs	r3, r1
 800f4ba:	d152      	bne.n	800f562 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800f4bc:	4b12      	ldr	r3, [pc, #72]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f4be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f4c2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800f4c6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800f4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d104      	bne.n	800f4d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f4ce:	f7fd fcd7 	bl	800ce80 <HAL_RCC_GetPCLK1Freq>
 800f4d2:	6378      	str	r0, [r7, #52]	; 0x34
 800f4d4:	f000 bcb7 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800f4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f4de:	d104      	bne.n	800f4ea <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f4e0:	f7fd fbac 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800f4e4:	6378      	str	r0, [r7, #52]	; 0x34
 800f4e6:	f000 bcae 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800f4ea:	4b07      	ldr	r3, [pc, #28]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f4f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4f6:	d10d      	bne.n	800f514 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
 800f4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f4fe:	d109      	bne.n	800f514 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
    {
      frequency = HSI_VALUE;
 800f500:	4b03      	ldr	r3, [pc, #12]	; (800f510 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f502:	637b      	str	r3, [r7, #52]	; 0x34
 800f504:	f000 bc9f 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800f508:	46020c00 	.word	0x46020c00
 800f50c:	0802a828 	.word	0x0802a828
 800f510:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800f514:	4ba6      	ldr	r3, [pc, #664]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	f003 0320 	and.w	r3, r3, #32
 800f51c:	2b20      	cmp	r3, #32
 800f51e:	d11c      	bne.n	800f55a <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
 800f520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f522:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f526:	d118      	bne.n	800f55a <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f528:	4ba1      	ldr	r3, [pc, #644]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f530:	2b00      	cmp	r3, #0
 800f532:	d005      	beq.n	800f540 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800f534:	4b9e      	ldr	r3, [pc, #632]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f536:	689b      	ldr	r3, [r3, #8]
 800f538:	0e1b      	lsrs	r3, r3, #24
 800f53a:	f003 030f 	and.w	r3, r3, #15
 800f53e:	e006      	b.n	800f54e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
 800f540:	4b9b      	ldr	r3, [pc, #620]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f542:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f546:	041b      	lsls	r3, r3, #16
 800f548:	0e1b      	lsrs	r3, r3, #24
 800f54a:	f003 030f 	and.w	r3, r3, #15
 800f54e:	4a99      	ldr	r2, [pc, #612]	; (800f7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800f550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f554:	637b      	str	r3, [r7, #52]	; 0x34
 800f556:	f000 bc76 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800f55a:	2300      	movs	r3, #0
 800f55c:	637b      	str	r3, [r7, #52]	; 0x34
 800f55e:	f000 bc72 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800f562:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f566:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800f56a:	430b      	orrs	r3, r1
 800f56c:	d14c      	bne.n	800f608 <HAL_RCCEx_GetPeriphCLKFreq+0xeb4>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800f56e:	4b90      	ldr	r3, [pc, #576]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f570:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f574:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800f578:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800f57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d104      	bne.n	800f58a <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f580:	f7fd fc7e 	bl	800ce80 <HAL_RCC_GetPCLK1Freq>
 800f584:	6378      	str	r0, [r7, #52]	; 0x34
 800f586:	f000 bc5e 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800f58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f58c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f590:	d104      	bne.n	800f59c <HAL_RCCEx_GetPeriphCLKFreq+0xe48>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f592:	f7fd fb53 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800f596:	6378      	str	r0, [r7, #52]	; 0x34
 800f598:	f000 bc55 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800f59c:	4b84      	ldr	r3, [pc, #528]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f5a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5a8:	d107      	bne.n	800f5ba <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
 800f5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f5b0:	d103      	bne.n	800f5ba <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
    {
      frequency = HSI_VALUE;
 800f5b2:	4b81      	ldr	r3, [pc, #516]	; (800f7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 800f5b4:	637b      	str	r3, [r7, #52]	; 0x34
 800f5b6:	f000 bc46 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800f5ba:	4b7d      	ldr	r3, [pc, #500]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	f003 0320 	and.w	r3, r3, #32
 800f5c2:	2b20      	cmp	r3, #32
 800f5c4:	d11c      	bne.n	800f600 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 800f5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f5cc:	d118      	bne.n	800f600 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f5ce:	4b78      	ldr	r3, [pc, #480]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f5d0:	689b      	ldr	r3, [r3, #8]
 800f5d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d005      	beq.n	800f5e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe92>
 800f5da:	4b75      	ldr	r3, [pc, #468]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f5dc:	689b      	ldr	r3, [r3, #8]
 800f5de:	0e1b      	lsrs	r3, r3, #24
 800f5e0:	f003 030f 	and.w	r3, r3, #15
 800f5e4:	e006      	b.n	800f5f4 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 800f5e6:	4b72      	ldr	r3, [pc, #456]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f5e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f5ec:	041b      	lsls	r3, r3, #16
 800f5ee:	0e1b      	lsrs	r3, r3, #24
 800f5f0:	f003 030f 	and.w	r3, r3, #15
 800f5f4:	4a6f      	ldr	r2, [pc, #444]	; (800f7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800f5f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5fa:	637b      	str	r3, [r7, #52]	; 0x34
 800f5fc:	f000 bc23 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800f600:	2300      	movs	r3, #0
 800f602:	637b      	str	r3, [r7, #52]	; 0x34
 800f604:	f000 bc1f 	b.w	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800f608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f60c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800f610:	430b      	orrs	r3, r1
 800f612:	d164      	bne.n	800f6de <HAL_RCCEx_GetPeriphCLKFreq+0xf8a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800f614:	4b66      	ldr	r3, [pc, #408]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f61a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f61e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800f620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f622:	2b00      	cmp	r3, #0
 800f624:	d120      	bne.n	800f668 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f626:	4b62      	ldr	r3, [pc, #392]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f003 0320 	and.w	r3, r3, #32
 800f62e:	2b20      	cmp	r3, #32
 800f630:	d117      	bne.n	800f662 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f632:	4b5f      	ldr	r3, [pc, #380]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f634:	689b      	ldr	r3, [r3, #8]
 800f636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d005      	beq.n	800f64a <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
 800f63e:	4b5c      	ldr	r3, [pc, #368]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f640:	689b      	ldr	r3, [r3, #8]
 800f642:	0e1b      	lsrs	r3, r3, #24
 800f644:	f003 030f 	and.w	r3, r3, #15
 800f648:	e006      	b.n	800f658 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 800f64a:	4b59      	ldr	r3, [pc, #356]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f64c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f650:	041b      	lsls	r3, r3, #16
 800f652:	0e1b      	lsrs	r3, r3, #24
 800f654:	f003 030f 	and.w	r3, r3, #15
 800f658:	4a56      	ldr	r2, [pc, #344]	; (800f7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800f65a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f65e:	637b      	str	r3, [r7, #52]	; 0x34
 800f660:	e3f1      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 800f662:	2300      	movs	r3, #0
 800f664:	637b      	str	r3, [r7, #52]	; 0x34
 800f666:	e3ee      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800f668:	4b51      	ldr	r3, [pc, #324]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f66a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f66e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f672:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f676:	d112      	bne.n	800f69e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800f678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f67e:	d10e      	bne.n	800f69e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f680:	4b4b      	ldr	r3, [pc, #300]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f68a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f68e:	d102      	bne.n	800f696 <HAL_RCCEx_GetPeriphCLKFreq+0xf42>
      {
        frequency = LSI_VALUE / 128U;
 800f690:	23fa      	movs	r3, #250	; 0xfa
 800f692:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f694:	e3d7      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800f696:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f69a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f69c:	e3d3      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800f69e:	4b44      	ldr	r3, [pc, #272]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f6a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f6aa:	d106      	bne.n	800f6ba <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 800f6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6b2:	d102      	bne.n	800f6ba <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
    {
      frequency = HSI_VALUE;
 800f6b4:	4b40      	ldr	r3, [pc, #256]	; (800f7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 800f6b6:	637b      	str	r3, [r7, #52]	; 0x34
 800f6b8:	e3c5      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800f6ba:	4b3d      	ldr	r3, [pc, #244]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f6bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f6c0:	f003 0302 	and.w	r3, r3, #2
 800f6c4:	2b02      	cmp	r3, #2
 800f6c6:	d107      	bne.n	800f6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
 800f6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f6ce:	d103      	bne.n	800f6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
    {
      frequency = LSE_VALUE;
 800f6d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f6d4:	637b      	str	r3, [r7, #52]	; 0x34
 800f6d6:	e3b6      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	637b      	str	r3, [r7, #52]	; 0x34
 800f6dc:	e3b3      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800f6de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6e2:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800f6e6:	430b      	orrs	r3, r1
 800f6e8:	d16b      	bne.n	800f7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x106e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800f6ea:	4b31      	ldr	r3, [pc, #196]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f6ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f6f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f6f4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800f6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d120      	bne.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0xfea>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f6fc:	4b2c      	ldr	r3, [pc, #176]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	f003 0320 	and.w	r3, r3, #32
 800f704:	2b20      	cmp	r3, #32
 800f706:	d117      	bne.n	800f738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f708:	4b29      	ldr	r3, [pc, #164]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f70a:	689b      	ldr	r3, [r3, #8]
 800f70c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f710:	2b00      	cmp	r3, #0
 800f712:	d005      	beq.n	800f720 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800f714:	4b26      	ldr	r3, [pc, #152]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f716:	689b      	ldr	r3, [r3, #8]
 800f718:	0e1b      	lsrs	r3, r3, #24
 800f71a:	f003 030f 	and.w	r3, r3, #15
 800f71e:	e006      	b.n	800f72e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
 800f720:	4b23      	ldr	r3, [pc, #140]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f722:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f726:	041b      	lsls	r3, r3, #16
 800f728:	0e1b      	lsrs	r3, r3, #24
 800f72a:	f003 030f 	and.w	r3, r3, #15
 800f72e:	4a21      	ldr	r2, [pc, #132]	; (800f7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800f730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f734:	637b      	str	r3, [r7, #52]	; 0x34
 800f736:	e386      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 800f738:	2300      	movs	r3, #0
 800f73a:	637b      	str	r3, [r7, #52]	; 0x34
 800f73c:	e383      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800f73e:	4b1c      	ldr	r3, [pc, #112]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f74c:	d112      	bne.n	800f774 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
 800f74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f754:	d10e      	bne.n	800f774 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f756:	4b16      	ldr	r3, [pc, #88]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f75c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f764:	d102      	bne.n	800f76c <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
      {
        frequency = LSI_VALUE / 128U;
 800f766:	23fa      	movs	r3, #250	; 0xfa
 800f768:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f76a:	e36c      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800f76c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f770:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f772:	e368      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800f774:	4b0e      	ldr	r3, [pc, #56]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f77c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f780:	d106      	bne.n	800f790 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>
 800f782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f788:	d102      	bne.n	800f790 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>
    {
      frequency = HSI_VALUE;
 800f78a:	4b0b      	ldr	r3, [pc, #44]	; (800f7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 800f78c:	637b      	str	r3, [r7, #52]	; 0x34
 800f78e:	e35a      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800f790:	4b07      	ldr	r3, [pc, #28]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f796:	f003 0302 	and.w	r3, r3, #2
 800f79a:	2b02      	cmp	r3, #2
 800f79c:	d10e      	bne.n	800f7bc <HAL_RCCEx_GetPeriphCLKFreq+0x1068>
 800f79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f7a4:	d10a      	bne.n	800f7bc <HAL_RCCEx_GetPeriphCLKFreq+0x1068>
    {
      frequency = LSE_VALUE;
 800f7a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7aa:	637b      	str	r3, [r7, #52]	; 0x34
 800f7ac:	e34b      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800f7ae:	bf00      	nop
 800f7b0:	46020c00 	.word	0x46020c00
 800f7b4:	0802a828 	.word	0x0802a828
 800f7b8:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	637b      	str	r3, [r7, #52]	; 0x34
 800f7c0:	e341      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800f7c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7c6:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800f7ca:	430b      	orrs	r3, r1
 800f7cc:	d147      	bne.n	800f85e <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800f7ce:	4b9b      	ldr	r3, [pc, #620]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f7d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f7d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800f7d8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800f7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d103      	bne.n	800f7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f7e0:	f7fd fb4e 	bl	800ce80 <HAL_RCC_GetPCLK1Freq>
 800f7e4:	6378      	str	r0, [r7, #52]	; 0x34
 800f7e6:	e32e      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800f7e8:	4b94      	ldr	r3, [pc, #592]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f7ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f7ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f7f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f7f6:	d112      	bne.n	800f81e <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
 800f7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f7fe:	d10e      	bne.n	800f81e <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f800:	4b8e      	ldr	r3, [pc, #568]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f80a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f80e:	d102      	bne.n	800f816 <HAL_RCCEx_GetPeriphCLKFreq+0x10c2>
      {
        frequency = LSI_VALUE / 128U;
 800f810:	23fa      	movs	r3, #250	; 0xfa
 800f812:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f814:	e317      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800f816:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f81a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f81c:	e313      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800f81e:	4b87      	ldr	r3, [pc, #540]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f82a:	d106      	bne.n	800f83a <HAL_RCCEx_GetPeriphCLKFreq+0x10e6>
 800f82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f832:	d102      	bne.n	800f83a <HAL_RCCEx_GetPeriphCLKFreq+0x10e6>
    {
      frequency = HSI_VALUE;
 800f834:	4b82      	ldr	r3, [pc, #520]	; (800fa40 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f836:	637b      	str	r3, [r7, #52]	; 0x34
 800f838:	e305      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800f83a:	4b80      	ldr	r3, [pc, #512]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f83c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f840:	f003 0302 	and.w	r3, r3, #2
 800f844:	2b02      	cmp	r3, #2
 800f846:	d107      	bne.n	800f858 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
 800f848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800f84e:	d103      	bne.n	800f858 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
    {
      frequency = LSE_VALUE;
 800f850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f854:	637b      	str	r3, [r7, #52]	; 0x34
 800f856:	e2f6      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800f858:	2300      	movs	r3, #0
 800f85a:	637b      	str	r3, [r7, #52]	; 0x34
 800f85c:	e2f3      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800f85e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f862:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800f866:	430b      	orrs	r3, r1
 800f868:	d12d      	bne.n	800f8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800f86a:	4b74      	ldr	r3, [pc, #464]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f86c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f870:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800f874:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800f876:	4b71      	ldr	r3, [pc, #452]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f87e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f882:	d105      	bne.n	800f890 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800f884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f886:	2b00      	cmp	r3, #0
 800f888:	d102      	bne.n	800f890 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
    {
      frequency = HSE_VALUE;
 800f88a:	4b6d      	ldr	r3, [pc, #436]	; (800fa40 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f88c:	637b      	str	r3, [r7, #52]	; 0x34
 800f88e:	e2da      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800f890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f892:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f896:	d107      	bne.n	800f8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1154>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f89c:	4618      	mov	r0, r3
 800f89e:	f7fe fb21 	bl	800dee4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800f8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a4:	637b      	str	r3, [r7, #52]	; 0x34
 800f8a6:	e2ce      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800f8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f8ae:	d107      	bne.n	800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8b0:	f107 0318 	add.w	r3, r7, #24
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7fe fc7d 	bl	800e1b4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800f8ba:	69bb      	ldr	r3, [r7, #24]
 800f8bc:	637b      	str	r3, [r7, #52]	; 0x34
 800f8be:	e2c2      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	637b      	str	r3, [r7, #52]	; 0x34
 800f8c4:	e2bf      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800f8c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8ca:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800f8ce:	430b      	orrs	r3, r1
 800f8d0:	d156      	bne.n	800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800f8d2:	4b5a      	ldr	r3, [pc, #360]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f8d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800f8dc:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800f8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f8e4:	d028      	beq.n	800f938 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
 800f8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f8ec:	d845      	bhi.n	800f97a <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
 800f8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f8f4:	d013      	beq.n	800f91e <HAL_RCCEx_GetPeriphCLKFreq+0x11ca>
 800f8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f8fc:	d83d      	bhi.n	800f97a <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
 800f8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f900:	2b00      	cmp	r3, #0
 800f902:	d004      	beq.n	800f90e <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
 800f904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f90a:	d004      	beq.n	800f916 <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>
 800f90c:	e035      	b.n	800f97a <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800f90e:	f7fd facb 	bl	800cea8 <HAL_RCC_GetPCLK2Freq>
 800f912:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f914:	e297      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f916:	f7fd f991 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800f91a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f91c:	e293      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f91e:	4b47      	ldr	r3, [pc, #284]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f92a:	d102      	bne.n	800f932 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        {
          frequency = HSI_VALUE;
 800f92c:	4b44      	ldr	r3, [pc, #272]	; (800fa40 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f92e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f930:	e289      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f932:	2300      	movs	r3, #0
 800f934:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f936:	e286      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f938:	4b40      	ldr	r3, [pc, #256]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f003 0320 	and.w	r3, r3, #32
 800f940:	2b20      	cmp	r3, #32
 800f942:	d117      	bne.n	800f974 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f944:	4b3d      	ldr	r3, [pc, #244]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f946:	689b      	ldr	r3, [r3, #8]
 800f948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d005      	beq.n	800f95c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800f950:	4b3a      	ldr	r3, [pc, #232]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f952:	689b      	ldr	r3, [r3, #8]
 800f954:	0e1b      	lsrs	r3, r3, #24
 800f956:	f003 030f 	and.w	r3, r3, #15
 800f95a:	e006      	b.n	800f96a <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800f95c:	4b37      	ldr	r3, [pc, #220]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f95e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f962:	041b      	lsls	r3, r3, #16
 800f964:	0e1b      	lsrs	r3, r3, #24
 800f966:	f003 030f 	and.w	r3, r3, #15
 800f96a:	4a36      	ldr	r2, [pc, #216]	; (800fa44 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800f96c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f970:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f972:	e268      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f974:	2300      	movs	r3, #0
 800f976:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f978:	e265      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800f97a:	2300      	movs	r3, #0
 800f97c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f97e:	e262      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800f980:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f984:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800f988:	430b      	orrs	r3, r1
 800f98a:	d15d      	bne.n	800fa48 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800f98c:	4b2b      	ldr	r3, [pc, #172]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f98e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f992:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f996:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800f998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f99e:	d028      	beq.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x129e>
 800f9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f9a6:	d845      	bhi.n	800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
 800f9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9ae:	d013      	beq.n	800f9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
 800f9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9b6:	d83d      	bhi.n	800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
 800f9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d004      	beq.n	800f9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>
 800f9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9c4:	d004      	beq.n	800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>
 800f9c6:	e035      	b.n	800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800f9c8:	f7fd fa5a 	bl	800ce80 <HAL_RCC_GetPCLK1Freq>
 800f9cc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f9ce:	e23a      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f9d0:	f7fd f934 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800f9d4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f9d6:	e236      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f9d8:	4b18      	ldr	r3, [pc, #96]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f9e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9e4:	d102      	bne.n	800f9ec <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
        {
          frequency = HSI_VALUE;
 800f9e6:	4b16      	ldr	r3, [pc, #88]	; (800fa40 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f9e8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f9ea:	e22c      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f9f0:	e229      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f9f2:	4b12      	ldr	r3, [pc, #72]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f003 0320 	and.w	r3, r3, #32
 800f9fa:	2b20      	cmp	r3, #32
 800f9fc:	d117      	bne.n	800fa2e <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f9fe:	4b0f      	ldr	r3, [pc, #60]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fa00:	689b      	ldr	r3, [r3, #8]
 800fa02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d005      	beq.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 800fa0a:	4b0c      	ldr	r3, [pc, #48]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fa0c:	689b      	ldr	r3, [r3, #8]
 800fa0e:	0e1b      	lsrs	r3, r3, #24
 800fa10:	f003 030f 	and.w	r3, r3, #15
 800fa14:	e006      	b.n	800fa24 <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
 800fa16:	4b09      	ldr	r3, [pc, #36]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fa18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fa1c:	041b      	lsls	r3, r3, #16
 800fa1e:	0e1b      	lsrs	r3, r3, #24
 800fa20:	f003 030f 	and.w	r3, r3, #15
 800fa24:	4a07      	ldr	r2, [pc, #28]	; (800fa44 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800fa26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa2a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fa2c:	e20b      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa32:	e208      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fa34:	2300      	movs	r3, #0
 800fa36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa38:	e205      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800fa3a:	bf00      	nop
 800fa3c:	46020c00 	.word	0x46020c00
 800fa40:	00f42400 	.word	0x00f42400
 800fa44:	0802a828 	.word	0x0802a828
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800fa48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa4c:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800fa50:	430b      	orrs	r3, r1
 800fa52:	d176      	bne.n	800fb42 <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800fa54:	4ba6      	ldr	r3, [pc, #664]	; (800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fa56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fa5a:	f003 0318 	and.w	r3, r3, #24
 800fa5e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800fa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa62:	2b18      	cmp	r3, #24
 800fa64:	d86a      	bhi.n	800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 800fa66:	a201      	add	r2, pc, #4	; (adr r2, 800fa6c <HAL_RCCEx_GetPeriphCLKFreq+0x1318>)
 800fa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa6c:	0800fad1 	.word	0x0800fad1
 800fa70:	0800fb3d 	.word	0x0800fb3d
 800fa74:	0800fb3d 	.word	0x0800fb3d
 800fa78:	0800fb3d 	.word	0x0800fb3d
 800fa7c:	0800fb3d 	.word	0x0800fb3d
 800fa80:	0800fb3d 	.word	0x0800fb3d
 800fa84:	0800fb3d 	.word	0x0800fb3d
 800fa88:	0800fb3d 	.word	0x0800fb3d
 800fa8c:	0800fad9 	.word	0x0800fad9
 800fa90:	0800fb3d 	.word	0x0800fb3d
 800fa94:	0800fb3d 	.word	0x0800fb3d
 800fa98:	0800fb3d 	.word	0x0800fb3d
 800fa9c:	0800fb3d 	.word	0x0800fb3d
 800faa0:	0800fb3d 	.word	0x0800fb3d
 800faa4:	0800fb3d 	.word	0x0800fb3d
 800faa8:	0800fb3d 	.word	0x0800fb3d
 800faac:	0800fae1 	.word	0x0800fae1
 800fab0:	0800fb3d 	.word	0x0800fb3d
 800fab4:	0800fb3d 	.word	0x0800fb3d
 800fab8:	0800fb3d 	.word	0x0800fb3d
 800fabc:	0800fb3d 	.word	0x0800fb3d
 800fac0:	0800fb3d 	.word	0x0800fb3d
 800fac4:	0800fb3d 	.word	0x0800fb3d
 800fac8:	0800fb3d 	.word	0x0800fb3d
 800facc:	0800fafb 	.word	0x0800fafb
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800fad0:	f7fd f9fe 	bl	800ced0 <HAL_RCC_GetPCLK3Freq>
 800fad4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fad6:	e1b6      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fad8:	f7fd f8b0 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800fadc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fade:	e1b2      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fae0:	4b83      	ldr	r3, [pc, #524]	; (800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800faec:	d102      	bne.n	800faf4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 800faee:	4b81      	ldr	r3, [pc, #516]	; (800fcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x15a0>)
 800faf0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800faf2:	e1a8      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800faf4:	2300      	movs	r3, #0
 800faf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800faf8:	e1a5      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fafa:	4b7d      	ldr	r3, [pc, #500]	; (800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f003 0320 	and.w	r3, r3, #32
 800fb02:	2b20      	cmp	r3, #32
 800fb04:	d117      	bne.n	800fb36 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fb06:	4b7a      	ldr	r3, [pc, #488]	; (800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fb08:	689b      	ldr	r3, [r3, #8]
 800fb0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d005      	beq.n	800fb1e <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 800fb12:	4b77      	ldr	r3, [pc, #476]	; (800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fb14:	689b      	ldr	r3, [r3, #8]
 800fb16:	0e1b      	lsrs	r3, r3, #24
 800fb18:	f003 030f 	and.w	r3, r3, #15
 800fb1c:	e006      	b.n	800fb2c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 800fb1e:	4b74      	ldr	r3, [pc, #464]	; (800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fb20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fb24:	041b      	lsls	r3, r3, #16
 800fb26:	0e1b      	lsrs	r3, r3, #24
 800fb28:	f003 030f 	and.w	r3, r3, #15
 800fb2c:	4a72      	ldr	r2, [pc, #456]	; (800fcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x15a4>)
 800fb2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb32:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fb34:	e187      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fb36:	2300      	movs	r3, #0
 800fb38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb3a:	e184      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb40:	e181      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800fb42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb46:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800fb4a:	430b      	orrs	r3, r1
 800fb4c:	d155      	bne.n	800fbfa <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800fb4e:	4b68      	ldr	r3, [pc, #416]	; (800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fb50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fb54:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800fb58:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800fb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fb60:	d013      	beq.n	800fb8a <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 800fb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fb68:	d844      	bhi.n	800fbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 800fb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fb70:	d013      	beq.n	800fb9a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 800fb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fb78:	d83c      	bhi.n	800fbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 800fb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d014      	beq.n	800fbaa <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 800fb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb86:	d014      	beq.n	800fbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 800fb88:	e034      	b.n	800fbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb8a:	f107 0318 	add.w	r3, r7, #24
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7fe fb10 	bl	800e1b4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800fb94:	69fb      	ldr	r3, [r7, #28]
 800fb96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb98:	e155      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fb9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7fe f9a0 	bl	800dee4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800fba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fba6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fba8:	e14d      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fbaa:	f7fd f847 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800fbae:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fbb0:	e149      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fbb2:	4b4f      	ldr	r3, [pc, #316]	; (800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	f003 0320 	and.w	r3, r3, #32
 800fbba:	2b20      	cmp	r3, #32
 800fbbc:	d117      	bne.n	800fbee <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fbbe:	4b4c      	ldr	r3, [pc, #304]	; (800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fbc0:	689b      	ldr	r3, [r3, #8]
 800fbc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d005      	beq.n	800fbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 800fbca:	4b49      	ldr	r3, [pc, #292]	; (800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fbcc:	689b      	ldr	r3, [r3, #8]
 800fbce:	0e1b      	lsrs	r3, r3, #24
 800fbd0:	f003 030f 	and.w	r3, r3, #15
 800fbd4:	e006      	b.n	800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 800fbd6:	4b46      	ldr	r3, [pc, #280]	; (800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fbd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fbdc:	041b      	lsls	r3, r3, #16
 800fbde:	0e1b      	lsrs	r3, r3, #24
 800fbe0:	f003 030f 	and.w	r3, r3, #15
 800fbe4:	4a44      	ldr	r2, [pc, #272]	; (800fcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x15a4>)
 800fbe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbea:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fbec:	e12b      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fbf2:	e128      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fbf8:	e125      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800fbfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbfe:	1e59      	subs	r1, r3, #1
 800fc00:	ea52 0301 	orrs.w	r3, r2, r1
 800fc04:	d13c      	bne.n	800fc80 <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800fc06:	4b3a      	ldr	r3, [pc, #232]	; (800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fc08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fc0c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800fc10:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800fc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800fc18:	d027      	beq.n	800fc6a <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800fc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800fc20:	d82b      	bhi.n	800fc7a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 800fc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fc28:	d017      	beq.n	800fc5a <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 800fc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fc30:	d823      	bhi.n	800fc7a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 800fc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d004      	beq.n	800fc42 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 800fc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fc3e:	d004      	beq.n	800fc4a <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 800fc40:	e01b      	b.n	800fc7a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fc42:	f7fc fffb 	bl	800cc3c <HAL_RCC_GetSysClockFreq>
 800fc46:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fc48:	e0fd      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fc4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f7fe f948 	bl	800dee4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800fc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fc58:	e0f5      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc5a:	f107 0318 	add.w	r3, r7, #24
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7fe faa8 	bl	800e1b4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800fc64:	69fb      	ldr	r3, [r7, #28]
 800fc66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fc68:	e0ed      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc6a:	f107 030c 	add.w	r3, r7, #12
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7fe fc08 	bl	800e484 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fc78:	e0e5      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fc7e:	e0e2      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800fc80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc84:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800fc88:	430b      	orrs	r3, r1
 800fc8a:	d137      	bne.n	800fcfc <HAL_RCCEx_GetPeriphCLKFreq+0x15a8>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800fc8c:	4b18      	ldr	r3, [pc, #96]	; (800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fc8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fc92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fc96:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800fc98:	4b15      	ldr	r3, [pc, #84]	; (800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fc9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fc9e:	f003 0302 	and.w	r3, r3, #2
 800fca2:	2b02      	cmp	r3, #2
 800fca4:	d106      	bne.n	800fcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 800fca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d103      	bne.n	800fcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 800fcac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fcb0:	637b      	str	r3, [r7, #52]	; 0x34
 800fcb2:	e0c8      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800fcb4:	4b0e      	ldr	r3, [pc, #56]	; (800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fcb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fcba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fcbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fcc2:	d112      	bne.n	800fcea <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 800fcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fcca:	d10e      	bne.n	800fcea <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fccc:	4b08      	ldr	r3, [pc, #32]	; (800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fcce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fcd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fcd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fcda:	d102      	bne.n	800fce2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 800fcdc:	23fa      	movs	r3, #250	; 0xfa
 800fcde:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fce0:	e0b1      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800fce2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fce6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fce8:	e0ad      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800fcea:	2300      	movs	r3, #0
 800fcec:	637b      	str	r3, [r7, #52]	; 0x34
 800fcee:	e0aa      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800fcf0:	46020c00 	.word	0x46020c00
 800fcf4:	00f42400 	.word	0x00f42400
 800fcf8:	0802a828 	.word	0x0802a828
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800fcfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd00:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800fd04:	430b      	orrs	r3, r1
 800fd06:	d131      	bne.n	800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800fd08:	4b51      	ldr	r3, [pc, #324]	; (800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fd0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fd0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800fd12:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800fd14:	4b4e      	ldr	r3, [pc, #312]	; (800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fd1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fd20:	d105      	bne.n	800fd2e <HAL_RCCEx_GetPeriphCLKFreq+0x15da>
 800fd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d102      	bne.n	800fd2e <HAL_RCCEx_GetPeriphCLKFreq+0x15da>
    {
      frequency = HSI48_VALUE;
 800fd28:	4b4a      	ldr	r3, [pc, #296]	; (800fe54 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800fd2a:	637b      	str	r3, [r7, #52]	; 0x34
 800fd2c:	e08b      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800fd2e:	4b48      	ldr	r3, [pc, #288]	; (800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fd36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fd3a:	d106      	bne.n	800fd4a <HAL_RCCEx_GetPeriphCLKFreq+0x15f6>
 800fd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd42:	d102      	bne.n	800fd4a <HAL_RCCEx_GetPeriphCLKFreq+0x15f6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800fd44:	4b44      	ldr	r3, [pc, #272]	; (800fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800fd46:	637b      	str	r3, [r7, #52]	; 0x34
 800fd48:	e07d      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800fd4a:	4b41      	ldr	r3, [pc, #260]	; (800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fd52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd56:	d106      	bne.n	800fd66 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
 800fd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fd5e:	d102      	bne.n	800fd66 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
    {
      frequency = HSI_VALUE;
 800fd60:	4b3e      	ldr	r3, [pc, #248]	; (800fe5c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800fd62:	637b      	str	r3, [r7, #52]	; 0x34
 800fd64:	e06f      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800fd66:	2300      	movs	r3, #0
 800fd68:	637b      	str	r3, [r7, #52]	; 0x34
 800fd6a:	e06c      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800fd6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd70:	1e99      	subs	r1, r3, #2
 800fd72:	ea52 0301 	orrs.w	r3, r2, r1
 800fd76:	d120      	bne.n	800fdba <HAL_RCCEx_GetPeriphCLKFreq+0x1666>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800fd78:	4b35      	ldr	r3, [pc, #212]	; (800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fd7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fd7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fd82:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800fd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d004      	beq.n	800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x1640>
 800fd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fd90:	d008      	beq.n	800fda4 <HAL_RCCEx_GetPeriphCLKFreq+0x1650>
 800fd92:	e00f      	b.n	800fdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1660>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd94:	f107 030c 	add.w	r3, r7, #12
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7fe fb73 	bl	800e484 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fda2:	e050      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fda4:	f107 0318 	add.w	r3, r7, #24
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7fe fa03 	bl	800e1b4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800fdae:	6a3b      	ldr	r3, [r7, #32]
 800fdb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fdb2:	e048      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fdb8:	e045      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800fdba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdbe:	f1a3 0108 	sub.w	r1, r3, #8
 800fdc2:	ea52 0301 	orrs.w	r3, r2, r1
 800fdc6:	d13c      	bne.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0x16ee>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800fdc8:	4b21      	ldr	r3, [pc, #132]	; (800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fdca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fdce:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800fdd2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800fdd4:	4b1e      	ldr	r3, [pc, #120]	; (800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fde0:	d105      	bne.n	800fdee <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
 800fde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d102      	bne.n	800fdee <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      frequency = HSE_VALUE;
 800fde8:	4b1c      	ldr	r3, [pc, #112]	; (800fe5c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800fdea:	637b      	str	r3, [r7, #52]	; 0x34
 800fdec:	e02b      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800fdee:	4b18      	ldr	r3, [pc, #96]	; (800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fdf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fdfa:	d106      	bne.n	800fe0a <HAL_RCCEx_GetPeriphCLKFreq+0x16b6>
 800fdfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe02:	d102      	bne.n	800fe0a <HAL_RCCEx_GetPeriphCLKFreq+0x16b6>
    {
      frequency = HSE_VALUE >> 1U ;
 800fe04:	4b16      	ldr	r3, [pc, #88]	; (800fe60 <HAL_RCCEx_GetPeriphCLKFreq+0x170c>)
 800fe06:	637b      	str	r3, [r7, #52]	; 0x34
 800fe08:	e01d      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800fe0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe10:	d107      	bne.n	800fe22 <HAL_RCCEx_GetPeriphCLKFreq+0x16ce>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fe12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7fe f864 	bl	800dee4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800fe1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe1e:	637b      	str	r3, [r7, #52]	; 0x34
 800fe20:	e011      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800fe22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe24:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800fe28:	d108      	bne.n	800fe3c <HAL_RCCEx_GetPeriphCLKFreq+0x16e8>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fe2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f7fe f858 	bl	800dee4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800fe34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe36:	085b      	lsrs	r3, r3, #1
 800fe38:	637b      	str	r3, [r7, #52]	; 0x34
 800fe3a:	e004      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	637b      	str	r3, [r7, #52]	; 0x34
 800fe40:	e001      	b.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800fe42:	2300      	movs	r3, #0
 800fe44:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800fe46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3738      	adds	r7, #56	; 0x38
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}
 800fe50:	46020c00 	.word	0x46020c00
 800fe54:	02dc6c00 	.word	0x02dc6c00
 800fe58:	016e3600 	.word	0x016e3600
 800fe5c:	00f42400 	.word	0x00f42400
 800fe60:	007a1200 	.word	0x007a1200

0800fe64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b084      	sub	sp, #16
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800fe6c:	4b47      	ldr	r3, [pc, #284]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	4a46      	ldr	r2, [pc, #280]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800fe72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fe76:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fe78:	f7f7 fa96 	bl	80073a8 <HAL_GetTick>
 800fe7c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fe7e:	e008      	b.n	800fe92 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fe80:	f7f7 fa92 	bl	80073a8 <HAL_GetTick>
 800fe84:	4602      	mov	r2, r0
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	1ad3      	subs	r3, r2, r3
 800fe8a:	2b02      	cmp	r3, #2
 800fe8c:	d901      	bls.n	800fe92 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800fe8e:	2303      	movs	r3, #3
 800fe90:	e077      	b.n	800ff82 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fe92:	4b3e      	ldr	r3, [pc, #248]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d1f0      	bne.n	800fe80 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800fe9e:	4b3b      	ldr	r3, [pc, #236]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800fea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fea2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800fea6:	f023 0303 	bic.w	r3, r3, #3
 800feaa:	687a      	ldr	r2, [r7, #4]
 800feac:	6811      	ldr	r1, [r2, #0]
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	6852      	ldr	r2, [r2, #4]
 800feb2:	3a01      	subs	r2, #1
 800feb4:	0212      	lsls	r2, r2, #8
 800feb6:	430a      	orrs	r2, r1
 800feb8:	4934      	ldr	r1, [pc, #208]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800feba:	4313      	orrs	r3, r2
 800febc:	62cb      	str	r3, [r1, #44]	; 0x2c
 800febe:	4b33      	ldr	r3, [pc, #204]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800fec0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fec2:	4b33      	ldr	r3, [pc, #204]	; (800ff90 <RCCEx_PLL2_Config+0x12c>)
 800fec4:	4013      	ands	r3, r2
 800fec6:	687a      	ldr	r2, [r7, #4]
 800fec8:	6892      	ldr	r2, [r2, #8]
 800feca:	3a01      	subs	r2, #1
 800fecc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800fed0:	687a      	ldr	r2, [r7, #4]
 800fed2:	68d2      	ldr	r2, [r2, #12]
 800fed4:	3a01      	subs	r2, #1
 800fed6:	0252      	lsls	r2, r2, #9
 800fed8:	b292      	uxth	r2, r2
 800feda:	4311      	orrs	r1, r2
 800fedc:	687a      	ldr	r2, [r7, #4]
 800fede:	6912      	ldr	r2, [r2, #16]
 800fee0:	3a01      	subs	r2, #1
 800fee2:	0412      	lsls	r2, r2, #16
 800fee4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800fee8:	4311      	orrs	r1, r2
 800feea:	687a      	ldr	r2, [r7, #4]
 800feec:	6952      	ldr	r2, [r2, #20]
 800feee:	3a01      	subs	r2, #1
 800fef0:	0612      	lsls	r2, r2, #24
 800fef2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800fef6:	430a      	orrs	r2, r1
 800fef8:	4924      	ldr	r1, [pc, #144]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800fefa:	4313      	orrs	r3, r2
 800fefc:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800fefe:	4b23      	ldr	r3, [pc, #140]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800ff00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff02:	f023 020c 	bic.w	r2, r3, #12
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	699b      	ldr	r3, [r3, #24]
 800ff0a:	4920      	ldr	r1, [pc, #128]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800ff0c:	4313      	orrs	r3, r2
 800ff0e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800ff10:	4b1e      	ldr	r3, [pc, #120]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800ff12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6a1b      	ldr	r3, [r3, #32]
 800ff18:	491c      	ldr	r1, [pc, #112]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800ff1a:	4313      	orrs	r3, r2
 800ff1c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800ff1e:	4b1b      	ldr	r3, [pc, #108]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800ff20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff22:	4a1a      	ldr	r2, [pc, #104]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800ff24:	f023 0310 	bic.w	r3, r3, #16
 800ff28:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ff2a:	4b18      	ldr	r3, [pc, #96]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800ff2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ff32:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ff36:	687a      	ldr	r2, [r7, #4]
 800ff38:	69d2      	ldr	r2, [r2, #28]
 800ff3a:	00d2      	lsls	r2, r2, #3
 800ff3c:	4913      	ldr	r1, [pc, #76]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800ff3e:	4313      	orrs	r3, r2
 800ff40:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800ff42:	4b12      	ldr	r3, [pc, #72]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800ff44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff46:	4a11      	ldr	r2, [pc, #68]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800ff48:	f043 0310 	orr.w	r3, r3, #16
 800ff4c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800ff4e:	4b0f      	ldr	r3, [pc, #60]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	4a0e      	ldr	r2, [pc, #56]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800ff54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ff58:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ff5a:	f7f7 fa25 	bl	80073a8 <HAL_GetTick>
 800ff5e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ff60:	e008      	b.n	800ff74 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ff62:	f7f7 fa21 	bl	80073a8 <HAL_GetTick>
 800ff66:	4602      	mov	r2, r0
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	1ad3      	subs	r3, r2, r3
 800ff6c:	2b02      	cmp	r3, #2
 800ff6e:	d901      	bls.n	800ff74 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800ff70:	2303      	movs	r3, #3
 800ff72:	e006      	b.n	800ff82 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ff74:	4b05      	ldr	r3, [pc, #20]	; (800ff8c <RCCEx_PLL2_Config+0x128>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d0f0      	beq.n	800ff62 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800ff80:	2300      	movs	r3, #0

}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3710      	adds	r7, #16
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	46020c00 	.word	0x46020c00
 800ff90:	80800000 	.word	0x80800000

0800ff94 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800ff9c:	4b47      	ldr	r3, [pc, #284]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	4a46      	ldr	r2, [pc, #280]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 800ffa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ffa6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ffa8:	f7f7 f9fe 	bl	80073a8 <HAL_GetTick>
 800ffac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ffae:	e008      	b.n	800ffc2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ffb0:	f7f7 f9fa 	bl	80073a8 <HAL_GetTick>
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	1ad3      	subs	r3, r2, r3
 800ffba:	2b02      	cmp	r3, #2
 800ffbc:	d901      	bls.n	800ffc2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ffbe:	2303      	movs	r3, #3
 800ffc0:	e077      	b.n	80100b2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ffc2:	4b3e      	ldr	r3, [pc, #248]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d1f0      	bne.n	800ffb0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ffce:	4b3b      	ldr	r3, [pc, #236]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 800ffd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ffd6:	f023 0303 	bic.w	r3, r3, #3
 800ffda:	687a      	ldr	r2, [r7, #4]
 800ffdc:	6811      	ldr	r1, [r2, #0]
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	6852      	ldr	r2, [r2, #4]
 800ffe2:	3a01      	subs	r2, #1
 800ffe4:	0212      	lsls	r2, r2, #8
 800ffe6:	430a      	orrs	r2, r1
 800ffe8:	4934      	ldr	r1, [pc, #208]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 800ffea:	4313      	orrs	r3, r2
 800ffec:	630b      	str	r3, [r1, #48]	; 0x30
 800ffee:	4b33      	ldr	r3, [pc, #204]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 800fff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fff2:	4b33      	ldr	r3, [pc, #204]	; (80100c0 <RCCEx_PLL3_Config+0x12c>)
 800fff4:	4013      	ands	r3, r2
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	6892      	ldr	r2, [r2, #8]
 800fffa:	3a01      	subs	r2, #1
 800fffc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	68d2      	ldr	r2, [r2, #12]
 8010004:	3a01      	subs	r2, #1
 8010006:	0252      	lsls	r2, r2, #9
 8010008:	b292      	uxth	r2, r2
 801000a:	4311      	orrs	r1, r2
 801000c:	687a      	ldr	r2, [r7, #4]
 801000e:	6912      	ldr	r2, [r2, #16]
 8010010:	3a01      	subs	r2, #1
 8010012:	0412      	lsls	r2, r2, #16
 8010014:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8010018:	4311      	orrs	r1, r2
 801001a:	687a      	ldr	r2, [r7, #4]
 801001c:	6952      	ldr	r2, [r2, #20]
 801001e:	3a01      	subs	r2, #1
 8010020:	0612      	lsls	r2, r2, #24
 8010022:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8010026:	430a      	orrs	r2, r1
 8010028:	4924      	ldr	r1, [pc, #144]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 801002a:	4313      	orrs	r3, r2
 801002c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 801002e:	4b23      	ldr	r3, [pc, #140]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 8010030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010032:	f023 020c 	bic.w	r2, r3, #12
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	699b      	ldr	r3, [r3, #24]
 801003a:	4920      	ldr	r1, [pc, #128]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 801003c:	4313      	orrs	r3, r2
 801003e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8010040:	4b1e      	ldr	r3, [pc, #120]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 8010042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6a1b      	ldr	r3, [r3, #32]
 8010048:	491c      	ldr	r1, [pc, #112]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 801004a:	4313      	orrs	r3, r2
 801004c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 801004e:	4b1b      	ldr	r3, [pc, #108]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 8010050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010052:	4a1a      	ldr	r2, [pc, #104]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 8010054:	f023 0310 	bic.w	r3, r3, #16
 8010058:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801005a:	4b18      	ldr	r3, [pc, #96]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 801005c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801005e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010062:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8010066:	687a      	ldr	r2, [r7, #4]
 8010068:	69d2      	ldr	r2, [r2, #28]
 801006a:	00d2      	lsls	r2, r2, #3
 801006c:	4913      	ldr	r1, [pc, #76]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 801006e:	4313      	orrs	r3, r2
 8010070:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8010072:	4b12      	ldr	r3, [pc, #72]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 8010074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010076:	4a11      	ldr	r2, [pc, #68]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 8010078:	f043 0310 	orr.w	r3, r3, #16
 801007c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 801007e:	4b0f      	ldr	r3, [pc, #60]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	4a0e      	ldr	r2, [pc, #56]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 8010084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010088:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801008a:	f7f7 f98d 	bl	80073a8 <HAL_GetTick>
 801008e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010090:	e008      	b.n	80100a4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010092:	f7f7 f989 	bl	80073a8 <HAL_GetTick>
 8010096:	4602      	mov	r2, r0
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	1ad3      	subs	r3, r2, r3
 801009c:	2b02      	cmp	r3, #2
 801009e:	d901      	bls.n	80100a4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80100a0:	2303      	movs	r3, #3
 80100a2:	e006      	b.n	80100b2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80100a4:	4b05      	ldr	r3, [pc, #20]	; (80100bc <RCCEx_PLL3_Config+0x128>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d0f0      	beq.n	8010092 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80100b0:	2300      	movs	r3, #0
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	3710      	adds	r7, #16
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}
 80100ba:	bf00      	nop
 80100bc:	46020c00 	.word	0x46020c00
 80100c0:	80800000 	.word	0x80800000

080100c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b082      	sub	sp, #8
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d101      	bne.n	80100d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80100d2:	2301      	movs	r3, #1
 80100d4:	e049      	b.n	801016a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100dc:	b2db      	uxtb	r3, r3
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d106      	bne.n	80100f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2200      	movs	r2, #0
 80100e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f7f1 fb56 	bl	800179c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2202      	movs	r2, #2
 80100f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681a      	ldr	r2, [r3, #0]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	3304      	adds	r3, #4
 8010100:	4619      	mov	r1, r3
 8010102:	4610      	mov	r0, r2
 8010104:	f000 fe48 	bl	8010d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2201      	movs	r2, #1
 801010c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2201      	movs	r2, #1
 8010114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2201      	movs	r2, #1
 801011c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2201      	movs	r2, #1
 8010124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2201      	movs	r2, #1
 801012c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2201      	movs	r2, #1
 8010134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2201      	movs	r2, #1
 801013c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2201      	movs	r2, #1
 8010144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2201      	movs	r2, #1
 801014c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2201      	movs	r2, #1
 8010154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2201      	movs	r2, #1
 801015c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2201      	movs	r2, #1
 8010164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010168:	2300      	movs	r3, #0
}
 801016a:	4618      	mov	r0, r3
 801016c:	3708      	adds	r7, #8
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}
	...

08010174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010174:	b480      	push	{r7}
 8010176:	b085      	sub	sp, #20
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010182:	b2db      	uxtb	r3, r3
 8010184:	2b01      	cmp	r3, #1
 8010186:	d001      	beq.n	801018c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010188:	2301      	movs	r3, #1
 801018a:	e072      	b.n	8010272 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2202      	movs	r2, #2
 8010190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	68da      	ldr	r2, [r3, #12]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	f042 0201 	orr.w	r2, r2, #1
 80101a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	4a35      	ldr	r2, [pc, #212]	; (8010280 <HAL_TIM_Base_Start_IT+0x10c>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d040      	beq.n	8010230 <HAL_TIM_Base_Start_IT+0xbc>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	4a34      	ldr	r2, [pc, #208]	; (8010284 <HAL_TIM_Base_Start_IT+0x110>)
 80101b4:	4293      	cmp	r3, r2
 80101b6:	d03b      	beq.n	8010230 <HAL_TIM_Base_Start_IT+0xbc>
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101c0:	d036      	beq.n	8010230 <HAL_TIM_Base_Start_IT+0xbc>
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80101ca:	d031      	beq.n	8010230 <HAL_TIM_Base_Start_IT+0xbc>
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	4a2d      	ldr	r2, [pc, #180]	; (8010288 <HAL_TIM_Base_Start_IT+0x114>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d02c      	beq.n	8010230 <HAL_TIM_Base_Start_IT+0xbc>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	4a2c      	ldr	r2, [pc, #176]	; (801028c <HAL_TIM_Base_Start_IT+0x118>)
 80101dc:	4293      	cmp	r3, r2
 80101de:	d027      	beq.n	8010230 <HAL_TIM_Base_Start_IT+0xbc>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	4a2a      	ldr	r2, [pc, #168]	; (8010290 <HAL_TIM_Base_Start_IT+0x11c>)
 80101e6:	4293      	cmp	r3, r2
 80101e8:	d022      	beq.n	8010230 <HAL_TIM_Base_Start_IT+0xbc>
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	4a29      	ldr	r2, [pc, #164]	; (8010294 <HAL_TIM_Base_Start_IT+0x120>)
 80101f0:	4293      	cmp	r3, r2
 80101f2:	d01d      	beq.n	8010230 <HAL_TIM_Base_Start_IT+0xbc>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	4a27      	ldr	r2, [pc, #156]	; (8010298 <HAL_TIM_Base_Start_IT+0x124>)
 80101fa:	4293      	cmp	r3, r2
 80101fc:	d018      	beq.n	8010230 <HAL_TIM_Base_Start_IT+0xbc>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	4a26      	ldr	r2, [pc, #152]	; (801029c <HAL_TIM_Base_Start_IT+0x128>)
 8010204:	4293      	cmp	r3, r2
 8010206:	d013      	beq.n	8010230 <HAL_TIM_Base_Start_IT+0xbc>
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	4a24      	ldr	r2, [pc, #144]	; (80102a0 <HAL_TIM_Base_Start_IT+0x12c>)
 801020e:	4293      	cmp	r3, r2
 8010210:	d00e      	beq.n	8010230 <HAL_TIM_Base_Start_IT+0xbc>
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	4a23      	ldr	r2, [pc, #140]	; (80102a4 <HAL_TIM_Base_Start_IT+0x130>)
 8010218:	4293      	cmp	r3, r2
 801021a:	d009      	beq.n	8010230 <HAL_TIM_Base_Start_IT+0xbc>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	4a21      	ldr	r2, [pc, #132]	; (80102a8 <HAL_TIM_Base_Start_IT+0x134>)
 8010222:	4293      	cmp	r3, r2
 8010224:	d004      	beq.n	8010230 <HAL_TIM_Base_Start_IT+0xbc>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	4a20      	ldr	r2, [pc, #128]	; (80102ac <HAL_TIM_Base_Start_IT+0x138>)
 801022c:	4293      	cmp	r3, r2
 801022e:	d115      	bne.n	801025c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	689a      	ldr	r2, [r3, #8]
 8010236:	4b1e      	ldr	r3, [pc, #120]	; (80102b0 <HAL_TIM_Base_Start_IT+0x13c>)
 8010238:	4013      	ands	r3, r2
 801023a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2b06      	cmp	r3, #6
 8010240:	d015      	beq.n	801026e <HAL_TIM_Base_Start_IT+0xfa>
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010248:	d011      	beq.n	801026e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	681a      	ldr	r2, [r3, #0]
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f042 0201 	orr.w	r2, r2, #1
 8010258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801025a:	e008      	b.n	801026e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	681a      	ldr	r2, [r3, #0]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	f042 0201 	orr.w	r2, r2, #1
 801026a:	601a      	str	r2, [r3, #0]
 801026c:	e000      	b.n	8010270 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801026e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010270:	2300      	movs	r3, #0
}
 8010272:	4618      	mov	r0, r3
 8010274:	3714      	adds	r7, #20
 8010276:	46bd      	mov	sp, r7
 8010278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop
 8010280:	40012c00 	.word	0x40012c00
 8010284:	50012c00 	.word	0x50012c00
 8010288:	40000400 	.word	0x40000400
 801028c:	50000400 	.word	0x50000400
 8010290:	40000800 	.word	0x40000800
 8010294:	50000800 	.word	0x50000800
 8010298:	40000c00 	.word	0x40000c00
 801029c:	50000c00 	.word	0x50000c00
 80102a0:	40013400 	.word	0x40013400
 80102a4:	50013400 	.word	0x50013400
 80102a8:	40014000 	.word	0x40014000
 80102ac:	50014000 	.word	0x50014000
 80102b0:	00010007 	.word	0x00010007

080102b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b082      	sub	sp, #8
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d101      	bne.n	80102c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80102c2:	2301      	movs	r3, #1
 80102c4:	e049      	b.n	801035a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80102cc:	b2db      	uxtb	r3, r3
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d106      	bne.n	80102e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2200      	movs	r2, #0
 80102d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f000 f841 	bl	8010362 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2202      	movs	r2, #2
 80102e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681a      	ldr	r2, [r3, #0]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	3304      	adds	r3, #4
 80102f0:	4619      	mov	r1, r3
 80102f2:	4610      	mov	r0, r2
 80102f4:	f000 fd50 	bl	8010d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2201      	movs	r2, #1
 80102fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2201      	movs	r2, #1
 8010304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2201      	movs	r2, #1
 801030c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2201      	movs	r2, #1
 8010314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2201      	movs	r2, #1
 801031c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2201      	movs	r2, #1
 8010324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2201      	movs	r2, #1
 801032c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2201      	movs	r2, #1
 8010334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2201      	movs	r2, #1
 801033c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2201      	movs	r2, #1
 8010344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2201      	movs	r2, #1
 801034c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2201      	movs	r2, #1
 8010354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010358:	2300      	movs	r3, #0
}
 801035a:	4618      	mov	r0, r3
 801035c:	3708      	adds	r7, #8
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}

08010362 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010362:	b480      	push	{r7}
 8010364:	b083      	sub	sp, #12
 8010366:	af00      	add	r7, sp, #0
 8010368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801036a:	bf00      	nop
 801036c:	370c      	adds	r7, #12
 801036e:	46bd      	mov	sp, r7
 8010370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010374:	4770      	bx	lr
	...

08010378 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d109      	bne.n	801039c <HAL_TIM_PWM_Start+0x24>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801038e:	b2db      	uxtb	r3, r3
 8010390:	2b01      	cmp	r3, #1
 8010392:	bf14      	ite	ne
 8010394:	2301      	movne	r3, #1
 8010396:	2300      	moveq	r3, #0
 8010398:	b2db      	uxtb	r3, r3
 801039a:	e03c      	b.n	8010416 <HAL_TIM_PWM_Start+0x9e>
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	2b04      	cmp	r3, #4
 80103a0:	d109      	bne.n	80103b6 <HAL_TIM_PWM_Start+0x3e>
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80103a8:	b2db      	uxtb	r3, r3
 80103aa:	2b01      	cmp	r3, #1
 80103ac:	bf14      	ite	ne
 80103ae:	2301      	movne	r3, #1
 80103b0:	2300      	moveq	r3, #0
 80103b2:	b2db      	uxtb	r3, r3
 80103b4:	e02f      	b.n	8010416 <HAL_TIM_PWM_Start+0x9e>
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	2b08      	cmp	r3, #8
 80103ba:	d109      	bne.n	80103d0 <HAL_TIM_PWM_Start+0x58>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80103c2:	b2db      	uxtb	r3, r3
 80103c4:	2b01      	cmp	r3, #1
 80103c6:	bf14      	ite	ne
 80103c8:	2301      	movne	r3, #1
 80103ca:	2300      	moveq	r3, #0
 80103cc:	b2db      	uxtb	r3, r3
 80103ce:	e022      	b.n	8010416 <HAL_TIM_PWM_Start+0x9e>
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	2b0c      	cmp	r3, #12
 80103d4:	d109      	bne.n	80103ea <HAL_TIM_PWM_Start+0x72>
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80103dc:	b2db      	uxtb	r3, r3
 80103de:	2b01      	cmp	r3, #1
 80103e0:	bf14      	ite	ne
 80103e2:	2301      	movne	r3, #1
 80103e4:	2300      	moveq	r3, #0
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	e015      	b.n	8010416 <HAL_TIM_PWM_Start+0x9e>
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	2b10      	cmp	r3, #16
 80103ee:	d109      	bne.n	8010404 <HAL_TIM_PWM_Start+0x8c>
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	bf14      	ite	ne
 80103fc:	2301      	movne	r3, #1
 80103fe:	2300      	moveq	r3, #0
 8010400:	b2db      	uxtb	r3, r3
 8010402:	e008      	b.n	8010416 <HAL_TIM_PWM_Start+0x9e>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801040a:	b2db      	uxtb	r3, r3
 801040c:	2b01      	cmp	r3, #1
 801040e:	bf14      	ite	ne
 8010410:	2301      	movne	r3, #1
 8010412:	2300      	moveq	r3, #0
 8010414:	b2db      	uxtb	r3, r3
 8010416:	2b00      	cmp	r3, #0
 8010418:	d001      	beq.n	801041e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801041a:	2301      	movs	r3, #1
 801041c:	e0d8      	b.n	80105d0 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d104      	bne.n	801042e <HAL_TIM_PWM_Start+0xb6>
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2202      	movs	r2, #2
 8010428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801042c:	e023      	b.n	8010476 <HAL_TIM_PWM_Start+0xfe>
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	2b04      	cmp	r3, #4
 8010432:	d104      	bne.n	801043e <HAL_TIM_PWM_Start+0xc6>
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2202      	movs	r2, #2
 8010438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801043c:	e01b      	b.n	8010476 <HAL_TIM_PWM_Start+0xfe>
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	2b08      	cmp	r3, #8
 8010442:	d104      	bne.n	801044e <HAL_TIM_PWM_Start+0xd6>
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2202      	movs	r2, #2
 8010448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801044c:	e013      	b.n	8010476 <HAL_TIM_PWM_Start+0xfe>
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	2b0c      	cmp	r3, #12
 8010452:	d104      	bne.n	801045e <HAL_TIM_PWM_Start+0xe6>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2202      	movs	r2, #2
 8010458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801045c:	e00b      	b.n	8010476 <HAL_TIM_PWM_Start+0xfe>
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	2b10      	cmp	r3, #16
 8010462:	d104      	bne.n	801046e <HAL_TIM_PWM_Start+0xf6>
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2202      	movs	r2, #2
 8010468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801046c:	e003      	b.n	8010476 <HAL_TIM_PWM_Start+0xfe>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2202      	movs	r2, #2
 8010472:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	2201      	movs	r2, #1
 801047c:	6839      	ldr	r1, [r7, #0]
 801047e:	4618      	mov	r0, r3
 8010480:	f001 f9f6 	bl	8011870 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	4a53      	ldr	r2, [pc, #332]	; (80105d8 <HAL_TIM_PWM_Start+0x260>)
 801048a:	4293      	cmp	r3, r2
 801048c:	d02c      	beq.n	80104e8 <HAL_TIM_PWM_Start+0x170>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	4a52      	ldr	r2, [pc, #328]	; (80105dc <HAL_TIM_PWM_Start+0x264>)
 8010494:	4293      	cmp	r3, r2
 8010496:	d027      	beq.n	80104e8 <HAL_TIM_PWM_Start+0x170>
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	4a50      	ldr	r2, [pc, #320]	; (80105e0 <HAL_TIM_PWM_Start+0x268>)
 801049e:	4293      	cmp	r3, r2
 80104a0:	d022      	beq.n	80104e8 <HAL_TIM_PWM_Start+0x170>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	4a4f      	ldr	r2, [pc, #316]	; (80105e4 <HAL_TIM_PWM_Start+0x26c>)
 80104a8:	4293      	cmp	r3, r2
 80104aa:	d01d      	beq.n	80104e8 <HAL_TIM_PWM_Start+0x170>
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	4a4d      	ldr	r2, [pc, #308]	; (80105e8 <HAL_TIM_PWM_Start+0x270>)
 80104b2:	4293      	cmp	r3, r2
 80104b4:	d018      	beq.n	80104e8 <HAL_TIM_PWM_Start+0x170>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	4a4c      	ldr	r2, [pc, #304]	; (80105ec <HAL_TIM_PWM_Start+0x274>)
 80104bc:	4293      	cmp	r3, r2
 80104be:	d013      	beq.n	80104e8 <HAL_TIM_PWM_Start+0x170>
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	4a4a      	ldr	r2, [pc, #296]	; (80105f0 <HAL_TIM_PWM_Start+0x278>)
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d00e      	beq.n	80104e8 <HAL_TIM_PWM_Start+0x170>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	4a49      	ldr	r2, [pc, #292]	; (80105f4 <HAL_TIM_PWM_Start+0x27c>)
 80104d0:	4293      	cmp	r3, r2
 80104d2:	d009      	beq.n	80104e8 <HAL_TIM_PWM_Start+0x170>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	4a47      	ldr	r2, [pc, #284]	; (80105f8 <HAL_TIM_PWM_Start+0x280>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	d004      	beq.n	80104e8 <HAL_TIM_PWM_Start+0x170>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	4a46      	ldr	r2, [pc, #280]	; (80105fc <HAL_TIM_PWM_Start+0x284>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d101      	bne.n	80104ec <HAL_TIM_PWM_Start+0x174>
 80104e8:	2301      	movs	r3, #1
 80104ea:	e000      	b.n	80104ee <HAL_TIM_PWM_Start+0x176>
 80104ec:	2300      	movs	r3, #0
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d007      	beq.n	8010502 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010500:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	4a34      	ldr	r2, [pc, #208]	; (80105d8 <HAL_TIM_PWM_Start+0x260>)
 8010508:	4293      	cmp	r3, r2
 801050a:	d040      	beq.n	801058e <HAL_TIM_PWM_Start+0x216>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	4a32      	ldr	r2, [pc, #200]	; (80105dc <HAL_TIM_PWM_Start+0x264>)
 8010512:	4293      	cmp	r3, r2
 8010514:	d03b      	beq.n	801058e <HAL_TIM_PWM_Start+0x216>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801051e:	d036      	beq.n	801058e <HAL_TIM_PWM_Start+0x216>
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010528:	d031      	beq.n	801058e <HAL_TIM_PWM_Start+0x216>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	4a34      	ldr	r2, [pc, #208]	; (8010600 <HAL_TIM_PWM_Start+0x288>)
 8010530:	4293      	cmp	r3, r2
 8010532:	d02c      	beq.n	801058e <HAL_TIM_PWM_Start+0x216>
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	4a32      	ldr	r2, [pc, #200]	; (8010604 <HAL_TIM_PWM_Start+0x28c>)
 801053a:	4293      	cmp	r3, r2
 801053c:	d027      	beq.n	801058e <HAL_TIM_PWM_Start+0x216>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	4a31      	ldr	r2, [pc, #196]	; (8010608 <HAL_TIM_PWM_Start+0x290>)
 8010544:	4293      	cmp	r3, r2
 8010546:	d022      	beq.n	801058e <HAL_TIM_PWM_Start+0x216>
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	4a2f      	ldr	r2, [pc, #188]	; (801060c <HAL_TIM_PWM_Start+0x294>)
 801054e:	4293      	cmp	r3, r2
 8010550:	d01d      	beq.n	801058e <HAL_TIM_PWM_Start+0x216>
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	4a2e      	ldr	r2, [pc, #184]	; (8010610 <HAL_TIM_PWM_Start+0x298>)
 8010558:	4293      	cmp	r3, r2
 801055a:	d018      	beq.n	801058e <HAL_TIM_PWM_Start+0x216>
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	4a2c      	ldr	r2, [pc, #176]	; (8010614 <HAL_TIM_PWM_Start+0x29c>)
 8010562:	4293      	cmp	r3, r2
 8010564:	d013      	beq.n	801058e <HAL_TIM_PWM_Start+0x216>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	4a1d      	ldr	r2, [pc, #116]	; (80105e0 <HAL_TIM_PWM_Start+0x268>)
 801056c:	4293      	cmp	r3, r2
 801056e:	d00e      	beq.n	801058e <HAL_TIM_PWM_Start+0x216>
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	4a1b      	ldr	r2, [pc, #108]	; (80105e4 <HAL_TIM_PWM_Start+0x26c>)
 8010576:	4293      	cmp	r3, r2
 8010578:	d009      	beq.n	801058e <HAL_TIM_PWM_Start+0x216>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	4a1a      	ldr	r2, [pc, #104]	; (80105e8 <HAL_TIM_PWM_Start+0x270>)
 8010580:	4293      	cmp	r3, r2
 8010582:	d004      	beq.n	801058e <HAL_TIM_PWM_Start+0x216>
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	4a18      	ldr	r2, [pc, #96]	; (80105ec <HAL_TIM_PWM_Start+0x274>)
 801058a:	4293      	cmp	r3, r2
 801058c:	d115      	bne.n	80105ba <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	689a      	ldr	r2, [r3, #8]
 8010594:	4b20      	ldr	r3, [pc, #128]	; (8010618 <HAL_TIM_PWM_Start+0x2a0>)
 8010596:	4013      	ands	r3, r2
 8010598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	2b06      	cmp	r3, #6
 801059e:	d015      	beq.n	80105cc <HAL_TIM_PWM_Start+0x254>
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105a6:	d011      	beq.n	80105cc <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f042 0201 	orr.w	r2, r2, #1
 80105b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80105b8:	e008      	b.n	80105cc <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	681a      	ldr	r2, [r3, #0]
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	f042 0201 	orr.w	r2, r2, #1
 80105c8:	601a      	str	r2, [r3, #0]
 80105ca:	e000      	b.n	80105ce <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80105cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80105ce:	2300      	movs	r3, #0
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3710      	adds	r7, #16
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}
 80105d8:	40012c00 	.word	0x40012c00
 80105dc:	50012c00 	.word	0x50012c00
 80105e0:	40013400 	.word	0x40013400
 80105e4:	50013400 	.word	0x50013400
 80105e8:	40014000 	.word	0x40014000
 80105ec:	50014000 	.word	0x50014000
 80105f0:	40014400 	.word	0x40014400
 80105f4:	50014400 	.word	0x50014400
 80105f8:	40014800 	.word	0x40014800
 80105fc:	50014800 	.word	0x50014800
 8010600:	40000400 	.word	0x40000400
 8010604:	50000400 	.word	0x50000400
 8010608:	40000800 	.word	0x40000800
 801060c:	50000800 	.word	0x50000800
 8010610:	40000c00 	.word	0x40000c00
 8010614:	50000c00 	.word	0x50000c00
 8010618:	00010007 	.word	0x00010007

0801061c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	691b      	ldr	r3, [r3, #16]
 801062a:	f003 0302 	and.w	r3, r3, #2
 801062e:	2b02      	cmp	r3, #2
 8010630:	d122      	bne.n	8010678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	68db      	ldr	r3, [r3, #12]
 8010638:	f003 0302 	and.w	r3, r3, #2
 801063c:	2b02      	cmp	r3, #2
 801063e:	d11b      	bne.n	8010678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f06f 0202 	mvn.w	r2, #2
 8010648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2201      	movs	r2, #1
 801064e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	699b      	ldr	r3, [r3, #24]
 8010656:	f003 0303 	and.w	r3, r3, #3
 801065a:	2b00      	cmp	r3, #0
 801065c:	d003      	beq.n	8010666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f000 fb7c 	bl	8010d5c <HAL_TIM_IC_CaptureCallback>
 8010664:	e005      	b.n	8010672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f000 fb6e 	bl	8010d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f000 fb7f 	bl	8010d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2200      	movs	r2, #0
 8010676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	691b      	ldr	r3, [r3, #16]
 801067e:	f003 0304 	and.w	r3, r3, #4
 8010682:	2b04      	cmp	r3, #4
 8010684:	d122      	bne.n	80106cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	68db      	ldr	r3, [r3, #12]
 801068c:	f003 0304 	and.w	r3, r3, #4
 8010690:	2b04      	cmp	r3, #4
 8010692:	d11b      	bne.n	80106cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	f06f 0204 	mvn.w	r2, #4
 801069c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2202      	movs	r2, #2
 80106a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	699b      	ldr	r3, [r3, #24]
 80106aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d003      	beq.n	80106ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f000 fb52 	bl	8010d5c <HAL_TIM_IC_CaptureCallback>
 80106b8:	e005      	b.n	80106c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f000 fb44 	bl	8010d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f000 fb55 	bl	8010d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2200      	movs	r2, #0
 80106ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	691b      	ldr	r3, [r3, #16]
 80106d2:	f003 0308 	and.w	r3, r3, #8
 80106d6:	2b08      	cmp	r3, #8
 80106d8:	d122      	bne.n	8010720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	68db      	ldr	r3, [r3, #12]
 80106e0:	f003 0308 	and.w	r3, r3, #8
 80106e4:	2b08      	cmp	r3, #8
 80106e6:	d11b      	bne.n	8010720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	f06f 0208 	mvn.w	r2, #8
 80106f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2204      	movs	r2, #4
 80106f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	69db      	ldr	r3, [r3, #28]
 80106fe:	f003 0303 	and.w	r3, r3, #3
 8010702:	2b00      	cmp	r3, #0
 8010704:	d003      	beq.n	801070e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f000 fb28 	bl	8010d5c <HAL_TIM_IC_CaptureCallback>
 801070c:	e005      	b.n	801071a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801070e:	6878      	ldr	r0, [r7, #4]
 8010710:	f000 fb1a 	bl	8010d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f000 fb2b 	bl	8010d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2200      	movs	r2, #0
 801071e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	691b      	ldr	r3, [r3, #16]
 8010726:	f003 0310 	and.w	r3, r3, #16
 801072a:	2b10      	cmp	r3, #16
 801072c:	d122      	bne.n	8010774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	f003 0310 	and.w	r3, r3, #16
 8010738:	2b10      	cmp	r3, #16
 801073a:	d11b      	bne.n	8010774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	f06f 0210 	mvn.w	r2, #16
 8010744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2208      	movs	r2, #8
 801074a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	69db      	ldr	r3, [r3, #28]
 8010752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010756:	2b00      	cmp	r3, #0
 8010758:	d003      	beq.n	8010762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f000 fafe 	bl	8010d5c <HAL_TIM_IC_CaptureCallback>
 8010760:	e005      	b.n	801076e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f000 faf0 	bl	8010d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f000 fb01 	bl	8010d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2200      	movs	r2, #0
 8010772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	691b      	ldr	r3, [r3, #16]
 801077a:	f003 0301 	and.w	r3, r3, #1
 801077e:	2b01      	cmp	r3, #1
 8010780:	d10e      	bne.n	80107a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	68db      	ldr	r3, [r3, #12]
 8010788:	f003 0301 	and.w	r3, r3, #1
 801078c:	2b01      	cmp	r3, #1
 801078e:	d107      	bne.n	80107a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	f06f 0201 	mvn.w	r2, #1
 8010798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f7f0 fe7e 	bl	800149c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	691b      	ldr	r3, [r3, #16]
 80107a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107aa:	2b80      	cmp	r3, #128	; 0x80
 80107ac:	d10e      	bne.n	80107cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	68db      	ldr	r3, [r3, #12]
 80107b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107b8:	2b80      	cmp	r3, #128	; 0x80
 80107ba:	d107      	bne.n	80107cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80107c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f001 fa06 	bl	8011bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	691b      	ldr	r3, [r3, #16]
 80107d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107da:	d10e      	bne.n	80107fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	68db      	ldr	r3, [r3, #12]
 80107e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107e6:	2b80      	cmp	r3, #128	; 0x80
 80107e8:	d107      	bne.n	80107fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80107f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f001 f9f9 	bl	8011bec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	691b      	ldr	r3, [r3, #16]
 8010800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010804:	2b40      	cmp	r3, #64	; 0x40
 8010806:	d10e      	bne.n	8010826 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	68db      	ldr	r3, [r3, #12]
 801080e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010812:	2b40      	cmp	r3, #64	; 0x40
 8010814:	d107      	bne.n	8010826 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801081e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f000 faaf 	bl	8010d84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	691b      	ldr	r3, [r3, #16]
 801082c:	f003 0320 	and.w	r3, r3, #32
 8010830:	2b20      	cmp	r3, #32
 8010832:	d10e      	bne.n	8010852 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	68db      	ldr	r3, [r3, #12]
 801083a:	f003 0320 	and.w	r3, r3, #32
 801083e:	2b20      	cmp	r3, #32
 8010840:	d107      	bne.n	8010852 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	f06f 0220 	mvn.w	r2, #32
 801084a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f001 f9b9 	bl	8011bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	691b      	ldr	r3, [r3, #16]
 8010858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801085c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010860:	d10f      	bne.n	8010882 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	68db      	ldr	r3, [r3, #12]
 8010868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801086c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010870:	d107      	bne.n	8010882 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801087a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f001 f9bf 	bl	8011c00 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	691b      	ldr	r3, [r3, #16]
 8010888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801088c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010890:	d10f      	bne.n	80108b2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	68db      	ldr	r3, [r3, #12]
 8010898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801089c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80108a0:	d107      	bne.n	80108b2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80108aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f001 f9b1 	bl	8011c14 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	691b      	ldr	r3, [r3, #16]
 80108b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80108bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80108c0:	d10f      	bne.n	80108e2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	68db      	ldr	r3, [r3, #12]
 80108c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80108cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80108d0:	d107      	bne.n	80108e2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80108da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f001 f9a3 	bl	8011c28 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	691b      	ldr	r3, [r3, #16]
 80108e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80108f0:	d10f      	bne.n	8010912 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	68db      	ldr	r3, [r3, #12]
 80108f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010900:	d107      	bne.n	8010912 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 801090a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f001 f995 	bl	8011c3c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010912:	bf00      	nop
 8010914:	3708      	adds	r7, #8
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
	...

0801091c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b086      	sub	sp, #24
 8010920:	af00      	add	r7, sp, #0
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010928:	2300      	movs	r3, #0
 801092a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010932:	2b01      	cmp	r3, #1
 8010934:	d101      	bne.n	801093a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010936:	2302      	movs	r3, #2
 8010938:	e0ff      	b.n	8010b3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	2201      	movs	r2, #1
 801093e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2b14      	cmp	r3, #20
 8010946:	f200 80f0 	bhi.w	8010b2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 801094a:	a201      	add	r2, pc, #4	; (adr r2, 8010950 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010950:	080109a5 	.word	0x080109a5
 8010954:	08010b2b 	.word	0x08010b2b
 8010958:	08010b2b 	.word	0x08010b2b
 801095c:	08010b2b 	.word	0x08010b2b
 8010960:	080109e5 	.word	0x080109e5
 8010964:	08010b2b 	.word	0x08010b2b
 8010968:	08010b2b 	.word	0x08010b2b
 801096c:	08010b2b 	.word	0x08010b2b
 8010970:	08010a27 	.word	0x08010a27
 8010974:	08010b2b 	.word	0x08010b2b
 8010978:	08010b2b 	.word	0x08010b2b
 801097c:	08010b2b 	.word	0x08010b2b
 8010980:	08010a67 	.word	0x08010a67
 8010984:	08010b2b 	.word	0x08010b2b
 8010988:	08010b2b 	.word	0x08010b2b
 801098c:	08010b2b 	.word	0x08010b2b
 8010990:	08010aa9 	.word	0x08010aa9
 8010994:	08010b2b 	.word	0x08010b2b
 8010998:	08010b2b 	.word	0x08010b2b
 801099c:	08010b2b 	.word	0x08010b2b
 80109a0:	08010ae9 	.word	0x08010ae9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	68b9      	ldr	r1, [r7, #8]
 80109aa:	4618      	mov	r0, r3
 80109ac:	f000 faee 	bl	8010f8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	699a      	ldr	r2, [r3, #24]
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	f042 0208 	orr.w	r2, r2, #8
 80109be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	699a      	ldr	r2, [r3, #24]
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	f022 0204 	bic.w	r2, r2, #4
 80109ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	6999      	ldr	r1, [r3, #24]
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	691a      	ldr	r2, [r3, #16]
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	430a      	orrs	r2, r1
 80109e0:	619a      	str	r2, [r3, #24]
      break;
 80109e2:	e0a5      	b.n	8010b30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	68b9      	ldr	r1, [r7, #8]
 80109ea:	4618      	mov	r0, r3
 80109ec:	f000 fb90 	bl	8011110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	699a      	ldr	r2, [r3, #24]
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80109fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	699a      	ldr	r2, [r3, #24]
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	6999      	ldr	r1, [r3, #24]
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	691b      	ldr	r3, [r3, #16]
 8010a1a:	021a      	lsls	r2, r3, #8
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	430a      	orrs	r2, r1
 8010a22:	619a      	str	r2, [r3, #24]
      break;
 8010a24:	e084      	b.n	8010b30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	68b9      	ldr	r1, [r7, #8]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f000 fc1f 	bl	8011270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	69da      	ldr	r2, [r3, #28]
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	f042 0208 	orr.w	r2, r2, #8
 8010a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	69da      	ldr	r2, [r3, #28]
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	f022 0204 	bic.w	r2, r2, #4
 8010a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	69d9      	ldr	r1, [r3, #28]
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	691a      	ldr	r2, [r3, #16]
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	430a      	orrs	r2, r1
 8010a62:	61da      	str	r2, [r3, #28]
      break;
 8010a64:	e064      	b.n	8010b30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	68b9      	ldr	r1, [r7, #8]
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f000 fcad 	bl	80113cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	69da      	ldr	r2, [r3, #28]
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	69da      	ldr	r2, [r3, #28]
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	69d9      	ldr	r1, [r3, #28]
 8010a98:	68bb      	ldr	r3, [r7, #8]
 8010a9a:	691b      	ldr	r3, [r3, #16]
 8010a9c:	021a      	lsls	r2, r3, #8
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	430a      	orrs	r2, r1
 8010aa4:	61da      	str	r2, [r3, #28]
      break;
 8010aa6:	e043      	b.n	8010b30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	68b9      	ldr	r1, [r7, #8]
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f000 fd3c 	bl	801152c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	f042 0208 	orr.w	r2, r2, #8
 8010ac2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	f022 0204 	bic.w	r2, r2, #4
 8010ad2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	691a      	ldr	r2, [r3, #16]
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	430a      	orrs	r2, r1
 8010ae4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8010ae6:	e023      	b.n	8010b30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	68b9      	ldr	r1, [r7, #8]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f000 fd9e 	bl	8011630 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010b02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010b12:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	691b      	ldr	r3, [r3, #16]
 8010b1e:	021a      	lsls	r2, r3, #8
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	430a      	orrs	r2, r1
 8010b26:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8010b28:	e002      	b.n	8010b30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8010b2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	2200      	movs	r2, #0
 8010b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3718      	adds	r7, #24
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}
 8010b42:	bf00      	nop

08010b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b084      	sub	sp, #16
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010b58:	2b01      	cmp	r3, #1
 8010b5a:	d101      	bne.n	8010b60 <HAL_TIM_ConfigClockSource+0x1c>
 8010b5c:	2302      	movs	r3, #2
 8010b5e:	e0e6      	b.n	8010d2e <HAL_TIM_ConfigClockSource+0x1ea>
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2201      	movs	r2, #1
 8010b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2202      	movs	r2, #2
 8010b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	689b      	ldr	r3, [r3, #8]
 8010b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8010b7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8010b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010b8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	68ba      	ldr	r2, [r7, #8]
 8010b92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	4a67      	ldr	r2, [pc, #412]	; (8010d38 <HAL_TIM_ConfigClockSource+0x1f4>)
 8010b9a:	4293      	cmp	r3, r2
 8010b9c:	f000 80b1 	beq.w	8010d02 <HAL_TIM_ConfigClockSource+0x1be>
 8010ba0:	4a65      	ldr	r2, [pc, #404]	; (8010d38 <HAL_TIM_ConfigClockSource+0x1f4>)
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	f200 80b6 	bhi.w	8010d14 <HAL_TIM_ConfigClockSource+0x1d0>
 8010ba8:	4a64      	ldr	r2, [pc, #400]	; (8010d3c <HAL_TIM_ConfigClockSource+0x1f8>)
 8010baa:	4293      	cmp	r3, r2
 8010bac:	f000 80a9 	beq.w	8010d02 <HAL_TIM_ConfigClockSource+0x1be>
 8010bb0:	4a62      	ldr	r2, [pc, #392]	; (8010d3c <HAL_TIM_ConfigClockSource+0x1f8>)
 8010bb2:	4293      	cmp	r3, r2
 8010bb4:	f200 80ae 	bhi.w	8010d14 <HAL_TIM_ConfigClockSource+0x1d0>
 8010bb8:	4a61      	ldr	r2, [pc, #388]	; (8010d40 <HAL_TIM_ConfigClockSource+0x1fc>)
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	f000 80a1 	beq.w	8010d02 <HAL_TIM_ConfigClockSource+0x1be>
 8010bc0:	4a5f      	ldr	r2, [pc, #380]	; (8010d40 <HAL_TIM_ConfigClockSource+0x1fc>)
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	f200 80a6 	bhi.w	8010d14 <HAL_TIM_ConfigClockSource+0x1d0>
 8010bc8:	4a5e      	ldr	r2, [pc, #376]	; (8010d44 <HAL_TIM_ConfigClockSource+0x200>)
 8010bca:	4293      	cmp	r3, r2
 8010bcc:	f000 8099 	beq.w	8010d02 <HAL_TIM_ConfigClockSource+0x1be>
 8010bd0:	4a5c      	ldr	r2, [pc, #368]	; (8010d44 <HAL_TIM_ConfigClockSource+0x200>)
 8010bd2:	4293      	cmp	r3, r2
 8010bd4:	f200 809e 	bhi.w	8010d14 <HAL_TIM_ConfigClockSource+0x1d0>
 8010bd8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010bdc:	f000 8091 	beq.w	8010d02 <HAL_TIM_ConfigClockSource+0x1be>
 8010be0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010be4:	f200 8096 	bhi.w	8010d14 <HAL_TIM_ConfigClockSource+0x1d0>
 8010be8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010bec:	f000 8089 	beq.w	8010d02 <HAL_TIM_ConfigClockSource+0x1be>
 8010bf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010bf4:	f200 808e 	bhi.w	8010d14 <HAL_TIM_ConfigClockSource+0x1d0>
 8010bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010bfc:	d03e      	beq.n	8010c7c <HAL_TIM_ConfigClockSource+0x138>
 8010bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c02:	f200 8087 	bhi.w	8010d14 <HAL_TIM_ConfigClockSource+0x1d0>
 8010c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c0a:	f000 8086 	beq.w	8010d1a <HAL_TIM_ConfigClockSource+0x1d6>
 8010c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c12:	d87f      	bhi.n	8010d14 <HAL_TIM_ConfigClockSource+0x1d0>
 8010c14:	2b70      	cmp	r3, #112	; 0x70
 8010c16:	d01a      	beq.n	8010c4e <HAL_TIM_ConfigClockSource+0x10a>
 8010c18:	2b70      	cmp	r3, #112	; 0x70
 8010c1a:	d87b      	bhi.n	8010d14 <HAL_TIM_ConfigClockSource+0x1d0>
 8010c1c:	2b60      	cmp	r3, #96	; 0x60
 8010c1e:	d050      	beq.n	8010cc2 <HAL_TIM_ConfigClockSource+0x17e>
 8010c20:	2b60      	cmp	r3, #96	; 0x60
 8010c22:	d877      	bhi.n	8010d14 <HAL_TIM_ConfigClockSource+0x1d0>
 8010c24:	2b50      	cmp	r3, #80	; 0x50
 8010c26:	d03c      	beq.n	8010ca2 <HAL_TIM_ConfigClockSource+0x15e>
 8010c28:	2b50      	cmp	r3, #80	; 0x50
 8010c2a:	d873      	bhi.n	8010d14 <HAL_TIM_ConfigClockSource+0x1d0>
 8010c2c:	2b40      	cmp	r3, #64	; 0x40
 8010c2e:	d058      	beq.n	8010ce2 <HAL_TIM_ConfigClockSource+0x19e>
 8010c30:	2b40      	cmp	r3, #64	; 0x40
 8010c32:	d86f      	bhi.n	8010d14 <HAL_TIM_ConfigClockSource+0x1d0>
 8010c34:	2b30      	cmp	r3, #48	; 0x30
 8010c36:	d064      	beq.n	8010d02 <HAL_TIM_ConfigClockSource+0x1be>
 8010c38:	2b30      	cmp	r3, #48	; 0x30
 8010c3a:	d86b      	bhi.n	8010d14 <HAL_TIM_ConfigClockSource+0x1d0>
 8010c3c:	2b20      	cmp	r3, #32
 8010c3e:	d060      	beq.n	8010d02 <HAL_TIM_ConfigClockSource+0x1be>
 8010c40:	2b20      	cmp	r3, #32
 8010c42:	d867      	bhi.n	8010d14 <HAL_TIM_ConfigClockSource+0x1d0>
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d05c      	beq.n	8010d02 <HAL_TIM_ConfigClockSource+0x1be>
 8010c48:	2b10      	cmp	r3, #16
 8010c4a:	d05a      	beq.n	8010d02 <HAL_TIM_ConfigClockSource+0x1be>
 8010c4c:	e062      	b.n	8010d14 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6818      	ldr	r0, [r3, #0]
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	6899      	ldr	r1, [r3, #8]
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	685a      	ldr	r2, [r3, #4]
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	68db      	ldr	r3, [r3, #12]
 8010c5e:	f000 fde7 	bl	8011830 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	689b      	ldr	r3, [r3, #8]
 8010c68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010c70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	68ba      	ldr	r2, [r7, #8]
 8010c78:	609a      	str	r2, [r3, #8]
      break;
 8010c7a:	e04f      	b.n	8010d1c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6818      	ldr	r0, [r3, #0]
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	6899      	ldr	r1, [r3, #8]
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	685a      	ldr	r2, [r3, #4]
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	68db      	ldr	r3, [r3, #12]
 8010c8c:	f000 fdd0 	bl	8011830 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	689a      	ldr	r2, [r3, #8]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010c9e:	609a      	str	r2, [r3, #8]
      break;
 8010ca0:	e03c      	b.n	8010d1c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6818      	ldr	r0, [r3, #0]
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	6859      	ldr	r1, [r3, #4]
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	68db      	ldr	r3, [r3, #12]
 8010cae:	461a      	mov	r2, r3
 8010cb0:	f000 fd42 	bl	8011738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	2150      	movs	r1, #80	; 0x50
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f000 fd9b 	bl	80117f6 <TIM_ITRx_SetConfig>
      break;
 8010cc0:	e02c      	b.n	8010d1c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6818      	ldr	r0, [r3, #0]
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	6859      	ldr	r1, [r3, #4]
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	68db      	ldr	r3, [r3, #12]
 8010cce:	461a      	mov	r2, r3
 8010cd0:	f000 fd61 	bl	8011796 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	2160      	movs	r1, #96	; 0x60
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f000 fd8b 	bl	80117f6 <TIM_ITRx_SetConfig>
      break;
 8010ce0:	e01c      	b.n	8010d1c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6818      	ldr	r0, [r3, #0]
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	6859      	ldr	r1, [r3, #4]
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	68db      	ldr	r3, [r3, #12]
 8010cee:	461a      	mov	r2, r3
 8010cf0:	f000 fd22 	bl	8011738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2140      	movs	r1, #64	; 0x40
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f000 fd7b 	bl	80117f6 <TIM_ITRx_SetConfig>
      break;
 8010d00:	e00c      	b.n	8010d1c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681a      	ldr	r2, [r3, #0]
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	4619      	mov	r1, r3
 8010d0c:	4610      	mov	r0, r2
 8010d0e:	f000 fd72 	bl	80117f6 <TIM_ITRx_SetConfig>
      break;
 8010d12:	e003      	b.n	8010d1c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8010d14:	2301      	movs	r3, #1
 8010d16:	73fb      	strb	r3, [r7, #15]
      break;
 8010d18:	e000      	b.n	8010d1c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8010d1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2201      	movs	r2, #1
 8010d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2200      	movs	r2, #0
 8010d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3710      	adds	r7, #16
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	00100070 	.word	0x00100070
 8010d3c:	00100040 	.word	0x00100040
 8010d40:	00100030 	.word	0x00100030
 8010d44:	00100020 	.word	0x00100020

08010d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b083      	sub	sp, #12
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010d50:	bf00      	nop
 8010d52:	370c      	adds	r7, #12
 8010d54:	46bd      	mov	sp, r7
 8010d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5a:	4770      	bx	lr

08010d5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010d5c:	b480      	push	{r7}
 8010d5e:	b083      	sub	sp, #12
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010d64:	bf00      	nop
 8010d66:	370c      	adds	r7, #12
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6e:	4770      	bx	lr

08010d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b083      	sub	sp, #12
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010d78:	bf00      	nop
 8010d7a:	370c      	adds	r7, #12
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr

08010d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010d84:	b480      	push	{r7}
 8010d86:	b083      	sub	sp, #12
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010d8c:	bf00      	nop
 8010d8e:	370c      	adds	r7, #12
 8010d90:	46bd      	mov	sp, r7
 8010d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d96:	4770      	bx	lr

08010d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010d98:	b480      	push	{r7}
 8010d9a:	b085      	sub	sp, #20
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
 8010da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	4a68      	ldr	r2, [pc, #416]	; (8010f4c <TIM_Base_SetConfig+0x1b4>)
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d02b      	beq.n	8010e08 <TIM_Base_SetConfig+0x70>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	4a67      	ldr	r2, [pc, #412]	; (8010f50 <TIM_Base_SetConfig+0x1b8>)
 8010db4:	4293      	cmp	r3, r2
 8010db6:	d027      	beq.n	8010e08 <TIM_Base_SetConfig+0x70>
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010dbe:	d023      	beq.n	8010e08 <TIM_Base_SetConfig+0x70>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010dc6:	d01f      	beq.n	8010e08 <TIM_Base_SetConfig+0x70>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	4a62      	ldr	r2, [pc, #392]	; (8010f54 <TIM_Base_SetConfig+0x1bc>)
 8010dcc:	4293      	cmp	r3, r2
 8010dce:	d01b      	beq.n	8010e08 <TIM_Base_SetConfig+0x70>
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	4a61      	ldr	r2, [pc, #388]	; (8010f58 <TIM_Base_SetConfig+0x1c0>)
 8010dd4:	4293      	cmp	r3, r2
 8010dd6:	d017      	beq.n	8010e08 <TIM_Base_SetConfig+0x70>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	4a60      	ldr	r2, [pc, #384]	; (8010f5c <TIM_Base_SetConfig+0x1c4>)
 8010ddc:	4293      	cmp	r3, r2
 8010dde:	d013      	beq.n	8010e08 <TIM_Base_SetConfig+0x70>
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	4a5f      	ldr	r2, [pc, #380]	; (8010f60 <TIM_Base_SetConfig+0x1c8>)
 8010de4:	4293      	cmp	r3, r2
 8010de6:	d00f      	beq.n	8010e08 <TIM_Base_SetConfig+0x70>
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	4a5e      	ldr	r2, [pc, #376]	; (8010f64 <TIM_Base_SetConfig+0x1cc>)
 8010dec:	4293      	cmp	r3, r2
 8010dee:	d00b      	beq.n	8010e08 <TIM_Base_SetConfig+0x70>
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	4a5d      	ldr	r2, [pc, #372]	; (8010f68 <TIM_Base_SetConfig+0x1d0>)
 8010df4:	4293      	cmp	r3, r2
 8010df6:	d007      	beq.n	8010e08 <TIM_Base_SetConfig+0x70>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	4a5c      	ldr	r2, [pc, #368]	; (8010f6c <TIM_Base_SetConfig+0x1d4>)
 8010dfc:	4293      	cmp	r3, r2
 8010dfe:	d003      	beq.n	8010e08 <TIM_Base_SetConfig+0x70>
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	4a5b      	ldr	r2, [pc, #364]	; (8010f70 <TIM_Base_SetConfig+0x1d8>)
 8010e04:	4293      	cmp	r3, r2
 8010e06:	d108      	bne.n	8010e1a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	685b      	ldr	r3, [r3, #4]
 8010e14:	68fa      	ldr	r2, [r7, #12]
 8010e16:	4313      	orrs	r3, r2
 8010e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	4a4b      	ldr	r2, [pc, #300]	; (8010f4c <TIM_Base_SetConfig+0x1b4>)
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	d043      	beq.n	8010eaa <TIM_Base_SetConfig+0x112>
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	4a4a      	ldr	r2, [pc, #296]	; (8010f50 <TIM_Base_SetConfig+0x1b8>)
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d03f      	beq.n	8010eaa <TIM_Base_SetConfig+0x112>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e30:	d03b      	beq.n	8010eaa <TIM_Base_SetConfig+0x112>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010e38:	d037      	beq.n	8010eaa <TIM_Base_SetConfig+0x112>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	4a45      	ldr	r2, [pc, #276]	; (8010f54 <TIM_Base_SetConfig+0x1bc>)
 8010e3e:	4293      	cmp	r3, r2
 8010e40:	d033      	beq.n	8010eaa <TIM_Base_SetConfig+0x112>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	4a44      	ldr	r2, [pc, #272]	; (8010f58 <TIM_Base_SetConfig+0x1c0>)
 8010e46:	4293      	cmp	r3, r2
 8010e48:	d02f      	beq.n	8010eaa <TIM_Base_SetConfig+0x112>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	4a43      	ldr	r2, [pc, #268]	; (8010f5c <TIM_Base_SetConfig+0x1c4>)
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d02b      	beq.n	8010eaa <TIM_Base_SetConfig+0x112>
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	4a42      	ldr	r2, [pc, #264]	; (8010f60 <TIM_Base_SetConfig+0x1c8>)
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d027      	beq.n	8010eaa <TIM_Base_SetConfig+0x112>
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	4a41      	ldr	r2, [pc, #260]	; (8010f64 <TIM_Base_SetConfig+0x1cc>)
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d023      	beq.n	8010eaa <TIM_Base_SetConfig+0x112>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	4a40      	ldr	r2, [pc, #256]	; (8010f68 <TIM_Base_SetConfig+0x1d0>)
 8010e66:	4293      	cmp	r3, r2
 8010e68:	d01f      	beq.n	8010eaa <TIM_Base_SetConfig+0x112>
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	4a3f      	ldr	r2, [pc, #252]	; (8010f6c <TIM_Base_SetConfig+0x1d4>)
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	d01b      	beq.n	8010eaa <TIM_Base_SetConfig+0x112>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	4a3e      	ldr	r2, [pc, #248]	; (8010f70 <TIM_Base_SetConfig+0x1d8>)
 8010e76:	4293      	cmp	r3, r2
 8010e78:	d017      	beq.n	8010eaa <TIM_Base_SetConfig+0x112>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	4a3d      	ldr	r2, [pc, #244]	; (8010f74 <TIM_Base_SetConfig+0x1dc>)
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	d013      	beq.n	8010eaa <TIM_Base_SetConfig+0x112>
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	4a3c      	ldr	r2, [pc, #240]	; (8010f78 <TIM_Base_SetConfig+0x1e0>)
 8010e86:	4293      	cmp	r3, r2
 8010e88:	d00f      	beq.n	8010eaa <TIM_Base_SetConfig+0x112>
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	4a3b      	ldr	r2, [pc, #236]	; (8010f7c <TIM_Base_SetConfig+0x1e4>)
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	d00b      	beq.n	8010eaa <TIM_Base_SetConfig+0x112>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	4a3a      	ldr	r2, [pc, #232]	; (8010f80 <TIM_Base_SetConfig+0x1e8>)
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d007      	beq.n	8010eaa <TIM_Base_SetConfig+0x112>
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	4a39      	ldr	r2, [pc, #228]	; (8010f84 <TIM_Base_SetConfig+0x1ec>)
 8010e9e:	4293      	cmp	r3, r2
 8010ea0:	d003      	beq.n	8010eaa <TIM_Base_SetConfig+0x112>
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	4a38      	ldr	r2, [pc, #224]	; (8010f88 <TIM_Base_SetConfig+0x1f0>)
 8010ea6:	4293      	cmp	r3, r2
 8010ea8:	d108      	bne.n	8010ebc <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	68db      	ldr	r3, [r3, #12]
 8010eb6:	68fa      	ldr	r2, [r7, #12]
 8010eb8:	4313      	orrs	r3, r2
 8010eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	695b      	ldr	r3, [r3, #20]
 8010ec6:	4313      	orrs	r3, r2
 8010ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	68fa      	ldr	r2, [r7, #12]
 8010ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	689a      	ldr	r2, [r3, #8]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	681a      	ldr	r2, [r3, #0]
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	4a1a      	ldr	r2, [pc, #104]	; (8010f4c <TIM_Base_SetConfig+0x1b4>)
 8010ee4:	4293      	cmp	r3, r2
 8010ee6:	d023      	beq.n	8010f30 <TIM_Base_SetConfig+0x198>
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	4a19      	ldr	r2, [pc, #100]	; (8010f50 <TIM_Base_SetConfig+0x1b8>)
 8010eec:	4293      	cmp	r3, r2
 8010eee:	d01f      	beq.n	8010f30 <TIM_Base_SetConfig+0x198>
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	4a1e      	ldr	r2, [pc, #120]	; (8010f6c <TIM_Base_SetConfig+0x1d4>)
 8010ef4:	4293      	cmp	r3, r2
 8010ef6:	d01b      	beq.n	8010f30 <TIM_Base_SetConfig+0x198>
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	4a1d      	ldr	r2, [pc, #116]	; (8010f70 <TIM_Base_SetConfig+0x1d8>)
 8010efc:	4293      	cmp	r3, r2
 8010efe:	d017      	beq.n	8010f30 <TIM_Base_SetConfig+0x198>
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	4a1c      	ldr	r2, [pc, #112]	; (8010f74 <TIM_Base_SetConfig+0x1dc>)
 8010f04:	4293      	cmp	r3, r2
 8010f06:	d013      	beq.n	8010f30 <TIM_Base_SetConfig+0x198>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	4a1b      	ldr	r2, [pc, #108]	; (8010f78 <TIM_Base_SetConfig+0x1e0>)
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	d00f      	beq.n	8010f30 <TIM_Base_SetConfig+0x198>
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	4a1a      	ldr	r2, [pc, #104]	; (8010f7c <TIM_Base_SetConfig+0x1e4>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d00b      	beq.n	8010f30 <TIM_Base_SetConfig+0x198>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	4a19      	ldr	r2, [pc, #100]	; (8010f80 <TIM_Base_SetConfig+0x1e8>)
 8010f1c:	4293      	cmp	r3, r2
 8010f1e:	d007      	beq.n	8010f30 <TIM_Base_SetConfig+0x198>
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	4a18      	ldr	r2, [pc, #96]	; (8010f84 <TIM_Base_SetConfig+0x1ec>)
 8010f24:	4293      	cmp	r3, r2
 8010f26:	d003      	beq.n	8010f30 <TIM_Base_SetConfig+0x198>
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	4a17      	ldr	r2, [pc, #92]	; (8010f88 <TIM_Base_SetConfig+0x1f0>)
 8010f2c:	4293      	cmp	r3, r2
 8010f2e:	d103      	bne.n	8010f38 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	691a      	ldr	r2, [r3, #16]
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2201      	movs	r2, #1
 8010f3c:	615a      	str	r2, [r3, #20]
}
 8010f3e:	bf00      	nop
 8010f40:	3714      	adds	r7, #20
 8010f42:	46bd      	mov	sp, r7
 8010f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f48:	4770      	bx	lr
 8010f4a:	bf00      	nop
 8010f4c:	40012c00 	.word	0x40012c00
 8010f50:	50012c00 	.word	0x50012c00
 8010f54:	40000400 	.word	0x40000400
 8010f58:	50000400 	.word	0x50000400
 8010f5c:	40000800 	.word	0x40000800
 8010f60:	50000800 	.word	0x50000800
 8010f64:	40000c00 	.word	0x40000c00
 8010f68:	50000c00 	.word	0x50000c00
 8010f6c:	40013400 	.word	0x40013400
 8010f70:	50013400 	.word	0x50013400
 8010f74:	40014000 	.word	0x40014000
 8010f78:	50014000 	.word	0x50014000
 8010f7c:	40014400 	.word	0x40014400
 8010f80:	50014400 	.word	0x50014400
 8010f84:	40014800 	.word	0x40014800
 8010f88:	50014800 	.word	0x50014800

08010f8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	b087      	sub	sp, #28
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	6a1b      	ldr	r3, [r3, #32]
 8010f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	6a1b      	ldr	r3, [r3, #32]
 8010fa0:	f023 0201 	bic.w	r2, r3, #1
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	685b      	ldr	r3, [r3, #4]
 8010fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	699b      	ldr	r3, [r3, #24]
 8010fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	f023 0303 	bic.w	r3, r3, #3
 8010fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	68fa      	ldr	r2, [r7, #12]
 8010fce:	4313      	orrs	r3, r2
 8010fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010fd2:	697b      	ldr	r3, [r7, #20]
 8010fd4:	f023 0302 	bic.w	r3, r3, #2
 8010fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	689b      	ldr	r3, [r3, #8]
 8010fde:	697a      	ldr	r2, [r7, #20]
 8010fe0:	4313      	orrs	r3, r2
 8010fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	4a40      	ldr	r2, [pc, #256]	; (80110e8 <TIM_OC1_SetConfig+0x15c>)
 8010fe8:	4293      	cmp	r3, r2
 8010fea:	d023      	beq.n	8011034 <TIM_OC1_SetConfig+0xa8>
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	4a3f      	ldr	r2, [pc, #252]	; (80110ec <TIM_OC1_SetConfig+0x160>)
 8010ff0:	4293      	cmp	r3, r2
 8010ff2:	d01f      	beq.n	8011034 <TIM_OC1_SetConfig+0xa8>
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	4a3e      	ldr	r2, [pc, #248]	; (80110f0 <TIM_OC1_SetConfig+0x164>)
 8010ff8:	4293      	cmp	r3, r2
 8010ffa:	d01b      	beq.n	8011034 <TIM_OC1_SetConfig+0xa8>
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	4a3d      	ldr	r2, [pc, #244]	; (80110f4 <TIM_OC1_SetConfig+0x168>)
 8011000:	4293      	cmp	r3, r2
 8011002:	d017      	beq.n	8011034 <TIM_OC1_SetConfig+0xa8>
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	4a3c      	ldr	r2, [pc, #240]	; (80110f8 <TIM_OC1_SetConfig+0x16c>)
 8011008:	4293      	cmp	r3, r2
 801100a:	d013      	beq.n	8011034 <TIM_OC1_SetConfig+0xa8>
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	4a3b      	ldr	r2, [pc, #236]	; (80110fc <TIM_OC1_SetConfig+0x170>)
 8011010:	4293      	cmp	r3, r2
 8011012:	d00f      	beq.n	8011034 <TIM_OC1_SetConfig+0xa8>
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	4a3a      	ldr	r2, [pc, #232]	; (8011100 <TIM_OC1_SetConfig+0x174>)
 8011018:	4293      	cmp	r3, r2
 801101a:	d00b      	beq.n	8011034 <TIM_OC1_SetConfig+0xa8>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	4a39      	ldr	r2, [pc, #228]	; (8011104 <TIM_OC1_SetConfig+0x178>)
 8011020:	4293      	cmp	r3, r2
 8011022:	d007      	beq.n	8011034 <TIM_OC1_SetConfig+0xa8>
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	4a38      	ldr	r2, [pc, #224]	; (8011108 <TIM_OC1_SetConfig+0x17c>)
 8011028:	4293      	cmp	r3, r2
 801102a:	d003      	beq.n	8011034 <TIM_OC1_SetConfig+0xa8>
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	4a37      	ldr	r2, [pc, #220]	; (801110c <TIM_OC1_SetConfig+0x180>)
 8011030:	4293      	cmp	r3, r2
 8011032:	d10c      	bne.n	801104e <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	f023 0308 	bic.w	r3, r3, #8
 801103a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	68db      	ldr	r3, [r3, #12]
 8011040:	697a      	ldr	r2, [r7, #20]
 8011042:	4313      	orrs	r3, r2
 8011044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	f023 0304 	bic.w	r3, r3, #4
 801104c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	4a25      	ldr	r2, [pc, #148]	; (80110e8 <TIM_OC1_SetConfig+0x15c>)
 8011052:	4293      	cmp	r3, r2
 8011054:	d023      	beq.n	801109e <TIM_OC1_SetConfig+0x112>
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	4a24      	ldr	r2, [pc, #144]	; (80110ec <TIM_OC1_SetConfig+0x160>)
 801105a:	4293      	cmp	r3, r2
 801105c:	d01f      	beq.n	801109e <TIM_OC1_SetConfig+0x112>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	4a23      	ldr	r2, [pc, #140]	; (80110f0 <TIM_OC1_SetConfig+0x164>)
 8011062:	4293      	cmp	r3, r2
 8011064:	d01b      	beq.n	801109e <TIM_OC1_SetConfig+0x112>
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	4a22      	ldr	r2, [pc, #136]	; (80110f4 <TIM_OC1_SetConfig+0x168>)
 801106a:	4293      	cmp	r3, r2
 801106c:	d017      	beq.n	801109e <TIM_OC1_SetConfig+0x112>
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	4a21      	ldr	r2, [pc, #132]	; (80110f8 <TIM_OC1_SetConfig+0x16c>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d013      	beq.n	801109e <TIM_OC1_SetConfig+0x112>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	4a20      	ldr	r2, [pc, #128]	; (80110fc <TIM_OC1_SetConfig+0x170>)
 801107a:	4293      	cmp	r3, r2
 801107c:	d00f      	beq.n	801109e <TIM_OC1_SetConfig+0x112>
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	4a1f      	ldr	r2, [pc, #124]	; (8011100 <TIM_OC1_SetConfig+0x174>)
 8011082:	4293      	cmp	r3, r2
 8011084:	d00b      	beq.n	801109e <TIM_OC1_SetConfig+0x112>
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	4a1e      	ldr	r2, [pc, #120]	; (8011104 <TIM_OC1_SetConfig+0x178>)
 801108a:	4293      	cmp	r3, r2
 801108c:	d007      	beq.n	801109e <TIM_OC1_SetConfig+0x112>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	4a1d      	ldr	r2, [pc, #116]	; (8011108 <TIM_OC1_SetConfig+0x17c>)
 8011092:	4293      	cmp	r3, r2
 8011094:	d003      	beq.n	801109e <TIM_OC1_SetConfig+0x112>
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	4a1c      	ldr	r2, [pc, #112]	; (801110c <TIM_OC1_SetConfig+0x180>)
 801109a:	4293      	cmp	r3, r2
 801109c:	d111      	bne.n	80110c2 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80110a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80110ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	695b      	ldr	r3, [r3, #20]
 80110b2:	693a      	ldr	r2, [r7, #16]
 80110b4:	4313      	orrs	r3, r2
 80110b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	699b      	ldr	r3, [r3, #24]
 80110bc:	693a      	ldr	r2, [r7, #16]
 80110be:	4313      	orrs	r3, r2
 80110c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	693a      	ldr	r2, [r7, #16]
 80110c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	68fa      	ldr	r2, [r7, #12]
 80110cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	685a      	ldr	r2, [r3, #4]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	697a      	ldr	r2, [r7, #20]
 80110da:	621a      	str	r2, [r3, #32]
}
 80110dc:	bf00      	nop
 80110de:	371c      	adds	r7, #28
 80110e0:	46bd      	mov	sp, r7
 80110e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e6:	4770      	bx	lr
 80110e8:	40012c00 	.word	0x40012c00
 80110ec:	50012c00 	.word	0x50012c00
 80110f0:	40013400 	.word	0x40013400
 80110f4:	50013400 	.word	0x50013400
 80110f8:	40014000 	.word	0x40014000
 80110fc:	50014000 	.word	0x50014000
 8011100:	40014400 	.word	0x40014400
 8011104:	50014400 	.word	0x50014400
 8011108:	40014800 	.word	0x40014800
 801110c:	50014800 	.word	0x50014800

08011110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011110:	b480      	push	{r7}
 8011112:	b087      	sub	sp, #28
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
 8011118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6a1b      	ldr	r3, [r3, #32]
 801111e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6a1b      	ldr	r3, [r3, #32]
 8011124:	f023 0210 	bic.w	r2, r3, #16
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	685b      	ldr	r3, [r3, #4]
 8011130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	699b      	ldr	r3, [r3, #24]
 8011136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801113e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801114a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	021b      	lsls	r3, r3, #8
 8011152:	68fa      	ldr	r2, [r7, #12]
 8011154:	4313      	orrs	r3, r2
 8011156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	f023 0320 	bic.w	r3, r3, #32
 801115e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	689b      	ldr	r3, [r3, #8]
 8011164:	011b      	lsls	r3, r3, #4
 8011166:	697a      	ldr	r2, [r7, #20]
 8011168:	4313      	orrs	r3, r2
 801116a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	4a36      	ldr	r2, [pc, #216]	; (8011248 <TIM_OC2_SetConfig+0x138>)
 8011170:	4293      	cmp	r3, r2
 8011172:	d00b      	beq.n	801118c <TIM_OC2_SetConfig+0x7c>
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	4a35      	ldr	r2, [pc, #212]	; (801124c <TIM_OC2_SetConfig+0x13c>)
 8011178:	4293      	cmp	r3, r2
 801117a:	d007      	beq.n	801118c <TIM_OC2_SetConfig+0x7c>
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	4a34      	ldr	r2, [pc, #208]	; (8011250 <TIM_OC2_SetConfig+0x140>)
 8011180:	4293      	cmp	r3, r2
 8011182:	d003      	beq.n	801118c <TIM_OC2_SetConfig+0x7c>
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	4a33      	ldr	r2, [pc, #204]	; (8011254 <TIM_OC2_SetConfig+0x144>)
 8011188:	4293      	cmp	r3, r2
 801118a:	d10d      	bne.n	80111a8 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	68db      	ldr	r3, [r3, #12]
 8011198:	011b      	lsls	r3, r3, #4
 801119a:	697a      	ldr	r2, [r7, #20]
 801119c:	4313      	orrs	r3, r2
 801119e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80111a0:	697b      	ldr	r3, [r7, #20]
 80111a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80111a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	4a27      	ldr	r2, [pc, #156]	; (8011248 <TIM_OC2_SetConfig+0x138>)
 80111ac:	4293      	cmp	r3, r2
 80111ae:	d023      	beq.n	80111f8 <TIM_OC2_SetConfig+0xe8>
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	4a26      	ldr	r2, [pc, #152]	; (801124c <TIM_OC2_SetConfig+0x13c>)
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d01f      	beq.n	80111f8 <TIM_OC2_SetConfig+0xe8>
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	4a25      	ldr	r2, [pc, #148]	; (8011250 <TIM_OC2_SetConfig+0x140>)
 80111bc:	4293      	cmp	r3, r2
 80111be:	d01b      	beq.n	80111f8 <TIM_OC2_SetConfig+0xe8>
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	4a24      	ldr	r2, [pc, #144]	; (8011254 <TIM_OC2_SetConfig+0x144>)
 80111c4:	4293      	cmp	r3, r2
 80111c6:	d017      	beq.n	80111f8 <TIM_OC2_SetConfig+0xe8>
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	4a23      	ldr	r2, [pc, #140]	; (8011258 <TIM_OC2_SetConfig+0x148>)
 80111cc:	4293      	cmp	r3, r2
 80111ce:	d013      	beq.n	80111f8 <TIM_OC2_SetConfig+0xe8>
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	4a22      	ldr	r2, [pc, #136]	; (801125c <TIM_OC2_SetConfig+0x14c>)
 80111d4:	4293      	cmp	r3, r2
 80111d6:	d00f      	beq.n	80111f8 <TIM_OC2_SetConfig+0xe8>
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	4a21      	ldr	r2, [pc, #132]	; (8011260 <TIM_OC2_SetConfig+0x150>)
 80111dc:	4293      	cmp	r3, r2
 80111de:	d00b      	beq.n	80111f8 <TIM_OC2_SetConfig+0xe8>
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	4a20      	ldr	r2, [pc, #128]	; (8011264 <TIM_OC2_SetConfig+0x154>)
 80111e4:	4293      	cmp	r3, r2
 80111e6:	d007      	beq.n	80111f8 <TIM_OC2_SetConfig+0xe8>
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	4a1f      	ldr	r2, [pc, #124]	; (8011268 <TIM_OC2_SetConfig+0x158>)
 80111ec:	4293      	cmp	r3, r2
 80111ee:	d003      	beq.n	80111f8 <TIM_OC2_SetConfig+0xe8>
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	4a1e      	ldr	r2, [pc, #120]	; (801126c <TIM_OC2_SetConfig+0x15c>)
 80111f4:	4293      	cmp	r3, r2
 80111f6:	d113      	bne.n	8011220 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80111fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011200:	693b      	ldr	r3, [r7, #16]
 8011202:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	695b      	ldr	r3, [r3, #20]
 801120c:	009b      	lsls	r3, r3, #2
 801120e:	693a      	ldr	r2, [r7, #16]
 8011210:	4313      	orrs	r3, r2
 8011212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	699b      	ldr	r3, [r3, #24]
 8011218:	009b      	lsls	r3, r3, #2
 801121a:	693a      	ldr	r2, [r7, #16]
 801121c:	4313      	orrs	r3, r2
 801121e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	693a      	ldr	r2, [r7, #16]
 8011224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	68fa      	ldr	r2, [r7, #12]
 801122a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	685a      	ldr	r2, [r3, #4]
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	697a      	ldr	r2, [r7, #20]
 8011238:	621a      	str	r2, [r3, #32]
}
 801123a:	bf00      	nop
 801123c:	371c      	adds	r7, #28
 801123e:	46bd      	mov	sp, r7
 8011240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011244:	4770      	bx	lr
 8011246:	bf00      	nop
 8011248:	40012c00 	.word	0x40012c00
 801124c:	50012c00 	.word	0x50012c00
 8011250:	40013400 	.word	0x40013400
 8011254:	50013400 	.word	0x50013400
 8011258:	40014000 	.word	0x40014000
 801125c:	50014000 	.word	0x50014000
 8011260:	40014400 	.word	0x40014400
 8011264:	50014400 	.word	0x50014400
 8011268:	40014800 	.word	0x40014800
 801126c:	50014800 	.word	0x50014800

08011270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011270:	b480      	push	{r7}
 8011272:	b087      	sub	sp, #28
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	6a1b      	ldr	r3, [r3, #32]
 801127e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6a1b      	ldr	r3, [r3, #32]
 8011284:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	69db      	ldr	r3, [r3, #28]
 8011296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801129e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	f023 0303 	bic.w	r3, r3, #3
 80112aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	68fa      	ldr	r2, [r7, #12]
 80112b2:	4313      	orrs	r3, r2
 80112b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80112bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	689b      	ldr	r3, [r3, #8]
 80112c2:	021b      	lsls	r3, r3, #8
 80112c4:	697a      	ldr	r2, [r7, #20]
 80112c6:	4313      	orrs	r3, r2
 80112c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	4a35      	ldr	r2, [pc, #212]	; (80113a4 <TIM_OC3_SetConfig+0x134>)
 80112ce:	4293      	cmp	r3, r2
 80112d0:	d00b      	beq.n	80112ea <TIM_OC3_SetConfig+0x7a>
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	4a34      	ldr	r2, [pc, #208]	; (80113a8 <TIM_OC3_SetConfig+0x138>)
 80112d6:	4293      	cmp	r3, r2
 80112d8:	d007      	beq.n	80112ea <TIM_OC3_SetConfig+0x7a>
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	4a33      	ldr	r2, [pc, #204]	; (80113ac <TIM_OC3_SetConfig+0x13c>)
 80112de:	4293      	cmp	r3, r2
 80112e0:	d003      	beq.n	80112ea <TIM_OC3_SetConfig+0x7a>
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	4a32      	ldr	r2, [pc, #200]	; (80113b0 <TIM_OC3_SetConfig+0x140>)
 80112e6:	4293      	cmp	r3, r2
 80112e8:	d10d      	bne.n	8011306 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80112f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	68db      	ldr	r3, [r3, #12]
 80112f6:	021b      	lsls	r3, r3, #8
 80112f8:	697a      	ldr	r2, [r7, #20]
 80112fa:	4313      	orrs	r3, r2
 80112fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80112fe:	697b      	ldr	r3, [r7, #20]
 8011300:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	4a26      	ldr	r2, [pc, #152]	; (80113a4 <TIM_OC3_SetConfig+0x134>)
 801130a:	4293      	cmp	r3, r2
 801130c:	d023      	beq.n	8011356 <TIM_OC3_SetConfig+0xe6>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	4a25      	ldr	r2, [pc, #148]	; (80113a8 <TIM_OC3_SetConfig+0x138>)
 8011312:	4293      	cmp	r3, r2
 8011314:	d01f      	beq.n	8011356 <TIM_OC3_SetConfig+0xe6>
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	4a24      	ldr	r2, [pc, #144]	; (80113ac <TIM_OC3_SetConfig+0x13c>)
 801131a:	4293      	cmp	r3, r2
 801131c:	d01b      	beq.n	8011356 <TIM_OC3_SetConfig+0xe6>
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	4a23      	ldr	r2, [pc, #140]	; (80113b0 <TIM_OC3_SetConfig+0x140>)
 8011322:	4293      	cmp	r3, r2
 8011324:	d017      	beq.n	8011356 <TIM_OC3_SetConfig+0xe6>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	4a22      	ldr	r2, [pc, #136]	; (80113b4 <TIM_OC3_SetConfig+0x144>)
 801132a:	4293      	cmp	r3, r2
 801132c:	d013      	beq.n	8011356 <TIM_OC3_SetConfig+0xe6>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	4a21      	ldr	r2, [pc, #132]	; (80113b8 <TIM_OC3_SetConfig+0x148>)
 8011332:	4293      	cmp	r3, r2
 8011334:	d00f      	beq.n	8011356 <TIM_OC3_SetConfig+0xe6>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	4a20      	ldr	r2, [pc, #128]	; (80113bc <TIM_OC3_SetConfig+0x14c>)
 801133a:	4293      	cmp	r3, r2
 801133c:	d00b      	beq.n	8011356 <TIM_OC3_SetConfig+0xe6>
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	4a1f      	ldr	r2, [pc, #124]	; (80113c0 <TIM_OC3_SetConfig+0x150>)
 8011342:	4293      	cmp	r3, r2
 8011344:	d007      	beq.n	8011356 <TIM_OC3_SetConfig+0xe6>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4a1e      	ldr	r2, [pc, #120]	; (80113c4 <TIM_OC3_SetConfig+0x154>)
 801134a:	4293      	cmp	r3, r2
 801134c:	d003      	beq.n	8011356 <TIM_OC3_SetConfig+0xe6>
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	4a1d      	ldr	r2, [pc, #116]	; (80113c8 <TIM_OC3_SetConfig+0x158>)
 8011352:	4293      	cmp	r3, r2
 8011354:	d113      	bne.n	801137e <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801135c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	695b      	ldr	r3, [r3, #20]
 801136a:	011b      	lsls	r3, r3, #4
 801136c:	693a      	ldr	r2, [r7, #16]
 801136e:	4313      	orrs	r3, r2
 8011370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	699b      	ldr	r3, [r3, #24]
 8011376:	011b      	lsls	r3, r3, #4
 8011378:	693a      	ldr	r2, [r7, #16]
 801137a:	4313      	orrs	r3, r2
 801137c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	693a      	ldr	r2, [r7, #16]
 8011382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	68fa      	ldr	r2, [r7, #12]
 8011388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	685a      	ldr	r2, [r3, #4]
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	697a      	ldr	r2, [r7, #20]
 8011396:	621a      	str	r2, [r3, #32]
}
 8011398:	bf00      	nop
 801139a:	371c      	adds	r7, #28
 801139c:	46bd      	mov	sp, r7
 801139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a2:	4770      	bx	lr
 80113a4:	40012c00 	.word	0x40012c00
 80113a8:	50012c00 	.word	0x50012c00
 80113ac:	40013400 	.word	0x40013400
 80113b0:	50013400 	.word	0x50013400
 80113b4:	40014000 	.word	0x40014000
 80113b8:	50014000 	.word	0x50014000
 80113bc:	40014400 	.word	0x40014400
 80113c0:	50014400 	.word	0x50014400
 80113c4:	40014800 	.word	0x40014800
 80113c8:	50014800 	.word	0x50014800

080113cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80113cc:	b480      	push	{r7}
 80113ce:	b087      	sub	sp, #28
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6a1b      	ldr	r3, [r3, #32]
 80113da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6a1b      	ldr	r3, [r3, #32]
 80113e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	69db      	ldr	r3, [r3, #28]
 80113f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80113fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80113fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	021b      	lsls	r3, r3, #8
 801140e:	68fa      	ldr	r2, [r7, #12]
 8011410:	4313      	orrs	r3, r2
 8011412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801141a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	689b      	ldr	r3, [r3, #8]
 8011420:	031b      	lsls	r3, r3, #12
 8011422:	697a      	ldr	r2, [r7, #20]
 8011424:	4313      	orrs	r3, r2
 8011426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	4a36      	ldr	r2, [pc, #216]	; (8011504 <TIM_OC4_SetConfig+0x138>)
 801142c:	4293      	cmp	r3, r2
 801142e:	d00b      	beq.n	8011448 <TIM_OC4_SetConfig+0x7c>
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	4a35      	ldr	r2, [pc, #212]	; (8011508 <TIM_OC4_SetConfig+0x13c>)
 8011434:	4293      	cmp	r3, r2
 8011436:	d007      	beq.n	8011448 <TIM_OC4_SetConfig+0x7c>
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	4a34      	ldr	r2, [pc, #208]	; (801150c <TIM_OC4_SetConfig+0x140>)
 801143c:	4293      	cmp	r3, r2
 801143e:	d003      	beq.n	8011448 <TIM_OC4_SetConfig+0x7c>
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	4a33      	ldr	r2, [pc, #204]	; (8011510 <TIM_OC4_SetConfig+0x144>)
 8011444:	4293      	cmp	r3, r2
 8011446:	d10d      	bne.n	8011464 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801144e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	68db      	ldr	r3, [r3, #12]
 8011454:	031b      	lsls	r3, r3, #12
 8011456:	697a      	ldr	r2, [r7, #20]
 8011458:	4313      	orrs	r3, r2
 801145a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011462:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	4a27      	ldr	r2, [pc, #156]	; (8011504 <TIM_OC4_SetConfig+0x138>)
 8011468:	4293      	cmp	r3, r2
 801146a:	d023      	beq.n	80114b4 <TIM_OC4_SetConfig+0xe8>
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	4a26      	ldr	r2, [pc, #152]	; (8011508 <TIM_OC4_SetConfig+0x13c>)
 8011470:	4293      	cmp	r3, r2
 8011472:	d01f      	beq.n	80114b4 <TIM_OC4_SetConfig+0xe8>
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	4a25      	ldr	r2, [pc, #148]	; (801150c <TIM_OC4_SetConfig+0x140>)
 8011478:	4293      	cmp	r3, r2
 801147a:	d01b      	beq.n	80114b4 <TIM_OC4_SetConfig+0xe8>
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	4a24      	ldr	r2, [pc, #144]	; (8011510 <TIM_OC4_SetConfig+0x144>)
 8011480:	4293      	cmp	r3, r2
 8011482:	d017      	beq.n	80114b4 <TIM_OC4_SetConfig+0xe8>
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	4a23      	ldr	r2, [pc, #140]	; (8011514 <TIM_OC4_SetConfig+0x148>)
 8011488:	4293      	cmp	r3, r2
 801148a:	d013      	beq.n	80114b4 <TIM_OC4_SetConfig+0xe8>
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	4a22      	ldr	r2, [pc, #136]	; (8011518 <TIM_OC4_SetConfig+0x14c>)
 8011490:	4293      	cmp	r3, r2
 8011492:	d00f      	beq.n	80114b4 <TIM_OC4_SetConfig+0xe8>
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	4a21      	ldr	r2, [pc, #132]	; (801151c <TIM_OC4_SetConfig+0x150>)
 8011498:	4293      	cmp	r3, r2
 801149a:	d00b      	beq.n	80114b4 <TIM_OC4_SetConfig+0xe8>
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	4a20      	ldr	r2, [pc, #128]	; (8011520 <TIM_OC4_SetConfig+0x154>)
 80114a0:	4293      	cmp	r3, r2
 80114a2:	d007      	beq.n	80114b4 <TIM_OC4_SetConfig+0xe8>
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	4a1f      	ldr	r2, [pc, #124]	; (8011524 <TIM_OC4_SetConfig+0x158>)
 80114a8:	4293      	cmp	r3, r2
 80114aa:	d003      	beq.n	80114b4 <TIM_OC4_SetConfig+0xe8>
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	4a1e      	ldr	r2, [pc, #120]	; (8011528 <TIM_OC4_SetConfig+0x15c>)
 80114b0:	4293      	cmp	r3, r2
 80114b2:	d113      	bne.n	80114dc <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80114ba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80114bc:	693b      	ldr	r3, [r7, #16]
 80114be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80114c2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	695b      	ldr	r3, [r3, #20]
 80114c8:	019b      	lsls	r3, r3, #6
 80114ca:	693a      	ldr	r2, [r7, #16]
 80114cc:	4313      	orrs	r3, r2
 80114ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	699b      	ldr	r3, [r3, #24]
 80114d4:	019b      	lsls	r3, r3, #6
 80114d6:	693a      	ldr	r2, [r7, #16]
 80114d8:	4313      	orrs	r3, r2
 80114da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	693a      	ldr	r2, [r7, #16]
 80114e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	68fa      	ldr	r2, [r7, #12]
 80114e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	685a      	ldr	r2, [r3, #4]
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	697a      	ldr	r2, [r7, #20]
 80114f4:	621a      	str	r2, [r3, #32]
}
 80114f6:	bf00      	nop
 80114f8:	371c      	adds	r7, #28
 80114fa:	46bd      	mov	sp, r7
 80114fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011500:	4770      	bx	lr
 8011502:	bf00      	nop
 8011504:	40012c00 	.word	0x40012c00
 8011508:	50012c00 	.word	0x50012c00
 801150c:	40013400 	.word	0x40013400
 8011510:	50013400 	.word	0x50013400
 8011514:	40014000 	.word	0x40014000
 8011518:	50014000 	.word	0x50014000
 801151c:	40014400 	.word	0x40014400
 8011520:	50014400 	.word	0x50014400
 8011524:	40014800 	.word	0x40014800
 8011528:	50014800 	.word	0x50014800

0801152c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801152c:	b480      	push	{r7}
 801152e:	b087      	sub	sp, #28
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
 8011534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6a1b      	ldr	r3, [r3, #32]
 801153a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6a1b      	ldr	r3, [r3, #32]
 8011540:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	685b      	ldr	r3, [r3, #4]
 801154c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801155a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801155e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011560:	683b      	ldr	r3, [r7, #0]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	68fa      	ldr	r2, [r7, #12]
 8011566:	4313      	orrs	r3, r2
 8011568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801156a:	693b      	ldr	r3, [r7, #16]
 801156c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011570:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	689b      	ldr	r3, [r3, #8]
 8011576:	041b      	lsls	r3, r3, #16
 8011578:	693a      	ldr	r2, [r7, #16]
 801157a:	4313      	orrs	r3, r2
 801157c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	4a21      	ldr	r2, [pc, #132]	; (8011608 <TIM_OC5_SetConfig+0xdc>)
 8011582:	4293      	cmp	r3, r2
 8011584:	d023      	beq.n	80115ce <TIM_OC5_SetConfig+0xa2>
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	4a20      	ldr	r2, [pc, #128]	; (801160c <TIM_OC5_SetConfig+0xe0>)
 801158a:	4293      	cmp	r3, r2
 801158c:	d01f      	beq.n	80115ce <TIM_OC5_SetConfig+0xa2>
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	4a1f      	ldr	r2, [pc, #124]	; (8011610 <TIM_OC5_SetConfig+0xe4>)
 8011592:	4293      	cmp	r3, r2
 8011594:	d01b      	beq.n	80115ce <TIM_OC5_SetConfig+0xa2>
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	4a1e      	ldr	r2, [pc, #120]	; (8011614 <TIM_OC5_SetConfig+0xe8>)
 801159a:	4293      	cmp	r3, r2
 801159c:	d017      	beq.n	80115ce <TIM_OC5_SetConfig+0xa2>
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	4a1d      	ldr	r2, [pc, #116]	; (8011618 <TIM_OC5_SetConfig+0xec>)
 80115a2:	4293      	cmp	r3, r2
 80115a4:	d013      	beq.n	80115ce <TIM_OC5_SetConfig+0xa2>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	4a1c      	ldr	r2, [pc, #112]	; (801161c <TIM_OC5_SetConfig+0xf0>)
 80115aa:	4293      	cmp	r3, r2
 80115ac:	d00f      	beq.n	80115ce <TIM_OC5_SetConfig+0xa2>
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	4a1b      	ldr	r2, [pc, #108]	; (8011620 <TIM_OC5_SetConfig+0xf4>)
 80115b2:	4293      	cmp	r3, r2
 80115b4:	d00b      	beq.n	80115ce <TIM_OC5_SetConfig+0xa2>
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	4a1a      	ldr	r2, [pc, #104]	; (8011624 <TIM_OC5_SetConfig+0xf8>)
 80115ba:	4293      	cmp	r3, r2
 80115bc:	d007      	beq.n	80115ce <TIM_OC5_SetConfig+0xa2>
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	4a19      	ldr	r2, [pc, #100]	; (8011628 <TIM_OC5_SetConfig+0xfc>)
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d003      	beq.n	80115ce <TIM_OC5_SetConfig+0xa2>
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	4a18      	ldr	r2, [pc, #96]	; (801162c <TIM_OC5_SetConfig+0x100>)
 80115ca:	4293      	cmp	r3, r2
 80115cc:	d109      	bne.n	80115e2 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80115d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	695b      	ldr	r3, [r3, #20]
 80115da:	021b      	lsls	r3, r3, #8
 80115dc:	697a      	ldr	r2, [r7, #20]
 80115de:	4313      	orrs	r3, r2
 80115e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	697a      	ldr	r2, [r7, #20]
 80115e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	68fa      	ldr	r2, [r7, #12]
 80115ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	685a      	ldr	r2, [r3, #4]
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	693a      	ldr	r2, [r7, #16]
 80115fa:	621a      	str	r2, [r3, #32]
}
 80115fc:	bf00      	nop
 80115fe:	371c      	adds	r7, #28
 8011600:	46bd      	mov	sp, r7
 8011602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011606:	4770      	bx	lr
 8011608:	40012c00 	.word	0x40012c00
 801160c:	50012c00 	.word	0x50012c00
 8011610:	40013400 	.word	0x40013400
 8011614:	50013400 	.word	0x50013400
 8011618:	40014000 	.word	0x40014000
 801161c:	50014000 	.word	0x50014000
 8011620:	40014400 	.word	0x40014400
 8011624:	50014400 	.word	0x50014400
 8011628:	40014800 	.word	0x40014800
 801162c:	50014800 	.word	0x50014800

08011630 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011630:	b480      	push	{r7}
 8011632:	b087      	sub	sp, #28
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
 8011638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	6a1b      	ldr	r3, [r3, #32]
 801163e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	6a1b      	ldr	r3, [r3, #32]
 8011644:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	685b      	ldr	r3, [r3, #4]
 8011650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801165e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	021b      	lsls	r3, r3, #8
 801166a:	68fa      	ldr	r2, [r7, #12]
 801166c:	4313      	orrs	r3, r2
 801166e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	689b      	ldr	r3, [r3, #8]
 801167c:	051b      	lsls	r3, r3, #20
 801167e:	693a      	ldr	r2, [r7, #16]
 8011680:	4313      	orrs	r3, r2
 8011682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	4a22      	ldr	r2, [pc, #136]	; (8011710 <TIM_OC6_SetConfig+0xe0>)
 8011688:	4293      	cmp	r3, r2
 801168a:	d023      	beq.n	80116d4 <TIM_OC6_SetConfig+0xa4>
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	4a21      	ldr	r2, [pc, #132]	; (8011714 <TIM_OC6_SetConfig+0xe4>)
 8011690:	4293      	cmp	r3, r2
 8011692:	d01f      	beq.n	80116d4 <TIM_OC6_SetConfig+0xa4>
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	4a20      	ldr	r2, [pc, #128]	; (8011718 <TIM_OC6_SetConfig+0xe8>)
 8011698:	4293      	cmp	r3, r2
 801169a:	d01b      	beq.n	80116d4 <TIM_OC6_SetConfig+0xa4>
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	4a1f      	ldr	r2, [pc, #124]	; (801171c <TIM_OC6_SetConfig+0xec>)
 80116a0:	4293      	cmp	r3, r2
 80116a2:	d017      	beq.n	80116d4 <TIM_OC6_SetConfig+0xa4>
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	4a1e      	ldr	r2, [pc, #120]	; (8011720 <TIM_OC6_SetConfig+0xf0>)
 80116a8:	4293      	cmp	r3, r2
 80116aa:	d013      	beq.n	80116d4 <TIM_OC6_SetConfig+0xa4>
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	4a1d      	ldr	r2, [pc, #116]	; (8011724 <TIM_OC6_SetConfig+0xf4>)
 80116b0:	4293      	cmp	r3, r2
 80116b2:	d00f      	beq.n	80116d4 <TIM_OC6_SetConfig+0xa4>
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	4a1c      	ldr	r2, [pc, #112]	; (8011728 <TIM_OC6_SetConfig+0xf8>)
 80116b8:	4293      	cmp	r3, r2
 80116ba:	d00b      	beq.n	80116d4 <TIM_OC6_SetConfig+0xa4>
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	4a1b      	ldr	r2, [pc, #108]	; (801172c <TIM_OC6_SetConfig+0xfc>)
 80116c0:	4293      	cmp	r3, r2
 80116c2:	d007      	beq.n	80116d4 <TIM_OC6_SetConfig+0xa4>
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	4a1a      	ldr	r2, [pc, #104]	; (8011730 <TIM_OC6_SetConfig+0x100>)
 80116c8:	4293      	cmp	r3, r2
 80116ca:	d003      	beq.n	80116d4 <TIM_OC6_SetConfig+0xa4>
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	4a19      	ldr	r2, [pc, #100]	; (8011734 <TIM_OC6_SetConfig+0x104>)
 80116d0:	4293      	cmp	r3, r2
 80116d2:	d109      	bne.n	80116e8 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80116da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	695b      	ldr	r3, [r3, #20]
 80116e0:	029b      	lsls	r3, r3, #10
 80116e2:	697a      	ldr	r2, [r7, #20]
 80116e4:	4313      	orrs	r3, r2
 80116e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	697a      	ldr	r2, [r7, #20]
 80116ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	68fa      	ldr	r2, [r7, #12]
 80116f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	685a      	ldr	r2, [r3, #4]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	693a      	ldr	r2, [r7, #16]
 8011700:	621a      	str	r2, [r3, #32]
}
 8011702:	bf00      	nop
 8011704:	371c      	adds	r7, #28
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr
 801170e:	bf00      	nop
 8011710:	40012c00 	.word	0x40012c00
 8011714:	50012c00 	.word	0x50012c00
 8011718:	40013400 	.word	0x40013400
 801171c:	50013400 	.word	0x50013400
 8011720:	40014000 	.word	0x40014000
 8011724:	50014000 	.word	0x50014000
 8011728:	40014400 	.word	0x40014400
 801172c:	50014400 	.word	0x50014400
 8011730:	40014800 	.word	0x40014800
 8011734:	50014800 	.word	0x50014800

08011738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011738:	b480      	push	{r7}
 801173a:	b087      	sub	sp, #28
 801173c:	af00      	add	r7, sp, #0
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	6a1b      	ldr	r3, [r3, #32]
 8011748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	6a1b      	ldr	r3, [r3, #32]
 801174e:	f023 0201 	bic.w	r2, r3, #1
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	699b      	ldr	r3, [r3, #24]
 801175a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	011b      	lsls	r3, r3, #4
 8011768:	693a      	ldr	r2, [r7, #16]
 801176a:	4313      	orrs	r3, r2
 801176c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	f023 030a 	bic.w	r3, r3, #10
 8011774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011776:	697a      	ldr	r2, [r7, #20]
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	4313      	orrs	r3, r2
 801177c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	693a      	ldr	r2, [r7, #16]
 8011782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	697a      	ldr	r2, [r7, #20]
 8011788:	621a      	str	r2, [r3, #32]
}
 801178a:	bf00      	nop
 801178c:	371c      	adds	r7, #28
 801178e:	46bd      	mov	sp, r7
 8011790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011794:	4770      	bx	lr

08011796 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011796:	b480      	push	{r7}
 8011798:	b087      	sub	sp, #28
 801179a:	af00      	add	r7, sp, #0
 801179c:	60f8      	str	r0, [r7, #12]
 801179e:	60b9      	str	r1, [r7, #8]
 80117a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	6a1b      	ldr	r3, [r3, #32]
 80117a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	6a1b      	ldr	r3, [r3, #32]
 80117ac:	f023 0210 	bic.w	r2, r3, #16
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	699b      	ldr	r3, [r3, #24]
 80117b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80117c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	031b      	lsls	r3, r3, #12
 80117c6:	693a      	ldr	r2, [r7, #16]
 80117c8:	4313      	orrs	r3, r2
 80117ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80117d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	011b      	lsls	r3, r3, #4
 80117d8:	697a      	ldr	r2, [r7, #20]
 80117da:	4313      	orrs	r3, r2
 80117dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	693a      	ldr	r2, [r7, #16]
 80117e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	697a      	ldr	r2, [r7, #20]
 80117e8:	621a      	str	r2, [r3, #32]
}
 80117ea:	bf00      	nop
 80117ec:	371c      	adds	r7, #28
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr

080117f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80117f6:	b480      	push	{r7}
 80117f8:	b085      	sub	sp, #20
 80117fa:	af00      	add	r7, sp, #0
 80117fc:	6078      	str	r0, [r7, #4]
 80117fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	689b      	ldr	r3, [r3, #8]
 8011804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801180c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011812:	683a      	ldr	r2, [r7, #0]
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	4313      	orrs	r3, r2
 8011818:	f043 0307 	orr.w	r3, r3, #7
 801181c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	68fa      	ldr	r2, [r7, #12]
 8011822:	609a      	str	r2, [r3, #8]
}
 8011824:	bf00      	nop
 8011826:	3714      	adds	r7, #20
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr

08011830 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011830:	b480      	push	{r7}
 8011832:	b087      	sub	sp, #28
 8011834:	af00      	add	r7, sp, #0
 8011836:	60f8      	str	r0, [r7, #12]
 8011838:	60b9      	str	r1, [r7, #8]
 801183a:	607a      	str	r2, [r7, #4]
 801183c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	689b      	ldr	r3, [r3, #8]
 8011842:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011844:	697b      	ldr	r3, [r7, #20]
 8011846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801184a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	021a      	lsls	r2, r3, #8
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	431a      	orrs	r2, r3
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	4313      	orrs	r3, r2
 8011858:	697a      	ldr	r2, [r7, #20]
 801185a:	4313      	orrs	r3, r2
 801185c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	697a      	ldr	r2, [r7, #20]
 8011862:	609a      	str	r2, [r3, #8]
}
 8011864:	bf00      	nop
 8011866:	371c      	adds	r7, #28
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr

08011870 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011870:	b480      	push	{r7}
 8011872:	b087      	sub	sp, #28
 8011874:	af00      	add	r7, sp, #0
 8011876:	60f8      	str	r0, [r7, #12]
 8011878:	60b9      	str	r1, [r7, #8]
 801187a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801187c:	68bb      	ldr	r3, [r7, #8]
 801187e:	f003 031f 	and.w	r3, r3, #31
 8011882:	2201      	movs	r2, #1
 8011884:	fa02 f303 	lsl.w	r3, r2, r3
 8011888:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	6a1a      	ldr	r2, [r3, #32]
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	43db      	mvns	r3, r3
 8011892:	401a      	ands	r2, r3
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	6a1a      	ldr	r2, [r3, #32]
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	f003 031f 	and.w	r3, r3, #31
 80118a2:	6879      	ldr	r1, [r7, #4]
 80118a4:	fa01 f303 	lsl.w	r3, r1, r3
 80118a8:	431a      	orrs	r2, r3
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	621a      	str	r2, [r3, #32]
}
 80118ae:	bf00      	nop
 80118b0:	371c      	adds	r7, #28
 80118b2:	46bd      	mov	sp, r7
 80118b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b8:	4770      	bx	lr
	...

080118bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80118bc:	b480      	push	{r7}
 80118be:	b085      	sub	sp, #20
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80118cc:	2b01      	cmp	r3, #1
 80118ce:	d101      	bne.n	80118d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80118d0:	2302      	movs	r3, #2
 80118d2:	e097      	b.n	8011a04 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2201      	movs	r2, #1
 80118d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2202      	movs	r2, #2
 80118e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	685b      	ldr	r3, [r3, #4]
 80118ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	689b      	ldr	r3, [r3, #8]
 80118f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	4a45      	ldr	r2, [pc, #276]	; (8011a10 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80118fa:	4293      	cmp	r3, r2
 80118fc:	d00e      	beq.n	801191c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	4a44      	ldr	r2, [pc, #272]	; (8011a14 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8011904:	4293      	cmp	r3, r2
 8011906:	d009      	beq.n	801191c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	4a42      	ldr	r2, [pc, #264]	; (8011a18 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 801190e:	4293      	cmp	r3, r2
 8011910:	d004      	beq.n	801191c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	4a41      	ldr	r2, [pc, #260]	; (8011a1c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8011918:	4293      	cmp	r3, r2
 801191a:	d108      	bne.n	801192e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011922:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	68fa      	ldr	r2, [r7, #12]
 801192a:	4313      	orrs	r3, r2
 801192c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8011934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011938:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	68fa      	ldr	r2, [r7, #12]
 8011940:	4313      	orrs	r3, r2
 8011942:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	68fa      	ldr	r2, [r7, #12]
 801194a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	4a2f      	ldr	r2, [pc, #188]	; (8011a10 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8011952:	4293      	cmp	r3, r2
 8011954:	d040      	beq.n	80119d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	4a2e      	ldr	r2, [pc, #184]	; (8011a14 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 801195c:	4293      	cmp	r3, r2
 801195e:	d03b      	beq.n	80119d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011968:	d036      	beq.n	80119d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011972:	d031      	beq.n	80119d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	4a29      	ldr	r2, [pc, #164]	; (8011a20 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 801197a:	4293      	cmp	r3, r2
 801197c:	d02c      	beq.n	80119d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	4a28      	ldr	r2, [pc, #160]	; (8011a24 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8011984:	4293      	cmp	r3, r2
 8011986:	d027      	beq.n	80119d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	4a26      	ldr	r2, [pc, #152]	; (8011a28 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 801198e:	4293      	cmp	r3, r2
 8011990:	d022      	beq.n	80119d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	4a25      	ldr	r2, [pc, #148]	; (8011a2c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8011998:	4293      	cmp	r3, r2
 801199a:	d01d      	beq.n	80119d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	4a23      	ldr	r2, [pc, #140]	; (8011a30 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80119a2:	4293      	cmp	r3, r2
 80119a4:	d018      	beq.n	80119d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	4a22      	ldr	r2, [pc, #136]	; (8011a34 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80119ac:	4293      	cmp	r3, r2
 80119ae:	d013      	beq.n	80119d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	4a18      	ldr	r2, [pc, #96]	; (8011a18 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80119b6:	4293      	cmp	r3, r2
 80119b8:	d00e      	beq.n	80119d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	4a17      	ldr	r2, [pc, #92]	; (8011a1c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80119c0:	4293      	cmp	r3, r2
 80119c2:	d009      	beq.n	80119d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	4a1b      	ldr	r2, [pc, #108]	; (8011a38 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80119ca:	4293      	cmp	r3, r2
 80119cc:	d004      	beq.n	80119d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	4a1a      	ldr	r2, [pc, #104]	; (8011a3c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80119d4:	4293      	cmp	r3, r2
 80119d6:	d10c      	bne.n	80119f2 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80119de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	689b      	ldr	r3, [r3, #8]
 80119e4:	68ba      	ldr	r2, [r7, #8]
 80119e6:	4313      	orrs	r3, r2
 80119e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	68ba      	ldr	r2, [r7, #8]
 80119f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2201      	movs	r2, #1
 80119f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	2200      	movs	r2, #0
 80119fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011a02:	2300      	movs	r3, #0
}
 8011a04:	4618      	mov	r0, r3
 8011a06:	3714      	adds	r7, #20
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0e:	4770      	bx	lr
 8011a10:	40012c00 	.word	0x40012c00
 8011a14:	50012c00 	.word	0x50012c00
 8011a18:	40013400 	.word	0x40013400
 8011a1c:	50013400 	.word	0x50013400
 8011a20:	40000400 	.word	0x40000400
 8011a24:	50000400 	.word	0x50000400
 8011a28:	40000800 	.word	0x40000800
 8011a2c:	50000800 	.word	0x50000800
 8011a30:	40000c00 	.word	0x40000c00
 8011a34:	50000c00 	.word	0x50000c00
 8011a38:	40014000 	.word	0x40014000
 8011a3c:	50014000 	.word	0x50014000

08011a40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011a40:	b480      	push	{r7}
 8011a42:	b085      	sub	sp, #20
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
 8011a48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011a54:	2b01      	cmp	r3, #1
 8011a56:	d101      	bne.n	8011a5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011a58:	2302      	movs	r3, #2
 8011a5a:	e0a5      	b.n	8011ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x168>
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2201      	movs	r2, #1
 8011a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	68db      	ldr	r3, [r3, #12]
 8011a6e:	4313      	orrs	r3, r2
 8011a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	689b      	ldr	r3, [r3, #8]
 8011a7c:	4313      	orrs	r3, r2
 8011a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	685b      	ldr	r3, [r3, #4]
 8011a8a:	4313      	orrs	r3, r2
 8011a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	4313      	orrs	r3, r2
 8011a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	691b      	ldr	r3, [r3, #16]
 8011aa6:	4313      	orrs	r3, r2
 8011aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011ab0:	683b      	ldr	r3, [r7, #0]
 8011ab2:	695b      	ldr	r3, [r3, #20]
 8011ab4:	4313      	orrs	r3, r2
 8011ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ac2:	4313      	orrs	r3, r2
 8011ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	699b      	ldr	r3, [r3, #24]
 8011ad0:	041b      	lsls	r3, r3, #16
 8011ad2:	4313      	orrs	r3, r2
 8011ad4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	4a36      	ldr	r2, [pc, #216]	; (8011bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 8011adc:	4293      	cmp	r3, r2
 8011ade:	d00e      	beq.n	8011afe <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	4a34      	ldr	r2, [pc, #208]	; (8011bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8011ae6:	4293      	cmp	r3, r2
 8011ae8:	d009      	beq.n	8011afe <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	4a33      	ldr	r2, [pc, #204]	; (8011bbc <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 8011af0:	4293      	cmp	r3, r2
 8011af2:	d004      	beq.n	8011afe <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	4a31      	ldr	r2, [pc, #196]	; (8011bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8011afa:	4293      	cmp	r3, r2
 8011afc:	d106      	bne.n	8011b0c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	69db      	ldr	r3, [r3, #28]
 8011b08:	4313      	orrs	r3, r2
 8011b0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	4a28      	ldr	r2, [pc, #160]	; (8011bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 8011b12:	4293      	cmp	r3, r2
 8011b14:	d00e      	beq.n	8011b34 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	4a27      	ldr	r2, [pc, #156]	; (8011bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8011b1c:	4293      	cmp	r3, r2
 8011b1e:	d009      	beq.n	8011b34 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	4a25      	ldr	r2, [pc, #148]	; (8011bbc <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 8011b26:	4293      	cmp	r3, r2
 8011b28:	d004      	beq.n	8011b34 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	4a24      	ldr	r2, [pc, #144]	; (8011bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8011b30:	4293      	cmp	r3, r2
 8011b32:	d130      	bne.n	8011b96 <HAL_TIMEx_ConfigBreakDeadTime+0x156>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b3e:	051b      	lsls	r3, r3, #20
 8011b40:	4313      	orrs	r3, r2
 8011b42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	6a1b      	ldr	r3, [r3, #32]
 8011b4e:	4313      	orrs	r3, r2
 8011b50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b5c:	4313      	orrs	r3, r2
 8011b5e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	4a13      	ldr	r2, [pc, #76]	; (8011bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 8011b66:	4293      	cmp	r3, r2
 8011b68:	d00e      	beq.n	8011b88 <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	4a12      	ldr	r2, [pc, #72]	; (8011bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8011b70:	4293      	cmp	r3, r2
 8011b72:	d009      	beq.n	8011b88 <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	4a10      	ldr	r2, [pc, #64]	; (8011bbc <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 8011b7a:	4293      	cmp	r3, r2
 8011b7c:	d004      	beq.n	8011b88 <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	4a0f      	ldr	r2, [pc, #60]	; (8011bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8011b84:	4293      	cmp	r3, r2
 8011b86:	d106      	bne.n	8011b96 <HAL_TIMEx_ConfigBreakDeadTime+0x156>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b92:	4313      	orrs	r3, r2
 8011b94:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	68fa      	ldr	r2, [r7, #12]
 8011b9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011ba6:	2300      	movs	r3, #0
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3714      	adds	r7, #20
 8011bac:	46bd      	mov	sp, r7
 8011bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb2:	4770      	bx	lr
 8011bb4:	40012c00 	.word	0x40012c00
 8011bb8:	50012c00 	.word	0x50012c00
 8011bbc:	40013400 	.word	0x40013400
 8011bc0:	50013400 	.word	0x50013400

08011bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011bc4:	b480      	push	{r7}
 8011bc6:	b083      	sub	sp, #12
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011bcc:	bf00      	nop
 8011bce:	370c      	adds	r7, #12
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd6:	4770      	bx	lr

08011bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011bd8:	b480      	push	{r7}
 8011bda:	b083      	sub	sp, #12
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011be0:	bf00      	nop
 8011be2:	370c      	adds	r7, #12
 8011be4:	46bd      	mov	sp, r7
 8011be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bea:	4770      	bx	lr

08011bec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011bec:	b480      	push	{r7}
 8011bee:	b083      	sub	sp, #12
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011bf4:	bf00      	nop
 8011bf6:	370c      	adds	r7, #12
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfe:	4770      	bx	lr

08011c00 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8011c08:	bf00      	nop
 8011c0a:	370c      	adds	r7, #12
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c12:	4770      	bx	lr

08011c14 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8011c14:	b480      	push	{r7}
 8011c16:	b083      	sub	sp, #12
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8011c1c:	bf00      	nop
 8011c1e:	370c      	adds	r7, #12
 8011c20:	46bd      	mov	sp, r7
 8011c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c26:	4770      	bx	lr

08011c28 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8011c28:	b480      	push	{r7}
 8011c2a:	b083      	sub	sp, #12
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8011c30:	bf00      	nop
 8011c32:	370c      	adds	r7, #12
 8011c34:	46bd      	mov	sp, r7
 8011c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3a:	4770      	bx	lr

08011c3c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8011c3c:	b480      	push	{r7}
 8011c3e:	b083      	sub	sp, #12
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8011c44:	bf00      	nop
 8011c46:	370c      	adds	r7, #12
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4e:	4770      	bx	lr

08011c50 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b083      	sub	sp, #12
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	f043 0201 	orr.w	r2, r3, #1
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	601a      	str	r2, [r3, #0]
}
 8011c64:	bf00      	nop
 8011c66:	370c      	adds	r7, #12
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6e:	4770      	bx	lr

08011c70 <LL_DLYB_Disable>:
  * @param  DLYBx DLYB Instance.
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Disable(DLYB_TypeDef *DLYBx)
{
 8011c70:	b480      	push	{r7}
 8011c72:	b083      	sub	sp, #12
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(DLYBx->CR, DLYB_CR_DEN);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	f023 0201 	bic.w	r2, r3, #1
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	601a      	str	r2, [r3, #0]
}
 8011c84:	bf00      	nop
 8011c86:	370c      	adds	r7, #12
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8e:	4770      	bx	lr

08011c90 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b086      	sub	sp, #24
 8011c94:	af02      	add	r7, sp, #8
 8011c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8011c9c:	f7f5 fb84 	bl	80073a8 <HAL_GetTick>
 8011ca0:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d102      	bne.n	8011cae <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8011ca8:	2301      	movs	r3, #1
 8011caa:	73fb      	strb	r3, [r7, #15]
 8011cac:	e137      	b.n	8011f1e <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	4a76      	ldr	r2, [pc, #472]	; (8011e8c <HAL_XSPI_Init+0x1fc>)
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	d008      	beq.n	8011cca <HAL_XSPI_Init+0x3a>
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	4a74      	ldr	r2, [pc, #464]	; (8011e90 <HAL_XSPI_Init+0x200>)
 8011cbe:	4293      	cmp	r3, r2
 8011cc0:	d003      	beq.n	8011cca <HAL_XSPI_Init+0x3a>
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	4a73      	ldr	r2, [pc, #460]	; (8011e94 <HAL_XSPI_Init+0x204>)
 8011cc8:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	4a72      	ldr	r2, [pc, #456]	; (8011e98 <HAL_XSPI_Init+0x208>)
 8011cd0:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	4a6d      	ldr	r2, [pc, #436]	; (8011e8c <HAL_XSPI_Init+0x1fc>)
 8011cd8:	4293      	cmp	r3, r2
 8011cda:	d008      	beq.n	8011cee <HAL_XSPI_Init+0x5e>
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	4a6b      	ldr	r2, [pc, #428]	; (8011e90 <HAL_XSPI_Init+0x200>)
 8011ce2:	4293      	cmp	r3, r2
 8011ce4:	d003      	beq.n	8011cee <HAL_XSPI_Init+0x5e>
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	4a6a      	ldr	r2, [pc, #424]	; (8011e94 <HAL_XSPI_Init+0x204>)
 8011cec:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	4a66      	ldr	r2, [pc, #408]	; (8011e8c <HAL_XSPI_Init+0x1fc>)
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	d008      	beq.n	8011d0a <HAL_XSPI_Init+0x7a>
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	4a64      	ldr	r2, [pc, #400]	; (8011e90 <HAL_XSPI_Init+0x200>)
 8011cfe:	4293      	cmp	r3, r2
 8011d00:	d003      	beq.n	8011d0a <HAL_XSPI_Init+0x7a>
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	4a63      	ldr	r2, [pc, #396]	; (8011e94 <HAL_XSPI_Init+0x204>)
 8011d08:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	f040 8102 	bne.w	8011f1e <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f7ef fcec 	bl	80016f8 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8011d20:	f241 3188 	movw	r1, #5000	; 0x1388
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f000 fc82 	bl	801262e <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	689a      	ldr	r2, [r3, #8]
 8011d30:	4b5a      	ldr	r3, [pc, #360]	; (8011e9c <HAL_XSPI_Init+0x20c>)
 8011d32:	4013      	ands	r3, r2
 8011d34:	687a      	ldr	r2, [r7, #4]
 8011d36:	68d1      	ldr	r1, [r2, #12]
 8011d38:	687a      	ldr	r2, [r7, #4]
 8011d3a:	6912      	ldr	r2, [r2, #16]
 8011d3c:	0412      	lsls	r2, r2, #16
 8011d3e:	4311      	orrs	r1, r2
 8011d40:	687a      	ldr	r2, [r7, #4]
 8011d42:	6952      	ldr	r2, [r2, #20]
 8011d44:	3a01      	subs	r2, #1
 8011d46:	0212      	lsls	r2, r2, #8
 8011d48:	4311      	orrs	r1, r2
 8011d4a:	687a      	ldr	r2, [r7, #4]
 8011d4c:	69d2      	ldr	r2, [r2, #28]
 8011d4e:	4311      	orrs	r1, r2
 8011d50:	687a      	ldr	r2, [r7, #4]
 8011d52:	6812      	ldr	r2, [r2, #0]
 8011d54:	430b      	orrs	r3, r1
 8011d56:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	4a4b      	ldr	r2, [pc, #300]	; (8011e8c <HAL_XSPI_Init+0x1fc>)
 8011d5e:	4293      	cmp	r3, r2
 8011d60:	d00e      	beq.n	8011d80 <HAL_XSPI_Init+0xf0>
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	4a4a      	ldr	r2, [pc, #296]	; (8011e90 <HAL_XSPI_Init+0x200>)
 8011d68:	4293      	cmp	r3, r2
 8011d6a:	d009      	beq.n	8011d80 <HAL_XSPI_Init+0xf0>
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	4a48      	ldr	r2, [pc, #288]	; (8011e94 <HAL_XSPI_Init+0x204>)
 8011d72:	4293      	cmp	r3, r2
 8011d74:	d004      	beq.n	8011d80 <HAL_XSPI_Init+0xf0>
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	4a49      	ldr	r2, [pc, #292]	; (8011ea0 <HAL_XSPI_Init+0x210>)
 8011d7c:	4293      	cmp	r3, r2
 8011d7e:	d10a      	bne.n	8011d96 <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	689b      	ldr	r3, [r3, #8]
 8011d86:	f023 0108 	bic.w	r1, r3, #8
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	430a      	orrs	r2, r1
 8011d94:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	68db      	ldr	r3, [r3, #12]
 8011d9c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	6a1a      	ldr	r2, [r3, #32]
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	430a      	orrs	r2, r1
 8011daa:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	691b      	ldr	r3, [r3, #16]
 8011db2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dba:	041a      	lsls	r2, r3, #16
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	430a      	orrs	r2, r1
 8011dc2:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	4a30      	ldr	r2, [pc, #192]	; (8011e8c <HAL_XSPI_Init+0x1fc>)
 8011dca:	4293      	cmp	r3, r2
 8011dcc:	d00e      	beq.n	8011dec <HAL_XSPI_Init+0x15c>
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	4a2f      	ldr	r2, [pc, #188]	; (8011e90 <HAL_XSPI_Init+0x200>)
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d009      	beq.n	8011dec <HAL_XSPI_Init+0x15c>
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	4a2d      	ldr	r2, [pc, #180]	; (8011e94 <HAL_XSPI_Init+0x204>)
 8011dde:	4293      	cmp	r3, r2
 8011de0:	d004      	beq.n	8011dec <HAL_XSPI_Init+0x15c>
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	4a2e      	ldr	r2, [pc, #184]	; (8011ea0 <HAL_XSPI_Init+0x210>)
 8011de8:	4293      	cmp	r3, r2
 8011dea:	d10a      	bne.n	8011e02 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	691b      	ldr	r3, [r3, #16]
 8011df2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	430a      	orrs	r2, r1
 8011e00:	611a      	str	r2, [r3, #16]
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	687a      	ldr	r2, [r7, #4]
 8011e08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8011e0a:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	685b      	ldr	r3, [r3, #4]
 8011e1a:	3b01      	subs	r3, #1
 8011e1c:	021a      	lsls	r2, r3, #8
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	430a      	orrs	r2, r1
 8011e24:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e2a:	9300      	str	r3, [sp, #0]
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	2120      	movs	r1, #32
 8011e32:	6878      	ldr	r0, [r7, #4]
 8011e34:	f000 fd60 	bl	80128f8 <XSPI_WaitFlagStateUntilTimeout>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8011e3c:	7bfb      	ldrb	r3, [r7, #15]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d16d      	bne.n	8011f1e <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	68db      	ldr	r3, [r3, #12]
 8011e48:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	430a      	orrs	r2, r1
 8011e56:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	4a0e      	ldr	r2, [pc, #56]	; (8011e98 <HAL_XSPI_Init+0x208>)
 8011e5e:	4293      	cmp	r3, r2
 8011e60:	d004      	beq.n	8011e6c <HAL_XSPI_Init+0x1dc>
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	4a0f      	ldr	r2, [pc, #60]	; (8011ea4 <HAL_XSPI_Init+0x214>)
 8011e68:	4293      	cmp	r3, r2
 8011e6a:	d11d      	bne.n	8011ea8 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e70:	9300      	str	r3, [sp, #0]
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	2200      	movs	r2, #0
 8011e76:	2120      	movs	r1, #32
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f000 fd3d 	bl	80128f8 <XSPI_WaitFlagStateUntilTimeout>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8011e82:	7bfb      	ldrb	r3, [r7, #15]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d00f      	beq.n	8011ea8 <HAL_XSPI_Init+0x218>
          {
            return status;
 8011e88:	7bfb      	ldrb	r3, [r7, #15]
 8011e8a:	e049      	b.n	8011f20 <HAL_XSPI_Init+0x290>
 8011e8c:	420d1400 	.word	0x420d1400
 8011e90:	520d1400 	.word	0x520d1400
 8011e94:	420d2400 	.word	0x420d2400
 8011e98:	420d3400 	.word	0x420d3400
 8011e9c:	f8e0c0fc 	.word	0xf8e0c0fc
 8011ea0:	520d2400 	.word	0x520d2400
 8011ea4:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	689a      	ldr	r2, [r3, #8]
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	430a      	orrs	r2, r1
 8011ebc:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8011ec6:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ed2:	431a      	orrs	r2, r3
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	430a      	orrs	r2, r1
 8011eda:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	681a      	ldr	r2, [r3, #0]
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	f042 0201 	orr.w	r2, r2, #1
 8011eec:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	699b      	ldr	r3, [r3, #24]
 8011ef2:	2b02      	cmp	r3, #2
 8011ef4:	d107      	bne.n	8011f06 <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	689a      	ldr	r2, [r3, #8]
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	f042 0202 	orr.w	r2, r2, #2
 8011f04:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	68db      	ldr	r3, [r3, #12]
 8011f0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011f0e:	d103      	bne.n	8011f18 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2201      	movs	r2, #1
 8011f14:	655a      	str	r2, [r3, #84]	; 0x54
 8011f16:	e002      	b.n	8011f1e <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	2202      	movs	r2, #2
 8011f1c:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
  }
  return status;
 8011f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f20:	4618      	mov	r0, r3
 8011f22:	3710      	adds	r7, #16
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}

08011f28 <HAL_XSPI_DeInit>:
  * @brief  De-Initialize the XSPI peripheral.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_DeInit(XSPI_HandleTypeDef *hxspi)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011f30:	2300      	movs	r3, #0
 8011f32:	73fb      	strb	r3, [r7, #15]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d102      	bne.n	8011f40 <HAL_XSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8011f3a:	2301      	movs	r3, #1
 8011f3c:	73fb      	strb	r3, [r7, #15]
 8011f3e:	e015      	b.n	8011f6c <HAL_XSPI_DeInit+0x44>
    /* No error code can be set as the handler is null */
  }
  else
  {
    /* Disable XSPI */
    HAL_XSPI_DISABLE(hxspi);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	681a      	ldr	r2, [r3, #0]
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	f022 0201 	bic.w	r2, r2, #1
 8011f4e:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after XSPI disable */
    CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	689a      	ldr	r2, [r3, #8]
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	f022 0202 	bic.w	r2, r2, #2
 8011f5e:	609a      	str	r2, [r3, #8]

    /* De-initialize the low level hardware */
    hxspi->MspDeInitCallback(hxspi);
#else
    /* De-initialize the low-level hardware */
    HAL_XSPI_MspDeInit(hxspi);
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f7ef fbe1 	bl	8001728 <HAL_XSPI_MspDeInit>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hxspi->State = HAL_XSPI_STATE_RESET;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2200      	movs	r2, #0
 8011f6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  return status;
 8011f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3710      	adds	r7, #16
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
	...

08011f78 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b08a      	sub	sp, #40	; 0x28
 8011f7c:	af02      	add	r7, sp, #8
 8011f7e:	60f8      	str	r0, [r7, #12]
 8011f80:	60b9      	str	r1, [r7, #8]
 8011f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8011f84:	f7f5 fa10 	bl	80073a8 <HAL_GetTick>
 8011f88:	61b8      	str	r0, [r7, #24]

  /* Check the parameters of the command structure */
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	689b      	ldr	r3, [r3, #8]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d125      	bne.n	8011fde <HAL_XSPI_Command+0x66>
  {
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	4a68      	ldr	r2, [pc, #416]	; (8012138 <HAL_XSPI_Command+0x1c0>)
 8011f98:	4293      	cmp	r3, r2
 8011f9a:	d020      	beq.n	8011fde <HAL_XSPI_Command+0x66>
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	4a66      	ldr	r2, [pc, #408]	; (801213c <HAL_XSPI_Command+0x1c4>)
 8011fa2:	4293      	cmp	r3, r2
 8011fa4:	d01b      	beq.n	8011fde <HAL_XSPI_Command+0x66>
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	4a65      	ldr	r2, [pc, #404]	; (8012140 <HAL_XSPI_Command+0x1c8>)
 8011fac:	4293      	cmp	r3, r2
 8011fae:	d016      	beq.n	8011fde <HAL_XSPI_Command+0x66>
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	4a63      	ldr	r2, [pc, #396]	; (8012144 <HAL_XSPI_Command+0x1cc>)
 8011fb6:	4293      	cmp	r3, r2
 8011fb8:	d011      	beq.n	8011fde <HAL_XSPI_Command+0x66>
    {
      assert_param(IS_OCTOSPI_IO_SELECT(pCmd->IOSelect));
    }
#if defined(HSPI1)
    else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	4a62      	ldr	r2, [pc, #392]	; (8012148 <HAL_XSPI_Command+0x1d0>)
 8011fc0:	4293      	cmp	r3, r2
 8011fc2:	d00c      	beq.n	8011fde <HAL_XSPI_Command+0x66>
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	4a60      	ldr	r2, [pc, #384]	; (801214c <HAL_XSPI_Command+0x1d4>)
 8011fca:	4293      	cmp	r3, r2
 8011fcc:	d007      	beq.n	8011fde <HAL_XSPI_Command+0x66>
      assert_param(IS_HSPI_IO_SELECT(pCmd->IOSelect));
    }
#endif /* HSPI1 */
    else
    {
      hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fd2:	f043 0208 	orr.w	r2, r3, #8
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8011fda:	2301      	movs	r3, #1
 8011fdc:	e0a8      	b.n	8012130 <HAL_XSPI_Command+0x1b8>
  {
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	4a55      	ldr	r2, [pc, #340]	; (8012138 <HAL_XSPI_Command+0x1c0>)
 8011fe4:	4293      	cmp	r3, r2
 8011fe6:	d020      	beq.n	801202a <HAL_XSPI_Command+0xb2>
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	4a53      	ldr	r2, [pc, #332]	; (801213c <HAL_XSPI_Command+0x1c4>)
 8011fee:	4293      	cmp	r3, r2
 8011ff0:	d01b      	beq.n	801202a <HAL_XSPI_Command+0xb2>
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	4a52      	ldr	r2, [pc, #328]	; (8012140 <HAL_XSPI_Command+0x1c8>)
 8011ff8:	4293      	cmp	r3, r2
 8011ffa:	d016      	beq.n	801202a <HAL_XSPI_Command+0xb2>
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	4a50      	ldr	r2, [pc, #320]	; (8012144 <HAL_XSPI_Command+0x1cc>)
 8012002:	4293      	cmp	r3, r2
 8012004:	d011      	beq.n	801202a <HAL_XSPI_Command+0xb2>
  {
    assert_param(IS_OCTOSPI_DATA_MODE(pCmd->DataMode));
  }
#if defined(HSPI1)
  else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	4a4f      	ldr	r2, [pc, #316]	; (8012148 <HAL_XSPI_Command+0x1d0>)
 801200c:	4293      	cmp	r3, r2
 801200e:	d00c      	beq.n	801202a <HAL_XSPI_Command+0xb2>
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	4a4d      	ldr	r2, [pc, #308]	; (801214c <HAL_XSPI_Command+0x1d4>)
 8012016:	4293      	cmp	r3, r2
 8012018:	d007      	beq.n	801202a <HAL_XSPI_Command+0xb2>
    assert_param(IS_HSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
  }
#endif /* HSPI1 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801201e:	f043 0208 	orr.w	r2, r3, #8
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	659a      	str	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8012026:	2301      	movs	r3, #1
 8012028:	e082      	b.n	8012130 <HAL_XSPI_Command+0x1b8>
  }

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801202e:	2b00      	cmp	r3, #0

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
  assert_param(IS_XSPI_SIOO_MODE(pCmd->SIOOMode));

  /* Check the state of the driver */
  state = hxspi->State;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012034:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	2b02      	cmp	r3, #2
 801203a:	d104      	bne.n	8012046 <HAL_XSPI_Command+0xce>
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	68db      	ldr	r3, [r3, #12]
 8012040:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012044:	d115      	bne.n	8012072 <HAL_XSPI_Command+0xfa>
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	2b14      	cmp	r3, #20
 801204a:	d107      	bne.n	801205c <HAL_XSPI_Command+0xe4>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	2b02      	cmp	r3, #2
 8012052:	d00e      	beq.n	8012072 <HAL_XSPI_Command+0xfa>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8012054:	68bb      	ldr	r3, [r7, #8]
 8012056:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8012058:	2b03      	cmp	r3, #3
 801205a:	d00a      	beq.n	8012072 <HAL_XSPI_Command+0xfa>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 801205c:	697b      	ldr	r3, [r7, #20]
 801205e:	2b24      	cmp	r3, #36	; 0x24
 8012060:	d15e      	bne.n	8012120 <HAL_XSPI_Command+0x1a8>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 8012066:	2b01      	cmp	r3, #1
 8012068:	d003      	beq.n	8012072 <HAL_XSPI_Command+0xfa>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 801206e:	2b03      	cmp	r3, #3
 8012070:	d156      	bne.n	8012120 <HAL_XSPI_Command+0x1a8>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	9300      	str	r3, [sp, #0]
 8012076:	69bb      	ldr	r3, [r7, #24]
 8012078:	2200      	movs	r2, #0
 801207a:	2120      	movs	r1, #32
 801207c:	68f8      	ldr	r0, [r7, #12]
 801207e:	f000 fc3b 	bl	80128f8 <XSPI_WaitFlagStateUntilTimeout>
 8012082:	4603      	mov	r3, r0
 8012084:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8012086:	7ffb      	ldrb	r3, [r7, #31]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d146      	bne.n	801211a <HAL_XSPI_Command+0x1a2>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	2200      	movs	r2, #0
 8012090:	659a      	str	r2, [r3, #88]	; 0x58

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 8012092:	68b9      	ldr	r1, [r7, #8]
 8012094:	68f8      	ldr	r0, [r7, #12]
 8012096:	f000 fc67 	bl	8012968 <XSPI_ConfigCmd>
 801209a:	4603      	mov	r3, r0
 801209c:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 801209e:	7ffb      	ldrb	r3, [r7, #31]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d143      	bne.n	801212c <HAL_XSPI_Command+0x1b4>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 80120a4:	68bb      	ldr	r3, [r7, #8]
 80120a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d10e      	bne.n	80120ca <HAL_XSPI_Command+0x152>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	9300      	str	r3, [sp, #0]
 80120b0:	69bb      	ldr	r3, [r7, #24]
 80120b2:	2201      	movs	r2, #1
 80120b4:	2102      	movs	r1, #2
 80120b6:	68f8      	ldr	r0, [r7, #12]
 80120b8:	f000 fc1e 	bl	80128f8 <XSPI_WaitFlagStateUntilTimeout>
 80120bc:	4603      	mov	r3, r0
 80120be:	77fb      	strb	r3, [r7, #31]

          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	2202      	movs	r2, #2
 80120c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80120c8:	e030      	b.n	801212c <HAL_XSPI_Command+0x1b4>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d103      	bne.n	80120da <HAL_XSPI_Command+0x162>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	2204      	movs	r2, #4
 80120d6:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80120d8:	e028      	b.n	801212c <HAL_XSPI_Command+0x1b4>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	2b01      	cmp	r3, #1
 80120e0:	d10b      	bne.n	80120fa <HAL_XSPI_Command+0x182>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120e6:	2b24      	cmp	r3, #36	; 0x24
 80120e8:	d103      	bne.n	80120f2 <HAL_XSPI_Command+0x17a>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	2204      	movs	r2, #4
 80120ee:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80120f0:	e01c      	b.n	801212c <HAL_XSPI_Command+0x1b4>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	2214      	movs	r2, #20
 80120f6:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80120f8:	e018      	b.n	801212c <HAL_XSPI_Command+0x1b4>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	2b02      	cmp	r3, #2
 8012100:	d114      	bne.n	801212c <HAL_XSPI_Command+0x1b4>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012106:	2b14      	cmp	r3, #20
 8012108:	d103      	bne.n	8012112 <HAL_XSPI_Command+0x19a>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	2204      	movs	r2, #4
 801210e:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8012110:	e00c      	b.n	801212c <HAL_XSPI_Command+0x1b4>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	2224      	movs	r2, #36	; 0x24
 8012116:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8012118:	e008      	b.n	801212c <HAL_XSPI_Command+0x1b4>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 801211a:	2302      	movs	r3, #2
 801211c:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 801211e:	e005      	b.n	801212c <HAL_XSPI_Command+0x1b4>
    }
  }
  else
  {
    status = HAL_ERROR;
 8012120:	2301      	movs	r3, #1
 8012122:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	2210      	movs	r2, #16
 8012128:	659a      	str	r2, [r3, #88]	; 0x58
 801212a:	e000      	b.n	801212e <HAL_XSPI_Command+0x1b6>
    if (status == HAL_OK)
 801212c:	bf00      	nop
  }

  return status;
 801212e:	7ffb      	ldrb	r3, [r7, #31]
}
 8012130:	4618      	mov	r0, r3
 8012132:	3720      	adds	r7, #32
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}
 8012138:	420d1400 	.word	0x420d1400
 801213c:	520d1400 	.word	0x520d1400
 8012140:	420d2400 	.word	0x420d2400
 8012144:	520d2400 	.word	0x520d2400
 8012148:	420d3400 	.word	0x420d3400
 801214c:	520d3400 	.word	0x520d3400

08012150 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b08a      	sub	sp, #40	; 0x28
 8012154:	af02      	add	r7, sp, #8
 8012156:	60f8      	str	r0, [r7, #12]
 8012158:	60b9      	str	r1, [r7, #8]
 801215a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801215c:	f7f5 f924 	bl	80073a8 <HAL_GetTick>
 8012160:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	3350      	adds	r3, #80	; 0x50
 8012168:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d105      	bne.n	801217c <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8012170:	2301      	movs	r3, #1
 8012172:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	2208      	movs	r2, #8
 8012178:	659a      	str	r2, [r3, #88]	; 0x58
 801217a:	e057      	b.n	801222c <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012180:	2b04      	cmp	r3, #4
 8012182:	d14e      	bne.n	8012222 <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801218a:	1c5a      	adds	r2, r3, #1
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	649a      	str	r2, [r3, #72]	; 0x48
      hxspi->XferSize  = hxspi->XferCount;
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	645a      	str	r2, [r3, #68]	; 0x44
      hxspi->pBuffPtr  = pData;
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	68ba      	ldr	r2, [r7, #8]
 801219c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	681a      	ldr	r2, [r3, #0]
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80121ac:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	9300      	str	r3, [sp, #0]
 80121b2:	69bb      	ldr	r3, [r7, #24]
 80121b4:	2201      	movs	r2, #1
 80121b6:	2104      	movs	r1, #4
 80121b8:	68f8      	ldr	r0, [r7, #12]
 80121ba:	f000 fb9d 	bl	80128f8 <XSPI_WaitFlagStateUntilTimeout>
 80121be:	4603      	mov	r3, r0
 80121c0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80121c2:	7ffb      	ldrb	r3, [r7, #31]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d113      	bne.n	80121f0 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121cc:	781a      	ldrb	r2, [r3, #0]
 80121ce:	697b      	ldr	r3, [r7, #20]
 80121d0:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121d6:	1c5a      	adds	r2, r3, #1
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	641a      	str	r2, [r3, #64]	; 0x40
        hxspi->XferCount--;
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80121e0:	1e5a      	subs	r2, r3, #1
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hxspi->XferCount > 0U);
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d1df      	bne.n	80121ae <HAL_XSPI_Transmit+0x5e>
 80121ee:	e000      	b.n	80121f2 <HAL_XSPI_Transmit+0xa2>
          break;
 80121f0:	bf00      	nop

      if (status == HAL_OK)
 80121f2:	7ffb      	ldrb	r3, [r7, #31]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d119      	bne.n	801222c <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	9300      	str	r3, [sp, #0]
 80121fc:	69bb      	ldr	r3, [r7, #24]
 80121fe:	2201      	movs	r2, #1
 8012200:	2102      	movs	r1, #2
 8012202:	68f8      	ldr	r0, [r7, #12]
 8012204:	f000 fb78 	bl	80128f8 <XSPI_WaitFlagStateUntilTimeout>
 8012208:	4603      	mov	r3, r0
 801220a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 801220c:	7ffb      	ldrb	r3, [r7, #31]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d10c      	bne.n	801222c <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	2202      	movs	r2, #2
 8012218:	625a      	str	r2, [r3, #36]	; 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	2202      	movs	r2, #2
 801221e:	655a      	str	r2, [r3, #84]	; 0x54
 8012220:	e004      	b.n	801222c <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8012222:	2301      	movs	r3, #1
 8012224:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	2210      	movs	r2, #16
 801222a:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 801222c:	7ffb      	ldrb	r3, [r7, #31]
}
 801222e:	4618      	mov	r0, r3
 8012230:	3720      	adds	r7, #32
 8012232:	46bd      	mov	sp, r7
 8012234:	bd80      	pop	{r7, pc}

08012236 <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 8012236:	b580      	push	{r7, lr}
 8012238:	b08c      	sub	sp, #48	; 0x30
 801223a:	af02      	add	r7, sp, #8
 801223c:	60f8      	str	r0, [r7, #12]
 801223e:	60b9      	str	r1, [r7, #8]
 8012240:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8012242:	f7f5 f8b1 	bl	80073a8 <HAL_GetTick>
 8012246:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	3350      	adds	r3, #80	; 0x50
 801224e:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012256:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8012260:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d106      	bne.n	8012276 <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8012268:	2301      	movs	r3, #1
 801226a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	2208      	movs	r2, #8
 8012272:	659a      	str	r2, [r3, #88]	; 0x58
 8012274:	e07c      	b.n	8012370 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801227a:	2b04      	cmp	r3, #4
 801227c:	d172      	bne.n	8012364 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012284:	1c5a      	adds	r2, r3, #1
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	649a      	str	r2, [r3, #72]	; 0x48
      hxspi->XferSize  = hxspi->XferCount;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	645a      	str	r2, [r3, #68]	; 0x44
      hxspi->pBuffPtr  = pData;
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	68ba      	ldr	r2, [r7, #8]
 8012296:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80122aa:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	68db      	ldr	r3, [r3, #12]
 80122b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80122b4:	d104      	bne.n	80122c0 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	69ba      	ldr	r2, [r7, #24]
 80122bc:	649a      	str	r2, [r3, #72]	; 0x48
 80122be:	e011      	b.n	80122e4 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80122c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d004      	beq.n	80122da <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	69ba      	ldr	r2, [r7, #24]
 80122d6:	649a      	str	r2, [r3, #72]	; 0x48
 80122d8:	e004      	b.n	80122e4 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	697a      	ldr	r2, [r7, #20]
 80122e0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	9300      	str	r3, [sp, #0]
 80122e8:	6a3b      	ldr	r3, [r7, #32]
 80122ea:	2201      	movs	r2, #1
 80122ec:	2106      	movs	r1, #6
 80122ee:	68f8      	ldr	r0, [r7, #12]
 80122f0:	f000 fb02 	bl	80128f8 <XSPI_WaitFlagStateUntilTimeout>
 80122f4:	4603      	mov	r3, r0
 80122f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80122fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d114      	bne.n	801232c <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012306:	69fa      	ldr	r2, [r7, #28]
 8012308:	7812      	ldrb	r2, [r2, #0]
 801230a:	b2d2      	uxtb	r2, r2
 801230c:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012312:	1c5a      	adds	r2, r3, #1
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	641a      	str	r2, [r3, #64]	; 0x40
        hxspi->XferCount--;
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801231c:	1e5a      	subs	r2, r3, #1
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hxspi->XferCount > 0U);
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012326:	2b00      	cmp	r3, #0
 8012328:	d1dc      	bne.n	80122e4 <HAL_XSPI_Receive+0xae>
 801232a:	e000      	b.n	801232e <HAL_XSPI_Receive+0xf8>
          break;
 801232c:	bf00      	nop

      if (status == HAL_OK)
 801232e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012332:	2b00      	cmp	r3, #0
 8012334:	d11c      	bne.n	8012370 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	9300      	str	r3, [sp, #0]
 801233a:	6a3b      	ldr	r3, [r7, #32]
 801233c:	2201      	movs	r2, #1
 801233e:	2102      	movs	r1, #2
 8012340:	68f8      	ldr	r0, [r7, #12]
 8012342:	f000 fad9 	bl	80128f8 <XSPI_WaitFlagStateUntilTimeout>
 8012346:	4603      	mov	r3, r0
 8012348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 801234c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012350:	2b00      	cmp	r3, #0
 8012352:	d10d      	bne.n	8012370 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	2202      	movs	r2, #2
 801235a:	625a      	str	r2, [r3, #36]	; 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	2202      	movs	r2, #2
 8012360:	655a      	str	r2, [r3, #84]	; 0x54
 8012362:	e005      	b.n	8012370 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8012364:	2301      	movs	r3, #1
 8012366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	2210      	movs	r2, #16
 801236e:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 8012370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012374:	4618      	mov	r0, r3
 8012376:	3728      	adds	r7, #40	; 0x28
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}

0801237c <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, XSPI_AutoPollingTypeDef *const pCfg,
                                       uint32_t Timeout)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b08a      	sub	sp, #40	; 0x28
 8012380:	af02      	add	r7, sp, #8
 8012382:	60f8      	str	r0, [r7, #12]
 8012384:	60b9      	str	r1, [r7, #8]
 8012386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8012388:	f7f5 f80e 	bl	80073a8 <HAL_GetTick>
 801238c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012394:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 801239e:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80123a4:	2b04      	cmp	r3, #4
 80123a6:	d167      	bne.n	8012478 <HAL_XSPI_AutoPolling+0xfc>
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	68db      	ldr	r3, [r3, #12]
 80123ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80123b0:	d162      	bne.n	8012478 <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	9300      	str	r3, [sp, #0]
 80123b6:	69bb      	ldr	r3, [r7, #24]
 80123b8:	2200      	movs	r2, #0
 80123ba:	2120      	movs	r1, #32
 80123bc:	68f8      	ldr	r0, [r7, #12]
 80123be:	f000 fa9b 	bl	80128f8 <XSPI_WaitFlagStateUntilTimeout>
 80123c2:	4603      	mov	r3, r0
 80123c4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80123c6:	7ffb      	ldrb	r3, [r7, #31]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d152      	bne.n	8012472 <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	68ba      	ldr	r2, [r7, #8]
 80123d2:	6812      	ldr	r2, [r2, #0]
 80123d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	68ba      	ldr	r2, [r7, #8]
 80123de:	6852      	ldr	r2, [r2, #4]
 80123e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	68ba      	ldr	r2, [r7, #8]
 80123ea:	6912      	ldr	r2, [r2, #16]
 80123ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	6899      	ldr	r1, [r3, #8]
 80123fe:	68bb      	ldr	r3, [r7, #8]
 8012400:	68db      	ldr	r3, [r3, #12]
 8012402:	430b      	orrs	r3, r1
 8012404:	431a      	orrs	r2, r3
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 801240e:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	68db      	ldr	r3, [r3, #12]
 8012414:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012418:	d104      	bne.n	8012424 <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	697a      	ldr	r2, [r7, #20]
 8012420:	649a      	str	r2, [r3, #72]	; 0x48
 8012422:	e011      	b.n	8012448 <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801242c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012430:	2b00      	cmp	r3, #0
 8012432:	d004      	beq.n	801243e <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	697a      	ldr	r2, [r7, #20]
 801243a:	649a      	str	r2, [r3, #72]	; 0x48
 801243c:	e004      	b.n	8012448 <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	693a      	ldr	r2, [r7, #16]
 8012444:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	9300      	str	r3, [sp, #0]
 801244c:	69bb      	ldr	r3, [r7, #24]
 801244e:	2201      	movs	r2, #1
 8012450:	2108      	movs	r1, #8
 8012452:	68f8      	ldr	r0, [r7, #12]
 8012454:	f000 fa50 	bl	80128f8 <XSPI_WaitFlagStateUntilTimeout>
 8012458:	4603      	mov	r3, r0
 801245a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 801245c:	7ffb      	ldrb	r3, [r7, #31]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d110      	bne.n	8012484 <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	2208      	movs	r2, #8
 8012468:	625a      	str	r2, [r3, #36]	; 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	2202      	movs	r2, #2
 801246e:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8012470:	e008      	b.n	8012484 <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
 8012472:	2302      	movs	r3, #2
 8012474:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 8012476:	e005      	b.n	8012484 <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
 8012478:	2301      	movs	r3, #1
 801247a:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	2210      	movs	r2, #16
 8012480:	659a      	str	r2, [r3, #88]	; 0x58
 8012482:	e000      	b.n	8012486 <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
 8012484:	bf00      	nop
  }

  return status;
 8012486:	7ffb      	ldrb	r3, [r7, #31]
}
 8012488:	4618      	mov	r0, r3
 801248a:	3720      	adds	r7, #32
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}

08012490 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, XSPI_MemoryMappedTypeDef *const pCfg)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b086      	sub	sp, #24
 8012494:	af02      	add	r7, sp, #8
 8012496:	6078      	str	r0, [r7, #4]
 8012498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801249a:	f7f4 ff85 	bl	80073a8 <HAL_GetTick>
 801249e:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124a4:	2b04      	cmp	r3, #4
 80124a6:	d136      	bne.n	8012516 <HAL_XSPI_MemoryMapped+0x86>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80124ac:	9300      	str	r3, [sp, #0]
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	2200      	movs	r2, #0
 80124b2:	2120      	movs	r1, #32
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	f000 fa1f 	bl	80128f8 <XSPI_WaitFlagStateUntilTimeout>
 80124ba:	4603      	mov	r3, r0
 80124bc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80124be:	7bfb      	ldrb	r3, [r7, #15]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d12d      	bne.n	8012520 <HAL_XSPI_MemoryMapped+0x90>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2288      	movs	r2, #136	; 0x88
 80124c8:	655a      	str	r2, [r3, #84]	; 0x54

      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	2b08      	cmp	r3, #8
 80124d0:	d111      	bne.n	80124f6 <HAL_XSPI_MemoryMapped+0x66>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	683a      	ldr	r2, [r7, #0]
 80124d8:	6852      	ldr	r2, [r2, #4]
 80124da:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	2210      	movs	r2, #16
 80124e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	681a      	ldr	r2, [r3, #0]
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80124f4:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8012500:	f023 0308 	bic.w	r3, r3, #8
 8012504:	683a      	ldr	r2, [r7, #0]
 8012506:	6812      	ldr	r2, [r2, #0]
 8012508:	431a      	orrs	r2, r3
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8012512:	601a      	str	r2, [r3, #0]
 8012514:	e004      	b.n	8012520 <HAL_XSPI_MemoryMapped+0x90>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8012516:	2301      	movs	r3, #1
 8012518:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2210      	movs	r2, #16
 801251e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 8012520:	7bfb      	ldrb	r3, [r7, #15]
}
 8012522:	4618      	mov	r0, r3
 8012524:	3710      	adds	r7, #16
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}

0801252a <HAL_XSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
 801252a:	b580      	push	{r7, lr}
 801252c:	b088      	sub	sp, #32
 801252e:	af02      	add	r7, sp, #8
 8012530:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012532:	2300      	movs	r3, #0
 8012534:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8012536:	f7f4 ff37 	bl	80073a8 <HAL_GetTick>
 801253a:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hxspi->State;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012540:	60fb      	str	r3, [r7, #12]
  if (((state & XSPI_BUSY_STATE_MASK) != 0U) || ((state & XSPI_CFG_STATE_MASK) != 0U))
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	f003 0308 	and.w	r3, r3, #8
 8012548:	2b00      	cmp	r3, #0
 801254a:	d104      	bne.n	8012556 <HAL_XSPI_Abort+0x2c>
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	f003 0304 	and.w	r3, r3, #4
 8012552:	2b00      	cmp	r3, #0
 8012554:	d05f      	beq.n	8012616 <HAL_XSPI_Abort+0xec>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	f003 0304 	and.w	r3, r3, #4
 8012560:	2b00      	cmp	r3, #0
 8012562:	d021      	beq.n	80125a8 <HAL_XSPI_Abort+0x7e>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	681a      	ldr	r2, [r3, #0]
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	f022 0204 	bic.w	r2, r2, #4
 8012572:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012578:	4618      	mov	r0, r3
 801257a:	f7f5 fb4d 	bl	8007c18 <HAL_DMA_Abort>
 801257e:	4603      	mov	r3, r0
 8012580:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8012582:	7dfb      	ldrb	r3, [r7, #23]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d002      	beq.n	801258e <HAL_XSPI_Abort+0x64>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2204      	movs	r2, #4
 801258c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012592:	4618      	mov	r0, r3
 8012594:	f7f5 fb40 	bl	8007c18 <HAL_DMA_Abort>
 8012598:	4603      	mov	r3, r0
 801259a:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 801259c:	7dfb      	ldrb	r3, [r7, #23]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d002      	beq.n	80125a8 <HAL_XSPI_Abort+0x7e>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	2204      	movs	r2, #4
 80125a6:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	6a1b      	ldr	r3, [r3, #32]
 80125ae:	f003 0320 	and.w	r3, r3, #32
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d02b      	beq.n	801260e <HAL_XSPI_Abort+0xe4>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	681a      	ldr	r2, [r3, #0]
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	f042 0202 	orr.w	r2, r2, #2
 80125c4:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80125ca:	9300      	str	r3, [sp, #0]
 80125cc:	693b      	ldr	r3, [r7, #16]
 80125ce:	2201      	movs	r2, #1
 80125d0:	2102      	movs	r1, #2
 80125d2:	6878      	ldr	r0, [r7, #4]
 80125d4:	f000 f990 	bl	80128f8 <XSPI_WaitFlagStateUntilTimeout>
 80125d8:	4603      	mov	r3, r0
 80125da:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80125dc:	7dfb      	ldrb	r3, [r7, #23]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d11f      	bne.n	8012622 <HAL_XSPI_Abort+0xf8>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	2202      	movs	r2, #2
 80125e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80125ee:	9300      	str	r3, [sp, #0]
 80125f0:	693b      	ldr	r3, [r7, #16]
 80125f2:	2200      	movs	r2, #0
 80125f4:	2120      	movs	r1, #32
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f000 f97e 	bl	80128f8 <XSPI_WaitFlagStateUntilTimeout>
 80125fc:	4603      	mov	r3, r0
 80125fe:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8012600:	7dfb      	ldrb	r3, [r7, #23]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d10d      	bne.n	8012622 <HAL_XSPI_Abort+0xf8>
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2202      	movs	r2, #2
 801260a:	655a      	str	r2, [r3, #84]	; 0x54
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 801260c:	e009      	b.n	8012622 <HAL_XSPI_Abort+0xf8>
        }
      }
    }
    else
    {
      hxspi->State = HAL_XSPI_STATE_READY;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2202      	movs	r2, #2
 8012612:	655a      	str	r2, [r3, #84]	; 0x54
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 8012614:	e005      	b.n	8012622 <HAL_XSPI_Abort+0xf8>
    }
  }
  else
  {
    status = HAL_ERROR;
 8012616:	2301      	movs	r3, #1
 8012618:	75fb      	strb	r3, [r7, #23]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	2210      	movs	r2, #16
 801261e:	659a      	str	r2, [r3, #88]	; 0x58
 8012620:	e000      	b.n	8012624 <HAL_XSPI_Abort+0xfa>
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 8012622:	bf00      	nop
  }

  return status;
 8012624:	7dfb      	ldrb	r3, [r7, #23]
}
 8012626:	4618      	mov	r0, r3
 8012628:	3718      	adds	r7, #24
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}

0801262e <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 801262e:	b480      	push	{r7}
 8012630:	b083      	sub	sp, #12
 8012632:	af00      	add	r7, sp, #0
 8012634:	6078      	str	r0, [r7, #4]
 8012636:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	683a      	ldr	r2, [r7, #0]
 801263c:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 801263e:	2300      	movs	r3, #0
}
 8012640:	4618      	mov	r0, r3
 8012642:	370c      	adds	r7, #12
 8012644:	46bd      	mov	sp, r7
 8012646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264a:	4770      	bx	lr

0801264c <HAL_XSPI_DLYB_SetConfig>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_SetConfig(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b084      	sub	sp, #16
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012656:	2301      	movs	r3, #1
 8012658:	73fb      	strb	r3, [r7, #15]

  /* Enable XSPI Free Running Clock (mandatory) */
  SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	689a      	ldr	r2, [r3, #8]
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f042 0202 	orr.w	r2, r2, #2
 8012668:	609a      	str	r2, [r3, #8]

  /* Update XSPI state */
  hxspi->State = HAL_XSPI_STATE_BUSY_CMD;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2208      	movs	r2, #8
 801266e:	655a      	str	r2, [r3, #84]	; 0x54

  if (hxspi->Instance == OCTOSPI1)
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	4a18      	ldr	r2, [pc, #96]	; (80126d8 <HAL_XSPI_DLYB_SetConfig+0x8c>)
 8012676:	4293      	cmp	r3, r2
 8012678:	d109      	bne.n	801268e <HAL_XSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 801267a:	4818      	ldr	r0, [pc, #96]	; (80126dc <HAL_XSPI_DLYB_SetConfig+0x90>)
 801267c:	f7ff fae8 	bl	8011c50 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8012680:	6839      	ldr	r1, [r7, #0]
 8012682:	4816      	ldr	r0, [pc, #88]	; (80126dc <HAL_XSPI_DLYB_SetConfig+0x90>)
 8012684:	f000 fb2e 	bl	8012ce4 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8012688:	2300      	movs	r3, #0
 801268a:	73fb      	strb	r3, [r7, #15]
 801268c:	e014      	b.n	80126b8 <HAL_XSPI_DLYB_SetConfig+0x6c>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	4a13      	ldr	r2, [pc, #76]	; (80126e0 <HAL_XSPI_DLYB_SetConfig+0x94>)
 8012694:	4293      	cmp	r3, r2
 8012696:	d109      	bne.n	80126ac <HAL_XSPI_DLYB_SetConfig+0x60>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8012698:	4812      	ldr	r0, [pc, #72]	; (80126e4 <HAL_XSPI_DLYB_SetConfig+0x98>)
 801269a:	f7ff fad9 	bl	8011c50 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 801269e:	6839      	ldr	r1, [r7, #0]
 80126a0:	4810      	ldr	r0, [pc, #64]	; (80126e4 <HAL_XSPI_DLYB_SetConfig+0x98>)
 80126a2:	f000 fb1f 	bl	8012ce4 <LL_DLYB_SetDelay>
    status = HAL_OK;
 80126a6:	2300      	movs	r3, #0
 80126a8:	73fb      	strb	r3, [r7, #15]
 80126aa:	e005      	b.n	80126b8 <HAL_XSPI_DLYB_SetConfig+0x6c>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126b0:	f043 0208 	orr.w	r2, r3, #8
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Abort the current XSPI operation if exist */
  (void)HAL_XSPI_Abort(hxspi);
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f7ff ff36 	bl	801252a <HAL_XSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	689a      	ldr	r2, [r3, #8]
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	f022 0202 	bic.w	r2, r2, #2
 80126cc:	609a      	str	r2, [r3, #8]

  return status;
 80126ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80126d0:	4618      	mov	r0, r3
 80126d2:	3710      	adds	r7, #16
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}
 80126d8:	420d1400 	.word	0x420d1400
 80126dc:	420cf000 	.word	0x420cf000
 80126e0:	420d2400 	.word	0x420d2400
 80126e4:	420cf400 	.word	0x420cf400

080126e8 <HAL_XSPI_DLYB_GetConfig>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_GetConfig(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b084      	sub	sp, #16
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
 80126f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80126f2:	2301      	movs	r3, #1
 80126f4:	73fb      	strb	r3, [r7, #15]

  if (hxspi->Instance == OCTOSPI1)
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	4a10      	ldr	r2, [pc, #64]	; (801273c <HAL_XSPI_DLYB_GetConfig+0x54>)
 80126fc:	4293      	cmp	r3, r2
 80126fe:	d106      	bne.n	801270e <HAL_XSPI_DLYB_GetConfig+0x26>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8012700:	6839      	ldr	r1, [r7, #0]
 8012702:	480f      	ldr	r0, [pc, #60]	; (8012740 <HAL_XSPI_DLYB_GetConfig+0x58>)
 8012704:	f000 fb0d 	bl	8012d22 <LL_DLYB_GetDelay>
    status = HAL_OK;
 8012708:	2300      	movs	r3, #0
 801270a:	73fb      	strb	r3, [r7, #15]
 801270c:	e011      	b.n	8012732 <HAL_XSPI_DLYB_GetConfig+0x4a>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	4a0c      	ldr	r2, [pc, #48]	; (8012744 <HAL_XSPI_DLYB_GetConfig+0x5c>)
 8012714:	4293      	cmp	r3, r2
 8012716:	d106      	bne.n	8012726 <HAL_XSPI_DLYB_GetConfig+0x3e>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8012718:	6839      	ldr	r1, [r7, #0]
 801271a:	480b      	ldr	r0, [pc, #44]	; (8012748 <HAL_XSPI_DLYB_GetConfig+0x60>)
 801271c:	f000 fb01 	bl	8012d22 <LL_DLYB_GetDelay>
    status = HAL_OK;
 8012720:	2300      	movs	r3, #0
 8012722:	73fb      	strb	r3, [r7, #15]
 8012724:	e005      	b.n	8012732 <HAL_XSPI_DLYB_GetConfig+0x4a>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801272a:	f043 0208 	orr.w	r2, r3, #8
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 8012732:	7bfb      	ldrb	r3, [r7, #15]
}
 8012734:	4618      	mov	r0, r3
 8012736:	3710      	adds	r7, #16
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}
 801273c:	420d1400 	.word	0x420d1400
 8012740:	420cf000 	.word	0x420cf000
 8012744:	420d2400 	.word	0x420d2400
 8012748:	420cf400 	.word	0x420cf400

0801274c <HAL_XSPI_DLYB_GetClockPeriod>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_GetClockPeriod(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b084      	sub	sp, #16
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
 8012754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012756:	2301      	movs	r3, #1
 8012758:	73fb      	strb	r3, [r7, #15]

  /* Enable XSPI Free Running Clock (mandatory) */
  SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	689a      	ldr	r2, [r3, #8]
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	f042 0202 	orr.w	r2, r2, #2
 8012768:	609a      	str	r2, [r3, #8]

  /* Update XSPI state */
  hxspi->State = HAL_XSPI_STATE_BUSY_CMD;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2208      	movs	r2, #8
 801276e:	655a      	str	r2, [r3, #84]	; 0x54

  if (hxspi->Instance == OCTOSPI1)
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	4a1e      	ldr	r2, [pc, #120]	; (80127f0 <HAL_XSPI_DLYB_GetClockPeriod+0xa4>)
 8012776:	4293      	cmp	r3, r2
 8012778:	d10f      	bne.n	801279a <HAL_XSPI_DLYB_GetClockPeriod+0x4e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 801277a:	481e      	ldr	r0, [pc, #120]	; (80127f4 <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 801277c:	f7ff fa68 	bl	8011c50 <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI1, pdlyb_cfg) == (uint32_t)SUCCESS)
 8012780:	6839      	ldr	r1, [r7, #0]
 8012782:	481c      	ldr	r0, [pc, #112]	; (80127f4 <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 8012784:	f000 fae6 	bl	8012d54 <LL_DLYB_GetClockPeriod>
 8012788:	4603      	mov	r3, r0
 801278a:	2b00      	cmp	r3, #0
 801278c:	d101      	bne.n	8012792 <HAL_XSPI_DLYB_GetClockPeriod+0x46>
    {
      status = HAL_OK;
 801278e:	2300      	movs	r3, #0
 8012790:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI1);
 8012792:	4818      	ldr	r0, [pc, #96]	; (80127f4 <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 8012794:	f7ff fa6c 	bl	8011c70 <LL_DLYB_Disable>
 8012798:	e01a      	b.n	80127d0 <HAL_XSPI_DLYB_GetClockPeriod+0x84>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	4a16      	ldr	r2, [pc, #88]	; (80127f8 <HAL_XSPI_DLYB_GetClockPeriod+0xac>)
 80127a0:	4293      	cmp	r3, r2
 80127a2:	d10f      	bne.n	80127c4 <HAL_XSPI_DLYB_GetClockPeriod+0x78>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 80127a4:	4815      	ldr	r0, [pc, #84]	; (80127fc <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 80127a6:	f7ff fa53 	bl	8011c50 <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI2, pdlyb_cfg) == (uint32_t)SUCCESS)
 80127aa:	6839      	ldr	r1, [r7, #0]
 80127ac:	4813      	ldr	r0, [pc, #76]	; (80127fc <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 80127ae:	f000 fad1 	bl	8012d54 <LL_DLYB_GetClockPeriod>
 80127b2:	4603      	mov	r3, r0
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d101      	bne.n	80127bc <HAL_XSPI_DLYB_GetClockPeriod+0x70>
    {
      status = HAL_OK;
 80127b8:	2300      	movs	r3, #0
 80127ba:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI2);
 80127bc:	480f      	ldr	r0, [pc, #60]	; (80127fc <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 80127be:	f7ff fa57 	bl	8011c70 <LL_DLYB_Disable>
 80127c2:	e005      	b.n	80127d0 <HAL_XSPI_DLYB_GetClockPeriod+0x84>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127c8:	f043 0208 	orr.w	r2, r3, #8
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Abort the current XSPI operation if exist */
  (void)HAL_XSPI_Abort(hxspi);
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f7ff feaa 	bl	801252a <HAL_XSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	689a      	ldr	r2, [r3, #8]
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	f022 0202 	bic.w	r2, r2, #2
 80127e4:	609a      	str	r2, [r3, #8]

  return status;
 80127e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3710      	adds	r7, #16
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}
 80127f0:	420d1400 	.word	0x420d1400
 80127f4:	420cf000 	.word	0x420cf000
 80127f8:	420d2400 	.word	0x420d2400
 80127fc:	420cf400 	.word	0x420cf400

08012800 <HAL_XSPI_SetDelayValue>:
  * @param  hxspi : XSPI handle
  * @param  pCfg   : Configuration of delay value specified in DelayValueType field.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_SetDelayValue(XSPI_HandleTypeDef *hxspi, XSPI_HSCalTypeDef *const pCfg)
{
 8012800:	b480      	push	{r7}
 8012802:	b085      	sub	sp, #20
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801280a:	2300      	movs	r3, #0
 801280c:	73fb      	strb	r3, [r7, #15]

  if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	4a37      	ldr	r2, [pc, #220]	; (80128f0 <HAL_XSPI_SetDelayValue+0xf0>)
 8012814:	4293      	cmp	r3, r2
 8012816:	d004      	beq.n	8012822 <HAL_XSPI_SetDelayValue+0x22>
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	4a35      	ldr	r2, [pc, #212]	; (80128f4 <HAL_XSPI_SetDelayValue+0xf4>)
 801281e:	4293      	cmp	r3, r2
 8012820:	d159      	bne.n	80128d6 <HAL_XSPI_SetDelayValue+0xd6>
    assert_param(IS_XSPI_DELAY_TYPE(pCfg->DelayValueType));
    assert_param(IS_XSPI_FINECAL_VALUE(pCfg->FineCalibrationUnit));
    assert_param(IS_XSPI_COARSECAL_VALUE(pCfg->CoarseCalibrationUnit));

    /* Check if the state isn't in one of the busy states */
    if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012826:	f003 0308 	and.w	r3, r3, #8
 801282a:	2b00      	cmp	r3, #0
 801282c:	d14c      	bne.n	80128c8 <HAL_XSPI_SetDelayValue+0xc8>
    {
      switch (pCfg->DelayValueType)
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	2b03      	cmp	r3, #3
 8012834:	d02e      	beq.n	8012894 <HAL_XSPI_SetDelayValue+0x94>
 8012836:	2b03      	cmp	r3, #3
 8012838:	d840      	bhi.n	80128bc <HAL_XSPI_SetDelayValue+0xbc>
 801283a:	2b01      	cmp	r3, #1
 801283c:	d002      	beq.n	8012844 <HAL_XSPI_SetDelayValue+0x44>
 801283e:	2b02      	cmp	r3, #2
 8012840:	d014      	beq.n	801286c <HAL_XSPI_SetDelayValue+0x6c>
 8012842:	e03b      	b.n	80128bc <HAL_XSPI_SetDelayValue+0xbc>
      {
        case HAL_XSPI_CAL_FEEDBACK_CLK_DELAY:
          MODIFY_REG(hxspi->Instance->CALMR, (HSPI_CALMR_COARSE |  HSPI_CALMR_FINE),
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801284c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8012850:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012854:	683a      	ldr	r2, [r7, #0]
 8012856:	6851      	ldr	r1, [r2, #4]
 8012858:	683a      	ldr	r2, [r7, #0]
 801285a:	6892      	ldr	r2, [r2, #8]
 801285c:	0412      	lsls	r2, r2, #16
 801285e:	4311      	orrs	r1, r2
 8012860:	687a      	ldr	r2, [r7, #4]
 8012862:	6812      	ldr	r2, [r2, #0]
 8012864:	430b      	orrs	r3, r1
 8012866:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALMR_COARSE_Pos)));
          break;
 801286a:	e033      	b.n	80128d4 <HAL_XSPI_SetDelayValue+0xd4>
        case HAL_XSPI_CAL_DATA_OUTPUT_DELAY:
          MODIFY_REG(hxspi->Instance->CALSOR, (HSPI_CALSOR_COARSE | HSPI_CALSOR_FINE),
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8012874:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8012878:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801287c:	683a      	ldr	r2, [r7, #0]
 801287e:	6851      	ldr	r1, [r2, #4]
 8012880:	683a      	ldr	r2, [r7, #0]
 8012882:	6892      	ldr	r2, [r2, #8]
 8012884:	0412      	lsls	r2, r2, #16
 8012886:	4311      	orrs	r1, r2
 8012888:	687a      	ldr	r2, [r7, #4]
 801288a:	6812      	ldr	r2, [r2, #0]
 801288c:	430b      	orrs	r3, r1
 801288e:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALSOR_COARSE_Pos)));
          break;
 8012892:	e01f      	b.n	80128d4 <HAL_XSPI_SetDelayValue+0xd4>
        case HAL_XSPI_CAL_DQS_INPUT_DELAY:
          MODIFY_REG(hxspi->Instance->CALSIR, (HSPI_CALSIR_COARSE | HSPI_CALSIR_FINE),
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 801289c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80128a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80128a4:	683a      	ldr	r2, [r7, #0]
 80128a6:	6851      	ldr	r1, [r2, #4]
 80128a8:	683a      	ldr	r2, [r7, #0]
 80128aa:	6892      	ldr	r2, [r2, #8]
 80128ac:	0412      	lsls	r2, r2, #16
 80128ae:	4311      	orrs	r1, r2
 80128b0:	687a      	ldr	r2, [r7, #4]
 80128b2:	6812      	ldr	r2, [r2, #0]
 80128b4:	430b      	orrs	r3, r1
 80128b6:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALSIR_COARSE_Pos)));
          break;
 80128ba:	e00b      	b.n	80128d4 <HAL_XSPI_SetDelayValue+0xd4>
        default:
          status = HAL_ERROR;
 80128bc:	2301      	movs	r3, #1
 80128be:	73fb      	strb	r3, [r7, #15]
          hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2208      	movs	r2, #8
 80128c4:	659a      	str	r2, [r3, #88]	; 0x58
          break;
 80128c6:	e005      	b.n	80128d4 <HAL_XSPI_SetDelayValue+0xd4>
      }
    }
    else
    {
      status = HAL_ERROR;
 80128c8:	2301      	movs	r3, #1
 80128ca:	73fb      	strb	r3, [r7, #15]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2210      	movs	r2, #16
 80128d0:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
 80128d2:	e005      	b.n	80128e0 <HAL_XSPI_SetDelayValue+0xe0>
 80128d4:	e004      	b.n	80128e0 <HAL_XSPI_SetDelayValue+0xe0>
    }
  }
  else
  {
    status = HAL_ERROR;
 80128d6:	2301      	movs	r3, #1
 80128d8:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2208      	movs	r2, #8
 80128de:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 80128e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80128e2:	4618      	mov	r0, r3
 80128e4:	3714      	adds	r7, #20
 80128e6:	46bd      	mov	sp, r7
 80128e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ec:	4770      	bx	lr
 80128ee:	bf00      	nop
 80128f0:	420d3400 	.word	0x420d3400
 80128f4:	520d3400 	.word	0x520d3400

080128f8 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b084      	sub	sp, #16
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	60f8      	str	r0, [r7, #12]
 8012900:	60b9      	str	r1, [r7, #8]
 8012902:	603b      	str	r3, [r7, #0]
 8012904:	4613      	mov	r3, r2
 8012906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8012908:	e01a      	b.n	8012940 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801290a:	69bb      	ldr	r3, [r7, #24]
 801290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012910:	d016      	beq.n	8012940 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012912:	f7f4 fd49 	bl	80073a8 <HAL_GetTick>
 8012916:	4602      	mov	r2, r0
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	1ad3      	subs	r3, r2, r3
 801291c:	69ba      	ldr	r2, [r7, #24]
 801291e:	429a      	cmp	r2, r3
 8012920:	d302      	bcc.n	8012928 <XSPI_WaitFlagStateUntilTimeout+0x30>
 8012922:	69bb      	ldr	r3, [r7, #24]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d10b      	bne.n	8012940 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801292e:	655a      	str	r2, [r3, #84]	; 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012934:	f043 0201 	orr.w	r2, r3, #1
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 801293c:	2303      	movs	r3, #3
 801293e:	e00e      	b.n	801295e <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	6a1a      	ldr	r2, [r3, #32]
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	4013      	ands	r3, r2
 801294a:	2b00      	cmp	r3, #0
 801294c:	bf14      	ite	ne
 801294e:	2301      	movne	r3, #1
 8012950:	2300      	moveq	r3, #0
 8012952:	b2db      	uxtb	r3, r3
 8012954:	461a      	mov	r2, r3
 8012956:	79fb      	ldrb	r3, [r7, #7]
 8012958:	429a      	cmp	r2, r3
 801295a:	d1d6      	bne.n	801290a <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801295c:	2300      	movs	r3, #0
}
 801295e:	4618      	mov	r0, r3
 8012960:	3710      	adds	r7, #16
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
	...

08012968 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 8012968:	b480      	push	{r7}
 801296a:	b089      	sub	sp, #36	; 0x24
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012972:	2300      	movs	r3, #0
 8012974:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	681a      	ldr	r2, [r3, #0]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8012984:	601a      	str	r2, [r3, #0]

  if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	4a8f      	ldr	r2, [pc, #572]	; (8012bc8 <XSPI_ConfigCmd+0x260>)
 801298c:	4293      	cmp	r3, r2
 801298e:	d00e      	beq.n	80129ae <XSPI_ConfigCmd+0x46>
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	4a8d      	ldr	r2, [pc, #564]	; (8012bcc <XSPI_ConfigCmd+0x264>)
 8012996:	4293      	cmp	r3, r2
 8012998:	d009      	beq.n	80129ae <XSPI_ConfigCmd+0x46>
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	4a8c      	ldr	r2, [pc, #560]	; (8012bd0 <XSPI_ConfigCmd+0x268>)
 80129a0:	4293      	cmp	r3, r2
 80129a2:	d004      	beq.n	80129ae <XSPI_ConfigCmd+0x46>
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	4a8a      	ldr	r2, [pc, #552]	; (8012bd4 <XSPI_ConfigCmd+0x26c>)
 80129aa:	4293      	cmp	r3, r2
 80129ac:	d10f      	bne.n	80129ce <XSPI_ConfigCmd+0x66>
  {
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	689b      	ldr	r3, [r3, #8]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d12d      	bne.n	8012a12 <XSPI_ConfigCmd+0xaa>
    {
      assert_param(IS_OCTOSPI_IO_SELECT(pCmd->IOSelect));
      MODIFY_REG(hxspi->Instance->CR, OCTOSPI_CR_MSEL, pCmd->IOSelect);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	685a      	ldr	r2, [r3, #4]
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	430a      	orrs	r2, r1
 80129ca:	601a      	str	r2, [r3, #0]
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 80129cc:	e021      	b.n	8012a12 <XSPI_ConfigCmd+0xaa>
    }
  }
#if defined(HSPI1)
  else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	4a81      	ldr	r2, [pc, #516]	; (8012bd8 <XSPI_ConfigCmd+0x270>)
 80129d4:	4293      	cmp	r3, r2
 80129d6:	d004      	beq.n	80129e2 <XSPI_ConfigCmd+0x7a>
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	4a7f      	ldr	r2, [pc, #508]	; (8012bdc <XSPI_ConfigCmd+0x274>)
 80129de:	4293      	cmp	r3, r2
 80129e0:	d10f      	bne.n	8012a02 <XSPI_ConfigCmd+0x9a>
  {
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	689b      	ldr	r3, [r3, #8]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d113      	bne.n	8012a12 <XSPI_ConfigCmd+0xaa>
    {
      assert_param(IS_HSPI_IO_SELECT(pCmd->IOSelect));
      MODIFY_REG(hxspi->Instance->CR, HSPI_CR_MSEL, pCmd->IOSelect);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	685a      	ldr	r2, [r3, #4]
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	430a      	orrs	r2, r1
 80129fe:	601a      	str	r2, [r3, #0]
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8012a00:	e007      	b.n	8012a12 <XSPI_ConfigCmd+0xaa>
    }
  }
#endif /* HSPI1 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a06:	f043 0208 	orr.w	r2, r3, #8
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	659a      	str	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8012a0e:	2301      	movs	r3, #1
 8012a10:	e162      	b.n	8012cd8 <XSPI_ConfigCmd+0x370>
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	2b02      	cmp	r3, #2
 8012a18:	d114      	bne.n	8012a44 <XSPI_ConfigCmd+0xdc>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8012a22:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8012a2c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8012a36:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8012a40:	60fb      	str	r3, [r7, #12]
 8012a42:	e02c      	b.n	8012a9e <XSPI_ConfigCmd+0x136>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	2b03      	cmp	r3, #3
 8012a4a:	d114      	bne.n	8012a76 <XSPI_ConfigCmd+0x10e>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012a54:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8012a5e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012a68:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8012a72:	60fb      	str	r3, [r7, #12]
 8012a74:	e013      	b.n	8012a9e <XSPI_ConfigCmd+0x136>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012a7e:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8012a88:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8012a92:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012a9c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (pCmd->DQSMode | pCmd->SIOOMode);
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012aa6:	431a      	orrs	r2, r3
 8012aa8:	69bb      	ldr	r3, [r7, #24]
 8012aaa:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d012      	beq.n	8012ada <XSPI_ConfigCmd+0x172>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 8012abc:	69bb      	ldr	r3, [r7, #24]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012acc:	4319      	orrs	r1, r3
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ad2:	430b      	orrs	r3, r1
 8012ad4:	431a      	orrs	r2, r3
 8012ad6:	69bb      	ldr	r3, [r7, #24]
 8012ad8:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	f023 021f 	bic.w	r2, r3, #31
 8012ae2:	683b      	ldr	r3, [r7, #0]
 8012ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ae6:	431a      	orrs	r2, r3
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d009      	beq.n	8012b08 <XSPI_ConfigCmd+0x1a0>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d105      	bne.n	8012b08 <XSPI_ConfigCmd+0x1a0>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	3a01      	subs	r2, #1
 8012b06:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	68db      	ldr	r3, [r3, #12]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	f000 80a8 	beq.w	8012c62 <XSPI_ConfigCmd+0x2fa>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	69db      	ldr	r3, [r3, #28]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d064      	beq.n	8012be4 <XSPI_ConfigCmd+0x27c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d01e      	beq.n	8012b60 <XSPI_ConfigCmd+0x1f8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8012b22:	69bb      	ldr	r3, [r7, #24]
 8012b24:	681a      	ldr	r2, [r3, #0]
 8012b26:	4b2e      	ldr	r3, [pc, #184]	; (8012be0 <XSPI_ConfigCmd+0x278>)
 8012b28:	4013      	ands	r3, r2
 8012b2a:	683a      	ldr	r2, [r7, #0]
 8012b2c:	68d1      	ldr	r1, [r2, #12]
 8012b2e:	683a      	ldr	r2, [r7, #0]
 8012b30:	6952      	ldr	r2, [r2, #20]
 8012b32:	4311      	orrs	r1, r2
 8012b34:	683a      	ldr	r2, [r7, #0]
 8012b36:	6912      	ldr	r2, [r2, #16]
 8012b38:	4311      	orrs	r1, r2
 8012b3a:	683a      	ldr	r2, [r7, #0]
 8012b3c:	69d2      	ldr	r2, [r2, #28]
 8012b3e:	4311      	orrs	r1, r2
 8012b40:	683a      	ldr	r2, [r7, #0]
 8012b42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012b44:	4311      	orrs	r1, r2
 8012b46:	683a      	ldr	r2, [r7, #0]
 8012b48:	6a12      	ldr	r2, [r2, #32]
 8012b4a:	4311      	orrs	r1, r2
 8012b4c:	683a      	ldr	r2, [r7, #0]
 8012b4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012b50:	4311      	orrs	r1, r2
 8012b52:	683a      	ldr	r2, [r7, #0]
 8012b54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012b56:	430a      	orrs	r2, r1
 8012b58:	431a      	orrs	r2, r3
 8012b5a:	69bb      	ldr	r3, [r7, #24]
 8012b5c:	601a      	str	r2, [r3, #0]
 8012b5e:	e028      	b.n	8012bb2 <XSPI_ConfigCmd+0x24a>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8012b60:	69bb      	ldr	r3, [r7, #24]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012b68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012b6c:	683a      	ldr	r2, [r7, #0]
 8012b6e:	68d1      	ldr	r1, [r2, #12]
 8012b70:	683a      	ldr	r2, [r7, #0]
 8012b72:	6952      	ldr	r2, [r2, #20]
 8012b74:	4311      	orrs	r1, r2
 8012b76:	683a      	ldr	r2, [r7, #0]
 8012b78:	6912      	ldr	r2, [r2, #16]
 8012b7a:	4311      	orrs	r1, r2
 8012b7c:	683a      	ldr	r2, [r7, #0]
 8012b7e:	69d2      	ldr	r2, [r2, #28]
 8012b80:	4311      	orrs	r1, r2
 8012b82:	683a      	ldr	r2, [r7, #0]
 8012b84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012b86:	4311      	orrs	r1, r2
 8012b88:	683a      	ldr	r2, [r7, #0]
 8012b8a:	6a12      	ldr	r2, [r2, #32]
 8012b8c:	430a      	orrs	r2, r1
 8012b8e:	431a      	orrs	r2, r3
 8012b90:	69bb      	ldr	r3, [r7, #24]
 8012b92:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012b9c:	d109      	bne.n	8012bb2 <XSPI_ConfigCmd+0x24a>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8012ba2:	2b08      	cmp	r3, #8
 8012ba4:	d105      	bne.n	8012bb2 <XSPI_ConfigCmd+0x24a>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8012ba6:	69bb      	ldr	r3, [r7, #24]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8012bae:	69bb      	ldr	r3, [r7, #24]
 8012bb0:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8012bb2:	683b      	ldr	r3, [r7, #0]
 8012bb4:	689a      	ldr	r2, [r3, #8]
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	683a      	ldr	r2, [r7, #0]
 8012bc0:	6992      	ldr	r2, [r2, #24]
 8012bc2:	649a      	str	r2, [r3, #72]	; 0x48
 8012bc4:	e087      	b.n	8012cd6 <XSPI_ConfigCmd+0x36e>
 8012bc6:	bf00      	nop
 8012bc8:	420d1400 	.word	0x420d1400
 8012bcc:	520d1400 	.word	0x520d1400
 8012bd0:	420d2400 	.word	0x420d2400
 8012bd4:	520d2400 	.word	0x520d2400
 8012bd8:	420d3400 	.word	0x420d3400
 8012bdc:	520d3400 	.word	0x520d3400
 8012be0:	f0ffc0c0 	.word	0xf0ffc0c0
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d017      	beq.n	8012c1c <XSPI_ConfigCmd+0x2b4>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 8012bec:	69bb      	ldr	r3, [r7, #24]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8012bf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012bf8:	683a      	ldr	r2, [r7, #0]
 8012bfa:	68d1      	ldr	r1, [r2, #12]
 8012bfc:	683a      	ldr	r2, [r7, #0]
 8012bfe:	6952      	ldr	r2, [r2, #20]
 8012c00:	4311      	orrs	r1, r2
 8012c02:	683a      	ldr	r2, [r7, #0]
 8012c04:	6912      	ldr	r2, [r2, #16]
 8012c06:	4311      	orrs	r1, r2
 8012c08:	683a      	ldr	r2, [r7, #0]
 8012c0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012c0c:	4311      	orrs	r1, r2
 8012c0e:	683a      	ldr	r2, [r7, #0]
 8012c10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012c12:	430a      	orrs	r2, r1
 8012c14:	431a      	orrs	r2, r3
 8012c16:	69bb      	ldr	r3, [r7, #24]
 8012c18:	601a      	str	r2, [r3, #0]
 8012c1a:	e01d      	b.n	8012c58 <XSPI_ConfigCmd+0x2f0>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 8012c1c:	69bb      	ldr	r3, [r7, #24]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	68d9      	ldr	r1, [r3, #12]
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	695b      	ldr	r3, [r3, #20]
 8012c2c:	4319      	orrs	r1, r3
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	691b      	ldr	r3, [r3, #16]
 8012c32:	430b      	orrs	r3, r1
 8012c34:	431a      	orrs	r2, r3
 8012c36:	69bb      	ldr	r3, [r7, #24]
 8012c38:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012c42:	d109      	bne.n	8012c58 <XSPI_ConfigCmd+0x2f0>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8012c48:	2b08      	cmp	r3, #8
 8012c4a:	d105      	bne.n	8012c58 <XSPI_ConfigCmd+0x2f0>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8012c4c:	69bb      	ldr	r3, [r7, #24]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8012c54:	69bb      	ldr	r3, [r7, #24]
 8012c56:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	689a      	ldr	r2, [r3, #8]
 8012c5c:	693b      	ldr	r3, [r7, #16]
 8012c5e:	601a      	str	r2, [r3, #0]
 8012c60:	e039      	b.n	8012cd6 <XSPI_ConfigCmd+0x36e>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	69db      	ldr	r3, [r3, #28]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d030      	beq.n	8012ccc <XSPI_ConfigCmd+0x364>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d017      	beq.n	8012ca2 <XSPI_ConfigCmd+0x33a>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 8012c72:	69bb      	ldr	r3, [r7, #24]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8012c7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012c7e:	683a      	ldr	r2, [r7, #0]
 8012c80:	69d1      	ldr	r1, [r2, #28]
 8012c82:	683a      	ldr	r2, [r7, #0]
 8012c84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012c86:	4311      	orrs	r1, r2
 8012c88:	683a      	ldr	r2, [r7, #0]
 8012c8a:	6a12      	ldr	r2, [r2, #32]
 8012c8c:	4311      	orrs	r1, r2
 8012c8e:	683a      	ldr	r2, [r7, #0]
 8012c90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012c92:	4311      	orrs	r1, r2
 8012c94:	683a      	ldr	r2, [r7, #0]
 8012c96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012c98:	430a      	orrs	r2, r1
 8012c9a:	431a      	orrs	r2, r3
 8012c9c:	69bb      	ldr	r3, [r7, #24]
 8012c9e:	601a      	str	r2, [r3, #0]
 8012ca0:	e00e      	b.n	8012cc0 <XSPI_ConfigCmd+0x358>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 8012ca2:	69bb      	ldr	r3, [r7, #24]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	69d9      	ldr	r1, [r3, #28]
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cb2:	4319      	orrs	r1, r3
 8012cb4:	683b      	ldr	r3, [r7, #0]
 8012cb6:	6a1b      	ldr	r3, [r3, #32]
 8012cb8:	430b      	orrs	r3, r1
 8012cba:	431a      	orrs	r2, r3
 8012cbc:	69bb      	ldr	r3, [r7, #24]
 8012cbe:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	683a      	ldr	r2, [r7, #0]
 8012cc6:	6992      	ldr	r2, [r2, #24]
 8012cc8:	649a      	str	r2, [r3, #72]	; 0x48
 8012cca:	e004      	b.n	8012cd6 <XSPI_ConfigCmd+0x36e>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8012ccc:	2301      	movs	r3, #1
 8012cce:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2208      	movs	r2, #8
 8012cd4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 8012cd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8012cd8:	4618      	mov	r0, r3
 8012cda:	3724      	adds	r7, #36	; 0x24
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce2:	4770      	bx	lr

08012ce4 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8012ce4:	b480      	push	{r7}
 8012ce6:	b083      	sub	sp, #12
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	f043 0202 	orr.w	r2, r3, #2
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 8012cfa:	683b      	ldr	r3, [r7, #0]
 8012cfc:	685a      	ldr	r2, [r3, #4]
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	021b      	lsls	r3, r3, #8
 8012d04:	431a      	orrs	r2, r3
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	f023 0202 	bic.w	r2, r3, #2
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	601a      	str	r2, [r3, #0]
}
 8012d16:	bf00      	nop
 8012d18:	370c      	adds	r7, #12
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d20:	4770      	bx	lr

08012d22 <LL_DLYB_GetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is received.
  *          - ERROR: the Delay value is not received.
  */
void LL_DLYB_GetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 8012d22:	b480      	push	{r7}
 8012d24:	b083      	sub	sp, #12
 8012d26:	af00      	add	r7, sp, #0
 8012d28:	6078      	str	r0, [r7, #4]
 8012d2a:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Fill the DelayBlock configuration structure with SEL and UNIT value */
  pdlyb_cfg->Units = ((DLYBx->CFGR & DLYB_CFGR_UNIT) >> DLYB_CFGR_UNIT_Pos);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	685b      	ldr	r3, [r3, #4]
 8012d30:	0a1b      	lsrs	r3, r3, #8
 8012d32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	601a      	str	r2, [r3, #0]
  pdlyb_cfg->PhaseSel = (DLYBx->CFGR & DLYB_CFGR_SEL);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	685b      	ldr	r3, [r3, #4]
 8012d3e:	f003 020f 	and.w	r2, r3, #15
 8012d42:	683b      	ldr	r3, [r7, #0]
 8012d44:	605a      	str	r2, [r3, #4]
}
 8012d46:	bf00      	nop
 8012d48:	370c      	adds	r7, #12
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d50:	4770      	bx	lr
	...

08012d54 <LL_DLYB_GetClockPeriod>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: there is a valid period detected and stored in pdlyb_cfg.
  *          - ERROR: there is no valid period detected.
  */
uint32_t LL_DLYB_GetClockPeriod(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b086      	sub	sp, #24
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
 8012d5c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8012d5e:	2300      	movs	r3, #0
 8012d60:	617b      	str	r3, [r7, #20]

  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	f043 0202 	orr.w	r2, r3, #2
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	601a      	str	r2, [r3, #0]

  /* Delay line length detection */
  while (i < DLYB_MAX_UNIT)
 8012d6e:	e02a      	b.n	8012dc6 <LL_DLYB_GetClockPeriod+0x72>
  {
    /* Set the Delay of the UNIT(s)*/
    DLYBx->CFGR = DLYB_MAX_SELECT | (i << DLYB_CFGR_UNIT_Pos);
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	021b      	lsls	r3, r3, #8
 8012d74:	f043 020c 	orr.w	r2, r3, #12
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	605a      	str	r2, [r3, #4]

    /* Waiting for a LNG valid value */
    tickstart =  HAL_GetTick();
 8012d7c:	f7f4 fb14 	bl	80073a8 <HAL_GetTick>
 8012d80:	60f8      	str	r0, [r7, #12]
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8012d82:	e00c      	b.n	8012d9e <LL_DLYB_GetClockPeriod+0x4a>
    {
      if ((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 8012d84:	f7f4 fb10 	bl	80073a8 <HAL_GetTick>
 8012d88:	4602      	mov	r2, r0
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	1ad3      	subs	r3, r2, r3
 8012d8e:	2bfe      	cmp	r3, #254	; 0xfe
 8012d90:	d905      	bls.n	8012d9e <LL_DLYB_GetClockPeriod+0x4a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	685b      	ldr	r3, [r3, #4]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	db01      	blt.n	8012d9e <LL_DLYB_GetClockPeriod+0x4a>
        {
          return (uint32_t) HAL_TIMEOUT;
 8012d9a:	2303      	movs	r3, #3
 8012d9c:	e042      	b.n	8012e24 <LL_DLYB_GetClockPeriod+0xd0>
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	685b      	ldr	r3, [r3, #4]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	daee      	bge.n	8012d84 <LL_DLYB_GetClockPeriod+0x30>
        }
      }
    }

    if ((DLYBx->CFGR & DLYB_LNG_10_0_MASK) != 0U)
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	685a      	ldr	r2, [r3, #4]
 8012daa:	4b20      	ldr	r3, [pc, #128]	; (8012e2c <LL_DLYB_GetClockPeriod+0xd8>)
 8012dac:	4013      	ands	r3, r2
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d006      	beq.n	8012dc0 <LL_DLYB_GetClockPeriod+0x6c>
    {
      if ((DLYBx->CFGR & (DLYB_CFGR_LNG_11 | DLYB_CFGR_LNG_10)) != DLYB_LNG_11_10_MASK)
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	685b      	ldr	r3, [r3, #4]
 8012db6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8012dba:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8012dbe:	d106      	bne.n	8012dce <LL_DLYB_GetClockPeriod+0x7a>
      {
        /* Delay line length is configured to one input clock period*/
        break;
      }
    }
    i++;
 8012dc0:	697b      	ldr	r3, [r7, #20]
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	617b      	str	r3, [r7, #20]
  while (i < DLYB_MAX_UNIT)
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8012dca:	d9d1      	bls.n	8012d70 <LL_DLYB_GetClockPeriod+0x1c>
 8012dcc:	e000      	b.n	8012dd0 <LL_DLYB_GetClockPeriod+0x7c>
        break;
 8012dce:	bf00      	nop
  }

  if (DLYB_MAX_UNIT != i)
 8012dd0:	697b      	ldr	r3, [r7, #20]
 8012dd2:	2b80      	cmp	r3, #128	; 0x80
 8012dd4:	d022      	beq.n	8012e1c <LL_DLYB_GetClockPeriod+0xc8>
  {
    /* Determine how many unit delays (nb) span one input clock period */
    lng = (DLYBx->CFGR & DLYB_CFGR_LNG) >> 16U;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	685b      	ldr	r3, [r3, #4]
 8012dda:	0c1b      	lsrs	r3, r3, #16
 8012ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012de0:	60bb      	str	r3, [r7, #8]
    nb = 10U;
 8012de2:	230a      	movs	r3, #10
 8012de4:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 8012de6:	e002      	b.n	8012dee <LL_DLYB_GetClockPeriod+0x9a>
    {
      nb--;
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	3b01      	subs	r3, #1
 8012dec:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 8012dee:	693b      	ldr	r3, [r7, #16]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d005      	beq.n	8012e00 <LL_DLYB_GetClockPeriod+0xac>
 8012df4:	68ba      	ldr	r2, [r7, #8]
 8012df6:	693b      	ldr	r3, [r7, #16]
 8012df8:	fa22 f303 	lsr.w	r3, r2, r3
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d0f3      	beq.n	8012de8 <LL_DLYB_GetClockPeriod+0x94>
    }
    if (nb != 0U)
 8012e00:	693b      	ldr	r3, [r7, #16]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d00a      	beq.n	8012e1c <LL_DLYB_GetClockPeriod+0xc8>
    {
      pdlyb_cfg->PhaseSel = nb ;
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	693a      	ldr	r2, [r7, #16]
 8012e0a:	605a      	str	r2, [r3, #4]
      pdlyb_cfg->Units = i ;
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	697a      	ldr	r2, [r7, #20]
 8012e10:	601a      	str	r2, [r3, #0]

      /* Disable the length sampling */
      DLYBx->CR = DLYB_CR_SEN;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	2202      	movs	r2, #2
 8012e16:	601a      	str	r2, [r3, #0]

      return (uint32_t)SUCCESS;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	e003      	b.n	8012e24 <LL_DLYB_GetClockPeriod+0xd0>
    }
  }

  /* Disable the length sampling */
  DLYBx->CR = DLYB_CR_SEN;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2202      	movs	r2, #2
 8012e20:	601a      	str	r2, [r3, #0]

  return (uint32_t)ERROR;
 8012e22:	2301      	movs	r3, #1

}
 8012e24:	4618      	mov	r0, r3
 8012e26:	3718      	adds	r7, #24
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}
 8012e2c:	07ff0000 	.word	0x07ff0000

08012e30 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b096      	sub	sp, #88	; 0x58
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	60f8      	str	r0, [r7, #12]
 8012e38:	60b9      	str	r1, [r7, #8]
 8012e3a:	607a      	str	r2, [r7, #4]
 8012e3c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	3303      	adds	r3, #3
 8012e42:	f023 0303 	bic.w	r3, r3, #3
 8012e46:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e48:	f3ef 8310 	mrs	r3, PRIMASK
 8012e4c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8012e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8012e50:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8012e52:	b672      	cpsid	i
#endif
    return(int_posture);
 8012e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8012e56:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012e58:	4b55      	ldr	r3, [pc, #340]	; (8012fb0 <_tx_byte_allocate+0x180>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e66:	621a      	str	r2, [r3, #32]
 8012e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e6a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e6e:	f383 8810 	msr	PRIMASK, r3
}
 8012e72:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8012e74:	6879      	ldr	r1, [r7, #4]
 8012e76:	68f8      	ldr	r0, [r7, #12]
 8012e78:	f000 f9b2 	bl	80131e0 <_tx_byte_pool_search>
 8012e7c:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8012e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8012e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8012e86:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8012e88:	b672      	cpsid	i
    return(int_posture);
 8012e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8012e8c:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8012e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d002      	beq.n	8012e9a <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8012e94:	2301      	movs	r3, #1
 8012e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e98:	e006      	b.n	8012ea8 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	6a1b      	ldr	r3, [r3, #32]
 8012e9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	d101      	bne.n	8012ea8 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8012ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d0d9      	beq.n	8012e62 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012eb2:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8012eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d008      	beq.n	8012ecc <_tx_byte_allocate+0x9c>
 8012eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ebc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012ebe:	6a3b      	ldr	r3, [r7, #32]
 8012ec0:	f383 8810 	msr	PRIMASK, r3
}
 8012ec4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	653b      	str	r3, [r7, #80]	; 0x50
 8012eca:	e06c      	b.n	8012fa6 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8012ecc:	683b      	ldr	r3, [r7, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d061      	beq.n	8012f96 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8012ed2:	4b38      	ldr	r3, [pc, #224]	; (8012fb4 <_tx_byte_allocate+0x184>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d007      	beq.n	8012eea <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8012eda:	2310      	movs	r3, #16
 8012edc:	653b      	str	r3, [r7, #80]	; 0x50
 8012ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ee0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012ee2:	69fb      	ldr	r3, [r7, #28]
 8012ee4:	f383 8810 	msr	PRIMASK, r3
}
 8012ee8:	e05d      	b.n	8012fa6 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8012eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012eec:	4a32      	ldr	r2, [pc, #200]	; (8012fb8 <_tx_byte_allocate+0x188>)
 8012eee:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8012ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ef2:	68fa      	ldr	r2, [r7, #12]
 8012ef4:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8012ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ef8:	68ba      	ldr	r2, [r7, #8]
 8012efa:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8012efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012efe:	687a      	ldr	r2, [r7, #4]
 8012f00:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8012f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012f08:	1c5a      	adds	r2, r3, #1
 8012f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f0c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f14:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f1a:	1c5a      	adds	r2, r3, #1
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8012f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d109      	bne.n	8012f3a <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f2a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8012f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f30:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8012f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f36:	675a      	str	r2, [r3, #116]	; 0x74
 8012f38:	e011      	b.n	8012f5e <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8012f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012f44:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8012f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f4a:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8012f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f50:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8012f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f56:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8012f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f5c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8012f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f60:	2209      	movs	r2, #9
 8012f62:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f66:	2201      	movs	r2, #1
 8012f68:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8012f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f6c:	683a      	ldr	r2, [r7, #0]
 8012f6e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8012f70:	4b10      	ldr	r3, [pc, #64]	; (8012fb4 <_tx_byte_allocate+0x184>)
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	3301      	adds	r3, #1
 8012f76:	4a0f      	ldr	r2, [pc, #60]	; (8012fb4 <_tx_byte_allocate+0x184>)
 8012f78:	6013      	str	r3, [r2, #0]
 8012f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f7c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f7e:	69bb      	ldr	r3, [r7, #24]
 8012f80:	f383 8810 	msr	PRIMASK, r3
}
 8012f84:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8012f86:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8012f88:	f001 fb02 	bl	8014590 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8012f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f92:	653b      	str	r3, [r7, #80]	; 0x50
 8012f94:	e007      	b.n	8012fa6 <_tx_byte_allocate+0x176>
 8012f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f98:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f9a:	697b      	ldr	r3, [r7, #20]
 8012f9c:	f383 8810 	msr	PRIMASK, r3
}
 8012fa0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8012fa2:	2310      	movs	r3, #16
 8012fa4:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8012fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	3758      	adds	r7, #88	; 0x58
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}
 8012fb0:	20197b44 	.word	0x20197b44
 8012fb4:	20197bdc 	.word	0x20197bdc
 8012fb8:	08012fbd 	.word	0x08012fbd

08012fbc <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b08e      	sub	sp, #56	; 0x38
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
 8012fc4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8012fca:	623b      	str	r3, [r7, #32]
    return(posture);
 8012fcc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012fce:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012fd0:	b672      	cpsid	i
    return(int_posture);
 8012fd2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8012fd4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012fda:	4a33      	ldr	r2, [pc, #204]	; (80130a8 <_tx_byte_pool_cleanup+0xec>)
 8012fdc:	4293      	cmp	r3, r2
 8012fde:	d158      	bne.n	8013092 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012fe6:	683a      	ldr	r2, [r7, #0]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d152      	bne.n	8013092 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ff0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8012ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d04c      	beq.n	8013092 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8012ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	4a2b      	ldr	r2, [pc, #172]	; (80130ac <_tx_byte_pool_cleanup+0xf0>)
 8012ffe:	4293      	cmp	r3, r2
 8013000:	d147      	bne.n	8013092 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8013002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013006:	2b00      	cmp	r3, #0
 8013008:	d043      	beq.n	8013092 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2200      	movs	r2, #0
 801300e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8013010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013014:	1e5a      	subs	r2, r3, #1
 8013016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013018:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 801301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801301e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8013020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013022:	2b00      	cmp	r3, #0
 8013024:	d103      	bne.n	801302e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8013026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013028:	2200      	movs	r2, #0
 801302a:	625a      	str	r2, [r3, #36]	; 0x24
 801302c:	e013      	b.n	8013056 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013032:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013038:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801303c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801303e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013044:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8013046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801304a:	687a      	ldr	r2, [r7, #4]
 801304c:	429a      	cmp	r2, r3
 801304e:	d102      	bne.n	8013056 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8013050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013054:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801305a:	2b09      	cmp	r3, #9
 801305c:	d119      	bne.n	8013092 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	2210      	movs	r2, #16
 8013062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013066:	4b12      	ldr	r3, [pc, #72]	; (80130b0 <_tx_byte_pool_cleanup+0xf4>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	3301      	adds	r3, #1
 801306c:	4a10      	ldr	r2, [pc, #64]	; (80130b0 <_tx_byte_pool_cleanup+0xf4>)
 801306e:	6013      	str	r3, [r2, #0]
 8013070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013072:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013074:	693b      	ldr	r3, [r7, #16]
 8013076:	f383 8810 	msr	PRIMASK, r3
}
 801307a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801307c:	6878      	ldr	r0, [r7, #4]
 801307e:	f001 f987 	bl	8014390 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013082:	f3ef 8310 	mrs	r3, PRIMASK
 8013086:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013088:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801308a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801308c:	b672      	cpsid	i
    return(int_posture);
 801308e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8013090:	637b      	str	r3, [r7, #52]	; 0x34
 8013092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013094:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	f383 8810 	msr	PRIMASK, r3
}
 801309c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801309e:	bf00      	nop
 80130a0:	3738      	adds	r7, #56	; 0x38
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
 80130a6:	bf00      	nop
 80130a8:	08012fbd 	.word	0x08012fbd
 80130ac:	42595445 	.word	0x42595445
 80130b0:	20197bdc 	.word	0x20197bdc

080130b4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b08e      	sub	sp, #56	; 0x38
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	60f8      	str	r0, [r7, #12]
 80130bc:	60b9      	str	r1, [r7, #8]
 80130be:	607a      	str	r2, [r7, #4]
 80130c0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80130c2:	2234      	movs	r2, #52	; 0x34
 80130c4:	2100      	movs	r1, #0
 80130c6:	68f8      	ldr	r0, [r7, #12]
 80130c8:	f015 f891 	bl	80281ee <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	f023 0303 	bic.w	r3, r3, #3
 80130d2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	68ba      	ldr	r2, [r7, #8]
 80130d8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	687a      	ldr	r2, [r7, #4]
 80130de:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	683a      	ldr	r2, [r7, #0]
 80130e4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	687a      	ldr	r2, [r7, #4]
 80130ea:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	687a      	ldr	r2, [r7, #4]
 80130f0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80130f2:	683b      	ldr	r3, [r7, #0]
 80130f4:	f1a3 0208 	sub.w	r2, r3, #8
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	2202      	movs	r2, #2
 8013100:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8013106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013108:	683b      	ldr	r3, [r7, #0]
 801310a:	4413      	add	r3, r2
 801310c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 801310e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013110:	3b04      	subs	r3, #4
 8013112:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8013118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801311a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 801311c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801311e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013120:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8013122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013124:	3b04      	subs	r3, #4
 8013126:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8013128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801312a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801312e:	687a      	ldr	r2, [r7, #4]
 8013130:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8013136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013138:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 801313a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801313c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801313e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8013144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013146:	3304      	adds	r3, #4
 8013148:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 801314a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801314c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 801314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013150:	4a1f      	ldr	r2, [pc, #124]	; (80131d0 <_tx_byte_pool_create+0x11c>)
 8013152:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	2200      	movs	r2, #0
 8013158:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801315a:	f3ef 8310 	mrs	r3, PRIMASK
 801315e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013160:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013162:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013164:	b672      	cpsid	i
    return(int_posture);
 8013166:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8013168:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	4a19      	ldr	r2, [pc, #100]	; (80131d4 <_tx_byte_pool_create+0x120>)
 801316e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8013170:	4b19      	ldr	r3, [pc, #100]	; (80131d8 <_tx_byte_pool_create+0x124>)
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d109      	bne.n	801318c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8013178:	4a18      	ldr	r2, [pc, #96]	; (80131dc <_tx_byte_pool_create+0x128>)
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	68fa      	ldr	r2, [r7, #12]
 8013182:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	68fa      	ldr	r2, [r7, #12]
 8013188:	631a      	str	r2, [r3, #48]	; 0x30
 801318a:	e011      	b.n	80131b0 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 801318c:	4b13      	ldr	r3, [pc, #76]	; (80131dc <_tx_byte_pool_create+0x128>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8013192:	6a3b      	ldr	r3, [r7, #32]
 8013194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013196:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8013198:	6a3b      	ldr	r3, [r7, #32]
 801319a:	68fa      	ldr	r2, [r7, #12]
 801319c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 801319e:	69fb      	ldr	r3, [r7, #28]
 80131a0:	68fa      	ldr	r2, [r7, #12]
 80131a2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	69fa      	ldr	r2, [r7, #28]
 80131a8:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	6a3a      	ldr	r2, [r7, #32]
 80131ae:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80131b0:	4b09      	ldr	r3, [pc, #36]	; (80131d8 <_tx_byte_pool_create+0x124>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	3301      	adds	r3, #1
 80131b6:	4a08      	ldr	r2, [pc, #32]	; (80131d8 <_tx_byte_pool_create+0x124>)
 80131b8:	6013      	str	r3, [r2, #0]
 80131ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131bc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80131be:	693b      	ldr	r3, [r7, #16]
 80131c0:	f383 8810 	msr	PRIMASK, r3
}
 80131c4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80131c6:	2300      	movs	r3, #0
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3738      	adds	r7, #56	; 0x38
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}
 80131d0:	ffffeeee 	.word	0xffffeeee
 80131d4:	42595445 	.word	0x42595445
 80131d8:	20197b38 	.word	0x20197b38
 80131dc:	20197b34 	.word	0x20197b34

080131e0 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 80131e0:	b480      	push	{r7}
 80131e2:	b097      	sub	sp, #92	; 0x5c
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
 80131e8:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 80131ea:	2300      	movs	r3, #0
 80131ec:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80131ee:	f3ef 8310 	mrs	r3, PRIMASK
 80131f2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80131f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80131f6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80131f8:	b672      	cpsid	i
    return(int_posture);
 80131fa:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 80131fc:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	689a      	ldr	r2, [r3, #8]
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	68db      	ldr	r3, [r3, #12]
 8013206:	3b02      	subs	r3, #2
 8013208:	00db      	lsls	r3, r3, #3
 801320a:	4413      	add	r3, r2
 801320c:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 801320e:	683a      	ldr	r2, [r7, #0]
 8013210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013212:	429a      	cmp	r2, r3
 8013214:	d308      	bcc.n	8013228 <_tx_byte_pool_search+0x48>
 8013216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013218:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801321a:	69fb      	ldr	r3, [r7, #28]
 801321c:	f383 8810 	msr	PRIMASK, r3
}
 8013220:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8013222:	2300      	movs	r3, #0
 8013224:	653b      	str	r3, [r7, #80]	; 0x50
 8013226:	e0dd      	b.n	80133e4 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013228:	4b72      	ldr	r3, [pc, #456]	; (80133f4 <_tx_byte_pool_search+0x214>)
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013232:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	695b      	ldr	r3, [r3, #20]
 8013238:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	68db      	ldr	r3, [r3, #12]
 801323e:	3301      	adds	r3, #1
 8013240:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8013242:	2300      	movs	r3, #0
 8013244:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8013246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013248:	3304      	adds	r3, #4
 801324a:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801324e:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8013250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	4a68      	ldr	r2, [pc, #416]	; (80133f8 <_tx_byte_pool_search+0x218>)
 8013256:	4293      	cmp	r3, r2
 8013258:	d143      	bne.n	80132e2 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 801325a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801325c:	2b00      	cmp	r3, #0
 801325e:	d104      	bne.n	801326a <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013264:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8013266:	2301      	movs	r3, #1
 8013268:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801326a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801326c:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 801326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8013274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013278:	1ad3      	subs	r3, r2, r3
 801327a:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 801327c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801327e:	3b08      	subs	r3, #8
 8013280:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8013282:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	429a      	cmp	r2, r3
 8013288:	d257      	bcs.n	801333a <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 801328a:	2300      	movs	r3, #0
 801328c:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013290:	3304      	adds	r3, #4
 8013292:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8013294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013296:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8013298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	4a56      	ldr	r2, [pc, #344]	; (80133f8 <_tx_byte_pool_search+0x218>)
 801329e:	4293      	cmp	r3, r2
 80132a0:	d113      	bne.n	80132ca <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80132a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a4:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 80132a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132a8:	681a      	ldr	r2, [r3, #0]
 80132aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ac:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	68db      	ldr	r3, [r3, #12]
 80132b2:	1e5a      	subs	r2, r3, #1
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	695b      	ldr	r3, [r3, #20]
 80132bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80132be:	429a      	cmp	r2, r3
 80132c0:	d114      	bne.n	80132ec <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80132c6:	615a      	str	r2, [r3, #20]
 80132c8:	e010      	b.n	80132ec <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80132ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132cc:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 80132ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 80132d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d008      	beq.n	80132ec <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 80132da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132dc:	3b01      	subs	r3, #1
 80132de:	64bb      	str	r3, [r7, #72]	; 0x48
 80132e0:	e004      	b.n	80132ec <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80132e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132e4:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 80132e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 80132ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d002      	beq.n	80132f8 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 80132f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132f4:	3b01      	subs	r3, #1
 80132f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80132f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80132fa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	f383 8810 	msr	PRIMASK, r3
}
 8013302:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013304:	f3ef 8310 	mrs	r3, PRIMASK
 8013308:	61bb      	str	r3, [r7, #24]
    return(posture);
 801330a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801330c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801330e:	b672      	cpsid	i
    return(int_posture);
 8013310:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8013312:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	6a1b      	ldr	r3, [r3, #32]
 8013318:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801331a:	429a      	cmp	r2, r3
 801331c:	d009      	beq.n	8013332 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	695b      	ldr	r3, [r3, #20]
 8013322:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	68db      	ldr	r3, [r3, #12]
 8013328:	3301      	adds	r3, #1
 801332a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013330:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8013332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013334:	2b00      	cmp	r3, #0
 8013336:	d186      	bne.n	8013246 <_tx_byte_pool_search+0x66>
 8013338:	e000      	b.n	801333c <_tx_byte_pool_search+0x15c>
                    break;
 801333a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 801333c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801333e:	2b00      	cmp	r3, #0
 8013340:	d048      	beq.n	80133d4 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8013342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	1ad3      	subs	r3, r2, r3
 8013348:	2b13      	cmp	r3, #19
 801334a:	d91e      	bls.n	801338a <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	3308      	adds	r3, #8
 8013350:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013352:	4413      	add	r3, r2
 8013354:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8013356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013358:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801335a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801335c:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 801335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013360:	681a      	ldr	r2, [r3, #0]
 8013362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013364:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8013366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013368:	3304      	adds	r3, #4
 801336a:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801336c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801336e:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8013370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013372:	4a21      	ldr	r2, [pc, #132]	; (80133f8 <_tx_byte_pool_search+0x218>)
 8013374:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	68db      	ldr	r3, [r3, #12]
 801337a:	1c5a      	adds	r2, r3, #1
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8013380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013384:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8013386:	683b      	ldr	r3, [r7, #0]
 8013388:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801338a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801338c:	3304      	adds	r3, #4
 801338e:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8013390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013392:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8013394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013396:	687a      	ldr	r2, [r7, #4]
 8013398:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	689a      	ldr	r2, [r3, #8]
 801339e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133a0:	1ad3      	subs	r3, r2, r3
 80133a2:	f1a3 0208 	sub.w	r2, r3, #8
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	695b      	ldr	r3, [r3, #20]
 80133ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d105      	bne.n	80133c0 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80133b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133b6:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 80133b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ba:	681a      	ldr	r2, [r3, #0]
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	615a      	str	r2, [r3, #20]
 80133c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133c2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	f383 8810 	msr	PRIMASK, r3
}
 80133ca:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80133cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133ce:	3308      	adds	r3, #8
 80133d0:	653b      	str	r3, [r7, #80]	; 0x50
 80133d2:	e007      	b.n	80133e4 <_tx_byte_pool_search+0x204>
 80133d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133d6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80133d8:	68bb      	ldr	r3, [r7, #8]
 80133da:	f383 8810 	msr	PRIMASK, r3
}
 80133de:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 80133e0:	2300      	movs	r3, #0
 80133e2:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 80133e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	375c      	adds	r7, #92	; 0x5c
 80133ea:	46bd      	mov	sp, r7
 80133ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f0:	4770      	bx	lr
 80133f2:	bf00      	nop
 80133f4:	20197b44 	.word	0x20197b44
 80133f8:	ffffeeee 	.word	0xffffeeee

080133fc <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8013400:	f000 ff04 	bl	801420c <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8013404:	f001 fa8c 	bl	8014920 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8013408:	4b12      	ldr	r3, [pc, #72]	; (8013454 <_tx_initialize_high_level+0x58>)
 801340a:	2200      	movs	r2, #0
 801340c:	601a      	str	r2, [r3, #0]
 801340e:	4b12      	ldr	r3, [pc, #72]	; (8013458 <_tx_initialize_high_level+0x5c>)
 8013410:	2200      	movs	r2, #0
 8013412:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8013414:	4b11      	ldr	r3, [pc, #68]	; (801345c <_tx_initialize_high_level+0x60>)
 8013416:	2200      	movs	r2, #0
 8013418:	601a      	str	r2, [r3, #0]
 801341a:	4b11      	ldr	r3, [pc, #68]	; (8013460 <_tx_initialize_high_level+0x64>)
 801341c:	2200      	movs	r2, #0
 801341e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8013420:	4b10      	ldr	r3, [pc, #64]	; (8013464 <_tx_initialize_high_level+0x68>)
 8013422:	2200      	movs	r2, #0
 8013424:	601a      	str	r2, [r3, #0]
 8013426:	4b10      	ldr	r3, [pc, #64]	; (8013468 <_tx_initialize_high_level+0x6c>)
 8013428:	2200      	movs	r2, #0
 801342a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 801342c:	4b0f      	ldr	r3, [pc, #60]	; (801346c <_tx_initialize_high_level+0x70>)
 801342e:	2200      	movs	r2, #0
 8013430:	601a      	str	r2, [r3, #0]
 8013432:	4b0f      	ldr	r3, [pc, #60]	; (8013470 <_tx_initialize_high_level+0x74>)
 8013434:	2200      	movs	r2, #0
 8013436:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8013438:	4b0e      	ldr	r3, [pc, #56]	; (8013474 <_tx_initialize_high_level+0x78>)
 801343a:	2200      	movs	r2, #0
 801343c:	601a      	str	r2, [r3, #0]
 801343e:	4b0e      	ldr	r3, [pc, #56]	; (8013478 <_tx_initialize_high_level+0x7c>)
 8013440:	2200      	movs	r2, #0
 8013442:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8013444:	4b0d      	ldr	r3, [pc, #52]	; (801347c <_tx_initialize_high_level+0x80>)
 8013446:	2200      	movs	r2, #0
 8013448:	601a      	str	r2, [r3, #0]
 801344a:	4b0d      	ldr	r3, [pc, #52]	; (8013480 <_tx_initialize_high_level+0x84>)
 801344c:	2200      	movs	r2, #0
 801344e:	601a      	str	r2, [r3, #0]
#endif
}
 8013450:	bf00      	nop
 8013452:	bd80      	pop	{r7, pc}
 8013454:	20197b0c 	.word	0x20197b0c
 8013458:	20197b10 	.word	0x20197b10
 801345c:	20197b14 	.word	0x20197b14
 8013460:	20197b18 	.word	0x20197b18
 8013464:	20197b1c 	.word	0x20197b1c
 8013468:	20197b20 	.word	0x20197b20
 801346c:	20197b2c 	.word	0x20197b2c
 8013470:	20197b30 	.word	0x20197b30
 8013474:	20197b34 	.word	0x20197b34
 8013478:	20197b38 	.word	0x20197b38
 801347c:	20197b24 	.word	0x20197b24
 8013480:	20197b28 	.word	0x20197b28

08013484 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8013484:	b580      	push	{r7, lr}
 8013486:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8013488:	4b10      	ldr	r3, [pc, #64]	; (80134cc <_tx_initialize_kernel_enter+0x48>)
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8013490:	d00c      	beq.n	80134ac <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8013492:	4b0e      	ldr	r3, [pc, #56]	; (80134cc <_tx_initialize_kernel_enter+0x48>)
 8013494:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8013498:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 801349a:	f7ec ff07 	bl	80002ac <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 801349e:	f7ff ffad 	bl	80133fc <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80134a2:	4b0b      	ldr	r3, [pc, #44]	; (80134d0 <_tx_initialize_kernel_enter+0x4c>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	3301      	adds	r3, #1
 80134a8:	4a09      	ldr	r2, [pc, #36]	; (80134d0 <_tx_initialize_kernel_enter+0x4c>)
 80134aa:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80134ac:	4b07      	ldr	r3, [pc, #28]	; (80134cc <_tx_initialize_kernel_enter+0x48>)
 80134ae:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80134b2:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80134b4:	4b07      	ldr	r3, [pc, #28]	; (80134d4 <_tx_initialize_kernel_enter+0x50>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	4618      	mov	r0, r3
 80134ba:	f7ed f81d 	bl	80004f8 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80134be:	4b03      	ldr	r3, [pc, #12]	; (80134cc <_tx_initialize_kernel_enter+0x48>)
 80134c0:	2200      	movs	r2, #0
 80134c2:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80134c4:	f7ec ff2e 	bl	8000324 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80134c8:	bf00      	nop
 80134ca:	bd80      	pop	{r7, pc}
 80134cc:	20000054 	.word	0x20000054
 80134d0:	20197bdc 	.word	0x20197bdc
 80134d4:	20197b3c 	.word	0x20197b3c

080134d8 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b08e      	sub	sp, #56	; 0x38
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80134e2:	f3ef 8310 	mrs	r3, PRIMASK
 80134e6:	623b      	str	r3, [r7, #32]
    return(posture);
 80134e8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80134ea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80134ec:	b672      	cpsid	i
    return(int_posture);
 80134ee:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 80134f0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80134f6:	4a37      	ldr	r2, [pc, #220]	; (80135d4 <_tx_queue_cleanup+0xfc>)
 80134f8:	4293      	cmp	r3, r2
 80134fa:	d161      	bne.n	80135c0 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013502:	683a      	ldr	r2, [r7, #0]
 8013504:	429a      	cmp	r2, r3
 8013506:	d15b      	bne.n	80135c0 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801350c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 801350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013510:	2b00      	cmp	r3, #0
 8013512:	d055      	beq.n	80135c0 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 8013514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	4a2f      	ldr	r2, [pc, #188]	; (80135d8 <_tx_queue_cleanup+0x100>)
 801351a:	4293      	cmp	r3, r2
 801351c:	d150      	bne.n	80135c0 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 801351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013522:	2b00      	cmp	r3, #0
 8013524:	d04c      	beq.n	80135c0 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	2200      	movs	r2, #0
 801352a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 801352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013530:	1e5a      	subs	r2, r3, #1
 8013532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013534:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8013536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801353a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801353e:	2b00      	cmp	r3, #0
 8013540:	d103      	bne.n	801354a <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8013542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013544:	2200      	movs	r2, #0
 8013546:	629a      	str	r2, [r3, #40]	; 0x28
 8013548:	e013      	b.n	8013572 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801354e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013554:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8013556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801355a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 801355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801355e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013560:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 8013562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013566:	687a      	ldr	r2, [r7, #4]
 8013568:	429a      	cmp	r2, r3
 801356a:	d102      	bne.n	8013572 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 801356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801356e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013570:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013576:	2b05      	cmp	r3, #5
 8013578:	d122      	bne.n	80135c0 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 801357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801357c:	691b      	ldr	r3, [r3, #16]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d004      	beq.n	801358c <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	220b      	movs	r2, #11
 8013586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 801358a:	e003      	b.n	8013594 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	220a      	movs	r2, #10
 8013590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013594:	4b11      	ldr	r3, [pc, #68]	; (80135dc <_tx_queue_cleanup+0x104>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	3301      	adds	r3, #1
 801359a:	4a10      	ldr	r2, [pc, #64]	; (80135dc <_tx_queue_cleanup+0x104>)
 801359c:	6013      	str	r3, [r2, #0]
 801359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135a0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135a2:	693b      	ldr	r3, [r7, #16]
 80135a4:	f383 8810 	msr	PRIMASK, r3
}
 80135a8:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f000 fef0 	bl	8014390 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80135b0:	f3ef 8310 	mrs	r3, PRIMASK
 80135b4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80135b6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80135b8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80135ba:	b672      	cpsid	i
    return(int_posture);
 80135bc:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80135be:	637b      	str	r3, [r7, #52]	; 0x34
 80135c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135c2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	f383 8810 	msr	PRIMASK, r3
}
 80135ca:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80135cc:	bf00      	nop
 80135ce:	3738      	adds	r7, #56	; 0x38
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}
 80135d4:	080134d9 	.word	0x080134d9
 80135d8:	51554555 	.word	0x51554555
 80135dc:	20197bdc 	.word	0x20197bdc

080135e0 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b08c      	sub	sp, #48	; 0x30
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	60f8      	str	r0, [r7, #12]
 80135e8:	60b9      	str	r1, [r7, #8]
 80135ea:	607a      	str	r2, [r7, #4]
 80135ec:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 80135ee:	2238      	movs	r2, #56	; 0x38
 80135f0:	2100      	movs	r1, #0
 80135f2:	68f8      	ldr	r0, [r7, #12]
 80135f4:	f014 fdfb 	bl	80281ee <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	68ba      	ldr	r2, [r7, #8]
 80135fc:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	687a      	ldr	r2, [r7, #4]
 8013602:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	009b      	lsls	r3, r3, #2
 8013608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801360a:	fbb2 f3f3 	udiv	r3, r2, r3
 801360e:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 8013610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013612:	687a      	ldr	r2, [r7, #4]
 8013614:	fb02 f303 	mul.w	r3, r2, r3
 8013618:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	683a      	ldr	r2, [r7, #0]
 801361e:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	699a      	ldr	r2, [r3, #24]
 8013624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013626:	009b      	lsls	r3, r3, #2
 8013628:	441a      	add	r2, r3
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	683a      	ldr	r2, [r7, #0]
 8013632:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	683a      	ldr	r2, [r7, #0]
 8013638:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801363e:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013644:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013646:	f3ef 8310 	mrs	r3, PRIMASK
 801364a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801364c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801364e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013650:	b672      	cpsid	i
    return(int_posture);
 8013652:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8013654:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	4a18      	ldr	r2, [pc, #96]	; (80136bc <_tx_queue_create+0xdc>)
 801365a:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 801365c:	4b18      	ldr	r3, [pc, #96]	; (80136c0 <_tx_queue_create+0xe0>)
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d109      	bne.n	8013678 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8013664:	4a17      	ldr	r2, [pc, #92]	; (80136c4 <_tx_queue_create+0xe4>)
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	68fa      	ldr	r2, [r7, #12]
 801366e:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	68fa      	ldr	r2, [r7, #12]
 8013674:	635a      	str	r2, [r3, #52]	; 0x34
 8013676:	e011      	b.n	801369c <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8013678:	4b12      	ldr	r3, [pc, #72]	; (80136c4 <_tx_queue_create+0xe4>)
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 801367e:	6a3b      	ldr	r3, [r7, #32]
 8013680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013682:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8013684:	6a3b      	ldr	r3, [r7, #32]
 8013686:	68fa      	ldr	r2, [r7, #12]
 8013688:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 801368a:	69fb      	ldr	r3, [r7, #28]
 801368c:	68fa      	ldr	r2, [r7, #12]
 801368e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	69fa      	ldr	r2, [r7, #28]
 8013694:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	6a3a      	ldr	r2, [r7, #32]
 801369a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 801369c:	4b08      	ldr	r3, [pc, #32]	; (80136c0 <_tx_queue_create+0xe0>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	3301      	adds	r3, #1
 80136a2:	4a07      	ldr	r2, [pc, #28]	; (80136c0 <_tx_queue_create+0xe0>)
 80136a4:	6013      	str	r3, [r2, #0]
 80136a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	f383 8810 	msr	PRIMASK, r3
}
 80136b0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80136b2:	2300      	movs	r3, #0
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3730      	adds	r7, #48	; 0x30
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}
 80136bc:	51554555 	.word	0x51554555
 80136c0:	20197b18 	.word	0x20197b18
 80136c4:	20197b14 	.word	0x20197b14

080136c8 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b096      	sub	sp, #88	; 0x58
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	60f8      	str	r0, [r7, #12]
 80136d0:	60b9      	str	r1, [r7, #8]
 80136d2:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80136d4:	2300      	movs	r3, #0
 80136d6:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80136d8:	f3ef 8310 	mrs	r3, PRIMASK
 80136dc:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 80136de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 80136e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 80136e2:	b672      	cpsid	i
    return(int_posture);
 80136e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 80136e6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136ec:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	691b      	ldr	r3, [r3, #16]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	f000 8136 	beq.w	8013964 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80136f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d13c      	bne.n	8013778 <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	6a1b      	ldr	r3, [r3, #32]
 8013702:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8013704:	68bb      	ldr	r3, [r7, #8]
 8013706:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	689b      	ldr	r3, [r3, #8]
 801370c:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 801370e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013710:	1d13      	adds	r3, r2, #4
 8013712:	657b      	str	r3, [r7, #84]	; 0x54
 8013714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013716:	1d19      	adds	r1, r3, #4
 8013718:	6539      	str	r1, [r7, #80]	; 0x50
 801371a:	6812      	ldr	r2, [r2, #0]
 801371c:	601a      	str	r2, [r3, #0]
 801371e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013720:	2b01      	cmp	r3, #1
 8013722:	d90e      	bls.n	8013742 <_tx_queue_receive+0x7a>
 8013724:	e007      	b.n	8013736 <_tx_queue_receive+0x6e>
 8013726:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013728:	1d13      	adds	r3, r2, #4
 801372a:	657b      	str	r3, [r7, #84]	; 0x54
 801372c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801372e:	1d19      	adds	r1, r3, #4
 8013730:	6539      	str	r1, [r7, #80]	; 0x50
 8013732:	6812      	ldr	r2, [r2, #0]
 8013734:	601a      	str	r2, [r3, #0]
 8013736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013738:	3b01      	subs	r3, #1
 801373a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801373c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801373e:	2b00      	cmp	r3, #0
 8013740:	d1f1      	bne.n	8013726 <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	69db      	ldr	r3, [r3, #28]
 8013746:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013748:	429a      	cmp	r2, r3
 801374a:	d102      	bne.n	8013752 <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	699b      	ldr	r3, [r3, #24]
 8013750:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013756:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	695b      	ldr	r3, [r3, #20]
 801375c:	1c5a      	adds	r2, r3, #1
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	691b      	ldr	r3, [r3, #16]
 8013766:	1e5a      	subs	r2, r3, #1
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	611a      	str	r2, [r3, #16]
 801376c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801376e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013772:	f383 8810 	msr	PRIMASK, r3
}
 8013776:	e163      	b.n	8013a40 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801377c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 801377e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013784:	2b01      	cmp	r3, #1
 8013786:	d153      	bne.n	8013830 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8013788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801378a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801378c:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 801378e:	68bb      	ldr	r3, [r7, #8]
 8013790:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	689b      	ldr	r3, [r3, #8]
 8013796:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8013798:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801379a:	1d13      	adds	r3, r2, #4
 801379c:	657b      	str	r3, [r7, #84]	; 0x54
 801379e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137a0:	1d19      	adds	r1, r3, #4
 80137a2:	6539      	str	r1, [r7, #80]	; 0x50
 80137a4:	6812      	ldr	r2, [r2, #0]
 80137a6:	601a      	str	r2, [r3, #0]
 80137a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137aa:	2b01      	cmp	r3, #1
 80137ac:	d90e      	bls.n	80137cc <_tx_queue_receive+0x104>
 80137ae:	e007      	b.n	80137c0 <_tx_queue_receive+0xf8>
 80137b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80137b2:	1d13      	adds	r3, r2, #4
 80137b4:	657b      	str	r3, [r7, #84]	; 0x54
 80137b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137b8:	1d19      	adds	r1, r3, #4
 80137ba:	6539      	str	r1, [r7, #80]	; 0x50
 80137bc:	6812      	ldr	r2, [r2, #0]
 80137be:	601a      	str	r2, [r3, #0]
 80137c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137c2:	3b01      	subs	r3, #1
 80137c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80137c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d1f1      	bne.n	80137b0 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 80137cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137ce:	3b01      	subs	r3, #1
 80137d0:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 80137d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d103      	bne.n	80137e0 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	2200      	movs	r2, #0
 80137dc:	629a      	str	r2, [r3, #40]	; 0x28
 80137de:	e00e      	b.n	80137fe <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80137e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137e4:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80137ea:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80137ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80137f0:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 80137f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137f6:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 80137f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80137fc:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013802:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013806:	2200      	movs	r2, #0
 8013808:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801380a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801380c:	2200      	movs	r2, #0
 801380e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8013812:	4b8e      	ldr	r3, [pc, #568]	; (8013a4c <_tx_queue_receive+0x384>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	3301      	adds	r3, #1
 8013818:	4a8c      	ldr	r2, [pc, #560]	; (8013a4c <_tx_queue_receive+0x384>)
 801381a:	6013      	str	r3, [r2, #0]
 801381c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801381e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013822:	f383 8810 	msr	PRIMASK, r3
}
 8013826:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8013828:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801382a:	f000 fdb1 	bl	8014390 <_tx_thread_system_resume>
 801382e:	e107      	b.n	8013a40 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	6a1b      	ldr	r3, [r3, #32]
 8013834:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8013836:	68bb      	ldr	r3, [r7, #8]
 8013838:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	689b      	ldr	r3, [r3, #8]
 801383e:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8013840:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013842:	1d13      	adds	r3, r2, #4
 8013844:	657b      	str	r3, [r7, #84]	; 0x54
 8013846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013848:	1d19      	adds	r1, r3, #4
 801384a:	6539      	str	r1, [r7, #80]	; 0x50
 801384c:	6812      	ldr	r2, [r2, #0]
 801384e:	601a      	str	r2, [r3, #0]
 8013850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013852:	2b01      	cmp	r3, #1
 8013854:	d90e      	bls.n	8013874 <_tx_queue_receive+0x1ac>
 8013856:	e007      	b.n	8013868 <_tx_queue_receive+0x1a0>
 8013858:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801385a:	1d13      	adds	r3, r2, #4
 801385c:	657b      	str	r3, [r7, #84]	; 0x54
 801385e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013860:	1d19      	adds	r1, r3, #4
 8013862:	6539      	str	r1, [r7, #80]	; 0x50
 8013864:	6812      	ldr	r2, [r2, #0]
 8013866:	601a      	str	r2, [r3, #0]
 8013868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801386a:	3b01      	subs	r3, #1
 801386c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801386e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013870:	2b00      	cmp	r3, #0
 8013872:	d1f1      	bne.n	8013858 <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	69db      	ldr	r3, [r3, #28]
 8013878:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801387a:	429a      	cmp	r2, r3
 801387c:	d102      	bne.n	8013884 <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	699b      	ldr	r3, [r3, #24]
 8013882:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013888:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 801388a:	4b70      	ldr	r3, [pc, #448]	; (8013a4c <_tx_queue_receive+0x384>)
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	3301      	adds	r3, #1
 8013890:	4a6e      	ldr	r2, [pc, #440]	; (8013a4c <_tx_queue_receive+0x384>)
 8013892:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8013894:	4b6d      	ldr	r3, [pc, #436]	; (8013a4c <_tx_queue_receive+0x384>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	3b01      	subs	r3, #1
 801389a:	4a6c      	ldr	r2, [pc, #432]	; (8013a4c <_tx_queue_receive+0x384>)
 801389c:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 801389e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80138a2:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138a8:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	689b      	ldr	r3, [r3, #8]
 80138ae:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80138b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80138b2:	1d13      	adds	r3, r2, #4
 80138b4:	657b      	str	r3, [r7, #84]	; 0x54
 80138b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138b8:	1d19      	adds	r1, r3, #4
 80138ba:	6539      	str	r1, [r7, #80]	; 0x50
 80138bc:	6812      	ldr	r2, [r2, #0]
 80138be:	601a      	str	r2, [r3, #0]
 80138c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138c2:	2b01      	cmp	r3, #1
 80138c4:	d90e      	bls.n	80138e4 <_tx_queue_receive+0x21c>
 80138c6:	e007      	b.n	80138d8 <_tx_queue_receive+0x210>
 80138c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80138ca:	1d13      	adds	r3, r2, #4
 80138cc:	657b      	str	r3, [r7, #84]	; 0x54
 80138ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138d0:	1d19      	adds	r1, r3, #4
 80138d2:	6539      	str	r1, [r7, #80]	; 0x50
 80138d4:	6812      	ldr	r2, [r2, #0]
 80138d6:	601a      	str	r2, [r3, #0]
 80138d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138da:	3b01      	subs	r3, #1
 80138dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80138de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d1f1      	bne.n	80138c8 <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	69db      	ldr	r3, [r3, #28]
 80138e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80138ea:	429a      	cmp	r2, r3
 80138ec:	d102      	bne.n	80138f4 <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	699b      	ldr	r3, [r3, #24]
 80138f2:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80138f8:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138fe:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8013900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013902:	3b01      	subs	r3, #1
 8013904:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8013906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013908:	2b00      	cmp	r3, #0
 801390a:	d103      	bne.n	8013914 <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	2200      	movs	r2, #0
 8013910:	629a      	str	r2, [r3, #40]	; 0x28
 8013912:	e00e      	b.n	8013932 <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8013914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013918:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801391e:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013924:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8013926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801392a:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 801392c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801392e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013930:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013936:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801393a:	2200      	movs	r2, #0
 801393c:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801393e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013940:	2200      	movs	r2, #0
 8013942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8013946:	4b41      	ldr	r3, [pc, #260]	; (8013a4c <_tx_queue_receive+0x384>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	3301      	adds	r3, #1
 801394c:	4a3f      	ldr	r2, [pc, #252]	; (8013a4c <_tx_queue_receive+0x384>)
 801394e:	6013      	str	r3, [r2, #0]
 8013950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013952:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013954:	6a3b      	ldr	r3, [r7, #32]
 8013956:	f383 8810 	msr	PRIMASK, r3
}
 801395a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 801395c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801395e:	f000 fd17 	bl	8014390 <_tx_thread_system_resume>
 8013962:	e06d      	b.n	8013a40 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d062      	beq.n	8013a30 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801396a:	4b38      	ldr	r3, [pc, #224]	; (8013a4c <_tx_queue_receive+0x384>)
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d008      	beq.n	8013984 <_tx_queue_receive+0x2bc>
 8013972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013974:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013976:	69fb      	ldr	r3, [r7, #28]
 8013978:	f383 8810 	msr	PRIMASK, r3
}
 801397c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 801397e:	230a      	movs	r3, #10
 8013980:	64bb      	str	r3, [r7, #72]	; 0x48
 8013982:	e05d      	b.n	8013a40 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013984:	4b32      	ldr	r3, [pc, #200]	; (8013a50 <_tx_queue_receive+0x388>)
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 801398a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801398c:	4a31      	ldr	r2, [pc, #196]	; (8013a54 <_tx_queue_receive+0x38c>)
 801398e:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8013990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013992:	68fa      	ldr	r2, [r7, #12]
 8013994:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 8013996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013998:	68ba      	ldr	r2, [r7, #8]
 801399a:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 801399c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801399e:	2200      	movs	r2, #0
 80139a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80139a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80139aa:	1c5a      	adds	r2, r3, #1
 80139ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139ae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 80139b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d109      	bne.n	80139cc <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80139bc:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80139be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80139c2:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80139c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80139c8:	675a      	str	r2, [r3, #116]	; 0x74
 80139ca:	e011      	b.n	80139f0 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139d0:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80139d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139d6:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80139d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139dc:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80139de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80139e2:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80139e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80139e8:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80139ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80139ee:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 80139f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139f2:	1c5a      	adds	r2, r3, #1
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 80139f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139fa:	2205      	movs	r2, #5
 80139fc:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80139fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a00:	2201      	movs	r2, #1
 8013a02:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8013a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a06:	687a      	ldr	r2, [r7, #4]
 8013a08:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8013a0a:	4b10      	ldr	r3, [pc, #64]	; (8013a4c <_tx_queue_receive+0x384>)
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	3301      	adds	r3, #1
 8013a10:	4a0e      	ldr	r2, [pc, #56]	; (8013a4c <_tx_queue_receive+0x384>)
 8013a12:	6013      	str	r3, [r2, #0]
 8013a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a16:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a18:	69bb      	ldr	r3, [r7, #24]
 8013a1a:	f383 8810 	msr	PRIMASK, r3
}
 8013a1e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8013a20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013a22:	f000 fdb5 	bl	8014590 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8013a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8013a2e:	e007      	b.n	8013a40 <_tx_queue_receive+0x378>
 8013a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a32:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a34:	697b      	ldr	r3, [r7, #20]
 8013a36:	f383 8810 	msr	PRIMASK, r3
}
 8013a3a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 8013a3c:	230a      	movs	r3, #10
 8013a3e:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 8013a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3758      	adds	r7, #88	; 0x58
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}
 8013a4a:	bf00      	nop
 8013a4c:	20197bdc 	.word	0x20197bdc
 8013a50:	20197b44 	.word	0x20197b44
 8013a54:	080134d9 	.word	0x080134d9

08013a58 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b094      	sub	sp, #80	; 0x50
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	60f8      	str	r0, [r7, #12]
 8013a60:	60b9      	str	r1, [r7, #8]
 8013a62:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8013a64:	2300      	movs	r3, #0
 8013a66:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013a68:	f3ef 8310 	mrs	r3, PRIMASK
 8013a6c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8013a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8013a70:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8013a72:	b672      	cpsid	i
    return(int_posture);
 8013a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8013a76:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a7c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	695b      	ldr	r3, [r3, #20]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	f000 809b 	beq.w	8013bbe <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8013a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d13c      	bne.n	8013b08 <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	695b      	ldr	r3, [r3, #20]
 8013a92:	1e5a      	subs	r2, r3, #1
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	691b      	ldr	r3, [r3, #16]
 8013a9c:	1c5a      	adds	r2, r3, #1
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aaa:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	689b      	ldr	r3, [r3, #8]
 8013ab0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8013ab2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013ab4:	1d13      	adds	r3, r2, #4
 8013ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013aba:	1d19      	adds	r1, r3, #4
 8013abc:	64b9      	str	r1, [r7, #72]	; 0x48
 8013abe:	6812      	ldr	r2, [r2, #0]
 8013ac0:	601a      	str	r2, [r3, #0]
 8013ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ac4:	2b01      	cmp	r3, #1
 8013ac6:	d90e      	bls.n	8013ae6 <_tx_queue_send+0x8e>
 8013ac8:	e007      	b.n	8013ada <_tx_queue_send+0x82>
 8013aca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013acc:	1d13      	adds	r3, r2, #4
 8013ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ad2:	1d19      	adds	r1, r3, #4
 8013ad4:	64b9      	str	r1, [r7, #72]	; 0x48
 8013ad6:	6812      	ldr	r2, [r2, #0]
 8013ad8:	601a      	str	r2, [r3, #0]
 8013ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013adc:	3b01      	subs	r3, #1
 8013ade:	647b      	str	r3, [r7, #68]	; 0x44
 8013ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d1f1      	bne.n	8013aca <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	69db      	ldr	r3, [r3, #28]
 8013aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013aec:	429a      	cmp	r2, r3
 8013aee:	d102      	bne.n	8013af6 <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	699b      	ldr	r3, [r3, #24]
 8013af4:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013afa:	625a      	str	r2, [r3, #36]	; 0x24
 8013afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013afe:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b00:	6a3b      	ldr	r3, [r7, #32]
 8013b02:	f383 8810 	msr	PRIMASK, r3
}
 8013b06:	e0c8      	b.n	8013c9a <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b0c:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8013b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b10:	3b01      	subs	r3, #1
 8013b12:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8013b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d103      	bne.n	8013b22 <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	629a      	str	r2, [r3, #40]	; 0x28
 8013b20:	e012      	b.n	8013b48 <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8013b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8013b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b2e:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b34:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8013b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b40:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8013b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b46:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b4c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b50:	2200      	movs	r2, #0
 8013b52:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8013b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b5c:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	689b      	ldr	r3, [r3, #8]
 8013b62:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8013b64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013b66:	1d13      	adds	r3, r2, #4
 8013b68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b6c:	1d19      	adds	r1, r3, #4
 8013b6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8013b70:	6812      	ldr	r2, [r2, #0]
 8013b72:	601a      	str	r2, [r3, #0]
 8013b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b76:	2b01      	cmp	r3, #1
 8013b78:	d90e      	bls.n	8013b98 <_tx_queue_send+0x140>
 8013b7a:	e007      	b.n	8013b8c <_tx_queue_send+0x134>
 8013b7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013b7e:	1d13      	adds	r3, r2, #4
 8013b80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b84:	1d19      	adds	r1, r3, #4
 8013b86:	64b9      	str	r1, [r7, #72]	; 0x48
 8013b88:	6812      	ldr	r2, [r2, #0]
 8013b8a:	601a      	str	r2, [r3, #0]
 8013b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b8e:	3b01      	subs	r3, #1
 8013b90:	647b      	str	r3, [r7, #68]	; 0x44
 8013b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d1f1      	bne.n	8013b7c <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8013b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8013ba0:	4b40      	ldr	r3, [pc, #256]	; (8013ca4 <_tx_queue_send+0x24c>)
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	3301      	adds	r3, #1
 8013ba6:	4a3f      	ldr	r2, [pc, #252]	; (8013ca4 <_tx_queue_send+0x24c>)
 8013ba8:	6013      	str	r3, [r2, #0]
 8013baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bac:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013bae:	69fb      	ldr	r3, [r7, #28]
 8013bb0:	f383 8810 	msr	PRIMASK, r3
}
 8013bb4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8013bb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013bb8:	f000 fbea 	bl	8014390 <_tx_thread_system_resume>
 8013bbc:	e06d      	b.n	8013c9a <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d062      	beq.n	8013c8a <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8013bc4:	4b37      	ldr	r3, [pc, #220]	; (8013ca4 <_tx_queue_send+0x24c>)
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d008      	beq.n	8013bde <_tx_queue_send+0x186>
 8013bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bce:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013bd0:	69bb      	ldr	r3, [r7, #24]
 8013bd2:	f383 8810 	msr	PRIMASK, r3
}
 8013bd6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8013bd8:	230b      	movs	r3, #11
 8013bda:	643b      	str	r3, [r7, #64]	; 0x40
 8013bdc:	e05d      	b.n	8013c9a <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013bde:	4b32      	ldr	r3, [pc, #200]	; (8013ca8 <_tx_queue_send+0x250>)
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8013be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013be6:	4a31      	ldr	r2, [pc, #196]	; (8013cac <_tx_queue_send+0x254>)
 8013be8:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8013bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bec:	68fa      	ldr	r2, [r7, #12]
 8013bee:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8013bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bf2:	68ba      	ldr	r2, [r7, #8]
 8013bf4:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8013bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8013bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013c04:	1c5a      	adds	r2, r3, #1
 8013c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c08:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8013c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d109      	bne.n	8013c26 <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c16:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8013c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c1c:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8013c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c22:	675a      	str	r2, [r3, #116]	; 0x74
 8013c24:	e011      	b.n	8013c4a <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c2a:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8013c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c30:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8013c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c36:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8013c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c3c:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8013c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c42:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8013c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c48:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8013c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c4c:	1c5a      	adds	r2, r3, #1
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8013c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c54:	2205      	movs	r2, #5
 8013c56:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c5a:	2201      	movs	r2, #1
 8013c5c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8013c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c60:	687a      	ldr	r2, [r7, #4]
 8013c62:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8013c64:	4b0f      	ldr	r3, [pc, #60]	; (8013ca4 <_tx_queue_send+0x24c>)
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	3301      	adds	r3, #1
 8013c6a:	4a0e      	ldr	r2, [pc, #56]	; (8013ca4 <_tx_queue_send+0x24c>)
 8013c6c:	6013      	str	r3, [r2, #0]
 8013c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c70:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c72:	697b      	ldr	r3, [r7, #20]
 8013c74:	f383 8810 	msr	PRIMASK, r3
}
 8013c78:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8013c7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013c7c:	f000 fc88 	bl	8014590 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8013c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c86:	643b      	str	r3, [r7, #64]	; 0x40
 8013c88:	e007      	b.n	8013c9a <_tx_queue_send+0x242>
 8013c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c8c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c8e:	693b      	ldr	r3, [r7, #16]
 8013c90:	f383 8810 	msr	PRIMASK, r3
}
 8013c94:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 8013c96:	230b      	movs	r3, #11
 8013c98:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 8013c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	3750      	adds	r7, #80	; 0x50
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}
 8013ca4:	20197bdc 	.word	0x20197bdc
 8013ca8:	20197b44 	.word	0x20197b44
 8013cac:	080134d9 	.word	0x080134d9

08013cb0 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b08e      	sub	sp, #56	; 0x38
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
 8013cb8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013cba:	f3ef 8310 	mrs	r3, PRIMASK
 8013cbe:	623b      	str	r3, [r7, #32]
    return(posture);
 8013cc0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013cc2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013cc4:	b672      	cpsid	i
    return(int_posture);
 8013cc6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8013cc8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013cce:	4a33      	ldr	r2, [pc, #204]	; (8013d9c <_tx_semaphore_cleanup+0xec>)
 8013cd0:	4293      	cmp	r3, r2
 8013cd2:	d158      	bne.n	8013d86 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013cda:	683a      	ldr	r2, [r7, #0]
 8013cdc:	429a      	cmp	r2, r3
 8013cde:	d152      	bne.n	8013d86 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ce4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8013ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d04c      	beq.n	8013d86 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8013cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	4a2b      	ldr	r2, [pc, #172]	; (8013da0 <_tx_semaphore_cleanup+0xf0>)
 8013cf2:	4293      	cmp	r3, r2
 8013cf4:	d147      	bne.n	8013d86 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8013cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf8:	691b      	ldr	r3, [r3, #16]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d043      	beq.n	8013d86 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2200      	movs	r2, #0
 8013d02:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8013d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d06:	691b      	ldr	r3, [r3, #16]
 8013d08:	1e5a      	subs	r2, r3, #1
 8013d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d0c:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8013d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d10:	691b      	ldr	r3, [r3, #16]
 8013d12:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8013d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d103      	bne.n	8013d22 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8013d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	60da      	str	r2, [r3, #12]
 8013d20:	e013      	b.n	8013d4a <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d26:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d2c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8013d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d32:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d38:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8013d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d3c:	68db      	ldr	r3, [r3, #12]
 8013d3e:	687a      	ldr	r2, [r7, #4]
 8013d40:	429a      	cmp	r2, r3
 8013d42:	d102      	bne.n	8013d4a <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8013d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d48:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d4e:	2b06      	cmp	r3, #6
 8013d50:	d119      	bne.n	8013d86 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	220d      	movs	r2, #13
 8013d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013d5a:	4b12      	ldr	r3, [pc, #72]	; (8013da4 <_tx_semaphore_cleanup+0xf4>)
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	3301      	adds	r3, #1
 8013d60:	4a10      	ldr	r2, [pc, #64]	; (8013da4 <_tx_semaphore_cleanup+0xf4>)
 8013d62:	6013      	str	r3, [r2, #0]
 8013d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d66:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	f383 8810 	msr	PRIMASK, r3
}
 8013d6e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8013d70:	6878      	ldr	r0, [r7, #4]
 8013d72:	f000 fb0d 	bl	8014390 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d76:	f3ef 8310 	mrs	r3, PRIMASK
 8013d7a:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013d7c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013d7e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013d80:	b672      	cpsid	i
    return(int_posture);
 8013d82:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8013d84:	637b      	str	r3, [r7, #52]	; 0x34
 8013d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d88:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	f383 8810 	msr	PRIMASK, r3
}
 8013d90:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8013d92:	bf00      	nop
 8013d94:	3738      	adds	r7, #56	; 0x38
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd80      	pop	{r7, pc}
 8013d9a:	bf00      	nop
 8013d9c:	08013cb1 	.word	0x08013cb1
 8013da0:	53454d41 	.word	0x53454d41
 8013da4:	20197bdc 	.word	0x20197bdc

08013da8 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b08a      	sub	sp, #40	; 0x28
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	60f8      	str	r0, [r7, #12]
 8013db0:	60b9      	str	r1, [r7, #8]
 8013db2:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8013db4:	221c      	movs	r2, #28
 8013db6:	2100      	movs	r1, #0
 8013db8:	68f8      	ldr	r0, [r7, #12]
 8013dba:	f014 fa18 	bl	80281ee <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	68ba      	ldr	r2, [r7, #8]
 8013dc2:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	687a      	ldr	r2, [r7, #4]
 8013dc8:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013dca:	f3ef 8310 	mrs	r3, PRIMASK
 8013dce:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013dd0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013dd2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013dd4:	b672      	cpsid	i
    return(int_posture);
 8013dd6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8013dd8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	4a18      	ldr	r2, [pc, #96]	; (8013e40 <_tx_semaphore_create+0x98>)
 8013dde:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8013de0:	4b18      	ldr	r3, [pc, #96]	; (8013e44 <_tx_semaphore_create+0x9c>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d109      	bne.n	8013dfc <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8013de8:	4a17      	ldr	r2, [pc, #92]	; (8013e48 <_tx_semaphore_create+0xa0>)
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	68fa      	ldr	r2, [r7, #12]
 8013df2:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	68fa      	ldr	r2, [r7, #12]
 8013df8:	619a      	str	r2, [r3, #24]
 8013dfa:	e011      	b.n	8013e20 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8013dfc:	4b12      	ldr	r3, [pc, #72]	; (8013e48 <_tx_semaphore_create+0xa0>)
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8013e02:	6a3b      	ldr	r3, [r7, #32]
 8013e04:	699b      	ldr	r3, [r3, #24]
 8013e06:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8013e08:	6a3b      	ldr	r3, [r7, #32]
 8013e0a:	68fa      	ldr	r2, [r7, #12]
 8013e0c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8013e0e:	69fb      	ldr	r3, [r7, #28]
 8013e10:	68fa      	ldr	r2, [r7, #12]
 8013e12:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	69fa      	ldr	r2, [r7, #28]
 8013e18:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	6a3a      	ldr	r2, [r7, #32]
 8013e1e:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8013e20:	4b08      	ldr	r3, [pc, #32]	; (8013e44 <_tx_semaphore_create+0x9c>)
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	3301      	adds	r3, #1
 8013e26:	4a07      	ldr	r2, [pc, #28]	; (8013e44 <_tx_semaphore_create+0x9c>)
 8013e28:	6013      	str	r3, [r2, #0]
 8013e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e2e:	693b      	ldr	r3, [r7, #16]
 8013e30:	f383 8810 	msr	PRIMASK, r3
}
 8013e34:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013e36:	2300      	movs	r3, #0
}
 8013e38:	4618      	mov	r0, r3
 8013e3a:	3728      	adds	r7, #40	; 0x28
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}
 8013e40:	53454d41 	.word	0x53454d41
 8013e44:	20197b10 	.word	0x20197b10
 8013e48:	20197b0c 	.word	0x20197b0c

08013e4c <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b08e      	sub	sp, #56	; 0x38
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
 8013e54:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8013e56:	2300      	movs	r3, #0
 8013e58:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8013e5e:	623b      	str	r3, [r7, #32]
    return(posture);
 8013e60:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013e62:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013e64:	b672      	cpsid	i
    return(int_posture);
 8013e66:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8013e68:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	689b      	ldr	r3, [r3, #8]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d00a      	beq.n	8013e88 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	689b      	ldr	r3, [r3, #8]
 8013e76:	1e5a      	subs	r2, r3, #1
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	609a      	str	r2, [r3, #8]
 8013e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e7e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e80:	69bb      	ldr	r3, [r7, #24]
 8013e82:	f383 8810 	msr	PRIMASK, r3
}
 8013e86:	e068      	b.n	8013f5a <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8013e88:	683b      	ldr	r3, [r7, #0]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d05d      	beq.n	8013f4a <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8013e8e:	4b35      	ldr	r3, [pc, #212]	; (8013f64 <_tx_semaphore_get+0x118>)
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d008      	beq.n	8013ea8 <_tx_semaphore_get+0x5c>
 8013e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e98:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e9a:	697b      	ldr	r3, [r7, #20]
 8013e9c:	f383 8810 	msr	PRIMASK, r3
}
 8013ea0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8013ea2:	230d      	movs	r3, #13
 8013ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8013ea6:	e058      	b.n	8013f5a <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013ea8:	4b2f      	ldr	r3, [pc, #188]	; (8013f68 <_tx_semaphore_get+0x11c>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8013eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eb0:	4a2e      	ldr	r2, [pc, #184]	; (8013f6c <_tx_semaphore_get+0x120>)
 8013eb2:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8013eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eb6:	687a      	ldr	r2, [r7, #4]
 8013eb8:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8013eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ebc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013ec0:	1c5a      	adds	r2, r3, #1
 8013ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	691b      	ldr	r3, [r3, #16]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d109      	bne.n	8013ee4 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ed4:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8013ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013eda:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8013edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ee0:	675a      	str	r2, [r3, #116]	; 0x74
 8013ee2:	e011      	b.n	8013f08 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	68db      	ldr	r3, [r3, #12]
 8013ee8:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8013eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013eee:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8013ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ef4:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8013ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013efa:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8013efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f00:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8013f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f06:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	691b      	ldr	r3, [r3, #16]
 8013f0c:	1c5a      	adds	r2, r3, #1
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8013f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f14:	2206      	movs	r2, #6
 8013f16:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f1a:	2201      	movs	r2, #1
 8013f1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8013f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f20:	683a      	ldr	r2, [r7, #0]
 8013f22:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8013f24:	4b0f      	ldr	r3, [pc, #60]	; (8013f64 <_tx_semaphore_get+0x118>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	3301      	adds	r3, #1
 8013f2a:	4a0e      	ldr	r2, [pc, #56]	; (8013f64 <_tx_semaphore_get+0x118>)
 8013f2c:	6013      	str	r3, [r2, #0]
 8013f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f30:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	f383 8810 	msr	PRIMASK, r3
}
 8013f38:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8013f3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f3c:	f000 fb28 	bl	8014590 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8013f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013f46:	637b      	str	r3, [r7, #52]	; 0x34
 8013f48:	e007      	b.n	8013f5a <_tx_semaphore_get+0x10e>
 8013f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f4c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	f383 8810 	msr	PRIMASK, r3
}
 8013f54:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8013f56:	230d      	movs	r3, #13
 8013f58:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8013f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	3738      	adds	r7, #56	; 0x38
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bd80      	pop	{r7, pc}
 8013f64:	20197bdc 	.word	0x20197bdc
 8013f68:	20197b44 	.word	0x20197b44
 8013f6c:	08013cb1 	.word	0x08013cb1

08013f70 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b08c      	sub	sp, #48	; 0x30
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013f78:	f3ef 8310 	mrs	r3, PRIMASK
 8013f7c:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013f7e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013f80:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013f82:	b672      	cpsid	i
    return(int_posture);
 8013f84:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8013f86:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	691b      	ldr	r3, [r3, #16]
 8013f8c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8013f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d10a      	bne.n	8013faa <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	689b      	ldr	r3, [r3, #8]
 8013f98:	1c5a      	adds	r2, r3, #1
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	609a      	str	r2, [r3, #8]
 8013f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013fa2:	693b      	ldr	r3, [r7, #16]
 8013fa4:	f383 8810 	msr	PRIMASK, r3
}
 8013fa8:	e033      	b.n	8014012 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	68db      	ldr	r3, [r3, #12]
 8013fae:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8013fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb2:	3b01      	subs	r3, #1
 8013fb4:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8013fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d103      	bne.n	8013fc4 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	60da      	str	r2, [r3, #12]
 8013fc2:	e00e      	b.n	8013fe2 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8013fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fc8:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	6a3a      	ldr	r2, [r7, #32]
 8013fce:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fd4:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8013fd6:	6a3b      	ldr	r3, [r7, #32]
 8013fd8:	69fa      	ldr	r2, [r7, #28]
 8013fda:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013fdc:	69fb      	ldr	r3, [r7, #28]
 8013fde:	6a3a      	ldr	r2, [r7, #32]
 8013fe0:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013fe6:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fea:	2200      	movs	r2, #0
 8013fec:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8013fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff0:	2200      	movs	r2, #0
 8013ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8013ff6:	4b09      	ldr	r3, [pc, #36]	; (801401c <_tx_semaphore_put+0xac>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	4a07      	ldr	r2, [pc, #28]	; (801401c <_tx_semaphore_put+0xac>)
 8013ffe:	6013      	str	r3, [r2, #0]
 8014000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014002:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	f383 8810 	msr	PRIMASK, r3
}
 801400a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 801400c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801400e:	f000 f9bf 	bl	8014390 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8014012:	2300      	movs	r3, #0
}
 8014014:	4618      	mov	r0, r3
 8014016:	3730      	adds	r7, #48	; 0x30
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}
 801401c:	20197bdc 	.word	0x20197bdc

08014020 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b092      	sub	sp, #72	; 0x48
 8014024:	af00      	add	r7, sp, #0
 8014026:	60f8      	str	r0, [r7, #12]
 8014028:	60b9      	str	r1, [r7, #8]
 801402a:	607a      	str	r2, [r7, #4]
 801402c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 801402e:	2300      	movs	r3, #0
 8014030:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8014032:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014034:	21ef      	movs	r1, #239	; 0xef
 8014036:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8014038:	f014 f8d9 	bl	80281ee <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 801403c:	22b0      	movs	r2, #176	; 0xb0
 801403e:	2100      	movs	r1, #0
 8014040:	68f8      	ldr	r0, [r7, #12]
 8014042:	f014 f8d4 	bl	80281ee <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	68ba      	ldr	r2, [r7, #8]
 801404a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	687a      	ldr	r2, [r7, #4]
 8014050:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	683a      	ldr	r2, [r7, #0]
 8014056:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801405c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014062:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014068:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801406e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014076:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801407c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	2220      	movs	r2, #32
 8014082:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8014086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014088:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 801408a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801408c:	3b01      	subs	r3, #1
 801408e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014090:	4413      	add	r3, r2
 8014092:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014098:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 801409a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801409c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801409e:	429a      	cmp	r2, r3
 80140a0:	d007      	beq.n	80140b2 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	2200      	movs	r2, #0
 80140a6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	2200      	movs	r2, #0
 80140ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80140b0:	e006      	b.n	80140c0 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80140b6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80140bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	2203      	movs	r2, #3
 80140c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	4a48      	ldr	r2, [pc, #288]	; (80141ec <_tx_thread_create+0x1cc>)
 80140ca:	655a      	str	r2, [r3, #84]	; 0x54
 80140cc:	68fa      	ldr	r2, [r7, #12]
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80140d2:	4947      	ldr	r1, [pc, #284]	; (80141f0 <_tx_thread_create+0x1d0>)
 80140d4:	68f8      	ldr	r0, [r7, #12]
 80140d6:	f7ec f993 	bl	8000400 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80140da:	f3ef 8310 	mrs	r3, PRIMASK
 80140de:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80140e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80140e2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80140e4:	b672      	cpsid	i
    return(int_posture);
 80140e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80140e8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	4a41      	ldr	r2, [pc, #260]	; (80141f4 <_tx_thread_create+0x1d4>)
 80140ee:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80140f0:	4b41      	ldr	r3, [pc, #260]	; (80141f8 <_tx_thread_create+0x1d8>)
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d10b      	bne.n	8014110 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80140f8:	4a40      	ldr	r2, [pc, #256]	; (80141fc <_tx_thread_create+0x1dc>)
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	68fa      	ldr	r2, [r7, #12]
 8014102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	68fa      	ldr	r2, [r7, #12]
 801410a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 801410e:	e016      	b.n	801413e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8014110:	4b3a      	ldr	r3, [pc, #232]	; (80141fc <_tx_thread_create+0x1dc>)
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8014116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801411c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 801411e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014120:	68fa      	ldr	r2, [r7, #12]
 8014122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8014126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014128:	68fa      	ldr	r2, [r7, #12]
 801412a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801413a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 801413e:	4b2e      	ldr	r3, [pc, #184]	; (80141f8 <_tx_thread_create+0x1d8>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	3301      	adds	r3, #1
 8014144:	4a2c      	ldr	r2, [pc, #176]	; (80141f8 <_tx_thread_create+0x1d8>)
 8014146:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8014148:	4b2d      	ldr	r3, [pc, #180]	; (8014200 <_tx_thread_create+0x1e0>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	3301      	adds	r3, #1
 801414e:	4a2c      	ldr	r2, [pc, #176]	; (8014200 <_tx_thread_create+0x1e0>)
 8014150:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8014152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014154:	2b01      	cmp	r3, #1
 8014156:	d129      	bne.n	80141ac <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014158:	f3ef 8305 	mrs	r3, IPSR
 801415c:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 801415e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8014160:	4b28      	ldr	r3, [pc, #160]	; (8014204 <_tx_thread_create+0x1e4>)
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	4313      	orrs	r3, r2
 8014166:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801416a:	d30d      	bcc.n	8014188 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 801416c:	4b26      	ldr	r3, [pc, #152]	; (8014208 <_tx_thread_create+0x1e8>)
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8014172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014174:	2b00      	cmp	r3, #0
 8014176:	d009      	beq.n	801418c <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8014178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801417a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801417c:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 801417e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014184:	63da      	str	r2, [r3, #60]	; 0x3c
 8014186:	e001      	b.n	801418c <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8014188:	2300      	movs	r3, #0
 801418a:	647b      	str	r3, [r7, #68]	; 0x44
 801418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801418e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014190:	6a3b      	ldr	r3, [r7, #32]
 8014192:	f383 8810 	msr	PRIMASK, r3
}
 8014196:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8014198:	68f8      	ldr	r0, [r7, #12]
 801419a:	f000 f8f9 	bl	8014390 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 801419e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d01e      	beq.n	80141e2 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80141a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80141a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80141a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80141aa:	e01a      	b.n	80141e2 <_tx_thread_create+0x1c2>
 80141ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80141b0:	693b      	ldr	r3, [r7, #16]
 80141b2:	f383 8810 	msr	PRIMASK, r3
}
 80141b6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80141b8:	f3ef 8310 	mrs	r3, PRIMASK
 80141bc:	61bb      	str	r3, [r7, #24]
    return(posture);
 80141be:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80141c0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80141c2:	b672      	cpsid	i
    return(int_posture);
 80141c4:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80141c6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80141c8:	4b0d      	ldr	r3, [pc, #52]	; (8014200 <_tx_thread_create+0x1e0>)
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	3b01      	subs	r3, #1
 80141ce:	4a0c      	ldr	r2, [pc, #48]	; (8014200 <_tx_thread_create+0x1e0>)
 80141d0:	6013      	str	r3, [r2, #0]
 80141d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80141d6:	69fb      	ldr	r3, [r7, #28]
 80141d8:	f383 8810 	msr	PRIMASK, r3
}
 80141dc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80141de:	f000 f89d 	bl	801431c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80141e2:	2300      	movs	r3, #0
}
 80141e4:	4618      	mov	r0, r3
 80141e6:	3748      	adds	r7, #72	; 0x48
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}
 80141ec:	08014865 	.word	0x08014865
 80141f0:	08014285 	.word	0x08014285
 80141f4:	54485244 	.word	0x54485244
 80141f8:	20197b50 	.word	0x20197b50
 80141fc:	20197b4c 	.word	0x20197b4c
 8014200:	20197bdc 	.word	0x20197bdc
 8014204:	20000054 	.word	0x20000054
 8014208:	20197b48 	.word	0x20197b48

0801420c <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 801420c:	b580      	push	{r7, lr}
 801420e:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8014210:	4b12      	ldr	r3, [pc, #72]	; (801425c <_tx_thread_initialize+0x50>)
 8014212:	2200      	movs	r2, #0
 8014214:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8014216:	4b12      	ldr	r3, [pc, #72]	; (8014260 <_tx_thread_initialize+0x54>)
 8014218:	2200      	movs	r2, #0
 801421a:	601a      	str	r2, [r3, #0]
 801421c:	4b11      	ldr	r3, [pc, #68]	; (8014264 <_tx_thread_initialize+0x58>)
 801421e:	2200      	movs	r2, #0
 8014220:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8014222:	4b11      	ldr	r3, [pc, #68]	; (8014268 <_tx_thread_initialize+0x5c>)
 8014224:	2220      	movs	r2, #32
 8014226:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8014228:	2280      	movs	r2, #128	; 0x80
 801422a:	2100      	movs	r1, #0
 801422c:	480f      	ldr	r0, [pc, #60]	; (801426c <_tx_thread_initialize+0x60>)
 801422e:	f013 ffde 	bl	80281ee <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8014232:	4b0f      	ldr	r3, [pc, #60]	; (8014270 <_tx_thread_initialize+0x64>)
 8014234:	2200      	movs	r2, #0
 8014236:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8014238:	4b0e      	ldr	r3, [pc, #56]	; (8014274 <_tx_thread_initialize+0x68>)
 801423a:	2200      	movs	r2, #0
 801423c:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 801423e:	4b0e      	ldr	r3, [pc, #56]	; (8014278 <_tx_thread_initialize+0x6c>)
 8014240:	2200      	movs	r2, #0
 8014242:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8014244:	4b0d      	ldr	r3, [pc, #52]	; (801427c <_tx_thread_initialize+0x70>)
 8014246:	2200      	movs	r2, #0
 8014248:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 801424a:	4b0d      	ldr	r3, [pc, #52]	; (8014280 <_tx_thread_initialize+0x74>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8014252:	4a0b      	ldr	r2, [pc, #44]	; (8014280 <_tx_thread_initialize+0x74>)
 8014254:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8014256:	bf00      	nop
 8014258:	bd80      	pop	{r7, pc}
 801425a:	bf00      	nop
 801425c:	20197b44 	.word	0x20197b44
 8014260:	20197b48 	.word	0x20197b48
 8014264:	20197b54 	.word	0x20197b54
 8014268:	20197b58 	.word	0x20197b58
 801426c:	20197b5c 	.word	0x20197b5c
 8014270:	20197b4c 	.word	0x20197b4c
 8014274:	20197b50 	.word	0x20197b50
 8014278:	20197bdc 	.word	0x20197bdc
 801427c:	20197be0 	.word	0x20197be0
 8014280:	20197be4 	.word	0x20197be4

08014284 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b088      	sub	sp, #32
 8014288:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801428a:	4b21      	ldr	r3, [pc, #132]	; (8014310 <_tx_thread_shell_entry+0x8c>)
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014294:	69fa      	ldr	r2, [r7, #28]
 8014296:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8014298:	4610      	mov	r0, r2
 801429a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 801429c:	4b1d      	ldr	r3, [pc, #116]	; (8014314 <_tx_thread_shell_entry+0x90>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d003      	beq.n	80142ac <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80142a4:	4b1b      	ldr	r3, [pc, #108]	; (8014314 <_tx_thread_shell_entry+0x90>)
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	69f8      	ldr	r0, [r7, #28]
 80142aa:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80142ac:	f3ef 8310 	mrs	r3, PRIMASK
 80142b0:	607b      	str	r3, [r7, #4]
    return(posture);
 80142b2:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80142b4:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80142b6:	b672      	cpsid	i
    return(int_posture);
 80142b8:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80142ba:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80142bc:	69fb      	ldr	r3, [r7, #28]
 80142be:	2201      	movs	r2, #1
 80142c0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80142c2:	69fb      	ldr	r3, [r7, #28]
 80142c4:	2201      	movs	r2, #1
 80142c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80142c8:	69fb      	ldr	r3, [r7, #28]
 80142ca:	2200      	movs	r2, #0
 80142cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80142ce:	4b12      	ldr	r3, [pc, #72]	; (8014318 <_tx_thread_shell_entry+0x94>)
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	3301      	adds	r3, #1
 80142d4:	4a10      	ldr	r2, [pc, #64]	; (8014318 <_tx_thread_shell_entry+0x94>)
 80142d6:	6013      	str	r3, [r2, #0]
 80142d8:	69bb      	ldr	r3, [r7, #24]
 80142da:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80142dc:	68bb      	ldr	r3, [r7, #8]
 80142de:	f383 8810 	msr	PRIMASK, r3
}
 80142e2:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80142e4:	f3ef 8314 	mrs	r3, CONTROL
 80142e8:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80142ea:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80142ec:	617b      	str	r3, [r7, #20]
 80142ee:	697b      	ldr	r3, [r7, #20]
 80142f0:	f023 0304 	bic.w	r3, r3, #4
 80142f4:	617b      	str	r3, [r7, #20]
 80142f6:	697b      	ldr	r3, [r7, #20]
 80142f8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80142fa:	693b      	ldr	r3, [r7, #16]
 80142fc:	f383 8814 	msr	CONTROL, r3
}
 8014300:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8014302:	69f8      	ldr	r0, [r7, #28]
 8014304:	f000 f944 	bl	8014590 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8014308:	bf00      	nop
 801430a:	3720      	adds	r7, #32
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}
 8014310:	20197b44 	.word	0x20197b44
 8014314:	20197be0 	.word	0x20197be0
 8014318:	20197bdc 	.word	0x20197bdc

0801431c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 801431c:	b480      	push	{r7}
 801431e:	b089      	sub	sp, #36	; 0x24
 8014320:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8014322:	4b17      	ldr	r3, [pc, #92]	; (8014380 <_tx_thread_system_preempt_check+0x64>)
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8014328:	69fb      	ldr	r3, [r7, #28]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d121      	bne.n	8014372 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 801432e:	4b15      	ldr	r3, [pc, #84]	; (8014384 <_tx_thread_system_preempt_check+0x68>)
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8014334:	4b14      	ldr	r3, [pc, #80]	; (8014388 <_tx_thread_system_preempt_check+0x6c>)
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 801433a:	69ba      	ldr	r2, [r7, #24]
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	429a      	cmp	r2, r3
 8014340:	d017      	beq.n	8014372 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8014342:	4b12      	ldr	r3, [pc, #72]	; (801438c <_tx_thread_system_preempt_check+0x70>)
 8014344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014348:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801434a:	f3ef 8305 	mrs	r3, IPSR
 801434e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8014350:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 8014352:	2b00      	cmp	r3, #0
 8014354:	d10c      	bne.n	8014370 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014356:	f3ef 8310 	mrs	r3, PRIMASK
 801435a:	60fb      	str	r3, [r7, #12]
    return(posture);
 801435c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 801435e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8014360:	b662      	cpsie	i
}
 8014362:	bf00      	nop
 8014364:	68bb      	ldr	r3, [r7, #8]
 8014366:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	f383 8810 	msr	PRIMASK, r3
}
 801436e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8014370:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8014372:	bf00      	nop
 8014374:	3724      	adds	r7, #36	; 0x24
 8014376:	46bd      	mov	sp, r7
 8014378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437c:	4770      	bx	lr
 801437e:	bf00      	nop
 8014380:	20197bdc 	.word	0x20197bdc
 8014384:	20197b44 	.word	0x20197b44
 8014388:	20197b48 	.word	0x20197b48
 801438c:	e000ed04 	.word	0xe000ed04

08014390 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b096      	sub	sp, #88	; 0x58
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014398:	f3ef 8310 	mrs	r3, PRIMASK
 801439c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 801439e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80143a0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80143a2:	b672      	cpsid	i
    return(int_posture);
 80143a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80143a6:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d005      	beq.n	80143bc <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	334c      	adds	r3, #76	; 0x4c
 80143b4:	4618      	mov	r0, r3
 80143b6:	f000 fb91 	bl	8014adc <_tx_timer_system_deactivate>
 80143ba:	e002      	b.n	80143c2 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	2200      	movs	r2, #0
 80143c0:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80143c2:	4b6c      	ldr	r3, [pc, #432]	; (8014574 <_tx_thread_system_resume+0x1e4>)
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	3b01      	subs	r3, #1
 80143c8:	4a6a      	ldr	r2, [pc, #424]	; (8014574 <_tx_thread_system_resume+0x1e4>)
 80143ca:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	f040 8083 	bne.w	80144dc <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143da:	2b00      	cmp	r3, #0
 80143dc:	f000 8097 	beq.w	801450e <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d172      	bne.n	80144ce <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2200      	movs	r2, #0
 80143ec:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143f2:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80143f4:	4a60      	ldr	r2, [pc, #384]	; (8014578 <_tx_thread_system_resume+0x1e8>)
 80143f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80143fc:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 80143fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014400:	2b00      	cmp	r3, #0
 8014402:	d154      	bne.n	80144ae <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8014404:	495c      	ldr	r1, [pc, #368]	; (8014578 <_tx_thread_system_resume+0x1e8>)
 8014406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014408:	687a      	ldr	r2, [r7, #4]
 801440a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	687a      	ldr	r2, [r7, #4]
 8014412:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	687a      	ldr	r2, [r7, #4]
 8014418:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 801441a:	2201      	movs	r2, #1
 801441c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801441e:	fa02 f303 	lsl.w	r3, r2, r3
 8014422:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8014424:	4b55      	ldr	r3, [pc, #340]	; (801457c <_tx_thread_system_resume+0x1ec>)
 8014426:	681a      	ldr	r2, [r3, #0]
 8014428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801442a:	4313      	orrs	r3, r2
 801442c:	4a53      	ldr	r2, [pc, #332]	; (801457c <_tx_thread_system_resume+0x1ec>)
 801442e:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8014430:	4b53      	ldr	r3, [pc, #332]	; (8014580 <_tx_thread_system_resume+0x1f0>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014436:	429a      	cmp	r2, r3
 8014438:	d269      	bcs.n	801450e <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 801443a:	4a51      	ldr	r2, [pc, #324]	; (8014580 <_tx_thread_system_resume+0x1f0>)
 801443c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801443e:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8014440:	4b50      	ldr	r3, [pc, #320]	; (8014584 <_tx_thread_system_resume+0x1f4>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8014446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014448:	2b00      	cmp	r3, #0
 801444a:	d103      	bne.n	8014454 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 801444c:	4a4d      	ldr	r2, [pc, #308]	; (8014584 <_tx_thread_system_resume+0x1f4>)
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	6013      	str	r3, [r2, #0]
 8014452:	e05c      	b.n	801450e <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8014454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014458:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801445a:	429a      	cmp	r2, r3
 801445c:	d257      	bcs.n	801450e <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 801445e:	4a49      	ldr	r2, [pc, #292]	; (8014584 <_tx_thread_system_resume+0x1f4>)
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	6013      	str	r3, [r2, #0]
 8014464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014466:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801446a:	f383 8810 	msr	PRIMASK, r3
}
 801446e:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8014470:	4b40      	ldr	r3, [pc, #256]	; (8014574 <_tx_thread_system_resume+0x1e4>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8014476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014478:	2b00      	cmp	r3, #0
 801447a:	d174      	bne.n	8014566 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801447c:	4b42      	ldr	r3, [pc, #264]	; (8014588 <_tx_thread_system_resume+0x1f8>)
 801447e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014482:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014484:	f3ef 8305 	mrs	r3, IPSR
 8014488:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 801448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 801448c:	2b00      	cmp	r3, #0
 801448e:	d10c      	bne.n	80144aa <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014490:	f3ef 8310 	mrs	r3, PRIMASK
 8014494:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8014496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8014498:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801449a:	b662      	cpsie	i
}
 801449c:	bf00      	nop
 801449e:	6a3b      	ldr	r3, [r7, #32]
 80144a0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80144a2:	69fb      	ldr	r3, [r7, #28]
 80144a4:	f383 8810 	msr	PRIMASK, r3
}
 80144a8:	bf00      	nop
}
 80144aa:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 80144ac:	e05b      	b.n	8014566 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80144ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80144b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144b2:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80144b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144b6:	687a      	ldr	r2, [r7, #4]
 80144b8:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80144ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80144bc:	687a      	ldr	r2, [r7, #4]
 80144be:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80144c4:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80144ca:	621a      	str	r2, [r3, #32]
 80144cc:	e01f      	b.n	801450e <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	2200      	movs	r2, #0
 80144d2:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	2203      	movs	r2, #3
 80144d8:	631a      	str	r2, [r3, #48]	; 0x30
 80144da:	e018      	b.n	801450e <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144e0:	2b01      	cmp	r3, #1
 80144e2:	d014      	beq.n	801450e <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144e8:	2b02      	cmp	r3, #2
 80144ea:	d010      	beq.n	801450e <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d106      	bne.n	8014502 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	2200      	movs	r2, #0
 80144f8:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	2200      	movs	r2, #0
 80144fe:	631a      	str	r2, [r3, #48]	; 0x30
 8014500:	e005      	b.n	801450e <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	2200      	movs	r2, #0
 8014506:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	2203      	movs	r2, #3
 801450c:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801450e:	4b1f      	ldr	r3, [pc, #124]	; (801458c <_tx_thread_system_resume+0x1fc>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	63bb      	str	r3, [r7, #56]	; 0x38
 8014514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014516:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014518:	69bb      	ldr	r3, [r7, #24]
 801451a:	f383 8810 	msr	PRIMASK, r3
}
 801451e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8014520:	4b18      	ldr	r3, [pc, #96]	; (8014584 <_tx_thread_system_resume+0x1f4>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014526:	429a      	cmp	r2, r3
 8014528:	d020      	beq.n	801456c <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801452a:	4b12      	ldr	r3, [pc, #72]	; (8014574 <_tx_thread_system_resume+0x1e4>)
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8014530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014532:	2b00      	cmp	r3, #0
 8014534:	d11a      	bne.n	801456c <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8014536:	4b14      	ldr	r3, [pc, #80]	; (8014588 <_tx_thread_system_resume+0x1f8>)
 8014538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801453c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801453e:	f3ef 8305 	mrs	r3, IPSR
 8014542:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014544:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 8014546:	2b00      	cmp	r3, #0
 8014548:	d10f      	bne.n	801456a <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801454a:	f3ef 8310 	mrs	r3, PRIMASK
 801454e:	613b      	str	r3, [r7, #16]
    return(posture);
 8014550:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8014552:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8014554:	b662      	cpsie	i
}
 8014556:	bf00      	nop
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	f383 8810 	msr	PRIMASK, r3
}
 8014562:	bf00      	nop
}
 8014564:	e001      	b.n	801456a <_tx_thread_system_resume+0x1da>
                                return;
 8014566:	bf00      	nop
 8014568:	e000      	b.n	801456c <_tx_thread_system_resume+0x1dc>
 801456a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 801456c:	3758      	adds	r7, #88	; 0x58
 801456e:	46bd      	mov	sp, r7
 8014570:	bd80      	pop	{r7, pc}
 8014572:	bf00      	nop
 8014574:	20197bdc 	.word	0x20197bdc
 8014578:	20197b5c 	.word	0x20197b5c
 801457c:	20197b54 	.word	0x20197b54
 8014580:	20197b58 	.word	0x20197b58
 8014584:	20197b48 	.word	0x20197b48
 8014588:	e000ed04 	.word	0xe000ed04
 801458c:	20197b44 	.word	0x20197b44

08014590 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b09e      	sub	sp, #120	; 0x78
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8014598:	4b81      	ldr	r3, [pc, #516]	; (80147a0 <_tx_thread_system_suspend+0x210>)
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801459e:	f3ef 8310 	mrs	r3, PRIMASK
 80145a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 80145a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 80145a6:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 80145a8:	b672      	cpsid	i
    return(int_posture);
 80145aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80145ac:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80145ae:	687a      	ldr	r2, [r7, #4]
 80145b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80145b2:	429a      	cmp	r2, r3
 80145b4:	d112      	bne.n	80145dc <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145ba:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80145bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d008      	beq.n	80145d4 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80145c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80145c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145c8:	d004      	beq.n	80145d4 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	334c      	adds	r3, #76	; 0x4c
 80145ce:	4618      	mov	r0, r3
 80145d0:	f000 fa22 	bl	8014a18 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	69db      	ldr	r3, [r3, #28]
 80145d8:	4a72      	ldr	r2, [pc, #456]	; (80147a4 <_tx_thread_system_suspend+0x214>)
 80145da:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80145dc:	4b72      	ldr	r3, [pc, #456]	; (80147a8 <_tx_thread_system_suspend+0x218>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	3b01      	subs	r3, #1
 80145e2:	4a71      	ldr	r2, [pc, #452]	; (80147a8 <_tx_thread_system_suspend+0x218>)
 80145e4:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145ea:	2b01      	cmp	r3, #1
 80145ec:	f040 80a6 	bne.w	801473c <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	2200      	movs	r2, #0
 80145f4:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145fa:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	6a1b      	ldr	r3, [r3, #32]
 8014600:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8014602:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	429a      	cmp	r2, r3
 8014608:	d015      	beq.n	8014636 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801460e:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8014610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014612:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014614:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8014616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014618:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801461a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 801461c:	4a63      	ldr	r2, [pc, #396]	; (80147ac <_tx_thread_system_suspend+0x21c>)
 801461e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014624:	687a      	ldr	r2, [r7, #4]
 8014626:	429a      	cmp	r2, r3
 8014628:	d157      	bne.n	80146da <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 801462a:	4960      	ldr	r1, [pc, #384]	; (80147ac <_tx_thread_system_suspend+0x21c>)
 801462c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801462e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014634:	e051      	b.n	80146da <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8014636:	4a5d      	ldr	r2, [pc, #372]	; (80147ac <_tx_thread_system_suspend+0x21c>)
 8014638:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801463a:	2100      	movs	r1, #0
 801463c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8014640:	2201      	movs	r2, #1
 8014642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014644:	fa02 f303 	lsl.w	r3, r2, r3
 8014648:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 801464a:	4b59      	ldr	r3, [pc, #356]	; (80147b0 <_tx_thread_system_suspend+0x220>)
 801464c:	681a      	ldr	r2, [r3, #0]
 801464e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014650:	43db      	mvns	r3, r3
 8014652:	4013      	ands	r3, r2
 8014654:	4a56      	ldr	r2, [pc, #344]	; (80147b0 <_tx_thread_system_suspend+0x220>)
 8014656:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8014658:	2300      	movs	r3, #0
 801465a:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 801465c:	4b54      	ldr	r3, [pc, #336]	; (80147b0 <_tx_thread_system_suspend+0x220>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8014662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014664:	2b00      	cmp	r3, #0
 8014666:	d12b      	bne.n	80146c0 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8014668:	4b52      	ldr	r3, [pc, #328]	; (80147b4 <_tx_thread_system_suspend+0x224>)
 801466a:	2220      	movs	r2, #32
 801466c:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 801466e:	4b52      	ldr	r3, [pc, #328]	; (80147b8 <_tx_thread_system_suspend+0x228>)
 8014670:	2200      	movs	r2, #0
 8014672:	601a      	str	r2, [r3, #0]
 8014674:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014676:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801467a:	f383 8810 	msr	PRIMASK, r3
}
 801467e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8014680:	4b49      	ldr	r3, [pc, #292]	; (80147a8 <_tx_thread_system_suspend+0x218>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8014686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014688:	2b00      	cmp	r3, #0
 801468a:	f040 8081 	bne.w	8014790 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801468e:	4b4b      	ldr	r3, [pc, #300]	; (80147bc <_tx_thread_system_suspend+0x22c>)
 8014690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014694:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014696:	f3ef 8305 	mrs	r3, IPSR
 801469a:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 801469c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d10c      	bne.n	80146bc <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80146a2:	f3ef 8310 	mrs	r3, PRIMASK
 80146a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 80146a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 80146aa:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 80146ac:	b662      	cpsie	i
}
 80146ae:	bf00      	nop
 80146b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146b2:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80146b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146b6:	f383 8810 	msr	PRIMASK, r3
}
 80146ba:	bf00      	nop
}
 80146bc:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80146be:	e067      	b.n	8014790 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80146c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146c2:	fa93 f3a3 	rbit	r3, r3
 80146c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80146c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146ca:	fab3 f383 	clz	r3, r3
 80146ce:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80146d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80146d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80146d4:	4413      	add	r3, r2
 80146d6:	4a37      	ldr	r2, [pc, #220]	; (80147b4 <_tx_thread_system_suspend+0x224>)
 80146d8:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80146da:	4b37      	ldr	r3, [pc, #220]	; (80147b8 <_tx_thread_system_suspend+0x228>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	687a      	ldr	r2, [r7, #4]
 80146e0:	429a      	cmp	r2, r3
 80146e2:	d12b      	bne.n	801473c <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80146e4:	4b33      	ldr	r3, [pc, #204]	; (80147b4 <_tx_thread_system_suspend+0x224>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	4a30      	ldr	r2, [pc, #192]	; (80147ac <_tx_thread_system_suspend+0x21c>)
 80146ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80146ee:	4a32      	ldr	r2, [pc, #200]	; (80147b8 <_tx_thread_system_suspend+0x228>)
 80146f0:	6013      	str	r3, [r2, #0]
 80146f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80146f4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80146f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146f8:	f383 8810 	msr	PRIMASK, r3
}
 80146fc:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80146fe:	4b2a      	ldr	r3, [pc, #168]	; (80147a8 <_tx_thread_system_suspend+0x218>)
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8014704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014706:	2b00      	cmp	r3, #0
 8014708:	d144      	bne.n	8014794 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801470a:	4b2c      	ldr	r3, [pc, #176]	; (80147bc <_tx_thread_system_suspend+0x22c>)
 801470c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014710:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014712:	f3ef 8305 	mrs	r3, IPSR
 8014716:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8014718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 801471a:	2b00      	cmp	r3, #0
 801471c:	d10c      	bne.n	8014738 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801471e:	f3ef 8310 	mrs	r3, PRIMASK
 8014722:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014724:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8014726:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8014728:	b662      	cpsie	i
}
 801472a:	bf00      	nop
 801472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801472e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014730:	6a3b      	ldr	r3, [r7, #32]
 8014732:	f383 8810 	msr	PRIMASK, r3
}
 8014736:	bf00      	nop
}
 8014738:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 801473a:	e02b      	b.n	8014794 <_tx_thread_system_suspend+0x204>
 801473c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801473e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014740:	69fb      	ldr	r3, [r7, #28]
 8014742:	f383 8810 	msr	PRIMASK, r3
}
 8014746:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8014748:	4b1b      	ldr	r3, [pc, #108]	; (80147b8 <_tx_thread_system_suspend+0x228>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801474e:	429a      	cmp	r2, r3
 8014750:	d022      	beq.n	8014798 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8014752:	4b15      	ldr	r3, [pc, #84]	; (80147a8 <_tx_thread_system_suspend+0x218>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8014758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801475a:	2b00      	cmp	r3, #0
 801475c:	d11c      	bne.n	8014798 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801475e:	4b17      	ldr	r3, [pc, #92]	; (80147bc <_tx_thread_system_suspend+0x22c>)
 8014760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014764:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014766:	f3ef 8305 	mrs	r3, IPSR
 801476a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801476c:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 801476e:	2b00      	cmp	r3, #0
 8014770:	d10c      	bne.n	801478c <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014772:	f3ef 8310 	mrs	r3, PRIMASK
 8014776:	617b      	str	r3, [r7, #20]
    return(posture);
 8014778:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 801477a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801477c:	b662      	cpsie	i
}
 801477e:	bf00      	nop
 8014780:	693b      	ldr	r3, [r7, #16]
 8014782:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	f383 8810 	msr	PRIMASK, r3
}
 801478a:	bf00      	nop
}
 801478c:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 801478e:	e003      	b.n	8014798 <_tx_thread_system_suspend+0x208>
                return;
 8014790:	bf00      	nop
 8014792:	e002      	b.n	801479a <_tx_thread_system_suspend+0x20a>
            return;
 8014794:	bf00      	nop
 8014796:	e000      	b.n	801479a <_tx_thread_system_suspend+0x20a>
    return;
 8014798:	bf00      	nop
}
 801479a:	3778      	adds	r7, #120	; 0x78
 801479c:	46bd      	mov	sp, r7
 801479e:	bd80      	pop	{r7, pc}
 80147a0:	20197b44 	.word	0x20197b44
 80147a4:	20198148 	.word	0x20198148
 80147a8:	20197bdc 	.word	0x20197bdc
 80147ac:	20197b5c 	.word	0x20197b5c
 80147b0:	20197b54 	.word	0x20197b54
 80147b4:	20197b58 	.word	0x20197b58
 80147b8:	20197b48 	.word	0x20197b48
 80147bc:	e000ed04 	.word	0xe000ed04

080147c0 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80147c0:	b480      	push	{r7}
 80147c2:	b087      	sub	sp, #28
 80147c4:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80147c6:	4b21      	ldr	r3, [pc, #132]	; (801484c <_tx_thread_time_slice+0x8c>)
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80147cc:	f3ef 8310 	mrs	r3, PRIMASK
 80147d0:	60fb      	str	r3, [r7, #12]
    return(posture);
 80147d2:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80147d4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80147d6:	b672      	cpsid	i
    return(int_posture);
 80147d8:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80147da:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80147dc:	4b1c      	ldr	r3, [pc, #112]	; (8014850 <_tx_thread_time_slice+0x90>)
 80147de:	2200      	movs	r2, #0
 80147e0:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80147e2:	697b      	ldr	r3, [r7, #20]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d024      	beq.n	8014832 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80147e8:	697b      	ldr	r3, [r7, #20]
 80147ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d120      	bne.n	8014832 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	69da      	ldr	r2, [r3, #28]
 80147f4:	697b      	ldr	r3, [r7, #20]
 80147f6:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 80147f8:	697b      	ldr	r3, [r7, #20]
 80147fa:	699b      	ldr	r3, [r3, #24]
 80147fc:	4a15      	ldr	r2, [pc, #84]	; (8014854 <_tx_thread_time_slice+0x94>)
 80147fe:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8014800:	697b      	ldr	r3, [r7, #20]
 8014802:	6a1b      	ldr	r3, [r3, #32]
 8014804:	697a      	ldr	r2, [r7, #20]
 8014806:	429a      	cmp	r2, r3
 8014808:	d013      	beq.n	8014832 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 801480a:	697b      	ldr	r3, [r7, #20]
 801480c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801480e:	697b      	ldr	r3, [r7, #20]
 8014810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014812:	429a      	cmp	r2, r3
 8014814:	d10d      	bne.n	8014832 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8014816:	697b      	ldr	r3, [r7, #20]
 8014818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801481a:	697a      	ldr	r2, [r7, #20]
 801481c:	6a12      	ldr	r2, [r2, #32]
 801481e:	490e      	ldr	r1, [pc, #56]	; (8014858 <_tx_thread_time_slice+0x98>)
 8014820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8014824:	4b0d      	ldr	r3, [pc, #52]	; (801485c <_tx_thread_time_slice+0x9c>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	4a0b      	ldr	r2, [pc, #44]	; (8014858 <_tx_thread_time_slice+0x98>)
 801482a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801482e:	4a0c      	ldr	r2, [pc, #48]	; (8014860 <_tx_thread_time_slice+0xa0>)
 8014830:	6013      	str	r3, [r2, #0]
 8014832:	693b      	ldr	r3, [r7, #16]
 8014834:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	f383 8810 	msr	PRIMASK, r3
}
 801483c:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 801483e:	bf00      	nop
 8014840:	371c      	adds	r7, #28
 8014842:	46bd      	mov	sp, r7
 8014844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014848:	4770      	bx	lr
 801484a:	bf00      	nop
 801484c:	20197b44 	.word	0x20197b44
 8014850:	20197bec 	.word	0x20197bec
 8014854:	20198148 	.word	0x20198148
 8014858:	20197b5c 	.word	0x20197b5c
 801485c:	20197b58 	.word	0x20197b58
 8014860:	20197b48 	.word	0x20197b48

08014864 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b08a      	sub	sp, #40	; 0x28
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014870:	f3ef 8310 	mrs	r3, PRIMASK
 8014874:	617b      	str	r3, [r7, #20]
    return(posture);
 8014876:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8014878:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801487a:	b672      	cpsid	i
    return(int_posture);
 801487c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 801487e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8014880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014884:	2b04      	cmp	r3, #4
 8014886:	d10e      	bne.n	80148a6 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8014888:	4b13      	ldr	r3, [pc, #76]	; (80148d8 <_tx_thread_timeout+0x74>)
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	3301      	adds	r3, #1
 801488e:	4a12      	ldr	r2, [pc, #72]	; (80148d8 <_tx_thread_timeout+0x74>)
 8014890:	6013      	str	r3, [r2, #0]
 8014892:	6a3b      	ldr	r3, [r7, #32]
 8014894:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	f383 8810 	msr	PRIMASK, r3
}
 801489c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 801489e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148a0:	f7ff fd76 	bl	8014390 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80148a4:	e013      	b.n	80148ce <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80148a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80148aa:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80148ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80148b2:	61bb      	str	r3, [r7, #24]
 80148b4:	6a3b      	ldr	r3, [r7, #32]
 80148b6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80148b8:	68bb      	ldr	r3, [r7, #8]
 80148ba:	f383 8810 	msr	PRIMASK, r3
}
 80148be:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80148c0:	69fb      	ldr	r3, [r7, #28]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d003      	beq.n	80148ce <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80148c6:	69fb      	ldr	r3, [r7, #28]
 80148c8:	69b9      	ldr	r1, [r7, #24]
 80148ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148cc:	4798      	blx	r3
}
 80148ce:	bf00      	nop
 80148d0:	3728      	adds	r7, #40	; 0x28
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bd80      	pop	{r7, pc}
 80148d6:	bf00      	nop
 80148d8:	20197bdc 	.word	0x20197bdc

080148dc <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b084      	sub	sp, #16
 80148e0:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80148e2:	f3ef 8310 	mrs	r3, PRIMASK
 80148e6:	607b      	str	r3, [r7, #4]
    return(posture);
 80148e8:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80148ea:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80148ec:	b672      	cpsid	i
    return(int_posture);
 80148ee:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80148f0:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80148f2:	4b09      	ldr	r3, [pc, #36]	; (8014918 <_tx_timer_expiration_process+0x3c>)
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	3301      	adds	r3, #1
 80148f8:	4a07      	ldr	r2, [pc, #28]	; (8014918 <_tx_timer_expiration_process+0x3c>)
 80148fa:	6013      	str	r3, [r2, #0]
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014900:	68bb      	ldr	r3, [r7, #8]
 8014902:	f383 8810 	msr	PRIMASK, r3
}
 8014906:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8014908:	4804      	ldr	r0, [pc, #16]	; (801491c <_tx_timer_expiration_process+0x40>)
 801490a:	f7ff fd41 	bl	8014390 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801490e:	bf00      	nop
 8014910:	3710      	adds	r7, #16
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}
 8014916:	bf00      	nop
 8014918:	20197bdc 	.word	0x20197bdc
 801491c:	20197c8c 	.word	0x20197c8c

08014920 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8014920:	b590      	push	{r4, r7, lr}
 8014922:	b089      	sub	sp, #36	; 0x24
 8014924:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8014926:	4b28      	ldr	r3, [pc, #160]	; (80149c8 <_tx_timer_initialize+0xa8>)
 8014928:	2200      	movs	r2, #0
 801492a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 801492c:	4b27      	ldr	r3, [pc, #156]	; (80149cc <_tx_timer_initialize+0xac>)
 801492e:	2200      	movs	r2, #0
 8014930:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8014932:	4b27      	ldr	r3, [pc, #156]	; (80149d0 <_tx_timer_initialize+0xb0>)
 8014934:	2200      	movs	r2, #0
 8014936:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8014938:	4b26      	ldr	r3, [pc, #152]	; (80149d4 <_tx_timer_initialize+0xb4>)
 801493a:	2200      	movs	r2, #0
 801493c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 801493e:	4b26      	ldr	r3, [pc, #152]	; (80149d8 <_tx_timer_initialize+0xb8>)
 8014940:	2200      	movs	r2, #0
 8014942:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8014944:	2280      	movs	r2, #128	; 0x80
 8014946:	2100      	movs	r1, #0
 8014948:	4824      	ldr	r0, [pc, #144]	; (80149dc <_tx_timer_initialize+0xbc>)
 801494a:	f013 fc50 	bl	80281ee <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 801494e:	4b24      	ldr	r3, [pc, #144]	; (80149e0 <_tx_timer_initialize+0xc0>)
 8014950:	4a22      	ldr	r2, [pc, #136]	; (80149dc <_tx_timer_initialize+0xbc>)
 8014952:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8014954:	4b23      	ldr	r3, [pc, #140]	; (80149e4 <_tx_timer_initialize+0xc4>)
 8014956:	4a21      	ldr	r2, [pc, #132]	; (80149dc <_tx_timer_initialize+0xbc>)
 8014958:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 801495a:	4b23      	ldr	r3, [pc, #140]	; (80149e8 <_tx_timer_initialize+0xc8>)
 801495c:	4a23      	ldr	r2, [pc, #140]	; (80149ec <_tx_timer_initialize+0xcc>)
 801495e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8014960:	4b21      	ldr	r3, [pc, #132]	; (80149e8 <_tx_timer_initialize+0xc8>)
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	3304      	adds	r3, #4
 8014966:	4a20      	ldr	r2, [pc, #128]	; (80149e8 <_tx_timer_initialize+0xc8>)
 8014968:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 801496a:	4b21      	ldr	r3, [pc, #132]	; (80149f0 <_tx_timer_initialize+0xd0>)
 801496c:	4a21      	ldr	r2, [pc, #132]	; (80149f4 <_tx_timer_initialize+0xd4>)
 801496e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8014970:	4b21      	ldr	r3, [pc, #132]	; (80149f8 <_tx_timer_initialize+0xd8>)
 8014972:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014976:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8014978:	4b20      	ldr	r3, [pc, #128]	; (80149fc <_tx_timer_initialize+0xdc>)
 801497a:	2200      	movs	r2, #0
 801497c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 801497e:	4b1c      	ldr	r3, [pc, #112]	; (80149f0 <_tx_timer_initialize+0xd0>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	4a1d      	ldr	r2, [pc, #116]	; (80149f8 <_tx_timer_initialize+0xd8>)
 8014984:	6812      	ldr	r2, [r2, #0]
 8014986:	491d      	ldr	r1, [pc, #116]	; (80149fc <_tx_timer_initialize+0xdc>)
 8014988:	6809      	ldr	r1, [r1, #0]
 801498a:	481c      	ldr	r0, [pc, #112]	; (80149fc <_tx_timer_initialize+0xdc>)
 801498c:	6800      	ldr	r0, [r0, #0]
 801498e:	2400      	movs	r4, #0
 8014990:	9405      	str	r4, [sp, #20]
 8014992:	2400      	movs	r4, #0
 8014994:	9404      	str	r4, [sp, #16]
 8014996:	9003      	str	r0, [sp, #12]
 8014998:	9102      	str	r1, [sp, #8]
 801499a:	9201      	str	r2, [sp, #4]
 801499c:	9300      	str	r3, [sp, #0]
 801499e:	4b18      	ldr	r3, [pc, #96]	; (8014a00 <_tx_timer_initialize+0xe0>)
 80149a0:	4a18      	ldr	r2, [pc, #96]	; (8014a04 <_tx_timer_initialize+0xe4>)
 80149a2:	4919      	ldr	r1, [pc, #100]	; (8014a08 <_tx_timer_initialize+0xe8>)
 80149a4:	4819      	ldr	r0, [pc, #100]	; (8014a0c <_tx_timer_initialize+0xec>)
 80149a6:	f7ff fb3b 	bl	8014020 <_tx_thread_create>
 80149aa:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d1e5      	bne.n	801497e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80149b2:	4b17      	ldr	r3, [pc, #92]	; (8014a10 <_tx_timer_initialize+0xf0>)
 80149b4:	2200      	movs	r2, #0
 80149b6:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80149b8:	4b16      	ldr	r3, [pc, #88]	; (8014a14 <_tx_timer_initialize+0xf4>)
 80149ba:	2200      	movs	r2, #0
 80149bc:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80149be:	bf00      	nop
 80149c0:	370c      	adds	r7, #12
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd90      	pop	{r4, r7, pc}
 80149c6:	bf00      	nop
 80149c8:	20197be8 	.word	0x20197be8
 80149cc:	20198148 	.word	0x20198148
 80149d0:	20197bec 	.word	0x20197bec
 80149d4:	20197c7c 	.word	0x20197c7c
 80149d8:	20197c88 	.word	0x20197c88
 80149dc:	20197bf0 	.word	0x20197bf0
 80149e0:	20197c70 	.word	0x20197c70
 80149e4:	20197c78 	.word	0x20197c78
 80149e8:	20197c74 	.word	0x20197c74
 80149ec:	20197c6c 	.word	0x20197c6c
 80149f0:	20197d3c 	.word	0x20197d3c
 80149f4:	20197d48 	.word	0x20197d48
 80149f8:	20197d40 	.word	0x20197d40
 80149fc:	20197d44 	.word	0x20197d44
 8014a00:	4154494d 	.word	0x4154494d
 8014a04:	08014b4d 	.word	0x08014b4d
 8014a08:	08029744 	.word	0x08029744
 8014a0c:	20197c8c 	.word	0x20197c8c
 8014a10:	20197c80 	.word	0x20197c80
 8014a14:	20197c84 	.word	0x20197c84

08014a18 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8014a18:	b480      	push	{r7}
 8014a1a:	b089      	sub	sp, #36	; 0x24
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8014a26:	697b      	ldr	r3, [r7, #20]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d04a      	beq.n	8014ac2 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8014a2c:	697b      	ldr	r3, [r7, #20]
 8014a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a32:	d046      	beq.n	8014ac2 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	699b      	ldr	r3, [r3, #24]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d142      	bne.n	8014ac2 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8014a3c:	697b      	ldr	r3, [r7, #20]
 8014a3e:	2b20      	cmp	r3, #32
 8014a40:	d902      	bls.n	8014a48 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8014a42:	231f      	movs	r3, #31
 8014a44:	61bb      	str	r3, [r7, #24]
 8014a46:	e002      	b.n	8014a4e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8014a48:	697b      	ldr	r3, [r7, #20]
 8014a4a:	3b01      	subs	r3, #1
 8014a4c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8014a4e:	4b20      	ldr	r3, [pc, #128]	; (8014ad0 <_tx_timer_system_activate+0xb8>)
 8014a50:	681a      	ldr	r2, [r3, #0]
 8014a52:	69bb      	ldr	r3, [r7, #24]
 8014a54:	009b      	lsls	r3, r3, #2
 8014a56:	4413      	add	r3, r2
 8014a58:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8014a5a:	4b1e      	ldr	r3, [pc, #120]	; (8014ad4 <_tx_timer_system_activate+0xbc>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	69fa      	ldr	r2, [r7, #28]
 8014a60:	429a      	cmp	r2, r3
 8014a62:	d30b      	bcc.n	8014a7c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8014a64:	4b1b      	ldr	r3, [pc, #108]	; (8014ad4 <_tx_timer_system_activate+0xbc>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	69fa      	ldr	r2, [r7, #28]
 8014a6a:	1ad3      	subs	r3, r2, r3
 8014a6c:	109b      	asrs	r3, r3, #2
 8014a6e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8014a70:	4b19      	ldr	r3, [pc, #100]	; (8014ad8 <_tx_timer_system_activate+0xc0>)
 8014a72:	681a      	ldr	r2, [r3, #0]
 8014a74:	693b      	ldr	r3, [r7, #16]
 8014a76:	009b      	lsls	r3, r3, #2
 8014a78:	4413      	add	r3, r2
 8014a7a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8014a7c:	69fb      	ldr	r3, [r7, #28]
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d109      	bne.n	8014a98 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	687a      	ldr	r2, [r7, #4]
 8014a88:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	687a      	ldr	r2, [r7, #4]
 8014a8e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8014a90:	69fb      	ldr	r3, [r7, #28]
 8014a92:	687a      	ldr	r2, [r7, #4]
 8014a94:	601a      	str	r2, [r3, #0]
 8014a96:	e011      	b.n	8014abc <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8014a98:	69fb      	ldr	r3, [r7, #28]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	695b      	ldr	r3, [r3, #20]
 8014aa2:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8014aa4:	68bb      	ldr	r3, [r7, #8]
 8014aa6:	687a      	ldr	r2, [r7, #4]
 8014aa8:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	687a      	ldr	r2, [r7, #4]
 8014aae:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	68fa      	ldr	r2, [r7, #12]
 8014ab4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	68ba      	ldr	r2, [r7, #8]
 8014aba:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	69fa      	ldr	r2, [r7, #28]
 8014ac0:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8014ac2:	bf00      	nop
 8014ac4:	3724      	adds	r7, #36	; 0x24
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014acc:	4770      	bx	lr
 8014ace:	bf00      	nop
 8014ad0:	20197c78 	.word	0x20197c78
 8014ad4:	20197c74 	.word	0x20197c74
 8014ad8:	20197c70 	.word	0x20197c70

08014adc <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8014adc:	b480      	push	{r7}
 8014ade:	b087      	sub	sp, #28
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	699b      	ldr	r3, [r3, #24]
 8014ae8:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d026      	beq.n	8014b3e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	691b      	ldr	r3, [r3, #16]
 8014af4:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8014af6:	687a      	ldr	r2, [r7, #4]
 8014af8:	693b      	ldr	r3, [r7, #16]
 8014afa:	429a      	cmp	r2, r3
 8014afc:	d108      	bne.n	8014b10 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8014afe:	697b      	ldr	r3, [r7, #20]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	687a      	ldr	r2, [r7, #4]
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d117      	bne.n	8014b38 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8014b08:	697b      	ldr	r3, [r7, #20]
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	601a      	str	r2, [r3, #0]
 8014b0e:	e013      	b.n	8014b38 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	695b      	ldr	r3, [r3, #20]
 8014b14:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8014b16:	693b      	ldr	r3, [r7, #16]
 8014b18:	68fa      	ldr	r2, [r7, #12]
 8014b1a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	693a      	ldr	r2, [r7, #16]
 8014b20:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8014b22:	697b      	ldr	r3, [r7, #20]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	687a      	ldr	r2, [r7, #4]
 8014b28:	429a      	cmp	r2, r3
 8014b2a:	d105      	bne.n	8014b38 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8014b2c:	693b      	ldr	r3, [r7, #16]
 8014b2e:	697a      	ldr	r2, [r7, #20]
 8014b30:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8014b32:	697b      	ldr	r3, [r7, #20]
 8014b34:	693a      	ldr	r2, [r7, #16]
 8014b36:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	619a      	str	r2, [r3, #24]
    }
}
 8014b3e:	bf00      	nop
 8014b40:	371c      	adds	r7, #28
 8014b42:	46bd      	mov	sp, r7
 8014b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b48:	4770      	bx	lr
	...

08014b4c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	b098      	sub	sp, #96	; 0x60
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8014b54:	2300      	movs	r3, #0
 8014b56:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	4a73      	ldr	r2, [pc, #460]	; (8014d28 <_tx_timer_thread_entry+0x1dc>)
 8014b5c:	4293      	cmp	r3, r2
 8014b5e:	f040 80de 	bne.w	8014d1e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014b62:	f3ef 8310 	mrs	r3, PRIMASK
 8014b66:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8014b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8014b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8014b6c:	b672      	cpsid	i
    return(int_posture);
 8014b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8014b70:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8014b72:	4b6e      	ldr	r3, [pc, #440]	; (8014d2c <_tx_timer_thread_entry+0x1e0>)
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d003      	beq.n	8014b88 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	f107 020c 	add.w	r2, r7, #12
 8014b86:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8014b88:	4b68      	ldr	r3, [pc, #416]	; (8014d2c <_tx_timer_thread_entry+0x1e0>)
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8014b90:	4b66      	ldr	r3, [pc, #408]	; (8014d2c <_tx_timer_thread_entry+0x1e0>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	3304      	adds	r3, #4
 8014b96:	4a65      	ldr	r2, [pc, #404]	; (8014d2c <_tx_timer_thread_entry+0x1e0>)
 8014b98:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8014b9a:	4b64      	ldr	r3, [pc, #400]	; (8014d2c <_tx_timer_thread_entry+0x1e0>)
 8014b9c:	681a      	ldr	r2, [r3, #0]
 8014b9e:	4b64      	ldr	r3, [pc, #400]	; (8014d30 <_tx_timer_thread_entry+0x1e4>)
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	429a      	cmp	r2, r3
 8014ba4:	d103      	bne.n	8014bae <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8014ba6:	4b63      	ldr	r3, [pc, #396]	; (8014d34 <_tx_timer_thread_entry+0x1e8>)
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	4a60      	ldr	r2, [pc, #384]	; (8014d2c <_tx_timer_thread_entry+0x1e0>)
 8014bac:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8014bae:	4b62      	ldr	r3, [pc, #392]	; (8014d38 <_tx_timer_thread_entry+0x1ec>)
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	601a      	str	r2, [r3, #0]
 8014bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014bb6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bba:	f383 8810 	msr	PRIMASK, r3
}
 8014bbe:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8014bc4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8014bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8014bc8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8014bca:	b672      	cpsid	i
    return(int_posture);
 8014bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8014bce:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8014bd0:	e07f      	b.n	8014cd2 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	691b      	ldr	r3, [r3, #16]
 8014bda:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8014bdc:	2300      	movs	r3, #0
 8014bde:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8014be0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014be4:	429a      	cmp	r2, r3
 8014be6:	d102      	bne.n	8014bee <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8014be8:	2300      	movs	r3, #0
 8014bea:	60fb      	str	r3, [r7, #12]
 8014bec:	e00e      	b.n	8014c0c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8014bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bf0:	695b      	ldr	r3, [r3, #20]
 8014bf2:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8014bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014bf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014bf8:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8014bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014bfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014bfe:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8014c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c02:	f107 020c 	add.w	r2, r7, #12
 8014c06:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8014c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c0a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8014c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	2b20      	cmp	r3, #32
 8014c12:	d911      	bls.n	8014c38 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8014c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8014c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c1e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8014c20:	2300      	movs	r3, #0
 8014c22:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8014c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c26:	f107 0208 	add.w	r2, r7, #8
 8014c2a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8014c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014c30:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8014c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c34:	60bb      	str	r3, [r7, #8]
 8014c36:	e01a      	b.n	8014c6e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8014c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c3a:	689b      	ldr	r3, [r3, #8]
 8014c3c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8014c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c40:	68db      	ldr	r3, [r3, #12]
 8014c42:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8014c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c46:	685a      	ldr	r2, [r3, #4]
 8014c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c4a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8014c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d009      	beq.n	8014c68 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8014c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c56:	f107 0208 	add.w	r2, r7, #8
 8014c5a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8014c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014c60:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8014c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c64:	60bb      	str	r3, [r7, #8]
 8014c66:	e002      	b.n	8014c6e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8014c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8014c6e:	4a33      	ldr	r2, [pc, #204]	; (8014d3c <_tx_timer_thread_entry+0x1f0>)
 8014c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c72:	6013      	str	r3, [r2, #0]
 8014c74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c7a:	f383 8810 	msr	PRIMASK, r3
}
 8014c7e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8014c80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d002      	beq.n	8014c8c <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8014c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014c88:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014c8a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8014c90:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014c94:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8014c96:	b672      	cpsid	i
    return(int_posture);
 8014c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8014c9a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8014c9c:	4b27      	ldr	r3, [pc, #156]	; (8014d3c <_tx_timer_thread_entry+0x1f0>)
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8014ca2:	68bb      	ldr	r3, [r7, #8]
 8014ca4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014ca6:	429a      	cmp	r2, r3
 8014ca8:	d105      	bne.n	8014cb6 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8014caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cac:	2200      	movs	r2, #0
 8014cae:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8014cb0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014cb2:	f7ff feb1 	bl	8014a18 <_tx_timer_system_activate>
 8014cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014cb8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014cba:	69bb      	ldr	r3, [r7, #24]
 8014cbc:	f383 8810 	msr	PRIMASK, r3
}
 8014cc0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8014cc6:	623b      	str	r3, [r7, #32]
    return(posture);
 8014cc8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014cca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014ccc:	b672      	cpsid	i
    return(int_posture);
 8014cce:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8014cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	f47f af7c 	bne.w	8014bd2 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8014cda:	4b17      	ldr	r3, [pc, #92]	; (8014d38 <_tx_timer_thread_entry+0x1ec>)
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d116      	bne.n	8014d10 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8014ce2:	4b17      	ldr	r3, [pc, #92]	; (8014d40 <_tx_timer_thread_entry+0x1f4>)
 8014ce4:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8014ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ce8:	2203      	movs	r2, #3
 8014cea:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cee:	2201      	movs	r2, #1
 8014cf0:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8014cf2:	4b14      	ldr	r3, [pc, #80]	; (8014d44 <_tx_timer_thread_entry+0x1f8>)
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	3301      	adds	r3, #1
 8014cf8:	4a12      	ldr	r2, [pc, #72]	; (8014d44 <_tx_timer_thread_entry+0x1f8>)
 8014cfa:	6013      	str	r3, [r2, #0]
 8014cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014cfe:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d00:	697b      	ldr	r3, [r7, #20]
 8014d02:	f383 8810 	msr	PRIMASK, r3
}
 8014d06:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8014d08:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8014d0a:	f7ff fc41 	bl	8014590 <_tx_thread_system_suspend>
 8014d0e:	e728      	b.n	8014b62 <_tx_timer_thread_entry+0x16>
 8014d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d12:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d14:	693b      	ldr	r3, [r7, #16]
 8014d16:	f383 8810 	msr	PRIMASK, r3
}
 8014d1a:	bf00      	nop
            TX_DISABLE
 8014d1c:	e721      	b.n	8014b62 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8014d1e:	bf00      	nop
 8014d20:	3760      	adds	r7, #96	; 0x60
 8014d22:	46bd      	mov	sp, r7
 8014d24:	bd80      	pop	{r7, pc}
 8014d26:	bf00      	nop
 8014d28:	4154494d 	.word	0x4154494d
 8014d2c:	20197c78 	.word	0x20197c78
 8014d30:	20197c74 	.word	0x20197c74
 8014d34:	20197c70 	.word	0x20197c70
 8014d38:	20197c7c 	.word	0x20197c7c
 8014d3c:	20197c88 	.word	0x20197c88
 8014d40:	20197c8c 	.word	0x20197c8c
 8014d44:	20197bdc 	.word	0x20197bdc

08014d48 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b08a      	sub	sp, #40	; 0x28
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	60f8      	str	r0, [r7, #12]
 8014d50:	60b9      	str	r1, [r7, #8]
 8014d52:	607a      	str	r2, [r7, #4]
 8014d54:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014d56:	2300      	movs	r3, #0
 8014d58:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d102      	bne.n	8014d66 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014d60:	2302      	movs	r3, #2
 8014d62:	627b      	str	r3, [r7, #36]	; 0x24
 8014d64:	e029      	b.n	8014dba <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	4a2d      	ldr	r2, [pc, #180]	; (8014e20 <_txe_byte_allocate+0xd8>)
 8014d6c:	4293      	cmp	r3, r2
 8014d6e:	d002      	beq.n	8014d76 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014d70:	2302      	movs	r3, #2
 8014d72:	627b      	str	r3, [r7, #36]	; 0x24
 8014d74:	e021      	b.n	8014dba <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d102      	bne.n	8014d82 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8014d7c:	2303      	movs	r3, #3
 8014d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8014d80:	e01b      	b.n	8014dba <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d102      	bne.n	8014d8e <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8014d88:	2305      	movs	r3, #5
 8014d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8014d8c:	e015      	b.n	8014dba <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	69db      	ldr	r3, [r3, #28]
 8014d92:	687a      	ldr	r2, [r7, #4]
 8014d94:	429a      	cmp	r2, r3
 8014d96:	d902      	bls.n	8014d9e <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8014d98:	2305      	movs	r3, #5
 8014d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8014d9c:	e00d      	b.n	8014dba <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8014d9e:	683b      	ldr	r3, [r7, #0]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d00a      	beq.n	8014dba <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014da4:	f3ef 8305 	mrs	r3, IPSR
 8014da8:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8014daa:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014dac:	4b1d      	ldr	r3, [pc, #116]	; (8014e24 <_txe_byte_allocate+0xdc>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	4313      	orrs	r3, r2
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d001      	beq.n	8014dba <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8014db6:	2304      	movs	r3, #4
 8014db8:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8014dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d108      	bne.n	8014dd2 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8014dc0:	4b19      	ldr	r3, [pc, #100]	; (8014e28 <_txe_byte_allocate+0xe0>)
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8014dc6:	6a3b      	ldr	r3, [r7, #32]
 8014dc8:	4a18      	ldr	r2, [pc, #96]	; (8014e2c <_txe_byte_allocate+0xe4>)
 8014dca:	4293      	cmp	r3, r2
 8014dcc:	d101      	bne.n	8014dd2 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8014dce:	2313      	movs	r3, #19
 8014dd0:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8014dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d114      	bne.n	8014e02 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014dd8:	f3ef 8305 	mrs	r3, IPSR
 8014ddc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014dde:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014de0:	4b10      	ldr	r3, [pc, #64]	; (8014e24 <_txe_byte_allocate+0xdc>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	4313      	orrs	r3, r2
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d00b      	beq.n	8014e02 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014dea:	f3ef 8305 	mrs	r3, IPSR
 8014dee:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014df0:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014df2:	4b0c      	ldr	r3, [pc, #48]	; (8014e24 <_txe_byte_allocate+0xdc>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	4313      	orrs	r3, r2
 8014df8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014dfc:	d201      	bcs.n	8014e02 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014dfe:	2313      	movs	r3, #19
 8014e00:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d106      	bne.n	8014e16 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8014e08:	683b      	ldr	r3, [r7, #0]
 8014e0a:	687a      	ldr	r2, [r7, #4]
 8014e0c:	68b9      	ldr	r1, [r7, #8]
 8014e0e:	68f8      	ldr	r0, [r7, #12]
 8014e10:	f7fe f80e 	bl	8012e30 <_tx_byte_allocate>
 8014e14:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8014e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014e18:	4618      	mov	r0, r3
 8014e1a:	3728      	adds	r7, #40	; 0x28
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	bd80      	pop	{r7, pc}
 8014e20:	42595445 	.word	0x42595445
 8014e24:	20000054 	.word	0x20000054
 8014e28:	20197b44 	.word	0x20197b44
 8014e2c:	20197c8c 	.word	0x20197c8c

08014e30 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b092      	sub	sp, #72	; 0x48
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	60f8      	str	r0, [r7, #12]
 8014e38:	60b9      	str	r1, [r7, #8]
 8014e3a:	607a      	str	r2, [r7, #4]
 8014e3c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014e3e:	2300      	movs	r3, #0
 8014e40:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d102      	bne.n	8014e4e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014e48:	2302      	movs	r3, #2
 8014e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8014e4c:	e075      	b.n	8014f3a <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8014e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e50:	2b34      	cmp	r3, #52	; 0x34
 8014e52:	d002      	beq.n	8014e5a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014e54:	2302      	movs	r3, #2
 8014e56:	647b      	str	r3, [r7, #68]	; 0x44
 8014e58:	e06f      	b.n	8014f3a <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8014e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8014e62:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014e64:	b672      	cpsid	i
    return(int_posture);
 8014e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014e68:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8014e6a:	4b3b      	ldr	r3, [pc, #236]	; (8014f58 <_txe_byte_pool_create+0x128>)
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	3301      	adds	r3, #1
 8014e70:	4a39      	ldr	r2, [pc, #228]	; (8014f58 <_txe_byte_pool_create+0x128>)
 8014e72:	6013      	str	r3, [r2, #0]
 8014e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e76:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e7a:	f383 8810 	msr	PRIMASK, r3
}
 8014e7e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8014e80:	4b36      	ldr	r3, [pc, #216]	; (8014f5c <_txe_byte_pool_create+0x12c>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8014e86:	2300      	movs	r3, #0
 8014e88:	643b      	str	r3, [r7, #64]	; 0x40
 8014e8a:	e009      	b.n	8014ea0 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8014e8c:	68fa      	ldr	r2, [r7, #12]
 8014e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e90:	429a      	cmp	r2, r3
 8014e92:	d00b      	beq.n	8014eac <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8014e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8014e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e9c:	3301      	adds	r3, #1
 8014e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8014ea0:	4b2f      	ldr	r3, [pc, #188]	; (8014f60 <_txe_byte_pool_create+0x130>)
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014ea6:	429a      	cmp	r2, r3
 8014ea8:	d3f0      	bcc.n	8014e8c <_txe_byte_pool_create+0x5c>
 8014eaa:	e000      	b.n	8014eae <_txe_byte_pool_create+0x7e>
                break;
 8014eac:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014eae:	f3ef 8310 	mrs	r3, PRIMASK
 8014eb2:	623b      	str	r3, [r7, #32]
    return(posture);
 8014eb4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014eb6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014eb8:	b672      	cpsid	i
    return(int_posture);
 8014eba:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014ebc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014ebe:	4b26      	ldr	r3, [pc, #152]	; (8014f58 <_txe_byte_pool_create+0x128>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	3b01      	subs	r3, #1
 8014ec4:	4a24      	ldr	r2, [pc, #144]	; (8014f58 <_txe_byte_pool_create+0x128>)
 8014ec6:	6013      	str	r3, [r2, #0]
 8014ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eca:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ece:	f383 8810 	msr	PRIMASK, r3
}
 8014ed2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014ed4:	f7ff fa22 	bl	801431c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8014ed8:	68fa      	ldr	r2, [r7, #12]
 8014eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014edc:	429a      	cmp	r2, r3
 8014ede:	d102      	bne.n	8014ee6 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8014ee0:	2302      	movs	r3, #2
 8014ee2:	647b      	str	r3, [r7, #68]	; 0x44
 8014ee4:	e029      	b.n	8014f3a <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d102      	bne.n	8014ef2 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8014eec:	2303      	movs	r3, #3
 8014eee:	647b      	str	r3, [r7, #68]	; 0x44
 8014ef0:	e023      	b.n	8014f3a <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8014ef2:	683b      	ldr	r3, [r7, #0]
 8014ef4:	2b63      	cmp	r3, #99	; 0x63
 8014ef6:	d802      	bhi.n	8014efe <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8014ef8:	2305      	movs	r3, #5
 8014efa:	647b      	str	r3, [r7, #68]	; 0x44
 8014efc:	e01d      	b.n	8014f3a <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014efe:	4b19      	ldr	r3, [pc, #100]	; (8014f64 <_txe_byte_pool_create+0x134>)
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8014f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f06:	4a18      	ldr	r2, [pc, #96]	; (8014f68 <_txe_byte_pool_create+0x138>)
 8014f08:	4293      	cmp	r3, r2
 8014f0a:	d101      	bne.n	8014f10 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014f0c:	2313      	movs	r3, #19
 8014f0e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014f10:	f3ef 8305 	mrs	r3, IPSR
 8014f14:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014f16:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014f18:	4b14      	ldr	r3, [pc, #80]	; (8014f6c <_txe_byte_pool_create+0x13c>)
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	4313      	orrs	r3, r2
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d00b      	beq.n	8014f3a <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014f22:	f3ef 8305 	mrs	r3, IPSR
 8014f26:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014f28:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014f2a:	4b10      	ldr	r3, [pc, #64]	; (8014f6c <_txe_byte_pool_create+0x13c>)
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	4313      	orrs	r3, r2
 8014f30:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014f34:	d201      	bcs.n	8014f3a <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8014f36:	2313      	movs	r3, #19
 8014f38:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d106      	bne.n	8014f4e <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8014f40:	683b      	ldr	r3, [r7, #0]
 8014f42:	687a      	ldr	r2, [r7, #4]
 8014f44:	68b9      	ldr	r1, [r7, #8]
 8014f46:	68f8      	ldr	r0, [r7, #12]
 8014f48:	f7fe f8b4 	bl	80130b4 <_tx_byte_pool_create>
 8014f4c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8014f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	3748      	adds	r7, #72	; 0x48
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}
 8014f58:	20197bdc 	.word	0x20197bdc
 8014f5c:	20197b34 	.word	0x20197b34
 8014f60:	20197b38 	.word	0x20197b38
 8014f64:	20197b44 	.word	0x20197b44
 8014f68:	20197c8c 	.word	0x20197c8c
 8014f6c:	20000054 	.word	0x20000054

08014f70 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b094      	sub	sp, #80	; 0x50
 8014f74:	af02      	add	r7, sp, #8
 8014f76:	60f8      	str	r0, [r7, #12]
 8014f78:	60b9      	str	r1, [r7, #8]
 8014f7a:	607a      	str	r2, [r7, #4]
 8014f7c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014f7e:	2300      	movs	r3, #0
 8014f80:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d102      	bne.n	8014f8e <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8014f88:	2309      	movs	r3, #9
 8014f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8014f8c:	e083      	b.n	8015096 <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 8014f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f90:	2b38      	cmp	r3, #56	; 0x38
 8014f92:	d002      	beq.n	8014f9a <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8014f94:	2309      	movs	r3, #9
 8014f96:	647b      	str	r3, [r7, #68]	; 0x44
 8014f98:	e07d      	b.n	8015096 <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8014f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8014fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014fa4:	b672      	cpsid	i
    return(int_posture);
 8014fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014fa8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8014faa:	4b43      	ldr	r3, [pc, #268]	; (80150b8 <_txe_queue_create+0x148>)
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	3301      	adds	r3, #1
 8014fb0:	4a41      	ldr	r2, [pc, #260]	; (80150b8 <_txe_queue_create+0x148>)
 8014fb2:	6013      	str	r3, [r2, #0]
 8014fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fb6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fba:	f383 8810 	msr	PRIMASK, r3
}
 8014fbe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8014fc0:	4b3e      	ldr	r3, [pc, #248]	; (80150bc <_txe_queue_create+0x14c>)
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8014fca:	e009      	b.n	8014fe0 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 8014fcc:	68fa      	ldr	r2, [r7, #12]
 8014fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d00b      	beq.n	8014fec <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8014fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8014fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fdc:	3301      	adds	r3, #1
 8014fde:	643b      	str	r3, [r7, #64]	; 0x40
 8014fe0:	4b37      	ldr	r3, [pc, #220]	; (80150c0 <_txe_queue_create+0x150>)
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	d3f0      	bcc.n	8014fcc <_txe_queue_create+0x5c>
 8014fea:	e000      	b.n	8014fee <_txe_queue_create+0x7e>
                break;
 8014fec:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014fee:	f3ef 8310 	mrs	r3, PRIMASK
 8014ff2:	623b      	str	r3, [r7, #32]
    return(posture);
 8014ff4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014ff6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014ff8:	b672      	cpsid	i
    return(int_posture);
 8014ffa:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014ffc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014ffe:	4b2e      	ldr	r3, [pc, #184]	; (80150b8 <_txe_queue_create+0x148>)
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	3b01      	subs	r3, #1
 8015004:	4a2c      	ldr	r2, [pc, #176]	; (80150b8 <_txe_queue_create+0x148>)
 8015006:	6013      	str	r3, [r2, #0]
 8015008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801500a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801500e:	f383 8810 	msr	PRIMASK, r3
}
 8015012:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8015014:	f7ff f982 	bl	801431c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8015018:	68fa      	ldr	r2, [r7, #12]
 801501a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801501c:	429a      	cmp	r2, r3
 801501e:	d102      	bne.n	8015026 <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 8015020:	2309      	movs	r3, #9
 8015022:	647b      	str	r3, [r7, #68]	; 0x44
 8015024:	e037      	b.n	8015096 <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 8015026:	683b      	ldr	r3, [r7, #0]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d102      	bne.n	8015032 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 801502c:	2303      	movs	r3, #3
 801502e:	647b      	str	r3, [r7, #68]	; 0x44
 8015030:	e031      	b.n	8015096 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d102      	bne.n	801503e <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8015038:	2305      	movs	r3, #5
 801503a:	647b      	str	r3, [r7, #68]	; 0x44
 801503c:	e02b      	b.n	8015096 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	2b10      	cmp	r3, #16
 8015042:	d902      	bls.n	801504a <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8015044:	2305      	movs	r3, #5
 8015046:	647b      	str	r3, [r7, #68]	; 0x44
 8015048:	e025      	b.n	8015096 <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 801504a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801504c:	089b      	lsrs	r3, r3, #2
 801504e:	687a      	ldr	r2, [r7, #4]
 8015050:	429a      	cmp	r2, r3
 8015052:	d902      	bls.n	801505a <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 8015054:	2305      	movs	r3, #5
 8015056:	647b      	str	r3, [r7, #68]	; 0x44
 8015058:	e01d      	b.n	8015096 <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801505a:	4b1a      	ldr	r3, [pc, #104]	; (80150c4 <_txe_queue_create+0x154>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8015060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015062:	4a19      	ldr	r2, [pc, #100]	; (80150c8 <_txe_queue_create+0x158>)
 8015064:	4293      	cmp	r3, r2
 8015066:	d101      	bne.n	801506c <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015068:	2313      	movs	r3, #19
 801506a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801506c:	f3ef 8305 	mrs	r3, IPSR
 8015070:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015072:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015074:	4b15      	ldr	r3, [pc, #84]	; (80150cc <_txe_queue_create+0x15c>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	4313      	orrs	r3, r2
 801507a:	2b00      	cmp	r3, #0
 801507c:	d00b      	beq.n	8015096 <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801507e:	f3ef 8305 	mrs	r3, IPSR
 8015082:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015084:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015086:	4b11      	ldr	r3, [pc, #68]	; (80150cc <_txe_queue_create+0x15c>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	4313      	orrs	r3, r2
 801508c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015090:	d201      	bcs.n	8015096 <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8015092:	2313      	movs	r3, #19
 8015094:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015098:	2b00      	cmp	r3, #0
 801509a:	d108      	bne.n	80150ae <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 801509c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801509e:	9300      	str	r3, [sp, #0]
 80150a0:	683b      	ldr	r3, [r7, #0]
 80150a2:	687a      	ldr	r2, [r7, #4]
 80150a4:	68b9      	ldr	r1, [r7, #8]
 80150a6:	68f8      	ldr	r0, [r7, #12]
 80150a8:	f7fe fa9a 	bl	80135e0 <_tx_queue_create>
 80150ac:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80150ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	3748      	adds	r7, #72	; 0x48
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}
 80150b8:	20197bdc 	.word	0x20197bdc
 80150bc:	20197b14 	.word	0x20197b14
 80150c0:	20197b18 	.word	0x20197b18
 80150c4:	20197b44 	.word	0x20197b44
 80150c8:	20197c8c 	.word	0x20197c8c
 80150cc:	20000054 	.word	0x20000054

080150d0 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b088      	sub	sp, #32
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	60f8      	str	r0, [r7, #12]
 80150d8:	60b9      	str	r1, [r7, #8]
 80150da:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80150dc:	2300      	movs	r3, #0
 80150de:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d102      	bne.n	80150ec <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80150e6:	2309      	movs	r3, #9
 80150e8:	61fb      	str	r3, [r7, #28]
 80150ea:	e025      	b.n	8015138 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	4a18      	ldr	r2, [pc, #96]	; (8015154 <_txe_queue_receive+0x84>)
 80150f2:	4293      	cmp	r3, r2
 80150f4:	d002      	beq.n	80150fc <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80150f6:	2309      	movs	r3, #9
 80150f8:	61fb      	str	r3, [r7, #28]
 80150fa:	e01d      	b.n	8015138 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 80150fc:	68bb      	ldr	r3, [r7, #8]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d102      	bne.n	8015108 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8015102:	2303      	movs	r3, #3
 8015104:	61fb      	str	r3, [r7, #28]
 8015106:	e017      	b.n	8015138 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d014      	beq.n	8015138 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801510e:	f3ef 8305 	mrs	r3, IPSR
 8015112:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015114:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015116:	4b10      	ldr	r3, [pc, #64]	; (8015158 <_txe_queue_receive+0x88>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	4313      	orrs	r3, r2
 801511c:	2b00      	cmp	r3, #0
 801511e:	d002      	beq.n	8015126 <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8015120:	2304      	movs	r3, #4
 8015122:	61fb      	str	r3, [r7, #28]
 8015124:	e008      	b.n	8015138 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8015126:	4b0d      	ldr	r3, [pc, #52]	; (801515c <_txe_queue_receive+0x8c>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801512c:	69bb      	ldr	r3, [r7, #24]
 801512e:	4a0c      	ldr	r2, [pc, #48]	; (8015160 <_txe_queue_receive+0x90>)
 8015130:	4293      	cmp	r3, r2
 8015132:	d101      	bne.n	8015138 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8015134:	2304      	movs	r3, #4
 8015136:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015138:	69fb      	ldr	r3, [r7, #28]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d105      	bne.n	801514a <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 801513e:	687a      	ldr	r2, [r7, #4]
 8015140:	68b9      	ldr	r1, [r7, #8]
 8015142:	68f8      	ldr	r0, [r7, #12]
 8015144:	f7fe fac0 	bl	80136c8 <_tx_queue_receive>
 8015148:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 801514a:	69fb      	ldr	r3, [r7, #28]
}
 801514c:	4618      	mov	r0, r3
 801514e:	3720      	adds	r7, #32
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}
 8015154:	51554555 	.word	0x51554555
 8015158:	20000054 	.word	0x20000054
 801515c:	20197b44 	.word	0x20197b44
 8015160:	20197c8c 	.word	0x20197c8c

08015164 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b088      	sub	sp, #32
 8015168:	af00      	add	r7, sp, #0
 801516a:	60f8      	str	r0, [r7, #12]
 801516c:	60b9      	str	r1, [r7, #8]
 801516e:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015170:	2300      	movs	r3, #0
 8015172:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d102      	bne.n	8015180 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801517a:	2309      	movs	r3, #9
 801517c:	61fb      	str	r3, [r7, #28]
 801517e:	e025      	b.n	80151cc <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	4a18      	ldr	r2, [pc, #96]	; (80151e8 <_txe_queue_send+0x84>)
 8015186:	4293      	cmp	r3, r2
 8015188:	d002      	beq.n	8015190 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801518a:	2309      	movs	r3, #9
 801518c:	61fb      	str	r3, [r7, #28]
 801518e:	e01d      	b.n	80151cc <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d102      	bne.n	801519c <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8015196:	2303      	movs	r3, #3
 8015198:	61fb      	str	r3, [r7, #28]
 801519a:	e017      	b.n	80151cc <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d014      	beq.n	80151cc <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80151a2:	f3ef 8305 	mrs	r3, IPSR
 80151a6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80151a8:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80151aa:	4b10      	ldr	r3, [pc, #64]	; (80151ec <_txe_queue_send+0x88>)
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	4313      	orrs	r3, r2
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d002      	beq.n	80151ba <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80151b4:	2304      	movs	r3, #4
 80151b6:	61fb      	str	r3, [r7, #28]
 80151b8:	e008      	b.n	80151cc <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80151ba:	4b0d      	ldr	r3, [pc, #52]	; (80151f0 <_txe_queue_send+0x8c>)
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80151c0:	69bb      	ldr	r3, [r7, #24]
 80151c2:	4a0c      	ldr	r2, [pc, #48]	; (80151f4 <_txe_queue_send+0x90>)
 80151c4:	4293      	cmp	r3, r2
 80151c6:	d101      	bne.n	80151cc <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80151c8:	2304      	movs	r3, #4
 80151ca:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80151cc:	69fb      	ldr	r3, [r7, #28]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d105      	bne.n	80151de <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 80151d2:	687a      	ldr	r2, [r7, #4]
 80151d4:	68b9      	ldr	r1, [r7, #8]
 80151d6:	68f8      	ldr	r0, [r7, #12]
 80151d8:	f7fe fc3e 	bl	8013a58 <_tx_queue_send>
 80151dc:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80151de:	69fb      	ldr	r3, [r7, #28]
}
 80151e0:	4618      	mov	r0, r3
 80151e2:	3720      	adds	r7, #32
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}
 80151e8:	51554555 	.word	0x51554555
 80151ec:	20000054 	.word	0x20000054
 80151f0:	20197b44 	.word	0x20197b44
 80151f4:	20197c8c 	.word	0x20197c8c

080151f8 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b092      	sub	sp, #72	; 0x48
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	60f8      	str	r0, [r7, #12]
 8015200:	60b9      	str	r1, [r7, #8]
 8015202:	607a      	str	r2, [r7, #4]
 8015204:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015206:	2300      	movs	r3, #0
 8015208:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d102      	bne.n	8015216 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8015210:	230c      	movs	r3, #12
 8015212:	647b      	str	r3, [r7, #68]	; 0x44
 8015214:	e054      	b.n	80152c0 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8015216:	683b      	ldr	r3, [r7, #0]
 8015218:	2b1c      	cmp	r3, #28
 801521a:	d002      	beq.n	8015222 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801521c:	230c      	movs	r3, #12
 801521e:	647b      	str	r3, [r7, #68]	; 0x44
 8015220:	e04e      	b.n	80152c0 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015222:	f3ef 8310 	mrs	r3, PRIMASK
 8015226:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8015228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801522a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801522c:	b672      	cpsid	i
    return(int_posture);
 801522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8015230:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8015232:	4b36      	ldr	r3, [pc, #216]	; (801530c <_txe_semaphore_create+0x114>)
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	3301      	adds	r3, #1
 8015238:	4a34      	ldr	r2, [pc, #208]	; (801530c <_txe_semaphore_create+0x114>)
 801523a:	6013      	str	r3, [r2, #0]
 801523c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801523e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015242:	f383 8810 	msr	PRIMASK, r3
}
 8015246:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8015248:	4b31      	ldr	r3, [pc, #196]	; (8015310 <_txe_semaphore_create+0x118>)
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 801524e:	2300      	movs	r3, #0
 8015250:	643b      	str	r3, [r7, #64]	; 0x40
 8015252:	e009      	b.n	8015268 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8015254:	68fa      	ldr	r2, [r7, #12]
 8015256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015258:	429a      	cmp	r2, r3
 801525a:	d00b      	beq.n	8015274 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 801525c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801525e:	695b      	ldr	r3, [r3, #20]
 8015260:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8015262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015264:	3301      	adds	r3, #1
 8015266:	643b      	str	r3, [r7, #64]	; 0x40
 8015268:	4b2a      	ldr	r3, [pc, #168]	; (8015314 <_txe_semaphore_create+0x11c>)
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801526e:	429a      	cmp	r2, r3
 8015270:	d3f0      	bcc.n	8015254 <_txe_semaphore_create+0x5c>
 8015272:	e000      	b.n	8015276 <_txe_semaphore_create+0x7e>
                break;
 8015274:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015276:	f3ef 8310 	mrs	r3, PRIMASK
 801527a:	623b      	str	r3, [r7, #32]
    return(posture);
 801527c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801527e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015280:	b672      	cpsid	i
    return(int_posture);
 8015282:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8015284:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8015286:	4b21      	ldr	r3, [pc, #132]	; (801530c <_txe_semaphore_create+0x114>)
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	3b01      	subs	r3, #1
 801528c:	4a1f      	ldr	r2, [pc, #124]	; (801530c <_txe_semaphore_create+0x114>)
 801528e:	6013      	str	r3, [r2, #0]
 8015290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015292:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015296:	f383 8810 	msr	PRIMASK, r3
}
 801529a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801529c:	f7ff f83e 	bl	801431c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 80152a0:	68fa      	ldr	r2, [r7, #12]
 80152a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152a4:	429a      	cmp	r2, r3
 80152a6:	d102      	bne.n	80152ae <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 80152a8:	230c      	movs	r3, #12
 80152aa:	647b      	str	r3, [r7, #68]	; 0x44
 80152ac:	e008      	b.n	80152c0 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80152ae:	4b1a      	ldr	r3, [pc, #104]	; (8015318 <_txe_semaphore_create+0x120>)
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80152b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152b6:	4a19      	ldr	r2, [pc, #100]	; (801531c <_txe_semaphore_create+0x124>)
 80152b8:	4293      	cmp	r3, r2
 80152ba:	d101      	bne.n	80152c0 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80152bc:	2313      	movs	r3, #19
 80152be:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80152c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d114      	bne.n	80152f0 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80152c6:	f3ef 8305 	mrs	r3, IPSR
 80152ca:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80152cc:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80152ce:	4b14      	ldr	r3, [pc, #80]	; (8015320 <_txe_semaphore_create+0x128>)
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	4313      	orrs	r3, r2
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d00b      	beq.n	80152f0 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80152d8:	f3ef 8305 	mrs	r3, IPSR
 80152dc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80152de:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80152e0:	4b0f      	ldr	r3, [pc, #60]	; (8015320 <_txe_semaphore_create+0x128>)
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	4313      	orrs	r3, r2
 80152e6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80152ea:	d201      	bcs.n	80152f0 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80152ec:	2313      	movs	r3, #19
 80152ee:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80152f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d105      	bne.n	8015302 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 80152f6:	687a      	ldr	r2, [r7, #4]
 80152f8:	68b9      	ldr	r1, [r7, #8]
 80152fa:	68f8      	ldr	r0, [r7, #12]
 80152fc:	f7fe fd54 	bl	8013da8 <_tx_semaphore_create>
 8015300:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8015302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8015304:	4618      	mov	r0, r3
 8015306:	3748      	adds	r7, #72	; 0x48
 8015308:	46bd      	mov	sp, r7
 801530a:	bd80      	pop	{r7, pc}
 801530c:	20197bdc 	.word	0x20197bdc
 8015310:	20197b0c 	.word	0x20197b0c
 8015314:	20197b10 	.word	0x20197b10
 8015318:	20197b44 	.word	0x20197b44
 801531c:	20197c8c 	.word	0x20197c8c
 8015320:	20000054 	.word	0x20000054

08015324 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b086      	sub	sp, #24
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
 801532c:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801532e:	2300      	movs	r3, #0
 8015330:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d102      	bne.n	801533e <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8015338:	230c      	movs	r3, #12
 801533a:	617b      	str	r3, [r7, #20]
 801533c:	e01f      	b.n	801537e <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	4a15      	ldr	r2, [pc, #84]	; (8015398 <_txe_semaphore_get+0x74>)
 8015344:	4293      	cmp	r3, r2
 8015346:	d002      	beq.n	801534e <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8015348:	230c      	movs	r3, #12
 801534a:	617b      	str	r3, [r7, #20]
 801534c:	e017      	b.n	801537e <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d014      	beq.n	801537e <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015354:	f3ef 8305 	mrs	r3, IPSR
 8015358:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801535a:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801535c:	4b0f      	ldr	r3, [pc, #60]	; (801539c <_txe_semaphore_get+0x78>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	4313      	orrs	r3, r2
 8015362:	2b00      	cmp	r3, #0
 8015364:	d002      	beq.n	801536c <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8015366:	2304      	movs	r3, #4
 8015368:	617b      	str	r3, [r7, #20]
 801536a:	e008      	b.n	801537e <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801536c:	4b0c      	ldr	r3, [pc, #48]	; (80153a0 <_txe_semaphore_get+0x7c>)
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8015372:	693b      	ldr	r3, [r7, #16]
 8015374:	4a0b      	ldr	r2, [pc, #44]	; (80153a4 <_txe_semaphore_get+0x80>)
 8015376:	4293      	cmp	r3, r2
 8015378:	d101      	bne.n	801537e <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801537a:	2304      	movs	r3, #4
 801537c:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801537e:	697b      	ldr	r3, [r7, #20]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d104      	bne.n	801538e <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8015384:	6839      	ldr	r1, [r7, #0]
 8015386:	6878      	ldr	r0, [r7, #4]
 8015388:	f7fe fd60 	bl	8013e4c <_tx_semaphore_get>
 801538c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801538e:	697b      	ldr	r3, [r7, #20]
}
 8015390:	4618      	mov	r0, r3
 8015392:	3718      	adds	r7, #24
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}
 8015398:	53454d41 	.word	0x53454d41
 801539c:	20000054 	.word	0x20000054
 80153a0:	20197b44 	.word	0x20197b44
 80153a4:	20197c8c 	.word	0x20197c8c

080153a8 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b084      	sub	sp, #16
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d102      	bne.n	80153bc <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80153b6:	230c      	movs	r3, #12
 80153b8:	60fb      	str	r3, [r7, #12]
 80153ba:	e00b      	b.n	80153d4 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	4a07      	ldr	r2, [pc, #28]	; (80153e0 <_txe_semaphore_put+0x38>)
 80153c2:	4293      	cmp	r3, r2
 80153c4:	d002      	beq.n	80153cc <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80153c6:	230c      	movs	r3, #12
 80153c8:	60fb      	str	r3, [r7, #12]
 80153ca:	e003      	b.n	80153d4 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 80153cc:	6878      	ldr	r0, [r7, #4]
 80153ce:	f7fe fdcf 	bl	8013f70 <_tx_semaphore_put>
 80153d2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80153d4:	68fb      	ldr	r3, [r7, #12]
}
 80153d6:	4618      	mov	r0, r3
 80153d8:	3710      	adds	r7, #16
 80153da:	46bd      	mov	sp, r7
 80153dc:	bd80      	pop	{r7, pc}
 80153de:	bf00      	nop
 80153e0:	53454d41 	.word	0x53454d41

080153e4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b09a      	sub	sp, #104	; 0x68
 80153e8:	af06      	add	r7, sp, #24
 80153ea:	60f8      	str	r0, [r7, #12]
 80153ec:	60b9      	str	r1, [r7, #8]
 80153ee:	607a      	str	r2, [r7, #4]
 80153f0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80153f2:	2300      	movs	r3, #0
 80153f4:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d102      	bne.n	8015402 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80153fc:	230e      	movs	r3, #14
 80153fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015400:	e0bb      	b.n	801557a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8015402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015404:	2bb0      	cmp	r3, #176	; 0xb0
 8015406:	d002      	beq.n	801540e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8015408:	230e      	movs	r3, #14
 801540a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801540c:	e0b5      	b.n	801557a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801540e:	f3ef 8310 	mrs	r3, PRIMASK
 8015412:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8015414:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8015416:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8015418:	b672      	cpsid	i
    return(int_posture);
 801541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801541c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801541e:	4b64      	ldr	r3, [pc, #400]	; (80155b0 <_txe_thread_create+0x1cc>)
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	3301      	adds	r3, #1
 8015424:	4a62      	ldr	r2, [pc, #392]	; (80155b0 <_txe_thread_create+0x1cc>)
 8015426:	6013      	str	r3, [r2, #0]
 8015428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801542a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801542c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801542e:	f383 8810 	msr	PRIMASK, r3
}
 8015432:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8015434:	2300      	movs	r3, #0
 8015436:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8015438:	4b5e      	ldr	r3, [pc, #376]	; (80155b4 <_txe_thread_create+0x1d0>)
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801543e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015440:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8015442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015444:	3b01      	subs	r3, #1
 8015446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015448:	4413      	add	r3, r2
 801544a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 801544c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801544e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8015450:	2300      	movs	r3, #0
 8015452:	647b      	str	r3, [r7, #68]	; 0x44
 8015454:	e02b      	b.n	80154ae <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8015456:	68fa      	ldr	r2, [r7, #12]
 8015458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801545a:	429a      	cmp	r2, r3
 801545c:	d101      	bne.n	8015462 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 801545e:	2301      	movs	r3, #1
 8015460:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8015462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015464:	2b01      	cmp	r3, #1
 8015466:	d028      	beq.n	80154ba <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8015468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801546a:	68db      	ldr	r3, [r3, #12]
 801546c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801546e:	429a      	cmp	r2, r3
 8015470:	d308      	bcc.n	8015484 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8015472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015474:	691b      	ldr	r3, [r3, #16]
 8015476:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015478:	429a      	cmp	r2, r3
 801547a:	d203      	bcs.n	8015484 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801547c:	2300      	movs	r3, #0
 801547e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8015480:	2301      	movs	r3, #1
 8015482:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8015484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015486:	68db      	ldr	r3, [r3, #12]
 8015488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801548a:	429a      	cmp	r2, r3
 801548c:	d308      	bcc.n	80154a0 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801548e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015490:	691b      	ldr	r3, [r3, #16]
 8015492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015494:	429a      	cmp	r2, r3
 8015496:	d203      	bcs.n	80154a0 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8015498:	2300      	movs	r3, #0
 801549a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801549c:	2301      	movs	r3, #1
 801549e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 80154a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80154a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80154a6:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80154a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80154aa:	3301      	adds	r3, #1
 80154ac:	647b      	str	r3, [r7, #68]	; 0x44
 80154ae:	4b42      	ldr	r3, [pc, #264]	; (80155b8 <_txe_thread_create+0x1d4>)
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80154b4:	429a      	cmp	r2, r3
 80154b6:	d3ce      	bcc.n	8015456 <_txe_thread_create+0x72>
 80154b8:	e000      	b.n	80154bc <_txe_thread_create+0xd8>
                break;
 80154ba:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80154bc:	f3ef 8310 	mrs	r3, PRIMASK
 80154c0:	61fb      	str	r3, [r7, #28]
    return(posture);
 80154c2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80154c4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80154c6:	b672      	cpsid	i
    return(int_posture);
 80154c8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80154ca:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80154cc:	4b38      	ldr	r3, [pc, #224]	; (80155b0 <_txe_thread_create+0x1cc>)
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	3b01      	subs	r3, #1
 80154d2:	4a37      	ldr	r2, [pc, #220]	; (80155b0 <_txe_thread_create+0x1cc>)
 80154d4:	6013      	str	r3, [r2, #0]
 80154d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154d8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80154da:	6a3b      	ldr	r3, [r7, #32]
 80154dc:	f383 8810 	msr	PRIMASK, r3
}
 80154e0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80154e2:	f7fe ff1b 	bl	801431c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80154e6:	68fa      	ldr	r2, [r7, #12]
 80154e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80154ea:	429a      	cmp	r2, r3
 80154ec:	d102      	bne.n	80154f4 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80154ee:	230e      	movs	r3, #14
 80154f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80154f2:	e042      	b.n	801557a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80154f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d102      	bne.n	8015500 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80154fa:	2303      	movs	r3, #3
 80154fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80154fe:	e03c      	b.n	801557a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d102      	bne.n	801550c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8015506:	2303      	movs	r3, #3
 8015508:	64fb      	str	r3, [r7, #76]	; 0x4c
 801550a:	e036      	b.n	801557a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 801550c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801550e:	2bc7      	cmp	r3, #199	; 0xc7
 8015510:	d802      	bhi.n	8015518 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8015512:	2305      	movs	r3, #5
 8015514:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015516:	e030      	b.n	801557a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8015518:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801551a:	2b1f      	cmp	r3, #31
 801551c:	d902      	bls.n	8015524 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 801551e:	230f      	movs	r3, #15
 8015520:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015522:	e02a      	b.n	801557a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8015524:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015528:	429a      	cmp	r2, r3
 801552a:	d902      	bls.n	8015532 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 801552c:	2318      	movs	r3, #24
 801552e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015530:	e023      	b.n	801557a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8015532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015534:	2b01      	cmp	r3, #1
 8015536:	d902      	bls.n	801553e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8015538:	2310      	movs	r3, #16
 801553a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801553c:	e01d      	b.n	801557a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 801553e:	4b1f      	ldr	r3, [pc, #124]	; (80155bc <_txe_thread_create+0x1d8>)
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8015544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015546:	4a1e      	ldr	r2, [pc, #120]	; (80155c0 <_txe_thread_create+0x1dc>)
 8015548:	4293      	cmp	r3, r2
 801554a:	d101      	bne.n	8015550 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801554c:	2313      	movs	r3, #19
 801554e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015550:	f3ef 8305 	mrs	r3, IPSR
 8015554:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015556:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015558:	4b1a      	ldr	r3, [pc, #104]	; (80155c4 <_txe_thread_create+0x1e0>)
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	4313      	orrs	r3, r2
 801555e:	2b00      	cmp	r3, #0
 8015560:	d00b      	beq.n	801557a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015562:	f3ef 8305 	mrs	r3, IPSR
 8015566:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8015568:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801556a:	4b16      	ldr	r3, [pc, #88]	; (80155c4 <_txe_thread_create+0x1e0>)
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	4313      	orrs	r3, r2
 8015570:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015574:	d201      	bcs.n	801557a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8015576:	2313      	movs	r3, #19
 8015578:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801557a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801557c:	2b00      	cmp	r3, #0
 801557e:	d112      	bne.n	80155a6 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8015580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015582:	9305      	str	r3, [sp, #20]
 8015584:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015586:	9304      	str	r3, [sp, #16]
 8015588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801558a:	9303      	str	r3, [sp, #12]
 801558c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801558e:	9302      	str	r3, [sp, #8]
 8015590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015592:	9301      	str	r3, [sp, #4]
 8015594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015596:	9300      	str	r3, [sp, #0]
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	687a      	ldr	r2, [r7, #4]
 801559c:	68b9      	ldr	r1, [r7, #8]
 801559e:	68f8      	ldr	r0, [r7, #12]
 80155a0:	f7fe fd3e 	bl	8014020 <_tx_thread_create>
 80155a4:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 80155a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	3750      	adds	r7, #80	; 0x50
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bd80      	pop	{r7, pc}
 80155b0:	20197bdc 	.word	0x20197bdc
 80155b4:	20197b4c 	.word	0x20197b4c
 80155b8:	20197b50 	.word	0x20197b50
 80155bc:	20197b44 	.word	0x20197b44
 80155c0:	20197c8c 	.word	0x20197c8c
 80155c4:	20000054 	.word	0x20000054

080155c8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80155c8:	8880      	ldrh	r0, [r0, #4]
 80155ca:	4770      	bx	lr

080155cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80155cc:	b570      	push	{r4, r5, r6, lr}
 80155ce:	6803      	ldr	r3, [r0, #0]
 80155d0:	4605      	mov	r5, r0
 80155d2:	460c      	mov	r4, r1
 80155d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155d6:	2100      	movs	r1, #0
 80155d8:	4798      	blx	r3
 80155da:	682b      	ldr	r3, [r5, #0]
 80155dc:	4606      	mov	r6, r0
 80155de:	6a1b      	ldr	r3, [r3, #32]
 80155e0:	4628      	mov	r0, r5
 80155e2:	4798      	blx	r3
 80155e4:	1ba4      	subs	r4, r4, r6
 80155e6:	b2a4      	uxth	r4, r4
 80155e8:	fbb4 f0f0 	udiv	r0, r4, r0
 80155ec:	bd70      	pop	{r4, r5, r6, pc}

080155ee <_ZN8touchgfx17AbstractPartition5clearEv>:
 80155ee:	2300      	movs	r3, #0
 80155f0:	8083      	strh	r3, [r0, #4]
 80155f2:	4770      	bx	lr

080155f4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80155f4:	b510      	push	{r4, lr}
 80155f6:	4604      	mov	r4, r0
 80155f8:	6803      	ldr	r3, [r0, #0]
 80155fa:	8881      	ldrh	r1, [r0, #4]
 80155fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155fe:	4798      	blx	r3
 8015600:	88a3      	ldrh	r3, [r4, #4]
 8015602:	3301      	adds	r3, #1
 8015604:	80a3      	strh	r3, [r4, #4]
 8015606:	bd10      	pop	{r4, pc}

08015608 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015608:	6803      	ldr	r3, [r0, #0]
 801560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801560c:	4718      	bx	r3

0801560e <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801560e:	4770      	bx	lr

08015610 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8015610:	4a02      	ldr	r2, [pc, #8]	; (801561c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8015612:	6002      	str	r2, [r0, #0]
 8015614:	2200      	movs	r2, #0
 8015616:	8082      	strh	r2, [r0, #4]
 8015618:	4770      	bx	lr
 801561a:	bf00      	nop
 801561c:	0802a8f0 	.word	0x0802a8f0

08015620 <_ZN8touchgfx9Container13getFirstChildEv>:
 8015620:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8015622:	4770      	bx	lr

08015624 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8015624:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015626:	2000      	movs	r0, #0
 8015628:	b12b      	cbz	r3, 8015636 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801562a:	b920      	cbnz	r0, 8015636 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801562c:	1a5a      	subs	r2, r3, r1
 801562e:	4250      	negs	r0, r2
 8015630:	4150      	adcs	r0, r2
 8015632:	699b      	ldr	r3, [r3, #24]
 8015634:	e7f8      	b.n	8015628 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8015636:	4770      	bx	lr

08015638 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015638:	2300      	movs	r3, #0
 801563a:	6148      	str	r0, [r1, #20]
 801563c:	618b      	str	r3, [r1, #24]
 801563e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015640:	b913      	cbnz	r3, 8015648 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8015642:	6281      	str	r1, [r0, #40]	; 0x28
 8015644:	4770      	bx	lr
 8015646:	4613      	mov	r3, r2
 8015648:	699a      	ldr	r2, [r3, #24]
 801564a:	2a00      	cmp	r2, #0
 801564c:	d1fb      	bne.n	8015646 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 801564e:	6199      	str	r1, [r3, #24]
 8015650:	4770      	bx	lr

08015652 <_ZN8touchgfx9Container9removeAllEv>:
 8015652:	2200      	movs	r2, #0
 8015654:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015656:	b123      	cbz	r3, 8015662 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8015658:	6999      	ldr	r1, [r3, #24]
 801565a:	6281      	str	r1, [r0, #40]	; 0x28
 801565c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8015660:	e7f8      	b.n	8015654 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8015662:	4770      	bx	lr

08015664 <_ZN8touchgfx9Container6unlinkEv>:
 8015664:	2300      	movs	r3, #0
 8015666:	6283      	str	r3, [r0, #40]	; 0x28
 8015668:	4770      	bx	lr

0801566a <_ZNK8touchgfx9Container12getSolidRectEv>:
 801566a:	2200      	movs	r2, #0
 801566c:	8002      	strh	r2, [r0, #0]
 801566e:	8042      	strh	r2, [r0, #2]
 8015670:	8082      	strh	r2, [r0, #4]
 8015672:	80c2      	strh	r2, [r0, #6]
 8015674:	4770      	bx	lr

08015676 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015676:	b570      	push	{r4, r5, r6, lr}
 8015678:	460d      	mov	r5, r1
 801567a:	4616      	mov	r6, r2
 801567c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801567e:	b13c      	cbz	r4, 8015690 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015680:	6823      	ldr	r3, [r4, #0]
 8015682:	4620      	mov	r0, r4
 8015684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015686:	4632      	mov	r2, r6
 8015688:	4629      	mov	r1, r5
 801568a:	4798      	blx	r3
 801568c:	69a4      	ldr	r4, [r4, #24]
 801568e:	e7f6      	b.n	801567e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015690:	bd70      	pop	{r4, r5, r6, pc}

08015692 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015692:	b538      	push	{r3, r4, r5, lr}
 8015694:	460d      	mov	r5, r1
 8015696:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015698:	b134      	cbz	r4, 80156a8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801569a:	682b      	ldr	r3, [r5, #0]
 801569c:	4621      	mov	r1, r4
 801569e:	689b      	ldr	r3, [r3, #8]
 80156a0:	4628      	mov	r0, r5
 80156a2:	4798      	blx	r3
 80156a4:	69a4      	ldr	r4, [r4, #24]
 80156a6:	e7f7      	b.n	8015698 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80156a8:	bd38      	pop	{r3, r4, r5, pc}

080156aa <_ZN8touchgfx9ContainerD1Ev>:
 80156aa:	4770      	bx	lr

080156ac <_ZN8touchgfx9ContainerD0Ev>:
 80156ac:	b510      	push	{r4, lr}
 80156ae:	4604      	mov	r4, r0
 80156b0:	212c      	movs	r1, #44	; 0x2c
 80156b2:	f012 fce4 	bl	802807e <_ZdlPvj>
 80156b6:	4620      	mov	r0, r4
 80156b8:	bd10      	pop	{r4, pc}

080156ba <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80156ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80156bc:	b19b      	cbz	r3, 80156e6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80156be:	428b      	cmp	r3, r1
 80156c0:	d109      	bne.n	80156d6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80156c2:	2100      	movs	r1, #0
 80156c4:	699a      	ldr	r2, [r3, #24]
 80156c6:	6159      	str	r1, [r3, #20]
 80156c8:	6282      	str	r2, [r0, #40]	; 0x28
 80156ca:	b902      	cbnz	r2, 80156ce <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80156cc:	4770      	bx	lr
 80156ce:	6199      	str	r1, [r3, #24]
 80156d0:	4770      	bx	lr
 80156d2:	4613      	mov	r3, r2
 80156d4:	b13a      	cbz	r2, 80156e6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80156d6:	699a      	ldr	r2, [r3, #24]
 80156d8:	428a      	cmp	r2, r1
 80156da:	d1fa      	bne.n	80156d2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80156dc:	698a      	ldr	r2, [r1, #24]
 80156de:	619a      	str	r2, [r3, #24]
 80156e0:	2300      	movs	r3, #0
 80156e2:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80156e6:	4770      	bx	lr

080156e8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80156e8:	b410      	push	{r4}
 80156ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80156ec:	4604      	mov	r4, r0
 80156ee:	b92b      	cbnz	r3, 80156fc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80156f0:	6803      	ldr	r3, [r0, #0]
 80156f2:	4611      	mov	r1, r2
 80156f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80156f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156fa:	4718      	bx	r3
 80156fc:	b941      	cbnz	r1, 8015710 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80156fe:	6193      	str	r3, [r2, #24]
 8015700:	6282      	str	r2, [r0, #40]	; 0x28
 8015702:	6154      	str	r4, [r2, #20]
 8015704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015708:	4770      	bx	lr
 801570a:	4603      	mov	r3, r0
 801570c:	2800      	cmp	r0, #0
 801570e:	d0f9      	beq.n	8015704 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015710:	4299      	cmp	r1, r3
 8015712:	6998      	ldr	r0, [r3, #24]
 8015714:	d1f9      	bne.n	801570a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8015716:	6190      	str	r0, [r2, #24]
 8015718:	618a      	str	r2, [r1, #24]
 801571a:	e7f2      	b.n	8015702 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0801571c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015720:	461f      	mov	r7, r3
 8015722:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8015726:	460d      	mov	r5, r1
 8015728:	4616      	mov	r6, r2
 801572a:	b103      	cbz	r3, 801572e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801572c:	6038      	str	r0, [r7, #0]
 801572e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015730:	b314      	cbz	r4, 8015778 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8015732:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015736:	b1eb      	cbz	r3, 8015774 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015738:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801573c:	428d      	cmp	r5, r1
 801573e:	db19      	blt.n	8015774 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015740:	8923      	ldrh	r3, [r4, #8]
 8015742:	b289      	uxth	r1, r1
 8015744:	440b      	add	r3, r1
 8015746:	b21b      	sxth	r3, r3
 8015748:	429d      	cmp	r5, r3
 801574a:	da13      	bge.n	8015774 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801574c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015750:	4296      	cmp	r6, r2
 8015752:	db0f      	blt.n	8015774 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015754:	8963      	ldrh	r3, [r4, #10]
 8015756:	b292      	uxth	r2, r2
 8015758:	4413      	add	r3, r2
 801575a:	b21b      	sxth	r3, r3
 801575c:	429e      	cmp	r6, r3
 801575e:	da09      	bge.n	8015774 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015760:	6823      	ldr	r3, [r4, #0]
 8015762:	1ab2      	subs	r2, r6, r2
 8015764:	1a69      	subs	r1, r5, r1
 8015766:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 801576a:	b212      	sxth	r2, r2
 801576c:	463b      	mov	r3, r7
 801576e:	b209      	sxth	r1, r1
 8015770:	4620      	mov	r0, r4
 8015772:	47c0      	blx	r8
 8015774:	69a4      	ldr	r4, [r4, #24]
 8015776:	e7db      	b.n	8015730 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801577c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 801577c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015780:	4c6c      	ldr	r4, [pc, #432]	; (8015934 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 8015782:	b0a1      	sub	sp, #132	; 0x84
 8015784:	6824      	ldr	r4, [r4, #0]
 8015786:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8015788:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 801578c:	2400      	movs	r4, #0
 801578e:	802c      	strh	r4, [r5, #0]
 8015790:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8015792:	4606      	mov	r6, r0
 8015794:	802c      	strh	r4, [r5, #0]
 8015796:	601c      	str	r4, [r3, #0]
 8015798:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801579c:	9303      	str	r3, [sp, #12]
 801579e:	f7ff ffbd 	bl	801571c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80157a2:	f1b9 0f03 	cmp.w	r9, #3
 80157a6:	f340 80bf 	ble.w	8015928 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 80157aa:	4631      	mov	r1, r6
 80157ac:	a80c      	add	r0, sp, #48	; 0x30
 80157ae:	f003 fa2b 	bl	8018c08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80157b2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80157b6:	9306      	str	r3, [sp, #24]
 80157b8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80157bc:	9307      	str	r3, [sp, #28]
 80157be:	9b03      	ldr	r3, [sp, #12]
 80157c0:	f8d3 a000 	ldr.w	sl, [r3]
 80157c4:	f1ba 0f00 	cmp.w	sl, #0
 80157c8:	f000 80b1 	beq.w	801592e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 80157cc:	4651      	mov	r1, sl
 80157ce:	a810      	add	r0, sp, #64	; 0x40
 80157d0:	f003 fa1a 	bl	8018c08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80157d4:	2002      	movs	r0, #2
 80157d6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80157da:	9b01      	ldr	r3, [sp, #4]
 80157dc:	fb91 f1f0 	sdiv	r1, r1, r0
 80157e0:	9a06      	ldr	r2, [sp, #24]
 80157e2:	189d      	adds	r5, r3, r2
 80157e4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80157e8:	9a07      	ldr	r2, [sp, #28]
 80157ea:	4419      	add	r1, r3
 80157ec:	9b02      	ldr	r3, [sp, #8]
 80157ee:	1a6d      	subs	r5, r5, r1
 80157f0:	4413      	add	r3, r2
 80157f2:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80157f6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80157fa:	fb92 f2f0 	sdiv	r2, r2, r0
 80157fe:	440a      	add	r2, r1
 8015800:	1a9b      	subs	r3, r3, r2
 8015802:	435b      	muls	r3, r3
 8015804:	fb05 3505 	mla	r5, r5, r5, r3
 8015808:	4f4b      	ldr	r7, [pc, #300]	; (8015938 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 801580a:	ac10      	add	r4, sp, #64	; 0x40
 801580c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801580e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015810:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015814:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015818:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801581c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015820:	2303      	movs	r3, #3
 8015822:	f1b9 0f0c 	cmp.w	r9, #12
 8015826:	bfda      	itte	le
 8015828:	f109 32ff 	addle.w	r2, r9, #4294967295
 801582c:	fb92 f8f3 	sdivle	r8, r2, r3
 8015830:	4698      	movgt	r8, r3
 8015832:	2400      	movs	r4, #0
 8015834:	f8cd 9000 	str.w	r9, [sp]
 8015838:	1c63      	adds	r3, r4, #1
 801583a:	9308      	str	r3, [sp, #32]
 801583c:	9b00      	ldr	r3, [sp, #0]
 801583e:	f04f 0b00 	mov.w	fp, #0
 8015842:	fb93 f3f8 	sdiv	r3, r3, r8
 8015846:	f004 0401 	and.w	r4, r4, #1
 801584a:	aa10      	add	r2, sp, #64	; 0x40
 801584c:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8015850:	b29b      	uxth	r3, r3
 8015852:	3404      	adds	r4, #4
 8015854:	9304      	str	r3, [sp, #16]
 8015856:	9a04      	ldr	r2, [sp, #16]
 8015858:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801585c:	fb13 f302 	smulbb	r3, r3, r2
 8015860:	9a01      	ldr	r2, [sp, #4]
 8015862:	b29b      	uxth	r3, r3
 8015864:	1899      	adds	r1, r3, r2
 8015866:	9305      	str	r3, [sp, #20]
 8015868:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801586c:	b209      	sxth	r1, r1
 801586e:	4299      	cmp	r1, r3
 8015870:	db4d      	blt.n	801590e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8015872:	8932      	ldrh	r2, [r6, #8]
 8015874:	4413      	add	r3, r2
 8015876:	b21b      	sxth	r3, r3
 8015878:	4299      	cmp	r1, r3
 801587a:	da48      	bge.n	801590e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801587c:	9b04      	ldr	r3, [sp, #16]
 801587e:	6827      	ldr	r7, [r4, #0]
 8015880:	fb17 f703 	smulbb	r7, r7, r3
 8015884:	9b02      	ldr	r3, [sp, #8]
 8015886:	b2bf      	uxth	r7, r7
 8015888:	18fa      	adds	r2, r7, r3
 801588a:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801588e:	b212      	sxth	r2, r2
 8015890:	429a      	cmp	r2, r3
 8015892:	db3c      	blt.n	801590e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8015894:	8970      	ldrh	r0, [r6, #10]
 8015896:	4403      	add	r3, r0
 8015898:	b21b      	sxth	r3, r3
 801589a:	429a      	cmp	r2, r3
 801589c:	da37      	bge.n	801590e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801589e:	2300      	movs	r3, #0
 80158a0:	4630      	mov	r0, r6
 80158a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80158a4:	ab0b      	add	r3, sp, #44	; 0x2c
 80158a6:	f7ff ff39 	bl	801571c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80158aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80158ac:	b37a      	cbz	r2, 801590e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80158ae:	4552      	cmp	r2, sl
 80158b0:	d02d      	beq.n	801590e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80158b2:	4611      	mov	r1, r2
 80158b4:	a80e      	add	r0, sp, #56	; 0x38
 80158b6:	9209      	str	r2, [sp, #36]	; 0x24
 80158b8:	f003 f9a6 	bl	8018c08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80158bc:	f04f 0e02 	mov.w	lr, #2
 80158c0:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80158c4:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 80158c8:	fb91 f1fe 	sdiv	r1, r1, lr
 80158cc:	fb9c fcfe 	sdiv	ip, ip, lr
 80158d0:	9a06      	ldr	r2, [sp, #24]
 80158d2:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80158d6:	9b01      	ldr	r3, [sp, #4]
 80158d8:	4401      	add	r1, r0
 80158da:	4413      	add	r3, r2
 80158dc:	1a58      	subs	r0, r3, r1
 80158de:	9a07      	ldr	r2, [sp, #28]
 80158e0:	9b02      	ldr	r3, [sp, #8]
 80158e2:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80158e6:	4413      	add	r3, r2
 80158e8:	448c      	add	ip, r1
 80158ea:	eba3 030c 	sub.w	r3, r3, ip
 80158ee:	435b      	muls	r3, r3
 80158f0:	fb00 3300 	mla	r3, r0, r0, r3
 80158f4:	42ab      	cmp	r3, r5
 80158f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80158f8:	d208      	bcs.n	801590c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 80158fa:	461d      	mov	r5, r3
 80158fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80158fe:	9803      	ldr	r0, [sp, #12]
 8015900:	6001      	str	r1, [r0, #0]
 8015902:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8015904:	9805      	ldr	r0, [sp, #20]
 8015906:	8008      	strh	r0, [r1, #0]
 8015908:	992b      	ldr	r1, [sp, #172]	; 0xac
 801590a:	800f      	strh	r7, [r1, #0]
 801590c:	4692      	mov	sl, r2
 801590e:	f10b 0b01 	add.w	fp, fp, #1
 8015912:	f1bb 0f04 	cmp.w	fp, #4
 8015916:	f104 0408 	add.w	r4, r4, #8
 801591a:	d19c      	bne.n	8015856 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 801591c:	9b00      	ldr	r3, [sp, #0]
 801591e:	9c08      	ldr	r4, [sp, #32]
 8015920:	444b      	add	r3, r9
 8015922:	4544      	cmp	r4, r8
 8015924:	9300      	str	r3, [sp, #0]
 8015926:	d187      	bne.n	8015838 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 8015928:	b021      	add	sp, #132	; 0x84
 801592a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801592e:	f04f 35ff 	mov.w	r5, #4294967295
 8015932:	e769      	b.n	8015808 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8015934:	20198158 	.word	0x20198158
 8015938:	08029758 	.word	0x08029758

0801593c <_ZN8touchgfx4RectaNERKS0_>:
 801593c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015940:	f9b1 7000 	ldrsh.w	r7, [r1]
 8015944:	888c      	ldrh	r4, [r1, #4]
 8015946:	f9b0 9000 	ldrsh.w	r9, [r0]
 801594a:	443c      	add	r4, r7
 801594c:	b2a4      	uxth	r4, r4
 801594e:	fa0f f884 	sxth.w	r8, r4
 8015952:	45c1      	cmp	r9, r8
 8015954:	da2f      	bge.n	80159b6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015956:	8882      	ldrh	r2, [r0, #4]
 8015958:	444a      	add	r2, r9
 801595a:	b292      	uxth	r2, r2
 801595c:	fa0f fe82 	sxth.w	lr, r2
 8015960:	4577      	cmp	r7, lr
 8015962:	da28      	bge.n	80159b6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015964:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015968:	88cb      	ldrh	r3, [r1, #6]
 801596a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801596e:	442b      	add	r3, r5
 8015970:	b21b      	sxth	r3, r3
 8015972:	429e      	cmp	r6, r3
 8015974:	da1f      	bge.n	80159b6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015976:	88c3      	ldrh	r3, [r0, #6]
 8015978:	4433      	add	r3, r6
 801597a:	b29b      	uxth	r3, r3
 801597c:	fa0f fc83 	sxth.w	ip, r3
 8015980:	4565      	cmp	r5, ip
 8015982:	da18      	bge.n	80159b6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015984:	454f      	cmp	r7, r9
 8015986:	bfb8      	it	lt
 8015988:	464f      	movlt	r7, r9
 801598a:	42b5      	cmp	r5, r6
 801598c:	bfb8      	it	lt
 801598e:	4635      	movlt	r5, r6
 8015990:	45f0      	cmp	r8, lr
 8015992:	bfd8      	it	le
 8015994:	4622      	movle	r2, r4
 8015996:	1bd2      	subs	r2, r2, r7
 8015998:	8082      	strh	r2, [r0, #4]
 801599a:	884a      	ldrh	r2, [r1, #2]
 801599c:	88c9      	ldrh	r1, [r1, #6]
 801599e:	8007      	strh	r7, [r0, #0]
 80159a0:	440a      	add	r2, r1
 80159a2:	b292      	uxth	r2, r2
 80159a4:	b211      	sxth	r1, r2
 80159a6:	458c      	cmp	ip, r1
 80159a8:	bfa8      	it	ge
 80159aa:	4613      	movge	r3, r2
 80159ac:	1b5b      	subs	r3, r3, r5
 80159ae:	80c3      	strh	r3, [r0, #6]
 80159b0:	8045      	strh	r5, [r0, #2]
 80159b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80159b6:	2300      	movs	r3, #0
 80159b8:	8003      	strh	r3, [r0, #0]
 80159ba:	8043      	strh	r3, [r0, #2]
 80159bc:	8083      	strh	r3, [r0, #4]
 80159be:	80c3      	strh	r3, [r0, #6]
 80159c0:	e7f7      	b.n	80159b2 <_ZN8touchgfx4RectaNERKS0_+0x76>

080159c2 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80159c2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	dd06      	ble.n	80159d8 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80159ca:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80159ce:	2800      	cmp	r0, #0
 80159d0:	bfcc      	ite	gt
 80159d2:	2000      	movgt	r0, #0
 80159d4:	2001      	movle	r0, #1
 80159d6:	4770      	bx	lr
 80159d8:	2001      	movs	r0, #1
 80159da:	4770      	bx	lr

080159dc <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80159dc:	2300      	movs	r3, #0
 80159de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159e2:	4604      	mov	r4, r0
 80159e4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80159e6:	8003      	strh	r3, [r0, #0]
 80159e8:	8043      	strh	r3, [r0, #2]
 80159ea:	8083      	strh	r3, [r0, #4]
 80159ec:	80c3      	strh	r3, [r0, #6]
 80159ee:	2d00      	cmp	r5, #0
 80159f0:	d040      	beq.n	8015a74 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80159f2:	1d28      	adds	r0, r5, #4
 80159f4:	f7ff ffe5 	bl	80159c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80159f8:	b988      	cbnz	r0, 8015a1e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80159fa:	4620      	mov	r0, r4
 80159fc:	f7ff ffe1 	bl	80159c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015a00:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015a04:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015a08:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015a0c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015a10:	b138      	cbz	r0, 8015a22 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015a12:	8022      	strh	r2, [r4, #0]
 8015a14:	8063      	strh	r3, [r4, #2]
 8015a16:	f8a4 e004 	strh.w	lr, [r4, #4]
 8015a1a:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015a1e:	69ad      	ldr	r5, [r5, #24]
 8015a20:	e7e5      	b.n	80159ee <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015a22:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015a26:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015a2a:	4290      	cmp	r0, r2
 8015a2c:	4607      	mov	r7, r0
 8015a2e:	bfa8      	it	ge
 8015a30:	4617      	movge	r7, r2
 8015a32:	4299      	cmp	r1, r3
 8015a34:	460e      	mov	r6, r1
 8015a36:	bfa8      	it	ge
 8015a38:	461e      	movge	r6, r3
 8015a3a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015a3e:	4472      	add	r2, lr
 8015a40:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015a44:	4440      	add	r0, r8
 8015a46:	4471      	add	r1, lr
 8015a48:	4463      	add	r3, ip
 8015a4a:	b200      	sxth	r0, r0
 8015a4c:	b212      	sxth	r2, r2
 8015a4e:	b209      	sxth	r1, r1
 8015a50:	b21b      	sxth	r3, r3
 8015a52:	4290      	cmp	r0, r2
 8015a54:	bfac      	ite	ge
 8015a56:	ebc7 0200 	rsbge	r2, r7, r0
 8015a5a:	ebc7 0202 	rsblt	r2, r7, r2
 8015a5e:	4299      	cmp	r1, r3
 8015a60:	bfac      	ite	ge
 8015a62:	ebc6 0301 	rsbge	r3, r6, r1
 8015a66:	ebc6 0303 	rsblt	r3, r6, r3
 8015a6a:	8027      	strh	r7, [r4, #0]
 8015a6c:	8066      	strh	r6, [r4, #2]
 8015a6e:	80a2      	strh	r2, [r4, #4]
 8015a70:	80e3      	strh	r3, [r4, #6]
 8015a72:	e7d4      	b.n	8015a1e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015a74:	4620      	mov	r0, r4
 8015a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015a7a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015a7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015a7e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015a82:	b383      	cbz	r3, 8015ae6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015a84:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015a86:	b374      	cbz	r4, 8015ae6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015a88:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015a8c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015a90:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015a94:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015a98:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015a9c:	b303      	cbz	r3, 8015ae0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015a9e:	4668      	mov	r0, sp
 8015aa0:	1d21      	adds	r1, r4, #4
 8015aa2:	f8ad 5000 	strh.w	r5, [sp]
 8015aa6:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015aaa:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015aae:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015ab2:	f7ff ff43 	bl	801593c <_ZN8touchgfx4RectaNERKS0_>
 8015ab6:	4668      	mov	r0, sp
 8015ab8:	f7ff ff83 	bl	80159c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015abc:	b980      	cbnz	r0, 8015ae0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015abe:	f8bd 3000 	ldrh.w	r3, [sp]
 8015ac2:	88a2      	ldrh	r2, [r4, #4]
 8015ac4:	4669      	mov	r1, sp
 8015ac6:	1a9b      	subs	r3, r3, r2
 8015ac8:	f8ad 3000 	strh.w	r3, [sp]
 8015acc:	88e2      	ldrh	r2, [r4, #6]
 8015ace:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015ad2:	4620      	mov	r0, r4
 8015ad4:	1a9b      	subs	r3, r3, r2
 8015ad6:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015ada:	6823      	ldr	r3, [r4, #0]
 8015adc:	689b      	ldr	r3, [r3, #8]
 8015ade:	4798      	blx	r3
 8015ae0:	69a4      	ldr	r4, [r4, #24]
 8015ae2:	2c00      	cmp	r4, #0
 8015ae4:	d1d8      	bne.n	8015a98 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015ae6:	b002      	add	sp, #8
 8015ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015aec <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015aec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015aee:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015af2:	460d      	mov	r5, r1
 8015af4:	4616      	mov	r6, r2
 8015af6:	b323      	cbz	r3, 8015b42 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015af8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015afa:	b314      	cbz	r4, 8015b42 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015afc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015b00:	b1eb      	cbz	r3, 8015b3e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015b02:	466b      	mov	r3, sp
 8015b04:	6828      	ldr	r0, [r5, #0]
 8015b06:	6869      	ldr	r1, [r5, #4]
 8015b08:	c303      	stmia	r3!, {r0, r1}
 8015b0a:	4668      	mov	r0, sp
 8015b0c:	1d21      	adds	r1, r4, #4
 8015b0e:	f7ff ff15 	bl	801593c <_ZN8touchgfx4RectaNERKS0_>
 8015b12:	4668      	mov	r0, sp
 8015b14:	f7ff ff55 	bl	80159c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015b18:	b988      	cbnz	r0, 8015b3e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015b1a:	f8bd 3000 	ldrh.w	r3, [sp]
 8015b1e:	88a2      	ldrh	r2, [r4, #4]
 8015b20:	4669      	mov	r1, sp
 8015b22:	1a9b      	subs	r3, r3, r2
 8015b24:	f8ad 3000 	strh.w	r3, [sp]
 8015b28:	88e2      	ldrh	r2, [r4, #6]
 8015b2a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015b2e:	4620      	mov	r0, r4
 8015b30:	1a9b      	subs	r3, r3, r2
 8015b32:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015b36:	6823      	ldr	r3, [r4, #0]
 8015b38:	4632      	mov	r2, r6
 8015b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015b3c:	4798      	blx	r3
 8015b3e:	69a4      	ldr	r4, [r4, #24]
 8015b40:	e7db      	b.n	8015afa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015b42:	b002      	add	sp, #8
 8015b44:	bd70      	pop	{r4, r5, r6, pc}

08015b46 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015b46:	b513      	push	{r0, r1, r4, lr}
 8015b48:	6803      	ldr	r3, [r0, #0]
 8015b4a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8015b4e:	2300      	movs	r3, #0
 8015b50:	e9cd 3300 	strd	r3, r3, [sp]
 8015b54:	466b      	mov	r3, sp
 8015b56:	47a0      	blx	r4
 8015b58:	b002      	add	sp, #8
 8015b5a:	bd10      	pop	{r4, pc}

08015b5c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015b5c:	2301      	movs	r3, #1
 8015b5e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015b62:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015b66:	4770      	bx	lr

08015b68 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015b68:	2301      	movs	r3, #1
 8015b6a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015b6e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015b72:	4770      	bx	lr

08015b74 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015b74:	2201      	movs	r2, #1
 8015b76:	6843      	ldr	r3, [r0, #4]
 8015b78:	725a      	strb	r2, [r3, #9]
 8015b7a:	6840      	ldr	r0, [r0, #4]
 8015b7c:	6803      	ldr	r3, [r0, #0]
 8015b7e:	691b      	ldr	r3, [r3, #16]
 8015b80:	4718      	bx	r3

08015b82 <_ZN8touchgfx3HAL8flushDMAEv>:
 8015b82:	6840      	ldr	r0, [r0, #4]
 8015b84:	6803      	ldr	r3, [r0, #0]
 8015b86:	689b      	ldr	r3, [r3, #8]
 8015b88:	4718      	bx	r3

08015b8a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8015b8a:	b530      	push	{r4, r5, lr}
 8015b8c:	b08b      	sub	sp, #44	; 0x2c
 8015b8e:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8015b92:	6804      	ldr	r4, [r0, #0]
 8015b94:	9509      	str	r5, [sp, #36]	; 0x24
 8015b96:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8015b9a:	9508      	str	r5, [sp, #32]
 8015b9c:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8015ba0:	9507      	str	r5, [sp, #28]
 8015ba2:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8015ba6:	9506      	str	r5, [sp, #24]
 8015ba8:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8015bac:	9505      	str	r5, [sp, #20]
 8015bae:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8015bb2:	9504      	str	r5, [sp, #16]
 8015bb4:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8015bb8:	9503      	str	r5, [sp, #12]
 8015bba:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015bbe:	9502      	str	r5, [sp, #8]
 8015bc0:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8015bc4:	e9cd 3500 	strd	r3, r5, [sp]
 8015bc8:	4613      	mov	r3, r2
 8015bca:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8015bcc:	2200      	movs	r2, #0
 8015bce:	47a0      	blx	r4
 8015bd0:	b00b      	add	sp, #44	; 0x2c
 8015bd2:	bd30      	pop	{r4, r5, pc}

08015bd4 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015bd4:	4b04      	ldr	r3, [pc, #16]	; (8015be8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015bd6:	781b      	ldrb	r3, [r3, #0]
 8015bd8:	b123      	cbz	r3, 8015be4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015bda:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015bde:	f080 0001 	eor.w	r0, r0, #1
 8015be2:	4770      	bx	lr
 8015be4:	2001      	movs	r0, #1
 8015be6:	4770      	bx	lr
 8015be8:	20198156 	.word	0x20198156

08015bec <_ZN8touchgfx3HAL8endFrameEv>:
 8015bec:	b510      	push	{r4, lr}
 8015bee:	4604      	mov	r4, r0
 8015bf0:	6840      	ldr	r0, [r0, #4]
 8015bf2:	6803      	ldr	r3, [r0, #0]
 8015bf4:	689b      	ldr	r3, [r3, #8]
 8015bf6:	4798      	blx	r3
 8015bf8:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015bfc:	b113      	cbz	r3, 8015c04 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015bfe:	2301      	movs	r3, #1
 8015c00:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015c04:	bd10      	pop	{r4, pc}

08015c06 <_ZN8touchgfx3HAL10initializeEv>:
 8015c06:	b510      	push	{r4, lr}
 8015c08:	4604      	mov	r4, r0
 8015c0a:	f7ec fac5 	bl	8002198 <_ZN8touchgfx10OSWrappers10initializeEv>
 8015c0e:	f7ec f8f7 	bl	8001e00 <_ZN8touchgfx4GPIO4initEv>
 8015c12:	6860      	ldr	r0, [r4, #4]
 8015c14:	6803      	ldr	r3, [r0, #0]
 8015c16:	68db      	ldr	r3, [r3, #12]
 8015c18:	4798      	blx	r3
 8015c1a:	68e0      	ldr	r0, [r4, #12]
 8015c1c:	6803      	ldr	r3, [r0, #0]
 8015c1e:	689b      	ldr	r3, [r3, #8]
 8015c20:	4798      	blx	r3
 8015c22:	6823      	ldr	r3, [r4, #0]
 8015c24:	4620      	mov	r0, r4
 8015c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015c2c:	4718      	bx	r3

08015c2e <_ZN8touchgfx3HAL9taskEntryEv>:
 8015c2e:	4604      	mov	r4, r0
 8015c30:	b508      	push	{r3, lr}
 8015c32:	6803      	ldr	r3, [r0, #0]
 8015c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015c38:	4798      	blx	r3
 8015c3a:	6823      	ldr	r3, [r4, #0]
 8015c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015c3e:	4620      	mov	r0, r4
 8015c40:	4798      	blx	r3
 8015c42:	f7ec fb6f 	bl	8002324 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015c46:	6823      	ldr	r3, [r4, #0]
 8015c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c4a:	e7f8      	b.n	8015c3e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08015c4c <_ZN8touchgfx3HAL4tickEv>:
 8015c4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015c4e:	6803      	ldr	r3, [r0, #0]
 8015c50:	4604      	mov	r4, r0
 8015c52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015c56:	4798      	blx	r3
 8015c58:	4d59      	ldr	r5, [pc, #356]	; (8015dc0 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8015c5a:	2800      	cmp	r0, #0
 8015c5c:	f000 8095 	beq.w	8015d8a <_ZN8touchgfx3HAL4tickEv+0x13e>
 8015c60:	2600      	movs	r6, #0
 8015c62:	2001      	movs	r0, #1
 8015c64:	f7ec f8ce 	bl	8001e04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015c68:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015c6c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015c70:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015c74:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015c78:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015c7c:	b133      	cbz	r3, 8015c8c <_ZN8touchgfx3HAL4tickEv+0x40>
 8015c7e:	6823      	ldr	r3, [r4, #0]
 8015c80:	4620      	mov	r0, r4
 8015c82:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8015c86:	4798      	blx	r3
 8015c88:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015c8c:	2601      	movs	r6, #1
 8015c8e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015c92:	6862      	ldr	r2, [r4, #4]
 8015c94:	f083 0301 	eor.w	r3, r3, #1
 8015c98:	7253      	strb	r3, [r2, #9]
 8015c9a:	702e      	strb	r6, [r5, #0]
 8015c9c:	f001 fed4 	bl	8017a48 <_ZN8touchgfx11Application11getInstanceEv>
 8015ca0:	6803      	ldr	r3, [r0, #0]
 8015ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ca4:	4798      	blx	r3
 8015ca6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015caa:	b90b      	cbnz	r3, 8015cb0 <_ZN8touchgfx3HAL4tickEv+0x64>
 8015cac:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015cb0:	f001 feca 	bl	8017a48 <_ZN8touchgfx11Application11getInstanceEv>
 8015cb4:	6803      	ldr	r3, [r0, #0]
 8015cb6:	695b      	ldr	r3, [r3, #20]
 8015cb8:	4798      	blx	r3
 8015cba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015cbc:	6803      	ldr	r3, [r0, #0]
 8015cbe:	691b      	ldr	r3, [r3, #16]
 8015cc0:	4798      	blx	r3
 8015cc2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015cc6:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8015cca:	3b01      	subs	r3, #1
 8015ccc:	b2db      	uxtb	r3, r3
 8015cce:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015cd2:	b10a      	cbz	r2, 8015cd8 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d1eb      	bne.n	8015cb0 <_ZN8touchgfx3HAL4tickEv+0x64>
 8015cd8:	4a3a      	ldr	r2, [pc, #232]	; (8015dc4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015cda:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015cde:	7813      	ldrb	r3, [r2, #0]
 8015ce0:	3301      	adds	r3, #1
 8015ce2:	b25b      	sxtb	r3, r3
 8015ce4:	4299      	cmp	r1, r3
 8015ce6:	7013      	strb	r3, [r2, #0]
 8015ce8:	dc10      	bgt.n	8015d0c <_ZN8touchgfx3HAL4tickEv+0xc0>
 8015cea:	2300      	movs	r3, #0
 8015cec:	68e0      	ldr	r0, [r4, #12]
 8015cee:	7013      	strb	r3, [r2, #0]
 8015cf0:	6803      	ldr	r3, [r0, #0]
 8015cf2:	aa03      	add	r2, sp, #12
 8015cf4:	68db      	ldr	r3, [r3, #12]
 8015cf6:	a902      	add	r1, sp, #8
 8015cf8:	4798      	blx	r3
 8015cfa:	6823      	ldr	r3, [r4, #0]
 8015cfc:	2800      	cmp	r0, #0
 8015cfe:	d050      	beq.n	8015da2 <_ZN8touchgfx3HAL4tickEv+0x156>
 8015d00:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015d04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8015d08:	4620      	mov	r0, r4
 8015d0a:	4798      	blx	r3
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	6960      	ldr	r0, [r4, #20]
 8015d10:	f88d 3007 	strb.w	r3, [sp, #7]
 8015d14:	b158      	cbz	r0, 8015d2e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8015d16:	6803      	ldr	r3, [r0, #0]
 8015d18:	f10d 0107 	add.w	r1, sp, #7
 8015d1c:	68db      	ldr	r3, [r3, #12]
 8015d1e:	4798      	blx	r3
 8015d20:	b128      	cbz	r0, 8015d2e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8015d22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015d24:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015d28:	6803      	ldr	r3, [r0, #0]
 8015d2a:	68db      	ldr	r3, [r3, #12]
 8015d2c:	4798      	blx	r3
 8015d2e:	f104 001c 	add.w	r0, r4, #28
 8015d32:	f004 fc49 	bl	801a5c8 <_ZN8touchgfx8Gestures4tickEv>
 8015d36:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015d3a:	b30b      	cbz	r3, 8015d80 <_ZN8touchgfx3HAL4tickEv+0x134>
 8015d3c:	6920      	ldr	r0, [r4, #16]
 8015d3e:	6803      	ldr	r3, [r0, #0]
 8015d40:	691b      	ldr	r3, [r3, #16]
 8015d42:	4798      	blx	r3
 8015d44:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015d46:	4606      	mov	r6, r0
 8015d48:	b903      	cbnz	r3, 8015d4c <_ZN8touchgfx3HAL4tickEv+0x100>
 8015d4a:	6720      	str	r0, [r4, #112]	; 0x70
 8015d4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015d4e:	4a1e      	ldr	r2, [pc, #120]	; (8015dc8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015d50:	1af3      	subs	r3, r6, r3
 8015d52:	4293      	cmp	r3, r2
 8015d54:	d914      	bls.n	8015d80 <_ZN8touchgfx3HAL4tickEv+0x134>
 8015d56:	6920      	ldr	r0, [r4, #16]
 8015d58:	6803      	ldr	r3, [r0, #0]
 8015d5a:	699b      	ldr	r3, [r3, #24]
 8015d5c:	4798      	blx	r3
 8015d5e:	2264      	movs	r2, #100	; 0x64
 8015d60:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015d62:	1af3      	subs	r3, r6, r3
 8015d64:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d68:	fbb0 f0f3 	udiv	r0, r0, r3
 8015d6c:	2800      	cmp	r0, #0
 8015d6e:	dc1d      	bgt.n	8015dac <_ZN8touchgfx3HAL4tickEv+0x160>
 8015d70:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015d74:	6920      	ldr	r0, [r4, #16]
 8015d76:	2100      	movs	r1, #0
 8015d78:	6803      	ldr	r3, [r0, #0]
 8015d7a:	69db      	ldr	r3, [r3, #28]
 8015d7c:	4798      	blx	r3
 8015d7e:	6726      	str	r6, [r4, #112]	; 0x70
 8015d80:	f001 fe62 	bl	8017a48 <_ZN8touchgfx11Application11getInstanceEv>
 8015d84:	6803      	ldr	r3, [r0, #0]
 8015d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d88:	4798      	blx	r3
 8015d8a:	6823      	ldr	r3, [r4, #0]
 8015d8c:	4620      	mov	r0, r4
 8015d8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015d92:	4798      	blx	r3
 8015d94:	2001      	movs	r0, #1
 8015d96:	f7ec f851 	bl	8001e3c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	702b      	strb	r3, [r5, #0]
 8015d9e:	b004      	add	sp, #16
 8015da0:	bd70      	pop	{r4, r5, r6, pc}
 8015da2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8015da6:	4620      	mov	r0, r4
 8015da8:	4798      	blx	r3
 8015daa:	e7af      	b.n	8015d0c <_ZN8touchgfx3HAL4tickEv+0xc0>
 8015dac:	2863      	cmp	r0, #99	; 0x63
 8015dae:	bfcb      	itete	gt
 8015db0:	2300      	movgt	r3, #0
 8015db2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015db6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015dba:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015dbe:	e7d9      	b.n	8015d74 <_ZN8touchgfx3HAL4tickEv+0x128>
 8015dc0:	2019815c 	.word	0x2019815c
 8015dc4:	2019815d 	.word	0x2019815d
 8015dc8:	05f5e100 	.word	0x05f5e100

08015dcc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015dcc:	f7ec ba4c 	b.w	8002268 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015dd0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015dd0:	6581      	str	r1, [r0, #88]	; 0x58
 8015dd2:	301c      	adds	r0, #28
 8015dd4:	f004 bbf6 	b.w	801a5c4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015dd8 <_ZN8touchgfx3HAL5touchEll>:
 8015dd8:	b530      	push	{r4, r5, lr}
 8015dda:	4604      	mov	r4, r0
 8015ddc:	b087      	sub	sp, #28
 8015dde:	a804      	add	r0, sp, #16
 8015de0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015de4:	f001 fc30 	bl	8017648 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015de8:	9b04      	ldr	r3, [sp, #16]
 8015dea:	a906      	add	r1, sp, #24
 8015dec:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015df0:	9b05      	ldr	r3, [sp, #20]
 8015df2:	a803      	add	r0, sp, #12
 8015df4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015df8:	f001 fc78 	bl	80176ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015dfc:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015e00:	f104 001c 	add.w	r0, r4, #28
 8015e04:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015e08:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015e0c:	b189      	cbz	r1, 8015e32 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015e0e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015e12:	9300      	str	r3, [sp, #0]
 8015e14:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015e18:	4613      	mov	r3, r2
 8015e1a:	462a      	mov	r2, r5
 8015e1c:	f004 fbe2 	bl	801a5e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015e20:	b128      	cbz	r0, 8015e2e <_ZN8touchgfx3HAL5touchEll+0x56>
 8015e22:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015e26:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015e28:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015e2c:	6623      	str	r3, [r4, #96]	; 0x60
 8015e2e:	b007      	add	sp, #28
 8015e30:	bd30      	pop	{r4, r5, pc}
 8015e32:	f004 fc17 	bl	801a664 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015e36:	2301      	movs	r3, #1
 8015e38:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015e3c:	e7f1      	b.n	8015e22 <_ZN8touchgfx3HAL5touchEll+0x4a>

08015e3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015e3e:	b510      	push	{r4, lr}
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d046      	beq.n	8015ed2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015e44:	ea81 0002 	eor.w	r0, r1, r2
 8015e48:	07c4      	lsls	r4, r0, #31
 8015e4a:	d508      	bpl.n	8015e5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015e4c:	440b      	add	r3, r1
 8015e4e:	3a01      	subs	r2, #1
 8015e50:	428b      	cmp	r3, r1
 8015e52:	d93e      	bls.n	8015ed2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015e54:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015e58:	f801 0b01 	strb.w	r0, [r1], #1
 8015e5c:	e7f8      	b.n	8015e50 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015e5e:	07d0      	lsls	r0, r2, #31
 8015e60:	bf42      	ittt	mi
 8015e62:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015e66:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015e6a:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015e6e:	2b01      	cmp	r3, #1
 8015e70:	d911      	bls.n	8015e96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015e72:	ea81 0402 	eor.w	r4, r1, r2
 8015e76:	07a4      	lsls	r4, r4, #30
 8015e78:	4610      	mov	r0, r2
 8015e7a:	d022      	beq.n	8015ec2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8015e7c:	f023 0401 	bic.w	r4, r3, #1
 8015e80:	440c      	add	r4, r1
 8015e82:	428c      	cmp	r4, r1
 8015e84:	4602      	mov	r2, r0
 8015e86:	d904      	bls.n	8015e92 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8015e88:	8812      	ldrh	r2, [r2, #0]
 8015e8a:	3002      	adds	r0, #2
 8015e8c:	f821 2b02 	strh.w	r2, [r1], #2
 8015e90:	e7f7      	b.n	8015e82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8015e92:	f003 0301 	and.w	r3, r3, #1
 8015e96:	f023 0003 	bic.w	r0, r3, #3
 8015e9a:	4408      	add	r0, r1
 8015e9c:	4288      	cmp	r0, r1
 8015e9e:	4614      	mov	r4, r2
 8015ea0:	d904      	bls.n	8015eac <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8015ea2:	6824      	ldr	r4, [r4, #0]
 8015ea4:	3204      	adds	r2, #4
 8015ea6:	f841 4b04 	str.w	r4, [r1], #4
 8015eaa:	e7f7      	b.n	8015e9c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8015eac:	f003 0303 	and.w	r3, r3, #3
 8015eb0:	440b      	add	r3, r1
 8015eb2:	3a01      	subs	r2, #1
 8015eb4:	428b      	cmp	r3, r1
 8015eb6:	d90c      	bls.n	8015ed2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015eb8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015ebc:	f801 0b01 	strb.w	r0, [r1], #1
 8015ec0:	e7f8      	b.n	8015eb4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8015ec2:	0790      	lsls	r0, r2, #30
 8015ec4:	d0e7      	beq.n	8015e96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015ec6:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015eca:	3b02      	subs	r3, #2
 8015ecc:	f821 0b02 	strh.w	r0, [r1], #2
 8015ed0:	e7e1      	b.n	8015e96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015ed2:	2001      	movs	r0, #1
 8015ed4:	bd10      	pop	{r4, pc}

08015ed6 <_ZN8touchgfx3HAL7noTouchEv>:
 8015ed6:	b510      	push	{r4, lr}
 8015ed8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8015edc:	4604      	mov	r4, r0
 8015ede:	b153      	cbz	r3, 8015ef6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015ee0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8015ee4:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8015ee8:	2101      	movs	r1, #1
 8015eea:	301c      	adds	r0, #28
 8015eec:	f004 fbba 	bl	801a664 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015ef6:	bd10      	pop	{r4, pc}

08015ef8 <_ZN8touchgfx8Drawable5setXYEss>:
 8015ef8:	b570      	push	{r4, r5, r6, lr}
 8015efa:	4604      	mov	r4, r0
 8015efc:	4615      	mov	r5, r2
 8015efe:	6803      	ldr	r3, [r0, #0]
 8015f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f02:	4798      	blx	r3
 8015f04:	6823      	ldr	r3, [r4, #0]
 8015f06:	4629      	mov	r1, r5
 8015f08:	4620      	mov	r0, r4
 8015f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f10:	4718      	bx	r3
	...

08015f14 <_ZN8touchgfx3HAL3lcdEv>:
 8015f14:	4b04      	ldr	r3, [pc, #16]	; (8015f28 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015f1c:	b10a      	cbz	r2, 8015f22 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8015f1e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015f20:	b900      	cbnz	r0, 8015f24 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8015f22:	6898      	ldr	r0, [r3, #8]
 8015f24:	4770      	bx	lr
 8015f26:	bf00      	nop
 8015f28:	20198158 	.word	0x20198158

08015f2c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f30:	4604      	mov	r4, r0
 8015f32:	2000      	movs	r0, #0
 8015f34:	b085      	sub	sp, #20
 8015f36:	ad04      	add	r5, sp, #16
 8015f38:	f845 0d04 	str.w	r0, [r5, #-4]!
 8015f3c:	69a0      	ldr	r0, [r4, #24]
 8015f3e:	4699      	mov	r9, r3
 8015f40:	6806      	ldr	r6, [r0, #0]
 8015f42:	9501      	str	r5, [sp, #4]
 8015f44:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8015f48:	460f      	mov	r7, r1
 8015f4a:	9500      	str	r5, [sp, #0]
 8015f4c:	6835      	ldr	r5, [r6, #0]
 8015f4e:	4690      	mov	r8, r2
 8015f50:	47a8      	blx	r5
 8015f52:	4d10      	ldr	r5, [pc, #64]	; (8015f94 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8015f54:	4606      	mov	r6, r0
 8015f56:	f8a5 9000 	strh.w	r9, [r5]
 8015f5a:	f7ff ffdb 	bl	8015f14 <_ZN8touchgfx3HAL3lcdEv>
 8015f5e:	6803      	ldr	r3, [r0, #0]
 8015f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f62:	4798      	blx	r3
 8015f64:	b128      	cbz	r0, 8015f72 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8015f66:	2801      	cmp	r0, #1
 8015f68:	d00b      	beq.n	8015f82 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8015f6a:	4630      	mov	r0, r6
 8015f6c:	b005      	add	sp, #20
 8015f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f72:	882b      	ldrh	r3, [r5, #0]
 8015f74:	fb08 7203 	mla	r2, r8, r3, r7
 8015f78:	9b03      	ldr	r3, [sp, #12]
 8015f7a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015f7e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8015f80:	e7f3      	b.n	8015f6a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015f82:	882a      	ldrh	r2, [r5, #0]
 8015f84:	9b03      	ldr	r3, [sp, #12]
 8015f86:	fb08 7202 	mla	r2, r8, r2, r7
 8015f8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015f8e:	1a9a      	subs	r2, r3, r2
 8015f90:	63e2      	str	r2, [r4, #60]	; 0x3c
 8015f92:	e7ea      	b.n	8015f6a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015f94:	20198152 	.word	0x20198152

08015f98 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8015f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f9a:	b08b      	sub	sp, #44	; 0x2c
 8015f9c:	4617      	mov	r7, r2
 8015f9e:	4604      	mov	r4, r0
 8015fa0:	460e      	mov	r6, r1
 8015fa2:	461d      	mov	r5, r3
 8015fa4:	f7ff ffb6 	bl	8015f14 <_ZN8touchgfx3HAL3lcdEv>
 8015fa8:	6803      	ldr	r3, [r0, #0]
 8015faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fac:	4798      	blx	r3
 8015fae:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8015fb2:	9007      	str	r0, [sp, #28]
 8015fb4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015fb8:	4b0d      	ldr	r3, [pc, #52]	; (8015ff0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8015fba:	6822      	ldr	r2, [r4, #0]
 8015fbc:	881b      	ldrh	r3, [r3, #0]
 8015fbe:	4631      	mov	r1, r6
 8015fc0:	9306      	str	r3, [sp, #24]
 8015fc2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015fc6:	4620      	mov	r0, r4
 8015fc8:	9305      	str	r3, [sp, #20]
 8015fca:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015fce:	9304      	str	r3, [sp, #16]
 8015fd0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015fd4:	9303      	str	r3, [sp, #12]
 8015fd6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015fda:	9302      	str	r3, [sp, #8]
 8015fdc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015fe0:	e9cd 5300 	strd	r5, r3, [sp]
 8015fe4:	463b      	mov	r3, r7
 8015fe6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8015fe8:	2200      	movs	r2, #0
 8015fea:	47a8      	blx	r5
 8015fec:	b00b      	add	sp, #44	; 0x2c
 8015fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ff0:	20198152 	.word	0x20198152

08015ff4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8015ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ff8:	4698      	mov	r8, r3
 8015ffa:	6803      	ldr	r3, [r0, #0]
 8015ffc:	b08b      	sub	sp, #44	; 0x2c
 8015ffe:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8016000:	4b14      	ldr	r3, [pc, #80]	; (8016054 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8016002:	4617      	mov	r7, r2
 8016004:	f8b3 9000 	ldrh.w	r9, [r3]
 8016008:	460e      	mov	r6, r1
 801600a:	4604      	mov	r4, r0
 801600c:	f7ff ff82 	bl	8015f14 <_ZN8touchgfx3HAL3lcdEv>
 8016010:	6803      	ldr	r3, [r0, #0]
 8016012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016014:	4798      	blx	r3
 8016016:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801601a:	2200      	movs	r2, #0
 801601c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8016020:	2302      	movs	r3, #2
 8016022:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8016026:	2301      	movs	r3, #1
 8016028:	9305      	str	r3, [sp, #20]
 801602a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801602e:	4631      	mov	r1, r6
 8016030:	9304      	str	r3, [sp, #16]
 8016032:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016036:	4620      	mov	r0, r4
 8016038:	9303      	str	r3, [sp, #12]
 801603a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801603e:	9302      	str	r3, [sp, #8]
 8016040:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016044:	e9cd 8300 	strd	r8, r3, [sp]
 8016048:	463b      	mov	r3, r7
 801604a:	47a8      	blx	r5
 801604c:	b00b      	add	sp, #44	; 0x2c
 801604e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016052:	bf00      	nop
 8016054:	20198152 	.word	0x20198152

08016058 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8016058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801605c:	4698      	mov	r8, r3
 801605e:	6803      	ldr	r3, [r0, #0]
 8016060:	b087      	sub	sp, #28
 8016062:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8016064:	4b10      	ldr	r3, [pc, #64]	; (80160a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8016066:	460e      	mov	r6, r1
 8016068:	f8b3 9000 	ldrh.w	r9, [r3]
 801606c:	4617      	mov	r7, r2
 801606e:	4604      	mov	r4, r0
 8016070:	f7ff ff50 	bl	8015f14 <_ZN8touchgfx3HAL3lcdEv>
 8016074:	6803      	ldr	r3, [r0, #0]
 8016076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016078:	4798      	blx	r3
 801607a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801607e:	f8cd 900c 	str.w	r9, [sp, #12]
 8016082:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8016086:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801608a:	463a      	mov	r2, r7
 801608c:	9302      	str	r3, [sp, #8]
 801608e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016092:	4631      	mov	r1, r6
 8016094:	9301      	str	r3, [sp, #4]
 8016096:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801609a:	4620      	mov	r0, r4
 801609c:	9300      	str	r3, [sp, #0]
 801609e:	4643      	mov	r3, r8
 80160a0:	47a8      	blx	r5
 80160a2:	b007      	add	sp, #28
 80160a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160a8:	20198152 	.word	0x20198152

080160ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80160ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160b0:	4604      	mov	r4, r0
 80160b2:	b08f      	sub	sp, #60	; 0x3c
 80160b4:	4610      	mov	r0, r2
 80160b6:	460d      	mov	r5, r1
 80160b8:	4691      	mov	r9, r2
 80160ba:	461e      	mov	r6, r3
 80160bc:	f004 f878 	bl	801a1b0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80160c0:	2800      	cmp	r0, #0
 80160c2:	f000 809d 	beq.w	8016200 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80160c6:	6823      	ldr	r3, [r4, #0]
 80160c8:	4620      	mov	r0, r4
 80160ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160cc:	4798      	blx	r3
 80160ce:	6823      	ldr	r3, [r4, #0]
 80160d0:	f8df b190 	ldr.w	fp, [pc, #400]	; 8016264 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80160d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160d6:	4620      	mov	r0, r4
 80160d8:	4798      	blx	r3
 80160da:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8016268 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80160de:	f8bb 3000 	ldrh.w	r3, [fp]
 80160e2:	4f5d      	ldr	r7, [pc, #372]	; (8016258 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80160e4:	9301      	str	r3, [sp, #4]
 80160e6:	f8ba 3000 	ldrh.w	r3, [sl]
 80160ea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80160ee:	9302      	str	r3, [sp, #8]
 80160f0:	883b      	ldrh	r3, [r7, #0]
 80160f2:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80160f6:	9303      	str	r3, [sp, #12]
 80160f8:	4b58      	ldr	r3, [pc, #352]	; (801625c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80160fa:	4640      	mov	r0, r8
 80160fc:	881a      	ldrh	r2, [r3, #0]
 80160fe:	9305      	str	r3, [sp, #20]
 8016100:	9204      	str	r2, [sp, #16]
 8016102:	f004 f8e9 	bl	801a2d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016106:	8038      	strh	r0, [r7, #0]
 8016108:	4640      	mov	r0, r8
 801610a:	f004 f919 	bl	801a340 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801610e:	9b05      	ldr	r3, [sp, #20]
 8016110:	b280      	uxth	r0, r0
 8016112:	8018      	strh	r0, [r3, #0]
 8016114:	4b52      	ldr	r3, [pc, #328]	; (8016260 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8016116:	781b      	ldrb	r3, [r3, #0]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d174      	bne.n	8016206 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801611c:	883b      	ldrh	r3, [r7, #0]
 801611e:	f8aa 0000 	strh.w	r0, [sl]
 8016122:	f8ab 3000 	strh.w	r3, [fp]
 8016126:	4648      	mov	r0, r9
 8016128:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801612c:	f004 f840 	bl	801a1b0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016130:	2200      	movs	r2, #0
 8016132:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8016136:	4611      	mov	r1, r2
 8016138:	4628      	mov	r0, r5
 801613a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801613e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8016142:	f7ff fed9 	bl	8015ef8 <_ZN8touchgfx8Drawable5setXYEss>
 8016146:	2301      	movs	r3, #1
 8016148:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801614c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8016150:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016154:	2b00      	cmp	r3, #0
 8016156:	dd5c      	ble.n	8016212 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8016158:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801615c:	2b00      	cmp	r3, #0
 801615e:	dd58      	ble.n	8016212 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8016160:	462a      	mov	r2, r5
 8016162:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016166:	ab0a      	add	r3, sp, #40	; 0x28
 8016168:	6851      	ldr	r1, [r2, #4]
 801616a:	c303      	stmia	r3!, {r0, r1}
 801616c:	4631      	mov	r1, r6
 801616e:	a80a      	add	r0, sp, #40	; 0x28
 8016170:	f7ff fbe4 	bl	801593c <_ZN8touchgfx4RectaNERKS0_>
 8016174:	2100      	movs	r1, #0
 8016176:	4b38      	ldr	r3, [pc, #224]	; (8016258 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016178:	910c      	str	r1, [sp, #48]	; 0x30
 801617a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801617e:	4b37      	ldr	r3, [pc, #220]	; (801625c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016180:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8016184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016188:	aa0a      	add	r2, sp, #40	; 0x28
 801618a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801618e:	ab08      	add	r3, sp, #32
 8016190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016194:	e883 0003 	stmia.w	r3, {r0, r1}
 8016198:	4618      	mov	r0, r3
 801619a:	a90c      	add	r1, sp, #48	; 0x30
 801619c:	f7ff fbce 	bl	801593c <_ZN8touchgfx4RectaNERKS0_>
 80161a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d13c      	bne.n	8016220 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80161a6:	2000      	movs	r0, #0
 80161a8:	2600      	movs	r6, #0
 80161aa:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80161ae:	696b      	ldr	r3, [r5, #20]
 80161b0:	682a      	ldr	r2, [r5, #0]
 80161b2:	616e      	str	r6, [r5, #20]
 80161b4:	9305      	str	r3, [sp, #20]
 80161b6:	6892      	ldr	r2, [r2, #8]
 80161b8:	a908      	add	r1, sp, #32
 80161ba:	4628      	mov	r0, r5
 80161bc:	4790      	blx	r2
 80161be:	9b05      	ldr	r3, [sp, #20]
 80161c0:	4652      	mov	r2, sl
 80161c2:	616b      	str	r3, [r5, #20]
 80161c4:	4649      	mov	r1, r9
 80161c6:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80161ca:	4628      	mov	r0, r5
 80161cc:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80161d0:	f7ff fe92 	bl	8015ef8 <_ZN8touchgfx8Drawable5setXYEss>
 80161d4:	9a01      	ldr	r2, [sp, #4]
 80161d6:	4b23      	ldr	r3, [pc, #140]	; (8016264 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80161d8:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80161dc:	801a      	strh	r2, [r3, #0]
 80161de:	9a02      	ldr	r2, [sp, #8]
 80161e0:	4b21      	ldr	r3, [pc, #132]	; (8016268 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80161e2:	4620      	mov	r0, r4
 80161e4:	801a      	strh	r2, [r3, #0]
 80161e6:	9a03      	ldr	r2, [sp, #12]
 80161e8:	4b1b      	ldr	r3, [pc, #108]	; (8016258 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80161ea:	801a      	strh	r2, [r3, #0]
 80161ec:	4b1b      	ldr	r3, [pc, #108]	; (801625c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80161ee:	9a04      	ldr	r2, [sp, #16]
 80161f0:	801a      	strh	r2, [r3, #0]
 80161f2:	6823      	ldr	r3, [r4, #0]
 80161f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161f6:	4798      	blx	r3
 80161f8:	6823      	ldr	r3, [r4, #0]
 80161fa:	4620      	mov	r0, r4
 80161fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161fe:	4798      	blx	r3
 8016200:	b00f      	add	sp, #60	; 0x3c
 8016202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016206:	883b      	ldrh	r3, [r7, #0]
 8016208:	f8ab 0000 	strh.w	r0, [fp]
 801620c:	f8aa 3000 	strh.w	r3, [sl]
 8016210:	e789      	b.n	8016126 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8016212:	462a      	mov	r2, r5
 8016214:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016218:	ab0a      	add	r3, sp, #40	; 0x28
 801621a:	6851      	ldr	r1, [r2, #4]
 801621c:	c303      	stmia	r3!, {r0, r1}
 801621e:	e7a9      	b.n	8016174 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8016220:	a807      	add	r0, sp, #28
 8016222:	f004 f945 	bl	801a4b0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016226:	4606      	mov	r6, r0
 8016228:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801622a:	6803      	ldr	r3, [r0, #0]
 801622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801622e:	4798      	blx	r3
 8016230:	4286      	cmp	r6, r0
 8016232:	d1b8      	bne.n	80161a6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8016234:	f7ff fe6e 	bl	8015f14 <_ZN8touchgfx3HAL3lcdEv>
 8016238:	6803      	ldr	r3, [r0, #0]
 801623a:	4606      	mov	r6, r0
 801623c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801623e:	a807      	add	r0, sp, #28
 8016240:	9305      	str	r3, [sp, #20]
 8016242:	f004 f935 	bl	801a4b0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016246:	9b05      	ldr	r3, [sp, #20]
 8016248:	4601      	mov	r1, r0
 801624a:	4630      	mov	r0, r6
 801624c:	4798      	blx	r3
 801624e:	f080 0001 	eor.w	r0, r0, #1
 8016252:	b2c0      	uxtb	r0, r0
 8016254:	e7a8      	b.n	80161a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8016256:	bf00      	nop
 8016258:	2019814c 	.word	0x2019814c
 801625c:	2019814e 	.word	0x2019814e
 8016260:	20198150 	.word	0x20198150
 8016264:	20198152 	.word	0x20198152
 8016268:	20198154 	.word	0x20198154

0801626c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801626c:	b510      	push	{r4, lr}
 801626e:	4b07      	ldr	r3, [pc, #28]	; (801628c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8016270:	4604      	mov	r4, r0
 8016272:	781b      	ldrb	r3, [r3, #0]
 8016274:	b13b      	cbz	r3, 8016286 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016276:	6803      	ldr	r3, [r0, #0]
 8016278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801627a:	4798      	blx	r3
 801627c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801627e:	4283      	cmp	r3, r0
 8016280:	d101      	bne.n	8016286 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016282:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016284:	bd10      	pop	{r4, pc}
 8016286:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8016288:	e7fc      	b.n	8016284 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801628a:	bf00      	nop
 801628c:	20198156 	.word	0x20198156

08016290 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8016290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016294:	461d      	mov	r5, r3
 8016296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801629a:	2400      	movs	r4, #0
 801629c:	b08a      	sub	sp, #40	; 0x28
 801629e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80162a2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80162a6:	4690      	mov	r8, r2
 80162a8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80162ac:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80162b0:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80162b4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80162b8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80162bc:	4607      	mov	r7, r0
 80162be:	f8ad 301c 	strh.w	r3, [sp, #28]
 80162c2:	9404      	str	r4, [sp, #16]
 80162c4:	f88d 4020 	strb.w	r4, [sp, #32]
 80162c8:	f7ff ffd0 	bl	801626c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80162cc:	fb06 8505 	mla	r5, r6, r5, r8
 80162d0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80162d4:	6878      	ldr	r0, [r7, #4]
 80162d6:	9505      	str	r5, [sp, #20]
 80162d8:	f8ad 601e 	strh.w	r6, [sp, #30]
 80162dc:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80162e0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80162e4:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80162e8:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80162ec:	6803      	ldr	r3, [r0, #0]
 80162ee:	a901      	add	r1, sp, #4
 80162f0:	685b      	ldr	r3, [r3, #4]
 80162f2:	4798      	blx	r3
 80162f4:	b00a      	add	sp, #40	; 0x28
 80162f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080162fa <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80162fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80162fe:	2400      	movs	r4, #0
 8016300:	461d      	mov	r5, r3
 8016302:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016306:	4691      	mov	r9, r2
 8016308:	b08b      	sub	sp, #44	; 0x2c
 801630a:	4688      	mov	r8, r1
 801630c:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8016310:	4607      	mov	r7, r0
 8016312:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016316:	9404      	str	r4, [sp, #16]
 8016318:	f7ff ffa8 	bl	801626c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801631c:	fb06 9505 	mla	r5, r6, r5, r9
 8016320:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016324:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8016328:	f8ad 3018 	strh.w	r3, [sp, #24]
 801632c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016330:	6878      	ldr	r0, [r7, #4]
 8016332:	9505      	str	r5, [sp, #20]
 8016334:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016338:	f8ad 401c 	strh.w	r4, [sp, #28]
 801633c:	f8ad 601e 	strh.w	r6, [sp, #30]
 8016340:	f8cd 8010 	str.w	r8, [sp, #16]
 8016344:	f8ad 4020 	strh.w	r4, [sp, #32]
 8016348:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801634c:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8016350:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8016354:	6803      	ldr	r3, [r0, #0]
 8016356:	a901      	add	r1, sp, #4
 8016358:	685b      	ldr	r3, [r3, #4]
 801635a:	4798      	blx	r3
 801635c:	b00b      	add	sp, #44	; 0x2c
 801635e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08016364 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8016364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016368:	4698      	mov	r8, r3
 801636a:	2300      	movs	r3, #0
 801636c:	b08a      	sub	sp, #40	; 0x28
 801636e:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8016372:	4606      	mov	r6, r0
 8016374:	2d0b      	cmp	r5, #11
 8016376:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801637a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801637e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8016382:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8016386:	9304      	str	r3, [sp, #16]
 8016388:	d137      	bne.n	80163fa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801638a:	2380      	movs	r3, #128	; 0x80
 801638c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016390:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016394:	f88d 0020 	strb.w	r0, [sp, #32]
 8016398:	f8ad 3018 	strh.w	r3, [sp, #24]
 801639c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80163a0:	4630      	mov	r0, r6
 80163a2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80163a6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80163aa:	9203      	str	r2, [sp, #12]
 80163ac:	f8ad 301c 	strh.w	r3, [sp, #28]
 80163b0:	f7ff ff5c 	bl	801626c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80163b4:	2c0b      	cmp	r4, #11
 80163b6:	bf8c      	ite	hi
 80163b8:	2100      	movhi	r1, #0
 80163ba:	4b1b      	ldrls	r3, [pc, #108]	; (8016428 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80163bc:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80163c0:	bf98      	it	ls
 80163c2:	5d19      	ldrbls	r1, [r3, r4]
 80163c4:	fb02 8307 	mla	r3, r2, r7, r8
 80163c8:	10c9      	asrs	r1, r1, #3
 80163ca:	fb01 0003 	mla	r0, r1, r3, r0
 80163ce:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80163d2:	9005      	str	r0, [sp, #20]
 80163d4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80163d8:	2300      	movs	r3, #0
 80163da:	6870      	ldr	r0, [r6, #4]
 80163dc:	f8ad 701e 	strh.w	r7, [sp, #30]
 80163e0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80163e4:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80163e8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80163ec:	6803      	ldr	r3, [r0, #0]
 80163ee:	a901      	add	r1, sp, #4
 80163f0:	685b      	ldr	r3, [r3, #4]
 80163f2:	4798      	blx	r3
 80163f4:	b00a      	add	sp, #40	; 0x28
 80163f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163fa:	2d02      	cmp	r5, #2
 80163fc:	d109      	bne.n	8016412 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80163fe:	28ff      	cmp	r0, #255	; 0xff
 8016400:	d105      	bne.n	801640e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8016402:	f1bc 0f00 	cmp.w	ip, #0
 8016406:	bf14      	ite	ne
 8016408:	2340      	movne	r3, #64	; 0x40
 801640a:	2320      	moveq	r3, #32
 801640c:	e7be      	b.n	801638c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801640e:	2340      	movs	r3, #64	; 0x40
 8016410:	e7bc      	b.n	801638c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8016412:	28ff      	cmp	r0, #255	; 0xff
 8016414:	d105      	bne.n	8016422 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8016416:	f1bc 0f00 	cmp.w	ip, #0
 801641a:	bf14      	ite	ne
 801641c:	2304      	movne	r3, #4
 801641e:	2301      	moveq	r3, #1
 8016420:	e7b4      	b.n	801638c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8016422:	2304      	movs	r3, #4
 8016424:	e7b2      	b.n	801638c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8016426:	bf00      	nop
 8016428:	0802a9ac 	.word	0x0802a9ac

0801642c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801642c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016430:	b08b      	sub	sp, #44	; 0x2c
 8016432:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8016436:	461d      	mov	r5, r3
 8016438:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801643c:	bf14      	ite	ne
 801643e:	2308      	movne	r3, #8
 8016440:	2302      	moveq	r3, #2
 8016442:	2400      	movs	r4, #0
 8016444:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8016448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801644c:	4688      	mov	r8, r1
 801644e:	4693      	mov	fp, r2
 8016450:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8016454:	9404      	str	r4, [sp, #16]
 8016456:	4607      	mov	r7, r0
 8016458:	f7ff ff08 	bl	801626c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801645c:	2e0b      	cmp	r6, #11
 801645e:	bf98      	it	ls
 8016460:	4b15      	ldrls	r3, [pc, #84]	; (80164b8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8016462:	fb05 b50a 	mla	r5, r5, sl, fp
 8016466:	bf98      	it	ls
 8016468:	5d9c      	ldrbls	r4, [r3, r6]
 801646a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801646e:	10e4      	asrs	r4, r4, #3
 8016470:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016474:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016478:	fb04 0405 	mla	r4, r4, r5, r0
 801647c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016480:	2300      	movs	r3, #0
 8016482:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016486:	6878      	ldr	r0, [r7, #4]
 8016488:	9405      	str	r4, [sp, #20]
 801648a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801648e:	f8ad a01e 	strh.w	sl, [sp, #30]
 8016492:	f8cd 8010 	str.w	r8, [sp, #16]
 8016496:	f88d 9020 	strb.w	r9, [sp, #32]
 801649a:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 801649e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80164a2:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 80164a6:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80164aa:	6803      	ldr	r3, [r0, #0]
 80164ac:	a901      	add	r1, sp, #4
 80164ae:	685b      	ldr	r3, [r3, #4]
 80164b0:	4798      	blx	r3
 80164b2:	b00b      	add	sp, #44	; 0x2c
 80164b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164b8:	0802a9ac 	.word	0x0802a9ac

080164bc <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80164bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164c0:	461e      	mov	r6, r3
 80164c2:	4b0a      	ldr	r3, [pc, #40]	; (80164ec <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80164c4:	460f      	mov	r7, r1
 80164c6:	881d      	ldrh	r5, [r3, #0]
 80164c8:	4690      	mov	r8, r2
 80164ca:	f7ff fd23 	bl	8015f14 <_ZN8touchgfx3HAL3lcdEv>
 80164ce:	6803      	ldr	r3, [r0, #0]
 80164d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164d2:	4798      	blx	r3
 80164d4:	280b      	cmp	r0, #11
 80164d6:	bf8e      	itee	hi
 80164d8:	2400      	movhi	r4, #0
 80164da:	4b05      	ldrls	r3, [pc, #20]	; (80164f0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80164dc:	5c1c      	ldrbls	r4, [r3, r0]
 80164de:	fb08 7005 	mla	r0, r8, r5, r7
 80164e2:	10e4      	asrs	r4, r4, #3
 80164e4:	fb04 6000 	mla	r0, r4, r0, r6
 80164e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164ec:	20198152 	.word	0x20198152
 80164f0:	0802a9ac 	.word	0x0802a9ac

080164f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80164f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164f6:	2500      	movs	r5, #0
 80164f8:	b08b      	sub	sp, #44	; 0x2c
 80164fa:	461f      	mov	r7, r3
 80164fc:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016500:	4604      	mov	r4, r0
 8016502:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016506:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801650a:	4616      	mov	r6, r2
 801650c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016510:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016514:	9504      	str	r5, [sp, #16]
 8016516:	f8ad 301a 	strh.w	r3, [sp, #26]
 801651a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801651e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016522:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016526:	f88d 3020 	strb.w	r3, [sp, #32]
 801652a:	f7ff fe9f 	bl	801626c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801652e:	463a      	mov	r2, r7
 8016530:	4631      	mov	r1, r6
 8016532:	4603      	mov	r3, r0
 8016534:	4620      	mov	r0, r4
 8016536:	f7ff ffc1 	bl	80164bc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801653a:	4b0e      	ldr	r3, [pc, #56]	; (8016574 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 801653c:	9005      	str	r0, [sp, #20]
 801653e:	881b      	ldrh	r3, [r3, #0]
 8016540:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016544:	f7ff fce6 	bl	8015f14 <_ZN8touchgfx3HAL3lcdEv>
 8016548:	6803      	ldr	r3, [r0, #0]
 801654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801654c:	4798      	blx	r3
 801654e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016550:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8016554:	9304      	str	r3, [sp, #16]
 8016556:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801655a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801655e:	6860      	ldr	r0, [r4, #4]
 8016560:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8016564:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8016568:	6803      	ldr	r3, [r0, #0]
 801656a:	a901      	add	r1, sp, #4
 801656c:	685b      	ldr	r3, [r3, #4]
 801656e:	4798      	blx	r3
 8016570:	b00b      	add	sp, #44	; 0x2c
 8016572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016574:	20198152 	.word	0x20198152

08016578 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016578:	b5f0      	push	{r4, r5, r6, r7, lr}
 801657a:	b08d      	sub	sp, #52	; 0x34
 801657c:	466b      	mov	r3, sp
 801657e:	e883 0006 	stmia.w	r3, {r1, r2}
 8016582:	2300      	movs	r3, #0
 8016584:	2501      	movs	r5, #1
 8016586:	9306      	str	r3, [sp, #24]
 8016588:	6803      	ldr	r3, [r0, #0]
 801658a:	9503      	str	r5, [sp, #12]
 801658c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801658e:	4604      	mov	r4, r0
 8016590:	f8bd 6000 	ldrh.w	r6, [sp]
 8016594:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016598:	4798      	blx	r3
 801659a:	463a      	mov	r2, r7
 801659c:	4631      	mov	r1, r6
 801659e:	4603      	mov	r3, r0
 80165a0:	4620      	mov	r0, r4
 80165a2:	f7ff ff8b 	bl	80164bc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80165a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80165a8:	9004      	str	r0, [sp, #16]
 80165aa:	9307      	str	r3, [sp, #28]
 80165ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80165b0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80165b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80165b8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80165bc:	4b0e      	ldr	r3, [pc, #56]	; (80165f8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80165be:	881b      	ldrh	r3, [r3, #0]
 80165c0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80165c4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80165c8:	f7ff fca4 	bl	8015f14 <_ZN8touchgfx3HAL3lcdEv>
 80165cc:	6803      	ldr	r3, [r0, #0]
 80165ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165d0:	4798      	blx	r3
 80165d2:	23ff      	movs	r3, #255	; 0xff
 80165d4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80165d8:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80165dc:	6860      	ldr	r0, [r4, #4]
 80165de:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80165e2:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80165e6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80165ea:	6803      	ldr	r3, [r0, #0]
 80165ec:	a903      	add	r1, sp, #12
 80165ee:	685b      	ldr	r3, [r3, #4]
 80165f0:	4798      	blx	r3
 80165f2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80165f4:	b00d      	add	sp, #52	; 0x34
 80165f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165f8:	20198152 	.word	0x20198152

080165fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80165fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016600:	b08c      	sub	sp, #48	; 0x30
 8016602:	466d      	mov	r5, sp
 8016604:	461e      	mov	r6, r3
 8016606:	2300      	movs	r3, #0
 8016608:	e885 0006 	stmia.w	r5, {r1, r2}
 801660c:	2501      	movs	r5, #1
 801660e:	9306      	str	r3, [sp, #24]
 8016610:	6803      	ldr	r3, [r0, #0]
 8016612:	9503      	str	r5, [sp, #12]
 8016614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016616:	4604      	mov	r4, r0
 8016618:	f8bd 7000 	ldrh.w	r7, [sp]
 801661c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8016620:	4798      	blx	r3
 8016622:	4642      	mov	r2, r8
 8016624:	4639      	mov	r1, r7
 8016626:	4603      	mov	r3, r0
 8016628:	4620      	mov	r0, r4
 801662a:	f7ff ff47 	bl	80164bc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801662e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016632:	9004      	str	r0, [sp, #16]
 8016634:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016638:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801663c:	9607      	str	r6, [sp, #28]
 801663e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016642:	4b10      	ldr	r3, [pc, #64]	; (8016684 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8016644:	881b      	ldrh	r3, [r3, #0]
 8016646:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801664a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801664c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8016650:	f7ff fc60 	bl	8015f14 <_ZN8touchgfx3HAL3lcdEv>
 8016654:	6803      	ldr	r3, [r0, #0]
 8016656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016658:	4798      	blx	r3
 801665a:	23ff      	movs	r3, #255	; 0xff
 801665c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8016660:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8016664:	6860      	ldr	r0, [r4, #4]
 8016666:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801666a:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801666e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8016672:	6803      	ldr	r3, [r0, #0]
 8016674:	a903      	add	r1, sp, #12
 8016676:	685b      	ldr	r3, [r3, #4]
 8016678:	4798      	blx	r3
 801667a:	4630      	mov	r0, r6
 801667c:	b00c      	add	sp, #48	; 0x30
 801667e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016682:	bf00      	nop
 8016684:	20198152 	.word	0x20198152

08016688 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8016688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801668a:	b085      	sub	sp, #20
 801668c:	ac02      	add	r4, sp, #8
 801668e:	e884 0006 	stmia.w	r4, {r1, r2}
 8016692:	4605      	mov	r5, r0
 8016694:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8016698:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801669c:	f7ff fde6 	bl	801626c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80166a0:	463a      	mov	r2, r7
 80166a2:	4603      	mov	r3, r0
 80166a4:	4631      	mov	r1, r6
 80166a6:	4628      	mov	r0, r5
 80166a8:	f7ff ff08 	bl	80164bc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80166ac:	4a05      	ldr	r2, [pc, #20]	; (80166c4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80166ae:	682b      	ldr	r3, [r5, #0]
 80166b0:	8812      	ldrh	r2, [r2, #0]
 80166b2:	9200      	str	r2, [sp, #0]
 80166b4:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80166b6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80166ba:	4603      	mov	r3, r0
 80166bc:	4628      	mov	r0, r5
 80166be:	47b0      	blx	r6
 80166c0:	b005      	add	sp, #20
 80166c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166c4:	20198152 	.word	0x20198152

080166c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80166c8:	b570      	push	{r4, r5, r6, lr}
 80166ca:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80166ce:	4604      	mov	r4, r0
 80166d0:	b19b      	cbz	r3, 80166fa <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80166d2:	2002      	movs	r0, #2
 80166d4:	f7eb fbce 	bl	8001e74 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80166d8:	2300      	movs	r3, #0
 80166da:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80166de:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80166e2:	6823      	ldr	r3, [r4, #0]
 80166e4:	4620      	mov	r0, r4
 80166e6:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 80166ea:	f7ff fdbf 	bl	801626c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80166ee:	462b      	mov	r3, r5
 80166f0:	4601      	mov	r1, r0
 80166f2:	4620      	mov	r0, r4
 80166f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80166f8:	4718      	bx	r3
 80166fa:	bd70      	pop	{r4, r5, r6, pc}

080166fc <_ZN8touchgfx3HAL12setMCUActiveEb>:
 80166fc:	b570      	push	{r4, r5, r6, lr}
 80166fe:	4605      	mov	r5, r0
 8016700:	460c      	mov	r4, r1
 8016702:	2003      	movs	r0, #3
 8016704:	b149      	cbz	r1, 801671a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8016706:	f7eb fb7d 	bl	8001e04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801670a:	6928      	ldr	r0, [r5, #16]
 801670c:	b168      	cbz	r0, 801672a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801670e:	2101      	movs	r1, #1
 8016710:	6803      	ldr	r3, [r0, #0]
 8016712:	695b      	ldr	r3, [r3, #20]
 8016714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016718:	4718      	bx	r3
 801671a:	f7eb fb8f 	bl	8001e3c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801671e:	6928      	ldr	r0, [r5, #16]
 8016720:	b118      	cbz	r0, 801672a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8016722:	6803      	ldr	r3, [r0, #0]
 8016724:	4621      	mov	r1, r4
 8016726:	695b      	ldr	r3, [r3, #20]
 8016728:	e7f4      	b.n	8016714 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801672a:	bd70      	pop	{r4, r5, r6, pc}

0801672c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801672c:	b538      	push	{r3, r4, r5, lr}
 801672e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8016732:	4604      	mov	r4, r0
 8016734:	428b      	cmp	r3, r1
 8016736:	460d      	mov	r5, r1
 8016738:	d006      	beq.n	8016748 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801673a:	6803      	ldr	r3, [r0, #0]
 801673c:	b929      	cbnz	r1, 801674a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801673e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8016742:	4798      	blx	r3
 8016744:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8016748:	bd38      	pop	{r3, r4, r5, pc}
 801674a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801674e:	e7f8      	b.n	8016742 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08016750 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8016750:	b510      	push	{r4, lr}
 8016752:	4b0d      	ldr	r3, [pc, #52]	; (8016788 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8016754:	4604      	mov	r4, r0
 8016756:	781b      	ldrb	r3, [r3, #0]
 8016758:	b95b      	cbnz	r3, 8016772 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801675a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801675e:	2b02      	cmp	r3, #2
 8016760:	d007      	beq.n	8016772 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016762:	6840      	ldr	r0, [r0, #4]
 8016764:	f000 f914 	bl	8016990 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016768:	b118      	cbz	r0, 8016772 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801676a:	6862      	ldr	r2, [r4, #4]
 801676c:	7a53      	ldrb	r3, [r2, #9]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d0fc      	beq.n	801676c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016772:	f7eb fd63 	bl	800223c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016776:	4620      	mov	r0, r4
 8016778:	2100      	movs	r1, #0
 801677a:	f7ff ffd7 	bl	801672c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801677e:	4620      	mov	r0, r4
 8016780:	f7ff fd74 	bl	801626c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016784:	bd10      	pop	{r4, pc}
 8016786:	bf00      	nop
 8016788:	20198156 	.word	0x20198156

0801678c <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801678c:	2000      	movs	r0, #0
 801678e:	4770      	bx	lr

08016790 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016790:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016794:	1a13      	subs	r3, r2, r0
 8016796:	4258      	negs	r0, r3
 8016798:	4158      	adcs	r0, r3
 801679a:	4770      	bx	lr

0801679c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801679c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80167a0:	1a9b      	subs	r3, r3, r2
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	bfdc      	itt	le
 80167a6:	6882      	ldrle	r2, [r0, #8]
 80167a8:	189b      	addle	r3, r3, r2
 80167aa:	2b01      	cmp	r3, #1
 80167ac:	bfcc      	ite	gt
 80167ae:	2000      	movgt	r0, #0
 80167b0:	2001      	movle	r0, #1
 80167b2:	4770      	bx	lr

080167b4 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80167b4:	6902      	ldr	r2, [r0, #16]
 80167b6:	6843      	ldr	r3, [r0, #4]
 80167b8:	2024      	movs	r0, #36	; 0x24
 80167ba:	fb00 3002 	mla	r0, r0, r2, r3
 80167be:	4770      	bx	lr

080167c0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80167c0:	6803      	ldr	r3, [r0, #0]
 80167c2:	691b      	ldr	r3, [r3, #16]
 80167c4:	4718      	bx	r3

080167c6 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80167c6:	2301      	movs	r3, #1
 80167c8:	b570      	push	{r4, r5, r6, lr}
 80167ca:	7203      	strb	r3, [r0, #8]
 80167cc:	4604      	mov	r4, r0
 80167ce:	6840      	ldr	r0, [r0, #4]
 80167d0:	6803      	ldr	r3, [r0, #0]
 80167d2:	699b      	ldr	r3, [r3, #24]
 80167d4:	4798      	blx	r3
 80167d6:	6803      	ldr	r3, [r0, #0]
 80167d8:	4605      	mov	r5, r0
 80167da:	2b40      	cmp	r3, #64	; 0x40
 80167dc:	d00c      	beq.n	80167f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80167de:	d810      	bhi.n	8016802 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80167e0:	2b04      	cmp	r3, #4
 80167e2:	d01d      	beq.n	8016820 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80167e4:	d804      	bhi.n	80167f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80167e6:	2b01      	cmp	r3, #1
 80167e8:	d006      	beq.n	80167f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80167ea:	2b02      	cmp	r3, #2
 80167ec:	d02c      	beq.n	8016848 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80167ee:	bd70      	pop	{r4, r5, r6, pc}
 80167f0:	2b08      	cmp	r3, #8
 80167f2:	d01d      	beq.n	8016830 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80167f4:	2b20      	cmp	r3, #32
 80167f6:	d1fa      	bne.n	80167ee <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80167f8:	6823      	ldr	r3, [r4, #0]
 80167fa:	4620      	mov	r0, r4
 80167fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80167fe:	4798      	blx	r3
 8016800:	e013      	b.n	801682a <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016806:	d0f7      	beq.n	80167f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016808:	d804      	bhi.n	8016814 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801680a:	2b80      	cmp	r3, #128	; 0x80
 801680c:	d0f4      	beq.n	80167f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801680e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016812:	e7f0      	b.n	80167f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8016814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016818:	d0ee      	beq.n	80167f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801681a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801681e:	e7e5      	b.n	80167ec <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8016820:	6823      	ldr	r3, [r4, #0]
 8016822:	7f01      	ldrb	r1, [r0, #28]
 8016824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016826:	4620      	mov	r0, r4
 8016828:	4798      	blx	r3
 801682a:	6823      	ldr	r3, [r4, #0]
 801682c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801682e:	e006      	b.n	801683e <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016830:	6823      	ldr	r3, [r4, #0]
 8016832:	7f01      	ldrb	r1, [r0, #28]
 8016834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016836:	4620      	mov	r0, r4
 8016838:	4798      	blx	r3
 801683a:	6823      	ldr	r3, [r4, #0]
 801683c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801683e:	4629      	mov	r1, r5
 8016840:	4620      	mov	r0, r4
 8016842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016846:	4718      	bx	r3
 8016848:	6823      	ldr	r3, [r4, #0]
 801684a:	4620      	mov	r0, r4
 801684c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801684e:	4798      	blx	r3
 8016850:	e7f3      	b.n	801683a <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08016852 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016852:	4770      	bx	lr

08016854 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016854:	4770      	bx	lr

08016856 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8016856:	4770      	bx	lr

08016858 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016858:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801685c:	1ad2      	subs	r2, r2, r3
 801685e:	2a00      	cmp	r2, #0
 8016860:	b510      	push	{r4, lr}
 8016862:	bfdc      	itt	le
 8016864:	6884      	ldrle	r4, [r0, #8]
 8016866:	1912      	addle	r2, r2, r4
 8016868:	2a01      	cmp	r2, #1
 801686a:	dd16      	ble.n	801689a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801686c:	2424      	movs	r4, #36	; 0x24
 801686e:	6842      	ldr	r2, [r0, #4]
 8016870:	fb04 2303 	mla	r3, r4, r3, r2
 8016874:	f101 0220 	add.w	r2, r1, #32
 8016878:	f851 4b04 	ldr.w	r4, [r1], #4
 801687c:	4291      	cmp	r1, r2
 801687e:	f843 4b04 	str.w	r4, [r3], #4
 8016882:	d1f9      	bne.n	8016878 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8016884:	780a      	ldrb	r2, [r1, #0]
 8016886:	701a      	strb	r2, [r3, #0]
 8016888:	68c3      	ldr	r3, [r0, #12]
 801688a:	6882      	ldr	r2, [r0, #8]
 801688c:	3301      	adds	r3, #1
 801688e:	429a      	cmp	r2, r3
 8016890:	bfd8      	it	le
 8016892:	1a9b      	suble	r3, r3, r2
 8016894:	f3bf 8f5b 	dmb	ish
 8016898:	60c3      	str	r3, [r0, #12]
 801689a:	bd10      	pop	{r4, pc}

0801689c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801689c:	6903      	ldr	r3, [r0, #16]
 801689e:	6882      	ldr	r2, [r0, #8]
 80168a0:	3301      	adds	r3, #1
 80168a2:	429a      	cmp	r2, r3
 80168a4:	bfd8      	it	le
 80168a6:	1a9b      	suble	r3, r3, r2
 80168a8:	f3bf 8f5b 	dmb	ish
 80168ac:	6103      	str	r3, [r0, #16]
 80168ae:	4770      	bx	lr

080168b0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80168b0:	b570      	push	{r4, r5, r6, lr}
 80168b2:	4604      	mov	r4, r0
 80168b4:	460e      	mov	r6, r1
 80168b6:	6860      	ldr	r0, [r4, #4]
 80168b8:	6803      	ldr	r3, [r0, #0]
 80168ba:	685b      	ldr	r3, [r3, #4]
 80168bc:	4798      	blx	r3
 80168be:	2800      	cmp	r0, #0
 80168c0:	d1f9      	bne.n	80168b6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80168c2:	4d0d      	ldr	r5, [pc, #52]	; (80168f8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80168c4:	6828      	ldr	r0, [r5, #0]
 80168c6:	6803      	ldr	r3, [r0, #0]
 80168c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80168ca:	4798      	blx	r3
 80168cc:	f7eb fce2 	bl	8002294 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80168d0:	6828      	ldr	r0, [r5, #0]
 80168d2:	2101      	movs	r1, #1
 80168d4:	f7ff ff2a 	bl	801672c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80168d8:	6860      	ldr	r0, [r4, #4]
 80168da:	4631      	mov	r1, r6
 80168dc:	6803      	ldr	r3, [r0, #0]
 80168de:	689b      	ldr	r3, [r3, #8]
 80168e0:	4798      	blx	r3
 80168e2:	6823      	ldr	r3, [r4, #0]
 80168e4:	4620      	mov	r0, r4
 80168e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168e8:	4798      	blx	r3
 80168ea:	6828      	ldr	r0, [r5, #0]
 80168ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80168f0:	6803      	ldr	r3, [r0, #0]
 80168f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80168f4:	4718      	bx	r3
 80168f6:	bf00      	nop
 80168f8:	20198158 	.word	0x20198158

080168fc <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80168fc:	b508      	push	{r3, lr}
 80168fe:	f7eb fc9d 	bl	800223c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016902:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016906:	f7eb bcaf 	b.w	8002268 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801690a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801690a:	b510      	push	{r4, lr}
 801690c:	4604      	mov	r4, r0
 801690e:	2114      	movs	r1, #20
 8016910:	f011 fbb5 	bl	802807e <_ZdlPvj>
 8016914:	4620      	mov	r0, r4
 8016916:	bd10      	pop	{r4, pc}

08016918 <_ZN8touchgfx13DMA_Interface5startEv>:
 8016918:	b510      	push	{r4, lr}
 801691a:	4604      	mov	r4, r0
 801691c:	6840      	ldr	r0, [r0, #4]
 801691e:	6803      	ldr	r3, [r0, #0]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	4798      	blx	r3
 8016924:	b948      	cbnz	r0, 801693a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016926:	7a63      	ldrb	r3, [r4, #9]
 8016928:	b13b      	cbz	r3, 801693a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801692a:	7a23      	ldrb	r3, [r4, #8]
 801692c:	b92b      	cbnz	r3, 801693a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801692e:	6823      	ldr	r3, [r4, #0]
 8016930:	4620      	mov	r0, r4
 8016932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016938:	4718      	bx	r3
 801693a:	bd10      	pop	{r4, pc}

0801693c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801693c:	b570      	push	{r4, r5, r6, lr}
 801693e:	4604      	mov	r4, r0
 8016940:	6840      	ldr	r0, [r0, #4]
 8016942:	6803      	ldr	r3, [r0, #0]
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	4798      	blx	r3
 8016948:	4605      	mov	r5, r0
 801694a:	b930      	cbnz	r0, 801695a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801694c:	7a23      	ldrb	r3, [r4, #8]
 801694e:	b123      	cbz	r3, 801695a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016950:	6860      	ldr	r0, [r4, #4]
 8016952:	6803      	ldr	r3, [r0, #0]
 8016954:	695b      	ldr	r3, [r3, #20]
 8016956:	4798      	blx	r3
 8016958:	7225      	strb	r5, [r4, #8]
 801695a:	6860      	ldr	r0, [r4, #4]
 801695c:	6803      	ldr	r3, [r0, #0]
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	4798      	blx	r3
 8016962:	b928      	cbnz	r0, 8016970 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016964:	6823      	ldr	r3, [r4, #0]
 8016966:	4620      	mov	r0, r4
 8016968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801696e:	4718      	bx	r3
 8016970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016974:	f7eb bc94 	b.w	80022a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016978 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016978:	6082      	str	r2, [r0, #8]
 801697a:	2200      	movs	r2, #0
 801697c:	b510      	push	{r4, lr}
 801697e:	4c03      	ldr	r4, [pc, #12]	; (801698c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016980:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016984:	e9c0 4100 	strd	r4, r1, [r0]
 8016988:	bd10      	pop	{r4, pc}
 801698a:	bf00      	nop
 801698c:	0802a9c0 	.word	0x0802a9c0

08016990 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016990:	6840      	ldr	r0, [r0, #4]
 8016992:	6803      	ldr	r3, [r0, #0]
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	4718      	bx	r3

08016998 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8016998:	2300      	movs	r3, #0
 801699a:	8083      	strh	r3, [r0, #4]
 801699c:	80c3      	strh	r3, [r0, #6]
 801699e:	8003      	strh	r3, [r0, #0]
 80169a0:	8043      	strh	r3, [r0, #2]
 80169a2:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80169a6:	2bff      	cmp	r3, #255	; 0xff
 80169a8:	bf01      	itttt	eq
 80169aa:	890b      	ldrheq	r3, [r1, #8]
 80169ac:	8083      	strheq	r3, [r0, #4]
 80169ae:	894b      	ldrheq	r3, [r1, #10]
 80169b0:	80c3      	strheq	r3, [r0, #6]
 80169b2:	4770      	bx	lr

080169b4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80169b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80169b6:	4604      	mov	r4, r0
 80169b8:	466b      	mov	r3, sp
 80169ba:	6808      	ldr	r0, [r1, #0]
 80169bc:	6849      	ldr	r1, [r1, #4]
 80169be:	c303      	stmia	r3!, {r0, r1}
 80169c0:	6823      	ldr	r3, [r4, #0]
 80169c2:	4669      	mov	r1, sp
 80169c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169c6:	4620      	mov	r0, r4
 80169c8:	4798      	blx	r3
 80169ca:	4b08      	ldr	r3, [pc, #32]	; (80169ec <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80169d2:	b10a      	cbz	r2, 80169d8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80169d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80169d6:	b900      	cbnz	r0, 80169da <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80169d8:	6898      	ldr	r0, [r3, #8]
 80169da:	6803      	ldr	r3, [r0, #0]
 80169dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80169de:	6a1d      	ldr	r5, [r3, #32]
 80169e0:	4669      	mov	r1, sp
 80169e2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80169e6:	47a8      	blx	r5
 80169e8:	b003      	add	sp, #12
 80169ea:	bd30      	pop	{r4, r5, pc}
 80169ec:	20198158 	.word	0x20198158

080169f0 <_ZN8touchgfx3BoxD1Ev>:
 80169f0:	4770      	bx	lr

080169f2 <_ZN8touchgfx3BoxD0Ev>:
 80169f2:	b510      	push	{r4, lr}
 80169f4:	4604      	mov	r4, r0
 80169f6:	212c      	movs	r1, #44	; 0x2c
 80169f8:	f011 fb41 	bl	802807e <_ZdlPvj>
 80169fc:	4620      	mov	r0, r4
 80169fe:	bd10      	pop	{r4, pc}

08016a00 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8016a00:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8016a04:	b12a      	cbz	r2, 8016a12 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8016a06:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8016a0a:	b112      	cbz	r2, 8016a12 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8016a0c:	6803      	ldr	r3, [r0, #0]
 8016a0e:	695b      	ldr	r3, [r3, #20]
 8016a10:	4718      	bx	r3
 8016a12:	4770      	bx	lr

08016a14 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8016a14:	b510      	push	{r4, lr}
 8016a16:	6803      	ldr	r3, [r0, #0]
 8016a18:	460c      	mov	r4, r1
 8016a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a1c:	4798      	blx	r3
 8016a1e:	1b03      	subs	r3, r0, r4
 8016a20:	4258      	negs	r0, r3
 8016a22:	4158      	adcs	r0, r3
 8016a24:	bd10      	pop	{r4, pc}
	...

08016a28 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8016a28:	4b01      	ldr	r3, [pc, #4]	; (8016a30 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8016a2a:	6019      	str	r1, [r3, #0]
 8016a2c:	4770      	bx	lr
 8016a2e:	bf00      	nop
 8016a30:	20198160 	.word	0x20198160

08016a34 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a38:	4696      	mov	lr, r2
 8016a3a:	4614      	mov	r4, r2
 8016a3c:	4605      	mov	r5, r0
 8016a3e:	460e      	mov	r6, r1
 8016a40:	461f      	mov	r7, r3
 8016a42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a46:	b097      	sub	sp, #92	; 0x5c
 8016a48:	f10d 0c1c 	add.w	ip, sp, #28
 8016a4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a50:	f8de 3000 	ldr.w	r3, [lr]
 8016a54:	f104 0e14 	add.w	lr, r4, #20
 8016a58:	f8cc 3000 	str.w	r3, [ip]
 8016a5c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016a60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a68:	f8de 3000 	ldr.w	r3, [lr]
 8016a6c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8016a70:	f8cc 3000 	str.w	r3, [ip]
 8016a74:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016a78:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a80:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8016a84:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8016a88:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8016a8c:	f8de 3000 	ldr.w	r3, [lr]
 8016a90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016a92:	f8cc 3000 	str.w	r3, [ip]
 8016a96:	9201      	str	r2, [sp, #4]
 8016a98:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016a9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016a9e:	682b      	ldr	r3, [r5, #0]
 8016aa0:	9200      	str	r2, [sp, #0]
 8016aa2:	f8cd 8008 	str.w	r8, [sp, #8]
 8016aa6:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8016aaa:	aa07      	add	r2, sp, #28
 8016aac:	463b      	mov	r3, r7
 8016aae:	4631      	mov	r1, r6
 8016ab0:	4628      	mov	r0, r5
 8016ab2:	47d8      	blx	fp
 8016ab4:	46a6      	mov	lr, r4
 8016ab6:	f10d 0c1c 	add.w	ip, sp, #28
 8016aba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016abe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ac2:	f8de 3000 	ldr.w	r3, [lr]
 8016ac6:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8016aca:	f8cc 3000 	str.w	r3, [ip]
 8016ace:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016ad2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016ad6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ada:	f8de 3000 	ldr.w	r3, [lr]
 8016ade:	343c      	adds	r4, #60	; 0x3c
 8016ae0:	f8cc 3000 	str.w	r3, [ip]
 8016ae4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016aea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016aee:	6823      	ldr	r3, [r4, #0]
 8016af0:	4631      	mov	r1, r6
 8016af2:	f8cc 3000 	str.w	r3, [ip]
 8016af6:	682b      	ldr	r3, [r5, #0]
 8016af8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016afc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016afe:	f8cd 8008 	str.w	r8, [sp, #8]
 8016b02:	9201      	str	r2, [sp, #4]
 8016b04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016b06:	4628      	mov	r0, r5
 8016b08:	9200      	str	r2, [sp, #0]
 8016b0a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8016b0c:	aa07      	add	r2, sp, #28
 8016b0e:	463b      	mov	r3, r7
 8016b10:	47a0      	blx	r4
 8016b12:	b017      	add	sp, #92	; 0x5c
 8016b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016b18 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8016b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b1c:	b08d      	sub	sp, #52	; 0x34
 8016b1e:	4688      	mov	r8, r1
 8016b20:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016b22:	f8d3 c000 	ldr.w	ip, [r3]
 8016b26:	680f      	ldr	r7, [r1, #0]
 8016b28:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8016b2c:	eba7 070c 	sub.w	r7, r7, ip
 8016b30:	42bc      	cmp	r4, r7
 8016b32:	bfa8      	it	ge
 8016b34:	463c      	movge	r4, r7
 8016b36:	ee07 4a90 	vmov	s15, r4
 8016b3a:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8016b3e:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016b42:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8016b46:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8016b4a:	edd3 6a07 	vldr	s13, [r3, #28]
 8016b4e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8016b52:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016b56:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016b5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016b5e:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8016b62:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8016b66:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016b6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016b6c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8016b70:	f9b1 9000 	ldrsh.w	r9, [r1]
 8016b74:	f9ba 1000 	ldrsh.w	r1, [sl]
 8016b78:	eb09 0e0c 	add.w	lr, r9, ip
 8016b7c:	4571      	cmp	r1, lr
 8016b7e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8016b82:	ee32 1a05 	vadd.f32	s2, s4, s10
 8016b86:	ee36 0a84 	vadd.f32	s0, s13, s8
 8016b8a:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016b8e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016b92:	f340 808c 	ble.w	8016cae <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8016b96:	eba1 060e 	sub.w	r6, r1, lr
 8016b9a:	fb96 f5f4 	sdiv	r5, r6, r4
 8016b9e:	ee07 5a10 	vmov	s14, r5
 8016ba2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016ba6:	2d00      	cmp	r5, #0
 8016ba8:	fb04 6615 	mls	r6, r4, r5, r6
 8016bac:	eea7 0a04 	vfma.f32	s0, s14, s8
 8016bb0:	eee7 0a24 	vfma.f32	s1, s14, s9
 8016bb4:	eea7 1a05 	vfma.f32	s2, s14, s10
 8016bb8:	dd12      	ble.n	8016be0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8016bba:	ee70 6a44 	vsub.f32	s13, s0, s8
 8016bbe:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bc6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8016bca:	bf14      	ite	ne
 8016bcc:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016bd0:	eeb0 7a67 	vmoveq.f32	s14, s15
 8016bd4:	ee31 2a45 	vsub.f32	s4, s2, s10
 8016bd8:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016bdc:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016be0:	fb05 f204 	mul.w	r2, r5, r4
 8016be4:	1abf      	subs	r7, r7, r2
 8016be6:	4494      	add	ip, r2
 8016be8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8016bec:	4411      	add	r1, r2
 8016bee:	eb09 020c 	add.w	r2, r9, ip
 8016bf2:	443a      	add	r2, r7
 8016bf4:	b209      	sxth	r1, r1
 8016bf6:	428a      	cmp	r2, r1
 8016bf8:	bfc4      	itt	gt
 8016bfa:	eba1 0209 	subgt.w	r2, r1, r9
 8016bfe:	eba2 070c 	subgt.w	r7, r2, ip
 8016c02:	2f00      	cmp	r7, #0
 8016c04:	dd50      	ble.n	8016ca8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8016c06:	fb97 f1f4 	sdiv	r1, r7, r4
 8016c0a:	fb04 7211 	mls	r2, r4, r1, r7
 8016c0e:	b90a      	cbnz	r2, 8016c14 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8016c10:	4622      	mov	r2, r4
 8016c12:	3901      	subs	r1, #1
 8016c14:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016c18:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016c1c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016c20:	ee21 3a23 	vmul.f32	s6, s2, s7
 8016c24:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016c28:	ee17 7a90 	vmov	r7, s15
 8016c2c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8016c30:	eef0 6a42 	vmov.f32	s13, s4
 8016c34:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016c38:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016c3c:	ee17 ca90 	vmov	ip, s15
 8016c40:	eeb0 7a61 	vmov.f32	s14, s3
 8016c44:	6840      	ldr	r0, [r0, #4]
 8016c46:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8016c4a:	f8d0 a000 	ldr.w	sl, [r0]
 8016c4e:	900b      	str	r0, [sp, #44]	; 0x2c
 8016c50:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016c52:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8016c56:	9008      	str	r0, [sp, #32]
 8016c58:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016c5a:	695b      	ldr	r3, [r3, #20]
 8016c5c:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8016c60:	fb9c fcf4 	sdiv	ip, ip, r4
 8016c64:	445b      	add	r3, fp
 8016c66:	9307      	str	r3, [sp, #28]
 8016c68:	ee16 3a90 	vmov	r3, s13
 8016c6c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016c70:	fb0c 3306 	mla	r3, ip, r6, r3
 8016c74:	fb97 f7f4 	sdiv	r7, r7, r4
 8016c78:	9302      	str	r3, [sp, #8]
 8016c7a:	ee17 3a10 	vmov	r3, s14
 8016c7e:	2900      	cmp	r1, #0
 8016c80:	bfcc      	ite	gt
 8016c82:	46a1      	movgt	r9, r4
 8016c84:	4691      	movle	r9, r2
 8016c86:	44b6      	add	lr, r6
 8016c88:	fb04 e505 	mla	r5, r4, r5, lr
 8016c8c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8016c90:	fb07 3706 	mla	r7, r7, r6, r3
 8016c94:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8016c98:	e9cd 4700 	strd	r4, r7, [sp]
 8016c9c:	eba9 0306 	sub.w	r3, r9, r6
 8016ca0:	f8da 4008 	ldr.w	r4, [sl, #8]
 8016ca4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016ca6:	47a0      	blx	r4
 8016ca8:	b00d      	add	sp, #52	; 0x34
 8016caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cae:	2500      	movs	r5, #0
 8016cb0:	462e      	mov	r6, r5
 8016cb2:	e799      	b.n	8016be8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08016cb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cb8:	461d      	mov	r5, r3
 8016cba:	b0db      	sub	sp, #364	; 0x16c
 8016cbc:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8016cc0:	910f      	str	r1, [sp, #60]	; 0x3c
 8016cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8016cc4:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8016cc8:	9009      	str	r0, [sp, #36]	; 0x24
 8016cca:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ccc:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8016cd0:	4614      	mov	r4, r2
 8016cd2:	9310      	str	r3, [sp, #64]	; 0x40
 8016cd4:	6803      	ldr	r3, [r0, #0]
 8016cd6:	4629      	mov	r1, r5
 8016cd8:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8016cda:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016cde:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8016ce2:	47b8      	blx	r7
 8016ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ce6:	6058      	str	r0, [r3, #4]
 8016ce8:	2800      	cmp	r0, #0
 8016cea:	f000 83a1 	beq.w	8017430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016cee:	ed94 7a02 	vldr	s14, [r4, #8]
 8016cf2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016cf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016cfa:	682b      	ldr	r3, [r5, #0]
 8016cfc:	9314      	str	r3, [sp, #80]	; 0x50
 8016cfe:	686b      	ldr	r3, [r5, #4]
 8016d00:	9315      	str	r3, [sp, #84]	; 0x54
 8016d02:	4bc1      	ldr	r3, [pc, #772]	; (8017008 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8016d04:	7819      	ldrb	r1, [r3, #0]
 8016d06:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8016d0a:	2900      	cmp	r1, #0
 8016d0c:	bf16      	itet	ne
 8016d0e:	4619      	movne	r1, r3
 8016d10:	4611      	moveq	r1, r2
 8016d12:	4613      	movne	r3, r2
 8016d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d18:	9116      	str	r1, [sp, #88]	; 0x58
 8016d1a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8016d1e:	f240 8387 	bls.w	8017430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d22:	ed94 7a07 	vldr	s14, [r4, #28]
 8016d26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d2e:	f240 837f 	bls.w	8017430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d32:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8016d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d3e:	f240 8377 	bls.w	8017430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d42:	6822      	ldr	r2, [r4, #0]
 8016d44:	4bb1      	ldr	r3, [pc, #708]	; (801700c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8016d46:	429a      	cmp	r2, r3
 8016d48:	f2c0 8372 	blt.w	8017430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d4c:	49b0      	ldr	r1, [pc, #704]	; (8017010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8016d4e:	6963      	ldr	r3, [r4, #20]
 8016d50:	428a      	cmp	r2, r1
 8016d52:	f300 836d 	bgt.w	8017430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d56:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016d5a:	48ae      	ldr	r0, [pc, #696]	; (8017014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8016d5c:	33ff      	adds	r3, #255	; 0xff
 8016d5e:	4283      	cmp	r3, r0
 8016d60:	f200 8366 	bhi.w	8017430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016d66:	4dac      	ldr	r5, [pc, #688]	; (8017018 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8016d68:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016d6c:	33ff      	adds	r3, #255	; 0xff
 8016d6e:	42ab      	cmp	r3, r5
 8016d70:	f200 835e 	bhi.w	8017430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d74:	6862      	ldr	r2, [r4, #4]
 8016d76:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8016d7a:	33ff      	adds	r3, #255	; 0xff
 8016d7c:	4283      	cmp	r3, r0
 8016d7e:	f200 8357 	bhi.w	8017430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d82:	69a1      	ldr	r1, [r4, #24]
 8016d84:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8016d88:	33ff      	adds	r3, #255	; 0xff
 8016d8a:	4283      	cmp	r3, r0
 8016d8c:	f200 8350 	bhi.w	8017430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016d92:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8016d96:	30ff      	adds	r0, #255	; 0xff
 8016d98:	42a8      	cmp	r0, r5
 8016d9a:	f200 8349 	bhi.w	8017430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d9e:	428a      	cmp	r2, r1
 8016da0:	f280 8110 	bge.w	8016fc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8016da4:	429a      	cmp	r2, r3
 8016da6:	f300 8119 	bgt.w	8016fdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8016daa:	4299      	cmp	r1, r3
 8016dac:	f280 811d 	bge.w	8016fea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8016db0:	2502      	movs	r5, #2
 8016db2:	2701      	movs	r7, #1
 8016db4:	46a9      	mov	r9, r5
 8016db6:	46b8      	mov	r8, r7
 8016db8:	f04f 0a00 	mov.w	sl, #0
 8016dbc:	4621      	mov	r1, r4
 8016dbe:	a849      	add	r0, sp, #292	; 0x124
 8016dc0:	f002 ffc0 	bl	8019d44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8016dc4:	4622      	mov	r2, r4
 8016dc6:	4653      	mov	r3, sl
 8016dc8:	a949      	add	r1, sp, #292	; 0x124
 8016dca:	f8cd 9000 	str.w	r9, [sp]
 8016dce:	a819      	add	r0, sp, #100	; 0x64
 8016dd0:	f003 f8ea 	bl	8019fa8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016dd4:	4622      	mov	r2, r4
 8016dd6:	4653      	mov	r3, sl
 8016dd8:	a949      	add	r1, sp, #292	; 0x124
 8016dda:	f8cd 8000 	str.w	r8, [sp]
 8016dde:	a829      	add	r0, sp, #164	; 0xa4
 8016de0:	f003 f8e2 	bl	8019fa8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016de4:	4643      	mov	r3, r8
 8016de6:	4622      	mov	r2, r4
 8016de8:	a949      	add	r1, sp, #292	; 0x124
 8016dea:	f8cd 9000 	str.w	r9, [sp]
 8016dee:	a839      	add	r0, sp, #228	; 0xe4
 8016df0:	f003 f8da 	bl	8019fa8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016df4:	42af      	cmp	r7, r5
 8016df6:	bfb5      	itete	lt
 8016df8:	2300      	movlt	r3, #0
 8016dfa:	2301      	movge	r3, #1
 8016dfc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016dfe:	930e      	strge	r3, [sp, #56]	; 0x38
 8016e00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e02:	af12      	add	r7, sp, #72	; 0x48
 8016e04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016e08:	bfb9      	ittee	lt
 8016e0a:	ad29      	addlt	r5, sp, #164	; 0xa4
 8016e0c:	ac19      	addlt	r4, sp, #100	; 0x64
 8016e0e:	ad19      	addge	r5, sp, #100	; 0x64
 8016e10:	ac29      	addge	r4, sp, #164	; 0xa4
 8016e12:	e887 0003 	stmia.w	r7, {r0, r1}
 8016e16:	b928      	cbnz	r0, 8016e24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8016e18:	4b80      	ldr	r3, [pc, #512]	; (801701c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8016e1a:	6818      	ldr	r0, [r3, #0]
 8016e1c:	6803      	ldr	r3, [r0, #0]
 8016e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e20:	4798      	blx	r3
 8016e22:	6038      	str	r0, [r7, #0]
 8016e24:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016e26:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016e2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016e2e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016e30:	930c      	str	r3, [sp, #48]	; 0x30
 8016e32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016e34:	6963      	ldr	r3, [r4, #20]
 8016e36:	440b      	add	r3, r1
 8016e38:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016e3c:	4408      	add	r0, r1
 8016e3e:	b200      	sxth	r0, r0
 8016e40:	4283      	cmp	r3, r0
 8016e42:	900d      	str	r0, [sp, #52]	; 0x34
 8016e44:	f280 80dd 	bge.w	8017002 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8016e48:	428b      	cmp	r3, r1
 8016e4a:	da08      	bge.n	8016e5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016e4c:	2a00      	cmp	r2, #0
 8016e4e:	dd06      	ble.n	8016e5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016e50:	1acb      	subs	r3, r1, r3
 8016e52:	429a      	cmp	r2, r3
 8016e54:	f2c0 80e4 	blt.w	8017020 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	f300 80e2 	bgt.w	8017022 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8016e5e:	6967      	ldr	r7, [r4, #20]
 8016e60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e62:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016e66:	443b      	add	r3, r7
 8016e68:	461f      	mov	r7, r3
 8016e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e6c:	1bdf      	subs	r7, r3, r7
 8016e6e:	4297      	cmp	r7, r2
 8016e70:	bfa8      	it	ge
 8016e72:	4617      	movge	r7, r2
 8016e74:	2f00      	cmp	r7, #0
 8016e76:	f340 8166 	ble.w	8017146 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8016e7a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016e7c:	6829      	ldr	r1, [r5, #0]
 8016e7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016e82:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016e86:	4411      	add	r1, r2
 8016e88:	4299      	cmp	r1, r3
 8016e8a:	6820      	ldr	r0, [r4, #0]
 8016e8c:	dd1a      	ble.n	8016ec4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016e8e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016e92:	4402      	add	r2, r0
 8016e94:	440b      	add	r3, r1
 8016e96:	b21b      	sxth	r3, r3
 8016e98:	429a      	cmp	r2, r3
 8016e9a:	dc13      	bgt.n	8016ec4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016e9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ea0:	a912      	add	r1, sp, #72	; 0x48
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	9206      	str	r2, [sp, #24]
 8016ea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016ea8:	9500      	str	r5, [sp, #0]
 8016eaa:	9205      	str	r2, [sp, #20]
 8016eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016eae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016eb0:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016eb4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016eb6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016eba:	aa49      	add	r2, sp, #292	; 0x124
 8016ebc:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016ec0:	4623      	mov	r3, r4
 8016ec2:	47c8      	blx	r9
 8016ec4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016ec8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016ecc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016ed0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016ed8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016edc:	ed94 6a08 	vldr	s12, [r4, #32]
 8016ee0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016ee4:	edd4 6a07 	vldr	s13, [r4, #28]
 8016ee8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016eec:	441a      	add	r2, r3
 8016eee:	6963      	ldr	r3, [r4, #20]
 8016ef0:	68a1      	ldr	r1, [r4, #8]
 8016ef2:	3301      	adds	r3, #1
 8016ef4:	6163      	str	r3, [r4, #20]
 8016ef6:	69a3      	ldr	r3, [r4, #24]
 8016ef8:	6022      	str	r2, [r4, #0]
 8016efa:	3b01      	subs	r3, #1
 8016efc:	61a3      	str	r3, [r4, #24]
 8016efe:	6923      	ldr	r3, [r4, #16]
 8016f00:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016f04:	440b      	add	r3, r1
 8016f06:	68e1      	ldr	r1, [r4, #12]
 8016f08:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016f0c:	428b      	cmp	r3, r1
 8016f0e:	edc4 6a07 	vstr	s13, [r4, #28]
 8016f12:	6123      	str	r3, [r4, #16]
 8016f14:	db15      	blt.n	8016f42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8016f16:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016f1a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016f1e:	edc4 6a07 	vstr	s13, [r4, #28]
 8016f22:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016f26:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016f2a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016f2e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016f36:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016f3a:	3201      	adds	r2, #1
 8016f3c:	1a5b      	subs	r3, r3, r1
 8016f3e:	6022      	str	r2, [r4, #0]
 8016f40:	6123      	str	r3, [r4, #16]
 8016f42:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016f46:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016f4a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016f4e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016f52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016f56:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016f5a:	ed95 6a08 	vldr	s12, [r5, #32]
 8016f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016f62:	edd5 6a07 	vldr	s13, [r5, #28]
 8016f66:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016f6a:	441a      	add	r2, r3
 8016f6c:	696b      	ldr	r3, [r5, #20]
 8016f6e:	68a9      	ldr	r1, [r5, #8]
 8016f70:	3301      	adds	r3, #1
 8016f72:	616b      	str	r3, [r5, #20]
 8016f74:	69ab      	ldr	r3, [r5, #24]
 8016f76:	602a      	str	r2, [r5, #0]
 8016f78:	3b01      	subs	r3, #1
 8016f7a:	61ab      	str	r3, [r5, #24]
 8016f7c:	692b      	ldr	r3, [r5, #16]
 8016f7e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016f82:	440b      	add	r3, r1
 8016f84:	68e9      	ldr	r1, [r5, #12]
 8016f86:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016f8a:	428b      	cmp	r3, r1
 8016f8c:	edc5 6a07 	vstr	s13, [r5, #28]
 8016f90:	612b      	str	r3, [r5, #16]
 8016f92:	db15      	blt.n	8016fc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8016f94:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016f98:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016f9c:	edc5 6a07 	vstr	s13, [r5, #28]
 8016fa0:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016fa4:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016fa8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016fac:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016fb4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016fb8:	3201      	adds	r2, #1
 8016fba:	1a5b      	subs	r3, r3, r1
 8016fbc:	602a      	str	r2, [r5, #0]
 8016fbe:	612b      	str	r3, [r5, #16]
 8016fc0:	3f01      	subs	r7, #1
 8016fc2:	e757      	b.n	8016e74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016fc4:	4299      	cmp	r1, r3
 8016fc6:	dc13      	bgt.n	8016ff0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016fc8:	429a      	cmp	r2, r3
 8016fca:	da14      	bge.n	8016ff6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8016fcc:	2502      	movs	r5, #2
 8016fce:	2703      	movs	r7, #3
 8016fd0:	46a9      	mov	r9, r5
 8016fd2:	f04f 0800 	mov.w	r8, #0
 8016fd6:	f04f 0a01 	mov.w	sl, #1
 8016fda:	e6ef      	b.n	8016dbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016fdc:	2501      	movs	r5, #1
 8016fde:	2700      	movs	r7, #0
 8016fe0:	46a9      	mov	r9, r5
 8016fe2:	46b8      	mov	r8, r7
 8016fe4:	f04f 0a02 	mov.w	sl, #2
 8016fe8:	e6e8      	b.n	8016dbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016fea:	2501      	movs	r5, #1
 8016fec:	2702      	movs	r7, #2
 8016fee:	e6e1      	b.n	8016db4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016ff0:	2500      	movs	r5, #0
 8016ff2:	2701      	movs	r7, #1
 8016ff4:	e7f4      	b.n	8016fe0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8016ff6:	2702      	movs	r7, #2
 8016ff8:	2503      	movs	r5, #3
 8016ffa:	f04f 0900 	mov.w	r9, #0
 8016ffe:	46b8      	mov	r8, r7
 8017000:	e7e9      	b.n	8016fd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8017002:	4613      	mov	r3, r2
 8017004:	e728      	b.n	8016e58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8017006:	bf00      	nop
 8017008:	20198150 	.word	0x20198150
 801700c:	fffd8f01 	.word	0xfffd8f01
 8017010:	00027100 	.word	0x00027100
 8017014:	0004e1ff 	.word	0x0004e1ff
 8017018:	0004e1fe 	.word	0x0004e1fe
 801701c:	20198158 	.word	0x20198158
 8017020:	4613      	mov	r3, r2
 8017022:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8017026:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801702a:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801702e:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8017032:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8017036:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801703a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801703e:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8017042:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8017046:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801704a:	469e      	mov	lr, r3
 801704c:	469c      	mov	ip, r3
 801704e:	f04f 0900 	mov.w	r9, #0
 8017052:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017054:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8017056:	9111      	str	r1, [sp, #68]	; 0x44
 8017058:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801705c:	f1bc 0f00 	cmp.w	ip, #0
 8017060:	d147      	bne.n	80170f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8017062:	eb03 0c07 	add.w	ip, r3, r7
 8017066:	1ad7      	subs	r7, r2, r3
 8017068:	f1b9 0f00 	cmp.w	r9, #0
 801706c:	d009      	beq.n	8017082 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801706e:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8017072:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8017076:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801707a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801707e:	9029      	str	r0, [sp, #164]	; 0xa4
 8017080:	912d      	str	r1, [sp, #180]	; 0xb4
 8017082:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8017086:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801708a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801708e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017092:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8017096:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801709a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801709e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80170a2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80170a6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80170aa:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80170ae:	f04f 0800 	mov.w	r8, #0
 80170b2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80170b4:	9111      	str	r1, [sp, #68]	; 0x44
 80170b6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80170ba:	f1be 0f00 	cmp.w	lr, #0
 80170be:	d031      	beq.n	8017124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80170c0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80170c2:	4450      	add	r0, sl
 80170c4:	4431      	add	r1, r6
 80170c6:	4549      	cmp	r1, r9
 80170c8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80170cc:	ee37 7a04 	vadd.f32	s14, s14, s8
 80170d0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80170d4:	db08      	blt.n	80170e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80170d6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80170da:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80170de:	ee37 7a06 	vadd.f32	s14, s14, s12
 80170e2:	3001      	adds	r0, #1
 80170e4:	eba1 0109 	sub.w	r1, r1, r9
 80170e8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80170ec:	f04f 0801 	mov.w	r8, #1
 80170f0:	e7e3      	b.n	80170ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80170f2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80170f4:	4450      	add	r0, sl
 80170f6:	4431      	add	r1, r6
 80170f8:	4541      	cmp	r1, r8
 80170fa:	ee37 7a24 	vadd.f32	s14, s14, s9
 80170fe:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017102:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017106:	db08      	blt.n	801711a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8017108:	ee76 6a85 	vadd.f32	s13, s13, s10
 801710c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017110:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017114:	3001      	adds	r0, #1
 8017116:	eba1 0108 	sub.w	r1, r1, r8
 801711a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801711e:	f04f 0901 	mov.w	r9, #1
 8017122:	e79b      	b.n	801705c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8017124:	449c      	add	ip, r3
 8017126:	1aff      	subs	r7, r7, r3
 8017128:	f1b8 0f00 	cmp.w	r8, #0
 801712c:	d009      	beq.n	8017142 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801712e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017132:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017136:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801713a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801713e:	9019      	str	r0, [sp, #100]	; 0x64
 8017140:	911d      	str	r1, [sp, #116]	; 0x74
 8017142:	1ad2      	subs	r2, r2, r3
 8017144:	e68b      	b.n	8016e5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017148:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801714a:	2b00      	cmp	r3, #0
 801714c:	f000 80d1 	beq.w	80172f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8017150:	ad19      	add	r5, sp, #100	; 0x64
 8017152:	ac39      	add	r4, sp, #228	; 0xe4
 8017154:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017156:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801715a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801715e:	930c      	str	r3, [sp, #48]	; 0x30
 8017160:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017162:	6963      	ldr	r3, [r4, #20]
 8017164:	440b      	add	r3, r1
 8017166:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801716a:	4408      	add	r0, r1
 801716c:	b200      	sxth	r0, r0
 801716e:	4283      	cmp	r3, r0
 8017170:	900d      	str	r0, [sp, #52]	; 0x34
 8017172:	f280 80c1 	bge.w	80172f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8017176:	428b      	cmp	r3, r1
 8017178:	da08      	bge.n	801718c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801717a:	2a00      	cmp	r2, #0
 801717c:	dd06      	ble.n	801718c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801717e:	1acb      	subs	r3, r1, r3
 8017180:	429a      	cmp	r2, r3
 8017182:	f2c0 80bb 	blt.w	80172fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8017186:	2b00      	cmp	r3, #0
 8017188:	f300 80b9 	bgt.w	80172fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801718c:	6967      	ldr	r7, [r4, #20]
 801718e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017190:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8017194:	443b      	add	r3, r7
 8017196:	461f      	mov	r7, r3
 8017198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801719a:	1bdf      	subs	r7, r3, r7
 801719c:	4297      	cmp	r7, r2
 801719e:	bfa8      	it	ge
 80171a0:	4617      	movge	r7, r2
 80171a2:	2f00      	cmp	r7, #0
 80171a4:	f340 813c 	ble.w	8017420 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80171a8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80171aa:	6829      	ldr	r1, [r5, #0]
 80171ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80171b0:	f9bb 3000 	ldrsh.w	r3, [fp]
 80171b4:	4411      	add	r1, r2
 80171b6:	4299      	cmp	r1, r3
 80171b8:	6820      	ldr	r0, [r4, #0]
 80171ba:	dd1a      	ble.n	80171f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80171bc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80171c0:	4402      	add	r2, r0
 80171c2:	440b      	add	r3, r1
 80171c4:	b21b      	sxth	r3, r3
 80171c6:	429a      	cmp	r2, r3
 80171c8:	dc13      	bgt.n	80171f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80171ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80171cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171ce:	a912      	add	r1, sp, #72	; 0x48
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	9206      	str	r2, [sp, #24]
 80171d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80171d6:	9500      	str	r5, [sp, #0]
 80171d8:	9205      	str	r2, [sp, #20]
 80171da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80171dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80171de:	e9cd b203 	strd	fp, r2, [sp, #12]
 80171e2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80171e4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80171e8:	aa49      	add	r2, sp, #292	; 0x124
 80171ea:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80171ee:	4623      	mov	r3, r4
 80171f0:	47c8      	blx	r9
 80171f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80171f6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80171fa:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80171fe:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017206:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801720a:	ed94 6a08 	vldr	s12, [r4, #32]
 801720e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017212:	edd4 6a07 	vldr	s13, [r4, #28]
 8017216:	ee76 6a86 	vadd.f32	s13, s13, s12
 801721a:	441a      	add	r2, r3
 801721c:	6963      	ldr	r3, [r4, #20]
 801721e:	68a1      	ldr	r1, [r4, #8]
 8017220:	3301      	adds	r3, #1
 8017222:	6163      	str	r3, [r4, #20]
 8017224:	69a3      	ldr	r3, [r4, #24]
 8017226:	6022      	str	r2, [r4, #0]
 8017228:	3b01      	subs	r3, #1
 801722a:	61a3      	str	r3, [r4, #24]
 801722c:	6923      	ldr	r3, [r4, #16]
 801722e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017232:	440b      	add	r3, r1
 8017234:	68e1      	ldr	r1, [r4, #12]
 8017236:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801723a:	428b      	cmp	r3, r1
 801723c:	edc4 6a07 	vstr	s13, [r4, #28]
 8017240:	6123      	str	r3, [r4, #16]
 8017242:	db15      	blt.n	8017270 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8017244:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8017248:	ee76 6a26 	vadd.f32	s13, s12, s13
 801724c:	edc4 6a07 	vstr	s13, [r4, #28]
 8017250:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017254:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017258:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801725c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017264:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017268:	3201      	adds	r2, #1
 801726a:	1a5b      	subs	r3, r3, r1
 801726c:	6022      	str	r2, [r4, #0]
 801726e:	6123      	str	r3, [r4, #16]
 8017270:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017274:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017278:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801727c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017280:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017284:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017288:	ed95 6a08 	vldr	s12, [r5, #32]
 801728c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017290:	edd5 6a07 	vldr	s13, [r5, #28]
 8017294:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017298:	441a      	add	r2, r3
 801729a:	696b      	ldr	r3, [r5, #20]
 801729c:	68a9      	ldr	r1, [r5, #8]
 801729e:	3301      	adds	r3, #1
 80172a0:	616b      	str	r3, [r5, #20]
 80172a2:	69ab      	ldr	r3, [r5, #24]
 80172a4:	602a      	str	r2, [r5, #0]
 80172a6:	3b01      	subs	r3, #1
 80172a8:	61ab      	str	r3, [r5, #24]
 80172aa:	692b      	ldr	r3, [r5, #16]
 80172ac:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80172b0:	440b      	add	r3, r1
 80172b2:	68e9      	ldr	r1, [r5, #12]
 80172b4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80172b8:	428b      	cmp	r3, r1
 80172ba:	edc5 6a07 	vstr	s13, [r5, #28]
 80172be:	612b      	str	r3, [r5, #16]
 80172c0:	db15      	blt.n	80172ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80172c2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80172c6:	ee76 6a26 	vadd.f32	s13, s12, s13
 80172ca:	edc5 6a07 	vstr	s13, [r5, #28]
 80172ce:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80172d2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80172d6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80172da:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80172de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80172e2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80172e6:	3201      	adds	r2, #1
 80172e8:	1a5b      	subs	r3, r3, r1
 80172ea:	602a      	str	r2, [r5, #0]
 80172ec:	612b      	str	r3, [r5, #16]
 80172ee:	3f01      	subs	r7, #1
 80172f0:	e757      	b.n	80171a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80172f2:	ad39      	add	r5, sp, #228	; 0xe4
 80172f4:	ac19      	add	r4, sp, #100	; 0x64
 80172f6:	e72d      	b.n	8017154 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80172f8:	4613      	mov	r3, r2
 80172fa:	e744      	b.n	8017186 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80172fc:	4613      	mov	r3, r2
 80172fe:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8017302:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8017306:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801730a:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801730e:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8017312:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8017316:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801731a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801731e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8017322:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8017326:	469e      	mov	lr, r3
 8017328:	461f      	mov	r7, r3
 801732a:	f04f 0900 	mov.w	r9, #0
 801732e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8017330:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8017334:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8017336:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801733a:	960e      	str	r6, [sp, #56]	; 0x38
 801733c:	2f00      	cmp	r7, #0
 801733e:	d146      	bne.n	80173ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8017340:	449c      	add	ip, r3
 8017342:	1ad7      	subs	r7, r2, r3
 8017344:	f1b9 0f00 	cmp.w	r9, #0
 8017348:	d009      	beq.n	801735e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801734a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801734e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8017352:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8017356:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801735a:	9039      	str	r0, [sp, #228]	; 0xe4
 801735c:	913d      	str	r1, [sp, #244]	; 0xf4
 801735e:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8017362:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8017366:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801736a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801736e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8017372:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017376:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801737a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801737e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8017382:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8017386:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801738a:	f04f 0800 	mov.w	r8, #0
 801738e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017390:	910e      	str	r1, [sp, #56]	; 0x38
 8017392:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8017396:	f1be 0f00 	cmp.w	lr, #0
 801739a:	d030      	beq.n	80173fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801739c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801739e:	4450      	add	r0, sl
 80173a0:	4431      	add	r1, r6
 80173a2:	4549      	cmp	r1, r9
 80173a4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80173a8:	ee37 7a04 	vadd.f32	s14, s14, s8
 80173ac:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80173b0:	db08      	blt.n	80173c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80173b2:	ee77 7a85 	vadd.f32	s15, s15, s10
 80173b6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80173ba:	ee37 7a06 	vadd.f32	s14, s14, s12
 80173be:	3001      	adds	r0, #1
 80173c0:	eba1 0109 	sub.w	r1, r1, r9
 80173c4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80173c8:	f04f 0801 	mov.w	r8, #1
 80173cc:	e7e3      	b.n	8017396 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80173ce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80173d0:	4450      	add	r0, sl
 80173d2:	4431      	add	r1, r6
 80173d4:	4541      	cmp	r1, r8
 80173d6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80173da:	ee77 7a84 	vadd.f32	s15, s15, s8
 80173de:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80173e2:	db08      	blt.n	80173f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80173e4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80173e8:	ee37 7a25 	vadd.f32	s14, s14, s11
 80173ec:	ee77 7a86 	vadd.f32	s15, s15, s12
 80173f0:	3001      	adds	r0, #1
 80173f2:	eba1 0108 	sub.w	r1, r1, r8
 80173f6:	3f01      	subs	r7, #1
 80173f8:	f04f 0901 	mov.w	r9, #1
 80173fc:	e79e      	b.n	801733c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80173fe:	449c      	add	ip, r3
 8017400:	1aff      	subs	r7, r7, r3
 8017402:	f1b8 0f00 	cmp.w	r8, #0
 8017406:	d009      	beq.n	801741c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8017408:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801740c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017410:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017414:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017418:	9019      	str	r0, [sp, #100]	; 0x64
 801741a:	911d      	str	r1, [sp, #116]	; 0x74
 801741c:	1ad2      	subs	r2, r2, r3
 801741e:	e6b5      	b.n	801718c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017420:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	b923      	cbnz	r3, 8017430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017426:	4b04      	ldr	r3, [pc, #16]	; (8017438 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8017428:	6818      	ldr	r0, [r3, #0]
 801742a:	6803      	ldr	r3, [r0, #0]
 801742c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801742e:	4798      	blx	r3
 8017430:	b05b      	add	sp, #364	; 0x16c
 8017432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017436:	bf00      	nop
 8017438:	20198158 	.word	0x20198158

0801743c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801743c:	2b03      	cmp	r3, #3
 801743e:	d818      	bhi.n	8017472 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8017440:	e8df f003 	tbb	[pc, r3]
 8017444:	130d0602 	.word	0x130d0602
 8017448:	f9b0 2000 	ldrsh.w	r2, [r0]
 801744c:	1850      	adds	r0, r2, r1
 801744e:	4770      	bx	lr
 8017450:	8803      	ldrh	r3, [r0, #0]
 8017452:	8880      	ldrh	r0, [r0, #4]
 8017454:	4418      	add	r0, r3
 8017456:	b200      	sxth	r0, r0
 8017458:	1a80      	subs	r0, r0, r2
 801745a:	3801      	subs	r0, #1
 801745c:	4770      	bx	lr
 801745e:	8803      	ldrh	r3, [r0, #0]
 8017460:	8880      	ldrh	r0, [r0, #4]
 8017462:	4418      	add	r0, r3
 8017464:	b200      	sxth	r0, r0
 8017466:	1a40      	subs	r0, r0, r1
 8017468:	e7f7      	b.n	801745a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801746a:	f9b0 0000 	ldrsh.w	r0, [r0]
 801746e:	4410      	add	r0, r2
 8017470:	4770      	bx	lr
 8017472:	2000      	movs	r0, #0
 8017474:	4770      	bx	lr

08017476 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8017476:	2b03      	cmp	r3, #3
 8017478:	d817      	bhi.n	80174aa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801747a:	e8df f003 	tbb	[pc, r3]
 801747e:	0602      	.short	0x0602
 8017480:	1009      	.short	0x1009
 8017482:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017486:	1850      	adds	r0, r2, r1
 8017488:	4770      	bx	lr
 801748a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801748e:	e7fa      	b.n	8017486 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8017490:	8843      	ldrh	r3, [r0, #2]
 8017492:	88c0      	ldrh	r0, [r0, #6]
 8017494:	4418      	add	r0, r3
 8017496:	b200      	sxth	r0, r0
 8017498:	1a80      	subs	r0, r0, r2
 801749a:	3801      	subs	r0, #1
 801749c:	4770      	bx	lr
 801749e:	8843      	ldrh	r3, [r0, #2]
 80174a0:	88c0      	ldrh	r0, [r0, #6]
 80174a2:	4418      	add	r0, r3
 80174a4:	b200      	sxth	r0, r0
 80174a6:	1a40      	subs	r0, r0, r1
 80174a8:	e7f7      	b.n	801749a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80174aa:	2000      	movs	r0, #0
 80174ac:	4770      	bx	lr
	...

080174b0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80174b0:	2200      	movs	r2, #0
 80174b2:	4b01      	ldr	r3, [pc, #4]	; (80174b8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80174b4:	601a      	str	r2, [r3, #0]
 80174b6:	4770      	bx	lr
 80174b8:	20198160 	.word	0x20198160

080174bc <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80174bc:	4603      	mov	r3, r0
 80174be:	b1c8      	cbz	r0, 80174f4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80174c0:	0c02      	lsrs	r2, r0, #16
 80174c2:	0412      	lsls	r2, r2, #16
 80174c4:	b9a2      	cbnz	r2, 80174f0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80174c6:	0403      	lsls	r3, r0, #16
 80174c8:	2010      	movs	r0, #16
 80174ca:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80174ce:	bf04      	itt	eq
 80174d0:	021b      	lsleq	r3, r3, #8
 80174d2:	3008      	addeq	r0, #8
 80174d4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80174d8:	bf04      	itt	eq
 80174da:	011b      	lsleq	r3, r3, #4
 80174dc:	3004      	addeq	r0, #4
 80174de:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80174e2:	bf04      	itt	eq
 80174e4:	009b      	lsleq	r3, r3, #2
 80174e6:	3002      	addeq	r0, #2
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	db04      	blt.n	80174f6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80174ec:	3001      	adds	r0, #1
 80174ee:	4770      	bx	lr
 80174f0:	2000      	movs	r0, #0
 80174f2:	e7ea      	b.n	80174ca <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80174f4:	2020      	movs	r0, #32
 80174f6:	4770      	bx	lr

080174f8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80174f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174fc:	b087      	sub	sp, #28
 80174fe:	4681      	mov	r9, r0
 8017500:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8017504:	4610      	mov	r0, r2
 8017506:	4698      	mov	r8, r3
 8017508:	460d      	mov	r5, r1
 801750a:	b981      	cbnz	r1, 801752e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801750c:	b14b      	cbz	r3, 8017522 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801750e:	460b      	mov	r3, r1
 8017510:	e9cd 4700 	strd	r4, r7, [sp]
 8017514:	464a      	mov	r2, r9
 8017516:	4641      	mov	r1, r8
 8017518:	f7ff ffee 	bl	80174f8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801751c:	b007      	add	sp, #28
 801751e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017522:	f04f 33ff 	mov.w	r3, #4294967295
 8017526:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801752a:	603b      	str	r3, [r7, #0]
 801752c:	e7f6      	b.n	801751c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801752e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8017532:	d107      	bne.n	8017544 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8017534:	fb09 f602 	mul.w	r6, r9, r2
 8017538:	fbb6 f0f4 	udiv	r0, r6, r4
 801753c:	fb04 6610 	mls	r6, r4, r0, r6
 8017540:	603e      	str	r6, [r7, #0]
 8017542:	e7eb      	b.n	801751c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017544:	fa09 fb01 	lsl.w	fp, r9, r1
 8017548:	fbbb f3f4 	udiv	r3, fp, r4
 801754c:	2601      	movs	r6, #1
 801754e:	9302      	str	r3, [sp, #8]
 8017550:	408e      	lsls	r6, r1
 8017552:	fb0a f303 	mul.w	r3, sl, r3
 8017556:	3e01      	subs	r6, #1
 8017558:	4016      	ands	r6, r2
 801755a:	4630      	mov	r0, r6
 801755c:	9303      	str	r3, [sp, #12]
 801755e:	f7ff ffad 	bl	80174bc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017562:	464a      	mov	r2, r9
 8017564:	460b      	mov	r3, r1
 8017566:	e9cd 4700 	strd	r4, r7, [sp]
 801756a:	4601      	mov	r1, r0
 801756c:	4630      	mov	r0, r6
 801756e:	f7ff ffc3 	bl	80174f8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017572:	9b02      	ldr	r3, [sp, #8]
 8017574:	4606      	mov	r6, r0
 8017576:	fb04 bb13 	mls	fp, r4, r3, fp
 801757a:	4658      	mov	r0, fp
 801757c:	eb05 0108 	add.w	r1, r5, r8
 8017580:	f7ff ff9c 	bl	80174bc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017584:	ab05      	add	r3, sp, #20
 8017586:	e9cd 4300 	strd	r4, r3, [sp]
 801758a:	465a      	mov	r2, fp
 801758c:	4603      	mov	r3, r0
 801758e:	4650      	mov	r0, sl
 8017590:	f7ff ffb2 	bl	80174f8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017594:	6839      	ldr	r1, [r7, #0]
 8017596:	9a05      	ldr	r2, [sp, #20]
 8017598:	9b03      	ldr	r3, [sp, #12]
 801759a:	4411      	add	r1, r2
 801759c:	fbb1 f2f4 	udiv	r2, r1, r4
 80175a0:	fb04 1412 	mls	r4, r4, r2, r1
 80175a4:	18d3      	adds	r3, r2, r3
 80175a6:	441e      	add	r6, r3
 80175a8:	4430      	add	r0, r6
 80175aa:	603c      	str	r4, [r7, #0]
 80175ac:	e7b6      	b.n	801751c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080175ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80175ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80175b2:	b085      	sub	sp, #20
 80175b4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80175b6:	f1b0 0900 	subs.w	r9, r0, #0
 80175ba:	461d      	mov	r5, r3
 80175bc:	bfbf      	itttt	lt
 80175be:	6823      	ldrlt	r3, [r4, #0]
 80175c0:	f1c9 0900 	rsblt	r9, r9, #0
 80175c4:	425b      	neglt	r3, r3
 80175c6:	6023      	strlt	r3, [r4, #0]
 80175c8:	bfb4      	ite	lt
 80175ca:	f04f 36ff 	movlt.w	r6, #4294967295
 80175ce:	2601      	movge	r6, #1
 80175d0:	2a00      	cmp	r2, #0
 80175d2:	4617      	mov	r7, r2
 80175d4:	da04      	bge.n	80175e0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80175d6:	6823      	ldr	r3, [r4, #0]
 80175d8:	4257      	negs	r7, r2
 80175da:	425b      	negs	r3, r3
 80175dc:	4276      	negs	r6, r6
 80175de:	6023      	str	r3, [r4, #0]
 80175e0:	2d00      	cmp	r5, #0
 80175e2:	4638      	mov	r0, r7
 80175e4:	bfba      	itte	lt
 80175e6:	426d      	neglt	r5, r5
 80175e8:	f04f 38ff 	movlt.w	r8, #4294967295
 80175ec:	f04f 0801 	movge.w	r8, #1
 80175f0:	f7ff ff64 	bl	80174bc <_ZN8touchgfx16TouchCalibration4clzuEm>
 80175f4:	ab03      	add	r3, sp, #12
 80175f6:	e9cd 5300 	strd	r5, r3, [sp]
 80175fa:	463a      	mov	r2, r7
 80175fc:	4603      	mov	r3, r0
 80175fe:	4648      	mov	r0, r9
 8017600:	f7ff ff7a 	bl	80174f8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017604:	6823      	ldr	r3, [r4, #0]
 8017606:	9a03      	ldr	r2, [sp, #12]
 8017608:	4546      	cmp	r6, r8
 801760a:	441a      	add	r2, r3
 801760c:	fb92 f3f5 	sdiv	r3, r2, r5
 8017610:	4418      	add	r0, r3
 8017612:	fb05 2313 	mls	r3, r5, r3, r2
 8017616:	bf18      	it	ne
 8017618:	4240      	negne	r0, r0
 801761a:	1c72      	adds	r2, r6, #1
 801761c:	6023      	str	r3, [r4, #0]
 801761e:	d105      	bne.n	801762c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8017620:	2b00      	cmp	r3, #0
 8017622:	f1c3 0200 	rsb	r2, r3, #0
 8017626:	db0b      	blt.n	8017640 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8017628:	6022      	str	r2, [r4, #0]
 801762a:	e006      	b.n	801763a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801762c:	2e01      	cmp	r6, #1
 801762e:	d104      	bne.n	801763a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017630:	2b00      	cmp	r3, #0
 8017632:	da02      	bge.n	801763a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017634:	442b      	add	r3, r5
 8017636:	3801      	subs	r0, #1
 8017638:	6023      	str	r3, [r4, #0]
 801763a:	b005      	add	sp, #20
 801763c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017640:	3801      	subs	r0, #1
 8017642:	1b52      	subs	r2, r2, r5
 8017644:	e7f0      	b.n	8017628 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08017648 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017648:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801764c:	4c1c      	ldr	r4, [pc, #112]	; (80176c0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801764e:	4605      	mov	r5, r0
 8017650:	69a3      	ldr	r3, [r4, #24]
 8017652:	6807      	ldr	r7, [r0, #0]
 8017654:	b92b      	cbnz	r3, 8017662 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8017656:	6840      	ldr	r0, [r0, #4]
 8017658:	e9c5 7000 	strd	r7, r0, [r5]
 801765c:	b004      	add	sp, #16
 801765e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017662:	f04f 0802 	mov.w	r8, #2
 8017666:	fb93 f1f8 	sdiv	r1, r3, r8
 801766a:	68a2      	ldr	r2, [r4, #8]
 801766c:	ae04      	add	r6, sp, #16
 801766e:	440a      	add	r2, r1
 8017670:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017674:	69e1      	ldr	r1, [r4, #28]
 8017676:	463a      	mov	r2, r7
 8017678:	9600      	str	r6, [sp, #0]
 801767a:	6820      	ldr	r0, [r4, #0]
 801767c:	f7ff ff97 	bl	80175ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017680:	69a3      	ldr	r3, [r4, #24]
 8017682:	4607      	mov	r7, r0
 8017684:	686a      	ldr	r2, [r5, #4]
 8017686:	6a21      	ldr	r1, [r4, #32]
 8017688:	9600      	str	r6, [sp, #0]
 801768a:	6860      	ldr	r0, [r4, #4]
 801768c:	f7ff ff8f 	bl	80175ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017690:	69a3      	ldr	r3, [r4, #24]
 8017692:	6962      	ldr	r2, [r4, #20]
 8017694:	fb93 f8f8 	sdiv	r8, r3, r8
 8017698:	4442      	add	r2, r8
 801769a:	9203      	str	r2, [sp, #12]
 801769c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801769e:	682a      	ldr	r2, [r5, #0]
 80176a0:	4407      	add	r7, r0
 80176a2:	9600      	str	r6, [sp, #0]
 80176a4:	68e0      	ldr	r0, [r4, #12]
 80176a6:	f7ff ff82 	bl	80175ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80176aa:	9600      	str	r6, [sp, #0]
 80176ac:	4680      	mov	r8, r0
 80176ae:	69a3      	ldr	r3, [r4, #24]
 80176b0:	686a      	ldr	r2, [r5, #4]
 80176b2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80176b4:	6920      	ldr	r0, [r4, #16]
 80176b6:	f7ff ff7a 	bl	80175ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80176ba:	4440      	add	r0, r8
 80176bc:	e7cc      	b.n	8017658 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80176be:	bf00      	nop
 80176c0:	20198164 	.word	0x20198164

080176c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80176c4:	4b07      	ldr	r3, [pc, #28]	; (80176e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80176c6:	781b      	ldrb	r3, [r3, #0]
 80176c8:	2b01      	cmp	r3, #1
 80176ca:	d109      	bne.n	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80176cc:	f9b1 3000 	ldrsh.w	r3, [r1]
 80176d0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80176d4:	8003      	strh	r3, [r0, #0]
 80176d6:	4b04      	ldr	r3, [pc, #16]	; (80176e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80176d8:	881b      	ldrh	r3, [r3, #0]
 80176da:	3b01      	subs	r3, #1
 80176dc:	1a9b      	subs	r3, r3, r2
 80176de:	800b      	strh	r3, [r1, #0]
 80176e0:	4770      	bx	lr
 80176e2:	bf00      	nop
 80176e4:	20198150 	.word	0x20198150
 80176e8:	2019814c 	.word	0x2019814c

080176ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80176ec:	b510      	push	{r4, lr}
 80176ee:	4b07      	ldr	r3, [pc, #28]	; (801770c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80176f0:	781b      	ldrb	r3, [r3, #0]
 80176f2:	2b01      	cmp	r3, #1
 80176f4:	d108      	bne.n	8017708 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80176f6:	4b06      	ldr	r3, [pc, #24]	; (8017710 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80176f8:	880c      	ldrh	r4, [r1, #0]
 80176fa:	881b      	ldrh	r3, [r3, #0]
 80176fc:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017700:	3b01      	subs	r3, #1
 8017702:	1b1b      	subs	r3, r3, r4
 8017704:	8003      	strh	r3, [r0, #0]
 8017706:	800a      	strh	r2, [r1, #0]
 8017708:	bd10      	pop	{r4, pc}
 801770a:	bf00      	nop
 801770c:	20198150 	.word	0x20198150
 8017710:	2019814c 	.word	0x2019814c

08017714 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8017714:	b510      	push	{r4, lr}
 8017716:	4b0a      	ldr	r3, [pc, #40]	; (8017740 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8017718:	781b      	ldrb	r3, [r3, #0]
 801771a:	2b01      	cmp	r3, #1
 801771c:	d10e      	bne.n	801773c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801771e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017722:	8843      	ldrh	r3, [r0, #2]
 8017724:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017728:	18ca      	adds	r2, r1, r3
 801772a:	4b06      	ldr	r3, [pc, #24]	; (8017744 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801772c:	8044      	strh	r4, [r0, #2]
 801772e:	881b      	ldrh	r3, [r3, #0]
 8017730:	1a9b      	subs	r3, r3, r2
 8017732:	8003      	strh	r3, [r0, #0]
 8017734:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017738:	8081      	strh	r1, [r0, #4]
 801773a:	80c3      	strh	r3, [r0, #6]
 801773c:	bd10      	pop	{r4, pc}
 801773e:	bf00      	nop
 8017740:	20198150 	.word	0x20198150
 8017744:	2019814c 	.word	0x2019814c

08017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017748:	4b08      	ldr	r3, [pc, #32]	; (801776c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801774a:	781b      	ldrb	r3, [r3, #0]
 801774c:	2b01      	cmp	r3, #1
 801774e:	d10c      	bne.n	801776a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8017750:	8803      	ldrh	r3, [r0, #0]
 8017752:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8017756:	8842      	ldrh	r2, [r0, #2]
 8017758:	8002      	strh	r2, [r0, #0]
 801775a:	185a      	adds	r2, r3, r1
 801775c:	4b04      	ldr	r3, [pc, #16]	; (8017770 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801775e:	881b      	ldrh	r3, [r3, #0]
 8017760:	1a9b      	subs	r3, r3, r2
 8017762:	8043      	strh	r3, [r0, #2]
 8017764:	88c3      	ldrh	r3, [r0, #6]
 8017766:	80c1      	strh	r1, [r0, #6]
 8017768:	8083      	strh	r3, [r0, #4]
 801776a:	4770      	bx	lr
 801776c:	20198150 	.word	0x20198150
 8017770:	2019814c 	.word	0x2019814c

08017774 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017774:	b510      	push	{r4, lr}
 8017776:	4b07      	ldr	r3, [pc, #28]	; (8017794 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017778:	781b      	ldrb	r3, [r3, #0]
 801777a:	2b01      	cmp	r3, #1
 801777c:	d108      	bne.n	8017790 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801777e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017782:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017786:	8003      	strh	r3, [r0, #0]
 8017788:	8893      	ldrh	r3, [r2, #4]
 801778a:	3b01      	subs	r3, #1
 801778c:	1b1b      	subs	r3, r3, r4
 801778e:	800b      	strh	r3, [r1, #0]
 8017790:	bd10      	pop	{r4, pc}
 8017792:	bf00      	nop
 8017794:	20198150 	.word	0x20198150

08017798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017798:	b510      	push	{r4, lr}
 801779a:	4b0a      	ldr	r3, [pc, #40]	; (80177c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801779c:	460a      	mov	r2, r1
 801779e:	781b      	ldrb	r3, [r3, #0]
 80177a0:	2b01      	cmp	r3, #1
 80177a2:	d10d      	bne.n	80177c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80177a4:	8881      	ldrh	r1, [r0, #4]
 80177a6:	8803      	ldrh	r3, [r0, #0]
 80177a8:	440b      	add	r3, r1
 80177aa:	4601      	mov	r1, r0
 80177ac:	3b01      	subs	r3, #1
 80177ae:	f821 3b02 	strh.w	r3, [r1], #2
 80177b2:	f7ff ffdf 	bl	8017774 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80177b6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80177ba:	88c2      	ldrh	r2, [r0, #6]
 80177bc:	80c3      	strh	r3, [r0, #6]
 80177be:	8082      	strh	r2, [r0, #4]
 80177c0:	bd10      	pop	{r4, pc}
 80177c2:	bf00      	nop
 80177c4:	20198150 	.word	0x20198150

080177c8 <_ZN8touchgfx11Application13requestRedrawEv>:
 80177c8:	2100      	movs	r1, #0
 80177ca:	4b06      	ldr	r3, [pc, #24]	; (80177e4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80177cc:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 80177d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80177d4:	4b04      	ldr	r3, [pc, #16]	; (80177e8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80177d6:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 80177da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80177de:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 80177e2:	4770      	bx	lr
 80177e4:	2019814c 	.word	0x2019814c
 80177e8:	2019814e 	.word	0x2019814e

080177ec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80177ec:	4b03      	ldr	r3, [pc, #12]	; (80177fc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80177ee:	6818      	ldr	r0, [r3, #0]
 80177f0:	b110      	cbz	r0, 80177f8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80177f2:	6803      	ldr	r3, [r0, #0]
 80177f4:	699b      	ldr	r3, [r3, #24]
 80177f6:	4718      	bx	r3
 80177f8:	4770      	bx	lr
 80177fa:	bf00      	nop
 80177fc:	20198194 	.word	0x20198194

08017800 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8017800:	4770      	bx	lr
	...

08017804 <_ZN8touchgfx11Application4drawEv>:
 8017804:	b507      	push	{r0, r1, r2, lr}
 8017806:	2100      	movs	r1, #0
 8017808:	4b08      	ldr	r3, [pc, #32]	; (801782c <_ZN8touchgfx11Application4drawEv+0x28>)
 801780a:	9100      	str	r1, [sp, #0]
 801780c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017810:	4b07      	ldr	r3, [pc, #28]	; (8017830 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8017812:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017816:	f9b3 3000 	ldrsh.w	r3, [r3]
 801781a:	4669      	mov	r1, sp
 801781c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017820:	6803      	ldr	r3, [r0, #0]
 8017822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017824:	4798      	blx	r3
 8017826:	b003      	add	sp, #12
 8017828:	f85d fb04 	ldr.w	pc, [sp], #4
 801782c:	2019814c 	.word	0x2019814c
 8017830:	2019814e 	.word	0x2019814e

08017834 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017834:	4b03      	ldr	r3, [pc, #12]	; (8017844 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8017836:	6818      	ldr	r0, [r3, #0]
 8017838:	b110      	cbz	r0, 8017840 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801783a:	6803      	ldr	r3, [r0, #0]
 801783c:	69db      	ldr	r3, [r3, #28]
 801783e:	4718      	bx	r3
 8017840:	4770      	bx	lr
 8017842:	bf00      	nop
 8017844:	20198194 	.word	0x20198194

08017848 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8017848:	4b03      	ldr	r3, [pc, #12]	; (8017858 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801784a:	6818      	ldr	r0, [r3, #0]
 801784c:	b110      	cbz	r0, 8017854 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801784e:	6803      	ldr	r3, [r0, #0]
 8017850:	6a1b      	ldr	r3, [r3, #32]
 8017852:	4718      	bx	r3
 8017854:	4770      	bx	lr
 8017856:	bf00      	nop
 8017858:	20198194 	.word	0x20198194

0801785c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801785c:	2300      	movs	r3, #0
 801785e:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8017862:	4770      	bx	lr

08017864 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017864:	4b03      	ldr	r3, [pc, #12]	; (8017874 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8017866:	6818      	ldr	r0, [r3, #0]
 8017868:	b110      	cbz	r0, 8017870 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801786a:	6803      	ldr	r3, [r0, #0]
 801786c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801786e:	4718      	bx	r3
 8017870:	4770      	bx	lr
 8017872:	bf00      	nop
 8017874:	20198194 	.word	0x20198194

08017878 <_ZN8touchgfx11ApplicationD1Ev>:
 8017878:	4770      	bx	lr

0801787a <_ZN8touchgfx11ApplicationD0Ev>:
 801787a:	b510      	push	{r4, lr}
 801787c:	4604      	mov	r4, r0
 801787e:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8017882:	f010 fbfc 	bl	802807e <_ZdlPvj>
 8017886:	4620      	mov	r0, r4
 8017888:	bd10      	pop	{r4, pc}

0801788a <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801788a:	b510      	push	{r4, lr}
 801788c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017890:	888a      	ldrh	r2, [r1, #4]
 8017892:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017896:	4422      	add	r2, r4
 8017898:	b212      	sxth	r2, r2
 801789a:	4293      	cmp	r3, r2
 801789c:	da15      	bge.n	80178ca <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801789e:	8882      	ldrh	r2, [r0, #4]
 80178a0:	4413      	add	r3, r2
 80178a2:	b21b      	sxth	r3, r3
 80178a4:	429c      	cmp	r4, r3
 80178a6:	da10      	bge.n	80178ca <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80178a8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80178ac:	88c9      	ldrh	r1, [r1, #6]
 80178ae:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80178b2:	4419      	add	r1, r3
 80178b4:	b209      	sxth	r1, r1
 80178b6:	428a      	cmp	r2, r1
 80178b8:	da07      	bge.n	80178ca <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80178ba:	88c0      	ldrh	r0, [r0, #6]
 80178bc:	4410      	add	r0, r2
 80178be:	b200      	sxth	r0, r0
 80178c0:	4283      	cmp	r3, r0
 80178c2:	bfac      	ite	ge
 80178c4:	2000      	movge	r0, #0
 80178c6:	2001      	movlt	r0, #1
 80178c8:	bd10      	pop	{r4, pc}
 80178ca:	2000      	movs	r0, #0
 80178cc:	e7fc      	b.n	80178c8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080178ce <_ZN8touchgfx4Rect10restrictToEss>:
 80178ce:	f9b0 3000 	ldrsh.w	r3, [r0]
 80178d2:	b510      	push	{r4, lr}
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	da04      	bge.n	80178e2 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80178d8:	8884      	ldrh	r4, [r0, #4]
 80178da:	4423      	add	r3, r4
 80178dc:	8083      	strh	r3, [r0, #4]
 80178de:	2300      	movs	r3, #0
 80178e0:	8003      	strh	r3, [r0, #0]
 80178e2:	f9b0 4000 	ldrsh.w	r4, [r0]
 80178e6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80178ea:	1b09      	subs	r1, r1, r4
 80178ec:	428b      	cmp	r3, r1
 80178ee:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80178f2:	bfc8      	it	gt
 80178f4:	8081      	strhgt	r1, [r0, #4]
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	da04      	bge.n	8017904 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80178fa:	88c1      	ldrh	r1, [r0, #6]
 80178fc:	440b      	add	r3, r1
 80178fe:	80c3      	strh	r3, [r0, #6]
 8017900:	2300      	movs	r3, #0
 8017902:	8043      	strh	r3, [r0, #2]
 8017904:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017908:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801790c:	1a52      	subs	r2, r2, r1
 801790e:	4293      	cmp	r3, r2
 8017910:	bfc8      	it	gt
 8017912:	80c2      	strhgt	r2, [r0, #6]
 8017914:	bd10      	pop	{r4, pc}
	...

08017918 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8017918:	b510      	push	{r4, lr}
 801791a:	460c      	mov	r4, r1
 801791c:	4b0f      	ldr	r3, [pc, #60]	; (801795c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801791e:	4620      	mov	r0, r4
 8017920:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017924:	4b0e      	ldr	r3, [pc, #56]	; (8017960 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8017926:	f9b3 1000 	ldrsh.w	r1, [r3]
 801792a:	f7ff ffd0 	bl	80178ce <_ZN8touchgfx4Rect10restrictToEss>
 801792e:	4b0d      	ldr	r3, [pc, #52]	; (8017964 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8017930:	6818      	ldr	r0, [r3, #0]
 8017932:	b190      	cbz	r0, 801795a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8017934:	6803      	ldr	r3, [r0, #0]
 8017936:	4621      	mov	r1, r4
 8017938:	689b      	ldr	r3, [r3, #8]
 801793a:	4798      	blx	r3
 801793c:	4b0a      	ldr	r3, [pc, #40]	; (8017968 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801793e:	6818      	ldr	r0, [r3, #0]
 8017940:	b118      	cbz	r0, 801794a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8017942:	6803      	ldr	r3, [r0, #0]
 8017944:	4621      	mov	r1, r4
 8017946:	689b      	ldr	r3, [r3, #8]
 8017948:	4798      	blx	r3
 801794a:	4b08      	ldr	r3, [pc, #32]	; (801796c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801794c:	4621      	mov	r1, r4
 801794e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017952:	6818      	ldr	r0, [r3, #0]
 8017954:	6803      	ldr	r3, [r0, #0]
 8017956:	69db      	ldr	r3, [r3, #28]
 8017958:	4718      	bx	r3
 801795a:	bd10      	pop	{r4, pc}
 801795c:	2019814e 	.word	0x2019814e
 8017960:	2019814c 	.word	0x2019814c
 8017964:	20198194 	.word	0x20198194
 8017968:	20198190 	.word	0x20198190
 801796c:	20198158 	.word	0x20198158

08017970 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8017970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017972:	4606      	mov	r6, r0
 8017974:	4608      	mov	r0, r1
 8017976:	460f      	mov	r7, r1
 8017978:	f7fe f823 	bl	80159c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801797c:	b9e8      	cbnz	r0, 80179ba <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801797e:	f9b7 5000 	ldrsh.w	r5, [r7]
 8017982:	f9b6 4000 	ldrsh.w	r4, [r6]
 8017986:	42a5      	cmp	r5, r4
 8017988:	db17      	blt.n	80179ba <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801798a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801798e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017992:	429a      	cmp	r2, r3
 8017994:	db11      	blt.n	80179ba <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017996:	88b9      	ldrh	r1, [r7, #4]
 8017998:	440d      	add	r5, r1
 801799a:	88b1      	ldrh	r1, [r6, #4]
 801799c:	b22d      	sxth	r5, r5
 801799e:	440c      	add	r4, r1
 80179a0:	b224      	sxth	r4, r4
 80179a2:	42a5      	cmp	r5, r4
 80179a4:	dc09      	bgt.n	80179ba <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80179a6:	88f8      	ldrh	r0, [r7, #6]
 80179a8:	4410      	add	r0, r2
 80179aa:	88f2      	ldrh	r2, [r6, #6]
 80179ac:	b200      	sxth	r0, r0
 80179ae:	4413      	add	r3, r2
 80179b0:	b21b      	sxth	r3, r3
 80179b2:	4298      	cmp	r0, r3
 80179b4:	bfcc      	ite	gt
 80179b6:	2000      	movgt	r0, #0
 80179b8:	2001      	movle	r0, #1
 80179ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080179bc <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80179bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179be:	4604      	mov	r4, r0
 80179c0:	4608      	mov	r0, r1
 80179c2:	460d      	mov	r5, r1
 80179c4:	f7fd fffd 	bl	80159c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80179c8:	b978      	cbnz	r0, 80179ea <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80179ca:	4620      	mov	r0, r4
 80179cc:	f7fd fff9 	bl	80159c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80179d0:	f9b5 6000 	ldrsh.w	r6, [r5]
 80179d4:	b150      	cbz	r0, 80179ec <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80179d6:	8026      	strh	r6, [r4, #0]
 80179d8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80179dc:	8063      	strh	r3, [r4, #2]
 80179de:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80179e2:	80a3      	strh	r3, [r4, #4]
 80179e4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80179e8:	80e3      	strh	r3, [r4, #6]
 80179ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179ec:	f9b4 1000 	ldrsh.w	r1, [r4]
 80179f0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80179f4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80179f8:	42b1      	cmp	r1, r6
 80179fa:	460f      	mov	r7, r1
 80179fc:	bfa8      	it	ge
 80179fe:	4637      	movge	r7, r6
 8017a00:	4293      	cmp	r3, r2
 8017a02:	4618      	mov	r0, r3
 8017a04:	bfa8      	it	ge
 8017a06:	4610      	movge	r0, r2
 8017a08:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8017a0c:	88ed      	ldrh	r5, [r5, #6]
 8017a0e:	4466      	add	r6, ip
 8017a10:	442a      	add	r2, r5
 8017a12:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017a16:	88e5      	ldrh	r5, [r4, #6]
 8017a18:	4461      	add	r1, ip
 8017a1a:	442b      	add	r3, r5
 8017a1c:	b236      	sxth	r6, r6
 8017a1e:	b209      	sxth	r1, r1
 8017a20:	b212      	sxth	r2, r2
 8017a22:	b21b      	sxth	r3, r3
 8017a24:	428e      	cmp	r6, r1
 8017a26:	bfac      	ite	ge
 8017a28:	ebc7 0106 	rsbge	r1, r7, r6
 8017a2c:	ebc7 0101 	rsblt	r1, r7, r1
 8017a30:	429a      	cmp	r2, r3
 8017a32:	bfac      	ite	ge
 8017a34:	ebc0 0202 	rsbge	r2, r0, r2
 8017a38:	ebc0 0203 	rsblt	r2, r0, r3
 8017a3c:	8027      	strh	r7, [r4, #0]
 8017a3e:	8060      	strh	r0, [r4, #2]
 8017a40:	80a1      	strh	r1, [r4, #4]
 8017a42:	80e2      	strh	r2, [r4, #6]
 8017a44:	e7d1      	b.n	80179ea <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08017a48 <_ZN8touchgfx11Application11getInstanceEv>:
 8017a48:	4b01      	ldr	r3, [pc, #4]	; (8017a50 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8017a4a:	6818      	ldr	r0, [r3, #0]
 8017a4c:	4770      	bx	lr
 8017a4e:	bf00      	nop
 8017a50:	201981a4 	.word	0x201981a4

08017a54 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8017a54:	2300      	movs	r3, #0
 8017a56:	b510      	push	{r4, lr}
 8017a58:	4604      	mov	r4, r0
 8017a5a:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8017a5e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8017a62:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8017a66:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8017a6a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8017a6e:	429a      	cmp	r2, r3
 8017a70:	d90e      	bls.n	8017a90 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8017a72:	18e2      	adds	r2, r4, r3
 8017a74:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8017a78:	b122      	cbz	r2, 8017a84 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8017a7a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8017a7e:	6803      	ldr	r3, [r0, #0]
 8017a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a82:	4798      	blx	r3
 8017a84:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8017a88:	3301      	adds	r3, #1
 8017a8a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8017a8e:	e7ea      	b.n	8017a66 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8017a90:	bd10      	pop	{r4, pc}

08017a92 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8017a92:	2300      	movs	r3, #0
 8017a94:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8017a98:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8017a9c:	30a4      	adds	r0, #164	; 0xa4
 8017a9e:	f802 3b01 	strb.w	r3, [r2], #1
 8017aa2:	4282      	cmp	r2, r0
 8017aa4:	d1fb      	bne.n	8017a9e <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8017aa6:	4770      	bx	lr

08017aa8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017aa8:	b570      	push	{r4, r5, r6, lr}
 8017aaa:	4c0b      	ldr	r4, [pc, #44]	; (8017ad8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8017aac:	4605      	mov	r5, r0
 8017aae:	6820      	ldr	r0, [r4, #0]
 8017ab0:	460e      	mov	r6, r1
 8017ab2:	b110      	cbz	r0, 8017aba <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8017ab4:	6803      	ldr	r3, [r0, #0]
 8017ab6:	695b      	ldr	r3, [r3, #20]
 8017ab8:	4798      	blx	r3
 8017aba:	1d28      	adds	r0, r5, #4
 8017abc:	f7ff ffe9 	bl	8017a92 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8017ac0:	6026      	str	r6, [r4, #0]
 8017ac2:	6833      	ldr	r3, [r6, #0]
 8017ac4:	4630      	mov	r0, r6
 8017ac6:	68db      	ldr	r3, [r3, #12]
 8017ac8:	4798      	blx	r3
 8017aca:	682b      	ldr	r3, [r5, #0]
 8017acc:	4628      	mov	r0, r5
 8017ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ad4:	4718      	bx	r3
 8017ad6:	bf00      	nop
 8017ad8:	20198194 	.word	0x20198194

08017adc <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8017adc:	2300      	movs	r3, #0
 8017ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ae0:	461a      	mov	r2, r3
 8017ae2:	461c      	mov	r4, r3
 8017ae4:	461d      	mov	r5, r3
 8017ae6:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8017aea:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8017aee:	459c      	cmp	ip, r3
 8017af0:	dd1a      	ble.n	8017b28 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8017af2:	18c6      	adds	r6, r0, r3
 8017af4:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8017af8:	b16e      	cbz	r6, 8017b16 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8017afa:	429a      	cmp	r2, r3
 8017afc:	d008      	beq.n	8017b10 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8017afe:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8017b02:	fa1f fe82 	uxth.w	lr, r2
 8017b06:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8017b0a:	1887      	adds	r7, r0, r2
 8017b0c:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8017b10:	3201      	adds	r2, #1
 8017b12:	3301      	adds	r3, #1
 8017b14:	e7eb      	b.n	8017aee <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8017b16:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8017b1a:	4299      	cmp	r1, r3
 8017b1c:	bfa8      	it	ge
 8017b1e:	3501      	addge	r5, #1
 8017b20:	429e      	cmp	r6, r3
 8017b22:	bfc8      	it	gt
 8017b24:	3401      	addgt	r4, #1
 8017b26:	e7f4      	b.n	8017b12 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8017b28:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8017b2c:	1b49      	subs	r1, r1, r5
 8017b2e:	1b1b      	subs	r3, r3, r4
 8017b30:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8017b34:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8017b38:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8017b3c:	4293      	cmp	r3, r2
 8017b3e:	dd03      	ble.n	8017b48 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8017b40:	3b01      	subs	r3, #1
 8017b42:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8017b46:	e7f7      	b.n	8017b38 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8017b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017b4c <_ZN8touchgfx11Application15handleTickEventEv>:
 8017b4c:	b570      	push	{r4, r5, r6, lr}
 8017b4e:	4d16      	ldr	r5, [pc, #88]	; (8017ba8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8017b50:	4604      	mov	r4, r0
 8017b52:	6828      	ldr	r0, [r5, #0]
 8017b54:	b140      	cbz	r0, 8017b68 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017b56:	7a03      	ldrb	r3, [r0, #8]
 8017b58:	b933      	cbnz	r3, 8017b68 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017b5a:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8017b5e:	6803      	ldr	r3, [r0, #0]
 8017b60:	689b      	ldr	r3, [r3, #8]
 8017b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b66:	4718      	bx	r3
 8017b68:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8017b6c:	4e0f      	ldr	r6, [pc, #60]	; (8017bac <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8017b6e:	b973      	cbnz	r3, 8017b8e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017b70:	b168      	cbz	r0, 8017b8e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017b72:	7a03      	ldrb	r3, [r0, #8]
 8017b74:	b15b      	cbz	r3, 8017b8e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017b76:	6830      	ldr	r0, [r6, #0]
 8017b78:	b110      	cbz	r0, 8017b80 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8017b7a:	6803      	ldr	r3, [r0, #0]
 8017b7c:	691b      	ldr	r3, [r3, #16]
 8017b7e:	4798      	blx	r3
 8017b80:	6828      	ldr	r0, [r5, #0]
 8017b82:	6803      	ldr	r3, [r0, #0]
 8017b84:	68db      	ldr	r3, [r3, #12]
 8017b86:	4798      	blx	r3
 8017b88:	2301      	movs	r3, #1
 8017b8a:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8017b8e:	3404      	adds	r4, #4
 8017b90:	4620      	mov	r0, r4
 8017b92:	f7ff ff5f 	bl	8017a54 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8017b96:	4620      	mov	r0, r4
 8017b98:	f7ff ffa0 	bl	8017adc <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8017b9c:	6830      	ldr	r0, [r6, #0]
 8017b9e:	b110      	cbz	r0, 8017ba6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8017ba0:	6803      	ldr	r3, [r0, #0]
 8017ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ba4:	e7dd      	b.n	8017b62 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8017ba6:	bd70      	pop	{r4, r5, r6, pc}
 8017ba8:	20198198 	.word	0x20198198
 8017bac:	20198194 	.word	0x20198194

08017bb0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8017bb8:	801a      	strh	r2, [r3, #0]
 8017bba:	805a      	strh	r2, [r3, #2]
 8017bbc:	809a      	strh	r2, [r3, #4]
 8017bbe:	80da      	strh	r2, [r3, #6]
 8017bc0:	3308      	adds	r3, #8
 8017bc2:	428b      	cmp	r3, r1
 8017bc4:	d1f8      	bne.n	8017bb8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8017bc6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8017bca:	4770      	bx	lr

08017bcc <_ZN8touchgfx11ApplicationC1Ev>:
 8017bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bce:	4606      	mov	r6, r0
 8017bd0:	4604      	mov	r4, r0
 8017bd2:	2500      	movs	r5, #0
 8017bd4:	4b1b      	ldr	r3, [pc, #108]	; (8017c44 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8017bd6:	22a8      	movs	r2, #168	; 0xa8
 8017bd8:	f846 3b04 	str.w	r3, [r6], #4
 8017bdc:	2100      	movs	r1, #0
 8017bde:	4630      	mov	r0, r6
 8017be0:	f010 fb05 	bl	80281ee <memset>
 8017be4:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8017be8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8017bec:	f7ff ffe0 	bl	8017bb0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017bf0:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8017bf4:	f7ff ffdc 	bl	8017bb0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017bf8:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8017bfc:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8017c00:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8017c04:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8017c08:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8017c0c:	490e      	ldr	r1, [pc, #56]	; (8017c48 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8017c0e:	480f      	ldr	r0, [pc, #60]	; (8017c4c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8017c10:	f002 fc86 	bl	801a520 <CRC_Lock>
 8017c14:	4f0e      	ldr	r7, [pc, #56]	; (8017c50 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8017c16:	4b0f      	ldr	r3, [pc, #60]	; (8017c54 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8017c18:	b158      	cbz	r0, 8017c32 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8017c1a:	801d      	strh	r5, [r3, #0]
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	4a0e      	ldr	r2, [pc, #56]	; (8017c58 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8017c20:	4630      	mov	r0, r6
 8017c22:	6013      	str	r3, [r2, #0]
 8017c24:	4a0d      	ldr	r2, [pc, #52]	; (8017c5c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8017c26:	603b      	str	r3, [r7, #0]
 8017c28:	6013      	str	r3, [r2, #0]
 8017c2a:	f7ff ff32 	bl	8017a92 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8017c2e:	4620      	mov	r0, r4
 8017c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017c36:	2002      	movs	r0, #2
 8017c38:	801a      	strh	r2, [r3, #0]
 8017c3a:	6038      	str	r0, [r7, #0]
 8017c3c:	f001 fa28 	bl	8019090 <_ZN8touchgfx6Screen4drawEv>
 8017c40:	e7ec      	b.n	8017c1c <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8017c42:	bf00      	nop
 8017c44:	0802aa4c 	.word	0x0802aa4c
 8017c48:	b5e8b5cd 	.word	0xb5e8b5cd
 8017c4c:	f407a5c2 	.word	0xf407a5c2
 8017c50:	20198194 	.word	0x20198194
 8017c54:	20000058 	.word	0x20000058
 8017c58:	201981a4 	.word	0x201981a4
 8017c5c:	20198198 	.word	0x20198198

08017c60 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8017c60:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8017c64:	b510      	push	{r4, lr}
 8017c66:	3b01      	subs	r3, #1
 8017c68:	b29b      	uxth	r3, r3
 8017c6a:	428b      	cmp	r3, r1
 8017c6c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8017c70:	d908      	bls.n	8017c84 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8017c72:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8017c76:	681a      	ldr	r2, [r3, #0]
 8017c78:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8017c7c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8017c80:	685a      	ldr	r2, [r3, #4]
 8017c82:	6062      	str	r2, [r4, #4]
 8017c84:	bd10      	pop	{r4, pc}
	...

08017c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8017c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c8c:	4b8f      	ldr	r3, [pc, #572]	; (8017ecc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8017c8e:	b08f      	sub	sp, #60	; 0x3c
 8017c90:	ac0a      	add	r4, sp, #40	; 0x28
 8017c92:	e884 0006 	stmia.w	r4, {r1, r2}
 8017c96:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017c9a:	4b8d      	ldr	r3, [pc, #564]	; (8017ed0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8017c9c:	4683      	mov	fp, r0
 8017c9e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017ca2:	4620      	mov	r0, r4
 8017ca4:	f7ff fe13 	bl	80178ce <_ZN8touchgfx4Rect10restrictToEss>
 8017ca8:	4620      	mov	r0, r4
 8017caa:	f7fd fe8a 	bl	80159c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017cae:	2800      	cmp	r0, #0
 8017cb0:	d16a      	bne.n	8017d88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017cb2:	9403      	str	r4, [sp, #12]
 8017cb4:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8017cb8:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8017cbc:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8017cc0:	35a4      	adds	r5, #164	; 0xa4
 8017cc2:	9301      	str	r3, [sp, #4]
 8017cc4:	b15c      	cbz	r4, 8017cde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8017cc6:	4629      	mov	r1, r5
 8017cc8:	9803      	ldr	r0, [sp, #12]
 8017cca:	f7ff fe51 	bl	8017970 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017cce:	3c01      	subs	r4, #1
 8017cd0:	b118      	cbz	r0, 8017cda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8017cd2:	b2a1      	uxth	r1, r4
 8017cd4:	9801      	ldr	r0, [sp, #4]
 8017cd6:	f7ff ffc3 	bl	8017c60 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017cda:	3d08      	subs	r5, #8
 8017cdc:	e7f2      	b.n	8017cc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8017cde:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 8017ce2:	f108 33ff 	add.w	r3, r8, #4294967295
 8017ce6:	9302      	str	r3, [sp, #8]
 8017ce8:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8017cec:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8017cf0:	f8cd 8010 	str.w	r8, [sp, #16]
 8017cf4:	9306      	str	r3, [sp, #24]
 8017cf6:	445c      	add	r4, fp
 8017cf8:	2500      	movs	r5, #0
 8017cfa:	4626      	mov	r6, r4
 8017cfc:	462f      	mov	r7, r5
 8017cfe:	f8cd 8014 	str.w	r8, [sp, #20]
 8017d02:	9b05      	ldr	r3, [sp, #20]
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d073      	beq.n	8017df0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017d08:	9903      	ldr	r1, [sp, #12]
 8017d0a:	4630      	mov	r0, r6
 8017d0c:	f7ff fdbd 	bl	801788a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017d10:	b350      	cbz	r0, 8017d68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017d12:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8017d16:	f9b6 c000 	ldrsh.w	ip, [r6]
 8017d1a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8017d1e:	45e6      	cmp	lr, ip
 8017d20:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8017d24:	db33      	blt.n	8017d8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8017d26:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8017d2a:	88b3      	ldrh	r3, [r6, #4]
 8017d2c:	4472      	add	r2, lr
 8017d2e:	4463      	add	r3, ip
 8017d30:	b212      	sxth	r2, r2
 8017d32:	b21b      	sxth	r3, r3
 8017d34:	429a      	cmp	r2, r3
 8017d36:	dc2a      	bgt.n	8017d8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8017d38:	88f3      	ldrh	r3, [r6, #6]
 8017d3a:	fa1f f289 	uxth.w	r2, r9
 8017d3e:	4413      	add	r3, r2
 8017d40:	b29b      	uxth	r3, r3
 8017d42:	45ca      	cmp	sl, r9
 8017d44:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8017d48:	fa0f fe83 	sxth.w	lr, r3
 8017d4c:	fa1f fc8a 	uxth.w	ip, sl
 8017d50:	db0f      	blt.n	8017d72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8017d52:	eba3 030c 	sub.w	r3, r3, ip
 8017d56:	1ac9      	subs	r1, r1, r3
 8017d58:	b209      	sxth	r1, r1
 8017d5a:	2900      	cmp	r1, #0
 8017d5c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017d60:	dd12      	ble.n	8017d88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017d62:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8017d66:	4605      	mov	r5, r0
 8017d68:	9b05      	ldr	r3, [sp, #20]
 8017d6a:	3e08      	subs	r6, #8
 8017d6c:	3b01      	subs	r3, #1
 8017d6e:	9305      	str	r3, [sp, #20]
 8017d70:	e7c7      	b.n	8017d02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8017d72:	4461      	add	r1, ip
 8017d74:	b209      	sxth	r1, r1
 8017d76:	4571      	cmp	r1, lr
 8017d78:	dc38      	bgt.n	8017dec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017d7a:	eba2 020c 	sub.w	r2, r2, ip
 8017d7e:	b212      	sxth	r2, r2
 8017d80:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8017d84:	2a00      	cmp	r2, #0
 8017d86:	dcee      	bgt.n	8017d66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8017d88:	b00f      	add	sp, #60	; 0x3c
 8017d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d8e:	45ca      	cmp	sl, r9
 8017d90:	db2c      	blt.n	8017dec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017d92:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8017d96:	449a      	add	sl, r3
 8017d98:	88f3      	ldrh	r3, [r6, #6]
 8017d9a:	fa0f fa8a 	sxth.w	sl, sl
 8017d9e:	4499      	add	r9, r3
 8017da0:	fa0f f989 	sxth.w	r9, r9
 8017da4:	45ca      	cmp	sl, r9
 8017da6:	dc21      	bgt.n	8017dec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017da8:	88b3      	ldrh	r3, [r6, #4]
 8017daa:	fa1f f28c 	uxth.w	r2, ip
 8017dae:	4413      	add	r3, r2
 8017db0:	b29b      	uxth	r3, r3
 8017db2:	45e6      	cmp	lr, ip
 8017db4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8017db8:	fa1f f98e 	uxth.w	r9, lr
 8017dbc:	fa0f fa83 	sxth.w	sl, r3
 8017dc0:	db0a      	blt.n	8017dd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8017dc2:	eba3 0309 	sub.w	r3, r3, r9
 8017dc6:	1ac9      	subs	r1, r1, r3
 8017dc8:	b209      	sxth	r1, r1
 8017dca:	2900      	cmp	r1, #0
 8017dcc:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8017dd0:	ddda      	ble.n	8017d88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017dd2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8017dd6:	e7c6      	b.n	8017d66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8017dd8:	4449      	add	r1, r9
 8017dda:	b209      	sxth	r1, r1
 8017ddc:	4551      	cmp	r1, sl
 8017dde:	dc05      	bgt.n	8017dec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017de0:	eba2 0209 	sub.w	r2, r2, r9
 8017de4:	b212      	sxth	r2, r2
 8017de6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8017dea:	e7cb      	b.n	8017d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8017dec:	4607      	mov	r7, r0
 8017dee:	e7bb      	b.n	8017d68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017df0:	2d00      	cmp	r5, #0
 8017df2:	d181      	bne.n	8017cf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8017df4:	2f00      	cmp	r7, #0
 8017df6:	f000 81de 	beq.w	80181b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8017dfa:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8017dfe:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8017e02:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8017e06:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8017e0a:	b2b9      	uxth	r1, r7
 8017e0c:	b2b3      	uxth	r3, r6
 8017e0e:	441a      	add	r2, r3
 8017e10:	448a      	add	sl, r1
 8017e12:	b292      	uxth	r2, r2
 8017e14:	fa1f fa8a 	uxth.w	sl, sl
 8017e18:	fa0f f882 	sxth.w	r8, r2
 8017e1c:	9105      	str	r1, [sp, #20]
 8017e1e:	fa0f f98a 	sxth.w	r9, sl
 8017e22:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8017e26:	9b04      	ldr	r3, [sp, #16]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d053      	beq.n	8017ed4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8017e2c:	9903      	ldr	r1, [sp, #12]
 8017e2e:	4620      	mov	r0, r4
 8017e30:	f7ff fd2b 	bl	801788a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017e34:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017e38:	b1c0      	cbz	r0, 8017e6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017e3a:	f9b4 e000 	ldrsh.w	lr, [r4]
 8017e3e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017e42:	4576      	cmp	r6, lr
 8017e44:	dc23      	bgt.n	8017e8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8017e46:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017e4a:	44f4      	add	ip, lr
 8017e4c:	fa0f fc8c 	sxth.w	ip, ip
 8017e50:	45e0      	cmp	r8, ip
 8017e52:	db1c      	blt.n	8017e8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8017e54:	428f      	cmp	r7, r1
 8017e56:	fa1f fc81 	uxth.w	ip, r1
 8017e5a:	88e1      	ldrh	r1, [r4, #6]
 8017e5c:	dc0d      	bgt.n	8017e7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8017e5e:	ebaa 0c0c 	sub.w	ip, sl, ip
 8017e62:	eba1 010c 	sub.w	r1, r1, ip
 8017e66:	f8a4 9002 	strh.w	r9, [r4, #2]
 8017e6a:	80e1      	strh	r1, [r4, #6]
 8017e6c:	4628      	mov	r0, r5
 8017e6e:	9904      	ldr	r1, [sp, #16]
 8017e70:	3c08      	subs	r4, #8
 8017e72:	3901      	subs	r1, #1
 8017e74:	9104      	str	r1, [sp, #16]
 8017e76:	4605      	mov	r5, r0
 8017e78:	e7d3      	b.n	8017e22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 8017e7a:	4461      	add	r1, ip
 8017e7c:	b209      	sxth	r1, r1
 8017e7e:	4549      	cmp	r1, r9
 8017e80:	dcf5      	bgt.n	8017e6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017e82:	9905      	ldr	r1, [sp, #20]
 8017e84:	eba1 0c0c 	sub.w	ip, r1, ip
 8017e88:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017e8c:	e7ee      	b.n	8017e6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017e8e:	428f      	cmp	r7, r1
 8017e90:	dced      	bgt.n	8017e6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017e92:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8017e96:	4461      	add	r1, ip
 8017e98:	b209      	sxth	r1, r1
 8017e9a:	4589      	cmp	r9, r1
 8017e9c:	dbe7      	blt.n	8017e6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017e9e:	4576      	cmp	r6, lr
 8017ea0:	fa1f fc8e 	uxth.w	ip, lr
 8017ea4:	88a1      	ldrh	r1, [r4, #4]
 8017ea6:	dc07      	bgt.n	8017eb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8017ea8:	eba2 0c0c 	sub.w	ip, r2, ip
 8017eac:	eba1 010c 	sub.w	r1, r1, ip
 8017eb0:	f8a4 8000 	strh.w	r8, [r4]
 8017eb4:	80a1      	strh	r1, [r4, #4]
 8017eb6:	e7d9      	b.n	8017e6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017eb8:	4461      	add	r1, ip
 8017eba:	b209      	sxth	r1, r1
 8017ebc:	4588      	cmp	r8, r1
 8017ebe:	dbd6      	blt.n	8017e6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017ec0:	eba3 0c0c 	sub.w	ip, r3, ip
 8017ec4:	f8a4 c004 	strh.w	ip, [r4, #4]
 8017ec8:	e7d0      	b.n	8017e6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017eca:	bf00      	nop
 8017ecc:	2019814e 	.word	0x2019814e
 8017ed0:	2019814c 	.word	0x2019814c
 8017ed4:	2d00      	cmp	r5, #0
 8017ed6:	f000 816e 	beq.w	80181b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8017eda:	9b06      	ldr	r3, [sp, #24]
 8017edc:	445b      	add	r3, fp
 8017ede:	461c      	mov	r4, r3
 8017ee0:	9b02      	ldr	r3, [sp, #8]
 8017ee2:	3301      	adds	r3, #1
 8017ee4:	f000 8167 	beq.w	80181b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8017ee8:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8017eec:	4629      	mov	r1, r5
 8017eee:	9803      	ldr	r0, [sp, #12]
 8017ef0:	f7ff fd3e 	bl	8017970 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017ef4:	b120      	cbz	r0, 8017f00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8017ef6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8017efa:	9801      	ldr	r0, [sp, #4]
 8017efc:	f7ff feb0 	bl	8017c60 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017f00:	9903      	ldr	r1, [sp, #12]
 8017f02:	4628      	mov	r0, r5
 8017f04:	f7ff fcc1 	bl	801788a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017f08:	2800      	cmp	r0, #0
 8017f0a:	f000 809c 	beq.w	8018046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8017f0e:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8017f12:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8017f16:	fa1f f189 	uxth.w	r1, r9
 8017f1a:	eb01 0c03 	add.w	ip, r1, r3
 8017f1e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8017f22:	fa1f fa8c 	uxth.w	sl, ip
 8017f26:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8017f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8017f2c:	b283      	uxth	r3, r0
 8017f2e:	eb03 050c 	add.w	r5, r3, ip
 8017f32:	b2ad      	uxth	r5, r5
 8017f34:	9505      	str	r5, [sp, #20]
 8017f36:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8017f3a:	4548      	cmp	r0, r9
 8017f3c:	9504      	str	r5, [sp, #16]
 8017f3e:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8017f42:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8017f46:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8017f4a:	f340 8099 	ble.w	8018080 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8017f4e:	1a5b      	subs	r3, r3, r1
 8017f50:	b29b      	uxth	r3, r3
 8017f52:	4596      	cmp	lr, r2
 8017f54:	fa0f f08a 	sxth.w	r0, sl
 8017f58:	b21e      	sxth	r6, r3
 8017f5a:	dd2e      	ble.n	8017fba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8017f5c:	9f02      	ldr	r7, [sp, #8]
 8017f5e:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8017f62:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8017f66:	9f04      	ldr	r7, [sp, #16]
 8017f68:	fa1f fe8e 	uxth.w	lr, lr
 8017f6c:	1a3f      	subs	r7, r7, r0
 8017f6e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8017f72:	b292      	uxth	r2, r2
 8017f74:	ebae 0102 	sub.w	r1, lr, r2
 8017f78:	44a6      	add	lr, r4
 8017f7a:	4402      	add	r2, r0
 8017f7c:	b289      	uxth	r1, r1
 8017f7e:	fa0f fe8e 	sxth.w	lr, lr
 8017f82:	b212      	sxth	r2, r2
 8017f84:	b20d      	sxth	r5, r1
 8017f86:	ebae 0202 	sub.w	r2, lr, r2
 8017f8a:	436f      	muls	r7, r5
 8017f8c:	4372      	muls	r2, r6
 8017f8e:	4297      	cmp	r7, r2
 8017f90:	db09      	blt.n	8017fa6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8017f92:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8017f96:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 8017f9a:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8017f9e:	449c      	add	ip, r3
 8017fa0:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8017fa4:	e686      	b.n	8017cb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017fa6:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8017faa:	4421      	add	r1, r4
 8017fac:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8017fb0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017fb4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8017fb8:	e67c      	b.n	8017cb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017fba:	9f04      	ldr	r7, [sp, #16]
 8017fbc:	42b8      	cmp	r0, r7
 8017fbe:	da27      	bge.n	8018010 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8017fc0:	9902      	ldr	r1, [sp, #8]
 8017fc2:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8017fc6:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8017fca:	eb05 010e 	add.w	r1, r5, lr
 8017fce:	fa1f f881 	uxth.w	r8, r1
 8017fd2:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8017fd6:	fa0f f988 	sxth.w	r9, r8
 8017fda:	4411      	add	r1, r2
 8017fdc:	eba1 0108 	sub.w	r1, r1, r8
 8017fe0:	b289      	uxth	r1, r1
 8017fe2:	fa0f f881 	sxth.w	r8, r1
 8017fe6:	eba2 020e 	sub.w	r2, r2, lr
 8017fea:	1a3f      	subs	r7, r7, r0
 8017fec:	4372      	muls	r2, r6
 8017fee:	fb08 f707 	mul.w	r7, r8, r7
 8017ff2:	42ba      	cmp	r2, r7
 8017ff4:	dc06      	bgt.n	8018004 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8017ff6:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 8017ffa:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8017ffe:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8018002:	e7ca      	b.n	8017f9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8018004:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8018008:	4429      	add	r1, r5
 801800a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801800e:	e651      	b.n	8017cb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018010:	9805      	ldr	r0, [sp, #20]
 8018012:	2d06      	cmp	r5, #6
 8018014:	ebaa 0000 	sub.w	r0, sl, r0
 8018018:	b280      	uxth	r0, r0
 801801a:	fa0f fe80 	sxth.w	lr, r0
 801801e:	d817      	bhi.n	8018050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8018020:	9b04      	ldr	r3, [sp, #16]
 8018022:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8018026:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801802a:	1c6b      	adds	r3, r5, #1
 801802c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8018030:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8018034:	9b01      	ldr	r3, [sp, #4]
 8018036:	9801      	ldr	r0, [sp, #4]
 8018038:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801803c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8018040:	805a      	strh	r2, [r3, #2]
 8018042:	809e      	strh	r6, [r3, #4]
 8018044:	80d9      	strh	r1, [r3, #6]
 8018046:	9b02      	ldr	r3, [sp, #8]
 8018048:	3c08      	subs	r4, #8
 801804a:	3b01      	subs	r3, #1
 801804c:	9302      	str	r3, [sp, #8]
 801804e:	e747      	b.n	8017ee0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8018050:	9a02      	ldr	r2, [sp, #8]
 8018052:	45b6      	cmp	lr, r6
 8018054:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8018058:	db0d      	blt.n	8018076 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801805a:	449c      	add	ip, r3
 801805c:	fa1f fc8c 	uxth.w	ip, ip
 8018060:	445a      	add	r2, fp
 8018062:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8018066:	448c      	add	ip, r1
 8018068:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801806c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8018070:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8018074:	e61e      	b.n	8017cb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018076:	445a      	add	r2, fp
 8018078:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801807c:	4484      	add	ip, r0
 801807e:	e78f      	b.n	8017fa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8018080:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8018084:	fa1f f18e 	uxth.w	r1, lr
 8018088:	eb01 0806 	add.w	r8, r1, r6
 801808c:	b293      	uxth	r3, r2
 801808e:	fa1f f888 	uxth.w	r8, r8
 8018092:	9306      	str	r3, [sp, #24]
 8018094:	fa0f f388 	sxth.w	r3, r8
 8018098:	9307      	str	r3, [sp, #28]
 801809a:	9f06      	ldr	r7, [sp, #24]
 801809c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 80180a0:	4596      	cmp	lr, r2
 80180a2:	443b      	add	r3, r7
 80180a4:	b29b      	uxth	r3, r3
 80180a6:	9308      	str	r3, [sp, #32]
 80180a8:	da24      	bge.n	80180f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 80180aa:	9905      	ldr	r1, [sp, #20]
 80180ac:	eba3 0308 	sub.w	r3, r3, r8
 80180b0:	ebaa 0401 	sub.w	r4, sl, r1
 80180b4:	b2a4      	uxth	r4, r4
 80180b6:	b29b      	uxth	r3, r3
 80180b8:	b225      	sxth	r5, r4
 80180ba:	b219      	sxth	r1, r3
 80180bc:	eba2 020e 	sub.w	r2, r2, lr
 80180c0:	eba9 0000 	sub.w	r0, r9, r0
 80180c4:	436a      	muls	r2, r5
 80180c6:	4348      	muls	r0, r1
 80180c8:	4282      	cmp	r2, r0
 80180ca:	9a02      	ldr	r2, [sp, #8]
 80180cc:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80180d0:	445a      	add	r2, fp
 80180d2:	dc06      	bgt.n	80180e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80180d4:	9b07      	ldr	r3, [sp, #28]
 80180d6:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 80180da:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 80180de:	44a4      	add	ip, r4
 80180e0:	e75e      	b.n	8017fa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80180e2:	9904      	ldr	r1, [sp, #16]
 80180e4:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 80180e8:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 80180ec:	4433      	add	r3, r6
 80180ee:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80180f2:	e5df      	b.n	8017cb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80180f4:	9f06      	ldr	r7, [sp, #24]
 80180f6:	9b04      	ldr	r3, [sp, #16]
 80180f8:	1bc9      	subs	r1, r1, r7
 80180fa:	fa0f f78a 	sxth.w	r7, sl
 80180fe:	b289      	uxth	r1, r1
 8018100:	429f      	cmp	r7, r3
 8018102:	fa0f fe81 	sxth.w	lr, r1
 8018106:	dd24      	ble.n	8018152 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4ca>
 8018108:	9a05      	ldr	r2, [sp, #20]
 801810a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801810e:	ebaa 0202 	sub.w	r2, sl, r2
 8018112:	9d07      	ldr	r5, [sp, #28]
 8018114:	b292      	uxth	r2, r2
 8018116:	eba5 0a03 	sub.w	sl, r5, r3
 801811a:	b214      	sxth	r4, r2
 801811c:	eba9 0000 	sub.w	r0, r9, r0
 8018120:	fb0e f000 	mul.w	r0, lr, r0
 8018124:	fb04 fa0a 	mul.w	sl, r4, sl
 8018128:	9b02      	ldr	r3, [sp, #8]
 801812a:	4550      	cmp	r0, sl
 801812c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8018130:	445b      	add	r3, fp
 8018132:	db03      	blt.n	801813c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b4>
 8018134:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8018138:	4494      	add	ip, r2
 801813a:	e731      	b.n	8017fa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801813c:	9a04      	ldr	r2, [sp, #16]
 801813e:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8018142:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8018146:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801814a:	4431      	add	r1, r6
 801814c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018150:	e75b      	b.n	801800a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8018152:	9b08      	ldr	r3, [sp, #32]
 8018154:	2d06      	cmp	r5, #6
 8018156:	eba3 0308 	sub.w	r3, r3, r8
 801815a:	b29b      	uxth	r3, r3
 801815c:	b218      	sxth	r0, r3
 801815e:	d813      	bhi.n	8018188 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x500>
 8018160:	9b07      	ldr	r3, [sp, #28]
 8018162:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8018166:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801816a:	1c6b      	adds	r3, r5, #1
 801816c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8018170:	9b01      	ldr	r3, [sp, #4]
 8018172:	9901      	ldr	r1, [sp, #4]
 8018174:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018178:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801817c:	805a      	strh	r2, [r3, #2]
 801817e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018180:	f8a3 e006 	strh.w	lr, [r3, #6]
 8018184:	809a      	strh	r2, [r3, #4]
 8018186:	e75e      	b.n	8018046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8018188:	9c02      	ldr	r4, [sp, #8]
 801818a:	4570      	cmp	r0, lr
 801818c:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8018190:	db0d      	blt.n	80181ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x526>
 8018192:	4431      	add	r1, r6
 8018194:	9b06      	ldr	r3, [sp, #24]
 8018196:	b289      	uxth	r1, r1
 8018198:	445c      	add	r4, fp
 801819a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801819e:	4419      	add	r1, r3
 80181a0:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80181a4:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 80181a8:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 80181ac:	e582      	b.n	8017cb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80181ae:	445c      	add	r4, fp
 80181b0:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 80181b4:	e79a      	b.n	80180ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 80181b6:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 80181ba:	2e07      	cmp	r6, #7
 80181bc:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80181c0:	d812      	bhi.n	80181e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x560>
 80181c2:	1c75      	adds	r5, r6, #1
 80181c4:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 80181c8:	9d01      	ldr	r5, [sp, #4]
 80181ca:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80181ce:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80181d2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80181d6:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80181da:	442c      	add	r4, r5
 80181dc:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80181e0:	8061      	strh	r1, [r4, #2]
 80181e2:	80a2      	strh	r2, [r4, #4]
 80181e4:	80e3      	strh	r3, [r4, #6]
 80181e6:	e5cf      	b.n	8017d88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80181e8:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80181ec:	f04f 37ff 	mov.w	r7, #4294967295
 80181f0:	2500      	movs	r5, #0
 80181f2:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80181f6:	3e01      	subs	r6, #1
 80181f8:	445c      	add	r4, fp
 80181fa:	9305      	str	r3, [sp, #20]
 80181fc:	1e72      	subs	r2, r6, #1
 80181fe:	4691      	mov	r9, r2
 8018200:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8018204:	9302      	str	r3, [sp, #8]
 8018206:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801820a:	9304      	str	r3, [sp, #16]
 801820c:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8018210:	f1b9 3fff 	cmp.w	r9, #4294967295
 8018214:	bf16      	itet	ne
 8018216:	9905      	ldrne	r1, [sp, #20]
 8018218:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801821c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8018220:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8018224:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8018228:	6818      	ldr	r0, [r3, #0]
 801822a:	fb18 f801 	smulbb	r8, r8, r1
 801822e:	6859      	ldr	r1, [r3, #4]
 8018230:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018234:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018238:	4671      	mov	r1, lr
 801823a:	a80c      	add	r0, sp, #48	; 0x30
 801823c:	9207      	str	r2, [sp, #28]
 801823e:	9306      	str	r3, [sp, #24]
 8018240:	f7ff fbbc 	bl	80179bc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018244:	f04f 0c08 	mov.w	ip, #8
 8018248:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801824c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8018250:	9b04      	ldr	r3, [sp, #16]
 8018252:	9a02      	ldr	r2, [sp, #8]
 8018254:	fb10 f001 	smulbb	r0, r0, r1
 8018258:	fb02 8803 	mla	r8, r2, r3, r8
 801825c:	eba0 0108 	sub.w	r1, r0, r8
 8018260:	fb90 f0fc 	sdiv	r0, r0, ip
 8018264:	4288      	cmp	r0, r1
 8018266:	dc20      	bgt.n	80182aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 8018268:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801826c:	4551      	cmp	r1, sl
 801826e:	da03      	bge.n	8018278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
 8018270:	b1d9      	cbz	r1, 80182aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 8018272:	468a      	mov	sl, r1
 8018274:	464f      	mov	r7, r9
 8018276:	4635      	mov	r5, r6
 8018278:	f109 39ff 	add.w	r9, r9, #4294967295
 801827c:	f119 0f02 	cmn.w	r9, #2
 8018280:	d1c6      	bne.n	8018210 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x588>
 8018282:	4616      	mov	r6, r2
 8018284:	3201      	adds	r2, #1
 8018286:	f1a4 0408 	sub.w	r4, r4, #8
 801828a:	d1b7      	bne.n	80181fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801828c:	9b01      	ldr	r3, [sp, #4]
 801828e:	b2ac      	uxth	r4, r5
 8018290:	00ed      	lsls	r5, r5, #3
 8018292:	1958      	adds	r0, r3, r5
 8018294:	1c7b      	adds	r3, r7, #1
 8018296:	d10b      	bne.n	80182b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x628>
 8018298:	4601      	mov	r1, r0
 801829a:	9803      	ldr	r0, [sp, #12]
 801829c:	f7ff fb8e 	bl	80179bc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80182a0:	4621      	mov	r1, r4
 80182a2:	9801      	ldr	r0, [sp, #4]
 80182a4:	f7ff fcdc 	bl	8017c60 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80182a8:	e504      	b.n	8017cb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80182aa:	464f      	mov	r7, r9
 80182ac:	4635      	mov	r5, r6
 80182ae:	e7ed      	b.n	801828c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 80182b0:	9b01      	ldr	r3, [sp, #4]
 80182b2:	00ff      	lsls	r7, r7, #3
 80182b4:	19d9      	adds	r1, r3, r7
 80182b6:	f7ff fb81 	bl	80179bc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80182ba:	9b03      	ldr	r3, [sp, #12]
 80182bc:	445f      	add	r7, fp
 80182be:	cb03      	ldmia	r3!, {r0, r1}
 80182c0:	445d      	add	r5, fp
 80182c2:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 80182c6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80182ca:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80182ce:	9b03      	ldr	r3, [sp, #12]
 80182d0:	6869      	ldr	r1, [r5, #4]
 80182d2:	c303      	stmia	r3!, {r0, r1}
 80182d4:	e7e4      	b.n	80182a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x618>
 80182d6:	bf00      	nop

080182d8 <_ZN8touchgfx11Application10invalidateEv>:
 80182d8:	2100      	movs	r1, #0
 80182da:	4b09      	ldr	r3, [pc, #36]	; (8018300 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80182dc:	b082      	sub	sp, #8
 80182de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80182e2:	4b08      	ldr	r3, [pc, #32]	; (8018304 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80182e4:	9100      	str	r1, [sp, #0]
 80182e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80182ea:	f8ad 2004 	strh.w	r2, [sp, #4]
 80182ee:	f8ad 3006 	strh.w	r3, [sp, #6]
 80182f2:	ab02      	add	r3, sp, #8
 80182f4:	e913 0006 	ldmdb	r3, {r1, r2}
 80182f8:	b002      	add	sp, #8
 80182fa:	f7ff bcc5 	b.w	8017c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80182fe:	bf00      	nop
 8018300:	2019814c 	.word	0x2019814c
 8018304:	2019814e 	.word	0x2019814e

08018308 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8018308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801830c:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8018310:	b09b      	sub	sp, #108	; 0x6c
 8018312:	4604      	mov	r4, r0
 8018314:	4630      	mov	r0, r6
 8018316:	f7fd fb54 	bl	80159c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801831a:	4605      	mov	r5, r0
 801831c:	b940      	cbnz	r0, 8018330 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801831e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8018322:	4620      	mov	r0, r4
 8018324:	f7ff fcb0 	bl	8017c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018328:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801832c:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8018330:	4bc9      	ldr	r3, [pc, #804]	; (8018658 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	2b00      	cmp	r3, #0
 8018336:	d03e      	beq.n	80183b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8018338:	4dc8      	ldr	r5, [pc, #800]	; (801865c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801833a:	4628      	mov	r0, r5
 801833c:	f7fd fb41 	bl	80159c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018340:	4606      	mov	r6, r0
 8018342:	2800      	cmp	r0, #0
 8018344:	d137      	bne.n	80183b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8018346:	4628      	mov	r0, r5
 8018348:	f7ff f9e4 	bl	8017714 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801834c:	6829      	ldr	r1, [r5, #0]
 801834e:	686a      	ldr	r2, [r5, #4]
 8018350:	4620      	mov	r0, r4
 8018352:	f7ff fc99 	bl	8017c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018356:	802e      	strh	r6, [r5, #0]
 8018358:	806e      	strh	r6, [r5, #2]
 801835a:	80ae      	strh	r6, [r5, #4]
 801835c:	80ee      	strh	r6, [r5, #6]
 801835e:	ae09      	add	r6, sp, #36	; 0x24
 8018360:	4630      	mov	r0, r6
 8018362:	f7ff fc25 	bl	8017bb0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018366:	4abe      	ldr	r2, [pc, #760]	; (8018660 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8018368:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801836c:	8815      	ldrh	r5, [r2, #0]
 801836e:	9202      	str	r2, [sp, #8]
 8018370:	462b      	mov	r3, r5
 8018372:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8018376:	429f      	cmp	r7, r3
 8018378:	d924      	bls.n	80183c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801837a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801837e:	2907      	cmp	r1, #7
 8018380:	d816      	bhi.n	80183b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8018382:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8018386:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801838a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801838e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8018392:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8018396:	1c4a      	adds	r2, r1, #1
 8018398:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801839c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 80183a0:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 80183a4:	f8a2 9002 	strh.w	r9, [r2, #2]
 80183a8:	f8a2 e004 	strh.w	lr, [r2, #4]
 80183ac:	f8a2 c006 	strh.w	ip, [r2, #6]
 80183b0:	3301      	adds	r3, #1
 80183b2:	b29b      	uxth	r3, r3
 80183b4:	e7df      	b.n	8018376 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 80183b6:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d1cf      	bne.n	801835e <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 80183be:	b01b      	add	sp, #108	; 0x6c
 80183c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183c4:	462f      	mov	r7, r5
 80183c6:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 80183ca:	42bb      	cmp	r3, r7
 80183cc:	d90b      	bls.n	80183e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 80183ce:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80183d2:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 80183d6:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 80183da:	4620      	mov	r0, r4
 80183dc:	3701      	adds	r7, #1
 80183de:	f7ff fc53 	bl	8017c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80183e2:	b2bf      	uxth	r7, r7
 80183e4:	e7ef      	b.n	80183c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 80183e6:	4a9f      	ldr	r2, [pc, #636]	; (8018664 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80183e8:	6813      	ldr	r3, [r2, #0]
 80183ea:	4690      	mov	r8, r2
 80183ec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80183f0:	2b01      	cmp	r3, #1
 80183f2:	f040 80e6 	bne.w	80185c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 80183f6:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80183fa:	4629      	mov	r1, r5
 80183fc:	2500      	movs	r5, #0
 80183fe:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8018402:	33ae      	adds	r3, #174	; 0xae
 8018404:	428f      	cmp	r7, r1
 8018406:	f103 0308 	add.w	r3, r3, #8
 801840a:	dd0a      	ble.n	8018422 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801840c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8018410:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8018414:	3101      	adds	r1, #1
 8018416:	4402      	add	r2, r0
 8018418:	b212      	sxth	r2, r2
 801841a:	4295      	cmp	r5, r2
 801841c:	bfb8      	it	lt
 801841e:	4615      	movlt	r5, r2
 8018420:	e7f0      	b.n	8018404 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8018422:	4b91      	ldr	r3, [pc, #580]	; (8018668 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8018424:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8018664 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 8018428:	881b      	ldrh	r3, [r3, #0]
 801842a:	46d8      	mov	r8, fp
 801842c:	2b0f      	cmp	r3, #15
 801842e:	bf88      	it	hi
 8018430:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8018434:	f04f 0300 	mov.w	r3, #0
 8018438:	bf98      	it	ls
 801843a:	f04f 0a01 	movls.w	sl, #1
 801843e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018442:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8018446:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801844a:	4438      	add	r0, r7
 801844c:	b207      	sxth	r7, r0
 801844e:	f8db 0000 	ldr.w	r0, [fp]
 8018452:	42bd      	cmp	r5, r7
 8018454:	6803      	ldr	r3, [r0, #0]
 8018456:	f340 8084 	ble.w	8018562 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801845a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801845e:	4798      	blx	r3
 8018460:	eb07 030a 	add.w	r3, r7, sl
 8018464:	4298      	cmp	r0, r3
 8018466:	da07      	bge.n	8018478 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8018468:	4285      	cmp	r5, r0
 801846a:	dd05      	ble.n	8018478 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 801846c:	4287      	cmp	r7, r0
 801846e:	dd6d      	ble.n	801854c <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8018470:	2f00      	cmp	r7, #0
 8018472:	dd6b      	ble.n	801854c <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8018474:	4628      	mov	r0, r5
 8018476:	e004      	b.n	8018482 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 8018478:	4287      	cmp	r7, r0
 801847a:	dcfb      	bgt.n	8018474 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801847c:	42a8      	cmp	r0, r5
 801847e:	bfa8      	it	ge
 8018480:	4628      	movge	r0, r5
 8018482:	2200      	movs	r2, #0
 8018484:	4b79      	ldr	r3, [pc, #484]	; (801866c <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8018486:	1bc0      	subs	r0, r0, r7
 8018488:	f9b3 3000 	ldrsh.w	r3, [r3]
 801848c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018490:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018494:	9b02      	ldr	r3, [sp, #8]
 8018496:	f8ad 2014 	strh.w	r2, [sp, #20]
 801849a:	881f      	ldrh	r7, [r3, #0]
 801849c:	f8ad 001a 	strh.w	r0, [sp, #26]
 80184a0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80184a4:	42bb      	cmp	r3, r7
 80184a6:	d9cc      	bls.n	8018442 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 80184a8:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80184ac:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80184b0:	ab07      	add	r3, sp, #28
 80184b2:	6851      	ldr	r1, [r2, #4]
 80184b4:	c303      	stmia	r3!, {r0, r1}
 80184b6:	a905      	add	r1, sp, #20
 80184b8:	a807      	add	r0, sp, #28
 80184ba:	f7ff f9e6 	bl	801788a <_ZNK8touchgfx4Rect9intersectERKS0_>
 80184be:	2800      	cmp	r0, #0
 80184c0:	d04c      	beq.n	801855c <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 80184c2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80184c6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80184ca:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 80184ce:	4686      	mov	lr, r0
 80184d0:	4290      	cmp	r0, r2
 80184d2:	4448      	add	r0, r9
 80184d4:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 80184d8:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80184dc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80184e0:	bfb8      	it	lt
 80184e2:	4696      	movlt	lr, r2
 80184e4:	444a      	add	r2, r9
 80184e6:	4299      	cmp	r1, r3
 80184e8:	b280      	uxth	r0, r0
 80184ea:	b292      	uxth	r2, r2
 80184ec:	468c      	mov	ip, r1
 80184ee:	9303      	str	r3, [sp, #12]
 80184f0:	bfb8      	it	lt
 80184f2:	469c      	movlt	ip, r3
 80184f4:	fa0f f982 	sxth.w	r9, r2
 80184f8:	b203      	sxth	r3, r0
 80184fa:	454b      	cmp	r3, r9
 80184fc:	bfb8      	it	lt
 80184fe:	4602      	movlt	r2, r0
 8018500:	eba2 020e 	sub.w	r2, r2, lr
 8018504:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018508:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801850c:	9b03      	ldr	r3, [sp, #12]
 801850e:	4411      	add	r1, r2
 8018510:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018514:	b289      	uxth	r1, r1
 8018516:	4413      	add	r3, r2
 8018518:	b29b      	uxth	r3, r3
 801851a:	b208      	sxth	r0, r1
 801851c:	b21a      	sxth	r2, r3
 801851e:	4290      	cmp	r0, r2
 8018520:	bfb8      	it	lt
 8018522:	460b      	movlt	r3, r1
 8018524:	eba3 030c 	sub.w	r3, r3, ip
 8018528:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801852c:	f8ad e01c 	strh.w	lr, [sp, #28]
 8018530:	f8ad c01e 	strh.w	ip, [sp, #30]
 8018534:	a807      	add	r0, sp, #28
 8018536:	f7fd fa44 	bl	80159c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801853a:	b920      	cbnz	r0, 8018546 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 801853c:	6823      	ldr	r3, [r4, #0]
 801853e:	a907      	add	r1, sp, #28
 8018540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018542:	4620      	mov	r0, r4
 8018544:	4798      	blx	r3
 8018546:	3701      	adds	r7, #1
 8018548:	b2bf      	uxth	r7, r7
 801854a:	e7a9      	b.n	80184a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 801854c:	f8d8 0000 	ldr.w	r0, [r8]
 8018550:	2101      	movs	r1, #1
 8018552:	6803      	ldr	r3, [r0, #0]
 8018554:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018558:	4798      	blx	r3
 801855a:	e772      	b.n	8018442 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 801855c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8018560:	e7e8      	b.n	8018534 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8018562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018564:	4798      	blx	r3
 8018566:	4b42      	ldr	r3, [pc, #264]	; (8018670 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8018568:	781b      	ldrb	r3, [r3, #0]
 801856a:	2b00      	cmp	r3, #0
 801856c:	f43f af27 	beq.w	80183be <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8018570:	2300      	movs	r3, #0
 8018572:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8018576:	9b02      	ldr	r3, [sp, #8]
 8018578:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801857c:	881b      	ldrh	r3, [r3, #0]
 801857e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8018582:	429d      	cmp	r5, r3
 8018584:	f67f af1b 	bls.w	80183be <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8018588:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801858c:	2907      	cmp	r1, #7
 801858e:	d815      	bhi.n	80185bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 8018590:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8018594:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8018598:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801859c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80185a0:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 80185a4:	1c4a      	adds	r2, r1, #1
 80185a6:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 80185aa:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80185ae:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 80185b2:	f8a2 e002 	strh.w	lr, [r2, #2]
 80185b6:	f8a2 c004 	strh.w	ip, [r2, #4]
 80185ba:	80d7      	strh	r7, [r2, #6]
 80185bc:	3301      	adds	r3, #1
 80185be:	b29b      	uxth	r3, r3
 80185c0:	e7df      	b.n	8018582 <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 80185c2:	2b02      	cmp	r3, #2
 80185c4:	f040 8136 	bne.w	8018834 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 80185c8:	4b2a      	ldr	r3, [pc, #168]	; (8018674 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 80185ca:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 80185ce:	781b      	ldrb	r3, [r3, #0]
 80185d0:	2b01      	cmp	r3, #1
 80185d2:	f000 809c 	beq.w	801870e <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 80185d6:	9b02      	ldr	r3, [sp, #8]
 80185d8:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 80185dc:	f8b3 b000 	ldrh.w	fp, [r3]
 80185e0:	f10b 0b01 	add.w	fp, fp, #1
 80185e4:	fa1f fb8b 	uxth.w	fp, fp
 80185e8:	2a00      	cmp	r2, #0
 80185ea:	d0bc      	beq.n	8018566 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80185ec:	4659      	mov	r1, fp
 80185ee:	f04f 0800 	mov.w	r8, #0
 80185f2:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 80185f6:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80185fa:	441d      	add	r5, r3
 80185fc:	b22d      	sxth	r5, r5
 80185fe:	b28b      	uxth	r3, r1
 8018600:	429a      	cmp	r2, r3
 8018602:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8018606:	f240 80c1 	bls.w	801878c <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 801860a:	4427      	add	r7, r4
 801860c:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8018610:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8018614:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 8018618:	4608      	mov	r0, r1
 801861a:	4563      	cmp	r3, ip
 801861c:	f340 80a3 	ble.w	8018766 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 8018620:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 8018624:	4465      	add	r5, ip
 8018626:	b22d      	sxth	r5, r5
 8018628:	429d      	cmp	r5, r3
 801862a:	bfa8      	it	ge
 801862c:	461d      	movge	r5, r3
 801862e:	3101      	adds	r1, #1
 8018630:	4680      	mov	r8, r0
 8018632:	e7e4      	b.n	80185fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8018634:	d10b      	bne.n	801864e <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 8018636:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 801863a:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 801863e:	458c      	cmp	ip, r1
 8018640:	bfb4      	ite	lt
 8018642:	469c      	movlt	ip, r3
 8018644:	46bc      	movge	ip, r7
 8018646:	4572      	cmp	r2, lr
 8018648:	bfb8      	it	lt
 801864a:	4672      	movlt	r2, lr
 801864c:	e088      	b.n	8018760 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801864e:	428a      	cmp	r2, r1
 8018650:	bfb8      	it	lt
 8018652:	460a      	movlt	r2, r1
 8018654:	46bc      	mov	ip, r7
 8018656:	e083      	b.n	8018760 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8018658:	20198190 	.word	0x20198190
 801865c:	2019819c 	.word	0x2019819c
 8018660:	20000058 	.word	0x20000058
 8018664:	20198158 	.word	0x20198158
 8018668:	2019814e 	.word	0x2019814e
 801866c:	2019814c 	.word	0x2019814c
 8018670:	20198156 	.word	0x20198156
 8018674:	20198150 	.word	0x20198150
 8018678:	1961      	adds	r1, r4, r5
 801867a:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801867e:	ab07      	add	r3, sp, #28
 8018680:	6849      	ldr	r1, [r1, #4]
 8018682:	c303      	stmia	r3!, {r0, r1}
 8018684:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018688:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801868c:	2b13      	cmp	r3, #19
 801868e:	bfd8      	it	le
 8018690:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8018694:	440b      	add	r3, r1
 8018696:	1a9b      	subs	r3, r3, r2
 8018698:	a807      	add	r0, sp, #28
 801869a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801869e:	f8ad 201c 	strh.w	r2, [sp, #28]
 80186a2:	f7ff f851 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80186a6:	a807      	add	r0, sp, #28
 80186a8:	f7fd f98b 	bl	80159c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80186ac:	bb78      	cbnz	r0, 801870e <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 80186ae:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80186b2:	f8d8 0000 	ldr.w	r0, [r8]
 80186b6:	f1bc 0f14 	cmp.w	ip, #20
 80186ba:	bfa8      	it	ge
 80186bc:	f04f 0c14 	movge.w	ip, #20
 80186c0:	f8d0 e000 	ldr.w	lr, [r0]
 80186c4:	fa1f fc8c 	uxth.w	ip, ip
 80186c8:	f8cd c000 	str.w	ip, [sp]
 80186cc:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 80186d0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80186d4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80186d8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80186dc:	47d0      	blx	sl
 80186de:	4682      	mov	sl, r0
 80186e0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80186e4:	a807      	add	r0, sp, #28
 80186e6:	f7ff f815 	bl	8017714 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80186ea:	6823      	ldr	r3, [r4, #0]
 80186ec:	4620      	mov	r0, r4
 80186ee:	4425      	add	r5, r4
 80186f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186f2:	a907      	add	r1, sp, #28
 80186f4:	4798      	blx	r3
 80186f6:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 80186fa:	eba0 000a 	sub.w	r0, r0, sl
 80186fe:	b200      	sxth	r0, r0
 8018700:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 8018704:	b918      	cbnz	r0, 801870e <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8018706:	b2b9      	uxth	r1, r7
 8018708:	4648      	mov	r0, r9
 801870a:	f7ff faa9 	bl	8017c60 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801870e:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 8018712:	f1bb 0f00 	cmp.w	fp, #0
 8018716:	f43f af26 	beq.w	8018566 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801871a:	2700      	movs	r7, #0
 801871c:	9b02      	ldr	r3, [sp, #8]
 801871e:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8018722:	881b      	ldrh	r3, [r3, #0]
 8018724:	3301      	adds	r3, #1
 8018726:	b29b      	uxth	r3, r3
 8018728:	b299      	uxth	r1, r3
 801872a:	458b      	cmp	fp, r1
 801872c:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 8018730:	d9a2      	bls.n	8018678 <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 8018732:	4425      	add	r5, r4
 8018734:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 8018738:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801873c:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8018740:	4408      	add	r0, r1
 8018742:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 8018746:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 801874a:	b200      	sxth	r0, r0
 801874c:	4471      	add	r1, lr
 801874e:	b209      	sxth	r1, r1
 8018750:	4288      	cmp	r0, r1
 8018752:	469c      	mov	ip, r3
 8018754:	f6bf af6e 	bge.w	8018634 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 8018758:	4586      	cmp	lr, r0
 801875a:	4672      	mov	r2, lr
 801875c:	bfb8      	it	lt
 801875e:	4602      	movlt	r2, r0
 8018760:	3301      	adds	r3, #1
 8018762:	4667      	mov	r7, ip
 8018764:	e7e0      	b.n	8018728 <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 8018766:	d10c      	bne.n	8018782 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 8018768:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801876c:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8018770:	4287      	cmp	r7, r0
 8018772:	bfb4      	ite	lt
 8018774:	4608      	movlt	r0, r1
 8018776:	4640      	movge	r0, r8
 8018778:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 801877c:	443b      	add	r3, r7
 801877e:	b21b      	sxth	r3, r3
 8018780:	e752      	b.n	8018628 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8018782:	4565      	cmp	r5, ip
 8018784:	bfa8      	it	ge
 8018786:	4665      	movge	r5, ip
 8018788:	4640      	mov	r0, r8
 801878a:	e750      	b.n	801862e <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 801878c:	eb09 0007 	add.w	r0, r9, r7
 8018790:	4427      	add	r7, r4
 8018792:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 8018796:	9203      	str	r2, [sp, #12]
 8018798:	f1ba 0f13 	cmp.w	sl, #19
 801879c:	bfde      	ittt	le
 801879e:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 80187a2:	4455      	addle	r5, sl
 80187a4:	b22d      	sxthle	r5, r5
 80187a6:	f7fd f90c 	bl	80159c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80187aa:	9a03      	ldr	r2, [sp, #12]
 80187ac:	2800      	cmp	r0, #0
 80187ae:	f47f af1b 	bne.w	80185e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 80187b2:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 80187b6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80187ba:	1aad      	subs	r5, r5, r2
 80187bc:	2d14      	cmp	r5, #20
 80187be:	bfa8      	it	ge
 80187c0:	2514      	movge	r5, #20
 80187c2:	4828      	ldr	r0, [pc, #160]	; (8018864 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 80187c4:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 80187c8:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80187cc:	6800      	ldr	r0, [r0, #0]
 80187ce:	f8ad 101c 	strh.w	r1, [sp, #28]
 80187d2:	f8ad 201e 	strh.w	r2, [sp, #30]
 80187d6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80187da:	f8d0 c000 	ldr.w	ip, [r0]
 80187de:	b2ad      	uxth	r5, r5
 80187e0:	fa1f fa8a 	uxth.w	sl, sl
 80187e4:	4555      	cmp	r5, sl
 80187e6:	bf94      	ite	ls
 80187e8:	9500      	strls	r5, [sp, #0]
 80187ea:	f8cd a000 	strhi.w	sl, [sp]
 80187ee:	b292      	uxth	r2, r2
 80187f0:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 80187f4:	b29b      	uxth	r3, r3
 80187f6:	b289      	uxth	r1, r1
 80187f8:	47a8      	blx	r5
 80187fa:	6823      	ldr	r3, [r4, #0]
 80187fc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018802:	a907      	add	r1, sp, #28
 8018804:	4620      	mov	r0, r4
 8018806:	4798      	blx	r3
 8018808:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801880c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8018810:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8018814:	1a5b      	subs	r3, r3, r1
 8018816:	440a      	add	r2, r1
 8018818:	b21b      	sxth	r3, r3
 801881a:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801881e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8018822:	2b00      	cmp	r3, #0
 8018824:	f47f aed7 	bne.w	80185d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8018828:	fa1f f188 	uxth.w	r1, r8
 801882c:	4648      	mov	r0, r9
 801882e:	f7ff fa17 	bl	8017c60 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018832:	e6d0      	b.n	80185d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8018834:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8018838:	42ab      	cmp	r3, r5
 801883a:	f67f ae94 	bls.w	8018566 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801883e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8018842:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8018846:	ab07      	add	r3, sp, #28
 8018848:	6851      	ldr	r1, [r2, #4]
 801884a:	c303      	stmia	r3!, {r0, r1}
 801884c:	a807      	add	r0, sp, #28
 801884e:	f7fd f8b8 	bl	80159c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018852:	b920      	cbnz	r0, 801885e <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 8018854:	6823      	ldr	r3, [r4, #0]
 8018856:	a907      	add	r1, sp, #28
 8018858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801885a:	4620      	mov	r0, r4
 801885c:	4798      	blx	r3
 801885e:	3501      	adds	r5, #1
 8018860:	b2ad      	uxth	r5, r5
 8018862:	e7e7      	b.n	8018834 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8018864:	20198158 	.word	0x20198158

08018868 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018868:	2200      	movs	r2, #0
 801886a:	4b03      	ldr	r3, [pc, #12]	; (8018878 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801886c:	801a      	strh	r2, [r3, #0]
 801886e:	805a      	strh	r2, [r3, #2]
 8018870:	809a      	strh	r2, [r3, #4]
 8018872:	80da      	strh	r2, [r3, #6]
 8018874:	4770      	bx	lr
 8018876:	bf00      	nop
 8018878:	2019819c 	.word	0x2019819c

0801887c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801887c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018880:	4606      	mov	r6, r0
 8018882:	b09d      	sub	sp, #116	; 0x74
 8018884:	a803      	add	r0, sp, #12
 8018886:	4614      	mov	r4, r2
 8018888:	468a      	mov	sl, r1
 801888a:	461d      	mov	r5, r3
 801888c:	f000 fd7a 	bl	8019384 <_ZN8touchgfx12TextProviderC1Ev>
 8018890:	6833      	ldr	r3, [r6, #0]
 8018892:	4630      	mov	r0, r6
 8018894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018896:	4798      	blx	r3
 8018898:	6833      	ldr	r3, [r6, #0]
 801889a:	4607      	mov	r7, r0
 801889c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801889e:	4630      	mov	r0, r6
 80188a0:	4798      	blx	r3
 80188a2:	462a      	mov	r2, r5
 80188a4:	2500      	movs	r5, #0
 80188a6:	9000      	str	r0, [sp, #0]
 80188a8:	4621      	mov	r1, r4
 80188aa:	463b      	mov	r3, r7
 80188ac:	a803      	add	r0, sp, #12
 80188ae:	f000 fdbc 	bl	801942a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80188b2:	462c      	mov	r4, r5
 80188b4:	46a9      	mov	r9, r5
 80188b6:	46a8      	mov	r8, r5
 80188b8:	f242 0b0b 	movw	fp, #8203	; 0x200b
 80188bc:	2300      	movs	r3, #0
 80188be:	9302      	str	r3, [sp, #8]
 80188c0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80188c4:	429c      	cmp	r4, r3
 80188c6:	d002      	beq.n	80188ce <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80188c8:	455c      	cmp	r4, fp
 80188ca:	bf18      	it	ne
 80188cc:	4625      	movne	r5, r4
 80188ce:	ab02      	add	r3, sp, #8
 80188d0:	4632      	mov	r2, r6
 80188d2:	4651      	mov	r1, sl
 80188d4:	a803      	add	r0, sp, #12
 80188d6:	f001 f897 	bl	8019a08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80188da:	4604      	mov	r4, r0
 80188dc:	b108      	cbz	r0, 80188e2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80188de:	280a      	cmp	r0, #10
 80188e0:	d10a      	bne.n	80188f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80188e2:	45c1      	cmp	r9, r8
 80188e4:	bf38      	it	cc
 80188e6:	46c1      	movcc	r9, r8
 80188e8:	f04f 0800 	mov.w	r8, #0
 80188ec:	2c00      	cmp	r4, #0
 80188ee:	d1e5      	bne.n	80188bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80188f0:	4648      	mov	r0, r9
 80188f2:	b01d      	add	sp, #116	; 0x74
 80188f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188f8:	9a02      	ldr	r2, [sp, #8]
 80188fa:	2a00      	cmp	r2, #0
 80188fc:	d0de      	beq.n	80188bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80188fe:	7b57      	ldrb	r7, [r2, #13]
 8018900:	6833      	ldr	r3, [r6, #0]
 8018902:	007f      	lsls	r7, r7, #1
 8018904:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8018908:	7a97      	ldrb	r7, [r2, #10]
 801890a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801890c:	4307      	orrs	r7, r0
 801890e:	4629      	mov	r1, r5
 8018910:	4630      	mov	r0, r6
 8018912:	8894      	ldrh	r4, [r2, #4]
 8018914:	4798      	blx	r3
 8018916:	4438      	add	r0, r7
 8018918:	4480      	add	r8, r0
 801891a:	fa1f f888 	uxth.w	r8, r8
 801891e:	e7e5      	b.n	80188ec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08018920 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8018920:	b508      	push	{r3, lr}
 8018922:	6803      	ldr	r3, [r0, #0]
 8018924:	68db      	ldr	r3, [r3, #12]
 8018926:	4798      	blx	r3
 8018928:	b128      	cbz	r0, 8018936 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801892a:	7b43      	ldrb	r3, [r0, #13]
 801892c:	7a80      	ldrb	r0, [r0, #10]
 801892e:	005b      	lsls	r3, r3, #1
 8018930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018934:	4318      	orrs	r0, r3
 8018936:	bd08      	pop	{r3, pc}

08018938 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8018938:	b40e      	push	{r1, r2, r3}
 801893a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801893c:	4605      	mov	r5, r0
 801893e:	b09e      	sub	sp, #120	; 0x78
 8018940:	ab23      	add	r3, sp, #140	; 0x8c
 8018942:	f853 4b04 	ldr.w	r4, [r3], #4
 8018946:	a805      	add	r0, sp, #20
 8018948:	9303      	str	r3, [sp, #12]
 801894a:	f000 fd1b 	bl	8019384 <_ZN8touchgfx12TextProviderC1Ev>
 801894e:	682b      	ldr	r3, [r5, #0]
 8018950:	4628      	mov	r0, r5
 8018952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018954:	4798      	blx	r3
 8018956:	682b      	ldr	r3, [r5, #0]
 8018958:	4606      	mov	r6, r0
 801895a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801895c:	4628      	mov	r0, r5
 801895e:	4798      	blx	r3
 8018960:	4621      	mov	r1, r4
 8018962:	2400      	movs	r4, #0
 8018964:	4633      	mov	r3, r6
 8018966:	9000      	str	r0, [sp, #0]
 8018968:	9a03      	ldr	r2, [sp, #12]
 801896a:	ae1e      	add	r6, sp, #120	; 0x78
 801896c:	a805      	add	r0, sp, #20
 801896e:	f000 fd5c 	bl	801942a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018972:	f846 4d68 	str.w	r4, [r6, #-104]!
 8018976:	4633      	mov	r3, r6
 8018978:	462a      	mov	r2, r5
 801897a:	4621      	mov	r1, r4
 801897c:	a805      	add	r0, sp, #20
 801897e:	f001 f843 	bl	8019a08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018982:	b1f0      	cbz	r0, 80189c2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8018984:	280a      	cmp	r0, #10
 8018986:	d018      	beq.n	80189ba <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8018988:	9f04      	ldr	r7, [sp, #16]
 801898a:	b1b7      	cbz	r7, 80189ba <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801898c:	7b78      	ldrb	r0, [r7, #13]
 801898e:	7a3b      	ldrb	r3, [r7, #8]
 8018990:	00c1      	lsls	r1, r0, #3
 8018992:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018996:	4319      	orrs	r1, r3
 8018998:	0643      	lsls	r3, r0, #25
 801899a:	bf44      	itt	mi
 801899c:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80189a0:	b219      	sxthmi	r1, r3
 80189a2:	0100      	lsls	r0, r0, #4
 80189a4:	79fb      	ldrb	r3, [r7, #7]
 80189a6:	88ea      	ldrh	r2, [r5, #6]
 80189a8:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80189ac:	4303      	orrs	r3, r0
 80189ae:	4413      	add	r3, r2
 80189b0:	1a5b      	subs	r3, r3, r1
 80189b2:	b21b      	sxth	r3, r3
 80189b4:	429c      	cmp	r4, r3
 80189b6:	bfb8      	it	lt
 80189b8:	461c      	movlt	r4, r3
 80189ba:	4633      	mov	r3, r6
 80189bc:	462a      	mov	r2, r5
 80189be:	2100      	movs	r1, #0
 80189c0:	e7dc      	b.n	801897c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80189c2:	b2a0      	uxth	r0, r4
 80189c4:	b01e      	add	sp, #120	; 0x78
 80189c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80189ca:	b003      	add	sp, #12
 80189cc:	4770      	bx	lr

080189ce <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80189ce:	7a43      	ldrb	r3, [r0, #9]
 80189d0:	8880      	ldrh	r0, [r0, #4]
 80189d2:	4418      	add	r0, r3
 80189d4:	b280      	uxth	r0, r0
 80189d6:	4770      	bx	lr

080189d8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80189d8:	6803      	ldr	r3, [r0, #0]
 80189da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189dc:	4718      	bx	r3

080189de <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80189de:	b40e      	push	{r1, r2, r3}
 80189e0:	b570      	push	{r4, r5, r6, lr}
 80189e2:	4604      	mov	r4, r0
 80189e4:	b09d      	sub	sp, #116	; 0x74
 80189e6:	ab21      	add	r3, sp, #132	; 0x84
 80189e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80189ec:	a803      	add	r0, sp, #12
 80189ee:	9302      	str	r3, [sp, #8]
 80189f0:	f000 fcc8 	bl	8019384 <_ZN8touchgfx12TextProviderC1Ev>
 80189f4:	6823      	ldr	r3, [r4, #0]
 80189f6:	4620      	mov	r0, r4
 80189f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80189fa:	4798      	blx	r3
 80189fc:	6823      	ldr	r3, [r4, #0]
 80189fe:	4606      	mov	r6, r0
 8018a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a02:	4620      	mov	r0, r4
 8018a04:	4798      	blx	r3
 8018a06:	4633      	mov	r3, r6
 8018a08:	9000      	str	r0, [sp, #0]
 8018a0a:	9a02      	ldr	r2, [sp, #8]
 8018a0c:	4629      	mov	r1, r5
 8018a0e:	a803      	add	r0, sp, #12
 8018a10:	f000 fd0b 	bl	801942a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018a14:	a803      	add	r0, sp, #12
 8018a16:	f001 f879 	bl	8019b0c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018a1a:	2401      	movs	r4, #1
 8018a1c:	b2a3      	uxth	r3, r4
 8018a1e:	b140      	cbz	r0, 8018a32 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8018a20:	280a      	cmp	r0, #10
 8018a22:	bf08      	it	eq
 8018a24:	3301      	addeq	r3, #1
 8018a26:	a803      	add	r0, sp, #12
 8018a28:	bf08      	it	eq
 8018a2a:	b21c      	sxtheq	r4, r3
 8018a2c:	f001 f86e 	bl	8019b0c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018a30:	e7f4      	b.n	8018a1c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8018a32:	4618      	mov	r0, r3
 8018a34:	b01d      	add	sp, #116	; 0x74
 8018a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a3a:	b003      	add	sp, #12
 8018a3c:	4770      	bx	lr

08018a3e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018a3e:	b40e      	push	{r1, r2, r3}
 8018a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a42:	4604      	mov	r4, r0
 8018a44:	b09e      	sub	sp, #120	; 0x78
 8018a46:	ab23      	add	r3, sp, #140	; 0x8c
 8018a48:	f853 5b04 	ldr.w	r5, [r3], #4
 8018a4c:	a805      	add	r0, sp, #20
 8018a4e:	9303      	str	r3, [sp, #12]
 8018a50:	f000 fc98 	bl	8019384 <_ZN8touchgfx12TextProviderC1Ev>
 8018a54:	6823      	ldr	r3, [r4, #0]
 8018a56:	4620      	mov	r0, r4
 8018a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018a5a:	4798      	blx	r3
 8018a5c:	6823      	ldr	r3, [r4, #0]
 8018a5e:	4606      	mov	r6, r0
 8018a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a62:	4620      	mov	r0, r4
 8018a64:	4798      	blx	r3
 8018a66:	4633      	mov	r3, r6
 8018a68:	4629      	mov	r1, r5
 8018a6a:	9000      	str	r0, [sp, #0]
 8018a6c:	9a03      	ldr	r2, [sp, #12]
 8018a6e:	a805      	add	r0, sp, #20
 8018a70:	f000 fcdb 	bl	801942a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018a74:	2100      	movs	r1, #0
 8018a76:	ad1e      	add	r5, sp, #120	; 0x78
 8018a78:	f845 1d68 	str.w	r1, [r5, #-104]!
 8018a7c:	462b      	mov	r3, r5
 8018a7e:	4622      	mov	r2, r4
 8018a80:	a805      	add	r0, sp, #20
 8018a82:	f000 ffc1 	bl	8019a08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018a86:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8018a8a:	b1d8      	cbz	r0, 8018ac4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8018a8c:	280a      	cmp	r0, #10
 8018a8e:	d012      	beq.n	8018ab6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8018a90:	9804      	ldr	r0, [sp, #16]
 8018a92:	b180      	cbz	r0, 8018ab6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8018a94:	7b47      	ldrb	r7, [r0, #13]
 8018a96:	88e2      	ldrh	r2, [r4, #6]
 8018a98:	00fb      	lsls	r3, r7, #3
 8018a9a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018a9e:	7a03      	ldrb	r3, [r0, #8]
 8018aa0:	430b      	orrs	r3, r1
 8018aa2:	0679      	lsls	r1, r7, #25
 8018aa4:	bf44      	itt	mi
 8018aa6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018aaa:	b21b      	sxthmi	r3, r3
 8018aac:	1ad3      	subs	r3, r2, r3
 8018aae:	b21b      	sxth	r3, r3
 8018ab0:	429e      	cmp	r6, r3
 8018ab2:	bfa8      	it	ge
 8018ab4:	461e      	movge	r6, r3
 8018ab6:	462b      	mov	r3, r5
 8018ab8:	4622      	mov	r2, r4
 8018aba:	2100      	movs	r1, #0
 8018abc:	a805      	add	r0, sp, #20
 8018abe:	f000 ffa3 	bl	8019a08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018ac2:	e7e2      	b.n	8018a8a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8018ac4:	4630      	mov	r0, r6
 8018ac6:	b01e      	add	sp, #120	; 0x78
 8018ac8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018acc:	b003      	add	sp, #12
 8018ace:	4770      	bx	lr

08018ad0 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8018ad0:	b513      	push	{r0, r1, r4, lr}
 8018ad2:	2400      	movs	r4, #0
 8018ad4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018ad8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018adc:	6803      	ldr	r3, [r0, #0]
 8018ade:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018ae2:	9400      	str	r4, [sp, #0]
 8018ae4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018ae8:	691b      	ldr	r3, [r3, #16]
 8018aea:	4669      	mov	r1, sp
 8018aec:	4798      	blx	r3
 8018aee:	b002      	add	sp, #8
 8018af0:	bd10      	pop	{r4, pc}

08018af2 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8018af2:	b538      	push	{r3, r4, r5, lr}
 8018af4:	460c      	mov	r4, r1
 8018af6:	4605      	mov	r5, r0
 8018af8:	680b      	ldr	r3, [r1, #0]
 8018afa:	68db      	ldr	r3, [r3, #12]
 8018afc:	4798      	blx	r3
 8018afe:	6823      	ldr	r3, [r4, #0]
 8018b00:	4620      	mov	r0, r4
 8018b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b04:	4629      	mov	r1, r5
 8018b06:	4798      	blx	r3
 8018b08:	4628      	mov	r0, r5
 8018b0a:	bd38      	pop	{r3, r4, r5, pc}

08018b0c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8018b0c:	b410      	push	{r4}
 8018b0e:	880a      	ldrh	r2, [r1, #0]
 8018b10:	8884      	ldrh	r4, [r0, #4]
 8018b12:	4422      	add	r2, r4
 8018b14:	800a      	strh	r2, [r1, #0]
 8018b16:	88c4      	ldrh	r4, [r0, #6]
 8018b18:	884a      	ldrh	r2, [r1, #2]
 8018b1a:	4422      	add	r2, r4
 8018b1c:	804a      	strh	r2, [r1, #2]
 8018b1e:	6940      	ldr	r0, [r0, #20]
 8018b20:	b120      	cbz	r0, 8018b2c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8018b22:	6803      	ldr	r3, [r0, #0]
 8018b24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b2a:	4718      	bx	r3
 8018b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b30:	4770      	bx	lr

08018b32 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8018b32:	b570      	push	{r4, r5, r6, lr}
 8018b34:	460c      	mov	r4, r1
 8018b36:	8882      	ldrh	r2, [r0, #4]
 8018b38:	880b      	ldrh	r3, [r1, #0]
 8018b3a:	4605      	mov	r5, r0
 8018b3c:	4413      	add	r3, r2
 8018b3e:	800b      	strh	r3, [r1, #0]
 8018b40:	88c2      	ldrh	r2, [r0, #6]
 8018b42:	884b      	ldrh	r3, [r1, #2]
 8018b44:	4413      	add	r3, r2
 8018b46:	804b      	strh	r3, [r1, #2]
 8018b48:	1d01      	adds	r1, r0, #4
 8018b4a:	4620      	mov	r0, r4
 8018b4c:	f7fc fef6 	bl	801593c <_ZN8touchgfx4RectaNERKS0_>
 8018b50:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	dd0b      	ble.n	8018b70 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018b58:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	dd07      	ble.n	8018b70 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018b60:	6968      	ldr	r0, [r5, #20]
 8018b62:	b128      	cbz	r0, 8018b70 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018b64:	6803      	ldr	r3, [r0, #0]
 8018b66:	4621      	mov	r1, r4
 8018b68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b6e:	4718      	bx	r3
 8018b70:	bd70      	pop	{r4, r5, r6, pc}
	...

08018b74 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8018b74:	b570      	push	{r4, r5, r6, lr}
 8018b76:	460c      	mov	r4, r1
 8018b78:	8882      	ldrh	r2, [r0, #4]
 8018b7a:	880b      	ldrh	r3, [r1, #0]
 8018b7c:	4605      	mov	r5, r0
 8018b7e:	4413      	add	r3, r2
 8018b80:	800b      	strh	r3, [r1, #0]
 8018b82:	88c2      	ldrh	r2, [r0, #6]
 8018b84:	884b      	ldrh	r3, [r1, #2]
 8018b86:	4413      	add	r3, r2
 8018b88:	804b      	strh	r3, [r1, #2]
 8018b8a:	1d01      	adds	r1, r0, #4
 8018b8c:	4620      	mov	r0, r4
 8018b8e:	f7fc fed5 	bl	801593c <_ZN8touchgfx4RectaNERKS0_>
 8018b92:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	dd18      	ble.n	8018bcc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018b9a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	dd14      	ble.n	8018bcc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018ba2:	6968      	ldr	r0, [r5, #20]
 8018ba4:	b128      	cbz	r0, 8018bb2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8018ba6:	6803      	ldr	r3, [r0, #0]
 8018ba8:	4621      	mov	r1, r4
 8018baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018bae:	691b      	ldr	r3, [r3, #16]
 8018bb0:	4718      	bx	r3
 8018bb2:	4b07      	ldr	r3, [pc, #28]	; (8018bd0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	3304      	adds	r3, #4
 8018bb8:	429d      	cmp	r5, r3
 8018bba:	d107      	bne.n	8018bcc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018bbc:	f7fe ff44 	bl	8017a48 <_ZN8touchgfx11Application11getInstanceEv>
 8018bc0:	6821      	ldr	r1, [r4, #0]
 8018bc2:	6862      	ldr	r2, [r4, #4]
 8018bc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018bc8:	f7ff b85e 	b.w	8017c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018bcc:	bd70      	pop	{r4, r5, r6, pc}
 8018bce:	bf00      	nop
 8018bd0:	20198194 	.word	0x20198194

08018bd4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8018bd4:	b570      	push	{r4, r5, r6, lr}
 8018bd6:	4604      	mov	r4, r0
 8018bd8:	4616      	mov	r6, r2
 8018bda:	460d      	mov	r5, r1
 8018bdc:	b901      	cbnz	r1, 8018be0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8018bde:	b192      	cbz	r2, 8018c06 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8018be0:	6823      	ldr	r3, [r4, #0]
 8018be2:	4620      	mov	r0, r4
 8018be4:	699b      	ldr	r3, [r3, #24]
 8018be6:	4798      	blx	r3
 8018be8:	88e2      	ldrh	r2, [r4, #6]
 8018bea:	88a1      	ldrh	r1, [r4, #4]
 8018bec:	4432      	add	r2, r6
 8018bee:	4429      	add	r1, r5
 8018bf0:	4620      	mov	r0, r4
 8018bf2:	b212      	sxth	r2, r2
 8018bf4:	b209      	sxth	r1, r1
 8018bf6:	f7fd f97f 	bl	8015ef8 <_ZN8touchgfx8Drawable5setXYEss>
 8018bfa:	6823      	ldr	r3, [r4, #0]
 8018bfc:	4620      	mov	r0, r4
 8018bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c02:	699b      	ldr	r3, [r3, #24]
 8018c04:	4718      	bx	r3
 8018c06:	bd70      	pop	{r4, r5, r6, pc}

08018c08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8018c08:	b510      	push	{r4, lr}
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	4604      	mov	r4, r0
 8018c0e:	4608      	mov	r0, r1
 8018c10:	8023      	strh	r3, [r4, #0]
 8018c12:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018c16:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8018c1a:	8063      	strh	r3, [r4, #2]
 8018c1c:	6803      	ldr	r3, [r0, #0]
 8018c1e:	80a1      	strh	r1, [r4, #4]
 8018c20:	80e2      	strh	r2, [r4, #6]
 8018c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c24:	4621      	mov	r1, r4
 8018c26:	4798      	blx	r3
 8018c28:	4620      	mov	r0, r4
 8018c2a:	bd10      	pop	{r4, pc}

08018c2c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8018c2c:	b530      	push	{r4, r5, lr}
 8018c2e:	8083      	strh	r3, [r0, #4]
 8018c30:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018c34:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8018c38:	80c3      	strh	r3, [r0, #6]
 8018c3a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8018c3e:	6141      	str	r1, [r0, #20]
 8018c40:	7203      	strb	r3, [r0, #8]
 8018c42:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018c46:	8302      	strh	r2, [r0, #24]
 8018c48:	7243      	strb	r3, [r0, #9]
 8018c4a:	7a83      	ldrb	r3, [r0, #10]
 8018c4c:	f365 0306 	bfi	r3, r5, #0, #7
 8018c50:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8018c54:	f365 13c7 	bfi	r3, r5, #7, #1
 8018c58:	7283      	strb	r3, [r0, #10]
 8018c5a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8018c5e:	72c3      	strb	r3, [r0, #11]
 8018c60:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018c64:	7303      	strb	r3, [r0, #12]
 8018c66:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8018c6a:	81c3      	strh	r3, [r0, #14]
 8018c6c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8018c70:	8203      	strh	r3, [r0, #16]
 8018c72:	4b01      	ldr	r3, [pc, #4]	; (8018c78 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8018c74:	6003      	str	r3, [r0, #0]
 8018c76:	bd30      	pop	{r4, r5, pc}
 8018c78:	0802aa98 	.word	0x0802aa98

08018c7c <_ZNK8touchgfx9ConstFont4findEt>:
 8018c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c7e:	6944      	ldr	r4, [r0, #20]
 8018c80:	b3bc      	cbz	r4, 8018cf2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c82:	88a3      	ldrh	r3, [r4, #4]
 8018c84:	8b02      	ldrh	r2, [r0, #24]
 8018c86:	1acb      	subs	r3, r1, r3
 8018c88:	f102 32ff 	add.w	r2, r2, #4294967295
 8018c8c:	d431      	bmi.n	8018cf2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c8e:	4293      	cmp	r3, r2
 8018c90:	dd0c      	ble.n	8018cac <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8018c92:	230e      	movs	r3, #14
 8018c94:	fb03 4302 	mla	r3, r3, r2, r4
 8018c98:	889b      	ldrh	r3, [r3, #4]
 8018c9a:	1a5b      	subs	r3, r3, r1
 8018c9c:	1ad3      	subs	r3, r2, r3
 8018c9e:	429a      	cmp	r2, r3
 8018ca0:	db27      	blt.n	8018cf2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	bfbc      	itt	lt
 8018ca6:	2302      	movlt	r3, #2
 8018ca8:	fb92 f3f3 	sdivlt	r3, r2, r3
 8018cac:	2500      	movs	r5, #0
 8018cae:	260e      	movs	r6, #14
 8018cb0:	4295      	cmp	r5, r2
 8018cb2:	dc1e      	bgt.n	8018cf2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018cb4:	fb06 4003 	mla	r0, r6, r3, r4
 8018cb8:	8887      	ldrh	r7, [r0, #4]
 8018cba:	42b9      	cmp	r1, r7
 8018cbc:	d01a      	beq.n	8018cf4 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8018cbe:	d20d      	bcs.n	8018cdc <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8018cc0:	1e5a      	subs	r2, r3, #1
 8018cc2:	4295      	cmp	r5, r2
 8018cc4:	dc15      	bgt.n	8018cf2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018cc6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8018cca:	1a5b      	subs	r3, r3, r1
 8018ccc:	1ad3      	subs	r3, r2, r3
 8018cce:	429a      	cmp	r2, r3
 8018cd0:	db0f      	blt.n	8018cf2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018cd2:	429d      	cmp	r5, r3
 8018cd4:	ddec      	ble.n	8018cb0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018cd6:	1953      	adds	r3, r2, r5
 8018cd8:	105b      	asrs	r3, r3, #1
 8018cda:	e7e9      	b.n	8018cb0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018cdc:	1c5d      	adds	r5, r3, #1
 8018cde:	42aa      	cmp	r2, r5
 8018ce0:	db07      	blt.n	8018cf2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018ce2:	8a43      	ldrh	r3, [r0, #18]
 8018ce4:	1acb      	subs	r3, r1, r3
 8018ce6:	442b      	add	r3, r5
 8018ce8:	429d      	cmp	r5, r3
 8018cea:	dc02      	bgt.n	8018cf2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018cec:	429a      	cmp	r2, r3
 8018cee:	dadf      	bge.n	8018cb0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018cf0:	e7f1      	b.n	8018cd6 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8018cf2:	2000      	movs	r0, #0
 8018cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018cf6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8018cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cf8:	4604      	mov	r4, r0
 8018cfa:	4617      	mov	r7, r2
 8018cfc:	461e      	mov	r6, r3
 8018cfe:	b911      	cbnz	r1, 8018d06 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018d00:	2500      	movs	r5, #0
 8018d02:	4628      	mov	r0, r5
 8018d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d06:	290a      	cmp	r1, #10
 8018d08:	d0fa      	beq.n	8018d00 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018d0a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018d0e:	4291      	cmp	r1, r2
 8018d10:	d0f6      	beq.n	8018d00 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018d12:	f242 020b 	movw	r2, #8203	; 0x200b
 8018d16:	4291      	cmp	r1, r2
 8018d18:	d0f2      	beq.n	8018d00 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018d1a:	f7ff ffaf 	bl	8018c7c <_ZNK8touchgfx9ConstFont4findEt>
 8018d1e:	4605      	mov	r5, r0
 8018d20:	b950      	cbnz	r0, 8018d38 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8018d22:	6823      	ldr	r3, [r4, #0]
 8018d24:	4620      	mov	r0, r4
 8018d26:	691b      	ldr	r3, [r3, #16]
 8018d28:	4798      	blx	r3
 8018d2a:	4601      	mov	r1, r0
 8018d2c:	4620      	mov	r0, r4
 8018d2e:	f7ff ffa5 	bl	8018c7c <_ZNK8touchgfx9ConstFont4findEt>
 8018d32:	4605      	mov	r5, r0
 8018d34:	2800      	cmp	r0, #0
 8018d36:	d0e3      	beq.n	8018d00 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018d38:	6823      	ldr	r3, [r4, #0]
 8018d3a:	4629      	mov	r1, r5
 8018d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018d3e:	4620      	mov	r0, r4
 8018d40:	4798      	blx	r3
 8018d42:	6038      	str	r0, [r7, #0]
 8018d44:	6823      	ldr	r3, [r4, #0]
 8018d46:	4620      	mov	r0, r4
 8018d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d4a:	4798      	blx	r3
 8018d4c:	7030      	strb	r0, [r6, #0]
 8018d4e:	e7d8      	b.n	8018d02 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08018d50 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8018d50:	2000      	movs	r0, #0
 8018d52:	4770      	bx	lr

08018d54 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8018d54:	2001      	movs	r0, #1
 8018d56:	4770      	bx	lr

08018d58 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8018d58:	2002      	movs	r0, #2
 8018d5a:	4770      	bx	lr

08018d5c <_ZN8touchgfx6ScreenD1Ev>:
 8018d5c:	4770      	bx	lr

08018d5e <_ZN8touchgfx12GestureEventD1Ev>:
 8018d5e:	4770      	bx	lr

08018d60 <_ZN8touchgfx9DragEventD1Ev>:
 8018d60:	4770      	bx	lr

08018d62 <_ZN8touchgfx10ClickEventD1Ev>:
 8018d62:	4770      	bx	lr

08018d64 <_ZN8touchgfx10ClickEventD0Ev>:
 8018d64:	b510      	push	{r4, lr}
 8018d66:	4604      	mov	r4, r0
 8018d68:	210c      	movs	r1, #12
 8018d6a:	f00f f988 	bl	802807e <_ZdlPvj>
 8018d6e:	4620      	mov	r0, r4
 8018d70:	bd10      	pop	{r4, pc}

08018d72 <_ZN8touchgfx9DragEventD0Ev>:
 8018d72:	b510      	push	{r4, lr}
 8018d74:	4604      	mov	r4, r0
 8018d76:	2110      	movs	r1, #16
 8018d78:	f00f f981 	bl	802807e <_ZdlPvj>
 8018d7c:	4620      	mov	r0, r4
 8018d7e:	bd10      	pop	{r4, pc}

08018d80 <_ZN8touchgfx12GestureEventD0Ev>:
 8018d80:	b510      	push	{r4, lr}
 8018d82:	4604      	mov	r4, r0
 8018d84:	210c      	movs	r1, #12
 8018d86:	f00f f97a 	bl	802807e <_ZdlPvj>
 8018d8a:	4620      	mov	r0, r4
 8018d8c:	bd10      	pop	{r4, pc}

08018d8e <_ZN8touchgfx6ScreenD0Ev>:
 8018d8e:	b510      	push	{r4, lr}
 8018d90:	4604      	mov	r4, r0
 8018d92:	213c      	movs	r1, #60	; 0x3c
 8018d94:	f00f f973 	bl	802807e <_ZdlPvj>
 8018d98:	4620      	mov	r0, r4
 8018d9a:	bd10      	pop	{r4, pc}

08018d9c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018d9c:	b530      	push	{r4, r5, lr}
 8018d9e:	460d      	mov	r5, r1
 8018da0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018da2:	b087      	sub	sp, #28
 8018da4:	4604      	mov	r4, r0
 8018da6:	b301      	cbz	r1, 8018dea <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8018da8:	a801      	add	r0, sp, #4
 8018daa:	f7ff ff2d 	bl	8018c08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018dae:	892a      	ldrh	r2, [r5, #8]
 8018db0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018db4:	7928      	ldrb	r0, [r5, #4]
 8018db6:	1ad2      	subs	r2, r2, r3
 8018db8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018dba:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018dbe:	441a      	add	r2, r3
 8018dc0:	896b      	ldrh	r3, [r5, #10]
 8018dc2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8018dc6:	f88d 0010 	strb.w	r0, [sp, #16]
 8018dca:	1b5b      	subs	r3, r3, r5
 8018dcc:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8018dce:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018dd0:	442b      	add	r3, r5
 8018dd2:	4d07      	ldr	r5, [pc, #28]	; (8018df0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018dd4:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018dd8:	9503      	str	r5, [sp, #12]
 8018dda:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018dde:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018de2:	6803      	ldr	r3, [r0, #0]
 8018de4:	a903      	add	r1, sp, #12
 8018de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018de8:	4798      	blx	r3
 8018dea:	b007      	add	sp, #28
 8018dec:	bd30      	pop	{r4, r5, pc}
 8018dee:	bf00      	nop
 8018df0:	0802ab20 	.word	0x0802ab20

08018df4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018df8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018dfa:	b08a      	sub	sp, #40	; 0x28
 8018dfc:	4604      	mov	r4, r0
 8018dfe:	460d      	mov	r5, r1
 8018e00:	b113      	cbz	r3, 8018e08 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8018e02:	790b      	ldrb	r3, [r1, #4]
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d044      	beq.n	8018e92 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018e08:	f104 0804 	add.w	r8, r4, #4
 8018e0c:	4641      	mov	r1, r8
 8018e0e:	a803      	add	r0, sp, #12
 8018e10:	f7ff fefa 	bl	8018c08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018e14:	792b      	ldrb	r3, [r5, #4]
 8018e16:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8018e1a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8018e1e:	b983      	cbnz	r3, 8018e42 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8018e20:	892a      	ldrh	r2, [r5, #8]
 8018e22:	88e9      	ldrh	r1, [r5, #6]
 8018e24:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8018e28:	1b92      	subs	r2, r2, r6
 8018e2a:	1bc9      	subs	r1, r1, r7
 8018e2c:	9301      	str	r3, [sp, #4]
 8018e2e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8018e32:	9300      	str	r3, [sp, #0]
 8018e34:	b212      	sxth	r2, r2
 8018e36:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8018e3a:	b209      	sxth	r1, r1
 8018e3c:	4640      	mov	r0, r8
 8018e3e:	f7fc fc9d 	bl	801577c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8018e42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018e44:	b329      	cbz	r1, 8018e92 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018e46:	a805      	add	r0, sp, #20
 8018e48:	f7ff fede 	bl	8018c08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018e4c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018e50:	792b      	ldrb	r3, [r5, #4]
 8018e52:	1abf      	subs	r7, r7, r2
 8018e54:	88ea      	ldrh	r2, [r5, #6]
 8018e56:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018e58:	4417      	add	r7, r2
 8018e5a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8018e5c:	f88d 3020 	strb.w	r3, [sp, #32]
 8018e60:	4417      	add	r7, r2
 8018e62:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018e66:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8018e6a:	1ab6      	subs	r6, r6, r2
 8018e6c:	892a      	ldrh	r2, [r5, #8]
 8018e6e:	a907      	add	r1, sp, #28
 8018e70:	4416      	add	r6, r2
 8018e72:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018e74:	4416      	add	r6, r2
 8018e76:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8018e7a:	2600      	movs	r6, #0
 8018e7c:	4a06      	ldr	r2, [pc, #24]	; (8018e98 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8018e7e:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8018e82:	9207      	str	r2, [sp, #28]
 8018e84:	6803      	ldr	r3, [r0, #0]
 8018e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e88:	4798      	blx	r3
 8018e8a:	792b      	ldrb	r3, [r5, #4]
 8018e8c:	b10b      	cbz	r3, 8018e92 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018e8e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8018e92:	b00a      	add	sp, #40	; 0x28
 8018e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e98:	0802aaf8 	.word	0x0802aaf8

08018e9c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ea0:	460c      	mov	r4, r1
 8018ea2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018ea4:	b088      	sub	sp, #32
 8018ea6:	4605      	mov	r5, r0
 8018ea8:	2900      	cmp	r1, #0
 8018eaa:	d06d      	beq.n	8018f88 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8018eac:	4668      	mov	r0, sp
 8018eae:	f7ff feab 	bl	8018c08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018eb2:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8018eb4:	88e3      	ldrh	r3, [r4, #6]
 8018eb6:	f9bd 8000 	ldrsh.w	r8, [sp]
 8018eba:	440b      	add	r3, r1
 8018ebc:	b21b      	sxth	r3, r3
 8018ebe:	4543      	cmp	r3, r8
 8018ec0:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8018ec4:	db31      	blt.n	8018f2a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018ec6:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8018eca:	44c4      	add	ip, r8
 8018ecc:	fa0f fc8c 	sxth.w	ip, ip
 8018ed0:	4563      	cmp	r3, ip
 8018ed2:	da2a      	bge.n	8018f2a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018ed4:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8018ed6:	8926      	ldrh	r6, [r4, #8]
 8018ed8:	4416      	add	r6, r2
 8018eda:	b236      	sxth	r6, r6
 8018edc:	42be      	cmp	r6, r7
 8018ede:	db24      	blt.n	8018f2a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018ee0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018ee4:	4438      	add	r0, r7
 8018ee6:	b200      	sxth	r0, r0
 8018ee8:	4286      	cmp	r6, r0
 8018eea:	da1e      	bge.n	8018f2a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018eec:	8963      	ldrh	r3, [r4, #10]
 8018eee:	4419      	add	r1, r3
 8018ef0:	b209      	sxth	r1, r1
 8018ef2:	4541      	cmp	r1, r8
 8018ef4:	db08      	blt.n	8018f08 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018ef6:	4561      	cmp	r1, ip
 8018ef8:	da06      	bge.n	8018f08 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018efa:	89a3      	ldrh	r3, [r4, #12]
 8018efc:	441a      	add	r2, r3
 8018efe:	b212      	sxth	r2, r2
 8018f00:	42ba      	cmp	r2, r7
 8018f02:	db01      	blt.n	8018f08 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018f04:	4282      	cmp	r2, r0
 8018f06:	db10      	blt.n	8018f2a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018f08:	4b21      	ldr	r3, [pc, #132]	; (8018f90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8018f0a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018f0c:	9304      	str	r3, [sp, #16]
 8018f0e:	2302      	movs	r3, #2
 8018f10:	f88d 3014 	strb.w	r3, [sp, #20]
 8018f14:	2300      	movs	r3, #0
 8018f16:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018f1a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018f1e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018f22:	6803      	ldr	r3, [r0, #0]
 8018f24:	a904      	add	r1, sp, #16
 8018f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f28:	4798      	blx	r3
 8018f2a:	1d29      	adds	r1, r5, #4
 8018f2c:	a802      	add	r0, sp, #8
 8018f2e:	f7ff fe6b 	bl	8018c08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018f32:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018f36:	88e0      	ldrh	r0, [r4, #6]
 8018f38:	eba3 0808 	sub.w	r8, r3, r8
 8018f3c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018f40:	7921      	ldrb	r1, [r4, #4]
 8018f42:	1bdf      	subs	r7, r3, r7
 8018f44:	b2bb      	uxth	r3, r7
 8018f46:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8018f4a:	fa1f f888 	uxth.w	r8, r8
 8018f4e:	8922      	ldrh	r2, [r4, #8]
 8018f50:	8967      	ldrh	r7, [r4, #10]
 8018f52:	89a4      	ldrh	r4, [r4, #12]
 8018f54:	4440      	add	r0, r8
 8018f56:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8018f58:	4460      	add	r0, ip
 8018f5a:	441a      	add	r2, r3
 8018f5c:	44b8      	add	r8, r7
 8018f5e:	4423      	add	r3, r4
 8018f60:	4c0c      	ldr	r4, [pc, #48]	; (8018f94 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8018f62:	f8ad 0016 	strh.w	r0, [sp, #22]
 8018f66:	4433      	add	r3, r6
 8018f68:	4432      	add	r2, r6
 8018f6a:	44e0      	add	r8, ip
 8018f6c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018f6e:	f88d 1014 	strb.w	r1, [sp, #20]
 8018f72:	9404      	str	r4, [sp, #16]
 8018f74:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018f78:	f8ad 801a 	strh.w	r8, [sp, #26]
 8018f7c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018f80:	6803      	ldr	r3, [r0, #0]
 8018f82:	a904      	add	r1, sp, #16
 8018f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018f86:	4798      	blx	r3
 8018f88:	b008      	add	sp, #32
 8018f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f8e:	bf00      	nop
 8018f90:	0802aaf8 	.word	0x0802aaf8
 8018f94:	0802ab0c 	.word	0x0802ab0c

08018f98 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8018f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f9a:	4604      	mov	r4, r0
 8018f9c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8018fa0:	3201      	adds	r2, #1
 8018fa2:	d112      	bne.n	8018fca <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018fa4:	2500      	movs	r5, #0
 8018fa6:	9500      	str	r5, [sp, #0]
 8018fa8:	466d      	mov	r5, sp
 8018faa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018fae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018fb2:	6803      	ldr	r3, [r0, #0]
 8018fb4:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018fb8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018fbc:	4629      	mov	r1, r5
 8018fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fc0:	4798      	blx	r3
 8018fc2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018fc6:	e884 0003 	stmia.w	r4, {r0, r1}
 8018fca:	4620      	mov	r0, r4
 8018fcc:	b003      	add	sp, #12
 8018fce:	bd30      	pop	{r4, r5, pc}

08018fd0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018fd0:	b513      	push	{r0, r1, r4, lr}
 8018fd2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8018fd6:	4604      	mov	r4, r0
 8018fd8:	3301      	adds	r3, #1
 8018fda:	d109      	bne.n	8018ff0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018fdc:	4601      	mov	r1, r0
 8018fde:	4668      	mov	r0, sp
 8018fe0:	f7ff fe12 	bl	8018c08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018fe4:	f8bd 3000 	ldrh.w	r3, [sp]
 8018fe8:	8423      	strh	r3, [r4, #32]
 8018fea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018fee:	8463      	strh	r3, [r4, #34]	; 0x22
 8018ff0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018ff4:	b002      	add	sp, #8
 8018ff6:	bd10      	pop	{r4, pc}

08018ff8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018ff8:	b513      	push	{r0, r1, r4, lr}
 8018ffa:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8018ffe:	4604      	mov	r4, r0
 8019000:	3301      	adds	r3, #1
 8019002:	d109      	bne.n	8019018 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019004:	4601      	mov	r1, r0
 8019006:	4668      	mov	r0, sp
 8019008:	f7ff fdfe 	bl	8018c08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801900c:	f8bd 3000 	ldrh.w	r3, [sp]
 8019010:	8423      	strh	r3, [r4, #32]
 8019012:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019016:	8463      	strh	r3, [r4, #34]	; 0x22
 8019018:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801901c:	b002      	add	sp, #8
 801901e:	bd10      	pop	{r4, pc}

08019020 <_ZN8touchgfx6ScreenC1Ev>:
 8019020:	b570      	push	{r4, r5, r6, lr}
 8019022:	4605      	mov	r5, r0
 8019024:	4b16      	ldr	r3, [pc, #88]	; (8019080 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8019026:	2101      	movs	r1, #1
 8019028:	f845 3b04 	str.w	r3, [r5], #4
 801902c:	2300      	movs	r3, #0
 801902e:	4604      	mov	r4, r0
 8019030:	8103      	strh	r3, [r0, #8]
 8019032:	8143      	strh	r3, [r0, #10]
 8019034:	8183      	strh	r3, [r0, #12]
 8019036:	81c3      	strh	r3, [r0, #14]
 8019038:	8203      	strh	r3, [r0, #16]
 801903a:	8243      	strh	r3, [r0, #18]
 801903c:	8283      	strh	r3, [r0, #20]
 801903e:	82c3      	strh	r3, [r0, #22]
 8019040:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8019044:	6203      	str	r3, [r0, #32]
 8019046:	8483      	strh	r3, [r0, #36]	; 0x24
 8019048:	84c3      	strh	r3, [r0, #38]	; 0x26
 801904a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801904e:	4a0d      	ldr	r2, [pc, #52]	; (8019084 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019050:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8019054:	6343      	str	r3, [r0, #52]	; 0x34
 8019056:	4b0c      	ldr	r3, [pc, #48]	; (8019088 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8019058:	6042      	str	r2, [r0, #4]
 801905a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801905e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8019060:	4a0a      	ldr	r2, [pc, #40]	; (801908c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019062:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8019066:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801906a:	f9b2 1000 	ldrsh.w	r1, [r2]
 801906e:	4628      	mov	r0, r5
 8019070:	4798      	blx	r3
 8019072:	6863      	ldr	r3, [r4, #4]
 8019074:	4628      	mov	r0, r5
 8019076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019078:	4631      	mov	r1, r6
 801907a:	4798      	blx	r3
 801907c:	4620      	mov	r0, r4
 801907e:	bd70      	pop	{r4, r5, r6, pc}
 8019080:	0802ab34 	.word	0x0802ab34
 8019084:	0802a924 	.word	0x0802a924
 8019088:	2019814e 	.word	0x2019814e
 801908c:	2019814c 	.word	0x2019814c

08019090 <_ZN8touchgfx6Screen4drawEv>:
 8019090:	b507      	push	{r0, r1, r2, lr}
 8019092:	2100      	movs	r1, #0
 8019094:	4b08      	ldr	r3, [pc, #32]	; (80190b8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8019096:	9100      	str	r1, [sp, #0]
 8019098:	f9b3 2000 	ldrsh.w	r2, [r3]
 801909c:	4b07      	ldr	r3, [pc, #28]	; (80190bc <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801909e:	f8ad 2004 	strh.w	r2, [sp, #4]
 80190a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80190a6:	4669      	mov	r1, sp
 80190a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80190ac:	6803      	ldr	r3, [r0, #0]
 80190ae:	689b      	ldr	r3, [r3, #8]
 80190b0:	4798      	blx	r3
 80190b2:	b003      	add	sp, #12
 80190b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80190b8:	2019814c 	.word	0x2019814c
 80190bc:	2019814e 	.word	0x2019814e

080190c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80190c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190c4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80190c8:	b089      	sub	sp, #36	; 0x24
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	4680      	mov	r8, r0
 80190ce:	460c      	mov	r4, r1
 80190d0:	4615      	mov	r5, r2
 80190d2:	dd0e      	ble.n	80190f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80190d4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80190d8:	2b00      	cmp	r3, #0
 80190da:	dd0a      	ble.n	80190f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80190dc:	4628      	mov	r0, r5
 80190de:	f7ff ff5b 	bl	8018f98 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80190e2:	4621      	mov	r1, r4
 80190e4:	f7fe fbd1 	bl	801788a <_ZNK8touchgfx4Rect9intersectERKS0_>
 80190e8:	69eb      	ldr	r3, [r5, #28]
 80190ea:	b928      	cbnz	r0, 80190f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80190ec:	461d      	mov	r5, r3
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d1f4      	bne.n	80190dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80190f2:	b009      	add	sp, #36	; 0x24
 80190f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190f8:	ae04      	add	r6, sp, #16
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	f000 80b5 	beq.w	801926a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019100:	682b      	ldr	r3, [r5, #0]
 8019102:	4629      	mov	r1, r5
 8019104:	68db      	ldr	r3, [r3, #12]
 8019106:	a802      	add	r0, sp, #8
 8019108:	4798      	blx	r3
 801910a:	4628      	mov	r0, r5
 801910c:	f7ff ff60 	bl	8018fd0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019110:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8019114:	4407      	add	r7, r0
 8019116:	4628      	mov	r0, r5
 8019118:	f7ff ff6e 	bl	8018ff8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801911c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019120:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8019124:	4418      	add	r0, r3
 8019126:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801912a:	4621      	mov	r1, r4
 801912c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019130:	b23f      	sxth	r7, r7
 8019132:	4630      	mov	r0, r6
 8019134:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019138:	f8ad 3016 	strh.w	r3, [sp, #22]
 801913c:	f8ad 7010 	strh.w	r7, [sp, #16]
 8019140:	f7fc fbfc 	bl	801593c <_ZN8touchgfx4RectaNERKS0_>
 8019144:	4628      	mov	r0, r5
 8019146:	f7ff ff27 	bl	8018f98 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801914a:	4602      	mov	r2, r0
 801914c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8019150:	ab06      	add	r3, sp, #24
 8019152:	e883 0003 	stmia.w	r3, {r0, r1}
 8019156:	4611      	mov	r1, r2
 8019158:	4618      	mov	r0, r3
 801915a:	f7fc fbef 	bl	801593c <_ZN8touchgfx4RectaNERKS0_>
 801915e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019162:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019166:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801916a:	4299      	cmp	r1, r3
 801916c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8019170:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8019174:	d10b      	bne.n	801918e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019176:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801917a:	4552      	cmp	r2, sl
 801917c:	d107      	bne.n	801918e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801917e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019182:	455a      	cmp	r2, fp
 8019184:	d103      	bne.n	801918e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019186:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801918a:	454a      	cmp	r2, r9
 801918c:	d06d      	beq.n	801926a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801918e:	f1bb 0f00 	cmp.w	fp, #0
 8019192:	dd65      	ble.n	8019260 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8019194:	f1b9 0f00 	cmp.w	r9, #0
 8019198:	dd62      	ble.n	8019260 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801919a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801919e:	fa1f f08a 	uxth.w	r0, sl
 80191a2:	4552      	cmp	r2, sl
 80191a4:	9000      	str	r0, [sp, #0]
 80191a6:	da12      	bge.n	80191ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80191a8:	9301      	str	r3, [sp, #4]
 80191aa:	9b00      	ldr	r3, [sp, #0]
 80191ac:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80191b0:	f8ad 2012 	strh.w	r2, [sp, #18]
 80191b4:	1a9a      	subs	r2, r3, r2
 80191b6:	f8ad 1010 	strh.w	r1, [sp, #16]
 80191ba:	f8ad 0014 	strh.w	r0, [sp, #20]
 80191be:	f8ad 2016 	strh.w	r2, [sp, #22]
 80191c2:	69ea      	ldr	r2, [r5, #28]
 80191c4:	4631      	mov	r1, r6
 80191c6:	4640      	mov	r0, r8
 80191c8:	f7ff ff7a 	bl	80190c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80191cc:	9b01      	ldr	r3, [sp, #4]
 80191ce:	f9b4 2000 	ldrsh.w	r2, [r4]
 80191d2:	b29f      	uxth	r7, r3
 80191d4:	429a      	cmp	r2, r3
 80191d6:	da0d      	bge.n	80191f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80191d8:	f8ad 2010 	strh.w	r2, [sp, #16]
 80191dc:	1aba      	subs	r2, r7, r2
 80191de:	f8ad a012 	strh.w	sl, [sp, #18]
 80191e2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80191e6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80191ea:	69ea      	ldr	r2, [r5, #28]
 80191ec:	4631      	mov	r1, r6
 80191ee:	4640      	mov	r0, r8
 80191f0:	f7ff ff66 	bl	80190c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80191f4:	8822      	ldrh	r2, [r4, #0]
 80191f6:	88a3      	ldrh	r3, [r4, #4]
 80191f8:	445f      	add	r7, fp
 80191fa:	4413      	add	r3, r2
 80191fc:	b29b      	uxth	r3, r3
 80191fe:	b2bf      	uxth	r7, r7
 8019200:	b23a      	sxth	r2, r7
 8019202:	b219      	sxth	r1, r3
 8019204:	4291      	cmp	r1, r2
 8019206:	dd0d      	ble.n	8019224 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8019208:	1bdb      	subs	r3, r3, r7
 801920a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801920e:	f8ad a012 	strh.w	sl, [sp, #18]
 8019212:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019216:	f8ad 9016 	strh.w	r9, [sp, #22]
 801921a:	69ea      	ldr	r2, [r5, #28]
 801921c:	4631      	mov	r1, r6
 801921e:	4640      	mov	r0, r8
 8019220:	f7ff ff4e 	bl	80190c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019224:	88e2      	ldrh	r2, [r4, #6]
 8019226:	8863      	ldrh	r3, [r4, #2]
 8019228:	4413      	add	r3, r2
 801922a:	9a00      	ldr	r2, [sp, #0]
 801922c:	b29b      	uxth	r3, r3
 801922e:	444a      	add	r2, r9
 8019230:	fa1f f982 	uxth.w	r9, r2
 8019234:	fa0f f289 	sxth.w	r2, r9
 8019238:	b219      	sxth	r1, r3
 801923a:	428a      	cmp	r2, r1
 801923c:	da15      	bge.n	801926a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801923e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019242:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019246:	eba3 0309 	sub.w	r3, r3, r9
 801924a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801924e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019252:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019256:	f8ad 3016 	strh.w	r3, [sp, #22]
 801925a:	69ea      	ldr	r2, [r5, #28]
 801925c:	4631      	mov	r1, r6
 801925e:	e001      	b.n	8019264 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8019260:	4621      	mov	r1, r4
 8019262:	69ea      	ldr	r2, [r5, #28]
 8019264:	4640      	mov	r0, r8
 8019266:	f7ff ff2b 	bl	80190c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801926a:	4628      	mov	r0, r5
 801926c:	f7ff fe94 	bl	8018f98 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019270:	4633      	mov	r3, r6
 8019272:	4602      	mov	r2, r0
 8019274:	6861      	ldr	r1, [r4, #4]
 8019276:	6820      	ldr	r0, [r4, #0]
 8019278:	c303      	stmia	r3!, {r0, r1}
 801927a:	4611      	mov	r1, r2
 801927c:	4630      	mov	r0, r6
 801927e:	f7fc fb5d 	bl	801593c <_ZN8touchgfx4RectaNERKS0_>
 8019282:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019286:	2b00      	cmp	r3, #0
 8019288:	f77f af33 	ble.w	80190f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801928c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019290:	2b00      	cmp	r3, #0
 8019292:	f77f af2e 	ble.w	80190f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019296:	4628      	mov	r0, r5
 8019298:	f7ff fe9a 	bl	8018fd0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801929c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80192a0:	1a18      	subs	r0, r3, r0
 80192a2:	f8ad 0010 	strh.w	r0, [sp, #16]
 80192a6:	4628      	mov	r0, r5
 80192a8:	f7ff fea6 	bl	8018ff8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80192ac:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80192b0:	4631      	mov	r1, r6
 80192b2:	1a18      	subs	r0, r3, r0
 80192b4:	f8ad 0012 	strh.w	r0, [sp, #18]
 80192b8:	682b      	ldr	r3, [r5, #0]
 80192ba:	4628      	mov	r0, r5
 80192bc:	689b      	ldr	r3, [r3, #8]
 80192be:	4798      	blx	r3
 80192c0:	e717      	b.n	80190f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080192c2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80192c2:	b570      	push	{r4, r5, r6, lr}
 80192c4:	2300      	movs	r3, #0
 80192c6:	460c      	mov	r4, r1
 80192c8:	b086      	sub	sp, #24
 80192ca:	1d06      	adds	r6, r0, #4
 80192cc:	4631      	mov	r1, r6
 80192ce:	4605      	mov	r5, r0
 80192d0:	a802      	add	r0, sp, #8
 80192d2:	9301      	str	r3, [sp, #4]
 80192d4:	f7ff fc98 	bl	8018c08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80192d8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80192dc:	8822      	ldrh	r2, [r4, #0]
 80192de:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80192e2:	1ad2      	subs	r2, r2, r3
 80192e4:	8863      	ldrh	r3, [r4, #2]
 80192e6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80192ea:	1a5b      	subs	r3, r3, r1
 80192ec:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80192f0:	f8ad 2010 	strh.w	r2, [sp, #16]
 80192f4:	f8ad 0014 	strh.w	r0, [sp, #20]
 80192f8:	f8ad 1016 	strh.w	r1, [sp, #22]
 80192fc:	aa01      	add	r2, sp, #4
 80192fe:	a904      	add	r1, sp, #16
 8019300:	4630      	mov	r0, r6
 8019302:	f8ad 3012 	strh.w	r3, [sp, #18]
 8019306:	f7fc fbf1 	bl	8015aec <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801930a:	9a01      	ldr	r2, [sp, #4]
 801930c:	b11a      	cbz	r2, 8019316 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801930e:	4621      	mov	r1, r4
 8019310:	4628      	mov	r0, r5
 8019312:	f7ff fed5 	bl	80190c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019316:	b006      	add	sp, #24
 8019318:	bd70      	pop	{r4, r5, r6, pc}

0801931a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801931a:	b530      	push	{r4, r5, lr}
 801931c:	4602      	mov	r2, r0
 801931e:	b085      	sub	sp, #20
 8019320:	460d      	mov	r5, r1
 8019322:	466b      	mov	r3, sp
 8019324:	4604      	mov	r4, r0
 8019326:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801932a:	6851      	ldr	r1, [r2, #4]
 801932c:	c303      	stmia	r3!, {r0, r1}
 801932e:	4629      	mov	r1, r5
 8019330:	4668      	mov	r0, sp
 8019332:	f7fc fb03 	bl	801593c <_ZN8touchgfx4RectaNERKS0_>
 8019336:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801933a:	b12b      	cbz	r3, 8019348 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801933c:	4669      	mov	r1, sp
 801933e:	4620      	mov	r0, r4
 8019340:	f7ff ffbf 	bl	80192c2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8019344:	b005      	add	sp, #20
 8019346:	bd30      	pop	{r4, r5, pc}
 8019348:	3404      	adds	r4, #4
 801934a:	4621      	mov	r1, r4
 801934c:	a802      	add	r0, sp, #8
 801934e:	f7ff fc5b 	bl	8018c08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019352:	f8bd 3000 	ldrh.w	r3, [sp]
 8019356:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801935a:	4669      	mov	r1, sp
 801935c:	1a9b      	subs	r3, r3, r2
 801935e:	f8ad 3000 	strh.w	r3, [sp]
 8019362:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8019366:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801936a:	4620      	mov	r0, r4
 801936c:	1a9b      	subs	r3, r3, r2
 801936e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019372:	f7fc fb82 	bl	8015a7a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8019376:	e7e5      	b.n	8019344 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08019378 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019378:	460b      	mov	r3, r1
 801937a:	680a      	ldr	r2, [r1, #0]
 801937c:	1d01      	adds	r1, r0, #4
 801937e:	6992      	ldr	r2, [r2, #24]
 8019380:	4618      	mov	r0, r3
 8019382:	4710      	bx	r2

08019384 <_ZN8touchgfx12TextProviderC1Ev>:
 8019384:	b538      	push	{r3, r4, r5, lr}
 8019386:	2500      	movs	r5, #0
 8019388:	2302      	movs	r3, #2
 801938a:	4604      	mov	r4, r0
 801938c:	e9c0 5500 	strd	r5, r5, [r0]
 8019390:	7403      	strb	r3, [r0, #16]
 8019392:	6145      	str	r5, [r0, #20]
 8019394:	7605      	strb	r5, [r0, #24]
 8019396:	83c5      	strh	r5, [r0, #30]
 8019398:	8405      	strh	r5, [r0, #32]
 801939a:	86c5      	strh	r5, [r0, #54]	; 0x36
 801939c:	8705      	strh	r5, [r0, #56]	; 0x38
 801939e:	87c5      	strh	r5, [r0, #62]	; 0x3e
 80193a0:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 80193a4:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 80193a8:	220e      	movs	r2, #14
 80193aa:	4629      	mov	r1, r5
 80193ac:	304c      	adds	r0, #76	; 0x4c
 80193ae:	f00e ff1e 	bl	80281ee <memset>
 80193b2:	2301      	movs	r3, #1
 80193b4:	4620      	mov	r0, r4
 80193b6:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80193ba:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80193be:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80193c2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80193c6:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 80193ca:	f7ea f861 	bl	8003490 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80193ce:	4620      	mov	r0, r4
 80193d0:	bd38      	pop	{r3, r4, r5, pc}

080193d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80193d2:	b530      	push	{r4, r5, lr}
 80193d4:	2500      	movs	r5, #0
 80193d6:	2401      	movs	r4, #1
 80193d8:	6843      	ldr	r3, [r0, #4]
 80193da:	b913      	cbnz	r3, 80193e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80193dc:	6803      	ldr	r3, [r0, #0]
 80193de:	b313      	cbz	r3, 8019426 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80193e0:	6043      	str	r3, [r0, #4]
 80193e2:	7e03      	ldrb	r3, [r0, #24]
 80193e4:	b143      	cbz	r3, 80193f8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80193e6:	6943      	ldr	r3, [r0, #20]
 80193e8:	b12b      	cbz	r3, 80193f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80193ea:	881a      	ldrh	r2, [r3, #0]
 80193ec:	b11a      	cbz	r2, 80193f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80193ee:	1c9a      	adds	r2, r3, #2
 80193f0:	6142      	str	r2, [r0, #20]
 80193f2:	8818      	ldrh	r0, [r3, #0]
 80193f4:	bd30      	pop	{r4, r5, pc}
 80193f6:	7605      	strb	r5, [r0, #24]
 80193f8:	6843      	ldr	r3, [r0, #4]
 80193fa:	8819      	ldrh	r1, [r3, #0]
 80193fc:	b199      	cbz	r1, 8019426 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80193fe:	1c9a      	adds	r2, r3, #2
 8019400:	2902      	cmp	r1, #2
 8019402:	6042      	str	r2, [r0, #4]
 8019404:	d1f5      	bne.n	80193f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8019406:	7c03      	ldrb	r3, [r0, #16]
 8019408:	2b01      	cmp	r3, #1
 801940a:	d8e5      	bhi.n	80193d8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801940c:	1c5a      	adds	r2, r3, #1
 801940e:	7402      	strb	r2, [r0, #16]
 8019410:	3302      	adds	r3, #2
 8019412:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8019416:	6143      	str	r3, [r0, #20]
 8019418:	2b00      	cmp	r3, #0
 801941a:	d0dd      	beq.n	80193d8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801941c:	881b      	ldrh	r3, [r3, #0]
 801941e:	2b00      	cmp	r3, #0
 8019420:	d0da      	beq.n	80193d8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019422:	7604      	strb	r4, [r0, #24]
 8019424:	e7d8      	b.n	80193d8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019426:	2000      	movs	r0, #0
 8019428:	e7e4      	b.n	80193f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801942a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801942a:	6001      	str	r1, [r0, #0]
 801942c:	2100      	movs	r1, #0
 801942e:	b430      	push	{r4, r5}
 8019430:	6041      	str	r1, [r0, #4]
 8019432:	6815      	ldr	r5, [r2, #0]
 8019434:	6085      	str	r5, [r0, #8]
 8019436:	6852      	ldr	r2, [r2, #4]
 8019438:	6443      	str	r3, [r0, #68]	; 0x44
 801943a:	9b02      	ldr	r3, [sp, #8]
 801943c:	60c2      	str	r2, [r0, #12]
 801943e:	7401      	strb	r1, [r0, #16]
 8019440:	6141      	str	r1, [r0, #20]
 8019442:	7601      	strb	r1, [r0, #24]
 8019444:	8701      	strh	r1, [r0, #56]	; 0x38
 8019446:	8401      	strh	r1, [r0, #32]
 8019448:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801944c:	6483      	str	r3, [r0, #72]	; 0x48
 801944e:	bc30      	pop	{r4, r5}
 8019450:	f7ea b81e 	b.w	8003490 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08019454 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8019454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019456:	4605      	mov	r5, r0
 8019458:	4608      	mov	r0, r1
 801945a:	b1e9      	cbz	r1, 8019498 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801945c:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8019460:	460b      	mov	r3, r1
 8019462:	4622      	mov	r2, r4
 8019464:	f101 0708 	add.w	r7, r1, #8
 8019468:	4626      	mov	r6, r4
 801946a:	6818      	ldr	r0, [r3, #0]
 801946c:	6859      	ldr	r1, [r3, #4]
 801946e:	3308      	adds	r3, #8
 8019470:	c603      	stmia	r6!, {r0, r1}
 8019472:	42bb      	cmp	r3, r7
 8019474:	4634      	mov	r4, r6
 8019476:	d1f7      	bne.n	8019468 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8019478:	6818      	ldr	r0, [r3, #0]
 801947a:	6030      	str	r0, [r6, #0]
 801947c:	4610      	mov	r0, r2
 801947e:	889b      	ldrh	r3, [r3, #4]
 8019480:	80b3      	strh	r3, [r6, #4]
 8019482:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8019486:	015b      	lsls	r3, r3, #5
 8019488:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801948c:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8019490:	430b      	orrs	r3, r1
 8019492:	425b      	negs	r3, r3
 8019494:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8019498:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801949a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801949a:	b538      	push	{r3, r4, r5, lr}
 801949c:	460c      	mov	r4, r1
 801949e:	6811      	ldr	r1, [r2, #0]
 80194a0:	4610      	mov	r0, r2
 80194a2:	68cd      	ldr	r5, [r1, #12]
 80194a4:	4619      	mov	r1, r3
 80194a6:	47a8      	blx	r5
 80194a8:	2800      	cmp	r0, #0
 80194aa:	bf08      	it	eq
 80194ac:	4620      	moveq	r0, r4
 80194ae:	bd38      	pop	{r3, r4, r5, pc}

080194b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80194b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194b2:	4604      	mov	r4, r0
 80194b4:	4615      	mov	r5, r2
 80194b6:	4608      	mov	r0, r1
 80194b8:	b93a      	cbnz	r2, 80194ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80194ba:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80194be:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80194c2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80194c6:	4628      	mov	r0, r5
 80194c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194ca:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 80194ce:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80194d2:	8893      	ldrh	r3, [r2, #4]
 80194d4:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80194d8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80194dc:	79ee      	ldrb	r6, [r5, #7]
 80194de:	4316      	orrs	r6, r2
 80194e0:	19da      	adds	r2, r3, r7
 80194e2:	b291      	uxth	r1, r2
 80194e4:	291d      	cmp	r1, #29
 80194e6:	b2b7      	uxth	r7, r6
 80194e8:	d879      	bhi.n	80195de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 80194ea:	2201      	movs	r2, #1
 80194ec:	408a      	lsls	r2, r1
 80194ee:	4974      	ldr	r1, [pc, #464]	; (80196c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 80194f0:	10f6      	asrs	r6, r6, #3
 80194f2:	420a      	tst	r2, r1
 80194f4:	d12d      	bne.n	8019552 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 80194f6:	f412 7f60 	tst.w	r2, #896	; 0x380
 80194fa:	d070      	beq.n	80195de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 80194fc:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8019500:	462b      	mov	r3, r5
 8019502:	f105 0e08 	add.w	lr, r5, #8
 8019506:	4615      	mov	r5, r2
 8019508:	4694      	mov	ip, r2
 801950a:	6818      	ldr	r0, [r3, #0]
 801950c:	6859      	ldr	r1, [r3, #4]
 801950e:	3308      	adds	r3, #8
 8019510:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019514:	4573      	cmp	r3, lr
 8019516:	4662      	mov	r2, ip
 8019518:	d1f6      	bne.n	8019508 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801951a:	6818      	ldr	r0, [r3, #0]
 801951c:	f8cc 0000 	str.w	r0, [ip]
 8019520:	889b      	ldrh	r3, [r3, #4]
 8019522:	f8ac 3004 	strh.w	r3, [ip, #4]
 8019526:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801952a:	b2b3      	uxth	r3, r6
 801952c:	1aca      	subs	r2, r1, r3
 801952e:	b292      	uxth	r2, r2
 8019530:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8019534:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8019538:	10d2      	asrs	r2, r2, #3
 801953a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801953e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8019542:	4302      	orrs	r2, r0
 8019544:	1bcf      	subs	r7, r1, r7
 8019546:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801954a:	1afb      	subs	r3, r7, r3
 801954c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8019550:	e7b9      	b.n	80194c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8019552:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019554:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019558:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801955a:	f640 6333 	movw	r3, #3635	; 0xe33
 801955e:	4299      	cmp	r1, r3
 8019560:	d110      	bne.n	8019584 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 8019562:	6803      	ldr	r3, [r0, #0]
 8019564:	68db      	ldr	r3, [r3, #12]
 8019566:	4798      	blx	r3
 8019568:	7b41      	ldrb	r1, [r0, #13]
 801956a:	00cb      	lsls	r3, r1, #3
 801956c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019570:	7a03      	ldrb	r3, [r0, #8]
 8019572:	0648      	lsls	r0, r1, #25
 8019574:	ea43 0302 	orr.w	r3, r3, r2
 8019578:	bf44      	itt	mi
 801957a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801957e:	b21b      	sxthmi	r3, r3
 8019580:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019584:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8019588:	462a      	mov	r2, r5
 801958a:	443b      	add	r3, r7
 801958c:	4433      	add	r3, r6
 801958e:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8019592:	f105 0c08 	add.w	ip, r5, #8
 8019596:	4635      	mov	r5, r6
 8019598:	b29b      	uxth	r3, r3
 801959a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801959e:	4637      	mov	r7, r6
 80195a0:	6810      	ldr	r0, [r2, #0]
 80195a2:	6851      	ldr	r1, [r2, #4]
 80195a4:	3208      	adds	r2, #8
 80195a6:	c703      	stmia	r7!, {r0, r1}
 80195a8:	4562      	cmp	r2, ip
 80195aa:	463e      	mov	r6, r7
 80195ac:	d1f7      	bne.n	801959e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 80195ae:	6810      	ldr	r0, [r2, #0]
 80195b0:	6038      	str	r0, [r7, #0]
 80195b2:	8892      	ldrh	r2, [r2, #4]
 80195b4:	80ba      	strh	r2, [r7, #4]
 80195b6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80195ba:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80195be:	10db      	asrs	r3, r3, #3
 80195c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80195c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80195c8:	4313      	orrs	r3, r2
 80195ca:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80195ce:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80195d2:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80195d6:	1a9b      	subs	r3, r3, r2
 80195d8:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80195dc:	e773      	b.n	80194c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80195de:	f640 611b 	movw	r1, #3611	; 0xe1b
 80195e2:	f023 0204 	bic.w	r2, r3, #4
 80195e6:	428a      	cmp	r2, r1
 80195e8:	d003      	beq.n	80195f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 80195ea:	f640 621d 	movw	r2, #3613	; 0xe1d
 80195ee:	4293      	cmp	r3, r2
 80195f0:	d120      	bne.n	8019634 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 80195f2:	3b01      	subs	r3, #1
 80195f4:	4602      	mov	r2, r0
 80195f6:	b29b      	uxth	r3, r3
 80195f8:	4629      	mov	r1, r5
 80195fa:	4620      	mov	r0, r4
 80195fc:	f7ff ff4d 	bl	801949a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019600:	7b41      	ldrb	r1, [r0, #13]
 8019602:	00cb      	lsls	r3, r1, #3
 8019604:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019608:	7a03      	ldrb	r3, [r0, #8]
 801960a:	0649      	lsls	r1, r1, #25
 801960c:	ea43 0302 	orr.w	r3, r3, r2
 8019610:	bf44      	itt	mi
 8019612:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019616:	b21b      	sxthmi	r3, r3
 8019618:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801961c:	7b6b      	ldrb	r3, [r5, #13]
 801961e:	7aaa      	ldrb	r2, [r5, #10]
 8019620:	005b      	lsls	r3, r3, #1
 8019622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019626:	4313      	orrs	r3, r2
 8019628:	115a      	asrs	r2, r3, #5
 801962a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801962e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8019632:	e036      	b.n	80196a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 8019634:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8019638:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801963c:	7a2a      	ldrb	r2, [r5, #8]
 801963e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8019642:	ea42 0201 	orr.w	r2, r2, r1
 8019646:	f640 6109 	movw	r1, #3593	; 0xe09
 801964a:	bf1c      	itt	ne
 801964c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8019650:	b212      	sxthne	r2, r2
 8019652:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8019656:	f023 0210 	bic.w	r2, r3, #16
 801965a:	428a      	cmp	r2, r1
 801965c:	d003      	beq.n	8019666 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 801965e:	f640 6213 	movw	r2, #3603	; 0xe13
 8019662:	4293      	cmp	r3, r2
 8019664:	d12a      	bne.n	80196bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 8019666:	7b6e      	ldrb	r6, [r5, #13]
 8019668:	4629      	mov	r1, r5
 801966a:	0076      	lsls	r6, r6, #1
 801966c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019670:	7aae      	ldrb	r6, [r5, #10]
 8019672:	4316      	orrs	r6, r2
 8019674:	f640 6213 	movw	r2, #3603	; 0xe13
 8019678:	4293      	cmp	r3, r2
 801967a:	bf18      	it	ne
 801967c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8019680:	4602      	mov	r2, r0
 8019682:	bf14      	ite	ne
 8019684:	b29b      	uxthne	r3, r3
 8019686:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801968a:	4620      	mov	r0, r4
 801968c:	f7ff ff05 	bl	801949a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019690:	7b43      	ldrb	r3, [r0, #13]
 8019692:	7a82      	ldrb	r2, [r0, #10]
 8019694:	005b      	lsls	r3, r3, #1
 8019696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801969a:	4313      	orrs	r3, r2
 801969c:	1af6      	subs	r6, r6, r3
 801969e:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 80196a2:	7b69      	ldrb	r1, [r5, #13]
 80196a4:	00cb      	lsls	r3, r1, #3
 80196a6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80196aa:	7a2b      	ldrb	r3, [r5, #8]
 80196ac:	4313      	orrs	r3, r2
 80196ae:	064a      	lsls	r2, r1, #25
 80196b0:	bf44      	itt	mi
 80196b2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80196b6:	b21b      	sxthmi	r3, r3
 80196b8:	1bdb      	subs	r3, r3, r7
 80196ba:	e747      	b.n	801954c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 80196bc:	2300      	movs	r3, #0
 80196be:	e7b6      	b.n	801962e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 80196c0:	3fc00079 	.word	0x3fc00079

080196c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80196c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80196c8:	4604      	mov	r4, r0
 80196ca:	b942      	cbnz	r2, 80196de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80196cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80196d0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80196d4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80196d8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80196dc:	e047      	b.n	801976e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80196de:	7b51      	ldrb	r1, [r2, #13]
 80196e0:	8893      	ldrh	r3, [r2, #4]
 80196e2:	010d      	lsls	r5, r1, #4
 80196e4:	f405 7080 	and.w	r0, r5, #256	; 0x100
 80196e8:	79d5      	ldrb	r5, [r2, #7]
 80196ea:	4305      	orrs	r5, r0
 80196ec:	2d04      	cmp	r5, #4
 80196ee:	bfcc      	ite	gt
 80196f0:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80196f4:	f04f 0e01 	movle.w	lr, #1
 80196f8:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80196fc:	f200 80ab 	bhi.w	8019856 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8019700:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8019704:	4283      	cmp	r3, r0
 8019706:	d216      	bcs.n	8019736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019708:	f240 605b 	movw	r0, #1627	; 0x65b
 801970c:	4283      	cmp	r3, r0
 801970e:	d859      	bhi.n	80197c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8019710:	f240 6057 	movw	r0, #1623	; 0x657
 8019714:	4283      	cmp	r3, r0
 8019716:	d20e      	bcs.n	8019736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019718:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801971c:	d24a      	bcs.n	80197b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801971e:	f240 604e 	movw	r0, #1614	; 0x64e
 8019722:	4283      	cmp	r3, r0
 8019724:	d207      	bcs.n	8019736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019726:	f240 601a 	movw	r0, #1562	; 0x61a
 801972a:	4283      	cmp	r3, r0
 801972c:	d02a      	beq.n	8019784 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801972e:	d821      	bhi.n	8019774 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8019730:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8019734:	d35b      	bcc.n	80197ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019736:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801973a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801973e:	f040 80d0 	bne.w	80198e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019742:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8019746:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801974a:	f040 80ca 	bne.w	80198e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801974e:	00cb      	lsls	r3, r1, #3
 8019750:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019754:	7a13      	ldrb	r3, [r2, #8]
 8019756:	0649      	lsls	r1, r1, #25
 8019758:	ea43 0300 	orr.w	r3, r3, r0
 801975c:	bf44      	itt	mi
 801975e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019762:	b21b      	sxthmi	r3, r3
 8019764:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019768:	1b5d      	subs	r5, r3, r5
 801976a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801976e:	4610      	mov	r0, r2
 8019770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019774:	f240 604b 	movw	r0, #1611	; 0x64b
 8019778:	4283      	cmp	r3, r0
 801977a:	d338      	bcc.n	80197ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801977c:	f240 604c 	movw	r0, #1612	; 0x64c
 8019780:	4283      	cmp	r3, r0
 8019782:	d9d8      	bls.n	8019736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019784:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8019788:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801978c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019790:	f040 80f2 	bne.w	8019978 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8019794:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019798:	f040 80ee 	bne.w	8019978 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801979c:	00cb      	lsls	r3, r1, #3
 801979e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80197a2:	7a13      	ldrb	r3, [r2, #8]
 80197a4:	064e      	lsls	r6, r1, #25
 80197a6:	ea43 0300 	orr.w	r3, r3, r0
 80197aa:	bf44      	itt	mi
 80197ac:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80197b0:	b21b      	sxthmi	r3, r3
 80197b2:	e7d9      	b.n	8019768 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80197b4:	f240 6054 	movw	r0, #1620	; 0x654
 80197b8:	4283      	cmp	r3, r0
 80197ba:	d8e3      	bhi.n	8019784 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80197bc:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80197c0:	d9e0      	bls.n	8019784 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80197c2:	e7b8      	b.n	8019736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80197c4:	f240 6074 	movw	r0, #1652	; 0x674
 80197c8:	4283      	cmp	r3, r0
 80197ca:	d0b4      	beq.n	8019736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80197cc:	d82d      	bhi.n	801982a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80197ce:	f240 605e 	movw	r0, #1630	; 0x65e
 80197d2:	4283      	cmp	r3, r0
 80197d4:	d804      	bhi.n	80197e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80197d6:	f240 605d 	movw	r0, #1629	; 0x65d
 80197da:	4283      	cmp	r3, r0
 80197dc:	d3d2      	bcc.n	8019784 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80197de:	e7aa      	b.n	8019736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80197e0:	f240 605f 	movw	r0, #1631	; 0x65f
 80197e4:	4283      	cmp	r3, r0
 80197e6:	d0cd      	beq.n	8019784 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80197e8:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80197ec:	d0a3      	beq.n	8019736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80197ee:	00cb      	lsls	r3, r1, #3
 80197f0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80197f4:	7a13      	ldrb	r3, [r2, #8]
 80197f6:	0649      	lsls	r1, r1, #25
 80197f8:	ea43 0300 	orr.w	r3, r3, r0
 80197fc:	bf44      	itt	mi
 80197fe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019802:	b21b      	sxthmi	r3, r3
 8019804:	1b5d      	subs	r5, r3, r5
 8019806:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801980a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801980e:	7b53      	ldrb	r3, [r2, #13]
 8019810:	015b      	lsls	r3, r3, #5
 8019812:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019816:	7993      	ldrb	r3, [r2, #6]
 8019818:	430b      	orrs	r3, r1
 801981a:	2105      	movs	r1, #5
 801981c:	005b      	lsls	r3, r3, #1
 801981e:	fb93 f3f1 	sdiv	r3, r3, r1
 8019822:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8019826:	440b      	add	r3, r1
 8019828:	e756      	b.n	80196d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801982a:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801982e:	4283      	cmp	r3, r0
 8019830:	d809      	bhi.n	8019846 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8019832:	f240 60df 	movw	r0, #1759	; 0x6df
 8019836:	4283      	cmp	r3, r0
 8019838:	f4bf af7d 	bcs.w	8019736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801983c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8019840:	2b05      	cmp	r3, #5
 8019842:	d8d4      	bhi.n	80197ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019844:	e777      	b.n	8019736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019846:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801984a:	4283      	cmp	r3, r0
 801984c:	d09a      	beq.n	8019784 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801984e:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8019852:	4283      	cmp	r3, r0
 8019854:	e7ca      	b.n	80197ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019856:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801985a:	d22b      	bcs.n	80198b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801985c:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8019860:	4283      	cmp	r3, r0
 8019862:	d28f      	bcs.n	8019784 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019864:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019868:	4283      	cmp	r3, r0
 801986a:	d816      	bhi.n	801989a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801986c:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8019870:	4283      	cmp	r3, r0
 8019872:	f4bf af60 	bcs.w	8019736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019876:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801987a:	4283      	cmp	r3, r0
 801987c:	d80a      	bhi.n	8019894 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801987e:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8019882:	4283      	cmp	r3, r0
 8019884:	f4bf af57 	bcs.w	8019736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019888:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801988c:	4283      	cmp	r3, r0
 801988e:	f43f af79 	beq.w	8019784 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019892:	e7ac      	b.n	80197ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019894:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8019898:	e7f8      	b.n	801988c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801989a:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801989e:	4283      	cmp	r3, r0
 80198a0:	d802      	bhi.n	80198a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 80198a2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80198a6:	e798      	b.n	80197da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 80198a8:	f640 00e9 	movw	r0, #2281	; 0x8e9
 80198ac:	4283      	cmp	r3, r0
 80198ae:	f47f af42 	bne.w	8019736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80198b2:	e767      	b.n	8019784 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80198b4:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80198b8:	4283      	cmp	r3, r0
 80198ba:	f43f af63 	beq.w	8019784 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80198be:	d802      	bhi.n	80198c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80198c0:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80198c4:	e7f2      	b.n	80198ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80198c6:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80198ca:	4283      	cmp	r3, r0
 80198cc:	d805      	bhi.n	80198da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80198ce:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80198d2:	4283      	cmp	r3, r0
 80198d4:	f4ff af2f 	bcc.w	8019736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80198d8:	e754      	b.n	8019784 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80198da:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80198de:	4283      	cmp	r3, r0
 80198e0:	e7af      	b.n	8019842 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80198e2:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80198e6:	4617      	mov	r7, r2
 80198e8:	4666      	mov	r6, ip
 80198ea:	f102 0808 	add.w	r8, r2, #8
 80198ee:	46e6      	mov	lr, ip
 80198f0:	6838      	ldr	r0, [r7, #0]
 80198f2:	6879      	ldr	r1, [r7, #4]
 80198f4:	3708      	adds	r7, #8
 80198f6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80198fa:	4547      	cmp	r7, r8
 80198fc:	46f4      	mov	ip, lr
 80198fe:	d1f6      	bne.n	80198ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8019900:	6838      	ldr	r0, [r7, #0]
 8019902:	f8ce 0000 	str.w	r0, [lr]
 8019906:	88b9      	ldrh	r1, [r7, #4]
 8019908:	f8ae 1004 	strh.w	r1, [lr, #4]
 801990c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8019910:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019914:	d009      	beq.n	801992a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8019916:	7b51      	ldrb	r1, [r2, #13]
 8019918:	7992      	ldrb	r2, [r2, #6]
 801991a:	0149      	lsls	r1, r1, #5
 801991c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019920:	4311      	orrs	r1, r2
 8019922:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019926:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801992a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801992e:	b2ad      	uxth	r5, r5
 8019930:	d00d      	beq.n	801994e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 8019932:	442b      	add	r3, r5
 8019934:	b29b      	uxth	r3, r3
 8019936:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801993a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801993e:	10db      	asrs	r3, r3, #3
 8019940:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019944:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019948:	4313      	orrs	r3, r2
 801994a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801994e:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8019952:	00cb      	lsls	r3, r1, #3
 8019954:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019958:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801995c:	064f      	lsls	r7, r1, #25
 801995e:	ea43 0302 	orr.w	r3, r3, r2
 8019962:	bf44      	itt	mi
 8019964:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019968:	b21b      	sxthmi	r3, r3
 801996a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801996e:	1b5b      	subs	r3, r3, r5
 8019970:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8019974:	4632      	mov	r2, r6
 8019976:	e6fa      	b.n	801976e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019978:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801997c:	4617      	mov	r7, r2
 801997e:	4666      	mov	r6, ip
 8019980:	f102 0908 	add.w	r9, r2, #8
 8019984:	46e0      	mov	r8, ip
 8019986:	6838      	ldr	r0, [r7, #0]
 8019988:	6879      	ldr	r1, [r7, #4]
 801998a:	3708      	adds	r7, #8
 801998c:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8019990:	454f      	cmp	r7, r9
 8019992:	46c4      	mov	ip, r8
 8019994:	d1f6      	bne.n	8019984 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8019996:	6838      	ldr	r0, [r7, #0]
 8019998:	f8c8 0000 	str.w	r0, [r8]
 801999c:	88b9      	ldrh	r1, [r7, #4]
 801999e:	f8a8 1004 	strh.w	r1, [r8, #4]
 80199a2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80199a6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80199aa:	d009      	beq.n	80199c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 80199ac:	7b51      	ldrb	r1, [r2, #13]
 80199ae:	7992      	ldrb	r2, [r2, #6]
 80199b0:	0149      	lsls	r1, r1, #5
 80199b2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80199b6:	4311      	orrs	r1, r2
 80199b8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80199bc:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80199c0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80199c4:	d00e      	beq.n	80199e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 80199c6:	eba3 030e 	sub.w	r3, r3, lr
 80199ca:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80199ce:	b29b      	uxth	r3, r3
 80199d0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80199d4:	10db      	asrs	r3, r3, #3
 80199d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80199da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80199de:	4313      	orrs	r3, r2
 80199e0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80199e4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80199e8:	00cb      	lsls	r3, r1, #3
 80199ea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80199ee:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80199f2:	0648      	lsls	r0, r1, #25
 80199f4:	ea43 0302 	orr.w	r3, r3, r2
 80199f8:	bf44      	itt	mi
 80199fa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80199fe:	b21b      	sxthmi	r3, r3
 8019a00:	1b5d      	subs	r5, r3, r5
 8019a02:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019a06:	e7b5      	b.n	8019974 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08019a08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8019a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a0c:	461e      	mov	r6, r3
 8019a0e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019a10:	4604      	mov	r4, r0
 8019a12:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019a16:	4617      	mov	r7, r2
 8019a18:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8019a1c:	f7e9 fcf6 	bl	800340c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019a20:	4605      	mov	r5, r0
 8019a22:	b918      	cbnz	r0, 8019a2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8019a24:	6030      	str	r0, [r6, #0]
 8019a26:	4628      	mov	r0, r5
 8019a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a2c:	683b      	ldr	r3, [r7, #0]
 8019a2e:	4601      	mov	r1, r0
 8019a30:	68db      	ldr	r3, [r3, #12]
 8019a32:	4638      	mov	r0, r7
 8019a34:	4798      	blx	r3
 8019a36:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8019a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019a3e:	4602      	mov	r2, r0
 8019a40:	6030      	str	r0, [r6, #0]
 8019a42:	d213      	bcs.n	8019a6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8019a44:	4643      	mov	r3, r8
 8019a46:	4639      	mov	r1, r7
 8019a48:	4620      	mov	r0, r4
 8019a4a:	f7ff fe3b 	bl	80196c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019a4e:	6030      	str	r0, [r6, #0]
 8019a50:	6833      	ldr	r3, [r6, #0]
 8019a52:	b143      	cbz	r3, 8019a66 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8019a54:	7b5a      	ldrb	r2, [r3, #13]
 8019a56:	7a9b      	ldrb	r3, [r3, #10]
 8019a58:	0052      	lsls	r2, r2, #1
 8019a5a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019a5e:	4313      	orrs	r3, r2
 8019a60:	bf0c      	ite	eq
 8019a62:	2301      	moveq	r3, #1
 8019a64:	2300      	movne	r3, #0
 8019a66:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8019a6a:	e7dc      	b.n	8019a26 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8019a6c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8019a70:	b29b      	uxth	r3, r3
 8019a72:	2b7f      	cmp	r3, #127	; 0x7f
 8019a74:	d804      	bhi.n	8019a80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8019a76:	4639      	mov	r1, r7
 8019a78:	4620      	mov	r0, r4
 8019a7a:	f7ff fd19 	bl	80194b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019a7e:	e7e6      	b.n	8019a4e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8019a80:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d0e3      	beq.n	8019a50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019a88:	f640 1302 	movw	r3, #2306	; 0x902
 8019a8c:	429d      	cmp	r5, r3
 8019a8e:	d1df      	bne.n	8019a50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019a90:	4601      	mov	r1, r0
 8019a92:	4620      	mov	r0, r4
 8019a94:	f7ff fcde 	bl	8019454 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019a98:	e7d9      	b.n	8019a4e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08019a9a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8019a9a:	b510      	push	{r4, lr}
 8019a9c:	4604      	mov	r4, r0
 8019a9e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8019aa2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019aa4:	b1f1      	cbz	r1, 8019ae4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8019aa6:	2b0a      	cmp	r3, #10
 8019aa8:	d02f      	beq.n	8019b0a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8019aaa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8019aac:	3901      	subs	r1, #1
 8019aae:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8019ab2:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8019ab4:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8019ab8:	1c51      	adds	r1, r2, #1
 8019aba:	b289      	uxth	r1, r1
 8019abc:	2901      	cmp	r1, #1
 8019abe:	bf84      	itt	hi
 8019ac0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019ac4:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8019ac6:	f103 0201 	add.w	r2, r3, #1
 8019aca:	8722      	strh	r2, [r4, #56]	; 0x38
 8019acc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019ace:	bf98      	it	ls
 8019ad0:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8019ad2:	4413      	add	r3, r2
 8019ad4:	b29b      	uxth	r3, r3
 8019ad6:	2b09      	cmp	r3, #9
 8019ad8:	bf88      	it	hi
 8019ada:	3b0a      	subhi	r3, #10
 8019adc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019ae0:	8458      	strh	r0, [r3, #34]	; 0x22
 8019ae2:	e7dc      	b.n	8019a9e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8019ae4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019ae6:	2b0a      	cmp	r3, #10
 8019ae8:	d00f      	beq.n	8019b0a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8019aea:	4620      	mov	r0, r4
 8019aec:	f7ff fc71 	bl	80193d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8019af0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019af2:	1c5a      	adds	r2, r3, #1
 8019af4:	8722      	strh	r2, [r4, #56]	; 0x38
 8019af6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019af8:	4413      	add	r3, r2
 8019afa:	b29b      	uxth	r3, r3
 8019afc:	2b09      	cmp	r3, #9
 8019afe:	bf88      	it	hi
 8019b00:	3b0a      	subhi	r3, #10
 8019b02:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019b06:	8458      	strh	r0, [r3, #34]	; 0x22
 8019b08:	e7ec      	b.n	8019ae4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8019b0a:	bd10      	pop	{r4, pc}

08019b0c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019b0c:	b538      	push	{r3, r4, r5, lr}
 8019b0e:	4604      	mov	r4, r0
 8019b10:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019b12:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8019b16:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8019b18:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8019b1a:	3a01      	subs	r2, #1
 8019b1c:	8702      	strh	r2, [r0, #56]	; 0x38
 8019b1e:	1c5a      	adds	r2, r3, #1
 8019b20:	b292      	uxth	r2, r2
 8019b22:	2a09      	cmp	r2, #9
 8019b24:	bf86      	itte	hi
 8019b26:	3b09      	subhi	r3, #9
 8019b28:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8019b2a:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8019b2c:	f7ff ffb5 	bl	8019a9a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019b30:	8c23      	ldrh	r3, [r4, #32]
 8019b32:	2b01      	cmp	r3, #1
 8019b34:	bf9c      	itt	ls
 8019b36:	3301      	addls	r3, #1
 8019b38:	8423      	strhls	r3, [r4, #32]
 8019b3a:	8be3      	ldrh	r3, [r4, #30]
 8019b3c:	b90b      	cbnz	r3, 8019b42 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8019b3e:	2302      	movs	r3, #2
 8019b40:	83e3      	strh	r3, [r4, #30]
 8019b42:	8be3      	ldrh	r3, [r4, #30]
 8019b44:	4628      	mov	r0, r5
 8019b46:	3b01      	subs	r3, #1
 8019b48:	b29b      	uxth	r3, r3
 8019b4a:	83e3      	strh	r3, [r4, #30]
 8019b4c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019b50:	8365      	strh	r5, [r4, #26]
 8019b52:	bd38      	pop	{r3, r4, r5, pc}

08019b54 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8019b54:	428a      	cmp	r2, r1
 8019b56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b5a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8019b5c:	d931      	bls.n	8019bc2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 8019b5e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8019b60:	1a54      	subs	r4, r2, r1
 8019b62:	19ee      	adds	r6, r5, r7
 8019b64:	3e01      	subs	r6, #1
 8019b66:	fa1f fe84 	uxth.w	lr, r4
 8019b6a:	b2b4      	uxth	r4, r6
 8019b6c:	eba4 090e 	sub.w	r9, r4, lr
 8019b70:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8019b74:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8019b78:	fa1f f989 	uxth.w	r9, r9
 8019b7c:	2c09      	cmp	r4, #9
 8019b7e:	4626      	mov	r6, r4
 8019b80:	bf88      	it	hi
 8019b82:	f1a4 060a 	subhi.w	r6, r4, #10
 8019b86:	f1bc 0f00 	cmp.w	ip, #0
 8019b8a:	bf08      	it	eq
 8019b8c:	f04f 0c02 	moveq.w	ip, #2
 8019b90:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8019b94:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019b98:	3c01      	subs	r4, #1
 8019b9a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8019b9e:	fa1f fc8c 	uxth.w	ip, ip
 8019ba2:	b2a4      	uxth	r4, r4
 8019ba4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8019ba8:	454c      	cmp	r4, r9
 8019baa:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8019bae:	d1e5      	bne.n	8019b7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8019bb0:	eba5 050e 	sub.w	r5, r5, lr
 8019bb4:	eb0e 0408 	add.w	r4, lr, r8
 8019bb8:	8705      	strh	r5, [r0, #56]	; 0x38
 8019bba:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8019bbe:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8019bc2:	250a      	movs	r5, #10
 8019bc4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8019bc6:	1a64      	subs	r4, r4, r1
 8019bc8:	4439      	add	r1, r7
 8019bca:	b289      	uxth	r1, r1
 8019bcc:	2909      	cmp	r1, #9
 8019bce:	bf88      	it	hi
 8019bd0:	390a      	subhi	r1, #10
 8019bd2:	8704      	strh	r4, [r0, #56]	; 0x38
 8019bd4:	86c1      	strh	r1, [r0, #54]	; 0x36
 8019bd6:	b18a      	cbz	r2, 8019bfc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8019bd8:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8019bda:	3a01      	subs	r2, #1
 8019bdc:	3101      	adds	r1, #1
 8019bde:	b292      	uxth	r2, r2
 8019be0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8019be4:	8701      	strh	r1, [r0, #56]	; 0x38
 8019be6:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8019be8:	b901      	cbnz	r1, 8019bec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8019bea:	86c5      	strh	r5, [r0, #54]	; 0x36
 8019bec:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8019bee:	3901      	subs	r1, #1
 8019bf0:	b289      	uxth	r1, r1
 8019bf2:	86c1      	strh	r1, [r0, #54]	; 0x36
 8019bf4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8019bf8:	844c      	strh	r4, [r1, #34]	; 0x22
 8019bfa:	e7ec      	b.n	8019bd6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8019bfc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c00:	f7ff bf4b 	b.w	8019a9a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08019c04 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8019c04:	b570      	push	{r4, r5, r6, lr}
 8019c06:	2500      	movs	r5, #0
 8019c08:	4295      	cmp	r5, r2
 8019c0a:	d011      	beq.n	8019c30 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8019c0c:	8bc4      	ldrh	r4, [r0, #30]
 8019c0e:	f831 6b02 	ldrh.w	r6, [r1], #2
 8019c12:	4414      	add	r4, r2
 8019c14:	3c01      	subs	r4, #1
 8019c16:	1b64      	subs	r4, r4, r5
 8019c18:	b2a4      	uxth	r4, r4
 8019c1a:	2c01      	cmp	r4, #1
 8019c1c:	bf88      	it	hi
 8019c1e:	3c02      	subhi	r4, #2
 8019c20:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019c24:	8b64      	ldrh	r4, [r4, #26]
 8019c26:	42b4      	cmp	r4, r6
 8019c28:	d117      	bne.n	8019c5a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8019c2a:	3501      	adds	r5, #1
 8019c2c:	b2ad      	uxth	r5, r5
 8019c2e:	e7eb      	b.n	8019c08 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8019c30:	2400      	movs	r4, #0
 8019c32:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019c36:	4413      	add	r3, r2
 8019c38:	b2a2      	uxth	r2, r4
 8019c3a:	429a      	cmp	r2, r3
 8019c3c:	da0f      	bge.n	8019c5e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8019c3e:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8019c40:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8019c44:	4432      	add	r2, r6
 8019c46:	b292      	uxth	r2, r2
 8019c48:	2a09      	cmp	r2, #9
 8019c4a:	bf88      	it	hi
 8019c4c:	3a0a      	subhi	r2, #10
 8019c4e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8019c52:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8019c54:	3401      	adds	r4, #1
 8019c56:	42aa      	cmp	r2, r5
 8019c58:	d0ee      	beq.n	8019c38 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8019c5a:	2000      	movs	r0, #0
 8019c5c:	bd70      	pop	{r4, r5, r6, pc}
 8019c5e:	2001      	movs	r0, #1
 8019c60:	e7fc      	b.n	8019c5c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08019c62 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8019c62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c66:	4605      	mov	r5, r0
 8019c68:	4616      	mov	r6, r2
 8019c6a:	1c8c      	adds	r4, r1, #2
 8019c6c:	8809      	ldrh	r1, [r1, #0]
 8019c6e:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019c72:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019c76:	42b3      	cmp	r3, r6
 8019c78:	d124      	bne.n	8019cc4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8019c7a:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019c7e:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019c82:	f001 070f 	and.w	r7, r1, #15
 8019c86:	f8cd 8000 	str.w	r8, [sp]
 8019c8a:	464b      	mov	r3, r9
 8019c8c:	4652      	mov	r2, sl
 8019c8e:	4621      	mov	r1, r4
 8019c90:	4628      	mov	r0, r5
 8019c92:	f7ff ffb7 	bl	8019c04 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8019c96:	4683      	mov	fp, r0
 8019c98:	b168      	cbz	r0, 8019cb6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8019c9a:	eb0a 0109 	add.w	r1, sl, r9
 8019c9e:	4441      	add	r1, r8
 8019ca0:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8019ca4:	463a      	mov	r2, r7
 8019ca6:	4649      	mov	r1, r9
 8019ca8:	4628      	mov	r0, r5
 8019caa:	f7ff ff53 	bl	8019b54 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019cae:	4658      	mov	r0, fp
 8019cb0:	b003      	add	sp, #12
 8019cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cb6:	eb07 010a 	add.w	r1, r7, sl
 8019cba:	4449      	add	r1, r9
 8019cbc:	4441      	add	r1, r8
 8019cbe:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019cc2:	e7d2      	b.n	8019c6a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8019cc4:	f04f 0b00 	mov.w	fp, #0
 8019cc8:	e7f1      	b.n	8019cae <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08019cca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019cca:	b570      	push	{r4, r5, r6, lr}
 8019ccc:	8810      	ldrh	r0, [r2, #0]
 8019cce:	4298      	cmp	r0, r3
 8019cd0:	d817      	bhi.n	8019d02 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019cd2:	1e48      	subs	r0, r1, #1
 8019cd4:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8019cd8:	4298      	cmp	r0, r3
 8019cda:	d312      	bcc.n	8019d02 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019cdc:	2400      	movs	r4, #0
 8019cde:	428c      	cmp	r4, r1
 8019ce0:	d20f      	bcs.n	8019d02 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019ce2:	1860      	adds	r0, r4, r1
 8019ce4:	1040      	asrs	r0, r0, #1
 8019ce6:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8019cea:	0085      	lsls	r5, r0, #2
 8019cec:	42b3      	cmp	r3, r6
 8019cee:	d902      	bls.n	8019cf6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019cf0:	3001      	adds	r0, #1
 8019cf2:	b284      	uxth	r4, r0
 8019cf4:	e7f3      	b.n	8019cde <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019cf6:	d201      	bcs.n	8019cfc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8019cf8:	b281      	uxth	r1, r0
 8019cfa:	e7f0      	b.n	8019cde <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019cfc:	442a      	add	r2, r5
 8019cfe:	8850      	ldrh	r0, [r2, #2]
 8019d00:	bd70      	pop	{r4, r5, r6, pc}
 8019d02:	2000      	movs	r0, #0
 8019d04:	e7fc      	b.n	8019d00 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08019d06 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8019d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d0a:	4604      	mov	r4, r0
 8019d0c:	260b      	movs	r6, #11
 8019d0e:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8019d10:	886f      	ldrh	r7, [r5, #2]
 8019d12:	087f      	lsrs	r7, r7, #1
 8019d14:	3e01      	subs	r6, #1
 8019d16:	d013      	beq.n	8019d40 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019d18:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019d1a:	462a      	mov	r2, r5
 8019d1c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019d20:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8019d24:	4639      	mov	r1, r7
 8019d26:	4643      	mov	r3, r8
 8019d28:	4620      	mov	r0, r4
 8019d2a:	f7ff ffce 	bl	8019cca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019d2e:	b138      	cbz	r0, 8019d40 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019d30:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8019d34:	4642      	mov	r2, r8
 8019d36:	4620      	mov	r0, r4
 8019d38:	f7ff ff93 	bl	8019c62 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019d3c:	2800      	cmp	r0, #0
 8019d3e:	d1e9      	bne.n	8019d14 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8019d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019d44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8019d44:	b570      	push	{r4, r5, r6, lr}
 8019d46:	694a      	ldr	r2, [r1, #20]
 8019d48:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8019d4a:	684b      	ldr	r3, [r1, #4]
 8019d4c:	1b54      	subs	r4, r2, r5
 8019d4e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8019d50:	f000 8107 	beq.w	8019f62 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 8019d54:	1b9b      	subs	r3, r3, r6
 8019d56:	d003      	beq.n	8019d60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019d58:	2210      	movs	r2, #16
 8019d5a:	4363      	muls	r3, r4
 8019d5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8019d60:	680c      	ldr	r4, [r1, #0]
 8019d62:	698a      	ldr	r2, [r1, #24]
 8019d64:	1b65      	subs	r5, r4, r5
 8019d66:	f000 80fe 	beq.w	8019f66 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 8019d6a:	1b92      	subs	r2, r2, r6
 8019d6c:	d003      	beq.n	8019d76 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019d6e:	2410      	movs	r4, #16
 8019d70:	436a      	muls	r2, r5
 8019d72:	fb92 f2f4 	sdiv	r2, r2, r4
 8019d76:	1a9b      	subs	r3, r3, r2
 8019d78:	ee07 3a90 	vmov	s15, r3
 8019d7c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8019fa4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 8019d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019d88:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019d8c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8019d90:	460a      	mov	r2, r1
 8019d92:	eeb1 6a43 	vneg.f32	s12, s6
 8019d96:	4603      	mov	r3, r0
 8019d98:	f100 040c 	add.w	r4, r0, #12
 8019d9c:	edd2 7a02 	vldr	s15, [r2, #8]
 8019da0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019da4:	ece3 6a01 	vstmia	r3!, {s13}
 8019da8:	edd2 7a03 	vldr	s15, [r2, #12]
 8019dac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019db0:	edc3 7a02 	vstr	s15, [r3, #8]
 8019db4:	edd2 7a04 	vldr	s15, [r2, #16]
 8019db8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019dbc:	429c      	cmp	r4, r3
 8019dbe:	edc3 7a05 	vstr	s15, [r3, #20]
 8019dc2:	f102 0214 	add.w	r2, r2, #20
 8019dc6:	d1e9      	bne.n	8019d9c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8019dc8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019dca:	698b      	ldr	r3, [r1, #24]
 8019dcc:	edd0 4a02 	vldr	s9, [r0, #8]
 8019dd0:	1a9b      	subs	r3, r3, r2
 8019dd2:	ee07 3a90 	vmov	s15, r3
 8019dd6:	684b      	ldr	r3, [r1, #4]
 8019dd8:	edd0 3a00 	vldr	s7, [r0]
 8019ddc:	1a9b      	subs	r3, r3, r2
 8019dde:	edd0 6a01 	vldr	s13, [r0, #4]
 8019de2:	ee07 3a10 	vmov	s14, r3
 8019de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019dea:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8019dee:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019df2:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8019df6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019dfa:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8019dfe:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e02:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019e06:	ee67 7a83 	vmul.f32	s15, s15, s6
 8019e0a:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8019e0e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019e10:	694a      	ldr	r2, [r1, #20]
 8019e12:	ed90 5a05 	vldr	s10, [r0, #20]
 8019e16:	1b13      	subs	r3, r2, r4
 8019e18:	ee07 3a10 	vmov	s14, r3
 8019e1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e20:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e24:	680b      	ldr	r3, [r1, #0]
 8019e26:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8019e2a:	1b1b      	subs	r3, r3, r4
 8019e2c:	ee07 3a10 	vmov	s14, r3
 8019e30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e34:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e38:	eee6 4a87 	vfma.f32	s9, s13, s14
 8019e3c:	ee64 4a86 	vmul.f32	s9, s9, s12
 8019e40:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8019e44:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019e46:	698b      	ldr	r3, [r1, #24]
 8019e48:	ed90 2a03 	vldr	s4, [r0, #12]
 8019e4c:	1a9b      	subs	r3, r3, r2
 8019e4e:	ee06 3a90 	vmov	s13, r3
 8019e52:	684b      	ldr	r3, [r1, #4]
 8019e54:	edd0 5a04 	vldr	s11, [r0, #16]
 8019e58:	1a9b      	subs	r3, r3, r2
 8019e5a:	ee07 3a10 	vmov	s14, r3
 8019e5e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019e62:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019e66:	ee66 6a84 	vmul.f32	s13, s13, s8
 8019e6a:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019e6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e72:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8019e76:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e7a:	eee5 6a87 	vfma.f32	s13, s11, s14
 8019e7e:	ee66 6a83 	vmul.f32	s13, s13, s6
 8019e82:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8019e86:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019e88:	694a      	ldr	r2, [r1, #20]
 8019e8a:	ed90 1a07 	vldr	s2, [r0, #28]
 8019e8e:	1b13      	subs	r3, r2, r4
 8019e90:	ee07 3a10 	vmov	s14, r3
 8019e94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e98:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e9c:	680b      	ldr	r3, [r1, #0]
 8019e9e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8019ea2:	1b1b      	subs	r3, r3, r4
 8019ea4:	ee07 3a10 	vmov	s14, r3
 8019ea8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019eac:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019eb0:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019eb4:	ee25 5a06 	vmul.f32	s10, s10, s12
 8019eb8:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8019ebc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019ebe:	698b      	ldr	r3, [r1, #24]
 8019ec0:	edd0 5a08 	vldr	s11, [r0, #32]
 8019ec4:	1a9b      	subs	r3, r3, r2
 8019ec6:	ee07 3a10 	vmov	s14, r3
 8019eca:	684b      	ldr	r3, [r1, #4]
 8019ecc:	edd0 2a06 	vldr	s5, [r0, #24]
 8019ed0:	1a9b      	subs	r3, r3, r2
 8019ed2:	ee01 3a90 	vmov	s3, r3
 8019ed6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019eda:	ee31 1a65 	vsub.f32	s2, s2, s11
 8019ede:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019ee2:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8019ee6:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019eea:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8019eee:	ee61 1a84 	vmul.f32	s3, s3, s8
 8019ef2:	eea1 7a21 	vfma.f32	s14, s2, s3
 8019ef6:	ee27 7a03 	vmul.f32	s14, s14, s6
 8019efa:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8019efe:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019f00:	694a      	ldr	r2, [r1, #20]
 8019f02:	1b13      	subs	r3, r2, r4
 8019f04:	ee03 3a10 	vmov	s6, r3
 8019f08:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019f0c:	ee23 3a04 	vmul.f32	s6, s6, s8
 8019f10:	680b      	ldr	r3, [r1, #0]
 8019f12:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8019f16:	1b1b      	subs	r3, r3, r4
 8019f18:	ee03 3a10 	vmov	s6, r3
 8019f1c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019f20:	ee23 4a04 	vmul.f32	s8, s6, s8
 8019f24:	eee1 5a04 	vfma.f32	s11, s2, s8
 8019f28:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019f2c:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8019f30:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8019f34:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f3c:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8019f40:	dd13      	ble.n	8019f6a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8019f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019f46:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8019f4a:	eee3 7a87 	vfma.f32	s15, s7, s14
 8019f4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f56:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019f58:	dd15      	ble.n	8019f86 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8019f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019f5e:	6403      	str	r3, [r0, #64]	; 0x40
 8019f60:	bd70      	pop	{r4, r5, r6, pc}
 8019f62:	4623      	mov	r3, r4
 8019f64:	e6fc      	b.n	8019d60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019f66:	462a      	mov	r2, r5
 8019f68:	e705      	b.n	8019d76 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019f6a:	d502      	bpl.n	8019f72 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 8019f6c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019f70:	e7e9      	b.n	8019f46 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 8019f72:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8019f76:	eea3 2a85 	vfma.f32	s4, s7, s10
 8019f7a:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8019f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f82:	dade      	bge.n	8019f42 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 8019f84:	e7f2      	b.n	8019f6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 8019f86:	d502      	bpl.n	8019f8e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 8019f88:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019f8c:	e7e7      	b.n	8019f5e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 8019f8e:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8019f92:	eee3 4a86 	vfma.f32	s9, s7, s12
 8019f96:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f9e:	dadc      	bge.n	8019f5a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 8019fa0:	e7f2      	b.n	8019f88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 8019fa2:	bf00      	nop
 8019fa4:	3d800000 	.word	0x3d800000

08019fa8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8019fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fac:	2714      	movs	r7, #20
 8019fae:	435f      	muls	r7, r3
 8019fb0:	eb02 0c07 	add.w	ip, r2, r7
 8019fb4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8019fb8:	f115 0e0f 	adds.w	lr, r5, #15
 8019fbc:	f100 80a2 	bmi.w	801a104 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019fc0:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8019fc4:	2614      	movs	r6, #20
 8019fc6:	9c08      	ldr	r4, [sp, #32]
 8019fc8:	f8c0 e014 	str.w	lr, [r0, #20]
 8019fcc:	4366      	muls	r6, r4
 8019fce:	eb02 0806 	add.w	r8, r2, r6
 8019fd2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019fd6:	f115 040f 	adds.w	r4, r5, #15
 8019fda:	f100 809f 	bmi.w	801a11c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8019fde:	1124      	asrs	r4, r4, #4
 8019fe0:	eba4 040e 	sub.w	r4, r4, lr
 8019fe4:	6184      	str	r4, [r0, #24]
 8019fe6:	2c00      	cmp	r4, #0
 8019fe8:	f000 808a 	beq.w	801a100 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8019fec:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8019ff0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019ff4:	5995      	ldr	r5, [r2, r6]
 8019ff6:	eba4 0809 	sub.w	r8, r4, r9
 8019ffa:	59d4      	ldr	r4, [r2, r7]
 8019ffc:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801a000:	eba5 0a04 	sub.w	sl, r5, r4
 801a004:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801a008:	fb0e fe05 	mul.w	lr, lr, r5
 801a00c:	fb0a ee19 	mls	lr, sl, r9, lr
 801a010:	fb08 e404 	mla	r4, r8, r4, lr
 801a014:	3c01      	subs	r4, #1
 801a016:	19a4      	adds	r4, r4, r6
 801a018:	f100 808c 	bmi.w	801a134 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801a01c:	fb94 fef6 	sdiv	lr, r4, r6
 801a020:	fb06 441e 	mls	r4, r6, lr, r4
 801a024:	f8c0 e000 	str.w	lr, [r0]
 801a028:	6104      	str	r4, [r0, #16]
 801a02a:	2d00      	cmp	r5, #0
 801a02c:	f2c0 8095 	blt.w	801a15a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801a030:	fb95 f4f6 	sdiv	r4, r5, r6
 801a034:	fb06 5514 	mls	r5, r6, r4, r5
 801a038:	6044      	str	r4, [r0, #4]
 801a03a:	6085      	str	r5, [r0, #8]
 801a03c:	60c6      	str	r6, [r0, #12]
 801a03e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801a042:	6945      	ldr	r5, [r0, #20]
 801a044:	59d2      	ldr	r2, [r2, r7]
 801a046:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801a04a:	ee07 4a10 	vmov	s14, r4
 801a04e:	6804      	ldr	r4, [r0, #0]
 801a050:	eddf 6a4a 	vldr	s13, [pc, #296]	; 801a17c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801a054:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801a058:	ee07 2a90 	vmov	s15, r2
 801a05c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a064:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a068:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a06c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a070:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a074:	edd3 6a00 	vldr	s13, [r3]
 801a078:	eee6 6a07 	vfma.f32	s13, s12, s14
 801a07c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801a080:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a084:	edc0 6a07 	vstr	s13, [r0, #28]
 801a088:	edd0 6a01 	vldr	s13, [r0, #4]
 801a08c:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801a090:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a094:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a098:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a09c:	ed80 6a08 	vstr	s12, [r0, #32]
 801a0a0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801a0a2:	6242      	str	r2, [r0, #36]	; 0x24
 801a0a4:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801a0a8:	ed93 6a03 	vldr	s12, [r3, #12]
 801a0ac:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a0b0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a0b4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801a0b8:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801a0bc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a0c0:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801a0c4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a0c8:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801a0cc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a0ce:	6302      	str	r2, [r0, #48]	; 0x30
 801a0d0:	ed93 6a06 	vldr	s12, [r3, #24]
 801a0d4:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801a0d8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a0dc:	eeb0 7a46 	vmov.f32	s14, s12
 801a0e0:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801a0e4:	eea6 7a27 	vfma.f32	s14, s12, s15
 801a0e8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a0ec:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801a0f0:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801a0f4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a0f8:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801a0fc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801a0fe:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a104:	2410      	movs	r4, #16
 801a106:	f1c5 0501 	rsb	r5, r5, #1
 801a10a:	f015 050f 	ands.w	r5, r5, #15
 801a10e:	fb9e fef4 	sdiv	lr, lr, r4
 801a112:	bf18      	it	ne
 801a114:	2501      	movne	r5, #1
 801a116:	ebae 0e05 	sub.w	lr, lr, r5
 801a11a:	e753      	b.n	8019fc4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801a11c:	f04f 0910 	mov.w	r9, #16
 801a120:	f1c5 0501 	rsb	r5, r5, #1
 801a124:	f015 050f 	ands.w	r5, r5, #15
 801a128:	fb94 f4f9 	sdiv	r4, r4, r9
 801a12c:	bf18      	it	ne
 801a12e:	2501      	movne	r5, #1
 801a130:	1b64      	subs	r4, r4, r5
 801a132:	e755      	b.n	8019fe0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801a134:	4264      	negs	r4, r4
 801a136:	fb94 fef6 	sdiv	lr, r4, r6
 801a13a:	fb06 441e 	mls	r4, r6, lr, r4
 801a13e:	f1ce 0800 	rsb	r8, lr, #0
 801a142:	f8c0 8000 	str.w	r8, [r0]
 801a146:	6104      	str	r4, [r0, #16]
 801a148:	2c00      	cmp	r4, #0
 801a14a:	f43f af6e 	beq.w	801a02a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801a14e:	ea6f 0e0e 	mvn.w	lr, lr
 801a152:	1b34      	subs	r4, r6, r4
 801a154:	f8c0 e000 	str.w	lr, [r0]
 801a158:	e766      	b.n	801a028 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801a15a:	426d      	negs	r5, r5
 801a15c:	fb95 f4f6 	sdiv	r4, r5, r6
 801a160:	fb06 5514 	mls	r5, r6, r4, r5
 801a164:	f1c4 0e00 	rsb	lr, r4, #0
 801a168:	f8c0 e004 	str.w	lr, [r0, #4]
 801a16c:	6085      	str	r5, [r0, #8]
 801a16e:	2d00      	cmp	r5, #0
 801a170:	f43f af64 	beq.w	801a03c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801a174:	43e4      	mvns	r4, r4
 801a176:	1b75      	subs	r5, r6, r5
 801a178:	6044      	str	r4, [r0, #4]
 801a17a:	e75e      	b.n	801a03a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801a17c:	3d800000 	.word	0x3d800000

0801a180 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801a180:	4b01      	ldr	r3, [pc, #4]	; (801a188 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801a182:	6018      	str	r0, [r3, #0]
 801a184:	4770      	bx	lr
 801a186:	bf00      	nop
 801a188:	201981b8 	.word	0x201981b8

0801a18c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801a18c:	4b06      	ldr	r3, [pc, #24]	; (801a1a8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801a18e:	881a      	ldrh	r2, [r3, #0]
 801a190:	4282      	cmp	r2, r0
 801a192:	d807      	bhi.n	801a1a4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801a194:	4b05      	ldr	r3, [pc, #20]	; (801a1ac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801a196:	881b      	ldrh	r3, [r3, #0]
 801a198:	4413      	add	r3, r2
 801a19a:	4298      	cmp	r0, r3
 801a19c:	bfac      	ite	ge
 801a19e:	2000      	movge	r0, #0
 801a1a0:	2001      	movlt	r0, #1
 801a1a2:	4770      	bx	lr
 801a1a4:	2000      	movs	r0, #0
 801a1a6:	4770      	bx	lr
 801a1a8:	201981d8 	.word	0x201981d8
 801a1ac:	201981dc 	.word	0x201981dc

0801a1b0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801a1b0:	b508      	push	{r3, lr}
 801a1b2:	4601      	mov	r1, r0
 801a1b4:	f7ff ffea 	bl	801a18c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a1b8:	b118      	cbz	r0, 801a1c2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801a1ba:	4b02      	ldr	r3, [pc, #8]	; (801a1c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801a1c2:	bd08      	pop	{r3, pc}
 801a1c4:	201981bc 	.word	0x201981bc

0801a1c8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801a1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1ca:	4c24      	ldr	r4, [pc, #144]	; (801a25c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801a1cc:	6823      	ldr	r3, [r4, #0]
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d042      	beq.n	801a258 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a1d2:	4a23      	ldr	r2, [pc, #140]	; (801a260 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801a1d4:	4d23      	ldr	r5, [pc, #140]	; (801a264 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801a1d6:	8811      	ldrh	r1, [r2, #0]
 801a1d8:	f8b5 c000 	ldrh.w	ip, [r5]
 801a1dc:	4822      	ldr	r0, [pc, #136]	; (801a268 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801a1de:	4461      	add	r1, ip
 801a1e0:	1c4a      	adds	r2, r1, #1
 801a1e2:	f022 0201 	bic.w	r2, r2, #1
 801a1e6:	008f      	lsls	r7, r1, #2
 801a1e8:	0412      	lsls	r2, r2, #16
 801a1ea:	19de      	adds	r6, r3, r7
 801a1ec:	0c12      	lsrs	r2, r2, #16
 801a1ee:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801a1f2:	6006      	str	r6, [r0, #0]
 801a1f4:	4e1d      	ldr	r6, [pc, #116]	; (801a26c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801a1f6:	19da      	adds	r2, r3, r7
 801a1f8:	6032      	str	r2, [r6, #0]
 801a1fa:	220e      	movs	r2, #14
 801a1fc:	fb02 f20c 	mul.w	r2, r2, ip
 801a200:	3203      	adds	r2, #3
 801a202:	f022 0203 	bic.w	r2, r2, #3
 801a206:	443a      	add	r2, r7
 801a208:	4f19      	ldr	r7, [pc, #100]	; (801a270 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801a20a:	4413      	add	r3, r2
 801a20c:	603b      	str	r3, [r7, #0]
 801a20e:	2300      	movs	r3, #0
 801a210:	4f18      	ldr	r7, [pc, #96]	; (801a274 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801a212:	469c      	mov	ip, r3
 801a214:	803b      	strh	r3, [r7, #0]
 801a216:	4f18      	ldr	r7, [pc, #96]	; (801a278 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801a218:	683f      	ldr	r7, [r7, #0]
 801a21a:	1aba      	subs	r2, r7, r2
 801a21c:	4f17      	ldr	r7, [pc, #92]	; (801a27c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801a21e:	603a      	str	r2, [r7, #0]
 801a220:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801a224:	4a16      	ldr	r2, [pc, #88]	; (801a280 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801a226:	8013      	strh	r3, [r2, #0]
 801a228:	428b      	cmp	r3, r1
 801a22a:	d10d      	bne.n	801a248 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801a22c:	2300      	movs	r3, #0
 801a22e:	240e      	movs	r4, #14
 801a230:	882d      	ldrh	r5, [r5, #0]
 801a232:	6830      	ldr	r0, [r6, #0]
 801a234:	429d      	cmp	r5, r3
 801a236:	d90f      	bls.n	801a258 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a238:	fb04 0203 	mla	r2, r4, r3, r0
 801a23c:	7b11      	ldrb	r1, [r2, #12]
 801a23e:	3301      	adds	r3, #1
 801a240:	f36f 1145 	bfc	r1, #5, #1
 801a244:	7311      	strb	r1, [r2, #12]
 801a246:	e7f5      	b.n	801a234 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801a248:	6822      	ldr	r2, [r4, #0]
 801a24a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801a24e:	6802      	ldr	r2, [r0, #0]
 801a250:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801a254:	3301      	adds	r3, #1
 801a256:	e7e7      	b.n	801a228 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801a258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a25a:	bf00      	nop
 801a25c:	201981bc 	.word	0x201981bc
 801a260:	201981d8 	.word	0x201981d8
 801a264:	201981dc 	.word	0x201981dc
 801a268:	201981d0 	.word	0x201981d0
 801a26c:	201981c0 	.word	0x201981c0
 801a270:	201981c8 	.word	0x201981c8
 801a274:	201981da 	.word	0x201981da
 801a278:	201981c4 	.word	0x201981c4
 801a27c:	201981d4 	.word	0x201981d4
 801a280:	201981cc 	.word	0x201981cc

0801a284 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801a284:	4b06      	ldr	r3, [pc, #24]	; (801a2a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	b943      	cbnz	r3, 801a29c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a28a:	b139      	cbz	r1, 801a29c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a28c:	4b05      	ldr	r3, [pc, #20]	; (801a2a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801a28e:	801a      	strh	r2, [r3, #0]
 801a290:	4b05      	ldr	r3, [pc, #20]	; (801a2a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801a292:	6019      	str	r1, [r3, #0]
 801a294:	4b05      	ldr	r3, [pc, #20]	; (801a2ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801a296:	6018      	str	r0, [r3, #0]
 801a298:	f7ff bf96 	b.w	801a1c8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801a29c:	4770      	bx	lr
 801a29e:	bf00      	nop
 801a2a0:	201981c8 	.word	0x201981c8
 801a2a4:	201981dc 	.word	0x201981dc
 801a2a8:	201981c4 	.word	0x201981c4
 801a2ac:	201981bc 	.word	0x201981bc

0801a2b0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801a2b0:	b470      	push	{r4, r5, r6}
 801a2b2:	4c07      	ldr	r4, [pc, #28]	; (801a2d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801a2b4:	4605      	mov	r5, r0
 801a2b6:	6826      	ldr	r6, [r4, #0]
 801a2b8:	4610      	mov	r0, r2
 801a2ba:	9a03      	ldr	r2, [sp, #12]
 801a2bc:	b936      	cbnz	r6, 801a2cc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801a2be:	6025      	str	r5, [r4, #0]
 801a2c0:	4c04      	ldr	r4, [pc, #16]	; (801a2d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801a2c2:	8021      	strh	r1, [r4, #0]
 801a2c4:	bc70      	pop	{r4, r5, r6}
 801a2c6:	4619      	mov	r1, r3
 801a2c8:	f7ff bfdc 	b.w	801a284 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801a2cc:	bc70      	pop	{r4, r5, r6}
 801a2ce:	4770      	bx	lr
 801a2d0:	201981e0 	.word	0x201981e0
 801a2d4:	201981d8 	.word	0x201981d8

0801a2d8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801a2d8:	4a12      	ldr	r2, [pc, #72]	; (801a324 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801a2da:	8803      	ldrh	r3, [r0, #0]
 801a2dc:	8812      	ldrh	r2, [r2, #0]
 801a2de:	4293      	cmp	r3, r2
 801a2e0:	d207      	bcs.n	801a2f2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801a2e2:	2114      	movs	r1, #20
 801a2e4:	4a10      	ldr	r2, [pc, #64]	; (801a328 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801a2e6:	6812      	ldr	r2, [r2, #0]
 801a2e8:	fb01 2303 	mla	r3, r1, r3, r2
 801a2ec:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801a2f0:	4770      	bx	lr
 801a2f2:	490e      	ldr	r1, [pc, #56]	; (801a32c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801a2f4:	8809      	ldrh	r1, [r1, #0]
 801a2f6:	4411      	add	r1, r2
 801a2f8:	428b      	cmp	r3, r1
 801a2fa:	da04      	bge.n	801a306 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801a2fc:	1a9b      	subs	r3, r3, r2
 801a2fe:	4a0c      	ldr	r2, [pc, #48]	; (801a330 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801a300:	210e      	movs	r1, #14
 801a302:	6812      	ldr	r2, [r2, #0]
 801a304:	e7f0      	b.n	801a2e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801a306:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a30a:	4293      	cmp	r3, r2
 801a30c:	d108      	bne.n	801a320 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801a30e:	4b09      	ldr	r3, [pc, #36]	; (801a334 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801a310:	781b      	ldrb	r3, [r3, #0]
 801a312:	b91b      	cbnz	r3, 801a31c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801a314:	4b08      	ldr	r3, [pc, #32]	; (801a338 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801a316:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a31a:	4770      	bx	lr
 801a31c:	4b07      	ldr	r3, [pc, #28]	; (801a33c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801a31e:	e7fa      	b.n	801a316 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801a320:	2000      	movs	r0, #0
 801a322:	4770      	bx	lr
 801a324:	201981d8 	.word	0x201981d8
 801a328:	201981e0 	.word	0x201981e0
 801a32c:	201981dc 	.word	0x201981dc
 801a330:	201981c0 	.word	0x201981c0
 801a334:	20198150 	.word	0x20198150
 801a338:	20198152 	.word	0x20198152
 801a33c:	20198154 	.word	0x20198154

0801a340 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801a340:	4a12      	ldr	r2, [pc, #72]	; (801a38c <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801a342:	8803      	ldrh	r3, [r0, #0]
 801a344:	8812      	ldrh	r2, [r2, #0]
 801a346:	4293      	cmp	r3, r2
 801a348:	d207      	bcs.n	801a35a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801a34a:	2114      	movs	r1, #20
 801a34c:	4a10      	ldr	r2, [pc, #64]	; (801a390 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801a34e:	6812      	ldr	r2, [r2, #0]
 801a350:	fb01 2303 	mla	r3, r1, r3, r2
 801a354:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801a358:	4770      	bx	lr
 801a35a:	490e      	ldr	r1, [pc, #56]	; (801a394 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801a35c:	8809      	ldrh	r1, [r1, #0]
 801a35e:	4411      	add	r1, r2
 801a360:	428b      	cmp	r3, r1
 801a362:	da04      	bge.n	801a36e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801a364:	1a9b      	subs	r3, r3, r2
 801a366:	4a0c      	ldr	r2, [pc, #48]	; (801a398 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801a368:	210e      	movs	r1, #14
 801a36a:	6812      	ldr	r2, [r2, #0]
 801a36c:	e7f0      	b.n	801a350 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801a36e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a372:	4293      	cmp	r3, r2
 801a374:	d108      	bne.n	801a388 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801a376:	4b09      	ldr	r3, [pc, #36]	; (801a39c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801a378:	781b      	ldrb	r3, [r3, #0]
 801a37a:	b91b      	cbnz	r3, 801a384 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801a37c:	4b08      	ldr	r3, [pc, #32]	; (801a3a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801a37e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a382:	4770      	bx	lr
 801a384:	4b07      	ldr	r3, [pc, #28]	; (801a3a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801a386:	e7fa      	b.n	801a37e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801a388:	2000      	movs	r0, #0
 801a38a:	4770      	bx	lr
 801a38c:	201981d8 	.word	0x201981d8
 801a390:	201981e0 	.word	0x201981e0
 801a394:	201981dc 	.word	0x201981dc
 801a398:	201981c0 	.word	0x201981c0
 801a39c:	20198150 	.word	0x20198150
 801a3a0:	20198154 	.word	0x20198154
 801a3a4:	20198152 	.word	0x20198152

0801a3a8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801a3a8:	4a12      	ldr	r2, [pc, #72]	; (801a3f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801a3aa:	8803      	ldrh	r3, [r0, #0]
 801a3ac:	8811      	ldrh	r1, [r2, #0]
 801a3ae:	428b      	cmp	r3, r1
 801a3b0:	d20b      	bcs.n	801a3ca <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801a3b2:	4a11      	ldr	r2, [pc, #68]	; (801a3f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a3b4:	6812      	ldr	r2, [r2, #0]
 801a3b6:	b112      	cbz	r2, 801a3be <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801a3b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a3bc:	b9c0      	cbnz	r0, 801a3f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801a3be:	4a0f      	ldr	r2, [pc, #60]	; (801a3fc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801a3c0:	6811      	ldr	r1, [r2, #0]
 801a3c2:	2214      	movs	r2, #20
 801a3c4:	4353      	muls	r3, r2
 801a3c6:	58c8      	ldr	r0, [r1, r3]
 801a3c8:	4770      	bx	lr
 801a3ca:	4a0d      	ldr	r2, [pc, #52]	; (801a400 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801a3cc:	8812      	ldrh	r2, [r2, #0]
 801a3ce:	440a      	add	r2, r1
 801a3d0:	4293      	cmp	r3, r2
 801a3d2:	da04      	bge.n	801a3de <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801a3d4:	4a08      	ldr	r2, [pc, #32]	; (801a3f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a3d6:	6812      	ldr	r2, [r2, #0]
 801a3d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a3dc:	4770      	bx	lr
 801a3de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a3e2:	4293      	cmp	r3, r2
 801a3e4:	d103      	bne.n	801a3ee <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801a3e6:	4b07      	ldr	r3, [pc, #28]	; (801a404 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801a3ec:	4770      	bx	lr
 801a3ee:	2000      	movs	r0, #0
 801a3f0:	4770      	bx	lr
 801a3f2:	bf00      	nop
 801a3f4:	201981d8 	.word	0x201981d8
 801a3f8:	201981bc 	.word	0x201981bc
 801a3fc:	201981e0 	.word	0x201981e0
 801a400:	201981dc 	.word	0x201981dc
 801a404:	20198158 	.word	0x20198158

0801a408 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801a408:	4b24      	ldr	r3, [pc, #144]	; (801a49c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801a40a:	8802      	ldrh	r2, [r0, #0]
 801a40c:	8818      	ldrh	r0, [r3, #0]
 801a40e:	4282      	cmp	r2, r0
 801a410:	d221      	bcs.n	801a456 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801a412:	4b23      	ldr	r3, [pc, #140]	; (801a4a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801a414:	6819      	ldr	r1, [r3, #0]
 801a416:	2314      	movs	r3, #20
 801a418:	fb03 1302 	mla	r3, r3, r2, r1
 801a41c:	6858      	ldr	r0, [r3, #4]
 801a41e:	2800      	cmp	r0, #0
 801a420:	d03a      	beq.n	801a498 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a422:	4920      	ldr	r1, [pc, #128]	; (801a4a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a424:	6809      	ldr	r1, [r1, #0]
 801a426:	2900      	cmp	r1, #0
 801a428:	d036      	beq.n	801a498 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a42a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a42e:	2900      	cmp	r1, #0
 801a430:	d032      	beq.n	801a498 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a432:	891a      	ldrh	r2, [r3, #8]
 801a434:	8958      	ldrh	r0, [r3, #10]
 801a436:	4350      	muls	r0, r2
 801a438:	7c5a      	ldrb	r2, [r3, #17]
 801a43a:	7cdb      	ldrb	r3, [r3, #19]
 801a43c:	0952      	lsrs	r2, r2, #5
 801a43e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801a442:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801a446:	2b0b      	cmp	r3, #11
 801a448:	bf18      	it	ne
 801a44a:	0040      	lslne	r0, r0, #1
 801a44c:	3003      	adds	r0, #3
 801a44e:	f020 0003 	bic.w	r0, r0, #3
 801a452:	4408      	add	r0, r1
 801a454:	4770      	bx	lr
 801a456:	4b14      	ldr	r3, [pc, #80]	; (801a4a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801a458:	881b      	ldrh	r3, [r3, #0]
 801a45a:	4403      	add	r3, r0
 801a45c:	429a      	cmp	r2, r3
 801a45e:	da1a      	bge.n	801a496 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a460:	210e      	movs	r1, #14
 801a462:	4b12      	ldr	r3, [pc, #72]	; (801a4ac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801a464:	1a10      	subs	r0, r2, r0
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	fb01 3000 	mla	r0, r1, r0, r3
 801a46c:	7b03      	ldrb	r3, [r0, #12]
 801a46e:	f003 031f 	and.w	r3, r3, #31
 801a472:	2b0b      	cmp	r3, #11
 801a474:	d10b      	bne.n	801a48e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801a476:	8903      	ldrh	r3, [r0, #8]
 801a478:	8940      	ldrh	r0, [r0, #10]
 801a47a:	4358      	muls	r0, r3
 801a47c:	4b09      	ldr	r3, [pc, #36]	; (801a4a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a47e:	3003      	adds	r0, #3
 801a480:	6819      	ldr	r1, [r3, #0]
 801a482:	f020 0303 	bic.w	r3, r0, #3
 801a486:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801a48a:	4418      	add	r0, r3
 801a48c:	4770      	bx	lr
 801a48e:	2b0d      	cmp	r3, #13
 801a490:	d101      	bne.n	801a496 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a492:	300d      	adds	r0, #13
 801a494:	4770      	bx	lr
 801a496:	2000      	movs	r0, #0
 801a498:	4770      	bx	lr
 801a49a:	bf00      	nop
 801a49c:	201981d8 	.word	0x201981d8
 801a4a0:	201981e0 	.word	0x201981e0
 801a4a4:	201981bc 	.word	0x201981bc
 801a4a8:	201981dc 	.word	0x201981dc
 801a4ac:	201981c0 	.word	0x201981c0

0801a4b0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801a4b0:	b510      	push	{r4, lr}
 801a4b2:	4a17      	ldr	r2, [pc, #92]	; (801a510 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801a4b4:	8803      	ldrh	r3, [r0, #0]
 801a4b6:	8812      	ldrh	r2, [r2, #0]
 801a4b8:	4293      	cmp	r3, r2
 801a4ba:	d20c      	bcs.n	801a4d6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801a4bc:	2114      	movs	r1, #20
 801a4be:	4a15      	ldr	r2, [pc, #84]	; (801a514 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801a4c0:	6812      	ldr	r2, [r2, #0]
 801a4c2:	fb01 2303 	mla	r3, r1, r3, r2
 801a4c6:	7c58      	ldrb	r0, [r3, #17]
 801a4c8:	0942      	lsrs	r2, r0, #5
 801a4ca:	7cd8      	ldrb	r0, [r3, #19]
 801a4cc:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801a4d0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801a4d4:	bd10      	pop	{r4, pc}
 801a4d6:	4910      	ldr	r1, [pc, #64]	; (801a518 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801a4d8:	8809      	ldrh	r1, [r1, #0]
 801a4da:	4411      	add	r1, r2
 801a4dc:	428b      	cmp	r3, r1
 801a4de:	da09      	bge.n	801a4f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801a4e0:	210e      	movs	r1, #14
 801a4e2:	1a9b      	subs	r3, r3, r2
 801a4e4:	4a0d      	ldr	r2, [pc, #52]	; (801a51c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801a4e6:	6812      	ldr	r2, [r2, #0]
 801a4e8:	fb01 2303 	mla	r3, r1, r3, r2
 801a4ec:	7b18      	ldrb	r0, [r3, #12]
 801a4ee:	f000 001f 	and.w	r0, r0, #31
 801a4f2:	e7ef      	b.n	801a4d4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801a4f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a4f8:	4293      	cmp	r3, r2
 801a4fa:	d106      	bne.n	801a50a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801a4fc:	f7fb fd0a 	bl	8015f14 <_ZN8touchgfx3HAL3lcdEv>
 801a500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a504:	6803      	ldr	r3, [r0, #0]
 801a506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a508:	4718      	bx	r3
 801a50a:	2000      	movs	r0, #0
 801a50c:	e7e2      	b.n	801a4d4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801a50e:	bf00      	nop
 801a510:	201981d8 	.word	0x201981d8
 801a514:	201981e0 	.word	0x201981e0
 801a518:	201981dc 	.word	0x201981dc
 801a51c:	201981c0 	.word	0x201981c0

0801a520 <CRC_Lock>:
 801a520:	b530      	push	{r4, r5, lr}
 801a522:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801a526:	f24c 2540 	movw	r5, #49728	; 0xc240
 801a52a:	4a1e      	ldr	r2, [pc, #120]	; (801a5a4 <CRC_Lock+0x84>)
 801a52c:	6813      	ldr	r3, [r2, #0]
 801a52e:	f023 0301 	bic.w	r3, r3, #1
 801a532:	6013      	str	r3, [r2, #0]
 801a534:	4b1c      	ldr	r3, [pc, #112]	; (801a5a8 <CRC_Lock+0x88>)
 801a536:	681a      	ldr	r2, [r3, #0]
 801a538:	4022      	ands	r2, r4
 801a53a:	42aa      	cmp	r2, r5
 801a53c:	d005      	beq.n	801a54a <CRC_Lock+0x2a>
 801a53e:	f24c 2270 	movw	r2, #49776	; 0xc270
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	4023      	ands	r3, r4
 801a546:	4293      	cmp	r3, r2
 801a548:	d124      	bne.n	801a594 <CRC_Lock+0x74>
 801a54a:	4b18      	ldr	r3, [pc, #96]	; (801a5ac <CRC_Lock+0x8c>)
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	bb0b      	cbnz	r3, 801a594 <CRC_Lock+0x74>
 801a550:	4b17      	ldr	r3, [pc, #92]	; (801a5b0 <CRC_Lock+0x90>)
 801a552:	681a      	ldr	r2, [r3, #0]
 801a554:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801a558:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801a55c:	d00d      	beq.n	801a57a <CRC_Lock+0x5a>
 801a55e:	f240 4483 	movw	r4, #1155	; 0x483
 801a562:	681a      	ldr	r2, [r3, #0]
 801a564:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801a568:	42a2      	cmp	r2, r4
 801a56a:	d006      	beq.n	801a57a <CRC_Lock+0x5a>
 801a56c:	f240 4285 	movw	r2, #1157	; 0x485
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a576:	4293      	cmp	r3, r2
 801a578:	d10c      	bne.n	801a594 <CRC_Lock+0x74>
 801a57a:	2201      	movs	r2, #1
 801a57c:	4b0d      	ldr	r3, [pc, #52]	; (801a5b4 <CRC_Lock+0x94>)
 801a57e:	601a      	str	r2, [r3, #0]
 801a580:	681a      	ldr	r2, [r3, #0]
 801a582:	2a00      	cmp	r2, #0
 801a584:	d1fc      	bne.n	801a580 <CRC_Lock+0x60>
 801a586:	4b0c      	ldr	r3, [pc, #48]	; (801a5b8 <CRC_Lock+0x98>)
 801a588:	6018      	str	r0, [r3, #0]
 801a58a:	6818      	ldr	r0, [r3, #0]
 801a58c:	1a43      	subs	r3, r0, r1
 801a58e:	4258      	negs	r0, r3
 801a590:	4158      	adcs	r0, r3
 801a592:	bd30      	pop	{r4, r5, pc}
 801a594:	2201      	movs	r2, #1
 801a596:	4b09      	ldr	r3, [pc, #36]	; (801a5bc <CRC_Lock+0x9c>)
 801a598:	601a      	str	r2, [r3, #0]
 801a59a:	681a      	ldr	r2, [r3, #0]
 801a59c:	2a00      	cmp	r2, #0
 801a59e:	d1fc      	bne.n	801a59a <CRC_Lock+0x7a>
 801a5a0:	4b07      	ldr	r3, [pc, #28]	; (801a5c0 <CRC_Lock+0xa0>)
 801a5a2:	e7f1      	b.n	801a588 <CRC_Lock+0x68>
 801a5a4:	e0002000 	.word	0xe0002000
 801a5a8:	e000ed00 	.word	0xe000ed00
 801a5ac:	e0042000 	.word	0xe0042000
 801a5b0:	5c001000 	.word	0x5c001000
 801a5b4:	58024c08 	.word	0x58024c08
 801a5b8:	58024c00 	.word	0x58024c00
 801a5bc:	40023008 	.word	0x40023008
 801a5c0:	40023000 	.word	0x40023000

0801a5c4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801a5c4:	6101      	str	r1, [r0, #16]
 801a5c6:	4770      	bx	lr

0801a5c8 <_ZN8touchgfx8Gestures4tickEv>:
 801a5c8:	7b83      	ldrb	r3, [r0, #14]
 801a5ca:	b14b      	cbz	r3, 801a5e0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801a5cc:	8903      	ldrh	r3, [r0, #8]
 801a5ce:	3301      	adds	r3, #1
 801a5d0:	b29b      	uxth	r3, r3
 801a5d2:	2b07      	cmp	r3, #7
 801a5d4:	8103      	strh	r3, [r0, #8]
 801a5d6:	bf81      	itttt	hi
 801a5d8:	2300      	movhi	r3, #0
 801a5da:	8143      	strhhi	r3, [r0, #10]
 801a5dc:	8183      	strhhi	r3, [r0, #12]
 801a5de:	7383      	strbhi	r3, [r0, #14]
 801a5e0:	4770      	bx	lr
	...

0801a5e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801a5e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a5e8:	4698      	mov	r8, r3
 801a5ea:	4604      	mov	r4, r0
 801a5ec:	8883      	ldrh	r3, [r0, #4]
 801a5ee:	460e      	mov	r6, r1
 801a5f0:	88c1      	ldrh	r1, [r0, #6]
 801a5f2:	2000      	movs	r0, #0
 801a5f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a5f8:	eba8 0303 	sub.w	r3, r8, r3
 801a5fc:	b21b      	sxth	r3, r3
 801a5fe:	4617      	mov	r7, r2
 801a600:	4a17      	ldr	r2, [pc, #92]	; (801a660 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801a602:	2b00      	cmp	r3, #0
 801a604:	bfb8      	it	lt
 801a606:	425b      	neglt	r3, r3
 801a608:	9200      	str	r2, [sp, #0]
 801a60a:	8aa2      	ldrh	r2, [r4, #20]
 801a60c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801a610:	b21b      	sxth	r3, r3
 801a612:	4293      	cmp	r3, r2
 801a614:	f88d 0004 	strb.w	r0, [sp, #4]
 801a618:	f8ad 1008 	strh.w	r1, [sp, #8]
 801a61c:	f8ad 800a 	strh.w	r8, [sp, #10]
 801a620:	f8ad 500c 	strh.w	r5, [sp, #12]
 801a624:	dc07      	bgt.n	801a636 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801a626:	1a69      	subs	r1, r5, r1
 801a628:	b209      	sxth	r1, r1
 801a62a:	2900      	cmp	r1, #0
 801a62c:	bfb8      	it	lt
 801a62e:	4249      	neglt	r1, r1
 801a630:	b209      	sxth	r1, r1
 801a632:	428a      	cmp	r2, r1
 801a634:	da10      	bge.n	801a658 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801a636:	6920      	ldr	r0, [r4, #16]
 801a638:	4669      	mov	r1, sp
 801a63a:	6803      	ldr	r3, [r0, #0]
 801a63c:	eba8 0606 	sub.w	r6, r8, r6
 801a640:	685b      	ldr	r3, [r3, #4]
 801a642:	4798      	blx	r3
 801a644:	2300      	movs	r3, #0
 801a646:	2001      	movs	r0, #1
 801a648:	1bef      	subs	r7, r5, r7
 801a64a:	8123      	strh	r3, [r4, #8]
 801a64c:	8166      	strh	r6, [r4, #10]
 801a64e:	81a7      	strh	r7, [r4, #12]
 801a650:	f8a4 8004 	strh.w	r8, [r4, #4]
 801a654:	80e5      	strh	r5, [r4, #6]
 801a656:	73a0      	strb	r0, [r4, #14]
 801a658:	b004      	add	sp, #16
 801a65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a65e:	bf00      	nop
 801a660:	0802ab0c 	.word	0x0802ab0c

0801a664 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801a664:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a666:	461e      	mov	r6, r3
 801a668:	1e4b      	subs	r3, r1, #1
 801a66a:	2b01      	cmp	r3, #1
 801a66c:	b085      	sub	sp, #20
 801a66e:	4604      	mov	r4, r0
 801a670:	460d      	mov	r5, r1
 801a672:	4617      	mov	r7, r2
 801a674:	d84b      	bhi.n	801a70e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801a676:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a67a:	1cd3      	adds	r3, r2, #3
 801a67c:	b29b      	uxth	r3, r3
 801a67e:	2b06      	cmp	r3, #6
 801a680:	d916      	bls.n	801a6b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801a682:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801a724 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801a686:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a68a:	f8cd c004 	str.w	ip, [sp, #4]
 801a68e:	f04f 0c00 	mov.w	ip, #0
 801a692:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a696:	6900      	ldr	r0, [r0, #16]
 801a698:	f8ad 100c 	strh.w	r1, [sp, #12]
 801a69c:	f88d c008 	strb.w	ip, [sp, #8]
 801a6a0:	f8ad 200a 	strh.w	r2, [sp, #10]
 801a6a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a6a8:	6803      	ldr	r3, [r0, #0]
 801a6aa:	a901      	add	r1, sp, #4
 801a6ac:	689b      	ldr	r3, [r3, #8]
 801a6ae:	4798      	blx	r3
 801a6b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a6b4:	1cd3      	adds	r3, r2, #3
 801a6b6:	b29b      	uxth	r3, r3
 801a6b8:	2b06      	cmp	r3, #6
 801a6ba:	d916      	bls.n	801a6ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801a6bc:	f8df c064 	ldr.w	ip, [pc, #100]	; 801a724 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801a6c0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a6c4:	f8cd c004 	str.w	ip, [sp, #4]
 801a6c8:	f04f 0c01 	mov.w	ip, #1
 801a6cc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a6d0:	6920      	ldr	r0, [r4, #16]
 801a6d2:	f8ad 100c 	strh.w	r1, [sp, #12]
 801a6d6:	f88d c008 	strb.w	ip, [sp, #8]
 801a6da:	f8ad 200a 	strh.w	r2, [sp, #10]
 801a6de:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a6e2:	6803      	ldr	r3, [r0, #0]
 801a6e4:	a901      	add	r1, sp, #4
 801a6e6:	689b      	ldr	r3, [r3, #8]
 801a6e8:	4798      	blx	r3
 801a6ea:	4b0d      	ldr	r3, [pc, #52]	; (801a720 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801a6ec:	6920      	ldr	r0, [r4, #16]
 801a6ee:	9301      	str	r3, [sp, #4]
 801a6f0:	2300      	movs	r3, #0
 801a6f2:	f88d 5008 	strb.w	r5, [sp, #8]
 801a6f6:	f8ad 700a 	strh.w	r7, [sp, #10]
 801a6fa:	f8ad 600c 	strh.w	r6, [sp, #12]
 801a6fe:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a702:	6803      	ldr	r3, [r0, #0]
 801a704:	a901      	add	r1, sp, #4
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	4798      	blx	r3
 801a70a:	b005      	add	sp, #20
 801a70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a70e:	2900      	cmp	r1, #0
 801a710:	d1eb      	bne.n	801a6ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801a712:	80a2      	strh	r2, [r4, #4]
 801a714:	80c6      	strh	r6, [r0, #6]
 801a716:	60a1      	str	r1, [r4, #8]
 801a718:	81a1      	strh	r1, [r4, #12]
 801a71a:	73a1      	strb	r1, [r4, #14]
 801a71c:	e7e5      	b.n	801a6ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801a71e:	bf00      	nop
 801a720:	0802aaf8 	.word	0x0802aaf8
 801a724:	0802ab20 	.word	0x0802ab20

0801a728 <nema_rb_init>:
 801a728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a72c:	6805      	ldr	r5, [r0, #0]
 801a72e:	4f23      	ldr	r7, [pc, #140]	; (801a7bc <nema_rb_init+0x94>)
 801a730:	2d00      	cmp	r5, #0
 801a732:	603d      	str	r5, [r7, #0]
 801a734:	dd3c      	ble.n	801a7b0 <nema_rb_init+0x88>
 801a736:	f8df c090 	ldr.w	ip, [pc, #144]	; 801a7c8 <nema_rb_init+0xa0>
 801a73a:	10ab      	asrs	r3, r5, #2
 801a73c:	3b04      	subs	r3, #4
 801a73e:	f8df e08c 	ldr.w	lr, [pc, #140]	; 801a7cc <nema_rb_init+0xa4>
 801a742:	6886      	ldr	r6, [r0, #8]
 801a744:	4c1e      	ldr	r4, [pc, #120]	; (801a7c0 <nema_rb_init+0x98>)
 801a746:	f8cc 3000 	str.w	r3, [ip]
 801a74a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 801a7d0 <nema_rb_init+0xa8>
 801a74e:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801a752:	f8ce 0000 	str.w	r0, [lr]
 801a756:	6026      	str	r6, [r4, #0]
 801a758:	f8c8 c000 	str.w	ip, [r8]
 801a75c:	b329      	cbz	r1, 801a7aa <nema_rb_init+0x82>
 801a75e:	2400      	movs	r4, #0
 801a760:	f8df e070 	ldr.w	lr, [pc, #112]	; 801a7d4 <nema_rb_init+0xac>
 801a764:	4917      	ldr	r1, [pc, #92]	; (801a7c4 <nema_rb_init+0x9c>)
 801a766:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801a76a:	f846 e023 	str.w	lr, [r6, r3, lsl #2]
 801a76e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801a772:	e9c3 1502 	strd	r1, r5, [r3, #8]
 801a776:	f8c3 c004 	str.w	ip, [r3, #4]
 801a77a:	f7e8 faec 	bl	8002d56 <nema_buffer_flush>
 801a77e:	4621      	mov	r1, r4
 801a780:	f44f 70a4 	mov.w	r0, #328	; 0x148
 801a784:	f7e8 fa32 	bl	8002bec <nema_reg_write>
 801a788:	f8d8 1000 	ldr.w	r1, [r8]
 801a78c:	20ec      	movs	r0, #236	; 0xec
 801a78e:	f041 0106 	orr.w	r1, r1, #6
 801a792:	f7e8 fa2b 	bl	8002bec <nema_reg_write>
 801a796:	f8d8 1000 	ldr.w	r1, [r8]
 801a79a:	20f0      	movs	r0, #240	; 0xf0
 801a79c:	f7e8 fa26 	bl	8002bec <nema_reg_write>
 801a7a0:	6839      	ldr	r1, [r7, #0]
 801a7a2:	20f4      	movs	r0, #244	; 0xf4
 801a7a4:	f7e8 fa22 	bl	8002bec <nema_reg_write>
 801a7a8:	4621      	mov	r1, r4
 801a7aa:	4608      	mov	r0, r1
 801a7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7b0:	2004      	movs	r0, #4
 801a7b2:	f000 fa25 	bl	801ac00 <nema_set_error>
 801a7b6:	f04f 31ff 	mov.w	r1, #4294967295
 801a7ba:	e7f6      	b.n	801a7aa <nema_rb_init+0x82>
 801a7bc:	201981f4 	.word	0x201981f4
 801a7c0:	201981ec 	.word	0x201981ec
 801a7c4:	ff0000f4 	.word	0xff0000f4
 801a7c8:	201981f0 	.word	0x201981f0
 801a7cc:	201981e4 	.word	0x201981e4
 801a7d0:	201981e8 	.word	0x201981e8
 801a7d4:	ff0000f0 	.word	0xff0000f0

0801a7d8 <nema_rb_submit_cmdlist2>:
 801a7d8:	2900      	cmp	r1, #0
 801a7da:	d074      	beq.n	801a8c6 <nema_rb_submit_cmdlist2+0xee>
 801a7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7e0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 801a8dc <nema_rb_submit_cmdlist2+0x104>
 801a7e4:	4b39      	ldr	r3, [pc, #228]	; (801a8cc <nema_rb_submit_cmdlist2+0xf4>)
 801a7e6:	f8d8 2000 	ldr.w	r2, [r8]
 801a7ea:	681d      	ldr	r5, [r3, #0]
 801a7ec:	6913      	ldr	r3, [r2, #16]
 801a7ee:	468c      	mov	ip, r1
 801a7f0:	4c37      	ldr	r4, [pc, #220]	; (801a8d0 <nema_rb_submit_cmdlist2+0xf8>)
 801a7f2:	1d19      	adds	r1, r3, #4
 801a7f4:	42a9      	cmp	r1, r5
 801a7f6:	6824      	ldr	r4, [r4, #0]
 801a7f8:	db0a      	blt.n	801a810 <nema_rb_submit_cmdlist2+0x38>
 801a7fa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801a7fe:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 801a802:	6913      	ldr	r3, [r2, #16]
 801a804:	3301      	adds	r3, #1
 801a806:	429d      	cmp	r5, r3
 801a808:	6113      	str	r3, [r2, #16]
 801a80a:	dc59      	bgt.n	801a8c0 <nema_rb_submit_cmdlist2+0xe8>
 801a80c:	2300      	movs	r3, #0
 801a80e:	6113      	str	r3, [r2, #16]
 801a810:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801a814:	f04f 0e00 	mov.w	lr, #0
 801a818:	e009      	b.n	801a82e <nema_rb_submit_cmdlist2+0x56>
 801a81a:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 801a81e:	6913      	ldr	r3, [r2, #16]
 801a820:	3301      	adds	r3, #1
 801a822:	429d      	cmp	r5, r3
 801a824:	6113      	str	r3, [r2, #16]
 801a826:	bfdc      	itt	le
 801a828:	2300      	movle	r3, #0
 801a82a:	f8c2 e010 	strle.w	lr, [r2, #16]
 801a82e:	f013 0703 	ands.w	r7, r3, #3
 801a832:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a836:	d1f0      	bne.n	801a81a <nema_rb_submit_cmdlist2+0x42>
 801a838:	23f0      	movs	r3, #240	; 0xf0
 801a83a:	6033      	str	r3, [r6, #0]
 801a83c:	6913      	ldr	r3, [r2, #16]
 801a83e:	3301      	adds	r3, #1
 801a840:	429d      	cmp	r5, r3
 801a842:	bfd3      	iteet	le
 801a844:	4623      	movle	r3, r4
 801a846:	6113      	strgt	r3, [r2, #16]
 801a848:	eb04 0383 	addgt.w	r3, r4, r3, lsl #2
 801a84c:	6117      	strle	r7, [r2, #16]
 801a84e:	6018      	str	r0, [r3, #0]
 801a850:	6913      	ldr	r3, [r2, #16]
 801a852:	3301      	adds	r3, #1
 801a854:	429d      	cmp	r5, r3
 801a856:	dd2f      	ble.n	801a8b8 <nema_rb_submit_cmdlist2+0xe0>
 801a858:	6113      	str	r3, [r2, #16]
 801a85a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a85e:	491d      	ldr	r1, [pc, #116]	; (801a8d4 <nema_rb_submit_cmdlist2+0xfc>)
 801a860:	4610      	mov	r0, r2
 801a862:	6019      	str	r1, [r3, #0]
 801a864:	6913      	ldr	r3, [r2, #16]
 801a866:	3301      	adds	r3, #1
 801a868:	429d      	cmp	r5, r3
 801a86a:	bfd3      	iteet	le
 801a86c:	2300      	movle	r3, #0
 801a86e:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
 801a872:	6113      	strgt	r3, [r2, #16]
 801a874:	6113      	strle	r3, [r2, #16]
 801a876:	f8c4 c000 	str.w	ip, [r4]
 801a87a:	6913      	ldr	r3, [r2, #16]
 801a87c:	3301      	adds	r3, #1
 801a87e:	429d      	cmp	r5, r3
 801a880:	bfd8      	it	le
 801a882:	2300      	movle	r3, #0
 801a884:	6113      	str	r3, [r2, #16]
 801a886:	f7e8 fa66 	bl	8002d56 <nema_buffer_flush>
 801a88a:	4a13      	ldr	r2, [pc, #76]	; (801a8d8 <nema_rb_submit_cmdlist2+0x100>)
 801a88c:	f8d8 3000 	ldr.w	r3, [r8]
 801a890:	6811      	ldr	r1, [r2, #0]
 801a892:	691b      	ldr	r3, [r3, #16]
 801a894:	20ec      	movs	r0, #236	; 0xec
 801a896:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801a89a:	f041 0104 	orr.w	r1, r1, #4
 801a89e:	f7e8 f9a5 	bl	8002bec <nema_reg_write>
 801a8a2:	f8d8 3000 	ldr.w	r3, [r8]
 801a8a6:	6958      	ldr	r0, [r3, #20]
 801a8a8:	3001      	adds	r0, #1
 801a8aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 801a8ae:	bfa8      	it	ge
 801a8b0:	2000      	movge	r0, #0
 801a8b2:	6158      	str	r0, [r3, #20]
 801a8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8b8:	2100      	movs	r1, #0
 801a8ba:	4623      	mov	r3, r4
 801a8bc:	6111      	str	r1, [r2, #16]
 801a8be:	e7ce      	b.n	801a85e <nema_rb_submit_cmdlist2+0x86>
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d19c      	bne.n	801a7fe <nema_rb_submit_cmdlist2+0x26>
 801a8c4:	e7a4      	b.n	801a810 <nema_rb_submit_cmdlist2+0x38>
 801a8c6:	f04f 30ff 	mov.w	r0, #4294967295
 801a8ca:	4770      	bx	lr
 801a8cc:	201981f0 	.word	0x201981f0
 801a8d0:	201981ec 	.word	0x201981ec
 801a8d4:	000200f4 	.word	0x000200f4
 801a8d8:	201981e8 	.word	0x201981e8
 801a8dc:	201981e4 	.word	0x201981e4

0801a8e0 <nema_rb_submit_cmdlist>:
 801a8e0:	68c0      	ldr	r0, [r0, #12]
 801a8e2:	f7ff bf79 	b.w	801a7d8 <nema_rb_submit_cmdlist2>
 801a8e6:	bf00      	nop

0801a8e8 <nema_rb_inline_cmd>:
 801a8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8ea:	4e21      	ldr	r6, [pc, #132]	; (801a970 <nema_rb_inline_cmd+0x88>)
 801a8ec:	4b21      	ldr	r3, [pc, #132]	; (801a974 <nema_rb_inline_cmd+0x8c>)
 801a8ee:	6832      	ldr	r2, [r6, #0]
 801a8f0:	681d      	ldr	r5, [r3, #0]
 801a8f2:	6913      	ldr	r3, [r2, #16]
 801a8f4:	4c20      	ldr	r4, [pc, #128]	; (801a978 <nema_rb_inline_cmd+0x90>)
 801a8f6:	1c5f      	adds	r7, r3, #1
 801a8f8:	42af      	cmp	r7, r5
 801a8fa:	6824      	ldr	r4, [r4, #0]
 801a8fc:	db24      	blt.n	801a948 <nema_rb_inline_cmd+0x60>
 801a8fe:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 801a902:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 801a906:	6913      	ldr	r3, [r2, #16]
 801a908:	3301      	adds	r3, #1
 801a90a:	429d      	cmp	r5, r3
 801a90c:	6113      	str	r3, [r2, #16]
 801a90e:	dc17      	bgt.n	801a940 <nema_rb_inline_cmd+0x58>
 801a910:	2700      	movs	r7, #0
 801a912:	4623      	mov	r3, r4
 801a914:	6117      	str	r7, [r2, #16]
 801a916:	6018      	str	r0, [r3, #0]
 801a918:	6913      	ldr	r3, [r2, #16]
 801a91a:	3301      	adds	r3, #1
 801a91c:	429d      	cmp	r5, r3
 801a91e:	bfd3      	iteet	le
 801a920:	2300      	movle	r3, #0
 801a922:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
 801a926:	6113      	strgt	r3, [r2, #16]
 801a928:	6113      	strle	r3, [r2, #16]
 801a92a:	6021      	str	r1, [r4, #0]
 801a92c:	6913      	ldr	r3, [r2, #16]
 801a92e:	3301      	adds	r3, #1
 801a930:	429d      	cmp	r5, r3
 801a932:	bfd8      	it	le
 801a934:	2300      	movle	r3, #0
 801a936:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a93a:	6113      	str	r3, [r2, #16]
 801a93c:	d107      	bne.n	801a94e <nema_rb_inline_cmd+0x66>
 801a93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a940:	2b00      	cmp	r3, #0
 801a942:	d1de      	bne.n	801a902 <nema_rb_inline_cmd+0x1a>
 801a944:	4623      	mov	r3, r4
 801a946:	e7e6      	b.n	801a916 <nema_rb_inline_cmd+0x2e>
 801a948:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a94c:	e7e3      	b.n	801a916 <nema_rb_inline_cmd+0x2e>
 801a94e:	4610      	mov	r0, r2
 801a950:	f7e8 fa01 	bl	8002d56 <nema_buffer_flush>
 801a954:	6833      	ldr	r3, [r6, #0]
 801a956:	4a09      	ldr	r2, [pc, #36]	; (801a97c <nema_rb_inline_cmd+0x94>)
 801a958:	691b      	ldr	r3, [r3, #16]
 801a95a:	6811      	ldr	r1, [r2, #0]
 801a95c:	20ec      	movs	r0, #236	; 0xec
 801a95e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801a962:	f041 0104 	orr.w	r1, r1, #4
 801a966:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a96a:	f7e8 b93f 	b.w	8002bec <nema_reg_write>
 801a96e:	bf00      	nop
 801a970:	201981e4 	.word	0x201981e4
 801a974:	201981f0 	.word	0x201981f0
 801a978:	201981ec 	.word	0x201981ec
 801a97c:	201981e8 	.word	0x201981e8

0801a980 <nema_rb_force_flush>:
 801a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a982:	4e36      	ldr	r6, [pc, #216]	; (801aa5c <nema_rb_force_flush+0xdc>)
 801a984:	4b36      	ldr	r3, [pc, #216]	; (801aa60 <nema_rb_force_flush+0xe0>)
 801a986:	6830      	ldr	r0, [r6, #0]
 801a988:	6819      	ldr	r1, [r3, #0]
 801a98a:	6903      	ldr	r3, [r0, #16]
 801a98c:	4a35      	ldr	r2, [pc, #212]	; (801aa64 <nema_rb_force_flush+0xe4>)
 801a98e:	1d1c      	adds	r4, r3, #4
 801a990:	428c      	cmp	r4, r1
 801a992:	6812      	ldr	r2, [r2, #0]
 801a994:	db0a      	blt.n	801a9ac <nema_rb_force_flush+0x2c>
 801a996:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801a99a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 801a99e:	6903      	ldr	r3, [r0, #16]
 801a9a0:	3301      	adds	r3, #1
 801a9a2:	4299      	cmp	r1, r3
 801a9a4:	6103      	str	r3, [r0, #16]
 801a9a6:	dc51      	bgt.n	801aa4c <nema_rb_force_flush+0xcc>
 801a9a8:	2300      	movs	r3, #0
 801a9aa:	6103      	str	r3, [r0, #16]
 801a9ac:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 801a9b0:	2700      	movs	r7, #0
 801a9b2:	e008      	b.n	801a9c6 <nema_rb_force_flush+0x46>
 801a9b4:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 801a9b8:	6903      	ldr	r3, [r0, #16]
 801a9ba:	3301      	adds	r3, #1
 801a9bc:	4299      	cmp	r1, r3
 801a9be:	6103      	str	r3, [r0, #16]
 801a9c0:	bfdc      	itt	le
 801a9c2:	2300      	movle	r3, #0
 801a9c4:	6107      	strle	r7, [r0, #16]
 801a9c6:	f013 0c03 	ands.w	ip, r3, #3
 801a9ca:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 801a9ce:	d1f1      	bne.n	801a9b4 <nema_rb_force_flush+0x34>
 801a9d0:	4d25      	ldr	r5, [pc, #148]	; (801aa68 <nema_rb_force_flush+0xe8>)
 801a9d2:	4f26      	ldr	r7, [pc, #152]	; (801aa6c <nema_rb_force_flush+0xec>)
 801a9d4:	6025      	str	r5, [r4, #0]
 801a9d6:	6904      	ldr	r4, [r0, #16]
 801a9d8:	683d      	ldr	r5, [r7, #0]
 801a9da:	3401      	adds	r4, #1
 801a9dc:	42a1      	cmp	r1, r4
 801a9de:	bfd8      	it	le
 801a9e0:	4614      	movle	r4, r2
 801a9e2:	f103 0304 	add.w	r3, r3, #4
 801a9e6:	bfc8      	it	gt
 801a9e8:	6104      	strgt	r4, [r0, #16]
 801a9ea:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801a9ee:	bfcc      	ite	gt
 801a9f0:	eb02 0484 	addgt.w	r4, r2, r4, lsl #2
 801a9f4:	f8c0 c010 	strle.w	ip, [r0, #16]
 801a9f8:	6023      	str	r3, [r4, #0]
 801a9fa:	6903      	ldr	r3, [r0, #16]
 801a9fc:	3301      	adds	r3, #1
 801a9fe:	4299      	cmp	r1, r3
 801aa00:	dd27      	ble.n	801aa52 <nema_rb_force_flush+0xd2>
 801aa02:	6103      	str	r3, [r0, #16]
 801aa04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801aa08:	4c19      	ldr	r4, [pc, #100]	; (801aa70 <nema_rb_force_flush+0xf0>)
 801aa0a:	601c      	str	r4, [r3, #0]
 801aa0c:	6903      	ldr	r3, [r0, #16]
 801aa0e:	3301      	adds	r3, #1
 801aa10:	4299      	cmp	r1, r3
 801aa12:	bfd5      	itete	le
 801aa14:	2300      	movle	r3, #0
 801aa16:	6103      	strgt	r3, [r0, #16]
 801aa18:	6103      	strle	r3, [r0, #16]
 801aa1a:	eb02 0283 	addgt.w	r2, r2, r3, lsl #2
 801aa1e:	4b15      	ldr	r3, [pc, #84]	; (801aa74 <nema_rb_force_flush+0xf4>)
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	6013      	str	r3, [r2, #0]
 801aa24:	6903      	ldr	r3, [r0, #16]
 801aa26:	3301      	adds	r3, #1
 801aa28:	4299      	cmp	r1, r3
 801aa2a:	bfd8      	it	le
 801aa2c:	2300      	movle	r3, #0
 801aa2e:	6103      	str	r3, [r0, #16]
 801aa30:	f7e8 f991 	bl	8002d56 <nema_buffer_flush>
 801aa34:	6833      	ldr	r3, [r6, #0]
 801aa36:	6839      	ldr	r1, [r7, #0]
 801aa38:	691b      	ldr	r3, [r3, #16]
 801aa3a:	20ec      	movs	r0, #236	; 0xec
 801aa3c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801aa40:	f041 0104 	orr.w	r1, r1, #4
 801aa44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801aa48:	f7e8 b8d0 	b.w	8002bec <nema_reg_write>
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	d1a4      	bne.n	801a99a <nema_rb_force_flush+0x1a>
 801aa50:	e7ac      	b.n	801a9ac <nema_rb_force_flush+0x2c>
 801aa52:	2400      	movs	r4, #0
 801aa54:	4613      	mov	r3, r2
 801aa56:	6104      	str	r4, [r0, #16]
 801aa58:	e7d6      	b.n	801aa08 <nema_rb_force_flush+0x88>
 801aa5a:	bf00      	nop
 801aa5c:	201981e4 	.word	0x201981e4
 801aa60:	201981f0 	.word	0x201981f0
 801aa64:	201981ec 	.word	0x201981ec
 801aa68:	ff0000f0 	.word	0xff0000f0
 801aa6c:	201981e8 	.word	0x201981e8
 801aa70:	ff0000f4 	.word	0xff0000f4
 801aa74:	201981f4 	.word	0x201981f4

0801aa78 <nema_rb_submit_cl_id>:
 801aa78:	b510      	push	{r4, lr}
 801aa7a:	1e04      	subs	r4, r0, #0
 801aa7c:	dd40      	ble.n	801ab00 <nema_rb_submit_cl_id+0x88>
 801aa7e:	2000      	movs	r0, #0
 801aa80:	f7e8 f973 	bl	8002d6a <nema_mutex_lock>
 801aa84:	4621      	mov	r1, r4
 801aa86:	f44f 70a4 	mov.w	r0, #328	; 0x148
 801aa8a:	f7ff ff2d 	bl	801a8e8 <nema_rb_inline_cmd>
 801aa8e:	4a1d      	ldr	r2, [pc, #116]	; (801ab04 <nema_rb_submit_cl_id+0x8c>)
 801aa90:	4b1d      	ldr	r3, [pc, #116]	; (801ab08 <nema_rb_submit_cl_id+0x90>)
 801aa92:	6812      	ldr	r2, [r2, #0]
 801aa94:	6818      	ldr	r0, [r3, #0]
 801aa96:	6913      	ldr	r3, [r2, #16]
 801aa98:	1c59      	adds	r1, r3, #1
 801aa9a:	4281      	cmp	r1, r0
 801aa9c:	db0e      	blt.n	801aabc <nema_rb_submit_cl_id+0x44>
 801aa9e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801aaa2:	491a      	ldr	r1, [pc, #104]	; (801ab0c <nema_rb_submit_cl_id+0x94>)
 801aaa4:	6809      	ldr	r1, [r1, #0]
 801aaa6:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 801aaaa:	6913      	ldr	r3, [r2, #16]
 801aaac:	3301      	adds	r3, #1
 801aaae:	4298      	cmp	r0, r3
 801aab0:	6113      	str	r3, [r2, #16]
 801aab2:	dc21      	bgt.n	801aaf8 <nema_rb_submit_cl_id+0x80>
 801aab4:	2400      	movs	r4, #0
 801aab6:	460b      	mov	r3, r1
 801aab8:	6114      	str	r4, [r2, #16]
 801aaba:	e003      	b.n	801aac4 <nema_rb_submit_cl_id+0x4c>
 801aabc:	4913      	ldr	r1, [pc, #76]	; (801ab0c <nema_rb_submit_cl_id+0x94>)
 801aabe:	6809      	ldr	r1, [r1, #0]
 801aac0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801aac4:	24f8      	movs	r4, #248	; 0xf8
 801aac6:	601c      	str	r4, [r3, #0]
 801aac8:	6913      	ldr	r3, [r2, #16]
 801aaca:	3301      	adds	r3, #1
 801aacc:	4298      	cmp	r0, r3
 801aace:	bfd5      	itete	le
 801aad0:	2300      	movle	r3, #0
 801aad2:	6113      	strgt	r3, [r2, #16]
 801aad4:	6113      	strle	r3, [r2, #16]
 801aad6:	eb01 0183 	addgt.w	r1, r1, r3, lsl #2
 801aada:	2301      	movs	r3, #1
 801aadc:	600b      	str	r3, [r1, #0]
 801aade:	6913      	ldr	r3, [r2, #16]
 801aae0:	3301      	adds	r3, #1
 801aae2:	4298      	cmp	r0, r3
 801aae4:	bfd8      	it	le
 801aae6:	2300      	movle	r3, #0
 801aae8:	6113      	str	r3, [r2, #16]
 801aaea:	f7ff ff49 	bl	801a980 <nema_rb_force_flush>
 801aaee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aaf2:	2000      	movs	r0, #0
 801aaf4:	f7e8 b946 	b.w	8002d84 <nema_mutex_unlock>
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d1d4      	bne.n	801aaa6 <nema_rb_submit_cl_id+0x2e>
 801aafc:	460b      	mov	r3, r1
 801aafe:	e7e1      	b.n	801aac4 <nema_rb_submit_cl_id+0x4c>
 801ab00:	bd10      	pop	{r4, pc}
 801ab02:	bf00      	nop
 801ab04:	201981e4 	.word	0x201981e4
 801ab08:	201981f0 	.word	0x201981f0
 801ab0c:	201981ec 	.word	0x201981ec

0801ab10 <init_nema_regs>:
 801ab10:	b538      	push	{r3, r4, r5, lr}
 801ab12:	2100      	movs	r1, #0
 801ab14:	20e8      	movs	r0, #232	; 0xe8
 801ab16:	f7e8 f869 	bl	8002bec <nema_reg_write>
 801ab1a:	2100      	movs	r1, #0
 801ab1c:	20fc      	movs	r0, #252	; 0xfc
 801ab1e:	f7e8 f865 	bl	8002bec <nema_reg_write>
 801ab22:	2101      	movs	r1, #1
 801ab24:	f44f 7062 	mov.w	r0, #904	; 0x388
 801ab28:	f7e8 f860 	bl	8002bec <nema_reg_write>
 801ab2c:	2000      	movs	r0, #0
 801ab2e:	f001 f8f7 	bl	801bd20 <nema_set_interrupt_ctrl>
 801ab32:	f001 fe93 	bl	801c85c <nema_blender_init>
 801ab36:	2100      	movs	r1, #0
 801ab38:	f44f 7000 	mov.w	r0, #512	; 0x200
 801ab3c:	f001 fda0 	bl	801c680 <nema_cl_add_cmd>
 801ab40:	f04f 31ff 	mov.w	r1, #4294967295
 801ab44:	f44f 7001 	mov.w	r0, #516	; 0x204
 801ab48:	f001 fd9a 	bl	801c680 <nema_cl_add_cmd>
 801ab4c:	f000 fec6 	bl	801b8dc <nema_readHwConfig>
 801ab50:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
 801ab54:	d015      	beq.n	801ab82 <init_nema_regs+0x72>
 801ab56:	2007      	movs	r0, #7
 801ab58:	f001 f82e 	bl	801bbb8 <nema_set_depth_ctrl>
 801ab5c:	2300      	movs	r3, #0
 801ab5e:	4c10      	ldr	r4, [pc, #64]	; (801aba0 <init_nema_regs+0x90>)
 801ab60:	7820      	ldrb	r0, [r4, #0]
 801ab62:	7063      	strb	r3, [r4, #1]
 801ab64:	f000 fecc 	bl	801b900 <nema_enable_tiling>
 801ab68:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801ab6c:	2500      	movs	r5, #0
 801ab6e:	6962      	ldr	r2, [r4, #20]
 801ab70:	430b      	orrs	r3, r1
 801ab72:	4313      	orrs	r3, r2
 801ab74:	e9c4 5303 	strd	r5, r3, [r4, #12]
 801ab78:	f000 febe 	bl	801b8f8 <nema_readHwConfigH>
 801ab7c:	0583      	lsls	r3, r0, #22
 801ab7e:	d403      	bmi.n	801ab88 <init_nema_regs+0x78>
 801ab80:	bd38      	pop	{r3, r4, r5, pc}
 801ab82:	4c07      	ldr	r4, [pc, #28]	; (801aba0 <init_nema_regs+0x90>)
 801ab84:	70a0      	strb	r0, [r4, #2]
 801ab86:	e7ef      	b.n	801ab68 <init_nema_regs+0x58>
 801ab88:	4629      	mov	r1, r5
 801ab8a:	f44f 705d 	mov.w	r0, #884	; 0x374
 801ab8e:	f7e8 f82d 	bl	8002bec <nema_reg_write>
 801ab92:	4629      	mov	r1, r5
 801ab94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ab98:	f44f 705a 	mov.w	r0, #872	; 0x368
 801ab9c:	f7e8 b826 	b.w	8002bec <nema_reg_write>
 801aba0:	20198594 	.word	0x20198594

0801aba4 <nema_init>:
 801aba4:	b510      	push	{r4, lr}
 801aba6:	f7e7 ffab 	bl	8002b00 <nema_sys_init>
 801abaa:	1e04      	subs	r4, r0, #0
 801abac:	db11      	blt.n	801abd2 <nema_init+0x2e>
 801abae:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
 801abb2:	f7e8 f80b 	bl	8002bcc <nema_reg_read>
 801abb6:	4b10      	ldr	r3, [pc, #64]	; (801abf8 <nema_init+0x54>)
 801abb8:	4298      	cmp	r0, r3
 801abba:	d114      	bne.n	801abe6 <nema_init+0x42>
 801abbc:	f001 fc7e 	bl	801c4bc <nema_cl_unbind>
 801abc0:	22d0      	movs	r2, #208	; 0xd0
 801abc2:	2100      	movs	r1, #0
 801abc4:	480d      	ldr	r0, [pc, #52]	; (801abfc <nema_init+0x58>)
 801abc6:	f00d fb12 	bl	80281ee <memset>
 801abca:	b14c      	cbz	r4, 801abe0 <nema_init+0x3c>
 801abcc:	2400      	movs	r4, #0
 801abce:	4620      	mov	r0, r4
 801abd0:	bd10      	pop	{r4, pc}
 801abd2:	4a0a      	ldr	r2, [pc, #40]	; (801abfc <nema_init+0x58>)
 801abd4:	4620      	mov	r0, r4
 801abd6:	6993      	ldr	r3, [r2, #24]
 801abd8:	f043 0301 	orr.w	r3, r3, #1
 801abdc:	6193      	str	r3, [r2, #24]
 801abde:	bd10      	pop	{r4, pc}
 801abe0:	f7ff ff96 	bl	801ab10 <init_nema_regs>
 801abe4:	e7f3      	b.n	801abce <nema_init+0x2a>
 801abe6:	4a05      	ldr	r2, [pc, #20]	; (801abfc <nema_init+0x58>)
 801abe8:	f04f 34ff 	mov.w	r4, #4294967295
 801abec:	6993      	ldr	r3, [r2, #24]
 801abee:	f043 0302 	orr.w	r3, r3, #2
 801abf2:	6193      	str	r3, [r2, #24]
 801abf4:	e7eb      	b.n	801abce <nema_init+0x2a>
 801abf6:	bf00      	nop
 801abf8:	86362000 	.word	0x86362000
 801abfc:	20198594 	.word	0x20198594

0801ac00 <nema_set_error>:
 801ac00:	4a02      	ldr	r2, [pc, #8]	; (801ac0c <nema_set_error+0xc>)
 801ac02:	6993      	ldr	r3, [r2, #24]
 801ac04:	4318      	orrs	r0, r3
 801ac06:	6190      	str	r0, [r2, #24]
 801ac08:	4770      	bx	lr
 801ac0a:	bf00      	nop
 801ac0c:	20198594 	.word	0x20198594

0801ac10 <nema_set_tex_color>:
 801ac10:	4601      	mov	r1, r0
 801ac12:	201c      	movs	r0, #28
 801ac14:	f001 bd34 	b.w	801c680 <nema_cl_add_cmd>

0801ac18 <nema_set_const_reg>:
 801ac18:	3080      	adds	r0, #128	; 0x80
 801ac1a:	0080      	lsls	r0, r0, #2
 801ac1c:	f5b0 7f03 	cmp.w	r0, #524	; 0x20c
 801ac20:	d900      	bls.n	801ac24 <nema_set_const_reg+0xc>
 801ac22:	4770      	bx	lr
 801ac24:	f001 bd2c 	b.w	801c680 <nema_cl_add_cmd>

0801ac28 <nema_set_clip>:
 801ac28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac2a:	460c      	mov	r4, r1
 801ac2c:	4607      	mov	r7, r0
 801ac2e:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 801ac32:	4d0c      	ldr	r5, [pc, #48]	; (801ac64 <nema_set_clip+0x3c>)
 801ac34:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 801ac38:	b289      	uxth	r1, r1
 801ac3a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801ac3e:	19d6      	adds	r6, r2, r7
 801ac40:	f44f 7088 	mov.w	r0, #272	; 0x110
 801ac44:	e9c5 7407 	strd	r7, r4, [r5, #28]
 801ac48:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
 801ac4c:	441c      	add	r4, r3
 801ac4e:	f001 fd17 	bl	801c680 <nema_cl_add_cmd>
 801ac52:	b2b1      	uxth	r1, r6
 801ac54:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801ac58:	f44f 708a 	mov.w	r0, #276	; 0x114
 801ac5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ac60:	f001 bd0e 	b.w	801c680 <nema_cl_add_cmd>
 801ac64:	20198594 	.word	0x20198594

0801ac68 <nema_enable_gradient>:
 801ac68:	2800      	cmp	r0, #0
 801ac6a:	bf14      	ite	ne
 801ac6c:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 801ac70:	2100      	moveq	r1, #0
 801ac72:	b410      	push	{r4}
 801ac74:	4a05      	ldr	r2, [pc, #20]	; (801ac8c <nema_enable_gradient+0x24>)
 801ac76:	6950      	ldr	r0, [r2, #20]
 801ac78:	e9d2 3401 	ldrd	r3, r4, [r2, #4]
 801ac7c:	4323      	orrs	r3, r4
 801ac7e:	4303      	orrs	r3, r0
 801ac80:	430b      	orrs	r3, r1
 801ac82:	e9c2 1303 	strd	r1, r3, [r2, #12]
 801ac86:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac8a:	4770      	bx	lr
 801ac8c:	20198594 	.word	0x20198594

0801ac90 <nema_rgba>:
 801ac90:	061b      	lsls	r3, r3, #24
 801ac92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ac96:	4318      	orrs	r0, r3
 801ac98:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801ac9c:	4770      	bx	lr
 801ac9e:	bf00      	nop

0801aca0 <nema_bind_src_tex>:
 801aca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aca4:	9c06      	ldr	r4, [sp, #24]
 801aca6:	460e      	mov	r6, r1
 801aca8:	1c61      	adds	r1, r4, #1
 801acaa:	4605      	mov	r5, r0
 801acac:	4617      	mov	r7, r2
 801acae:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801acb2:	d022      	beq.n	801acfa <nema_bind_src_tex+0x5a>
 801acb4:	2201      	movs	r2, #1
 801acb6:	0400      	lsls	r0, r0, #16
 801acb8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801ad8c <nema_bind_src_tex+0xec>
 801acbc:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 801acc0:	b2a4      	uxth	r4, r4
 801acc2:	4323      	orrs	r3, r4
 801acc4:	2003      	movs	r0, #3
 801acc6:	f8c8 3050 	str.w	r3, [r8, #80]	; 0x50
 801acca:	e9c8 5611 	strd	r5, r6, [r8, #68]	; 0x44
 801acce:	f8c8 704c 	str.w	r7, [r8, #76]	; 0x4c
 801acd2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 801acd6:	f001 fc75 	bl	801c5c4 <nema_cl_get_space>
 801acda:	b160      	cbz	r0, 801acf6 <nema_bind_src_tex+0x56>
 801acdc:	2110      	movs	r1, #16
 801acde:	2214      	movs	r2, #20
 801ace0:	2318      	movs	r3, #24
 801ace2:	e9c0 1500 	strd	r1, r5, [r0]
 801ace6:	6082      	str	r2, [r0, #8]
 801ace8:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 801acec:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 801acf0:	e9c0 2303 	strd	r2, r3, [r0, #12]
 801acf4:	6146      	str	r6, [r0, #20]
 801acf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801acfa:	06c2      	lsls	r2, r0, #27
 801acfc:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 801ad00:	d41c      	bmi.n	801ad3c <nema_bind_src_tex+0x9c>
 801ad02:	4634      	mov	r4, r6
 801ad04:	f1a1 020b 	sub.w	r2, r1, #11
 801ad08:	2a2a      	cmp	r2, #42	; 0x2a
 801ad0a:	d833      	bhi.n	801ad74 <nema_bind_src_tex+0xd4>
 801ad0c:	e8df f002 	tbb	[pc, r2]
 801ad10:	32322a2a 	.word	0x32322a2a
 801ad14:	30323232 	.word	0x30323232
 801ad18:	1c323232 	.word	0x1c323232
 801ad1c:	3232321c 	.word	0x3232321c
 801ad20:	32323232 	.word	0x32323232
 801ad24:	32323232 	.word	0x32323232
 801ad28:	32323232 	.word	0x32323232
 801ad2c:	2a241f2a 	.word	0x2a241f2a
 801ad30:	3232241f 	.word	0x3232241f
 801ad34:	321f1f32 	.word	0x321f1f32
 801ad38:	2432      	.short	0x2432
 801ad3a:	24          	.byte	0x24
 801ad3b:	00          	.byte	0x00
 801ad3c:	1cf4      	adds	r4, r6, #3
 801ad3e:	bf48      	it	mi
 801ad40:	1db4      	addmi	r4, r6, #6
 801ad42:	f024 0403 	bic.w	r4, r4, #3
 801ad46:	e7dd      	b.n	801ad04 <nema_bind_src_tex+0x64>
 801ad48:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ad4c:	e7b2      	b.n	801acb4 <nema_bind_src_tex+0x14>
 801ad4e:	0062      	lsls	r2, r4, #1
 801ad50:	1dd4      	adds	r4, r2, #7
 801ad52:	d404      	bmi.n	801ad5e <nema_bind_src_tex+0xbe>
 801ad54:	10e4      	asrs	r4, r4, #3
 801ad56:	e7ad      	b.n	801acb4 <nema_bind_src_tex+0x14>
 801ad58:	00a2      	lsls	r2, r4, #2
 801ad5a:	1dd4      	adds	r4, r2, #7
 801ad5c:	d5fa      	bpl.n	801ad54 <nema_bind_src_tex+0xb4>
 801ad5e:	f102 040e 	add.w	r4, r2, #14
 801ad62:	e7f7      	b.n	801ad54 <nema_bind_src_tex+0xb4>
 801ad64:	1de2      	adds	r2, r4, #7
 801ad66:	bf48      	it	mi
 801ad68:	f104 020e 	addmi.w	r2, r4, #14
 801ad6c:	10d4      	asrs	r4, r2, #3
 801ad6e:	e7a1      	b.n	801acb4 <nema_bind_src_tex+0x14>
 801ad70:	0064      	lsls	r4, r4, #1
 801ad72:	e79f      	b.n	801acb4 <nema_bind_src_tex+0x14>
 801ad74:	3904      	subs	r1, #4
 801ad76:	2947      	cmp	r1, #71	; 0x47
 801ad78:	bf8e      	itee	hi
 801ad7a:	2204      	movhi	r2, #4
 801ad7c:	4a02      	ldrls	r2, [pc, #8]	; (801ad88 <nema_bind_src_tex+0xe8>)
 801ad7e:	5652      	ldrsbls	r2, [r2, r1]
 801ad80:	fb02 f404 	mul.w	r4, r2, r4
 801ad84:	e796      	b.n	801acb4 <nema_bind_src_tex+0x14>
 801ad86:	bf00      	nop
 801ad88:	0802ab60 	.word	0x0802ab60
 801ad8c:	20198594 	.word	0x20198594

0801ad90 <nema_bind_dst_tex>:
 801ad90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad94:	9c08      	ldr	r4, [sp, #32]
 801ad96:	4699      	mov	r9, r3
 801ad98:	4617      	mov	r7, r2
 801ad9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ad9e:	1c63      	adds	r3, r4, #1
 801ada0:	4680      	mov	r8, r0
 801ada2:	460e      	mov	r6, r1
 801ada4:	d02c      	beq.n	801ae00 <nema_bind_dst_tex+0x70>
 801ada6:	2a12      	cmp	r2, #18
 801ada8:	d009      	beq.n	801adbe <nema_bind_dst_tex+0x2e>
 801adaa:	3a16      	subs	r2, #22
 801adac:	2a01      	cmp	r2, #1
 801adae:	d906      	bls.n	801adbe <nema_bind_dst_tex+0x2e>
 801adb0:	4d50      	ldr	r5, [pc, #320]	; (801aef4 <nema_bind_dst_tex+0x164>)
 801adb2:	7868      	ldrb	r0, [r5, #1]
 801adb4:	f000 fda4 	bl	801b900 <nema_enable_tiling>
 801adb8:	e007      	b.n	801adca <nema_bind_dst_tex+0x3a>
 801adba:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 801adbe:	2301      	movs	r3, #1
 801adc0:	4d4c      	ldr	r5, [pc, #304]	; (801aef4 <nema_bind_dst_tex+0x164>)
 801adc2:	4618      	mov	r0, r3
 801adc4:	702b      	strb	r3, [r5, #0]
 801adc6:	f000 fd9b 	bl	801b900 <nema_enable_tiling>
 801adca:	2201      	movs	r2, #1
 801adcc:	b2a4      	uxth	r4, r4
 801adce:	ea44 6409 	orr.w	r4, r4, r9, lsl #24
 801add2:	2003      	movs	r0, #3
 801add4:	63ec      	str	r4, [r5, #60]	; 0x3c
 801add6:	e9c5 860c 	strd	r8, r6, [r5, #48]	; 0x30
 801adda:	63af      	str	r7, [r5, #56]	; 0x38
 801addc:	642a      	str	r2, [r5, #64]	; 0x40
 801adde:	f001 fbf1 	bl	801c5c4 <nema_cl_get_space>
 801ade2:	b158      	cbz	r0, 801adfc <nema_bind_dst_tex+0x6c>
 801ade4:	2100      	movs	r1, #0
 801ade6:	2204      	movs	r2, #4
 801ade8:	2308      	movs	r3, #8
 801adea:	e9c0 1800 	strd	r1, r8, [r0]
 801adee:	6082      	str	r2, [r0, #8]
 801adf0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 801adf2:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 801adf6:	e9c0 2303 	strd	r2, r3, [r0, #12]
 801adfa:	6146      	str	r6, [r0, #20]
 801adfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae00:	f1a2 030b 	sub.w	r3, r2, #11
 801ae04:	2b2a      	cmp	r3, #42	; 0x2a
 801ae06:	d86b      	bhi.n	801aee0 <nema_bind_dst_tex+0x150>
 801ae08:	a101      	add	r1, pc, #4	; (adr r1, 801ae10 <nema_bind_dst_tex+0x80>)
 801ae0a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ae0e:	bf00      	nop
 801ae10:	0801aed3 	.word	0x0801aed3
 801ae14:	0801aed3 	.word	0x0801aed3
 801ae18:	0801aee1 	.word	0x0801aee1
 801ae1c:	0801aee1 	.word	0x0801aee1
 801ae20:	0801aee1 	.word	0x0801aee1
 801ae24:	0801aee1 	.word	0x0801aee1
 801ae28:	0801aee1 	.word	0x0801aee1
 801ae2c:	0801aedd 	.word	0x0801aedd
 801ae30:	0801aee1 	.word	0x0801aee1
 801ae34:	0801aee1 	.word	0x0801aee1
 801ae38:	0801aee1 	.word	0x0801aee1
 801ae3c:	0801adbb 	.word	0x0801adbb
 801ae40:	0801adbb 	.word	0x0801adbb
 801ae44:	0801aee1 	.word	0x0801aee1
 801ae48:	0801aee1 	.word	0x0801aee1
 801ae4c:	0801aee1 	.word	0x0801aee1
 801ae50:	0801aee1 	.word	0x0801aee1
 801ae54:	0801aee1 	.word	0x0801aee1
 801ae58:	0801aee1 	.word	0x0801aee1
 801ae5c:	0801aee1 	.word	0x0801aee1
 801ae60:	0801aee1 	.word	0x0801aee1
 801ae64:	0801aee1 	.word	0x0801aee1
 801ae68:	0801aee1 	.word	0x0801aee1
 801ae6c:	0801aee1 	.word	0x0801aee1
 801ae70:	0801aee1 	.word	0x0801aee1
 801ae74:	0801aee1 	.word	0x0801aee1
 801ae78:	0801aee1 	.word	0x0801aee1
 801ae7c:	0801aee1 	.word	0x0801aee1
 801ae80:	0801aed3 	.word	0x0801aed3
 801ae84:	0801aec7 	.word	0x0801aec7
 801ae88:	0801aebd 	.word	0x0801aebd
 801ae8c:	0801aed3 	.word	0x0801aed3
 801ae90:	0801aec7 	.word	0x0801aec7
 801ae94:	0801aebd 	.word	0x0801aebd
 801ae98:	0801aee1 	.word	0x0801aee1
 801ae9c:	0801aee1 	.word	0x0801aee1
 801aea0:	0801aee1 	.word	0x0801aee1
 801aea4:	0801aec7 	.word	0x0801aec7
 801aea8:	0801aec7 	.word	0x0801aec7
 801aeac:	0801aee1 	.word	0x0801aee1
 801aeb0:	0801aee1 	.word	0x0801aee1
 801aeb4:	0801aebd 	.word	0x0801aebd
 801aeb8:	0801aebd 	.word	0x0801aebd
 801aebc:	00b3      	lsls	r3, r6, #2
 801aebe:	1ddc      	adds	r4, r3, #7
 801aec0:	d404      	bmi.n	801aecc <nema_bind_dst_tex+0x13c>
 801aec2:	10e4      	asrs	r4, r4, #3
 801aec4:	e76f      	b.n	801ada6 <nema_bind_dst_tex+0x16>
 801aec6:	0073      	lsls	r3, r6, #1
 801aec8:	1ddc      	adds	r4, r3, #7
 801aeca:	d5fa      	bpl.n	801aec2 <nema_bind_dst_tex+0x132>
 801aecc:	f103 040e 	add.w	r4, r3, #14
 801aed0:	e7f7      	b.n	801aec2 <nema_bind_dst_tex+0x132>
 801aed2:	1df4      	adds	r4, r6, #7
 801aed4:	d5f5      	bpl.n	801aec2 <nema_bind_dst_tex+0x132>
 801aed6:	f106 040e 	add.w	r4, r6, #14
 801aeda:	e7f2      	b.n	801aec2 <nema_bind_dst_tex+0x132>
 801aedc:	0074      	lsls	r4, r6, #1
 801aede:	e76e      	b.n	801adbe <nema_bind_dst_tex+0x2e>
 801aee0:	1f13      	subs	r3, r2, #4
 801aee2:	2b47      	cmp	r3, #71	; 0x47
 801aee4:	bf8e      	itee	hi
 801aee6:	2404      	movhi	r4, #4
 801aee8:	4903      	ldrls	r1, [pc, #12]	; (801aef8 <nema_bind_dst_tex+0x168>)
 801aeea:	56cc      	ldrsbls	r4, [r1, r3]
 801aeec:	fb06 f404 	mul.w	r4, r6, r4
 801aef0:	e759      	b.n	801ada6 <nema_bind_dst_tex+0x16>
 801aef2:	bf00      	nop
 801aef4:	20198594 	.word	0x20198594
 801aef8:	0802ab60 	.word	0x0802ab60

0801aefc <nema_fill_rect>:
 801aefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af00:	4604      	mov	r4, r0
 801af02:	460d      	mov	r5, r1
 801af04:	4616      	mov	r6, r2
 801af06:	461f      	mov	r7, r3
 801af08:	9806      	ldr	r0, [sp, #24]
 801af0a:	f000 fe5b 	bl	801bbc4 <nema_set_raster_color>
 801af0e:	463b      	mov	r3, r7
 801af10:	4632      	mov	r2, r6
 801af12:	4629      	mov	r1, r5
 801af14:	4620      	mov	r0, r4
 801af16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af1a:	f000 be95 	b.w	801bc48 <nema_raster_rect>
 801af1e:	bf00      	nop

0801af20 <nema_blit>:
 801af20:	ee07 0a90 	vmov	s15, r0
 801af24:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801af28:	ee07 1a90 	vmov	s15, r1
 801af2c:	b500      	push	{lr}
 801af2e:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801af32:	b083      	sub	sp, #12
 801af34:	e9cd 0100 	strd	r0, r1, [sp]
 801af38:	f000 fdde 	bl	801baf8 <nema_set_matrix_translate>
 801af3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801af40:	4a03      	ldr	r2, [pc, #12]	; (801af50 <nema_blit+0x30>)
 801af42:	e9d2 2312 	ldrd	r2, r3, [r2, #72]	; 0x48
 801af46:	b003      	add	sp, #12
 801af48:	f85d eb04 	ldr.w	lr, [sp], #4
 801af4c:	f000 be7c 	b.w	801bc48 <nema_raster_rect>
 801af50:	20198594 	.word	0x20198594

0801af54 <nema_blit_rotate>:
 801af54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af56:	2600      	movs	r6, #0
 801af58:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 801af5c:	4b68      	ldr	r3, [pc, #416]	; (801b100 <nema_blit_rotate+0x1ac>)
 801af5e:	b08b      	sub	sp, #44	; 0x2c
 801af60:	3a01      	subs	r2, #1
 801af62:	9607      	str	r6, [sp, #28]
 801af64:	9608      	str	r6, [sp, #32]
 801af66:	9709      	str	r7, [sp, #36]	; 0x24
 801af68:	4604      	mov	r4, r0
 801af6a:	e9d3 6712 	ldrd	r6, r7, [r3, #72]	; 0x48
 801af6e:	460d      	mov	r5, r1
 801af70:	2a0e      	cmp	r2, #14
 801af72:	f200 80b0 	bhi.w	801b0d6 <nema_blit_rotate+0x182>
 801af76:	e8df f002 	tbb	[pc, r2]
 801af7a:	4730      	.short	0x4730
 801af7c:	9a836f58 	.word	0x9a836f58
 801af80:	6f089a08 	.word	0x6f089a08
 801af84:	ae584783 	.word	0xae584783
 801af88:	30          	.byte	0x30
 801af89:	00          	.byte	0x00
 801af8a:	1970      	adds	r0, r6, r5
 801af8c:	ee07 0a10 	vmov	s14, r0
 801af90:	1938      	adds	r0, r7, r4
 801af92:	4631      	mov	r1, r6
 801af94:	ee07 0a90 	vmov	s15, r0
 801af98:	2200      	movs	r2, #0
 801af9a:	463e      	mov	r6, r7
 801af9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801afa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801afa4:	460f      	mov	r7, r1
 801afa6:	4b57      	ldr	r3, [pc, #348]	; (801b104 <nema_blit_rotate+0x1b0>)
 801afa8:	9201      	str	r2, [sp, #4]
 801afaa:	9205      	str	r2, [sp, #20]
 801afac:	9302      	str	r3, [sp, #8]
 801afae:	9304      	str	r3, [sp, #16]
 801afb0:	eddf 6a55 	vldr	s13, [pc, #340]	; 801b108 <nema_blit_rotate+0x1b4>
 801afb4:	ee37 7a26 	vadd.f32	s14, s14, s13
 801afb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801afbc:	a801      	add	r0, sp, #4
 801afbe:	ed8d 7a03 	vstr	s14, [sp, #12]
 801afc2:	edcd 7a06 	vstr	s15, [sp, #24]
 801afc6:	f000 fcdd 	bl	801b984 <nema_set_matrix>
 801afca:	463b      	mov	r3, r7
 801afcc:	4632      	mov	r2, r6
 801afce:	4629      	mov	r1, r5
 801afd0:	4620      	mov	r0, r4
 801afd2:	f000 fe39 	bl	801bc48 <nema_raster_rect>
 801afd6:	b00b      	add	sp, #44	; 0x2c
 801afd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801afda:	ee07 4a90 	vmov	s15, r4
 801afde:	4630      	mov	r0, r6
 801afe0:	442e      	add	r6, r5
 801afe2:	2300      	movs	r3, #0
 801afe4:	ee07 6a10 	vmov	s14, r6
 801afe8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801afec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aff0:	4944      	ldr	r1, [pc, #272]	; (801b104 <nema_blit_rotate+0x1b0>)
 801aff2:	463e      	mov	r6, r7
 801aff4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aff8:	9301      	str	r3, [sp, #4]
 801affa:	4607      	mov	r7, r0
 801affc:	9305      	str	r3, [sp, #20]
 801affe:	9102      	str	r1, [sp, #8]
 801b000:	9204      	str	r2, [sp, #16]
 801b002:	eef1 7a67 	vneg.f32	s15, s15
 801b006:	e7d3      	b.n	801afb0 <nema_blit_rotate+0x5c>
 801b008:	4b3e      	ldr	r3, [pc, #248]	; (801b104 <nema_blit_rotate+0x1b0>)
 801b00a:	2200      	movs	r2, #0
 801b00c:	9301      	str	r3, [sp, #4]
 801b00e:	9305      	str	r3, [sp, #20]
 801b010:	1833      	adds	r3, r6, r0
 801b012:	ee07 3a90 	vmov	s15, r3
 801b016:	1878      	adds	r0, r7, r1
 801b018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b01c:	ee07 0a90 	vmov	s15, r0
 801b020:	9202      	str	r2, [sp, #8]
 801b022:	9204      	str	r2, [sp, #16]
 801b024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b028:	e7c2      	b.n	801afb0 <nema_blit_rotate+0x5c>
 801b02a:	ee07 5a10 	vmov	s14, r5
 801b02e:	4630      	mov	r0, r6
 801b030:	193e      	adds	r6, r7, r4
 801b032:	2300      	movs	r3, #0
 801b034:	ee07 6a90 	vmov	s15, r6
 801b038:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801b03c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b040:	4a30      	ldr	r2, [pc, #192]	; (801b104 <nema_blit_rotate+0x1b0>)
 801b042:	463e      	mov	r6, r7
 801b044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b048:	4607      	mov	r7, r0
 801b04a:	9301      	str	r3, [sp, #4]
 801b04c:	9305      	str	r3, [sp, #20]
 801b04e:	9102      	str	r1, [sp, #8]
 801b050:	eeb1 7a47 	vneg.f32	s14, s14
 801b054:	9204      	str	r2, [sp, #16]
 801b056:	e7ab      	b.n	801afb0 <nema_blit_rotate+0x5c>
 801b058:	ee07 4a90 	vmov	s15, r4
 801b05c:	1978      	adds	r0, r7, r5
 801b05e:	2300      	movs	r3, #0
 801b060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b064:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801b068:	ee07 0a90 	vmov	s15, r0
 801b06c:	4a25      	ldr	r2, [pc, #148]	; (801b104 <nema_blit_rotate+0x1b0>)
 801b06e:	9101      	str	r1, [sp, #4]
 801b070:	9302      	str	r3, [sp, #8]
 801b072:	9304      	str	r3, [sp, #16]
 801b074:	eeb1 7a47 	vneg.f32	s14, s14
 801b078:	9205      	str	r2, [sp, #20]
 801b07a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b07e:	e797      	b.n	801afb0 <nema_blit_rotate+0x5c>
 801b080:	ee07 5a90 	vmov	s15, r5
 801b084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b088:	ee07 0a90 	vmov	s15, r0
 801b08c:	4631      	mov	r1, r6
 801b08e:	2200      	movs	r2, #0
 801b090:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801b094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b098:	463e      	mov	r6, r7
 801b09a:	eeb1 7a47 	vneg.f32	s14, s14
 801b09e:	460f      	mov	r7, r1
 801b0a0:	eef1 7a67 	vneg.f32	s15, s15
 801b0a4:	9201      	str	r2, [sp, #4]
 801b0a6:	9205      	str	r2, [sp, #20]
 801b0a8:	9302      	str	r3, [sp, #8]
 801b0aa:	9304      	str	r3, [sp, #16]
 801b0ac:	e780      	b.n	801afb0 <nema_blit_rotate+0x5c>
 801b0ae:	ee07 5a90 	vmov	s15, r5
 801b0b2:	1830      	adds	r0, r6, r0
 801b0b4:	2300      	movs	r3, #0
 801b0b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801b0ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b0be:	ee07 0a10 	vmov	s14, r0
 801b0c2:	4910      	ldr	r1, [pc, #64]	; (801b104 <nema_blit_rotate+0x1b0>)
 801b0c4:	9302      	str	r3, [sp, #8]
 801b0c6:	9101      	str	r1, [sp, #4]
 801b0c8:	9304      	str	r3, [sp, #16]
 801b0ca:	9205      	str	r2, [sp, #20]
 801b0cc:	eef1 7a67 	vneg.f32	s15, s15
 801b0d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b0d4:	e76c      	b.n	801afb0 <nema_blit_rotate+0x5c>
 801b0d6:	ee07 0a90 	vmov	s15, r0
 801b0da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b0de:	ee07 1a90 	vmov	s15, r1
 801b0e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b0ec:	9201      	str	r2, [sp, #4]
 801b0ee:	9205      	str	r2, [sp, #20]
 801b0f0:	9302      	str	r3, [sp, #8]
 801b0f2:	9304      	str	r3, [sp, #16]
 801b0f4:	eeb1 7a47 	vneg.f32	s14, s14
 801b0f8:	eef1 7a67 	vneg.f32	s15, s15
 801b0fc:	e758      	b.n	801afb0 <nema_blit_rotate+0x5c>
 801b0fe:	bf00      	nop
 801b100:	20198594 	.word	0x20198594
 801b104:	bf800000 	.word	0xbf800000
 801b108:	00000000 	.word	0x00000000

0801b10c <nema_blit_tri_fit>:
 801b10c:	2803      	cmp	r0, #3
 801b10e:	d801      	bhi.n	801b114 <nema_blit_tri_fit+0x8>
 801b110:	2903      	cmp	r1, #3
 801b112:	d900      	bls.n	801b116 <nema_blit_tri_fit+0xa>
 801b114:	4770      	bx	lr
 801b116:	2a03      	cmp	r2, #3
 801b118:	d8fc      	bhi.n	801b114 <nema_blit_tri_fit+0x8>
 801b11a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b11e:	460c      	mov	r4, r1
 801b120:	493b      	ldr	r1, [pc, #236]	; (801b210 <nema_blit_tri_fit+0x104>)
 801b122:	4603      	mov	r3, r0
 801b124:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 801b128:	ee07 0a90 	vmov	s15, r0
 801b12c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b130:	ee07 1a90 	vmov	s15, r1
 801b134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b138:	b08a      	sub	sp, #40	; 0x28
 801b13a:	f04f 0c00 	mov.w	ip, #0
 801b13e:	edcd 7a08 	vstr	s15, [sp, #32]
 801b142:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 801b146:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801b14a:	ed8d 7a03 	vstr	s14, [sp, #12]
 801b14e:	ed8d 7a04 	vstr	s14, [sp, #16]
 801b152:	ee12 8a10 	vmov	r8, s4
 801b156:	ee11 9a90 	vmov	r9, s3
 801b15a:	ee11 aa10 	vmov	sl, s2
 801b15e:	ee10 6a10 	vmov	r6, s0
 801b162:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 801b166:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 801b16a:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
 801b16e:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 801b172:	f8cd c008 	str.w	ip, [sp, #8]
 801b176:	f8cd c014 	str.w	ip, [sp, #20]
 801b17a:	f8cd c018 	str.w	ip, [sp, #24]
 801b17e:	f8cd c01c 	str.w	ip, [sp, #28]
 801b182:	ed52 6a08 	vldr	s13, [r2, #-32]	; 0xffffffe0
 801b186:	ed14 4a08 	vldr	s8, [r4, #-32]	; 0xffffffe0
 801b18a:	ed53 1a08 	vldr	s3, [r3, #-32]	; 0xffffffe0
 801b18e:	ed12 7a04 	vldr	s14, [r2, #-16]
 801b192:	ed54 4a04 	vldr	s9, [r4, #-16]
 801b196:	ed13 2a04 	vldr	s4, [r3, #-16]
 801b19a:	eef0 5a62 	vmov.f32	s11, s5
 801b19e:	ee05 8a10 	vmov	s10, r8
 801b1a2:	ee03 9a10 	vmov	s6, r9
 801b1a6:	eef0 3a46 	vmov.f32	s7, s12
 801b1aa:	eeb0 1a46 	vmov.f32	s2, s12
 801b1ae:	ee12 7a90 	vmov	r7, s5
 801b1b2:	ee02 aa90 	vmov	s5, sl
 801b1b6:	ee10 5a90 	vmov	r5, s1
 801b1ba:	f000 f889 	bl	801b2d0 <nema_interpolate_tx_ty>
 801b1be:	ee00 6a10 	vmov	s0, r6
 801b1c2:	f000 f90f 	bl	801b3e4 <nema_f2fx>
 801b1c6:	ee00 5a10 	vmov	s0, r5
 801b1ca:	4604      	mov	r4, r0
 801b1cc:	f000 f90a 	bl	801b3e4 <nema_f2fx>
 801b1d0:	ee00 aa10 	vmov	s0, sl
 801b1d4:	4605      	mov	r5, r0
 801b1d6:	f000 f905 	bl	801b3e4 <nema_f2fx>
 801b1da:	ee00 9a10 	vmov	s0, r9
 801b1de:	4606      	mov	r6, r0
 801b1e0:	f000 f900 	bl	801b3e4 <nema_f2fx>
 801b1e4:	ee00 8a10 	vmov	s0, r8
 801b1e8:	4681      	mov	r9, r0
 801b1ea:	f000 f8fb 	bl	801b3e4 <nema_f2fx>
 801b1ee:	ee00 7a10 	vmov	s0, r7
 801b1f2:	4680      	mov	r8, r0
 801b1f4:	f000 f8f6 	bl	801b3e4 <nema_f2fx>
 801b1f8:	464b      	mov	r3, r9
 801b1fa:	e9cd 8000 	strd	r8, r0, [sp]
 801b1fe:	4632      	mov	r2, r6
 801b200:	4629      	mov	r1, r5
 801b202:	4620      	mov	r0, r4
 801b204:	f000 fce4 	bl	801bbd0 <nema_raster_triangle_fx>
 801b208:	b00a      	add	sp, #40	; 0x28
 801b20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b20e:	bf00      	nop
 801b210:	20198594 	.word	0x20198594

0801b214 <nema_blit_quad_fit>:
 801b214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b218:	ed2d 8b08 	vpush	{d8-d11}
 801b21c:	4b2b      	ldr	r3, [pc, #172]	; (801b2cc <nema_blit_quad_fit+0xb8>)
 801b21e:	b08e      	sub	sp, #56	; 0x38
 801b220:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 801b224:	aa05      	add	r2, sp, #20
 801b226:	eef0 ba40 	vmov.f32	s23, s0
 801b22a:	eeb0 ba60 	vmov.f32	s22, s1
 801b22e:	eef0 aa41 	vmov.f32	s21, s2
 801b232:	eeb0 aa61 	vmov.f32	s20, s3
 801b236:	eef0 9a42 	vmov.f32	s19, s4
 801b23a:	eeb0 9a62 	vmov.f32	s18, s5
 801b23e:	eef0 8a43 	vmov.f32	s17, s6
 801b242:	eeb0 8a63 	vmov.f32	s16, s7
 801b246:	f000 f9e1 	bl	801b60c <nema_mat3x3_quad_to_rect>
 801b24a:	b120      	cbz	r0, 801b256 <nema_blit_quad_fit+0x42>
 801b24c:	b00e      	add	sp, #56	; 0x38
 801b24e:	ecbd 8b08 	vpop	{d8-d11}
 801b252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b256:	a805      	add	r0, sp, #20
 801b258:	f000 fb94 	bl	801b984 <nema_set_matrix>
 801b25c:	eeb0 0a6b 	vmov.f32	s0, s23
 801b260:	f000 f8c0 	bl	801b3e4 <nema_f2fx>
 801b264:	eeb0 0a4b 	vmov.f32	s0, s22
 801b268:	4604      	mov	r4, r0
 801b26a:	f000 f8bb 	bl	801b3e4 <nema_f2fx>
 801b26e:	eeb0 0a6a 	vmov.f32	s0, s21
 801b272:	4605      	mov	r5, r0
 801b274:	f000 f8b6 	bl	801b3e4 <nema_f2fx>
 801b278:	eeb0 0a4a 	vmov.f32	s0, s20
 801b27c:	4606      	mov	r6, r0
 801b27e:	f000 f8b1 	bl	801b3e4 <nema_f2fx>
 801b282:	eeb0 0a69 	vmov.f32	s0, s19
 801b286:	4607      	mov	r7, r0
 801b288:	f000 f8ac 	bl	801b3e4 <nema_f2fx>
 801b28c:	eeb0 0a49 	vmov.f32	s0, s18
 801b290:	4682      	mov	sl, r0
 801b292:	f000 f8a7 	bl	801b3e4 <nema_f2fx>
 801b296:	eeb0 0a68 	vmov.f32	s0, s17
 801b29a:	4680      	mov	r8, r0
 801b29c:	f000 f8a2 	bl	801b3e4 <nema_f2fx>
 801b2a0:	eeb0 0a48 	vmov.f32	s0, s16
 801b2a4:	4681      	mov	r9, r0
 801b2a6:	f000 f89d 	bl	801b3e4 <nema_f2fx>
 801b2aa:	f8cd a000 	str.w	sl, [sp]
 801b2ae:	e9cd 9002 	strd	r9, r0, [sp, #8]
 801b2b2:	f8cd 8004 	str.w	r8, [sp, #4]
 801b2b6:	463b      	mov	r3, r7
 801b2b8:	4632      	mov	r2, r6
 801b2ba:	4629      	mov	r1, r5
 801b2bc:	4620      	mov	r0, r4
 801b2be:	f000 fced 	bl	801bc9c <nema_raster_quad_fx>
 801b2c2:	b00e      	add	sp, #56	; 0x38
 801b2c4:	ecbd 8b08 	vpop	{d8-d11}
 801b2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2cc:	20198594 	.word	0x20198594

0801b2d0 <nema_interpolate_tx_ty>:
 801b2d0:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 801b2d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2d8:	d407      	bmi.n	801b2ea <nema_interpolate_tx_ty+0x1a>
 801b2da:	eddf 7a40 	vldr	s15, [pc, #256]	; 801b3dc <nema_interpolate_tx_ty+0x10c>
 801b2de:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801b2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2e6:	d807      	bhi.n	801b2f8 <nema_interpolate_tx_ty+0x28>
 801b2e8:	4770      	bx	lr
 801b2ea:	eddf 7a3d 	vldr	s15, [pc, #244]	; 801b3e0 <nema_interpolate_tx_ty+0x110>
 801b2ee:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801b2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2f6:	daf7      	bge.n	801b2e8 <nema_interpolate_tx_ty+0x18>
 801b2f8:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 801b2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b300:	d45b      	bmi.n	801b3ba <nema_interpolate_tx_ty+0xea>
 801b302:	eddf 7a36 	vldr	s15, [pc, #216]	; 801b3dc <nema_interpolate_tx_ty+0x10c>
 801b306:	eef4 3ae7 	vcmpe.f32	s7, s15
 801b30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b30e:	d9eb      	bls.n	801b2e8 <nema_interpolate_tx_ty+0x18>
 801b310:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801b314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b318:	d457      	bmi.n	801b3ca <nema_interpolate_tx_ty+0xfa>
 801b31a:	eddf 7a30 	vldr	s15, [pc, #192]	; 801b3dc <nema_interpolate_tx_ty+0x10c>
 801b31e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801b322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b326:	d9df      	bls.n	801b2e8 <nema_interpolate_tx_ty+0x18>
 801b328:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b32c:	b570      	push	{r4, r5, r6, lr}
 801b32e:	ee15 3a90 	vmov	r3, s11
 801b332:	ee13 2a10 	vmov	r2, s6
 801b336:	eec7 5a86 	vdiv.f32	s11, s15, s12
 801b33a:	ee87 3a81 	vdiv.f32	s6, s15, s2
 801b33e:	ee15 4a10 	vmov	r4, s10
 801b342:	ee87 5aa3 	vdiv.f32	s10, s15, s7
 801b346:	ee63 1a21 	vmul.f32	s3, s6, s3
 801b34a:	ee23 2a02 	vmul.f32	s4, s6, s4
 801b34e:	ee25 4a04 	vmul.f32	s8, s10, s8
 801b352:	ee65 4a24 	vmul.f32	s9, s10, s9
 801b356:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801b35a:	ee25 7a87 	vmul.f32	s14, s11, s14
 801b35e:	b092      	sub	sp, #72	; 0x48
 801b360:	a809      	add	r0, sp, #36	; 0x24
 801b362:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 801b366:	edcd 2a0a 	vstr	s5, [sp, #40]	; 0x28
 801b36a:	edcd 0a0c 	vstr	s1, [sp, #48]	; 0x30
 801b36e:	920d      	str	r2, [sp, #52]	; 0x34
 801b370:	930e      	str	r3, [sp, #56]	; 0x38
 801b372:	edcd 1a00 	vstr	s3, [sp]
 801b376:	ed8d 2a03 	vstr	s4, [sp, #12]
 801b37a:	ed8d 4a01 	vstr	s8, [sp, #4]
 801b37e:	edcd 4a04 	vstr	s9, [sp, #16]
 801b382:	edcd 6a02 	vstr	s13, [sp, #8]
 801b386:	ed8d 7a05 	vstr	s14, [sp, #20]
 801b38a:	ed8d 3a06 	vstr	s6, [sp, #24]
 801b38e:	ed8d 5a07 	vstr	s10, [sp, #28]
 801b392:	edcd 5a08 	vstr	s11, [sp, #32]
 801b396:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 801b39a:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801b39e:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 801b3a2:	940b      	str	r4, [sp, #44]	; 0x2c
 801b3a4:	f000 f8d2 	bl	801b54c <nema_mat3x3_adj>
 801b3a8:	a909      	add	r1, sp, #36	; 0x24
 801b3aa:	4668      	mov	r0, sp
 801b3ac:	f000 f838 	bl	801b420 <nema_mat3x3_mul>
 801b3b0:	4668      	mov	r0, sp
 801b3b2:	f000 fae7 	bl	801b984 <nema_set_matrix>
 801b3b6:	b012      	add	sp, #72	; 0x48
 801b3b8:	bd70      	pop	{r4, r5, r6, pc}
 801b3ba:	eddf 7a09 	vldr	s15, [pc, #36]	; 801b3e0 <nema_interpolate_tx_ty+0x110>
 801b3be:	eef4 3ae7 	vcmpe.f32	s7, s15
 801b3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3c6:	da8f      	bge.n	801b2e8 <nema_interpolate_tx_ty+0x18>
 801b3c8:	e7a2      	b.n	801b310 <nema_interpolate_tx_ty+0x40>
 801b3ca:	eddf 7a05 	vldr	s15, [pc, #20]	; 801b3e0 <nema_interpolate_tx_ty+0x110>
 801b3ce:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801b3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3d6:	da87      	bge.n	801b2e8 <nema_interpolate_tx_ty+0x18>
 801b3d8:	e7a6      	b.n	801b328 <nema_interpolate_tx_ty+0x58>
 801b3da:	bf00      	nop
 801b3dc:	3727c5ac 	.word	0x3727c5ac
 801b3e0:	b727c5ac 	.word	0xb727c5ac

0801b3e4 <nema_f2fx>:
 801b3e4:	eddf 7a06 	vldr	s15, [pc, #24]	; 801b400 <nema_f2fx+0x1c>
 801b3e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801b3ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b3f0:	ee30 0a07 	vadd.f32	s0, s0, s14
 801b3f4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801b3f8:	ee17 0a90 	vmov	r0, s15
 801b3fc:	4770      	bx	lr
 801b3fe:	bf00      	nop
 801b400:	47800000 	.word	0x47800000

0801b404 <nema_mat3x3_load_identity>:
 801b404:	2300      	movs	r3, #0
 801b406:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801b40a:	61c3      	str	r3, [r0, #28]
 801b40c:	6202      	str	r2, [r0, #32]
 801b40e:	6102      	str	r2, [r0, #16]
 801b410:	6002      	str	r2, [r0, #0]
 801b412:	6183      	str	r3, [r0, #24]
 801b414:	6143      	str	r3, [r0, #20]
 801b416:	60c3      	str	r3, [r0, #12]
 801b418:	6083      	str	r3, [r0, #8]
 801b41a:	6043      	str	r3, [r0, #4]
 801b41c:	4770      	bx	lr
 801b41e:	bf00      	nop

0801b420 <nema_mat3x3_mul>:
 801b420:	edd1 4a01 	vldr	s9, [r1, #4]
 801b424:	ed91 0a04 	vldr	s0, [r1, #16]
 801b428:	edd1 0a05 	vldr	s1, [r1, #20]
 801b42c:	ed2d 8b0c 	vpush	{d8-d13}
 801b430:	ed91 6a00 	vldr	s12, [r1]
 801b434:	ed91 4a03 	vldr	s8, [r1, #12]
 801b438:	ed91 aa02 	vldr	s20, [r1, #8]
 801b43c:	edd0 3a03 	vldr	s7, [r0, #12]
 801b440:	ed90 8a04 	vldr	s16, [r0, #16]
 801b444:	ed90 9a00 	vldr	s18, [r0]
 801b448:	edd0 8a01 	vldr	s17, [r0, #4]
 801b44c:	edd0 9a06 	vldr	s19, [r0, #24]
 801b450:	ed90 1a07 	vldr	s2, [r0, #28]
 801b454:	edd1 aa06 	vldr	s21, [r1, #24]
 801b458:	edd1 6a07 	vldr	s13, [r1, #28]
 801b45c:	ed91 7a08 	vldr	s14, [r1, #32]
 801b460:	ed90 5a02 	vldr	s10, [r0, #8]
 801b464:	edd0 5a05 	vldr	s11, [r0, #20]
 801b468:	ee69 da06 	vmul.f32	s27, s18, s12
 801b46c:	ee29 da24 	vmul.f32	s26, s18, s9
 801b470:	ee66 ca23 	vmul.f32	s25, s12, s7
 801b474:	ee24 caa3 	vmul.f32	s24, s9, s7
 801b478:	ee68 1a84 	vmul.f32	s3, s17, s8
 801b47c:	ee29 9a0a 	vmul.f32	s18, s18, s20
 801b480:	ee28 2a80 	vmul.f32	s4, s17, s0
 801b484:	ee26 6a29 	vmul.f32	s12, s12, s19
 801b488:	ee64 2a08 	vmul.f32	s5, s8, s16
 801b48c:	ee6a ba23 	vmul.f32	s23, s20, s7
 801b490:	ee24 baa9 	vmul.f32	s22, s9, s19
 801b494:	ee20 3a08 	vmul.f32	s6, s0, s16
 801b498:	ee60 3a88 	vmul.f32	s7, s1, s16
 801b49c:	ee60 4a01 	vmul.f32	s9, s0, s2
 801b4a0:	ee68 8aa0 	vmul.f32	s17, s17, s1
 801b4a4:	ee24 4a01 	vmul.f32	s8, s8, s2
 801b4a8:	ee6a 7a29 	vmul.f32	s15, s20, s19
 801b4ac:	ee20 1a81 	vmul.f32	s2, s1, s2
 801b4b0:	edd0 0a08 	vldr	s1, [r0, #32]
 801b4b4:	ee25 0a2a 	vmul.f32	s0, s10, s21
 801b4b8:	ee79 8a28 	vadd.f32	s17, s18, s17
 801b4bc:	ee2a 8aa5 	vmul.f32	s16, s21, s11
 801b4c0:	ee25 9a26 	vmul.f32	s18, s10, s13
 801b4c4:	ee7d 1aa1 	vadd.f32	s3, s27, s3
 801b4c8:	ee3d 2a02 	vadd.f32	s4, s26, s4
 801b4cc:	ee7c 2aa2 	vadd.f32	s5, s25, s5
 801b4d0:	ee3c 3a03 	vadd.f32	s6, s24, s6
 801b4d4:	ee7b 3aa3 	vadd.f32	s7, s23, s7
 801b4d8:	ee36 4a04 	vadd.f32	s8, s12, s8
 801b4dc:	ee7b 4a24 	vadd.f32	s9, s22, s9
 801b4e0:	ee77 7a81 	vadd.f32	s15, s15, s2
 801b4e4:	ee25 5a07 	vmul.f32	s10, s10, s14
 801b4e8:	ee26 1aa5 	vmul.f32	s2, s13, s11
 801b4ec:	ee2a 6aa0 	vmul.f32	s12, s21, s1
 801b4f0:	ee67 5a25 	vmul.f32	s11, s14, s11
 801b4f4:	ee66 6aa0 	vmul.f32	s13, s13, s1
 801b4f8:	ee27 7a20 	vmul.f32	s14, s14, s1
 801b4fc:	ee32 2a09 	vadd.f32	s4, s4, s18
 801b500:	ee38 5a85 	vadd.f32	s10, s17, s10
 801b504:	ee72 2a88 	vadd.f32	s5, s5, s16
 801b508:	ee71 1a80 	vadd.f32	s3, s3, s0
 801b50c:	ee33 3a01 	vadd.f32	s6, s6, s2
 801b510:	ee73 5aa5 	vadd.f32	s11, s7, s11
 801b514:	ee34 6a06 	vadd.f32	s12, s8, s12
 801b518:	ee74 6aa6 	vadd.f32	s13, s9, s13
 801b51c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b520:	edc0 1a00 	vstr	s3, [r0]
 801b524:	ed80 2a01 	vstr	s4, [r0, #4]
 801b528:	ed80 5a02 	vstr	s10, [r0, #8]
 801b52c:	edc0 2a03 	vstr	s5, [r0, #12]
 801b530:	ed80 3a04 	vstr	s6, [r0, #16]
 801b534:	edc0 5a05 	vstr	s11, [r0, #20]
 801b538:	ed80 6a06 	vstr	s12, [r0, #24]
 801b53c:	edc0 6a07 	vstr	s13, [r0, #28]
 801b540:	edc0 7a08 	vstr	s15, [r0, #32]
 801b544:	ecbd 8b0c 	vpop	{d8-d13}
 801b548:	4770      	bx	lr
 801b54a:	bf00      	nop

0801b54c <nema_mat3x3_adj>:
 801b54c:	edd0 3a03 	vldr	s7, [r0, #12]
 801b550:	edd0 4a04 	vldr	s9, [r0, #16]
 801b554:	ed90 6a08 	vldr	s12, [r0, #32]
 801b558:	ed90 5a07 	vldr	s10, [r0, #28]
 801b55c:	ed90 4a05 	vldr	s8, [r0, #20]
 801b560:	edd0 7a00 	vldr	s15, [r0]
 801b564:	edd0 6a02 	vldr	s13, [r0, #8]
 801b568:	edd0 5a01 	vldr	s11, [r0, #4]
 801b56c:	ed90 7a06 	vldr	s14, [r0, #24]
 801b570:	ed2d 8b04 	vpush	{d8-d9}
 801b574:	ee24 1a86 	vmul.f32	s2, s9, s12
 801b578:	ee25 9a04 	vmul.f32	s18, s10, s8
 801b57c:	ee66 8a25 	vmul.f32	s17, s12, s11
 801b580:	ee24 8aa6 	vmul.f32	s16, s9, s13
 801b584:	ee65 1a26 	vmul.f32	s3, s10, s13
 801b588:	ee24 2a25 	vmul.f32	s4, s8, s11
 801b58c:	ee64 2a07 	vmul.f32	s5, s8, s14
 801b590:	ee66 0a87 	vmul.f32	s1, s13, s14
 801b594:	ee25 3a23 	vmul.f32	s6, s10, s7
 801b598:	ee24 4a27 	vmul.f32	s8, s8, s15
 801b59c:	ee26 0a23 	vmul.f32	s0, s12, s7
 801b5a0:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801b5a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 801b5a8:	ee25 5a27 	vmul.f32	s10, s10, s15
 801b5ac:	ee64 7aa7 	vmul.f32	s15, s9, s15
 801b5b0:	ee64 4a87 	vmul.f32	s9, s9, s14
 801b5b4:	ee25 7a87 	vmul.f32	s14, s11, s14
 801b5b8:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801b5bc:	ee31 1a49 	vsub.f32	s2, s2, s18
 801b5c0:	ee71 1ae8 	vsub.f32	s3, s3, s17
 801b5c4:	ee32 2a48 	vsub.f32	s4, s4, s16
 801b5c8:	ecbd 8b04 	vpop	{d8-d9}
 801b5cc:	ee72 3ac0 	vsub.f32	s7, s5, s0
 801b5d0:	ee36 6a60 	vsub.f32	s12, s12, s1
 801b5d4:	ee76 6ac4 	vsub.f32	s13, s13, s8
 801b5d8:	ee73 4a64 	vsub.f32	s9, s6, s9
 801b5dc:	ee37 7a45 	vsub.f32	s14, s14, s10
 801b5e0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801b5e4:	ed80 1a00 	vstr	s2, [r0]
 801b5e8:	edc0 1a01 	vstr	s3, [r0, #4]
 801b5ec:	ed80 2a02 	vstr	s4, [r0, #8]
 801b5f0:	edc0 3a03 	vstr	s7, [r0, #12]
 801b5f4:	ed80 6a04 	vstr	s12, [r0, #16]
 801b5f8:	edc0 6a05 	vstr	s13, [r0, #20]
 801b5fc:	edc0 4a06 	vstr	s9, [r0, #24]
 801b600:	ed80 7a07 	vstr	s14, [r0, #28]
 801b604:	edc0 7a08 	vstr	s15, [r0, #32]
 801b608:	4770      	bx	lr
 801b60a:	bf00      	nop

0801b60c <nema_mat3x3_quad_to_rect>:
 801b60c:	ee70 6a41 	vsub.f32	s13, s0, s2
 801b610:	ee76 6a82 	vadd.f32	s13, s13, s4
 801b614:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801b618:	ee30 6ae1 	vsub.f32	s12, s1, s3
 801b61c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801b620:	ee36 6a22 	vadd.f32	s12, s12, s5
 801b624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b628:	ed2d 8b06 	vpush	{d8-d10}
 801b62c:	ee36 6a63 	vsub.f32	s12, s12, s7
 801b630:	ee09 0a10 	vmov	s18, r0
 801b634:	ee08 1a90 	vmov	s17, r1
 801b638:	f100 812e 	bmi.w	801b898 <nema_mat3x3_quad_to_rect+0x28c>
 801b63c:	eddf 7aa4 	vldr	s15, [pc, #656]	; 801b8d0 <nema_mat3x3_quad_to_rect+0x2c4>
 801b640:	eef4 6ae7 	vcmpe.f32	s13, s15
 801b644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b648:	d80d      	bhi.n	801b666 <nema_mat3x3_quad_to_rect+0x5a>
 801b64a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801b64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b652:	f100 80f7 	bmi.w	801b844 <nema_mat3x3_quad_to_rect+0x238>
 801b656:	eddf 7a9e 	vldr	s15, [pc, #632]	; 801b8d0 <nema_mat3x3_quad_to_rect+0x2c4>
 801b65a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801b65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b662:	f240 80f7 	bls.w	801b854 <nema_mat3x3_quad_to_rect+0x248>
 801b666:	ee31 7a42 	vsub.f32	s14, s2, s4
 801b66a:	ee73 7ae2 	vsub.f32	s15, s7, s5
 801b66e:	ee33 2a42 	vsub.f32	s4, s6, s4
 801b672:	ee71 2ae2 	vsub.f32	s5, s3, s5
 801b676:	ee67 5a27 	vmul.f32	s11, s14, s15
 801b67a:	ee22 5a22 	vmul.f32	s10, s4, s5
 801b67e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801b682:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b68a:	ee26 7a07 	vmul.f32	s14, s12, s14
 801b68e:	ee66 6aa2 	vmul.f32	s13, s13, s5
 801b692:	ee26 6a02 	vmul.f32	s12, s12, s4
 801b696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b69a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801b69e:	ee77 6a66 	vsub.f32	s13, s14, s13
 801b6a2:	f100 80c5 	bmi.w	801b830 <nema_mat3x3_quad_to_rect+0x224>
 801b6a6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801b8d0 <nema_mat3x3_quad_to_rect+0x2c4>
 801b6aa:	eef4 5ac7 	vcmpe.f32	s11, s14
 801b6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6b2:	bf94      	ite	ls
 801b6b4:	2301      	movls	r3, #1
 801b6b6:	2300      	movhi	r3, #0
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	f040 8106 	bne.w	801b8ca <nema_mat3x3_quad_to_rect+0x2be>
 801b6be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b6c2:	ee87 6a25 	vdiv.f32	s12, s14, s11
 801b6c6:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b6ca:	ee66 6a86 	vmul.f32	s13, s13, s12
 801b6ce:	ee21 5a27 	vmul.f32	s10, s2, s15
 801b6d2:	ee61 5aa7 	vmul.f32	s11, s3, s15
 801b6d6:	ee63 2aa6 	vmul.f32	s5, s7, s13
 801b6da:	ee31 1a40 	vsub.f32	s2, s2, s0
 801b6de:	ee23 6a26 	vmul.f32	s12, s6, s13
 801b6e2:	ee33 2a40 	vsub.f32	s4, s6, s0
 801b6e6:	ee71 1ae0 	vsub.f32	s3, s3, s1
 801b6ea:	ee73 3ae0 	vsub.f32	s7, s7, s1
 801b6ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b6f2:	ee32 2a06 	vadd.f32	s4, s4, s12
 801b6f6:	ee71 1aa5 	vadd.f32	s3, s3, s11
 801b6fa:	ee73 2aa2 	vadd.f32	s5, s7, s5
 801b6fe:	ed82 0a02 	vstr	s0, [r2, #8]
 801b702:	edc2 0a05 	vstr	s1, [r2, #20]
 801b706:	edc2 7a06 	vstr	s15, [r2, #24]
 801b70a:	edc2 6a07 	vstr	s13, [r2, #28]
 801b70e:	ed82 7a08 	vstr	s14, [r2, #32]
 801b712:	ed82 1a00 	vstr	s2, [r2]
 801b716:	ed82 2a01 	vstr	s4, [r2, #4]
 801b71a:	edc2 1a03 	vstr	s3, [r2, #12]
 801b71e:	edc2 2a04 	vstr	s5, [r2, #16]
 801b722:	ee20 4aa6 	vmul.f32	s8, s1, s13
 801b726:	ee60 5aa7 	vmul.f32	s11, s1, s15
 801b72a:	ee32 3ac4 	vsub.f32	s6, s5, s8
 801b72e:	ee31 7ae5 	vsub.f32	s14, s3, s11
 801b732:	ee21 8aa6 	vmul.f32	s16, s3, s13
 801b736:	ee22 6aa7 	vmul.f32	s12, s5, s15
 801b73a:	ee27 7a02 	vmul.f32	s14, s14, s4
 801b73e:	ee23 4a01 	vmul.f32	s8, s6, s2
 801b742:	ee38 8a46 	vsub.f32	s16, s16, s12
 801b746:	ee34 4a47 	vsub.f32	s8, s8, s14
 801b74a:	ee20 7a08 	vmul.f32	s14, s0, s16
 801b74e:	ee34 4a07 	vadd.f32	s8, s8, s14
 801b752:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 801b756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b75a:	f100 80ac 	bmi.w	801b8b6 <nema_mat3x3_quad_to_rect+0x2aa>
 801b75e:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 801b8d0 <nema_mat3x3_quad_to_rect+0x2c4>
 801b762:	eeb4 4ac7 	vcmpe.f32	s8, s14
 801b766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b76a:	bf94      	ite	ls
 801b76c:	2001      	movls	r0, #1
 801b76e:	2000      	movhi	r0, #0
 801b770:	2800      	cmp	r0, #0
 801b772:	f040 80aa 	bne.w	801b8ca <nema_mat3x3_quad_to_rect+0x2be>
 801b776:	ee20 5a82 	vmul.f32	s10, s1, s4
 801b77a:	ee60 4a26 	vmul.f32	s9, s0, s13
 801b77e:	ee20 6a27 	vmul.f32	s12, s0, s15
 801b782:	ee60 9a22 	vmul.f32	s19, s0, s5
 801b786:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 801b78a:	ee60 0a81 	vmul.f32	s1, s1, s2
 801b78e:	ee20 7a21 	vmul.f32	s14, s0, s3
 801b792:	eeca 3a04 	vdiv.f32	s7, s20, s8
 801b796:	ee74 4ac2 	vsub.f32	s9, s9, s4
 801b79a:	ee61 6a26 	vmul.f32	s13, s2, s13
 801b79e:	ee67 7a82 	vmul.f32	s15, s15, s4
 801b7a2:	ee35 5a69 	vsub.f32	s10, s10, s19
 801b7a6:	ee75 5ae1 	vsub.f32	s11, s11, s3
 801b7aa:	ee31 6a46 	vsub.f32	s12, s2, s12
 801b7ae:	ee62 2a81 	vmul.f32	s5, s5, s2
 801b7b2:	ee37 7a60 	vsub.f32	s14, s14, s1
 801b7b6:	ee21 2a82 	vmul.f32	s4, s3, s4
 801b7ba:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801b7be:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801b7c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b7c6:	ee23 4a23 	vmul.f32	s8, s6, s7
 801b7ca:	ee65 6a23 	vmul.f32	s13, s10, s7
 801b7ce:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801b7d2:	ee64 4aa3 	vmul.f32	s9, s9, s7
 801b7d6:	ee26 6a23 	vmul.f32	s12, s12, s7
 801b7da:	ee27 7a23 	vmul.f32	s14, s14, s7
 801b7de:	ee72 2ac2 	vsub.f32	s5, s5, s4
 801b7e2:	ee24 4a09 	vmul.f32	s8, s8, s18
 801b7e6:	ee65 5aa8 	vmul.f32	s11, s11, s17
 801b7ea:	ee28 8a23 	vmul.f32	s16, s16, s7
 801b7ee:	ee24 5a89 	vmul.f32	s10, s9, s18
 801b7f2:	ee26 6a28 	vmul.f32	s12, s12, s17
 801b7f6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801b7fa:	ee66 6a89 	vmul.f32	s13, s13, s18
 801b7fe:	ee27 7a28 	vmul.f32	s14, s14, s17
 801b802:	ee62 2aa3 	vmul.f32	s5, s5, s7
 801b806:	ed82 4a00 	vstr	s8, [r2]
 801b80a:	edc2 5a03 	vstr	s11, [r2, #12]
 801b80e:	ed82 8a06 	vstr	s16, [r2, #24]
 801b812:	ed82 5a01 	vstr	s10, [r2, #4]
 801b816:	ed82 6a04 	vstr	s12, [r2, #16]
 801b81a:	edc2 7a07 	vstr	s15, [r2, #28]
 801b81e:	edc2 6a02 	vstr	s13, [r2, #8]
 801b822:	ed82 7a05 	vstr	s14, [r2, #20]
 801b826:	edc2 2a08 	vstr	s5, [r2, #32]
 801b82a:	ecbd 8b06 	vpop	{d8-d10}
 801b82e:	4770      	bx	lr
 801b830:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801b8d4 <nema_mat3x3_quad_to_rect+0x2c8>
 801b834:	eef4 5ac7 	vcmpe.f32	s11, s14
 801b838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b83c:	bfac      	ite	ge
 801b83e:	2301      	movge	r3, #1
 801b840:	2300      	movlt	r3, #0
 801b842:	e739      	b.n	801b6b8 <nema_mat3x3_quad_to_rect+0xac>
 801b844:	eddf 7a23 	vldr	s15, [pc, #140]	; 801b8d4 <nema_mat3x3_quad_to_rect+0x2c8>
 801b848:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801b84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b850:	f6ff af09 	blt.w	801b666 <nema_mat3x3_quad_to_rect+0x5a>
 801b854:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801b8d8 <nema_mat3x3_quad_to_rect+0x2cc>
 801b858:	ee32 2a41 	vsub.f32	s4, s4, s2
 801b85c:	ee72 2ae1 	vsub.f32	s5, s5, s3
 801b860:	ee31 1a40 	vsub.f32	s2, s2, s0
 801b864:	ee71 1ae0 	vsub.f32	s3, s3, s1
 801b868:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801b86c:	eef0 7a47 	vmov.f32	s15, s14
 801b870:	ed82 2a01 	vstr	s4, [r2, #4]
 801b874:	ed82 1a00 	vstr	s2, [r2]
 801b878:	edc2 2a04 	vstr	s5, [r2, #16]
 801b87c:	edc2 1a03 	vstr	s3, [r2, #12]
 801b880:	ed82 0a02 	vstr	s0, [r2, #8]
 801b884:	edc2 0a05 	vstr	s1, [r2, #20]
 801b888:	ed82 7a06 	vstr	s14, [r2, #24]
 801b88c:	ed82 7a07 	vstr	s14, [r2, #28]
 801b890:	eef0 6a47 	vmov.f32	s13, s14
 801b894:	6213      	str	r3, [r2, #32]
 801b896:	e744      	b.n	801b722 <nema_mat3x3_quad_to_rect+0x116>
 801b898:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801b8d4 <nema_mat3x3_quad_to_rect+0x2c8>
 801b89c:	eef4 6ae7 	vcmpe.f32	s13, s15
 801b8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8a4:	f6ff aedf 	blt.w	801b666 <nema_mat3x3_quad_to_rect+0x5a>
 801b8a8:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801b8ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8b0:	f57f aed1 	bpl.w	801b656 <nema_mat3x3_quad_to_rect+0x4a>
 801b8b4:	e7c6      	b.n	801b844 <nema_mat3x3_quad_to_rect+0x238>
 801b8b6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 801b8d4 <nema_mat3x3_quad_to_rect+0x2c8>
 801b8ba:	eeb4 4ac7 	vcmpe.f32	s8, s14
 801b8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8c2:	bfac      	ite	ge
 801b8c4:	2001      	movge	r0, #1
 801b8c6:	2000      	movlt	r0, #0
 801b8c8:	e752      	b.n	801b770 <nema_mat3x3_quad_to_rect+0x164>
 801b8ca:	f04f 30ff 	mov.w	r0, #4294967295
 801b8ce:	e7ac      	b.n	801b82a <nema_mat3x3_quad_to_rect+0x21e>
 801b8d0:	3727c5ac 	.word	0x3727c5ac
 801b8d4:	b727c5ac 	.word	0xb727c5ac
 801b8d8:	00000000 	.word	0x00000000

0801b8dc <nema_readHwConfig>:
 801b8dc:	b510      	push	{r4, lr}
 801b8de:	4c05      	ldr	r4, [pc, #20]	; (801b8f4 <nema_readHwConfig+0x18>)
 801b8e0:	6820      	ldr	r0, [r4, #0]
 801b8e2:	b100      	cbz	r0, 801b8e6 <nema_readHwConfig+0xa>
 801b8e4:	bd10      	pop	{r4, pc}
 801b8e6:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 801b8ea:	f7e7 f96f 	bl	8002bcc <nema_reg_read>
 801b8ee:	6020      	str	r0, [r4, #0]
 801b8f0:	bd10      	pop	{r4, pc}
 801b8f2:	bf00      	nop
 801b8f4:	201981f8 	.word	0x201981f8

0801b8f8 <nema_readHwConfigH>:
 801b8f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801b8fc:	f7e7 b966 	b.w	8002bcc <nema_reg_read>

0801b900 <nema_enable_tiling>:
 801b900:	2800      	cmp	r0, #0
 801b902:	bf14      	ite	ne
 801b904:	f04f 4080 	movne.w	r0, #1073741824	; 0x40000000
 801b908:	2000      	moveq	r0, #0
 801b90a:	b410      	push	{r4}
 801b90c:	4a05      	ldr	r2, [pc, #20]	; (801b924 <nema_enable_tiling+0x24>)
 801b90e:	6951      	ldr	r1, [r2, #20]
 801b910:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
 801b914:	4323      	orrs	r3, r4
 801b916:	430b      	orrs	r3, r1
 801b918:	4303      	orrs	r3, r0
 801b91a:	6050      	str	r0, [r2, #4]
 801b91c:	6113      	str	r3, [r2, #16]
 801b91e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b922:	4770      	bx	lr
 801b924:	20198594 	.word	0x20198594

0801b928 <nema_enable_aa>:
 801b928:	2800      	cmp	r0, #0
 801b92a:	b410      	push	{r4}
 801b92c:	bf19      	ittee	ne
 801b92e:	f04f 6080 	movne.w	r0, #67108864	; 0x4000000
 801b932:	f04f 64c0 	movne.w	r4, #100663296	; 0x6000000
 801b936:	f04f 7400 	moveq.w	r4, #33554432	; 0x2000000
 801b93a:	2000      	moveq	r0, #0
 801b93c:	2900      	cmp	r1, #0
 801b93e:	bf08      	it	eq
 801b940:	4604      	moveq	r4, r0
 801b942:	b10a      	cbz	r2, 801b948 <nema_enable_aa+0x20>
 801b944:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 801b948:	b10b      	cbz	r3, 801b94e <nema_enable_aa+0x26>
 801b94a:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 801b94e:	4a06      	ldr	r2, [pc, #24]	; (801b968 <nema_enable_aa+0x40>)
 801b950:	6853      	ldr	r3, [r2, #4]
 801b952:	e9d2 1002 	ldrd	r1, r0, [r2, #8]
 801b956:	4303      	orrs	r3, r0
 801b958:	430b      	orrs	r3, r1
 801b95a:	4323      	orrs	r3, r4
 801b95c:	6950      	ldr	r0, [r2, #20]
 801b95e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 801b962:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b966:	4770      	bx	lr
 801b968:	20198594 	.word	0x20198594

0801b96c <nema_matmul_bypass>:
 801b96c:	b920      	cbnz	r0, 801b978 <nema_matmul_bypass+0xc>
 801b96e:	4601      	mov	r1, r0
 801b970:	f44f 708c 	mov.w	r0, #280	; 0x118
 801b974:	f000 be84 	b.w	801c680 <nema_cl_add_cmd>
 801b978:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
 801b97c:	f44f 708c 	mov.w	r0, #280	; 0x118
 801b980:	f000 be7e 	b.w	801c680 <nema_cl_add_cmd>

0801b984 <nema_set_matrix>:
 801b984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b988:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801baf0 <nema_set_matrix+0x16c>
 801b98c:	edd0 7a06 	vldr	s15, [r0, #24]
 801b990:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b998:	4604      	mov	r4, r0
 801b99a:	d506      	bpl.n	801b9aa <nema_set_matrix+0x26>
 801b99c:	eddf 6a55 	vldr	s13, [pc, #340]	; 801baf4 <nema_set_matrix+0x170>
 801b9a0:	eef4 7ae6 	vcmpe.f32	s15, s13
 801b9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9a8:	dc47      	bgt.n	801ba3a <nema_set_matrix+0xb6>
 801b9aa:	2009      	movs	r0, #9
 801b9ac:	f000 fe0a 	bl	801c5c4 <nema_cl_get_space>
 801b9b0:	2800      	cmp	r0, #0
 801b9b2:	d040      	beq.n	801ba36 <nema_set_matrix+0xb2>
 801b9b4:	f44f 73ba 	mov.w	r3, #372	; 0x174
 801b9b8:	6003      	str	r3, [r0, #0]
 801b9ba:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801b9be:	6962      	ldr	r2, [r4, #20]
 801b9c0:	6083      	str	r3, [r0, #8]
 801b9c2:	f44f 73bc 	mov.w	r3, #376	; 0x178
 801b9c6:	6042      	str	r2, [r0, #4]
 801b9c8:	68a2      	ldr	r2, [r4, #8]
 801b9ca:	6103      	str	r3, [r0, #16]
 801b9cc:	f44f 73be 	mov.w	r3, #380	; 0x17c
 801b9d0:	60c2      	str	r2, [r0, #12]
 801b9d2:	69a2      	ldr	r2, [r4, #24]
 801b9d4:	6183      	str	r3, [r0, #24]
 801b9d6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801b9da:	6142      	str	r2, [r0, #20]
 801b9dc:	69e2      	ldr	r2, [r4, #28]
 801b9de:	6203      	str	r3, [r0, #32]
 801b9e0:	61c2      	str	r2, [r0, #28]
 801b9e2:	6a23      	ldr	r3, [r4, #32]
 801b9e4:	2544      	movs	r5, #68	; 0x44
 801b9e6:	6243      	str	r3, [r0, #36]	; 0x24
 801b9e8:	2640      	movs	r6, #64	; 0x40
 801b9ea:	233c      	movs	r3, #60	; 0x3c
 801b9ec:	2738      	movs	r7, #56	; 0x38
 801b9ee:	2234      	movs	r2, #52	; 0x34
 801b9f0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801b9f4:	212c      	movs	r1, #44	; 0x2c
 801b9f6:	f04f 0e28 	mov.w	lr, #40	; 0x28
 801b9fa:	f44f 78b0 	mov.w	r8, #352	; 0x160
 801b9fe:	f840 800e 	str.w	r8, [r0, lr]
 801ba02:	f44f 7eb2 	mov.w	lr, #356	; 0x164
 801ba06:	f8d4 8000 	ldr.w	r8, [r4]
 801ba0a:	4401      	add	r1, r0
 801ba0c:	f8c1 8000 	str.w	r8, [r1]
 801ba10:	f840 e00c 	str.w	lr, [r0, ip]
 801ba14:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 801ba18:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801ba1c:	4402      	add	r2, r0
 801ba1e:	f8c2 c000 	str.w	ip, [r2]
 801ba22:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801ba26:	51c1      	str	r1, [r0, r7]
 801ba28:	68e1      	ldr	r1, [r4, #12]
 801ba2a:	4403      	add	r3, r0
 801ba2c:	6019      	str	r1, [r3, #0]
 801ba2e:	5182      	str	r2, [r0, r6]
 801ba30:	6923      	ldr	r3, [r4, #16]
 801ba32:	4428      	add	r0, r5
 801ba34:	6003      	str	r3, [r0, #0]
 801ba36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba3a:	ed90 6a07 	vldr	s12, [r0, #28]
 801ba3e:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801ba42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba46:	d5b0      	bpl.n	801b9aa <nema_set_matrix+0x26>
 801ba48:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801ba4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba50:	ddab      	ble.n	801b9aa <nema_set_matrix+0x26>
 801ba52:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801ba56:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801ba5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ba5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba62:	d43f      	bmi.n	801bae4 <nema_set_matrix+0x160>
 801ba64:	edd4 7a08 	vldr	s15, [r4, #32]
 801ba68:	ed94 5a00 	vldr	s10, [r4]
 801ba6c:	edd4 5a01 	vldr	s11, [r4, #4]
 801ba70:	ed94 6a02 	vldr	s12, [r4, #8]
 801ba74:	edd4 6a03 	vldr	s13, [r4, #12]
 801ba78:	ed94 7a04 	vldr	s14, [r4, #16]
 801ba7c:	ed94 4a05 	vldr	s8, [r4, #20]
 801ba80:	eec5 4a27 	vdiv.f32	s9, s10, s15
 801ba84:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 801ba88:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801ba8c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801ba90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801ba94:	ee84 7a27 	vdiv.f32	s14, s8, s15
 801ba98:	edc4 4a00 	vstr	s9, [r4]
 801ba9c:	ed84 5a01 	vstr	s10, [r4, #4]
 801baa0:	edc4 5a02 	vstr	s11, [r4, #8]
 801baa4:	ed84 6a03 	vstr	s12, [r4, #12]
 801baa8:	edc4 6a04 	vstr	s13, [r4, #16]
 801baac:	ed84 7a05 	vstr	s14, [r4, #20]
 801bab0:	2006      	movs	r0, #6
 801bab2:	f000 fd87 	bl	801c5c4 <nema_cl_get_space>
 801bab6:	2800      	cmp	r0, #0
 801bab8:	d0bd      	beq.n	801ba36 <nema_set_matrix+0xb2>
 801baba:	f44f 73ba 	mov.w	r3, #372	; 0x174
 801babe:	6003      	str	r3, [r0, #0]
 801bac0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801bac4:	6962      	ldr	r2, [r4, #20]
 801bac6:	6083      	str	r3, [r0, #8]
 801bac8:	6042      	str	r2, [r0, #4]
 801baca:	68a3      	ldr	r3, [r4, #8]
 801bacc:	252c      	movs	r5, #44	; 0x2c
 801bace:	60c3      	str	r3, [r0, #12]
 801bad0:	2628      	movs	r6, #40	; 0x28
 801bad2:	2324      	movs	r3, #36	; 0x24
 801bad4:	2720      	movs	r7, #32
 801bad6:	221c      	movs	r2, #28
 801bad8:	f04f 0c18 	mov.w	ip, #24
 801badc:	2114      	movs	r1, #20
 801bade:	f04f 0e10 	mov.w	lr, #16
 801bae2:	e78a      	b.n	801b9fa <nema_set_matrix+0x76>
 801bae4:	eef4 7ae6 	vcmpe.f32	s15, s13
 801bae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801baec:	dce0      	bgt.n	801bab0 <nema_set_matrix+0x12c>
 801baee:	e7b9      	b.n	801ba64 <nema_set_matrix+0xe0>
 801baf0:	33d6bf95 	.word	0x33d6bf95
 801baf4:	b3d6bf95 	.word	0xb3d6bf95

0801baf8 <nema_set_matrix_translate>:
 801baf8:	b508      	push	{r3, lr}
 801bafa:	2002      	movs	r0, #2
 801bafc:	ed2d 8b02 	vpush	{d8}
 801bb00:	eeb0 8a40 	vmov.f32	s16, s0
 801bb04:	eef0 8a60 	vmov.f32	s17, s1
 801bb08:	f000 fd5c 	bl	801c5c4 <nema_cl_get_space>
 801bb0c:	b1c8      	cbz	r0, 801bb42 <nema_set_matrix_translate+0x4a>
 801bb0e:	eddf 7a13 	vldr	s15, [pc, #76]	; 801bb5c <nema_set_matrix_translate+0x64>
 801bb12:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801bb16:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801bb1a:	eef1 6a68 	vneg.f32	s13, s17
 801bb1e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801bb22:	eeb1 7a48 	vneg.f32	s14, s16
 801bb26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb2a:	6002      	str	r2, [r0, #0]
 801bb2c:	edc0 6a01 	vstr	s13, [r0, #4]
 801bb30:	6083      	str	r3, [r0, #8]
 801bb32:	ed80 7a03 	vstr	s14, [r0, #12]
 801bb36:	dc07      	bgt.n	801bb48 <nema_set_matrix_translate+0x50>
 801bb38:	eef4 8ae7 	vcmpe.f32	s17, s15
 801bb3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb40:	dc02      	bgt.n	801bb48 <nema_set_matrix_translate+0x50>
 801bb42:	ecbd 8b02 	vpop	{d8}
 801bb46:	bd08      	pop	{r3, pc}
 801bb48:	ecbd 8b02 	vpop	{d8}
 801bb4c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801bb50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801bb54:	f44f 708c 	mov.w	r0, #280	; 0x118
 801bb58:	f000 bd92 	b.w	801c680 <nema_cl_add_cmd>
 801bb5c:	45000000 	.word	0x45000000

0801bb60 <nema_load_frag_shader>:
 801bb60:	b570      	push	{r4, r5, r6, lr}
 801bb62:	460e      	mov	r6, r1
 801bb64:	4604      	mov	r4, r0
 801bb66:	4611      	mov	r1, r2
 801bb68:	20c4      	movs	r0, #196	; 0xc4
 801bb6a:	f000 fd89 	bl	801c680 <nema_cl_add_cmd>
 801bb6e:	b186      	cbz	r6, 801bb92 <nema_load_frag_shader+0x32>
 801bb70:	2500      	movs	r5, #0
 801bb72:	3408      	adds	r4, #8
 801bb74:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801bb78:	20c8      	movs	r0, #200	; 0xc8
 801bb7a:	f000 fd81 	bl	801c680 <nema_cl_add_cmd>
 801bb7e:	3501      	adds	r5, #1
 801bb80:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801bb84:	20cc      	movs	r0, #204	; 0xcc
 801bb86:	f000 fd7b 	bl	801c680 <nema_cl_add_cmd>
 801bb8a:	42ae      	cmp	r6, r5
 801bb8c:	f104 0408 	add.w	r4, r4, #8
 801bb90:	d1f0      	bne.n	801bb74 <nema_load_frag_shader+0x14>
 801bb92:	bd70      	pop	{r4, r5, r6, pc}

0801bb94 <nema_set_frag_ptr>:
 801bb94:	4601      	mov	r1, r0
 801bb96:	f44f 708e 	mov.w	r0, #284	; 0x11c
 801bb9a:	f000 bd71 	b.w	801c680 <nema_cl_add_cmd>
 801bb9e:	bf00      	nop

0801bba0 <nema_set_rop_blend_mode>:
 801bba0:	4601      	mov	r1, r0
 801bba2:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
 801bba6:	f000 bd6b 	b.w	801c680 <nema_cl_add_cmd>
 801bbaa:	bf00      	nop

0801bbac <nema_set_rop_const_color>:
 801bbac:	4601      	mov	r1, r0
 801bbae:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 801bbb2:	f000 bd65 	b.w	801c680 <nema_cl_add_cmd>
 801bbb6:	bf00      	nop

0801bbb8 <nema_set_depth_ctrl>:
 801bbb8:	4601      	mov	r1, r0
 801bbba:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 801bbbe:	f000 bd5f 	b.w	801c680 <nema_cl_add_cmd>
 801bbc2:	bf00      	nop

0801bbc4 <nema_set_raster_color>:
 801bbc4:	4601      	mov	r1, r0
 801bbc6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801bbca:	f000 bd59 	b.w	801c680 <nema_cl_add_cmd>
 801bbce:	bf00      	nop

0801bbd0 <nema_raster_triangle_fx>:
 801bbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbd4:	4607      	mov	r7, r0
 801bbd6:	2007      	movs	r0, #7
 801bbd8:	460e      	mov	r6, r1
 801bbda:	4615      	mov	r5, r2
 801bbdc:	461c      	mov	r4, r3
 801bbde:	f000 fcf1 	bl	801c5c4 <nema_cl_get_space>
 801bbe2:	b350      	cbz	r0, 801bc3a <nema_raster_triangle_fx+0x6a>
 801bbe4:	f44f 7398 	mov.w	r3, #304	; 0x130
 801bbe8:	f44f 7292 	mov.w	r2, #292	; 0x124
 801bbec:	f44f 7890 	mov.w	r8, #288	; 0x120
 801bbf0:	f44f 7e9a 	mov.w	lr, #308	; 0x134
 801bbf4:	f44f 7ca0 	mov.w	ip, #320	; 0x140
 801bbf8:	f44f 71a2 	mov.w	r1, #324	; 0x144
 801bbfc:	6103      	str	r3, [r0, #16]
 801bbfe:	4b10      	ldr	r3, [pc, #64]	; (801bc40 <nema_raster_triangle_fx+0x70>)
 801bc00:	6047      	str	r7, [r0, #4]
 801bc02:	60c6      	str	r6, [r0, #12]
 801bc04:	f8c0 8000 	str.w	r8, [r0]
 801bc08:	6082      	str	r2, [r0, #8]
 801bc0a:	691a      	ldr	r2, [r3, #16]
 801bc0c:	4b0d      	ldr	r3, [pc, #52]	; (801bc44 <nema_raster_triangle_fx+0x74>)
 801bc0e:	61c4      	str	r4, [r0, #28]
 801bc10:	9c06      	ldr	r4, [sp, #24]
 801bc12:	6303      	str	r3, [r0, #48]	; 0x30
 801bc14:	01d3      	lsls	r3, r2, #7
 801bc16:	6244      	str	r4, [r0, #36]	; 0x24
 801bc18:	bf48      	it	mi
 801bc1a:	f442 0200 	orrmi.w	r2, r2, #8388608	; 0x800000
 801bc1e:	9c07      	ldr	r4, [sp, #28]
 801bc20:	bf58      	it	pl
 801bc22:	f422 0200 	bicpl.w	r2, r2, #8388608	; 0x800000
 801bc26:	f042 0204 	orr.w	r2, r2, #4
 801bc2a:	6145      	str	r5, [r0, #20]
 801bc2c:	62c4      	str	r4, [r0, #44]	; 0x2c
 801bc2e:	f8c0 e018 	str.w	lr, [r0, #24]
 801bc32:	f8c0 c020 	str.w	ip, [r0, #32]
 801bc36:	6281      	str	r1, [r0, #40]	; 0x28
 801bc38:	6342      	str	r2, [r0, #52]	; 0x34
 801bc3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc3e:	bf00      	nop
 801bc40:	20198594 	.word	0x20198594
 801bc44:	ff000100 	.word	0xff000100

0801bc48 <nema_raster_rect>:
 801bc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc4a:	1e17      	subs	r7, r2, #0
 801bc4c:	dd20      	ble.n	801bc90 <nema_raster_rect+0x48>
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	dd1e      	ble.n	801bc90 <nema_raster_rect+0x48>
 801bc52:	4604      	mov	r4, r0
 801bc54:	2003      	movs	r0, #3
 801bc56:	461d      	mov	r5, r3
 801bc58:	460e      	mov	r6, r1
 801bc5a:	f000 fcb3 	bl	801c5c4 <nema_cl_get_space>
 801bc5e:	b1b8      	cbz	r0, 801bc90 <nema_raster_rect+0x48>
 801bc60:	f44f 7c82 	mov.w	ip, #260	; 0x104
 801bc64:	f44f 7184 	mov.w	r1, #264	; 0x108
 801bc68:	193a      	adds	r2, r7, r4
 801bc6a:	b292      	uxth	r2, r2
 801bc6c:	19ab      	adds	r3, r5, r6
 801bc6e:	b2a4      	uxth	r4, r4
 801bc70:	4d08      	ldr	r5, [pc, #32]	; (801bc94 <nema_raster_rect+0x4c>)
 801bc72:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 801bc76:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 801bc7a:	4a07      	ldr	r2, [pc, #28]	; (801bc98 <nema_raster_rect+0x50>)
 801bc7c:	6044      	str	r4, [r0, #4]
 801bc7e:	60c3      	str	r3, [r0, #12]
 801bc80:	f8c0 c000 	str.w	ip, [r0]
 801bc84:	6081      	str	r1, [r0, #8]
 801bc86:	6105      	str	r5, [r0, #16]
 801bc88:	6913      	ldr	r3, [r2, #16]
 801bc8a:	f043 0302 	orr.w	r3, r3, #2
 801bc8e:	6143      	str	r3, [r0, #20]
 801bc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc92:	bf00      	nop
 801bc94:	ff000100 	.word	0xff000100
 801bc98:	20198594 	.word	0x20198594

0801bc9c <nema_raster_quad_fx>:
 801bc9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bca0:	4607      	mov	r7, r0
 801bca2:	2009      	movs	r0, #9
 801bca4:	460e      	mov	r6, r1
 801bca6:	4615      	mov	r5, r2
 801bca8:	461c      	mov	r4, r3
 801bcaa:	f000 fc8b 	bl	801c5c4 <nema_cl_get_space>
 801bcae:	2800      	cmp	r0, #0
 801bcb0:	d02f      	beq.n	801bd12 <nema_raster_quad_fx+0x76>
 801bcb2:	f44f 7398 	mov.w	r3, #304	; 0x130
 801bcb6:	f44f 7292 	mov.w	r2, #292	; 0x124
 801bcba:	f44f 7a90 	mov.w	sl, #288	; 0x120
 801bcbe:	f44f 799a 	mov.w	r9, #308	; 0x134
 801bcc2:	f44f 78a0 	mov.w	r8, #320	; 0x140
 801bcc6:	f44f 7ea2 	mov.w	lr, #324	; 0x144
 801bcca:	f44f 7ca8 	mov.w	ip, #336	; 0x150
 801bcce:	f44f 71aa 	mov.w	r1, #340	; 0x154
 801bcd2:	6103      	str	r3, [r0, #16]
 801bcd4:	4b10      	ldr	r3, [pc, #64]	; (801bd18 <nema_raster_quad_fx+0x7c>)
 801bcd6:	6047      	str	r7, [r0, #4]
 801bcd8:	60c6      	str	r6, [r0, #12]
 801bcda:	f8c0 a000 	str.w	sl, [r0]
 801bcde:	6082      	str	r2, [r0, #8]
 801bce0:	691a      	ldr	r2, [r3, #16]
 801bce2:	9b08      	ldr	r3, [sp, #32]
 801bce4:	f042 0205 	orr.w	r2, r2, #5
 801bce8:	6243      	str	r3, [r0, #36]	; 0x24
 801bcea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcec:	6145      	str	r5, [r0, #20]
 801bcee:	62c3      	str	r3, [r0, #44]	; 0x2c
 801bcf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcf2:	61c4      	str	r4, [r0, #28]
 801bcf4:	6343      	str	r3, [r0, #52]	; 0x34
 801bcf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bcf8:	6442      	str	r2, [r0, #68]	; 0x44
 801bcfa:	63c3      	str	r3, [r0, #60]	; 0x3c
 801bcfc:	4b07      	ldr	r3, [pc, #28]	; (801bd1c <nema_raster_quad_fx+0x80>)
 801bcfe:	f8c0 9018 	str.w	r9, [r0, #24]
 801bd02:	f8c0 8020 	str.w	r8, [r0, #32]
 801bd06:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
 801bd0a:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
 801bd0e:	6381      	str	r1, [r0, #56]	; 0x38
 801bd10:	6403      	str	r3, [r0, #64]	; 0x40
 801bd12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd16:	bf00      	nop
 801bd18:	20198594 	.word	0x20198594
 801bd1c:	ff000100 	.word	0xff000100

0801bd20 <nema_set_interrupt_ctrl>:
 801bd20:	4601      	mov	r1, r0
 801bd22:	20f8      	movs	r0, #248	; 0xf8
 801bd24:	f000 bcac 	b.w	801c680 <nema_cl_add_cmd>

0801bd28 <nema_vg_init>:
 801bd28:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd2a:	4606      	mov	r6, r0
 801bd2c:	460f      	mov	r7, r1
 801bd2e:	b08f      	sub	sp, #60	; 0x3c
 801bd30:	ac02      	add	r4, sp, #8
 801bd32:	460a      	mov	r2, r1
 801bd34:	2300      	movs	r3, #0
 801bd36:	4601      	mov	r1, r0
 801bd38:	4620      	mov	r0, r4
 801bd3a:	f000 f889 	bl	801be50 <stencil_buffer_create>
 801bd3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801bd42:	ad0a      	add	r5, sp, #40	; 0x28
 801bd44:	ac06      	add	r4, sp, #24
 801bd46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801bd4a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801bd4e:	f000 f827 	bl	801bda0 <context_reset>
 801bd52:	ab0e      	add	r3, sp, #56	; 0x38
 801bd54:	e913 0003 	ldmdb	r3, {r0, r1}
 801bd58:	e895 000c 	ldmia.w	r5, {r2, r3}
 801bd5c:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bd60:	4639      	mov	r1, r7
 801bd62:	4630      	mov	r0, r6
 801bd64:	f000 f888 	bl	801be78 <stencil_buffer_set>
 801bd68:	f000 f8c2 	bl	801bef0 <lut_buffer_create>
 801bd6c:	f000 f94e 	bl	801c00c <tsvg_init>
 801bd70:	4639      	mov	r1, r7
 801bd72:	4630      	mov	r0, r6
 801bd74:	f000 f940 	bl	801bff8 <set_tsvg_text_max_size>
 801bd78:	f000 f866 	bl	801be48 <nema_vg_get_context>
 801bd7c:	4c06      	ldr	r4, [pc, #24]	; (801bd98 <nema_vg_init+0x70>)
 801bd7e:	6020      	str	r0, [r4, #0]
 801bd80:	f000 f8b0 	bl	801bee4 <nema_vg_get_stencil>
 801bd84:	6822      	ldr	r2, [r4, #0]
 801bd86:	4905      	ldr	r1, [pc, #20]	; (801bd9c <nema_vg_init+0x74>)
 801bd88:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801bd8a:	6008      	str	r0, [r1, #0]
 801bd8c:	f043 0320 	orr.w	r3, r3, #32
 801bd90:	6313      	str	r3, [r2, #48]	; 0x30
 801bd92:	b00f      	add	sp, #60	; 0x3c
 801bd94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd96:	bf00      	nop
 801bd98:	201981fc 	.word	0x201981fc
 801bd9c:	20198200 	.word	0x20198200

0801bda0 <context_reset>:
 801bda0:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 801bda4:	4c26      	ldr	r4, [pc, #152]	; (801be40 <context_reset+0xa0>)
 801bda6:	6820      	ldr	r0, [r4, #0]
 801bda8:	b110      	cbz	r0, 801bdb0 <context_reset+0x10>
 801bdaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801bdac:	069b      	lsls	r3, r3, #26
 801bdae:	d440      	bmi.n	801be32 <context_reset+0x92>
 801bdb0:	2300      	movs	r3, #0
 801bdb2:	6962      	ldr	r2, [r4, #20]
 801bdb4:	e9c4 3300 	strd	r3, r3, [r4]
 801bdb8:	60a3      	str	r3, [r4, #8]
 801bdba:	b112      	cbz	r2, 801bdc2 <context_reset+0x22>
 801bdbc:	4821      	ldr	r0, [pc, #132]	; (801be44 <context_reset+0xa4>)
 801bdbe:	f7e6 ffaa 	bl	8002d16 <nema_buffer_destroy>
 801bdc2:	2300      	movs	r3, #0
 801bdc4:	f04f 0800 	mov.w	r8, #0
 801bdc8:	f240 5901 	movw	r9, #1281	; 0x501
 801bdcc:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 801bdd0:	f04f 67f0 	mov.w	r7, #125829120	; 0x7800000
 801bdd4:	2000      	movs	r0, #0
 801bdd6:	2100      	movs	r1, #0
 801bdd8:	6423      	str	r3, [r4, #64]	; 0x40
 801bdda:	6463      	str	r3, [r4, #68]	; 0x44
 801bddc:	64e3      	str	r3, [r4, #76]	; 0x4c
 801bdde:	6723      	str	r3, [r4, #112]	; 0x70
 801bde0:	6523      	str	r3, [r4, #80]	; 0x50
 801bde2:	6763      	str	r3, [r4, #116]	; 0x74
 801bde4:	6563      	str	r3, [r4, #84]	; 0x54
 801bde6:	67a3      	str	r3, [r4, #120]	; 0x78
 801bde8:	65a3      	str	r3, [r4, #88]	; 0x58
 801bdea:	67e3      	str	r3, [r4, #124]	; 0x7c
 801bdec:	65e3      	str	r3, [r4, #92]	; 0x5c
 801bdee:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 801bdf2:	6623      	str	r3, [r4, #96]	; 0x60
 801bdf4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 801bdf8:	6663      	str	r3, [r4, #100]	; 0x64
 801bdfa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801bdfe:	66a3      	str	r3, [r4, #104]	; 0x68
 801be00:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 801be04:	66e3      	str	r3, [r4, #108]	; 0x6c
 801be06:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 801be0a:	2202      	movs	r2, #2
 801be0c:	2300      	movs	r3, #0
 801be0e:	e9c4 8908 	strd	r8, r9, [r4, #32]
 801be12:	e9c4 670a 	strd	r6, r7, [r4, #40]	; 0x28
 801be16:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
 801be1a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 801be1e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 801be22:	77a3      	strb	r3, [r4, #30]
 801be24:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801be28:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801be2c:	83a2      	strh	r2, [r4, #28]
 801be2e:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 801be32:	6883      	ldr	r3, [r0, #8]
 801be34:	2b00      	cmp	r3, #0
 801be36:	d0bb      	beq.n	801bdb0 <context_reset+0x10>
 801be38:	f7e6 ff6d 	bl	8002d16 <nema_buffer_destroy>
 801be3c:	e7b8      	b.n	801bdb0 <context_reset+0x10>
 801be3e:	bf00      	nop
 801be40:	20198208 	.word	0x20198208
 801be44:	20198214 	.word	0x20198214

0801be48 <nema_vg_get_context>:
 801be48:	4800      	ldr	r0, [pc, #0]	; (801be4c <nema_vg_get_context+0x4>)
 801be4a:	4770      	bx	lr
 801be4c:	20198208 	.word	0x20198208

0801be50 <stencil_buffer_create>:
 801be50:	b538      	push	{r3, r4, r5, lr}
 801be52:	4605      	mov	r5, r0
 801be54:	1cc8      	adds	r0, r1, #3
 801be56:	bf48      	it	mi
 801be58:	1d88      	addmi	r0, r1, #6
 801be5a:	1cd4      	adds	r4, r2, #3
 801be5c:	bf48      	it	mi
 801be5e:	1d94      	addmi	r4, r2, #6
 801be60:	1080      	asrs	r0, r0, #2
 801be62:	0080      	lsls	r0, r0, #2
 801be64:	f024 0203 	bic.w	r2, r4, #3
 801be68:	fb02 f200 	mul.w	r2, r2, r0
 801be6c:	4619      	mov	r1, r3
 801be6e:	4628      	mov	r0, r5
 801be70:	f7e6 ff36 	bl	8002ce0 <nema_buffer_create_pool>
 801be74:	4628      	mov	r0, r5
 801be76:	bd38      	pop	{r3, r4, r5, pc}

0801be78 <stencil_buffer_set>:
 801be78:	b082      	sub	sp, #8
 801be7a:	b470      	push	{r4, r5, r6}
 801be7c:	4606      	mov	r6, r0
 801be7e:	460d      	mov	r5, r1
 801be80:	a803      	add	r0, sp, #12
 801be82:	e880 000c 	stmia.w	r0, {r2, r3}
 801be86:	4c15      	ldr	r4, [pc, #84]	; (801bedc <stencil_buffer_set+0x64>)
 801be88:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801be8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801be8e:	1cf3      	adds	r3, r6, #3
 801be90:	bf48      	it	mi
 801be92:	1db3      	addmi	r3, r6, #6
 801be94:	1cea      	adds	r2, r5, #3
 801be96:	bf48      	it	mi
 801be98:	1daa      	addmi	r2, r5, #6
 801be9a:	f022 0203 	bic.w	r2, r2, #3
 801be9e:	ee07 2a90 	vmov	s15, r2
 801bea2:	f023 0303 	bic.w	r3, r3, #3
 801bea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801beaa:	ee07 3a90 	vmov	s15, r3
 801beae:	2100      	movs	r1, #0
 801beb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801beb4:	61a1      	str	r1, [r4, #24]
 801beb6:	61e1      	str	r1, [r4, #28]
 801beb8:	6261      	str	r1, [r4, #36]	; 0x24
 801beba:	6321      	str	r1, [r4, #48]	; 0x30
 801bebc:	4908      	ldr	r1, [pc, #32]	; (801bee0 <stencil_buffer_set+0x68>)
 801bebe:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 801bec2:	600c      	str	r4, [r1, #0]
 801bec4:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801bec8:	edc4 7a08 	vstr	s15, [r4, #32]
 801becc:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 801bed0:	e9c4 3204 	strd	r3, r2, [r4, #16]
 801bed4:	bc70      	pop	{r4, r5, r6}
 801bed6:	b002      	add	sp, #8
 801bed8:	4770      	bx	lr
 801beda:	bf00      	nop
 801bedc:	2019829c 	.word	0x2019829c
 801bee0:	20198208 	.word	0x20198208

0801bee4 <nema_vg_get_stencil>:
 801bee4:	4b01      	ldr	r3, [pc, #4]	; (801beec <nema_vg_get_stencil+0x8>)
 801bee6:	6818      	ldr	r0, [r3, #0]
 801bee8:	4770      	bx	lr
 801beea:	bf00      	nop
 801beec:	20198208 	.word	0x20198208

0801bef0 <lut_buffer_create>:
 801bef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bef2:	4d1a      	ldr	r5, [pc, #104]	; (801bf5c <lut_buffer_create+0x6c>)
 801bef4:	b085      	sub	sp, #20
 801bef6:	69ac      	ldr	r4, [r5, #24]
 801bef8:	b10c      	cbz	r4, 801befe <lut_buffer_create+0xe>
 801befa:	b005      	add	sp, #20
 801befc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801befe:	466e      	mov	r6, sp
 801bf00:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bf04:	4630      	mov	r0, r6
 801bf06:	4621      	mov	r1, r4
 801bf08:	f7e6 feea 	bl	8002ce0 <nema_buffer_create_pool>
 801bf0c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801bf10:	f105 060c 	add.w	r6, r5, #12
 801bf14:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801bf18:	4627      	mov	r7, r4
 801bf1a:	4623      	mov	r3, r4
 801bf1c:	696d      	ldr	r5, [r5, #20]
 801bf1e:	26ff      	movs	r6, #255	; 0xff
 801bf20:	e008      	b.n	801bf34 <lut_buffer_create+0x44>
 801bf22:	2880      	cmp	r0, #128	; 0x80
 801bf24:	f1c4 0100 	rsb	r1, r4, #0
 801bf28:	d016      	beq.n	801bf58 <lut_buffer_create+0x68>
 801bf2a:	bfcc      	ite	gt
 801bf2c:	b2e1      	uxtbgt	r1, r4
 801bf2e:	b2c9      	uxtble	r1, r1
 801bf30:	54a9      	strb	r1, [r5, r2]
 801bf32:	3410      	adds	r4, #16
 801bf34:	ea44 1213 	orr.w	r2, r4, r3, lsr #4
 801bf38:	3301      	adds	r3, #1
 801bf3a:	f1a3 0172 	sub.w	r1, r3, #114	; 0x72
 801bf3e:	291e      	cmp	r1, #30
 801bf40:	f103 30ff 	add.w	r0, r3, #4294967295
 801bf44:	b2d2      	uxtb	r2, r2
 801bf46:	d9ec      	bls.n	801bf22 <lut_buffer_create+0x32>
 801bf48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bf4c:	54ae      	strb	r6, [r5, r2]
 801bf4e:	d1f0      	bne.n	801bf32 <lut_buffer_create+0x42>
 801bf50:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 801bf54:	b005      	add	sp, #20
 801bf56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf58:	54af      	strb	r7, [r5, r2]
 801bf5a:	e7ea      	b.n	801bf32 <lut_buffer_create+0x42>
 801bf5c:	20198208 	.word	0x20198208

0801bf60 <nema_vg_set_error>:
 801bf60:	4b01      	ldr	r3, [pc, #4]	; (801bf68 <nema_vg_set_error+0x8>)
 801bf62:	6218      	str	r0, [r3, #32]
 801bf64:	4770      	bx	lr
 801bf66:	bf00      	nop
 801bf68:	20198208 	.word	0x20198208

0801bf6c <nema_vg_paint_create>:
 801bf6c:	b538      	push	{r3, r4, r5, lr}
 801bf6e:	20e0      	movs	r0, #224	; 0xe0
 801bf70:	f7e6 fe77 	bl	8002c62 <nema_host_malloc>
 801bf74:	4604      	mov	r4, r0
 801bf76:	b1e8      	cbz	r0, 801bfb4 <nema_vg_paint_create+0x48>
 801bf78:	2500      	movs	r5, #0
 801bf7a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801bf7e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 801bf82:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
 801bf86:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 801bf8a:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
 801bf8e:	f880 50dd 	strb.w	r5, [r0, #221]	; 0xdd
 801bf92:	f880 50d0 	strb.w	r5, [r0, #208]	; 0xd0
 801bf96:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
 801bf9a:	e9c0 5500 	strd	r5, r5, [r0]
 801bf9e:	3038      	adds	r0, #56	; 0x38
 801bfa0:	f7ff fa30 	bl	801b404 <nema_mat3x3_load_identity>
 801bfa4:	f104 0008 	add.w	r0, r4, #8
 801bfa8:	f7ff fa2c 	bl	801b404 <nema_mat3x3_load_identity>
 801bfac:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 801bfb0:	4620      	mov	r0, r4
 801bfb2:	bd38      	pop	{r3, r4, r5, pc}
 801bfb4:	2001      	movs	r0, #1
 801bfb6:	f7ff ffd3 	bl	801bf60 <nema_vg_set_error>
 801bfba:	4620      	mov	r0, r4
 801bfbc:	bd38      	pop	{r3, r4, r5, pc}
 801bfbe:	bf00      	nop

0801bfc0 <nema_vg_grad_create>:
 801bfc0:	b530      	push	{r4, r5, lr}
 801bfc2:	2010      	movs	r0, #16
 801bfc4:	b085      	sub	sp, #20
 801bfc6:	f7e6 fe4c 	bl	8002c62 <nema_host_malloc>
 801bfca:	466d      	mov	r5, sp
 801bfcc:	4604      	mov	r4, r0
 801bfce:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bfd2:	4628      	mov	r0, r5
 801bfd4:	2100      	movs	r1, #0
 801bfd6:	f7e6 fe83 	bl	8002ce0 <nema_buffer_create_pool>
 801bfda:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801bfde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801bfe2:	4620      	mov	r0, r4
 801bfe4:	b005      	add	sp, #20
 801bfe6:	bd30      	pop	{r4, r5, pc}

0801bfe8 <nema_vg_path_create>:
 801bfe8:	b508      	push	{r3, lr}
 801bfea:	2088      	movs	r0, #136	; 0x88
 801bfec:	f7e6 fe39 	bl	8002c62 <nema_host_malloc>
 801bff0:	2200      	movs	r2, #0
 801bff2:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 801bff6:	bd08      	pop	{r3, pc}

0801bff8 <set_tsvg_text_max_size>:
 801bff8:	4a02      	ldr	r2, [pc, #8]	; (801c004 <set_tsvg_text_max_size+0xc>)
 801bffa:	4b03      	ldr	r3, [pc, #12]	; (801c008 <set_tsvg_text_max_size+0x10>)
 801bffc:	6010      	str	r0, [r2, #0]
 801bffe:	6019      	str	r1, [r3, #0]
 801c000:	4770      	bx	lr
 801c002:	bf00      	nop
 801c004:	2000005c 	.word	0x2000005c
 801c008:	20000060 	.word	0x20000060

0801c00c <tsvg_init>:
 801c00c:	b508      	push	{r3, lr}
 801c00e:	f7ff ffad 	bl	801bf6c <nema_vg_paint_create>
 801c012:	4b05      	ldr	r3, [pc, #20]	; (801c028 <tsvg_init+0x1c>)
 801c014:	6018      	str	r0, [r3, #0]
 801c016:	f7ff ffe7 	bl	801bfe8 <nema_vg_path_create>
 801c01a:	4b04      	ldr	r3, [pc, #16]	; (801c02c <tsvg_init+0x20>)
 801c01c:	6018      	str	r0, [r3, #0]
 801c01e:	f7ff ffcf 	bl	801bfc0 <nema_vg_grad_create>
 801c022:	4b03      	ldr	r3, [pc, #12]	; (801c030 <tsvg_init+0x24>)
 801c024:	6018      	str	r0, [r3, #0]
 801c026:	bd08      	pop	{r3, pc}
 801c028:	201982d8 	.word	0x201982d8
 801c02c:	201982dc 	.word	0x201982dc
 801c030:	201982d4 	.word	0x201982d4

0801c034 <tsi_malloc_init_pool>:
 801c034:	b4f0      	push	{r4, r5, r6, r7}
 801c036:	2807      	cmp	r0, #7
 801c038:	9e04      	ldr	r6, [sp, #16]
 801c03a:	d81c      	bhi.n	801c076 <tsi_malloc_init_pool+0x42>
 801c03c:	4f0f      	ldr	r7, [pc, #60]	; (801c07c <tsi_malloc_init_pool+0x48>)
 801c03e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801c042:	0084      	lsls	r4, r0, #2
 801c044:	193d      	adds	r5, r7, r4
 801c046:	513a      	str	r2, [r7, r4]
 801c048:	185a      	adds	r2, r3, r1
 801c04a:	60e9      	str	r1, [r5, #12]
 801c04c:	6069      	str	r1, [r5, #4]
 801c04e:	612b      	str	r3, [r5, #16]
 801c050:	60aa      	str	r2, [r5, #8]
 801c052:	b16e      	cbz	r6, 801c070 <tsi_malloc_init_pool+0x3c>
 801c054:	2200      	movs	r2, #0
 801c056:	2010      	movs	r0, #16
 801c058:	4d09      	ldr	r5, [pc, #36]	; (801c080 <tsi_malloc_init_pool+0x4c>)
 801c05a:	180c      	adds	r4, r1, r0
 801c05c:	e9c1 5001 	strd	r5, r0, [r1, #4]
 801c060:	4610      	mov	r0, r2
 801c062:	3b20      	subs	r3, #32
 801c064:	610b      	str	r3, [r1, #16]
 801c066:	600a      	str	r2, [r1, #0]
 801c068:	e9c4 5201 	strd	r5, r2, [r4, #4]
 801c06c:	bcf0      	pop	{r4, r5, r6, r7}
 801c06e:	4770      	bx	lr
 801c070:	4630      	mov	r0, r6
 801c072:	bcf0      	pop	{r4, r5, r6, r7}
 801c074:	4770      	bx	lr
 801c076:	f04f 30ff 	mov.w	r0, #4294967295
 801c07a:	e7f7      	b.n	801c06c <tsi_malloc_init_pool+0x38>
 801c07c:	201982e0 	.word	0x201982e0
 801c080:	000f1fa1 	.word	0x000f1fa1

0801c084 <tsi_malloc_pool>:
 801c084:	2807      	cmp	r0, #7
 801c086:	d832      	bhi.n	801c0ee <tsi_malloc_pool+0x6a>
 801c088:	4b1b      	ldr	r3, [pc, #108]	; (801c0f8 <tsi_malloc_pool+0x74>)
 801c08a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801c08e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801c092:	68c2      	ldr	r2, [r0, #12]
 801c094:	b35a      	cbz	r2, 801c0ee <tsi_malloc_pool+0x6a>
 801c096:	2910      	cmp	r1, #16
 801c098:	bfb8      	it	lt
 801c09a:	2110      	movlt	r1, #16
 801c09c:	b470      	push	{r4, r5, r6}
 801c09e:	310f      	adds	r1, #15
 801c0a0:	6814      	ldr	r4, [r2, #0]
 801c0a2:	f021 010f 	bic.w	r1, r1, #15
 801c0a6:	42a1      	cmp	r1, r4
 801c0a8:	dd23      	ble.n	801c0f2 <tsi_malloc_pool+0x6e>
 801c0aa:	6890      	ldr	r0, [r2, #8]
 801c0ac:	b1d0      	cbz	r0, 801c0e4 <tsi_malloc_pool+0x60>
 801c0ae:	4615      	mov	r5, r2
 801c0b0:	e002      	b.n	801c0b8 <tsi_malloc_pool+0x34>
 801c0b2:	6898      	ldr	r0, [r3, #8]
 801c0b4:	461d      	mov	r5, r3
 801c0b6:	b1a8      	cbz	r0, 801c0e4 <tsi_malloc_pool+0x60>
 801c0b8:	5814      	ldr	r4, [r2, r0]
 801c0ba:	1813      	adds	r3, r2, r0
 801c0bc:	428c      	cmp	r4, r1
 801c0be:	dbf8      	blt.n	801c0b2 <tsi_malloc_pool+0x2e>
 801c0c0:	f101 0010 	add.w	r0, r1, #16
 801c0c4:	42a0      	cmp	r0, r4
 801c0c6:	da0f      	bge.n	801c0e8 <tsi_malloc_pool+0x64>
 801c0c8:	4e0c      	ldr	r6, [pc, #48]	; (801c0fc <tsi_malloc_pool+0x78>)
 801c0ca:	1a24      	subs	r4, r4, r0
 801c0cc:	50c4      	str	r4, [r0, r3]
 801c0ce:	18c4      	adds	r4, r0, r3
 801c0d0:	6066      	str	r6, [r4, #4]
 801c0d2:	689e      	ldr	r6, [r3, #8]
 801c0d4:	1aa2      	subs	r2, r4, r2
 801c0d6:	60a6      	str	r6, [r4, #8]
 801c0d8:	60aa      	str	r2, [r5, #8]
 801c0da:	6019      	str	r1, [r3, #0]
 801c0dc:	4a08      	ldr	r2, [pc, #32]	; (801c100 <tsi_malloc_pool+0x7c>)
 801c0de:	f103 0010 	add.w	r0, r3, #16
 801c0e2:	605a      	str	r2, [r3, #4]
 801c0e4:	bc70      	pop	{r4, r5, r6}
 801c0e6:	4770      	bx	lr
 801c0e8:	689a      	ldr	r2, [r3, #8]
 801c0ea:	60aa      	str	r2, [r5, #8]
 801c0ec:	e7f6      	b.n	801c0dc <tsi_malloc_pool+0x58>
 801c0ee:	2000      	movs	r0, #0
 801c0f0:	4770      	bx	lr
 801c0f2:	4615      	mov	r5, r2
 801c0f4:	4613      	mov	r3, r2
 801c0f6:	e7e3      	b.n	801c0c0 <tsi_malloc_pool+0x3c>
 801c0f8:	201982e0 	.word	0x201982e0
 801c0fc:	000f1fa1 	.word	0x000f1fa1
 801c100:	000f1fa2 	.word	0x000f1fa2

0801c104 <tsi_free>:
 801c104:	2800      	cmp	r0, #0
 801c106:	d045      	beq.n	801c194 <tsi_free+0x90>
 801c108:	4a45      	ldr	r2, [pc, #276]	; (801c220 <tsi_free+0x11c>)
 801c10a:	68d3      	ldr	r3, [r2, #12]
 801c10c:	b12b      	cbz	r3, 801c11a <tsi_free+0x16>
 801c10e:	6851      	ldr	r1, [r2, #4]
 801c110:	4281      	cmp	r1, r0
 801c112:	d802      	bhi.n	801c11a <tsi_free+0x16>
 801c114:	6891      	ldr	r1, [r2, #8]
 801c116:	4288      	cmp	r0, r1
 801c118:	d33d      	bcc.n	801c196 <tsi_free+0x92>
 801c11a:	6a13      	ldr	r3, [r2, #32]
 801c11c:	b12b      	cbz	r3, 801c12a <tsi_free+0x26>
 801c11e:	6991      	ldr	r1, [r2, #24]
 801c120:	4288      	cmp	r0, r1
 801c122:	d302      	bcc.n	801c12a <tsi_free+0x26>
 801c124:	69d1      	ldr	r1, [r2, #28]
 801c126:	4288      	cmp	r0, r1
 801c128:	d335      	bcc.n	801c196 <tsi_free+0x92>
 801c12a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801c12c:	b12b      	cbz	r3, 801c13a <tsi_free+0x36>
 801c12e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801c130:	4281      	cmp	r1, r0
 801c132:	d802      	bhi.n	801c13a <tsi_free+0x36>
 801c134:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801c136:	4281      	cmp	r1, r0
 801c138:	d82d      	bhi.n	801c196 <tsi_free+0x92>
 801c13a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 801c13c:	b12b      	cbz	r3, 801c14a <tsi_free+0x46>
 801c13e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801c140:	4288      	cmp	r0, r1
 801c142:	d302      	bcc.n	801c14a <tsi_free+0x46>
 801c144:	6c51      	ldr	r1, [r2, #68]	; 0x44
 801c146:	4288      	cmp	r0, r1
 801c148:	d325      	bcc.n	801c196 <tsi_free+0x92>
 801c14a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801c14c:	b12b      	cbz	r3, 801c15a <tsi_free+0x56>
 801c14e:	6d51      	ldr	r1, [r2, #84]	; 0x54
 801c150:	4288      	cmp	r0, r1
 801c152:	d302      	bcc.n	801c15a <tsi_free+0x56>
 801c154:	6d91      	ldr	r1, [r2, #88]	; 0x58
 801c156:	4288      	cmp	r0, r1
 801c158:	d31d      	bcc.n	801c196 <tsi_free+0x92>
 801c15a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 801c15c:	b12b      	cbz	r3, 801c16a <tsi_free+0x66>
 801c15e:	6e91      	ldr	r1, [r2, #104]	; 0x68
 801c160:	4288      	cmp	r0, r1
 801c162:	d302      	bcc.n	801c16a <tsi_free+0x66>
 801c164:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 801c166:	4288      	cmp	r0, r1
 801c168:	d315      	bcc.n	801c196 <tsi_free+0x92>
 801c16a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 801c16e:	b133      	cbz	r3, 801c17e <tsi_free+0x7a>
 801c170:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 801c172:	4288      	cmp	r0, r1
 801c174:	d303      	bcc.n	801c17e <tsi_free+0x7a>
 801c176:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 801c17a:	4288      	cmp	r0, r1
 801c17c:	d30b      	bcc.n	801c196 <tsi_free+0x92>
 801c17e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 801c182:	b13b      	cbz	r3, 801c194 <tsi_free+0x90>
 801c184:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 801c188:	4281      	cmp	r1, r0
 801c18a:	d803      	bhi.n	801c194 <tsi_free+0x90>
 801c18c:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 801c190:	4282      	cmp	r2, r0
 801c192:	d800      	bhi.n	801c196 <tsi_free+0x92>
 801c194:	4770      	bx	lr
 801c196:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c198:	f1a0 0410 	sub.w	r4, r0, #16
 801c19c:	6861      	ldr	r1, [r4, #4]
 801c19e:	4a21      	ldr	r2, [pc, #132]	; (801c224 <tsi_free+0x120>)
 801c1a0:	4291      	cmp	r1, r2
 801c1a2:	d000      	beq.n	801c1a6 <tsi_free+0xa2>
 801c1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1a6:	4a20      	ldr	r2, [pc, #128]	; (801c228 <tsi_free+0x124>)
 801c1a8:	6062      	str	r2, [r4, #4]
 801c1aa:	6899      	ldr	r1, [r3, #8]
 801c1ac:	18ca      	adds	r2, r1, r3
 801c1ae:	4294      	cmp	r4, r2
 801c1b0:	d929      	bls.n	801c206 <tsi_free+0x102>
 801c1b2:	b909      	cbnz	r1, 801c1b8 <tsi_free+0xb4>
 801c1b4:	e027      	b.n	801c206 <tsi_free+0x102>
 801c1b6:	b129      	cbz	r1, 801c1c4 <tsi_free+0xc0>
 801c1b8:	6891      	ldr	r1, [r2, #8]
 801c1ba:	4615      	mov	r5, r2
 801c1bc:	4616      	mov	r6, r2
 801c1be:	185a      	adds	r2, r3, r1
 801c1c0:	4294      	cmp	r4, r2
 801c1c2:	d8f8      	bhi.n	801c1b6 <tsi_free+0xb2>
 801c1c4:	f850 7c10 	ldr.w	r7, [r0, #-16]
 801c1c8:	42ab      	cmp	r3, r5
 801c1ca:	eba4 0e03 	sub.w	lr, r4, r3
 801c1ce:	4407      	add	r7, r0
 801c1d0:	d01e      	beq.n	801c210 <tsi_free+0x10c>
 801c1d2:	682b      	ldr	r3, [r5, #0]
 801c1d4:	f105 0c10 	add.w	ip, r5, #16
 801c1d8:	4463      	add	r3, ip
 801c1da:	429c      	cmp	r4, r3
 801c1dc:	f8c5 e008 	str.w	lr, [r5, #8]
 801c1e0:	60a1      	str	r1, [r4, #8]
 801c1e2:	d11a      	bne.n	801c21a <tsi_free+0x116>
 801c1e4:	f850 0c10 	ldr.w	r0, [r0, #-16]
 801c1e8:	682b      	ldr	r3, [r5, #0]
 801c1ea:	3010      	adds	r0, #16
 801c1ec:	4403      	add	r3, r0
 801c1ee:	60a9      	str	r1, [r5, #8]
 801c1f0:	602b      	str	r3, [r5, #0]
 801c1f2:	4297      	cmp	r7, r2
 801c1f4:	d1d6      	bne.n	801c1a4 <tsi_free+0xa0>
 801c1f6:	683a      	ldr	r2, [r7, #0]
 801c1f8:	6833      	ldr	r3, [r6, #0]
 801c1fa:	3210      	adds	r2, #16
 801c1fc:	4413      	add	r3, r2
 801c1fe:	6033      	str	r3, [r6, #0]
 801c200:	68bb      	ldr	r3, [r7, #8]
 801c202:	60b3      	str	r3, [r6, #8]
 801c204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c206:	f850 7c10 	ldr.w	r7, [r0, #-16]
 801c20a:	eba4 0e03 	sub.w	lr, r4, r3
 801c20e:	4407      	add	r7, r0
 801c210:	f8c3 e008 	str.w	lr, [r3, #8]
 801c214:	4626      	mov	r6, r4
 801c216:	60a1      	str	r1, [r4, #8]
 801c218:	e7eb      	b.n	801c1f2 <tsi_free+0xee>
 801c21a:	4626      	mov	r6, r4
 801c21c:	e7e9      	b.n	801c1f2 <tsi_free+0xee>
 801c21e:	bf00      	nop
 801c220:	201982e0 	.word	0x201982e0
 801c224:	000f1fa2 	.word	0x000f1fa2
 801c228:	000f1fa1 	.word	0x000f1fa1

0801c22c <nema_cl_create_sized>:
 801c22c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c22e:	b093      	sub	sp, #76	; 0x4c
 801c230:	466d      	mov	r5, sp
 801c232:	4606      	mov	r6, r0
 801c234:	460a      	mov	r2, r1
 801c236:	4628      	mov	r0, r5
 801c238:	2100      	movs	r1, #0
 801c23a:	f7e6 fd51 	bl	8002ce0 <nema_buffer_create_pool>
 801c23e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801c242:	2500      	movs	r5, #0
 801c244:	ac04      	add	r4, sp, #16
 801c246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801c24a:	4620      	mov	r0, r4
 801c24c:	f7e6 fd57 	bl	8002cfe <nema_buffer_map>
 801c250:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801c254:	ac08      	add	r4, sp, #32
 801c256:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801c25a:	2110      	movs	r1, #16
 801c25c:	f04f 32ff 	mov.w	r2, #4294967295
 801c260:	9b04      	ldr	r3, [sp, #16]
 801c262:	950d      	str	r5, [sp, #52]	; 0x34
 801c264:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
 801c268:	42ab      	cmp	r3, r5
 801c26a:	4635      	mov	r5, r6
 801c26c:	bfb8      	it	lt
 801c26e:	3307      	addlt	r3, #7
 801c270:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 801c274:	10db      	asrs	r3, r3, #3
 801c276:	005b      	lsls	r3, r3, #1
 801c278:	930c      	str	r3, [sp, #48]	; 0x30
 801c27a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c27c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c27e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c282:	e894 0003 	ldmia.w	r4, {r0, r1}
 801c286:	2700      	movs	r7, #0
 801c288:	e885 0003 	stmia.w	r5, {r0, r1}
 801c28c:	4630      	mov	r0, r6
 801c28e:	61b7      	str	r7, [r6, #24]
 801c290:	b013      	add	sp, #76	; 0x4c
 801c292:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c294 <nema_extend_bound_cl>:
 801c294:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c296:	4d6e      	ldr	r5, [pc, #440]	; (801c450 <nema_extend_bound_cl+0x1bc>)
 801c298:	b09f      	sub	sp, #124	; 0x7c
 801c29a:	682b      	ldr	r3, [r5, #0]
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	f000 80c1 	beq.w	801c424 <nema_extend_bound_cl+0x190>
 801c2a2:	4606      	mov	r6, r0
 801c2a4:	6998      	ldr	r0, [r3, #24]
 801c2a6:	0784      	lsls	r4, r0, #30
 801c2a8:	f140 80b6 	bpl.w	801c418 <nema_extend_bound_cl+0x184>
 801c2ac:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 801c2b0:	0680      	lsls	r0, r0, #26
 801c2b2:	d44e      	bmi.n	801c352 <nema_extend_bound_cl+0xbe>
 801c2b4:	1a89      	subs	r1, r1, r2
 801c2b6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801c2ba:	1049      	asrs	r1, r1, #1
 801c2bc:	2902      	cmp	r1, #2
 801c2be:	dd13      	ble.n	801c2e8 <nema_extend_bound_cl+0x54>
 801c2c0:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 801c2c4:	2700      	movs	r7, #0
 801c2c6:	1e94      	subs	r4, r2, #2
 801c2c8:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801c2cc:	1c91      	adds	r1, r2, #2
 801c2ce:	0092      	lsls	r2, r2, #2
 801c2d0:	6898      	ldr	r0, [r3, #8]
 801c2d2:	f840 c002 	str.w	ip, [r0, r2]
 801c2d6:	6898      	ldr	r0, [r3, #8]
 801c2d8:	4410      	add	r0, r2
 801c2da:	6047      	str	r7, [r0, #4]
 801c2dc:	6159      	str	r1, [r3, #20]
 801c2de:	3102      	adds	r1, #2
 801c2e0:	428c      	cmp	r4, r1
 801c2e2:	f102 0208 	add.w	r2, r2, #8
 801c2e6:	d1f3      	bne.n	801c2d0 <nema_extend_bound_cl+0x3c>
 801c2e8:	6a1c      	ldr	r4, [r3, #32]
 801c2ea:	2c00      	cmp	r4, #0
 801c2ec:	d050      	beq.n	801c390 <nema_extend_bound_cl+0xfc>
 801c2ee:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
 801c2f2:	26f0      	movs	r6, #240	; 0xf0
 801c2f4:	27f4      	movs	r7, #244	; 0xf4
 801c2f6:	6898      	ldr	r0, [r3, #8]
 801c2f8:	f041 0104 	orr.w	r1, r1, #4
 801c2fc:	6199      	str	r1, [r3, #24]
 801c2fe:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
 801c302:	6899      	ldr	r1, [r3, #8]
 801c304:	68e6      	ldr	r6, [r4, #12]
 801c306:	0090      	lsls	r0, r2, #2
 801c308:	4401      	add	r1, r0
 801c30a:	604e      	str	r6, [r1, #4]
 801c30c:	6899      	ldr	r1, [r3, #8]
 801c30e:	1c96      	adds	r6, r2, #2
 801c310:	4401      	add	r1, r0
 801c312:	615e      	str	r6, [r3, #20]
 801c314:	608f      	str	r7, [r1, #8]
 801c316:	6899      	ldr	r1, [r3, #8]
 801c318:	6926      	ldr	r6, [r4, #16]
 801c31a:	4401      	add	r1, r0
 801c31c:	1d17      	adds	r7, r2, #4
 801c31e:	60ce      	str	r6, [r1, #12]
 801c320:	621c      	str	r4, [r3, #32]
 801c322:	615f      	str	r7, [r3, #20]
 801c324:	68e1      	ldr	r1, [r4, #12]
 801c326:	f011 0107 	ands.w	r1, r1, #7
 801c32a:	d120      	bne.n	801c36e <nema_extend_bound_cl+0xda>
 801c32c:	691e      	ldr	r6, [r3, #16]
 801c32e:	3205      	adds	r2, #5
 801c330:	42b2      	cmp	r2, r6
 801c332:	db23      	blt.n	801c37c <nema_extend_bound_cl+0xe8>
 801c334:	699a      	ldr	r2, [r3, #24]
 801c336:	f022 0220 	bic.w	r2, r2, #32
 801c33a:	619a      	str	r2, [r3, #24]
 801c33c:	69a3      	ldr	r3, [r4, #24]
 801c33e:	075a      	lsls	r2, r3, #29
 801c340:	d503      	bpl.n	801c34a <nema_extend_bound_cl+0xb6>
 801c342:	6a24      	ldr	r4, [r4, #32]
 801c344:	69a3      	ldr	r3, [r4, #24]
 801c346:	075b      	lsls	r3, r3, #29
 801c348:	d4fb      	bmi.n	801c342 <nema_extend_bound_cl+0xae>
 801c34a:	2000      	movs	r0, #0
 801c34c:	602c      	str	r4, [r5, #0]
 801c34e:	b01f      	add	sp, #124	; 0x7c
 801c350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c352:	2900      	cmp	r1, #0
 801c354:	bfb8      	it	lt
 801c356:	3103      	addlt	r1, #3
 801c358:	1089      	asrs	r1, r1, #2
 801c35a:	0049      	lsls	r1, r1, #1
 801c35c:	4291      	cmp	r1, r2
 801c35e:	bfcc      	ite	gt
 801c360:	4610      	movgt	r0, r2
 801c362:	1a50      	suble	r0, r2, r1
 801c364:	1a09      	subs	r1, r1, r0
 801c366:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801c36a:	1049      	asrs	r1, r1, #1
 801c36c:	e7a6      	b.n	801c2bc <nema_extend_bound_cl+0x28>
 801c36e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801c372:	f7fe fc45 	bl	801ac00 <nema_set_error>
 801c376:	2000      	movs	r0, #0
 801c378:	b01f      	add	sp, #124	; 0x7c
 801c37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c37c:	f44f 26a0 	mov.w	r6, #327680	; 0x50000
 801c380:	689a      	ldr	r2, [r3, #8]
 801c382:	4410      	add	r0, r2
 801c384:	e9c0 6104 	strd	r6, r1, [r0, #16]
 801c388:	699a      	ldr	r2, [r3, #24]
 801c38a:	f022 0208 	bic.w	r2, r2, #8
 801c38e:	e7d2      	b.n	801c336 <nema_extend_bound_cl+0xa2>
 801c390:	2028      	movs	r0, #40	; 0x28
 801c392:	f7e6 fc66 	bl	8002c62 <nema_host_malloc>
 801c396:	4604      	mov	r4, r0
 801c398:	2800      	cmp	r0, #0
 801c39a:	d052      	beq.n	801c442 <nema_extend_bound_cl+0x1ae>
 801c39c:	1cb1      	adds	r1, r6, #2
 801c39e:	00c9      	lsls	r1, r1, #3
 801c3a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801c3a4:	dd1a      	ble.n	801c3dc <nema_extend_bound_cl+0x148>
 801c3a6:	466e      	mov	r6, sp
 801c3a8:	4627      	mov	r7, r4
 801c3aa:	4668      	mov	r0, sp
 801c3ac:	f7ff ff3e 	bl	801c22c <nema_cl_create_sized>
 801c3b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c3b2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c3b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c3b6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c3b8:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c3bc:	e887 0003 	stmia.w	r7, {r0, r1}
 801c3c0:	68a3      	ldr	r3, [r4, #8]
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	d034      	beq.n	801c430 <nema_extend_bound_cl+0x19c>
 801c3c6:	682b      	ldr	r3, [r5, #0]
 801c3c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c3ca:	2a00      	cmp	r2, #0
 801c3cc:	bf08      	it	eq
 801c3ce:	461a      	moveq	r2, r3
 801c3d0:	6262      	str	r2, [r4, #36]	; 0x24
 801c3d2:	699a      	ldr	r2, [r3, #24]
 801c3d4:	f022 020c 	bic.w	r2, r2, #12
 801c3d8:	61a2      	str	r2, [r4, #24]
 801c3da:	e788      	b.n	801c2ee <nema_extend_bound_cl+0x5a>
 801c3dc:	a80a      	add	r0, sp, #40	; 0x28
 801c3de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c3e2:	f7ff ff23 	bl	801c22c <nema_cl_create_sized>
 801c3e6:	2302      	movs	r3, #2
 801c3e8:	46a4      	mov	ip, r4
 801c3ea:	9310      	str	r3, [sp, #64]	; 0x40
 801c3ec:	ae0a      	add	r6, sp, #40	; 0x28
 801c3ee:	af14      	add	r7, sp, #80	; 0x50
 801c3f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c3f2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c3f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c3f6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c3f8:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c3fc:	ae14      	add	r6, sp, #80	; 0x50
 801c3fe:	e887 0003 	stmia.w	r7, {r0, r1}
 801c402:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c404:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c408:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c40a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c40e:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c412:	e88c 0003 	stmia.w	ip, {r0, r1}
 801c416:	e7d3      	b.n	801c3c0 <nema_extend_bound_cl+0x12c>
 801c418:	2008      	movs	r0, #8
 801c41a:	f7fe fbf1 	bl	801ac00 <nema_set_error>
 801c41e:	f04f 30ff 	mov.w	r0, #4294967295
 801c422:	e7a9      	b.n	801c378 <nema_extend_bound_cl+0xe4>
 801c424:	2080      	movs	r0, #128	; 0x80
 801c426:	f7fe fbeb 	bl	801ac00 <nema_set_error>
 801c42a:	f04f 30ff 	mov.w	r0, #4294967295
 801c42e:	e7a3      	b.n	801c378 <nema_extend_bound_cl+0xe4>
 801c430:	2010      	movs	r0, #16
 801c432:	f7fe fbe5 	bl	801ac00 <nema_set_error>
 801c436:	4620      	mov	r0, r4
 801c438:	f7e6 fc08 	bl	8002c4c <nema_host_free>
 801c43c:	f04f 30ff 	mov.w	r0, #4294967295
 801c440:	e79a      	b.n	801c378 <nema_extend_bound_cl+0xe4>
 801c442:	2010      	movs	r0, #16
 801c444:	f7fe fbdc 	bl	801ac00 <nema_set_error>
 801c448:	f04f 30ff 	mov.w	r0, #4294967295
 801c44c:	e794      	b.n	801c378 <nema_extend_bound_cl+0xe4>
 801c44e:	bf00      	nop
 801c450:	20198380 	.word	0x20198380

0801c454 <nema_cl_bind_circular>:
 801c454:	b358      	cbz	r0, 801c4ae <nema_cl_bind_circular+0x5a>
 801c456:	68c3      	ldr	r3, [r0, #12]
 801c458:	f013 0207 	ands.w	r2, r3, #7
 801c45c:	d117      	bne.n	801c48e <nema_cl_bind_circular+0x3a>
 801c45e:	b4f0      	push	{r4, r5, r6, r7}
 801c460:	4c15      	ldr	r4, [pc, #84]	; (801c4b8 <nema_cl_bind_circular+0x64>)
 801c462:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c464:	6821      	ldr	r1, [r4, #0]
 801c466:	2b00      	cmp	r3, #0
 801c468:	bf08      	it	eq
 801c46a:	4603      	moveq	r3, r0
 801c46c:	b141      	cbz	r1, 801c480 <nema_cl_bind_circular+0x2c>
 801c46e:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
 801c472:	1c46      	adds	r6, r0, #1
 801c474:	42ae      	cmp	r6, r5
 801c476:	db0e      	blt.n	801c496 <nema_cl_bind_circular+0x42>
 801c478:	698a      	ldr	r2, [r1, #24]
 801c47a:	f022 0220 	bic.w	r2, r2, #32
 801c47e:	618a      	str	r2, [r1, #24]
 801c480:	699a      	ldr	r2, [r3, #24]
 801c482:	6023      	str	r3, [r4, #0]
 801c484:	f042 0220 	orr.w	r2, r2, #32
 801c488:	619a      	str	r2, [r3, #24]
 801c48a:	bcf0      	pop	{r4, r5, r6, r7}
 801c48c:	4770      	bx	lr
 801c48e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801c492:	f7fe bbb5 	b.w	801ac00 <nema_set_error>
 801c496:	f44f 27a0 	mov.w	r7, #327680	; 0x50000
 801c49a:	688d      	ldr	r5, [r1, #8]
 801c49c:	eb05 0680 	add.w	r6, r5, r0, lsl #2
 801c4a0:	f845 7020 	str.w	r7, [r5, r0, lsl #2]
 801c4a4:	6072      	str	r2, [r6, #4]
 801c4a6:	698a      	ldr	r2, [r1, #24]
 801c4a8:	f022 0208 	bic.w	r2, r2, #8
 801c4ac:	e7e5      	b.n	801c47a <nema_cl_bind_circular+0x26>
 801c4ae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801c4b2:	f7fe bba5 	b.w	801ac00 <nema_set_error>
 801c4b6:	bf00      	nop
 801c4b8:	20198380 	.word	0x20198380

0801c4bc <nema_cl_unbind>:
 801c4bc:	4910      	ldr	r1, [pc, #64]	; (801c500 <nema_cl_unbind+0x44>)
 801c4be:	680b      	ldr	r3, [r1, #0]
 801c4c0:	b1d3      	cbz	r3, 801c4f8 <nema_cl_unbind+0x3c>
 801c4c2:	b430      	push	{r4, r5}
 801c4c4:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 801c4c8:	1c54      	adds	r4, r2, #1
 801c4ca:	4284      	cmp	r4, r0
 801c4cc:	db07      	blt.n	801c4de <nema_cl_unbind+0x22>
 801c4ce:	699a      	ldr	r2, [r3, #24]
 801c4d0:	f022 0220 	bic.w	r2, r2, #32
 801c4d4:	619a      	str	r2, [r3, #24]
 801c4d6:	2300      	movs	r3, #0
 801c4d8:	600b      	str	r3, [r1, #0]
 801c4da:	bc30      	pop	{r4, r5}
 801c4dc:	4770      	bx	lr
 801c4de:	f44f 25a0 	mov.w	r5, #327680	; 0x50000
 801c4e2:	2400      	movs	r4, #0
 801c4e4:	6898      	ldr	r0, [r3, #8]
 801c4e6:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
 801c4ea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801c4ee:	6054      	str	r4, [r2, #4]
 801c4f0:	699a      	ldr	r2, [r3, #24]
 801c4f2:	f022 0208 	bic.w	r2, r2, #8
 801c4f6:	e7eb      	b.n	801c4d0 <nema_cl_unbind+0x14>
 801c4f8:	2300      	movs	r3, #0
 801c4fa:	600b      	str	r3, [r1, #0]
 801c4fc:	4770      	bx	lr
 801c4fe:	bf00      	nop
 801c500:	20198380 	.word	0x20198380

0801c504 <nema_cl_submit_no_irq>:
 801c504:	2800      	cmp	r0, #0
 801c506:	d059      	beq.n	801c5bc <nema_cl_submit_no_irq+0xb8>
 801c508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c50a:	6983      	ldr	r3, [r0, #24]
 801c50c:	4605      	mov	r5, r0
 801c50e:	069c      	lsls	r4, r3, #26
 801c510:	d429      	bmi.n	801c566 <nema_cl_submit_no_irq+0x62>
 801c512:	4604      	mov	r4, r0
 801c514:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 801c518:	e012      	b.n	801c540 <nema_cl_submit_no_irq+0x3c>
 801c51a:	6923      	ldr	r3, [r4, #16]
 801c51c:	6949      	ldr	r1, [r1, #20]
 801c51e:	4433      	add	r3, r6
 801c520:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801c524:	69a3      	ldr	r3, [r4, #24]
 801c526:	4620      	mov	r0, r4
 801c528:	f023 0308 	bic.w	r3, r3, #8
 801c52c:	61a3      	str	r3, [r4, #24]
 801c52e:	f7e6 fc12 	bl	8002d56 <nema_buffer_flush>
 801c532:	69a3      	ldr	r3, [r4, #24]
 801c534:	f043 0308 	orr.w	r3, r3, #8
 801c538:	61a3      	str	r3, [r4, #24]
 801c53a:	6a24      	ldr	r4, [r4, #32]
 801c53c:	b134      	cbz	r4, 801c54c <nema_cl_submit_no_irq+0x48>
 801c53e:	69a3      	ldr	r3, [r4, #24]
 801c540:	0758      	lsls	r0, r3, #29
 801c542:	68a2      	ldr	r2, [r4, #8]
 801c544:	6a21      	ldr	r1, [r4, #32]
 801c546:	d4e8      	bmi.n	801c51a <nema_cl_submit_no_irq+0x16>
 801c548:	071b      	lsls	r3, r3, #28
 801c54a:	d52a      	bpl.n	801c5a2 <nema_cl_submit_no_irq+0x9e>
 801c54c:	2000      	movs	r0, #0
 801c54e:	f7e6 fc0c 	bl	8002d6a <nema_mutex_lock>
 801c552:	6969      	ldr	r1, [r5, #20]
 801c554:	4628      	mov	r0, r5
 801c556:	f7fe f9c3 	bl	801a8e0 <nema_rb_submit_cmdlist>
 801c55a:	61e8      	str	r0, [r5, #28]
 801c55c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c560:	2000      	movs	r0, #0
 801c562:	f7e6 bc0f 	b.w	8002d84 <nema_mutex_unlock>
 801c566:	6903      	ldr	r3, [r0, #16]
 801c568:	6946      	ldr	r6, [r0, #20]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	bfb8      	it	lt
 801c56e:	3303      	addlt	r3, #3
 801c570:	109b      	asrs	r3, r3, #2
 801c572:	005c      	lsls	r4, r3, #1
 801c574:	68c7      	ldr	r7, [r0, #12]
 801c576:	69c0      	ldr	r0, [r0, #28]
 801c578:	42a6      	cmp	r6, r4
 801c57a:	bfa4      	itt	ge
 801c57c:	1b36      	subge	r6, r6, r4
 801c57e:	eb07 07c3 	addge.w	r7, r7, r3, lsl #3
 801c582:	2800      	cmp	r0, #0
 801c584:	da15      	bge.n	801c5b2 <nema_cl_submit_no_irq+0xae>
 801c586:	f04f 33ff 	mov.w	r3, #4294967295
 801c58a:	61eb      	str	r3, [r5, #28]
 801c58c:	4631      	mov	r1, r6
 801c58e:	4638      	mov	r0, r7
 801c590:	f7fe f922 	bl	801a7d8 <nema_rb_submit_cmdlist2>
 801c594:	696b      	ldr	r3, [r5, #20]
 801c596:	61e8      	str	r0, [r5, #28]
 801c598:	42a3      	cmp	r3, r4
 801c59a:	bfa8      	it	ge
 801c59c:	2400      	movge	r4, #0
 801c59e:	616c      	str	r4, [r5, #20]
 801c5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c5a2:	4620      	mov	r0, r4
 801c5a4:	f7e6 fbd7 	bl	8002d56 <nema_buffer_flush>
 801c5a8:	69a3      	ldr	r3, [r4, #24]
 801c5aa:	f043 0308 	orr.w	r3, r3, #8
 801c5ae:	61a3      	str	r3, [r4, #24]
 801c5b0:	e7cc      	b.n	801c54c <nema_cl_submit_no_irq+0x48>
 801c5b2:	f7e6 fb37 	bl	8002c24 <nema_wait_irq_cl>
 801c5b6:	2800      	cmp	r0, #0
 801c5b8:	dae5      	bge.n	801c586 <nema_cl_submit_no_irq+0x82>
 801c5ba:	e7e7      	b.n	801c58c <nema_cl_submit_no_irq+0x88>
 801c5bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801c5c0:	f7fe bb1e 	b.w	801ac00 <nema_set_error>

0801c5c4 <nema_cl_get_space>:
 801c5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5c6:	4e2d      	ldr	r6, [pc, #180]	; (801c67c <nema_cl_get_space+0xb8>)
 801c5c8:	6834      	ldr	r4, [r6, #0]
 801c5ca:	2c00      	cmp	r4, #0
 801c5cc:	d039      	beq.n	801c642 <nema_cl_get_space+0x7e>
 801c5ce:	69a7      	ldr	r7, [r4, #24]
 801c5d0:	4605      	mov	r5, r0
 801c5d2:	f027 0208 	bic.w	r2, r7, #8
 801c5d6:	f017 0720 	ands.w	r7, r7, #32
 801c5da:	61a2      	str	r2, [r4, #24]
 801c5dc:	6923      	ldr	r3, [r4, #16]
 801c5de:	6962      	ldr	r2, [r4, #20]
 801c5e0:	d016      	beq.n	801c610 <nema_cl_get_space+0x4c>
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	bfb8      	it	lt
 801c5e6:	3303      	addlt	r3, #3
 801c5e8:	109b      	asrs	r3, r3, #2
 801c5ea:	005b      	lsls	r3, r3, #1
 801c5ec:	4293      	cmp	r3, r2
 801c5ee:	bfcc      	ite	gt
 801c5f0:	4611      	movgt	r1, r2
 801c5f2:	1ad1      	suble	r1, r2, r3
 801c5f4:	1a5b      	subs	r3, r3, r1
 801c5f6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c5fa:	1c41      	adds	r1, r0, #1
 801c5fc:	ebb1 0f63 	cmp.w	r1, r3, asr #1
 801c600:	da1a      	bge.n	801c638 <nema_cl_get_space+0x74>
 801c602:	68a0      	ldr	r0, [r4, #8]
 801c604:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801c608:	6165      	str	r5, [r4, #20]
 801c60a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801c60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c610:	1a9b      	subs	r3, r3, r2
 801c612:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c616:	105b      	asrs	r3, r3, #1
 801c618:	3b01      	subs	r3, #1
 801c61a:	4283      	cmp	r3, r0
 801c61c:	dcf1      	bgt.n	801c602 <nema_cl_get_space+0x3e>
 801c61e:	f7ff fe39 	bl	801c294 <nema_extend_bound_cl>
 801c622:	2800      	cmp	r0, #0
 801c624:	db27      	blt.n	801c676 <nema_cl_get_space+0xb2>
 801c626:	6834      	ldr	r4, [r6, #0]
 801c628:	6962      	ldr	r2, [r4, #20]
 801c62a:	68a0      	ldr	r0, [r4, #8]
 801c62c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801c630:	6165      	str	r5, [r4, #20]
 801c632:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801c636:	e7ea      	b.n	801c60e <nema_cl_get_space+0x4a>
 801c638:	b942      	cbnz	r2, 801c64c <nema_cl_get_space+0x88>
 801c63a:	f04f 33ff 	mov.w	r3, #4294967295
 801c63e:	61e3      	str	r3, [r4, #28]
 801c640:	e7df      	b.n	801c602 <nema_cl_get_space+0x3e>
 801c642:	2080      	movs	r0, #128	; 0x80
 801c644:	f7fe fadc 	bl	801ac00 <nema_set_error>
 801c648:	4620      	mov	r0, r4
 801c64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c64c:	4620      	mov	r0, r4
 801c64e:	f7ff ff59 	bl	801c504 <nema_cl_submit_no_irq>
 801c652:	69e0      	ldr	r0, [r4, #28]
 801c654:	f7fe fa10 	bl	801aa78 <nema_rb_submit_cl_id>
 801c658:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801c65c:	69e0      	ldr	r0, [r4, #28]
 801c65e:	4298      	cmp	r0, r3
 801c660:	d1e1      	bne.n	801c626 <nema_cl_get_space+0x62>
 801c662:	f7e6 fadf 	bl	8002c24 <nema_wait_irq_cl>
 801c666:	2800      	cmp	r0, #0
 801c668:	dbdd      	blt.n	801c626 <nema_cl_get_space+0x62>
 801c66a:	f04f 33ff 	mov.w	r3, #4294967295
 801c66e:	61e3      	str	r3, [r4, #28]
 801c670:	6834      	ldr	r4, [r6, #0]
 801c672:	6962      	ldr	r2, [r4, #20]
 801c674:	e7c5      	b.n	801c602 <nema_cl_get_space+0x3e>
 801c676:	4638      	mov	r0, r7
 801c678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c67a:	bf00      	nop
 801c67c:	20198380 	.word	0x20198380

0801c680 <nema_cl_add_cmd>:
 801c680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c684:	4e30      	ldr	r6, [pc, #192]	; (801c748 <nema_cl_add_cmd+0xc8>)
 801c686:	4607      	mov	r7, r0
 801c688:	6834      	ldr	r4, [r6, #0]
 801c68a:	4688      	mov	r8, r1
 801c68c:	b35c      	cbz	r4, 801c6e6 <nema_cl_add_cmd+0x66>
 801c68e:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 801c692:	f025 0308 	bic.w	r3, r5, #8
 801c696:	f015 0020 	ands.w	r0, r5, #32
 801c69a:	61a3      	str	r3, [r4, #24]
 801c69c:	6923      	ldr	r3, [r4, #16]
 801c69e:	d016      	beq.n	801c6ce <nema_cl_add_cmd+0x4e>
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	bfb8      	it	lt
 801c6a4:	3303      	addlt	r3, #3
 801c6a6:	109b      	asrs	r3, r3, #2
 801c6a8:	005b      	lsls	r3, r3, #1
 801c6aa:	4293      	cmp	r3, r2
 801c6ac:	bfcc      	ite	gt
 801c6ae:	4611      	movgt	r1, r2
 801c6b0:	1ad1      	suble	r1, r2, r3
 801c6b2:	1a5b      	subs	r3, r3, r1
 801c6b4:	2b03      	cmp	r3, #3
 801c6b6:	dd2a      	ble.n	801c70e <nema_cl_add_cmd+0x8e>
 801c6b8:	1c51      	adds	r1, r2, #1
 801c6ba:	68a0      	ldr	r0, [r4, #8]
 801c6bc:	1c93      	adds	r3, r2, #2
 801c6be:	f840 7022 	str.w	r7, [r0, r2, lsl #2]
 801c6c2:	68a2      	ldr	r2, [r4, #8]
 801c6c4:	f842 8021 	str.w	r8, [r2, r1, lsl #2]
 801c6c8:	6163      	str	r3, [r4, #20]
 801c6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6ce:	07a9      	lsls	r1, r5, #30
 801c6d0:	d515      	bpl.n	801c6fe <nema_cl_add_cmd+0x7e>
 801c6d2:	1d11      	adds	r1, r2, #4
 801c6d4:	4299      	cmp	r1, r3
 801c6d6:	dbef      	blt.n	801c6b8 <nema_cl_add_cmd+0x38>
 801c6d8:	f7ff fddc 	bl	801c294 <nema_extend_bound_cl>
 801c6dc:	2800      	cmp	r0, #0
 801c6de:	dbf4      	blt.n	801c6ca <nema_cl_add_cmd+0x4a>
 801c6e0:	6834      	ldr	r4, [r6, #0]
 801c6e2:	6962      	ldr	r2, [r4, #20]
 801c6e4:	e7e8      	b.n	801c6b8 <nema_cl_add_cmd+0x38>
 801c6e6:	4620      	mov	r0, r4
 801c6e8:	f7e6 fb3f 	bl	8002d6a <nema_mutex_lock>
 801c6ec:	4638      	mov	r0, r7
 801c6ee:	4641      	mov	r1, r8
 801c6f0:	f7fe f8fa 	bl	801a8e8 <nema_rb_inline_cmd>
 801c6f4:	4620      	mov	r0, r4
 801c6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c6fa:	f7e6 bb43 	b.w	8002d84 <nema_mutex_unlock>
 801c6fe:	1c51      	adds	r1, r2, #1
 801c700:	4299      	cmp	r1, r3
 801c702:	dbda      	blt.n	801c6ba <nema_cl_add_cmd+0x3a>
 801c704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c708:	2008      	movs	r0, #8
 801c70a:	f7fe ba79 	b.w	801ac00 <nema_set_error>
 801c70e:	b922      	cbnz	r2, 801c71a <nema_cl_add_cmd+0x9a>
 801c710:	f04f 33ff 	mov.w	r3, #4294967295
 801c714:	2101      	movs	r1, #1
 801c716:	61e3      	str	r3, [r4, #28]
 801c718:	e7cf      	b.n	801c6ba <nema_cl_add_cmd+0x3a>
 801c71a:	4620      	mov	r0, r4
 801c71c:	f7ff fef2 	bl	801c504 <nema_cl_submit_no_irq>
 801c720:	69e0      	ldr	r0, [r4, #28]
 801c722:	f7fe f9a9 	bl	801aa78 <nema_rb_submit_cl_id>
 801c726:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801c72a:	69e0      	ldr	r0, [r4, #28]
 801c72c:	4298      	cmp	r0, r3
 801c72e:	d1d7      	bne.n	801c6e0 <nema_cl_add_cmd+0x60>
 801c730:	f7e6 fa78 	bl	8002c24 <nema_wait_irq_cl>
 801c734:	2800      	cmp	r0, #0
 801c736:	dbd3      	blt.n	801c6e0 <nema_cl_add_cmd+0x60>
 801c738:	f04f 33ff 	mov.w	r3, #4294967295
 801c73c:	61e3      	str	r3, [r4, #28]
 801c73e:	6834      	ldr	r4, [r6, #0]
 801c740:	6962      	ldr	r2, [r4, #20]
 801c742:	1c51      	adds	r1, r2, #1
 801c744:	e7b9      	b.n	801c6ba <nema_cl_add_cmd+0x3a>
 801c746:	bf00      	nop
 801c748:	20198380 	.word	0x20198380

0801c74c <nema_cl_submit>:
 801c74c:	2800      	cmp	r0, #0
 801c74e:	d05c      	beq.n	801c80a <nema_cl_submit+0xbe>
 801c750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c752:	6944      	ldr	r4, [r0, #20]
 801c754:	4605      	mov	r5, r0
 801c756:	b91c      	cbnz	r4, 801c760 <nema_cl_submit+0x14>
 801c758:	f04f 33ff 	mov.w	r3, #4294967295
 801c75c:	61eb      	str	r3, [r5, #28]
 801c75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c760:	6983      	ldr	r3, [r0, #24]
 801c762:	069e      	lsls	r6, r3, #26
 801c764:	d527      	bpl.n	801c7b6 <nema_cl_submit+0x6a>
 801c766:	6903      	ldr	r3, [r0, #16]
 801c768:	68c7      	ldr	r7, [r0, #12]
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	bfb8      	it	lt
 801c76e:	3303      	addlt	r3, #3
 801c770:	109b      	asrs	r3, r3, #2
 801c772:	005e      	lsls	r6, r3, #1
 801c774:	69c0      	ldr	r0, [r0, #28]
 801c776:	42b4      	cmp	r4, r6
 801c778:	bfa4      	itt	ge
 801c77a:	1ba4      	subge	r4, r4, r6
 801c77c:	eb07 07c3 	addge.w	r7, r7, r3, lsl #3
 801c780:	2800      	cmp	r0, #0
 801c782:	da46      	bge.n	801c812 <nema_cl_submit+0xc6>
 801c784:	f04f 33ff 	mov.w	r3, #4294967295
 801c788:	61eb      	str	r3, [r5, #28]
 801c78a:	4621      	mov	r1, r4
 801c78c:	4638      	mov	r0, r7
 801c78e:	f7fe f823 	bl	801a7d8 <nema_rb_submit_cmdlist2>
 801c792:	696b      	ldr	r3, [r5, #20]
 801c794:	61e8      	str	r0, [r5, #28]
 801c796:	429e      	cmp	r6, r3
 801c798:	bfd8      	it	le
 801c79a:	2600      	movle	r6, #0
 801c79c:	616e      	str	r6, [r5, #20]
 801c79e:	f7fe f96b 	bl	801aa78 <nema_rb_submit_cl_id>
 801c7a2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801c7a6:	69e8      	ldr	r0, [r5, #28]
 801c7a8:	4298      	cmp	r0, r3
 801c7aa:	d1d8      	bne.n	801c75e <nema_cl_submit+0x12>
 801c7ac:	f7e6 fa3a 	bl	8002c24 <nema_wait_irq_cl>
 801c7b0:	2800      	cmp	r0, #0
 801c7b2:	dad1      	bge.n	801c758 <nema_cl_submit+0xc>
 801c7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7b6:	4604      	mov	r4, r0
 801c7b8:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 801c7bc:	e012      	b.n	801c7e4 <nema_cl_submit+0x98>
 801c7be:	6923      	ldr	r3, [r4, #16]
 801c7c0:	6949      	ldr	r1, [r1, #20]
 801c7c2:	4433      	add	r3, r6
 801c7c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801c7c8:	69a3      	ldr	r3, [r4, #24]
 801c7ca:	4620      	mov	r0, r4
 801c7cc:	f023 0308 	bic.w	r3, r3, #8
 801c7d0:	61a3      	str	r3, [r4, #24]
 801c7d2:	f7e6 fac0 	bl	8002d56 <nema_buffer_flush>
 801c7d6:	69a3      	ldr	r3, [r4, #24]
 801c7d8:	f043 0308 	orr.w	r3, r3, #8
 801c7dc:	61a3      	str	r3, [r4, #24]
 801c7de:	6a24      	ldr	r4, [r4, #32]
 801c7e0:	b134      	cbz	r4, 801c7f0 <nema_cl_submit+0xa4>
 801c7e2:	69a3      	ldr	r3, [r4, #24]
 801c7e4:	0758      	lsls	r0, r3, #29
 801c7e6:	68a2      	ldr	r2, [r4, #8]
 801c7e8:	6a21      	ldr	r1, [r4, #32]
 801c7ea:	d4e8      	bmi.n	801c7be <nema_cl_submit+0x72>
 801c7ec:	071b      	lsls	r3, r3, #28
 801c7ee:	d515      	bpl.n	801c81c <nema_cl_submit+0xd0>
 801c7f0:	2000      	movs	r0, #0
 801c7f2:	f7e6 faba 	bl	8002d6a <nema_mutex_lock>
 801c7f6:	6969      	ldr	r1, [r5, #20]
 801c7f8:	4628      	mov	r0, r5
 801c7fa:	f7fe f871 	bl	801a8e0 <nema_rb_submit_cmdlist>
 801c7fe:	61e8      	str	r0, [r5, #28]
 801c800:	2000      	movs	r0, #0
 801c802:	f7e6 fabf 	bl	8002d84 <nema_mutex_unlock>
 801c806:	69e8      	ldr	r0, [r5, #28]
 801c808:	e7c9      	b.n	801c79e <nema_cl_submit+0x52>
 801c80a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801c80e:	f7fe b9f7 	b.w	801ac00 <nema_set_error>
 801c812:	f7e6 fa07 	bl	8002c24 <nema_wait_irq_cl>
 801c816:	2800      	cmp	r0, #0
 801c818:	dab4      	bge.n	801c784 <nema_cl_submit+0x38>
 801c81a:	e7b6      	b.n	801c78a <nema_cl_submit+0x3e>
 801c81c:	4620      	mov	r0, r4
 801c81e:	f7e6 fa9a 	bl	8002d56 <nema_buffer_flush>
 801c822:	69a3      	ldr	r3, [r4, #24]
 801c824:	f043 0308 	orr.w	r3, r3, #8
 801c828:	61a3      	str	r3, [r4, #24]
 801c82a:	e7e1      	b.n	801c7f0 <nema_cl_submit+0xa4>

0801c82c <nema_cl_wait>:
 801c82c:	b510      	push	{r4, lr}
 801c82e:	b170      	cbz	r0, 801c84e <nema_cl_wait+0x22>
 801c830:	4604      	mov	r4, r0
 801c832:	69c0      	ldr	r0, [r0, #28]
 801c834:	2800      	cmp	r0, #0
 801c836:	da04      	bge.n	801c842 <nema_cl_wait+0x16>
 801c838:	f04f 33ff 	mov.w	r3, #4294967295
 801c83c:	61e3      	str	r3, [r4, #28]
 801c83e:	2000      	movs	r0, #0
 801c840:	bd10      	pop	{r4, pc}
 801c842:	f7e6 f9ef 	bl	8002c24 <nema_wait_irq_cl>
 801c846:	2800      	cmp	r0, #0
 801c848:	daf6      	bge.n	801c838 <nema_cl_wait+0xc>
 801c84a:	2000      	movs	r0, #0
 801c84c:	bd10      	pop	{r4, pc}
 801c84e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801c852:	f7fe f9d5 	bl	801ac00 <nema_set_error>
 801c856:	f04f 30ff 	mov.w	r0, #4294967295
 801c85a:	bd10      	pop	{r4, pc}

0801c85c <nema_blender_init>:
 801c85c:	b530      	push	{r4, r5, lr}
 801c85e:	b085      	sub	sp, #20
 801c860:	466d      	mov	r5, sp
 801c862:	2418      	movs	r4, #24
 801c864:	4b11      	ldr	r3, [pc, #68]	; (801c8ac <nema_blender_init+0x50>)
 801c866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c868:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801c86c:	2101      	movs	r1, #1
 801c86e:	4622      	mov	r2, r4
 801c870:	4628      	mov	r0, r5
 801c872:	440c      	add	r4, r1
 801c874:	f7ff f974 	bl	801bb60 <nema_load_frag_shader>
 801c878:	2c1f      	cmp	r4, #31
 801c87a:	d1f7      	bne.n	801c86c <nema_blender_init+0x10>
 801c87c:	4622      	mov	r2, r4
 801c87e:	2101      	movs	r1, #1
 801c880:	a802      	add	r0, sp, #8
 801c882:	f7ff f96d 	bl	801bb60 <nema_load_frag_shader>
 801c886:	f7ff f829 	bl	801b8dc <nema_readHwConfig>
 801c88a:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 801c88e:	2800      	cmp	r0, #0
 801c890:	bf14      	ite	ne
 801c892:	2201      	movne	r2, #1
 801c894:	2200      	moveq	r2, #0
 801c896:	4b06      	ldr	r3, [pc, #24]	; (801c8b0 <nema_blender_init+0x54>)
 801c898:	701a      	strb	r2, [r3, #0]
 801c89a:	d005      	beq.n	801c8a8 <nema_blender_init+0x4c>
 801c89c:	2200      	movs	r2, #0
 801c89e:	4b05      	ldr	r3, [pc, #20]	; (801c8b4 <nema_blender_init+0x58>)
 801c8a0:	2001      	movs	r0, #1
 801c8a2:	601a      	str	r2, [r3, #0]
 801c8a4:	f7ff f97c 	bl	801bba0 <nema_set_rop_blend_mode>
 801c8a8:	b005      	add	sp, #20
 801c8aa:	bd30      	pop	{r4, r5, pc}
 801c8ac:	08029798 	.word	0x08029798
 801c8b0:	20198385 	.word	0x20198385
 801c8b4:	20000064 	.word	0x20000064

0801c8b8 <nema_set_blend>:
 801c8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8bc:	4ca5      	ldr	r4, [pc, #660]	; (801cb54 <nema_set_blend+0x29c>)
 801c8be:	4683      	mov	fp, r0
 801c8c0:	7820      	ldrb	r0, [r4, #0]
 801c8c2:	b0a7      	sub	sp, #156	; 0x9c
 801c8c4:	9102      	str	r1, [sp, #8]
 801c8c6:	9200      	str	r2, [sp, #0]
 801c8c8:	2800      	cmp	r0, #0
 801c8ca:	f040 8233 	bne.w	801cd34 <nema_set_blend+0x47c>
 801c8ce:	469a      	mov	sl, r3
 801c8d0:	465c      	mov	r4, fp
 801c8d2:	ea4f 535b 	mov.w	r3, fp, lsr #21
 801c8d6:	055b      	lsls	r3, r3, #21
 801c8d8:	930e      	str	r3, [sp, #56]	; 0x38
 801c8da:	f40b 0300 	and.w	r3, fp, #8388608	; 0x800000
 801c8de:	930c      	str	r3, [sp, #48]	; 0x30
 801c8e0:	f40b 0380 	and.w	r3, fp, #4194304	; 0x400000
 801c8e4:	f00b 010f 	and.w	r1, fp, #15
 801c8e8:	930d      	str	r3, [sp, #52]	; 0x34
 801c8ea:	f40b 1300 	and.w	r3, fp, #2097152	; 0x200000
 801c8ee:	930b      	str	r3, [sp, #44]	; 0x2c
 801c8f0:	9101      	str	r1, [sp, #4]
 801c8f2:	b2d2      	uxtb	r2, r2
 801c8f4:	fa5f f38a 	uxtb.w	r3, sl
 801c8f8:	f3cb 2903 	ubfx	r9, fp, #8, #4
 801c8fc:	f00b 7100 	and.w	r1, fp, #33554432	; 0x2000000
 801c900:	f3cb 6840 	ubfx	r8, fp, #25, #1
 801c904:	9d02      	ldr	r5, [sp, #8]
 801c906:	b2e8      	uxtb	r0, r5
 801c908:	2804      	cmp	r0, #4
 801c90a:	4628      	mov	r0, r5
 801c90c:	bf28      	it	cs
 801c90e:	2000      	movcs	r0, #0
 801c910:	2a04      	cmp	r2, #4
 801c912:	9a00      	ldr	r2, [sp, #0]
 801c914:	bf28      	it	cs
 801c916:	f04f 32ff 	movcs.w	r2, #4294967295
 801c91a:	2b04      	cmp	r3, #4
 801c91c:	9002      	str	r0, [sp, #8]
 801c91e:	9200      	str	r2, [sp, #0]
 801c920:	bf28      	it	cs
 801c922:	4682      	movcs	sl, r0
 801c924:	4602      	mov	r2, r0
 801c926:	bf34      	ite	cc
 801c928:	4650      	movcc	r0, sl
 801c92a:	2002      	movcs	r0, #2
 801c92c:	4b8a      	ldr	r3, [pc, #552]	; (801cb58 <nema_set_blend+0x2a0>)
 801c92e:	9010      	str	r0, [sp, #64]	; 0x40
 801c930:	781b      	ldrb	r3, [r3, #0]
 801c932:	b14b      	cbz	r3, 801c948 <nema_set_blend+0x90>
 801c934:	f01b 7380 	ands.w	r3, fp, #16777216	; 0x1000000
 801c938:	9303      	str	r3, [sp, #12]
 801c93a:	d102      	bne.n	801c942 <nema_set_blend+0x8a>
 801c93c:	4552      	cmp	r2, sl
 801c93e:	f000 830c 	beq.w	801cf5a <nema_set_blend+0x6a2>
 801c942:	2001      	movs	r0, #1
 801c944:	f7ff f92c 	bl	801bba0 <nema_set_rop_blend_mode>
 801c948:	2c00      	cmp	r4, #0
 801c94a:	bfac      	ite	ge
 801c94c:	4642      	movge	r2, r8
 801c94e:	2201      	movlt	r2, #1
 801c950:	4b82      	ldr	r3, [pc, #520]	; (801cb5c <nema_set_blend+0x2a4>)
 801c952:	f1bb 0f01 	cmp.w	fp, #1
 801c956:	789b      	ldrb	r3, [r3, #2]
 801c958:	9207      	str	r2, [sp, #28]
 801c95a:	9305      	str	r3, [sp, #20]
 801c95c:	f000 80e0 	beq.w	801cb20 <nema_set_blend+0x268>
 801c960:	f00b 4380 	and.w	r3, fp, #1073741824	; 0x40000000
 801c964:	9315      	str	r3, [sp, #84]	; 0x54
 801c966:	f3cb 7380 	ubfx	r3, fp, #30, #1
 801c96a:	9306      	str	r3, [sp, #24]
 801c96c:	f00b 5300 	and.w	r3, fp, #536870912	; 0x20000000
 801c970:	9309      	str	r3, [sp, #36]	; 0x24
 801c972:	9b01      	ldr	r3, [sp, #4]
 801c974:	f00b 5280 	and.w	r2, fp, #268435456	; 0x10000000
 801c978:	2b05      	cmp	r3, #5
 801c97a:	f240 80df 	bls.w	801cb3c <nema_set_blend+0x284>
 801c97e:	2301      	movs	r3, #1
 801c980:	930a      	str	r3, [sp, #40]	; 0x28
 801c982:	9304      	str	r3, [sp, #16]
 801c984:	2303      	movs	r3, #3
 801c986:	4976      	ldr	r1, [pc, #472]	; (801cb60 <nema_set_blend+0x2a8>)
 801c988:	9303      	str	r3, [sp, #12]
 801c98a:	9108      	str	r1, [sp, #32]
 801c98c:	4d75      	ldr	r5, [pc, #468]	; (801cb64 <nema_set_blend+0x2ac>)
 801c98e:	2a00      	cmp	r2, #0
 801c990:	4b75      	ldr	r3, [pc, #468]	; (801cb68 <nema_set_blend+0x2b0>)
 801c992:	bf18      	it	ne
 801c994:	462b      	movne	r3, r5
 801c996:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 801c99a:	f105 0502 	add.w	r5, r5, #2
 801c99e:	9312      	str	r3, [sp, #72]	; 0x48
 801c9a0:	4b72      	ldr	r3, [pc, #456]	; (801cb6c <nema_set_blend+0x2b4>)
 801c9a2:	bf08      	it	eq
 801c9a4:	462b      	moveq	r3, r5
 801c9a6:	f8df e20c 	ldr.w	lr, [pc, #524]	; 801cbb4 <nema_set_blend+0x2fc>
 801c9aa:	f8df c20c 	ldr.w	ip, [pc, #524]	; 801cbb8 <nema_set_blend+0x300>
 801c9ae:	9311      	str	r3, [sp, #68]	; 0x44
 801c9b0:	bf14      	ite	ne
 801c9b2:	4673      	movne	r3, lr
 801c9b4:	4663      	moveq	r3, ip
 801c9b6:	4f6e      	ldr	r7, [pc, #440]	; (801cb70 <nema_set_blend+0x2b8>)
 801c9b8:	9314      	str	r3, [sp, #80]	; 0x50
 801c9ba:	4b6e      	ldr	r3, [pc, #440]	; (801cb74 <nema_set_blend+0x2bc>)
 801c9bc:	bf18      	it	ne
 801c9be:	463b      	movne	r3, r7
 801c9c0:	f5a5 25c8 	sub.w	r5, r5, #409600	; 0x64000
 801c9c4:	9313      	str	r3, [sp, #76]	; 0x4c
 801c9c6:	4b6c      	ldr	r3, [pc, #432]	; (801cb78 <nema_set_blend+0x2c0>)
 801c9c8:	f1a5 0542 	sub.w	r5, r5, #66	; 0x42
 801c9cc:	496b      	ldr	r1, [pc, #428]	; (801cb7c <nema_set_blend+0x2c4>)
 801c9ce:	bf18      	it	ne
 801c9d0:	4619      	movne	r1, r3
 801c9d2:	f1a3 033e 	sub.w	r3, r3, #62	; 0x3e
 801c9d6:	bf18      	it	ne
 801c9d8:	462b      	movne	r3, r5
 801c9da:	4e69      	ldr	r6, [pc, #420]	; (801cb80 <nema_set_blend+0x2c8>)
 801c9dc:	4f69      	ldr	r7, [pc, #420]	; (801cb84 <nema_set_blend+0x2cc>)
 801c9de:	461d      	mov	r5, r3
 801c9e0:	4b69      	ldr	r3, [pc, #420]	; (801cb88 <nema_set_blend+0x2d0>)
 801c9e2:	486a      	ldr	r0, [pc, #424]	; (801cb8c <nema_set_blend+0x2d4>)
 801c9e4:	bf18      	it	ne
 801c9e6:	4630      	movne	r0, r6
 801c9e8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 801c9ec:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 801cbbc <nema_set_blend+0x304>
 801c9f0:	f506 3650 	add.w	r6, r6, #212992	; 0x34000
 801c9f4:	bf04      	itt	eq
 801c9f6:	46bc      	moveq	ip, r7
 801c9f8:	461e      	moveq	r6, r3
 801c9fa:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 801c9fe:	f1a3 0340 	sub.w	r3, r3, #64	; 0x40
 801ca02:	f1a7 0742 	sub.w	r7, r7, #66	; 0x42
 801ca06:	bf08      	it	eq
 801ca08:	461f      	moveq	r7, r3
 801ca0a:	4c61      	ldr	r4, [pc, #388]	; (801cb90 <nema_set_blend+0x2d8>)
 801ca0c:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 801cbc0 <nema_set_blend+0x308>
 801ca10:	4a60      	ldr	r2, [pc, #384]	; (801cb94 <nema_set_blend+0x2dc>)
 801ca12:	bf18      	it	ne
 801ca14:	4622      	movne	r2, r4
 801ca16:	f504 3450 	add.w	r4, r4, #212992	; 0x34000
 801ca1a:	bf08      	it	eq
 801ca1c:	4674      	moveq	r4, lr
 801ca1e:	f8dd e018 	ldr.w	lr, [sp, #24]
 801ca22:	f1b8 0f00 	cmp.w	r8, #0
 801ca26:	f040 8109 	bne.w	801cc3c <nema_set_blend+0x384>
 801ca2a:	9b07      	ldr	r3, [sp, #28]
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	bf0c      	ite	eq
 801ca30:	2300      	moveq	r3, #0
 801ca32:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 801ca36:	930f      	str	r3, [sp, #60]	; 0x3c
 801ca38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	f040 8105 	bne.w	801cc4a <nema_set_blend+0x392>
 801ca40:	f01b 6f80 	tst.w	fp, #67108864	; 0x4000000
 801ca44:	f000 81b4 	beq.w	801cdb0 <nema_set_blend+0x4f8>
 801ca48:	4684      	mov	ip, r0
 801ca4a:	460e      	mov	r6, r1
 801ca4c:	4614      	mov	r4, r2
 801ca4e:	462f      	mov	r7, r5
 801ca50:	f04f 0804 	mov.w	r8, #4
 801ca54:	2200      	movs	r2, #0
 801ca56:	4850      	ldr	r0, [pc, #320]	; (801cb98 <nema_set_blend+0x2e0>)
 801ca58:	f00b 53c0 	and.w	r3, fp, #402653184	; 0x18000000
 801ca5c:	4293      	cmp	r3, r2
 801ca5e:	f850 302a 	ldr.w	r3, [r0, sl, lsl #2]
 801ca62:	bf18      	it	ne
 801ca64:	463e      	movne	r6, r7
 801ca66:	9309      	str	r3, [sp, #36]	; 0x24
 801ca68:	9b05      	ldr	r3, [sp, #20]
 801ca6a:	bf16      	itet	ne
 801ca6c:	46a4      	movne	ip, r4
 801ca6e:	270e      	moveq	r7, #14
 801ca70:	270c      	movne	r7, #12
 801ca72:	9216      	str	r2, [sp, #88]	; 0x58
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	f000 80eb 	beq.w	801cc50 <nema_set_blend+0x398>
 801ca7a:	4b48      	ldr	r3, [pc, #288]	; (801cb9c <nema_set_blend+0x2e4>)
 801ca7c:	4948      	ldr	r1, [pc, #288]	; (801cba0 <nema_set_blend+0x2e8>)
 801ca7e:	9800      	ldr	r0, [sp, #0]
 801ca80:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
 801ca84:	1c43      	adds	r3, r0, #1
 801ca86:	f000 8257 	beq.w	801cf38 <nema_set_blend+0x680>
 801ca8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801ca8e:	4b45      	ldr	r3, [pc, #276]	; (801cba4 <nema_set_blend+0x2ec>)
 801ca90:	9204      	str	r2, [sp, #16]
 801ca92:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801ca96:	e9cd 3118 	strd	r3, r1, [sp, #96]	; 0x60
 801ca9a:	2203      	movs	r2, #3
 801ca9c:	2102      	movs	r1, #2
 801ca9e:	4c42      	ldr	r4, [pc, #264]	; (801cba8 <nema_set_blend+0x2f0>)
 801caa0:	f1b9 0f01 	cmp.w	r9, #1
 801caa4:	f240 8110 	bls.w	801ccc8 <nema_set_blend+0x410>
 801caa8:	9b01      	ldr	r3, [sp, #4]
 801caaa:	2b05      	cmp	r3, #5
 801caac:	d803      	bhi.n	801cab6 <nema_set_blend+0x1fe>
 801caae:	f01b 5f70 	tst.w	fp, #1006632960	; 0x3c000000
 801cab2:	f000 8087 	beq.w	801cbc4 <nema_set_blend+0x30c>
 801cab6:	9b03      	ldr	r3, [sp, #12]
 801cab8:	b933      	cbnz	r3, 801cac8 <nema_set_blend+0x210>
 801caba:	f1b9 0f00 	cmp.w	r9, #0
 801cabe:	d103      	bne.n	801cac8 <nema_set_blend+0x210>
 801cac0:	9b07      	ldr	r3, [sp, #28]
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	f000 81ca 	beq.w	801ce5c <nema_set_blend+0x5a4>
 801cac8:	f1b8 0f1d 	cmp.w	r8, #29
 801cacc:	f000 8150 	beq.w	801cd70 <nema_set_blend+0x4b8>
 801cad0:	4b36      	ldr	r3, [pc, #216]	; (801cbac <nema_set_blend+0x2f4>)
 801cad2:	a826      	add	r0, sp, #152	; 0x98
 801cad4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801cad8:	ea43 13ca 	orr.w	r3, r3, sl, lsl #7
 801cadc:	9803      	ldr	r0, [sp, #12]
 801cade:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 801cae2:	4303      	orrs	r3, r0
 801cae4:	e941 3c10 	strd	r3, ip, [r1, #-64]	; 0x40
 801cae8:	1c55      	adds	r5, r2, #1
 801caea:	f1b9 0f00 	cmp.w	r9, #0
 801caee:	f040 8150 	bne.w	801cd92 <nema_set_blend+0x4da>
 801caf2:	46ce      	mov	lr, r9
 801caf4:	4b2d      	ldr	r3, [pc, #180]	; (801cbac <nema_set_blend+0x2f4>)
 801caf6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801cafa:	f8cd 9018 	str.w	r9, [sp, #24]
 801cafe:	9308      	str	r3, [sp, #32]
 801cb00:	9b07      	ldr	r3, [sp, #28]
 801cb02:	2b00      	cmp	r3, #0
 801cb04:	d163      	bne.n	801cbce <nema_set_blend+0x316>
 801cb06:	4b2a      	ldr	r3, [pc, #168]	; (801cbb0 <nema_set_blend+0x2f8>)
 801cb08:	f8dd a008 	ldr.w	sl, [sp, #8]
 801cb0c:	9308      	str	r3, [sp, #32]
 801cb0e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801cb12:	9f01      	ldr	r7, [sp, #4]
 801cb14:	e061      	b.n	801cbda <nema_set_blend+0x322>
 801cb16:	f04f 0900 	mov.w	r9, #0
 801cb1a:	46c8      	mov	r8, r9
 801cb1c:	f8cd 901c 	str.w	r9, [sp, #28]
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	f000 8153 	beq.w	801cdcc <nema_set_blend+0x514>
 801cb26:	9b01      	ldr	r3, [sp, #4]
 801cb28:	2b05      	cmp	r3, #5
 801cb2a:	f200 8169 	bhi.w	801ce00 <nema_set_blend+0x548>
 801cb2e:	2300      	movs	r3, #0
 801cb30:	f04f 0b01 	mov.w	fp, #1
 801cb34:	461a      	mov	r2, r3
 801cb36:	9306      	str	r3, [sp, #24]
 801cb38:	9309      	str	r3, [sp, #36]	; 0x24
 801cb3a:	9315      	str	r3, [sp, #84]	; 0x54
 801cb3c:	9b07      	ldr	r3, [sp, #28]
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	f000 8200 	beq.w	801cf44 <nema_set_blend+0x68c>
 801cb44:	930a      	str	r3, [sp, #40]	; 0x28
 801cb46:	4b06      	ldr	r3, [pc, #24]	; (801cb60 <nema_set_blend+0x2a8>)
 801cb48:	2001      	movs	r0, #1
 801cb4a:	9308      	str	r3, [sp, #32]
 801cb4c:	2303      	movs	r3, #3
 801cb4e:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801cb52:	e71b      	b.n	801c98c <nema_set_blend+0xd4>
 801cb54:	20198384 	.word	0x20198384
 801cb58:	20198385 	.word	0x20198385
 801cb5c:	20198594 	.word	0x20198594
 801cb60:	080c0003 	.word	0x080c0003
 801cb64:	000761c5 	.word	0x000761c5
 801cb68:	000761c7 	.word	0x000761c7
 801cb6c:	800761c5 	.word	0x800761c5
 801cb70:	80076185 	.word	0x80076185
 801cb74:	80076187 	.word	0x80076187
 801cb78:	800121c5 	.word	0x800121c5
 801cb7c:	800121c7 	.word	0x800121c7
 801cb80:	000121c5 	.word	0x000121c5
 801cb84:	000461c7 	.word	0x000461c7
 801cb88:	800461c7 	.word	0x800461c7
 801cb8c:	000121c7 	.word	0x000121c7
 801cb90:	00012185 	.word	0x00012185
 801cb94:	00012187 	.word	0x00012187
 801cb98:	0802aba8 	.word	0x0802aba8
 801cb9c:	02009408 	.word	0x02009408
 801cba0:	00f40182 	.word	0x00f40182
 801cba4:	000c100b 	.word	0x000c100b
 801cba8:	1000fc00 	.word	0x1000fc00
 801cbac:	080c0000 	.word	0x080c0000
 801cbb0:	080c0002 	.word	0x080c0002
 801cbb4:	00076185 	.word	0x00076185
 801cbb8:	00076187 	.word	0x00076187
 801cbbc:	000461c5 	.word	0x000461c5
 801cbc0:	00046187 	.word	0x00046187
 801cbc4:	4615      	mov	r5, r2
 801cbc6:	460a      	mov	r2, r1
 801cbc8:	f1b9 0f00 	cmp.w	r9, #0
 801cbcc:	d098      	beq.n	801cb00 <nema_set_blend+0x248>
 801cbce:	9b06      	ldr	r3, [sp, #24]
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	f000 8202 	beq.w	801cfda <nema_set_blend+0x722>
 801cbd6:	2600      	movs	r6, #0
 801cbd8:	9f01      	ldr	r7, [sp, #4]
 801cbda:	48c1      	ldr	r0, [pc, #772]	; (801cee0 <nema_set_blend+0x628>)
 801cbdc:	49c1      	ldr	r1, [pc, #772]	; (801cee4 <nema_set_blend+0x62c>)
 801cbde:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
 801cbe2:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801cbe6:	015b      	lsls	r3, r3, #5
 801cbe8:	ea43 3387 	orr.w	r3, r3, r7, lsl #14
 801cbec:	9f08      	ldr	r7, [sp, #32]
 801cbee:	ea47 5e0e 	orr.w	lr, r7, lr, lsl #20
 801cbf2:	4fbd      	ldr	r7, [pc, #756]	; (801cee8 <nema_set_blend+0x630>)
 801cbf4:	ea4e 1eca 	orr.w	lr, lr, sl, lsl #7
 801cbf8:	431f      	orrs	r7, r3
 801cbfa:	ab26      	add	r3, sp, #152	; 0x98
 801cbfc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801cc00:	4337      	orrs	r7, r6
 801cc02:	e942 e710 	strd	lr, r7, [r2, #-64]	; 0x40
 801cc06:	2e00      	cmp	r6, #0
 801cc08:	f000 813f 	beq.w	801ce8a <nema_set_blend+0x5d2>
 801cc0c:	9804      	ldr	r0, [sp, #16]
 801cc0e:	f7fe fead 	bl	801b96c <nema_matmul_bypass>
 801cc12:	4629      	mov	r1, r5
 801cc14:	2200      	movs	r2, #0
 801cc16:	a816      	add	r0, sp, #88	; 0x58
 801cc18:	f7fe ffa2 	bl	801bb60 <nema_load_frag_shader>
 801cc1c:	4bb3      	ldr	r3, [pc, #716]	; (801ceec <nema_set_blend+0x634>)
 801cc1e:	f1c5 0520 	rsb	r5, r5, #32
 801cc22:	6818      	ldr	r0, [r3, #0]
 801cc24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc26:	ea43 0800 	orr.w	r8, r3, r0
 801cc2a:	ea48 0005 	orr.w	r0, r8, r5
 801cc2e:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 801cc32:	f7fe ffaf 	bl	801bb94 <nema_set_frag_ptr>
 801cc36:	b027      	add	sp, #156	; 0x9c
 801cc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801cc40:	930f      	str	r3, [sp, #60]	; 0x3c
 801cc42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	f43f aefb 	beq.w	801ca40 <nema_set_blend+0x188>
 801cc4a:	f04f 0811 	mov.w	r8, #17
 801cc4e:	e701      	b.n	801ca54 <nema_set_blend+0x19c>
 801cc50:	9b00      	ldr	r3, [sp, #0]
 801cc52:	1c5a      	adds	r2, r3, #1
 801cc54:	f000 8136 	beq.w	801cec4 <nema_set_blend+0x60c>
 801cc58:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801cc5c:	9a05      	ldr	r2, [sp, #20]
 801cc5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801cc62:	9204      	str	r2, [sp, #16]
 801cc64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cc66:	2a00      	cmp	r2, #0
 801cc68:	f000 80a9 	beq.w	801cdbe <nema_set_blend+0x506>
 801cc6c:	f44f 2440 	mov.w	r4, #786432	; 0xc0000
 801cc70:	499f      	ldr	r1, [pc, #636]	; (801cef0 <nema_set_blend+0x638>)
 801cc72:	4aa0      	ldr	r2, [pc, #640]	; (801cef4 <nema_set_blend+0x63c>)
 801cc74:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 801cc78:	9219      	str	r2, [sp, #100]	; 0x64
 801cc7a:	2204      	movs	r2, #4
 801cc7c:	9116      	str	r1, [sp, #88]	; 0x58
 801cc7e:	9205      	str	r2, [sp, #20]
 801cc80:	2102      	movs	r1, #2
 801cc82:	2203      	movs	r2, #3
 801cc84:	e9cd 5417 	strd	r5, r4, [sp, #92]	; 0x5c
 801cc88:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cc8a:	2c00      	cmp	r4, #0
 801cc8c:	d04f      	beq.n	801cd2e <nema_set_blend+0x476>
 801cc8e:	9c00      	ldr	r4, [sp, #0]
 801cc90:	f1b4 3fff 	cmp.w	r4, #4294967295
 801cc94:	d04b      	beq.n	801cd2e <nema_set_blend+0x476>
 801cc96:	f241 050b 	movw	r5, #4107	; 0x100b
 801cc9a:	2300      	movs	r3, #0
 801cc9c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 801cca0:	a826      	add	r0, sp, #152	; 0x98
 801cca2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801cca6:	9910      	ldr	r1, [sp, #64]	; 0x40
 801cca8:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 801ccac:	ea45 11c1 	orr.w	r1, r5, r1, lsl #7
 801ccb0:	f1b9 0f01 	cmp.w	r9, #1
 801ccb4:	f840 1c40 	str.w	r1, [r0, #-64]
 801ccb8:	f444 4420 	orr.w	r4, r4, #40960	; 0xa000
 801ccbc:	4611      	mov	r1, r2
 801ccbe:	f840 3c3c 	str.w	r3, [r0, #-60]
 801ccc2:	9a05      	ldr	r2, [sp, #20]
 801ccc4:	f63f aef0 	bhi.w	801caa8 <nema_set_blend+0x1f0>
 801ccc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	f47f aeec 	bne.w	801caa8 <nema_set_blend+0x1f0>
 801ccd0:	9b00      	ldr	r3, [sp, #0]
 801ccd2:	3301      	adds	r3, #1
 801ccd4:	f47f aee8 	bne.w	801caa8 <nema_set_blend+0x1f0>
 801ccd8:	9b02      	ldr	r3, [sp, #8]
 801ccda:	4553      	cmp	r3, sl
 801ccdc:	f47f aee4 	bne.w	801caa8 <nema_set_blend+0x1f0>
 801cce0:	f1b9 0f00 	cmp.w	r9, #0
 801cce4:	bf15      	itete	ne
 801cce6:	f44f 6600 	movne.w	r6, #2048	; 0x800
 801ccea:	f44f 5600 	moveq.w	r6, #8192	; 0x2000
 801ccee:	f44f 1500 	movne.w	r5, #2097152	; 0x200000
 801ccf2:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
 801ccf6:	9f01      	ldr	r7, [sp, #4]
 801ccf8:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 801cee0 <nema_set_blend+0x628>
 801ccfc:	4879      	ldr	r0, [pc, #484]	; (801cee4 <nema_set_blend+0x62c>)
 801ccfe:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 801cd02:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
 801cd06:	015b      	lsls	r3, r3, #5
 801cd08:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 801cd0c:	f043 430a 	orr.w	r3, r3, #2315255808	; 0x8a000000
 801cd10:	f043 0306 	orr.w	r3, r3, #6
 801cd14:	4333      	orrs	r3, r6
 801cd16:	432b      	orrs	r3, r5
 801cd18:	4877      	ldr	r0, [pc, #476]	; (801cef8 <nema_set_blend+0x640>)
 801cd1a:	9d02      	ldr	r5, [sp, #8]
 801cd1c:	ae26      	add	r6, sp, #152	; 0x98
 801cd1e:	ea40 10c5 	orr.w	r0, r0, r5, lsl #7
 801cd22:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 801cd26:	4615      	mov	r5, r2
 801cd28:	e941 0310 	strd	r0, r3, [r1, #-64]	; 0x40
 801cd2c:	e76e      	b.n	801cc0c <nema_set_blend+0x354>
 801cd2e:	f043 5480 	orr.w	r4, r3, #268435456	; 0x10000000
 801cd32:	e6b5      	b.n	801caa0 <nema_set_blend+0x1e8>
 801cd34:	f04f 3020 	mov.w	r0, #538976288	; 0x20202020
 801cd38:	f7fe ff44 	bl	801bbc4 <nema_set_raster_color>
 801cd3c:	2000      	movs	r0, #0
 801cd3e:	f7fd ff93 	bl	801ac68 <nema_enable_gradient>
 801cd42:	f04f 0800 	mov.w	r8, #0
 801cd46:	f04f 0901 	mov.w	r9, #1
 801cd4a:	23ff      	movs	r3, #255	; 0xff
 801cd4c:	f240 1401 	movw	r4, #257	; 0x101
 801cd50:	f04f 3aff 	mov.w	sl, #4294967295
 801cd54:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801cd58:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801cd5c:	e9cd 880c 	strd	r8, r8, [sp, #48]	; 0x30
 801cd60:	4641      	mov	r1, r8
 801cd62:	f8cd 9004 	str.w	r9, [sp, #4]
 801cd66:	461a      	mov	r2, r3
 801cd68:	46a3      	mov	fp, r4
 801cd6a:	f8cd a000 	str.w	sl, [sp]
 801cd6e:	e5c9      	b.n	801c904 <nema_set_blend+0x4c>
 801cd70:	2f0e      	cmp	r7, #14
 801cd72:	f47f aead 	bne.w	801cad0 <nema_set_blend+0x218>
 801cd76:	9b03      	ldr	r3, [sp, #12]
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	f47f aea9 	bne.w	801cad0 <nema_set_blend+0x218>
 801cd7e:	9b06      	ldr	r3, [sp, #24]
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	f47f aea5 	bne.w	801cad0 <nema_set_blend+0x218>
 801cd86:	4615      	mov	r5, r2
 801cd88:	460a      	mov	r2, r1
 801cd8a:	f1b9 0f00 	cmp.w	r9, #0
 801cd8e:	f43f aeb0 	beq.w	801caf2 <nema_set_blend+0x23a>
 801cd92:	f04f 0e00 	mov.w	lr, #0
 801cd96:	4b59      	ldr	r3, [pc, #356]	; (801cefc <nema_set_blend+0x644>)
 801cd98:	9308      	str	r3, [sp, #32]
 801cd9a:	9b01      	ldr	r3, [sp, #4]
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	f000 8123 	beq.w	801cfe8 <nema_set_blend+0x730>
 801cda2:	2b01      	cmp	r3, #1
 801cda4:	f04f 0600 	mov.w	r6, #0
 801cda8:	f000 8137 	beq.w	801d01a <nema_set_blend+0x762>
 801cdac:	461f      	mov	r7, r3
 801cdae:	e714      	b.n	801cbda <nema_set_blend+0x322>
 801cdb0:	e9dd 6c11 	ldrd	r6, ip, [sp, #68]	; 0x44
 801cdb4:	e9dd 7413 	ldrd	r7, r4, [sp, #76]	; 0x4c
 801cdb8:	f04f 081d 	mov.w	r8, #29
 801cdbc:	e64a      	b.n	801ca54 <nema_set_blend+0x19c>
 801cdbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cdc0:	2a00      	cmp	r2, #0
 801cdc2:	d046      	beq.n	801ce52 <nema_set_blend+0x59a>
 801cdc4:	f44f 2440 	mov.w	r4, #786432	; 0xc0000
 801cdc8:	494d      	ldr	r1, [pc, #308]	; (801cf00 <nema_set_blend+0x648>)
 801cdca:	e752      	b.n	801cc72 <nema_set_blend+0x3ba>
 801cdcc:	9b02      	ldr	r3, [sp, #8]
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	f47f aea9 	bne.w	801cb26 <nema_set_blend+0x26e>
 801cdd4:	9b00      	ldr	r3, [sp, #0]
 801cdd6:	3301      	adds	r3, #1
 801cdd8:	f000 8114 	beq.w	801d004 <nema_set_blend+0x74c>
 801cddc:	9802      	ldr	r0, [sp, #8]
 801cdde:	f7fe fdc5 	bl	801b96c <nema_matmul_bypass>
 801cde2:	4b42      	ldr	r3, [pc, #264]	; (801ceec <nema_set_blend+0x634>)
 801cde4:	4947      	ldr	r1, [pc, #284]	; (801cf04 <nema_set_blend+0x64c>)
 801cde6:	9800      	ldr	r0, [sp, #0]
 801cde8:	681a      	ldr	r2, [r3, #0]
 801cdea:	4b47      	ldr	r3, [pc, #284]	; (801cf08 <nema_set_blend+0x650>)
 801cdec:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 801cdf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cdf4:	4318      	orrs	r0, r3
 801cdf6:	f7fe fecd 	bl	801bb94 <nema_set_frag_ptr>
 801cdfa:	b027      	add	sp, #156	; 0x9c
 801cdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce00:	2301      	movs	r3, #1
 801ce02:	930a      	str	r3, [sp, #40]	; 0x28
 801ce04:	9304      	str	r3, [sp, #16]
 801ce06:	469b      	mov	fp, r3
 801ce08:	2303      	movs	r3, #3
 801ce0a:	f04f 0e00 	mov.w	lr, #0
 801ce0e:	9303      	str	r3, [sp, #12]
 801ce10:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801ce14:	f503 2340 	add.w	r3, r3, #786432	; 0xc0000
 801ce18:	9308      	str	r3, [sp, #32]
 801ce1a:	4b3c      	ldr	r3, [pc, #240]	; (801cf0c <nema_set_blend+0x654>)
 801ce1c:	f8cd e018 	str.w	lr, [sp, #24]
 801ce20:	9312      	str	r3, [sp, #72]	; 0x48
 801ce22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ce26:	9311      	str	r3, [sp, #68]	; 0x44
 801ce28:	4b39      	ldr	r3, [pc, #228]	; (801cf10 <nema_set_blend+0x658>)
 801ce2a:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 801ce2e:	9314      	str	r3, [sp, #80]	; 0x50
 801ce30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ce34:	9313      	str	r3, [sp, #76]	; 0x4c
 801ce36:	f5a3 23c8 	sub.w	r3, r3, #409600	; 0x64000
 801ce3a:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 801ce3e:	4835      	ldr	r0, [pc, #212]	; (801cf14 <nema_set_blend+0x65c>)
 801ce40:	4935      	ldr	r1, [pc, #212]	; (801cf18 <nema_set_blend+0x660>)
 801ce42:	4a36      	ldr	r2, [pc, #216]	; (801cf1c <nema_set_blend+0x664>)
 801ce44:	461d      	mov	r5, r3
 801ce46:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 801cf34 <nema_set_blend+0x67c>
 801ce4a:	4e35      	ldr	r6, [pc, #212]	; (801cf20 <nema_set_blend+0x668>)
 801ce4c:	4c35      	ldr	r4, [pc, #212]	; (801cf24 <nema_set_blend+0x66c>)
 801ce4e:	4f36      	ldr	r7, [pc, #216]	; (801cf28 <nema_set_blend+0x670>)
 801ce50:	e5e7      	b.n	801ca22 <nema_set_blend+0x16a>
 801ce52:	4611      	mov	r1, r2
 801ce54:	2202      	movs	r2, #2
 801ce56:	9205      	str	r2, [sp, #20]
 801ce58:	2201      	movs	r2, #1
 801ce5a:	e715      	b.n	801cc88 <nema_set_blend+0x3d0>
 801ce5c:	9b01      	ldr	r3, [sp, #4]
 801ce5e:	2b01      	cmp	r3, #1
 801ce60:	f47f ae32 	bne.w	801cac8 <nema_set_blend+0x210>
 801ce64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	f47f ae2e 	bne.w	801cac8 <nema_set_blend+0x210>
 801ce6c:	a826      	add	r0, sp, #152	; 0x98
 801ce6e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801ce72:	4b21      	ldr	r3, [pc, #132]	; (801cef8 <nema_set_blend+0x640>)
 801ce74:	9802      	ldr	r0, [sp, #8]
 801ce76:	f841 6c3c 	str.w	r6, [r1, #-60]
 801ce7a:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801ce7e:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 801ce82:	4615      	mov	r5, r2
 801ce84:	f841 3c40 	str.w	r3, [r1, #-64]
 801ce88:	e6c0      	b.n	801cc0c <nema_set_blend+0x354>
 801ce8a:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 801ce8e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 801ce92:	462a      	mov	r2, r5
 801ce94:	3501      	adds	r5, #1
 801ce96:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 801ce9a:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
 801ce9e:	0140      	lsls	r0, r0, #5
 801cea0:	4b22      	ldr	r3, [pc, #136]	; (801cf2c <nema_set_blend+0x674>)
 801cea2:	ea40 3081 	orr.w	r0, r0, r1, lsl #14
 801cea6:	4303      	orrs	r3, r0
 801cea8:	4921      	ldr	r1, [pc, #132]	; (801cf30 <nema_set_blend+0x678>)
 801ceaa:	9802      	ldr	r0, [sp, #8]
 801ceac:	433b      	orrs	r3, r7
 801ceae:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 801ceb2:	a826      	add	r0, sp, #152	; 0x98
 801ceb4:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 801ceb8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ceba:	4333      	orrs	r3, r6
 801cebc:	4301      	orrs	r1, r0
 801cebe:	e942 1310 	strd	r1, r3, [r2, #-64]	; 0x40
 801cec2:	e6a3      	b.n	801cc0c <nema_set_blend+0x354>
 801cec4:	9b04      	ldr	r3, [sp, #16]
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	f000 8082 	beq.w	801cfd0 <nema_set_blend+0x718>
 801cecc:	9a05      	ldr	r2, [sp, #20]
 801cece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ced0:	9203      	str	r2, [sp, #12]
 801ced2:	920a      	str	r2, [sp, #40]	; 0x28
 801ced4:	4a09      	ldr	r2, [pc, #36]	; (801cefc <nema_set_blend+0x644>)
 801ced6:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 801ceda:	9208      	str	r2, [sp, #32]
 801cedc:	e6c2      	b.n	801cc64 <nema_set_blend+0x3ac>
 801cede:	bf00      	nop
 801cee0:	0802abb8 	.word	0x0802abb8
 801cee4:	0802abe8 	.word	0x0802abe8
 801cee8:	0a002007 	.word	0x0a002007
 801ceec:	20000064 	.word	0x20000064
 801cef0:	100c118b 	.word	0x100c118b
 801cef4:	0081a042 	.word	0x0081a042
 801cef8:	080c0002 	.word	0x080c0002
 801cefc:	080c0000 	.word	0x080c0000
 801cf00:	100c1183 	.word	0x100c1183
 801cf04:	0802aba8 	.word	0x0802aba8
 801cf08:	141f801f 	.word	0x141f801f
 801cf0c:	000761c7 	.word	0x000761c7
 801cf10:	00076187 	.word	0x00076187
 801cf14:	000121c7 	.word	0x000121c7
 801cf18:	800121c7 	.word	0x800121c7
 801cf1c:	00012187 	.word	0x00012187
 801cf20:	800461c7 	.word	0x800461c7
 801cf24:	00046187 	.word	0x00046187
 801cf28:	80046187 	.word	0x80046187
 801cf2c:	80080206 	.word	0x80080206
 801cf30:	004e0002 	.word	0x004e0002
 801cf34:	000461c7 	.word	0x000461c7
 801cf38:	2301      	movs	r3, #1
 801cf3a:	2202      	movs	r2, #2
 801cf3c:	9304      	str	r3, [sp, #16]
 801cf3e:	4619      	mov	r1, r3
 801cf40:	4c38      	ldr	r4, [pc, #224]	; (801d024 <nema_set_blend+0x76c>)
 801cf42:	e5ad      	b.n	801caa0 <nema_set_blend+0x1e8>
 801cf44:	f1b9 0f00 	cmp.w	r9, #0
 801cf48:	d055      	beq.n	801cff6 <nema_set_blend+0x73e>
 801cf4a:	2301      	movs	r3, #1
 801cf4c:	2103      	movs	r1, #3
 801cf4e:	930a      	str	r3, [sp, #40]	; 0x28
 801cf50:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801cf54:	4b34      	ldr	r3, [pc, #208]	; (801d028 <nema_set_blend+0x770>)
 801cf56:	9308      	str	r3, [sp, #32]
 801cf58:	e518      	b.n	801c98c <nema_set_blend+0xd4>
 801cf5a:	2c00      	cmp	r4, #0
 801cf5c:	bfbd      	ittte	lt
 801cf5e:	f02b 4b00 	biclt.w	fp, fp, #2147483648	; 0x80000000
 801cf62:	f04f 4202 	movlt.w	r2, #2181038080	; 0x82000000
 801cf66:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 801cf6a:	f04f 7200 	movge.w	r2, #33554432	; 0x2000000
 801cf6e:	b111      	cbz	r1, 801cf76 <nema_set_blend+0x6be>
 801cf70:	4613      	mov	r3, r2
 801cf72:	f02b 7b00 	bic.w	fp, fp, #33554432	; 0x2000000
 801cf76:	9a01      	ldr	r2, [sp, #4]
 801cf78:	ea42 2009 	orr.w	r0, r2, r9, lsl #8
 801cf7c:	4318      	orrs	r0, r3
 801cf7e:	f7fe fe0f 	bl	801bba0 <nema_set_rop_blend_mode>
 801cf82:	ea4f 505b 	mov.w	r0, fp, lsr #21
 801cf86:	4b29      	ldr	r3, [pc, #164]	; (801d02c <nema_set_blend+0x774>)
 801cf88:	0540      	lsls	r0, r0, #21
 801cf8a:	f040 0201 	orr.w	r2, r0, #1
 801cf8e:	789b      	ldrb	r3, [r3, #2]
 801cf90:	2a01      	cmp	r2, #1
 801cf92:	9201      	str	r2, [sp, #4]
 801cf94:	9305      	str	r3, [sp, #20]
 801cf96:	f43f adbe 	beq.w	801cb16 <nema_set_blend+0x25e>
 801cf9a:	f00b 4380 	and.w	r3, fp, #1073741824	; 0x40000000
 801cf9e:	9315      	str	r3, [sp, #84]	; 0x54
 801cfa0:	f3cb 7380 	ubfx	r3, fp, #30, #1
 801cfa4:	9306      	str	r3, [sp, #24]
 801cfa6:	f00b 5300 	and.w	r3, fp, #536870912	; 0x20000000
 801cfaa:	9309      	str	r3, [sp, #36]	; 0x24
 801cfac:	2301      	movs	r3, #1
 801cfae:	f04f 0900 	mov.w	r9, #0
 801cfb2:	f00b 5280 	and.w	r2, fp, #268435456	; 0x10000000
 801cfb6:	f8dd b004 	ldr.w	fp, [sp, #4]
 801cfba:	9301      	str	r3, [sp, #4]
 801cfbc:	4b1c      	ldr	r3, [pc, #112]	; (801d030 <nema_set_blend+0x778>)
 801cfbe:	46c8      	mov	r8, r9
 801cfc0:	f8cd 901c 	str.w	r9, [sp, #28]
 801cfc4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801cfc8:	f8cd 9010 	str.w	r9, [sp, #16]
 801cfcc:	9308      	str	r3, [sp, #32]
 801cfce:	e4dd      	b.n	801c98c <nema_set_blend+0xd4>
 801cfd0:	2201      	movs	r2, #1
 801cfd2:	9b05      	ldr	r3, [sp, #20]
 801cfd4:	9204      	str	r2, [sp, #16]
 801cfd6:	930a      	str	r3, [sp, #40]	; 0x28
 801cfd8:	e644      	b.n	801cc64 <nema_set_blend+0x3ac>
 801cfda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	f43f aedc 	beq.w	801cd9a <nema_set_blend+0x4e2>
 801cfe2:	9e06      	ldr	r6, [sp, #24]
 801cfe4:	9f01      	ldr	r7, [sp, #4]
 801cfe6:	e5f8      	b.n	801cbda <nema_set_blend+0x322>
 801cfe8:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 801cfec:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 801cff0:	4910      	ldr	r1, [pc, #64]	; (801d034 <nema_set_blend+0x77c>)
 801cff2:	4811      	ldr	r0, [pc, #68]	; (801d038 <nema_set_blend+0x780>)
 801cff4:	e74f      	b.n	801ce96 <nema_set_blend+0x5de>
 801cff6:	4b0e      	ldr	r3, [pc, #56]	; (801d030 <nema_set_blend+0x778>)
 801cff8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801cffc:	9308      	str	r3, [sp, #32]
 801cffe:	e9cd 9903 	strd	r9, r9, [sp, #12]
 801d002:	e4c3      	b.n	801c98c <nema_set_blend+0xd4>
 801d004:	2001      	movs	r0, #1
 801d006:	f7fe fcb1 	bl	801b96c <nema_matmul_bypass>
 801d00a:	4a0c      	ldr	r2, [pc, #48]	; (801d03c <nema_set_blend+0x784>)
 801d00c:	4b0c      	ldr	r3, [pc, #48]	; (801d040 <nema_set_blend+0x788>)
 801d00e:	6810      	ldr	r0, [r2, #0]
 801d010:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801d014:	f7fe fdbe 	bl	801bb94 <nema_set_frag_ptr>
 801d018:	e6ef      	b.n	801cdfa <nema_set_blend+0x542>
 801d01a:	4637      	mov	r7, r6
 801d01c:	4905      	ldr	r1, [pc, #20]	; (801d034 <nema_set_blend+0x77c>)
 801d01e:	4806      	ldr	r0, [pc, #24]	; (801d038 <nema_set_blend+0x780>)
 801d020:	e739      	b.n	801ce96 <nema_set_blend+0x5de>
 801d022:	bf00      	nop
 801d024:	1000fc00 	.word	0x1000fc00
 801d028:	080c0003 	.word	0x080c0003
 801d02c:	20198594 	.word	0x20198594
 801d030:	080c0000 	.word	0x080c0000
 801d034:	0802abe8 	.word	0x0802abe8
 801d038:	0802abb8 	.word	0x0802abb8
 801d03c:	20000064 	.word	0x20000064
 801d040:	141f001f 	.word	0x141f001f

0801d044 <nema_set_const_color>:
 801d044:	b510      	push	{r4, lr}
 801d046:	4604      	mov	r4, r0
 801d048:	2001      	movs	r0, #1
 801d04a:	4621      	mov	r1, r4
 801d04c:	f7fd fde4 	bl	801ac18 <nema_set_const_reg>
 801d050:	4b04      	ldr	r3, [pc, #16]	; (801d064 <nema_set_const_color+0x20>)
 801d052:	781b      	ldrb	r3, [r3, #0]
 801d054:	b903      	cbnz	r3, 801d058 <nema_set_const_color+0x14>
 801d056:	bd10      	pop	{r4, pc}
 801d058:	4620      	mov	r0, r4
 801d05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d05e:	f7fe bda5 	b.w	801bbac <nema_set_rop_const_color>
 801d062:	bf00      	nop
 801d064:	20198385 	.word	0x20198385

0801d068 <_ZN8touchgfx8HALGPU2D17unlockFrameBufferEv>:
 801d068:	f7f8 beb0 	b.w	8015dcc <_ZN8touchgfx3HAL17unlockFrameBufferEv>

0801d06c <_ZN8touchgfx8HALGPU2D10beginFrameEv>:
 801d06c:	2200      	movs	r2, #0
 801d06e:	f880 20a5 	strb.w	r2, [r0, #165]	; 0xa5
 801d072:	f7f8 bdaf 	b.w	8015bd4 <_ZN8touchgfx3HAL10beginFrameEv>
 801d076:	bf00      	nop

0801d078 <_ZN8touchgfx8HALGPU2D15lockFrameBufferEv>:
 801d078:	b510      	push	{r4, lr}
 801d07a:	4604      	mov	r4, r0
 801d07c:	307c      	adds	r0, #124	; 0x7c
 801d07e:	f7ff fbd5 	bl	801c82c <nema_cl_wait>
 801d082:	4620      	mov	r0, r4
 801d084:	f7f9 fb64 	bl	8016750 <_ZN8touchgfx3HAL15lockFrameBufferEv>
 801d088:	2300      	movs	r3, #0
 801d08a:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 801d08e:	bd10      	pop	{r4, pc}

0801d090 <_ZN8touchgfx8HALGPU2D8endFrameEv>:
 801d090:	b510      	push	{r4, lr}
 801d092:	4604      	mov	r4, r0
 801d094:	f7f8 fdaa 	bl	8015bec <_ZN8touchgfx3HAL8endFrameEv>
 801d098:	2200      	movs	r2, #0
 801d09a:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 801d09e:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
 801d0a2:	347c      	adds	r4, #124	; 0x7c
 801d0a4:	b113      	cbz	r3, 801d0ac <_ZN8touchgfx8HALGPU2D8endFrameEv+0x1c>
 801d0a6:	4620      	mov	r0, r4
 801d0a8:	f7ff fb50 	bl	801c74c <nema_cl_submit>
 801d0ac:	4620      	mov	r0, r4
 801d0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d0b2:	f7ff bbbb 	b.w	801c82c <nema_cl_wait>
 801d0b6:	bf00      	nop

0801d0b8 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>:
 801d0b8:	b508      	push	{r3, lr}
 801d0ba:	4a03      	ldr	r2, [pc, #12]	; (801d0c8 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x10>)
 801d0bc:	4b03      	ldr	r3, [pc, #12]	; (801d0cc <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x14>)
 801d0be:	2118      	movs	r1, #24
 801d0c0:	4803      	ldr	r0, [pc, #12]	; (801d0d0 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x18>)
 801d0c2:	f00b f809 	bl	80280d8 <__assert_func>
 801d0c6:	bf00      	nop
 801d0c8:	0802ad6c 	.word	0x0802ad6c
 801d0cc:	0802ac18 	.word	0x0802ac18
 801d0d0:	0802ac70 	.word	0x0802ac70

0801d0d4 <_ZN8touchgfx8HALGPU2D10initializeEv>:
 801d0d4:	b570      	push	{r4, r5, r6, lr}
 801d0d6:	4606      	mov	r6, r0
 801d0d8:	b08a      	sub	sp, #40	; 0x28
 801d0da:	466c      	mov	r4, sp
 801d0dc:	f7f8 fd93 	bl	8015c06 <_ZN8touchgfx3HAL10initializeEv>
 801d0e0:	f106 057c 	add.w	r5, r6, #124	; 0x7c
 801d0e4:	4668      	mov	r0, sp
 801d0e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801d0ea:	f7ff f89f 	bl	801c22c <nema_cl_create_sized>
 801d0ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d0f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d0f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d0f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d0f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 801d0fa:	e885 0003 	stmia.w	r5, {r0, r1}
 801d0fe:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801d102:	b10b      	cbz	r3, 801d108 <_ZN8touchgfx8HALGPU2D10initializeEv+0x34>
 801d104:	b00a      	add	sp, #40	; 0x28
 801d106:	bd70      	pop	{r4, r5, r6, pc}
 801d108:	f7ff ffd6 	bl	801d0b8 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>

0801d10c <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
 801d10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d10e:	f04f 0c01 	mov.w	ip, #1
 801d112:	2500      	movs	r5, #0
 801d114:	f8bd 7014 	ldrh.w	r7, [sp, #20]
 801d118:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 801d11c:	60c3      	str	r3, [r0, #12]
 801d11e:	42b7      	cmp	r7, r6
 801d120:	bf2c      	ite	cs
 801d122:	f04f 0e00 	movcs.w	lr, #0
 801d126:	f04f 0e01 	movcc.w	lr, #1
 801d12a:	4b23      	ldr	r3, [pc, #140]	; (801d1b8 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xac>)
 801d12c:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801d130:	6643      	str	r3, [r0, #100]	; 0x64
 801d132:	4b22      	ldr	r3, [pc, #136]	; (801d1bc <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb0>)
 801d134:	6105      	str	r5, [r0, #16]
 801d136:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801d13a:	61c5      	str	r5, [r0, #28]
 801d13c:	6205      	str	r5, [r0, #32]
 801d13e:	8485      	strh	r5, [r0, #36]	; 0x24
 801d140:	f8c0 5026 	str.w	r5, [r0, #38]	; 0x26
 801d144:	f880 502a 	strb.w	r5, [r0, #42]	; 0x2a
 801d148:	62c5      	str	r5, [r0, #44]	; 0x2c
 801d14a:	8605      	strh	r5, [r0, #48]	; 0x30
 801d14c:	e9c0 550e 	strd	r5, r5, [r0, #56]	; 0x38
 801d150:	e9c0 5510 	strd	r5, r5, [r0, #64]	; 0x40
 801d154:	f880 5048 	strb.w	r5, [r0, #72]	; 0x48
 801d158:	f880 504a 	strb.w	r5, [r0, #74]	; 0x4a
 801d15c:	f880 504b 	strb.w	r5, [r0, #75]	; 0x4b
 801d160:	e9c0 5513 	strd	r5, r5, [r0, #76]	; 0x4c
 801d164:	e9c0 5515 	strd	r5, r5, [r0, #84]	; 0x54
 801d168:	e9c0 5517 	strd	r5, r5, [r0, #92]	; 0x5c
 801d16c:	6685      	str	r5, [r0, #104]	; 0x68
 801d16e:	f880 506c 	strb.w	r5, [r0, #108]	; 0x6c
 801d172:	4a13      	ldr	r2, [pc, #76]	; (801d1c0 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb4>)
 801d174:	f880 c049 	strb.w	ip, [r0, #73]	; 0x49
 801d178:	6018      	str	r0, [r3, #0]
 801d17a:	4b12      	ldr	r3, [pc, #72]	; (801d1c4 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb8>)
 801d17c:	8017      	strh	r7, [r2, #0]
 801d17e:	801f      	strh	r7, [r3, #0]
 801d180:	4a11      	ldr	r2, [pc, #68]	; (801d1c8 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xbc>)
 801d182:	4b12      	ldr	r3, [pc, #72]	; (801d1cc <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc0>)
 801d184:	8016      	strh	r6, [r2, #0]
 801d186:	801e      	strh	r6, [r3, #0]
 801d188:	4911      	ldr	r1, [pc, #68]	; (801d1d0 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc4>)
 801d18a:	4a12      	ldr	r2, [pc, #72]	; (801d1d4 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc8>)
 801d18c:	4b12      	ldr	r3, [pc, #72]	; (801d1d8 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xcc>)
 801d18e:	700d      	strb	r5, [r1, #0]
 801d190:	6002      	str	r2, [r0, #0]
 801d192:	6018      	str	r0, [r3, #0]
 801d194:	6705      	str	r5, [r0, #112]	; 0x70
 801d196:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
 801d19a:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
 801d19e:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
 801d1a2:	f880 c077 	strb.w	ip, [r0, #119]	; 0x77
 801d1a6:	f880 c078 	strb.w	ip, [r0, #120]	; 0x78
 801d1aa:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
 801d1ae:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
 801d1b2:	f880 e034 	strb.w	lr, [r0, #52]	; 0x34
 801d1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d1b8:	01000001 	.word	0x01000001
 801d1bc:	20198158 	.word	0x20198158
 801d1c0:	2019814c 	.word	0x2019814c
 801d1c4:	20198152 	.word	0x20198152
 801d1c8:	2019814e 	.word	0x2019814e
 801d1cc:	20198154 	.word	0x20198154
 801d1d0:	20198150 	.word	0x20198150
 801d1d4:	0802ac9c 	.word	0x0802ac9c
 801d1d8:	20198388 	.word	0x20198388

0801d1dc <_ZN8touchgfx8HALGPU2D10initializeEi>:
 801d1dc:	b570      	push	{r4, r5, r6, lr}
 801d1de:	460c      	mov	r4, r1
 801d1e0:	b08a      	sub	sp, #40	; 0x28
 801d1e2:	4606      	mov	r6, r0
 801d1e4:	f7f8 fd0f 	bl	8015c06 <_ZN8touchgfx3HAL10initializeEv>
 801d1e8:	4621      	mov	r1, r4
 801d1ea:	466c      	mov	r4, sp
 801d1ec:	4668      	mov	r0, sp
 801d1ee:	f106 057c 	add.w	r5, r6, #124	; 0x7c
 801d1f2:	f7ff f81b 	bl	801c22c <nema_cl_create_sized>
 801d1f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d1f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d1fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d1fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d1fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 801d202:	e885 0003 	stmia.w	r5, {r0, r1}
 801d206:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801d20a:	b10b      	cbz	r3, 801d210 <_ZN8touchgfx8HALGPU2D10initializeEi+0x34>
 801d20c:	b00a      	add	sp, #40	; 0x28
 801d20e:	bd70      	pop	{r4, r5, r6, pc}
 801d210:	f7ff ff52 	bl	801d0b8 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>

0801d214 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>:
 801d214:	b510      	push	{r4, lr}
 801d216:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 801d21a:	4604      	mov	r4, r0
 801d21c:	b94b      	cbnz	r3, 801d232 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x1e>
 801d21e:	4620      	mov	r0, r4
 801d220:	2101      	movs	r1, #1
 801d222:	f7f9 fa83 	bl	801672c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801d226:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 801d22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d22e:	f7ff b911 	b.w	801c454 <nema_cl_bind_circular>
 801d232:	6840      	ldr	r0, [r0, #4]
 801d234:	4906      	ldr	r1, [pc, #24]	; (801d250 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x3c>)
 801d236:	6803      	ldr	r3, [r0, #0]
 801d238:	689a      	ldr	r2, [r3, #8]
 801d23a:	428a      	cmp	r2, r1
 801d23c:	d105      	bne.n	801d24a <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x36>
 801d23e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d240:	4798      	blx	r3
 801d242:	2300      	movs	r3, #0
 801d244:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 801d248:	e7e9      	b.n	801d21e <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0xa>
 801d24a:	4790      	blx	r2
 801d24c:	e7f9      	b.n	801d242 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x2e>
 801d24e:	bf00      	nop
 801d250:	08002369 	.word	0x08002369

0801d254 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>:
 801d254:	4603      	mov	r3, r0
 801d256:	2200      	movs	r2, #0
 801d258:	307c      	adds	r0, #124	; 0x7c
 801d25a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 801d25e:	f7ff ba75 	b.w	801c74c <nema_cl_submit>
 801d262:	bf00      	nop

0801d264 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 801d264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d268:	b091      	sub	sp, #68	; 0x44
 801d26a:	4604      	mov	r4, r0
 801d26c:	461d      	mov	r5, r3
 801d26e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801d272:	e9cd 210e 	strd	r2, r1, [sp, #56]	; 0x38
 801d276:	930d      	str	r3, [sp, #52]	; 0x34
 801d278:	f89d 2088 	ldrb.w	r2, [sp, #136]	; 0x88
 801d27c:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801d280:	307c      	adds	r0, #124	; 0x7c
 801d282:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
 801d286:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801d28a:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 801d28e:	f8bd 9074 	ldrh.w	r9, [sp, #116]	; 0x74
 801d292:	f89d a078 	ldrb.w	sl, [sp, #120]	; 0x78
 801d296:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801d29a:	930b      	str	r3, [sp, #44]	; 0x2c
 801d29c:	920c      	str	r2, [sp, #48]	; 0x30
 801d29e:	f7ff fac5 	bl	801c82c <nema_cl_wait>
 801d2a2:	f04f 0e01 	mov.w	lr, #1
 801d2a6:	2000      	movs	r0, #0
 801d2a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d2aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d2ac:	9208      	str	r2, [sp, #32]
 801d2ae:	f8d4 c000 	ldr.w	ip, [r4]
 801d2b2:	9307      	str	r3, [sp, #28]
 801d2b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d2b6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801d2ba:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
 801d2be:	e9cd b305 	strd	fp, r3, [sp, #20]
 801d2c2:	e9cd 7801 	strd	r7, r8, [sp, #4]
 801d2c6:	9600      	str	r6, [sp, #0]
 801d2c8:	f884 e0a4 	strb.w	lr, [r4, #164]	; 0xa4
 801d2cc:	9009      	str	r0, [sp, #36]	; 0x24
 801d2ce:	462b      	mov	r3, r5
 801d2d0:	4620      	mov	r0, r4
 801d2d2:	f8dc 403c 	ldr.w	r4, [ip, #60]	; 0x3c
 801d2d6:	47a0      	blx	r4
 801d2d8:	b011      	add	sp, #68	; 0x44
 801d2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2de:	bf00      	nop

0801d2e0 <_ZN8touchgfx8LCDGPU2DD1Ev>:
 801d2e0:	4770      	bx	lr
 801d2e2:	bf00      	nop

0801d2e4 <_ZNK8touchgfx8LCDGPU2D8bitDepthEv>:
 801d2e4:	7a03      	ldrb	r3, [r0, #8]
 801d2e6:	2b02      	cmp	r3, #2
 801d2e8:	d004      	beq.n	801d2f4 <_ZNK8touchgfx8LCDGPU2D8bitDepthEv+0x10>
 801d2ea:	2b01      	cmp	r3, #1
 801d2ec:	bf0c      	ite	eq
 801d2ee:	2018      	moveq	r0, #24
 801d2f0:	2010      	movne	r0, #16
 801d2f2:	4770      	bx	lr
 801d2f4:	2020      	movs	r0, #32
 801d2f6:	4770      	bx	lr

0801d2f8 <_ZNK8touchgfx8LCDGPU2D17framebufferFormatEv>:
 801d2f8:	7a00      	ldrb	r0, [r0, #8]
 801d2fa:	4770      	bx	lr

0801d2fc <_ZN8touchgfx8LCDGPU2D4initEv>:
 801d2fc:	4770      	bx	lr
 801d2fe:	bf00      	nop

0801d300 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d304:	b087      	sub	sp, #28
 801d306:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801d30a:	9102      	str	r1, [sp, #8]
 801d30c:	ea6f 0c05 	mvn.w	ip, r5
 801d310:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801d314:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801d316:	9203      	str	r2, [sp, #12]
 801d318:	e9dd 4215 	ldrd	r4, r2, [sp, #84]	; 0x54
 801d31c:	6860      	ldr	r0, [r4, #4]
 801d31e:	fa5f fc8c 	uxtb.w	ip, ip
 801d322:	fb00 2e01 	mla	lr, r0, r1, r2
 801d326:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d328:	6820      	ldr	r0, [r4, #0]
 801d32a:	e9d2 2400 	ldrd	r2, r4, [r2]
 801d32e:	3404      	adds	r4, #4
 801d330:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 801d334:	fa1f fb85 	uxth.w	fp, r5
 801d338:	9405      	str	r4, [sp, #20]
 801d33a:	9200      	str	r2, [sp, #0]
 801d33c:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801d340:	9c02      	ldr	r4, [sp, #8]
 801d342:	2c00      	cmp	r4, #0
 801d344:	dc03      	bgt.n	801d34e <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801d346:	9c03      	ldr	r4, [sp, #12]
 801d348:	2c00      	cmp	r4, #0
 801d34a:	f340 80c2 	ble.w	801d4d2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d34e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d350:	2b00      	cmp	r3, #0
 801d352:	e9d4 ea02 	ldrd	lr, sl, [r4, #8]
 801d356:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d35a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801d35e:	fa0f f48e 	sxth.w	r4, lr
 801d362:	fa0f f88a 	sxth.w	r8, sl
 801d366:	f340 80b7 	ble.w	801d4d8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801d36a:	1415      	asrs	r5, r2, #16
 801d36c:	d406      	bmi.n	801d37c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d36e:	42a5      	cmp	r5, r4
 801d370:	da04      	bge.n	801d37c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d372:	ea5f 4921 	movs.w	r9, r1, asr #16
 801d376:	d401      	bmi.n	801d37c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d378:	45c1      	cmp	r9, r8
 801d37a:	db3e      	blt.n	801d3fa <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801d37c:	3b01      	subs	r3, #1
 801d37e:	4432      	add	r2, r6
 801d380:	4439      	add	r1, r7
 801d382:	f100 0002 	add.w	r0, r0, #2
 801d386:	d1f0      	bne.n	801d36a <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d388:	9b02      	ldr	r3, [sp, #8]
 801d38a:	2b00      	cmp	r3, #0
 801d38c:	f340 80a1 	ble.w	801d4d2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d394:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d398:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d39c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d3a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d3a4:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801d3a8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d3ac:	ee76 6a62 	vsub.f32	s13, s12, s5
 801d3b0:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801d3b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d3b8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d3bc:	ee16 2a90 	vmov	r2, s13
 801d3c0:	3b01      	subs	r3, #1
 801d3c2:	9302      	str	r3, [sp, #8]
 801d3c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d3c6:	9c03      	ldr	r4, [sp, #12]
 801d3c8:	fb92 f6f3 	sdiv	r6, r2, r3
 801d3cc:	ee17 2a10 	vmov	r2, s14
 801d3d0:	eeb0 7a43 	vmov.f32	s14, s6
 801d3d4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d3d8:	ee17 1a10 	vmov	r1, s14
 801d3dc:	eeb0 7a62 	vmov.f32	s14, s5
 801d3e0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d3e4:	fb92 f7f3 	sdiv	r7, r2, r3
 801d3e8:	eeb0 3a67 	vmov.f32	s6, s15
 801d3ec:	ee17 2a10 	vmov	r2, s14
 801d3f0:	eef0 2a46 	vmov.f32	s5, s12
 801d3f4:	bf08      	it	eq
 801d3f6:	4623      	moveq	r3, r4
 801d3f8:	e7a2      	b.n	801d340 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d3fa:	9501      	str	r5, [sp, #4]
 801d3fc:	1e5d      	subs	r5, r3, #1
 801d3fe:	fb05 2906 	mla	r9, r5, r6, r2
 801d402:	ea5f 4929 	movs.w	r9, r9, asr #16
 801d406:	9504      	str	r5, [sp, #16]
 801d408:	d570      	bpl.n	801d4ec <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801d40a:	4680      	mov	r8, r0
 801d40c:	9d01      	ldr	r5, [sp, #4]
 801d40e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d412:	4654      	mov	r4, sl
 801d414:	4673      	mov	r3, lr
 801d416:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801d41a:	e002      	b.n	801d422 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d41c:	1415      	asrs	r5, r2, #16
 801d41e:	e9d9 3402 	ldrd	r3, r4, [r9, #8]
 801d422:	2d00      	cmp	r5, #0
 801d424:	4432      	add	r2, r6
 801d426:	db4b      	blt.n	801d4c0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801d428:	429d      	cmp	r5, r3
 801d42a:	da49      	bge.n	801d4c0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801d42c:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801d430:	d446      	bmi.n	801d4c0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801d432:	45a6      	cmp	lr, r4
 801d434:	da44      	bge.n	801d4c0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801d436:	9c00      	ldr	r4, [sp, #0]
 801d438:	b21b      	sxth	r3, r3
 801d43a:	fb0e 4303 	mla	r3, lr, r3, r4
 801d43e:	5d5b      	ldrb	r3, [r3, r5]
 801d440:	9d05      	ldr	r5, [sp, #20]
 801d442:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d446:	441d      	add	r5, r3
 801d448:	f895 a002 	ldrb.w	sl, [r5, #2]
 801d44c:	786d      	ldrb	r5, [r5, #1]
 801d44e:	f8b8 4000 	ldrh.w	r4, [r8]
 801d452:	fb15 f50b 	smulbb	r5, r5, fp
 801d456:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 801d45a:	fa5f fe8e 	uxtb.w	lr, lr
 801d45e:	9501      	str	r5, [sp, #4]
 801d460:	fb1e fe0c 	smulbb	lr, lr, ip
 801d464:	9d05      	ldr	r5, [sp, #20]
 801d466:	fb1a fa0b 	smulbb	sl, sl, fp
 801d46a:	5ced      	ldrb	r5, [r5, r3]
 801d46c:	1223      	asrs	r3, r4, #8
 801d46e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d472:	fb05 ee0b 	mla	lr, r5, fp, lr
 801d476:	fb03 aa0c 	mla	sl, r3, ip, sl
 801d47a:	9d01      	ldr	r5, [sp, #4]
 801d47c:	10e4      	asrs	r4, r4, #3
 801d47e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d482:	fb04 540c 	mla	r4, r4, ip, r5
 801d486:	fa1f fe8e 	uxth.w	lr, lr
 801d48a:	fa1f fa8a 	uxth.w	sl, sl
 801d48e:	f10e 0301 	add.w	r3, lr, #1
 801d492:	f10a 0501 	add.w	r5, sl, #1
 801d496:	9301      	str	r3, [sp, #4]
 801d498:	b2a4      	uxth	r4, r4
 801d49a:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801d49e:	9d01      	ldr	r5, [sp, #4]
 801d4a0:	1c63      	adds	r3, r4, #1
 801d4a2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801d4a6:	eb05 251e 	add.w	r5, r5, lr, lsr #8
 801d4aa:	f40a 4378 	and.w	r3, sl, #63488	; 0xf800
 801d4ae:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d4b2:	0964      	lsrs	r4, r4, #5
 801d4b4:	432b      	orrs	r3, r5
 801d4b6:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d4ba:	4323      	orrs	r3, r4
 801d4bc:	f8a8 3000 	strh.w	r3, [r8]
 801d4c0:	f108 0802 	add.w	r8, r8, #2
 801d4c4:	4580      	cmp	r8, r0
 801d4c6:	4439      	add	r1, r7
 801d4c8:	d1a8      	bne.n	801d41c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d4ca:	9b02      	ldr	r3, [sp, #8]
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	f73f af5f 	bgt.w	801d390 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d4d2:	b007      	add	sp, #28
 801d4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4d8:	f43f af56 	beq.w	801d388 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d4dc:	1e5d      	subs	r5, r3, #1
 801d4de:	fb05 2906 	mla	r9, r5, r6, r2
 801d4e2:	ea5f 4929 	movs.w	r9, r9, asr #16
 801d4e6:	9504      	str	r5, [sp, #16]
 801d4e8:	f53f af4e 	bmi.w	801d388 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d4ec:	454c      	cmp	r4, r9
 801d4ee:	dd5b      	ble.n	801d5a8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801d4f0:	9d04      	ldr	r5, [sp, #16]
 801d4f2:	fb05 1507 	mla	r5, r5, r7, r1
 801d4f6:	142d      	asrs	r5, r5, #16
 801d4f8:	d456      	bmi.n	801d5a8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801d4fa:	4545      	cmp	r5, r8
 801d4fc:	da54      	bge.n	801d5a8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801d4fe:	2b00      	cmp	r3, #0
 801d500:	f77f af42 	ble.w	801d388 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d504:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d508:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801d50c:	9301      	str	r3, [sp, #4]
 801d50e:	e002      	b.n	801d516 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d510:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d512:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 801d516:	9d00      	ldr	r5, [sp, #0]
 801d518:	140b      	asrs	r3, r1, #16
 801d51a:	fb04 5303 	mla	r3, r4, r3, r5
 801d51e:	1414      	asrs	r4, r2, #16
 801d520:	5d1b      	ldrb	r3, [r3, r4]
 801d522:	8804      	ldrh	r4, [r0, #0]
 801d524:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d528:	eb08 0503 	add.w	r5, r8, r3
 801d52c:	f895 a002 	ldrb.w	sl, [r5, #2]
 801d530:	f895 9001 	ldrb.w	r9, [r5, #1]
 801d534:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 801d538:	fa5f fe8e 	uxtb.w	lr, lr
 801d53c:	fb1e fe0c 	smulbb	lr, lr, ip
 801d540:	fb19 f90b 	smulbb	r9, r9, fp
 801d544:	fb1a fa0b 	smulbb	sl, sl, fp
 801d548:	f818 5003 	ldrb.w	r5, [r8, r3]
 801d54c:	1223      	asrs	r3, r4, #8
 801d54e:	10e4      	asrs	r4, r4, #3
 801d550:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d554:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d558:	fb05 e50b 	mla	r5, r5, fp, lr
 801d55c:	fb03 aa0c 	mla	sl, r3, ip, sl
 801d560:	fb04 940c 	mla	r4, r4, ip, r9
 801d564:	b2ad      	uxth	r5, r5
 801d566:	fa1f fa8a 	uxth.w	sl, sl
 801d56a:	b2a4      	uxth	r4, r4
 801d56c:	f10a 0301 	add.w	r3, sl, #1
 801d570:	f105 0e01 	add.w	lr, r5, #1
 801d574:	f104 0901 	add.w	r9, r4, #1
 801d578:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801d57c:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 801d580:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801d584:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801d588:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d58c:	0964      	lsrs	r4, r4, #5
 801d58e:	ea43 030e 	orr.w	r3, r3, lr
 801d592:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d596:	4323      	orrs	r3, r4
 801d598:	f820 3b02 	strh.w	r3, [r0], #2
 801d59c:	9b01      	ldr	r3, [sp, #4]
 801d59e:	4439      	add	r1, r7
 801d5a0:	4298      	cmp	r0, r3
 801d5a2:	4432      	add	r2, r6
 801d5a4:	d1b4      	bne.n	801d510 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801d5a6:	e6ef      	b.n	801d388 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	f77f aeed 	ble.w	801d388 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d5ae:	1414      	asrs	r4, r2, #16
 801d5b0:	4680      	mov	r8, r0
 801d5b2:	9401      	str	r4, [sp, #4]
 801d5b4:	4625      	mov	r5, r4
 801d5b6:	e72a      	b.n	801d40e <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>

0801d5b8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5bc:	4689      	mov	r9, r1
 801d5be:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801d5c2:	46ca      	mov	sl, r9
 801d5c4:	b087      	sub	sp, #28
 801d5c6:	9203      	str	r2, [sp, #12]
 801d5c8:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 801d5cc:	6854      	ldr	r4, [r2, #4]
 801d5ce:	e9dd 0c17 	ldrd	r0, ip, [sp, #92]	; 0x5c
 801d5d2:	fb04 1000 	mla	r0, r4, r0, r1
 801d5d6:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801d5da:	6815      	ldr	r5, [r2, #0]
 801d5dc:	e9dc 2400 	ldrd	r2, r4, [ip]
 801d5e0:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 801d5e4:	f104 0b04 	add.w	fp, r4, #4
 801d5e8:	9205      	str	r2, [sp, #20]
 801d5ea:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801d5ee:	f1ba 0f00 	cmp.w	sl, #0
 801d5f2:	dc03      	bgt.n	801d5fc <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d5f4:	9c03      	ldr	r4, [sp, #12]
 801d5f6:	2c00      	cmp	r4, #0
 801d5f8:	f340 8095 	ble.w	801d726 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801d5fc:	e9dc e802 	ldrd	lr, r8, [ip, #8]
 801d600:	2b00      	cmp	r3, #0
 801d602:	fa0f f588 	sxth.w	r5, r8
 801d606:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d60a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801d60e:	fa0f f48e 	sxth.w	r4, lr
 801d612:	9502      	str	r5, [sp, #8]
 801d614:	f340 808a 	ble.w	801d72c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d618:	46f1      	mov	r9, lr
 801d61a:	9401      	str	r4, [sp, #4]
 801d61c:	1415      	asrs	r5, r2, #16
 801d61e:	d408      	bmi.n	801d632 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d620:	9c01      	ldr	r4, [sp, #4]
 801d622:	42a5      	cmp	r5, r4
 801d624:	da05      	bge.n	801d632 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d626:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801d62a:	d402      	bmi.n	801d632 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d62c:	9c02      	ldr	r4, [sp, #8]
 801d62e:	45a6      	cmp	lr, r4
 801d630:	db3b      	blt.n	801d6aa <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf2>
 801d632:	3b01      	subs	r3, #1
 801d634:	4432      	add	r2, r6
 801d636:	4439      	add	r1, r7
 801d638:	f100 0002 	add.w	r0, r0, #2
 801d63c:	d1ee      	bne.n	801d61c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d63e:	f1ba 0f00 	cmp.w	sl, #0
 801d642:	dd70      	ble.n	801d726 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801d644:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d648:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d64c:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801d650:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d654:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801d658:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d65c:	ee76 6a62 	vsub.f32	s13, s12, s5
 801d660:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801d664:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d668:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d66c:	ee16 2a90 	vmov	r2, s13
 801d670:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d672:	9c03      	ldr	r4, [sp, #12]
 801d674:	fb92 f6f3 	sdiv	r6, r2, r3
 801d678:	ee17 2a10 	vmov	r2, s14
 801d67c:	eeb0 7a43 	vmov.f32	s14, s6
 801d680:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d684:	ee17 1a10 	vmov	r1, s14
 801d688:	eeb0 7a62 	vmov.f32	s14, s5
 801d68c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d690:	f1ba 0a01 	subs.w	sl, sl, #1
 801d694:	fb92 f7f3 	sdiv	r7, r2, r3
 801d698:	eeb0 3a67 	vmov.f32	s6, s15
 801d69c:	ee17 2a10 	vmov	r2, s14
 801d6a0:	eef0 2a46 	vmov.f32	s5, s12
 801d6a4:	bf08      	it	eq
 801d6a6:	4623      	moveq	r3, r4
 801d6a8:	e7a1      	b.n	801d5ee <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d6aa:	9c01      	ldr	r4, [sp, #4]
 801d6ac:	9501      	str	r5, [sp, #4]
 801d6ae:	1e5d      	subs	r5, r3, #1
 801d6b0:	46ce      	mov	lr, r9
 801d6b2:	fb05 2906 	mla	r9, r5, r6, r2
 801d6b6:	ea5f 4929 	movs.w	r9, r9, asr #16
 801d6ba:	9504      	str	r5, [sp, #16]
 801d6bc:	d53e      	bpl.n	801d73c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801d6be:	4604      	mov	r4, r0
 801d6c0:	9d01      	ldr	r5, [sp, #4]
 801d6c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d6c6:	4673      	mov	r3, lr
 801d6c8:	46b6      	mov	lr, r6
 801d6ca:	4646      	mov	r6, r8
 801d6cc:	e002      	b.n	801d6d4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d6ce:	1415      	asrs	r5, r2, #16
 801d6d0:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801d6d4:	2d00      	cmp	r5, #0
 801d6d6:	4472      	add	r2, lr
 801d6d8:	db1e      	blt.n	801d718 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801d6da:	429d      	cmp	r5, r3
 801d6dc:	da1c      	bge.n	801d718 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801d6de:	ea5f 4821 	movs.w	r8, r1, asr #16
 801d6e2:	d419      	bmi.n	801d718 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801d6e4:	45b0      	cmp	r8, r6
 801d6e6:	da17      	bge.n	801d718 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801d6e8:	9e05      	ldr	r6, [sp, #20]
 801d6ea:	b21b      	sxth	r3, r3
 801d6ec:	fb08 6303 	mla	r3, r8, r3, r6
 801d6f0:	5d5e      	ldrb	r6, [r3, r5]
 801d6f2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d6f6:	eb0b 0306 	add.w	r3, fp, r6
 801d6fa:	785d      	ldrb	r5, [r3, #1]
 801d6fc:	789b      	ldrb	r3, [r3, #2]
 801d6fe:	00ed      	lsls	r5, r5, #3
 801d700:	f405 68fc 	and.w	r8, r5, #2016	; 0x7e0
 801d704:	4d2d      	ldr	r5, [pc, #180]	; (801d7bc <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>)
 801d706:	f81b 6006 	ldrb.w	r6, [fp, r6]
 801d70a:	ea05 2303 	and.w	r3, r5, r3, lsl #8
 801d70e:	ea43 0308 	orr.w	r3, r3, r8
 801d712:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
 801d716:	8023      	strh	r3, [r4, #0]
 801d718:	3402      	adds	r4, #2
 801d71a:	4284      	cmp	r4, r0
 801d71c:	4439      	add	r1, r7
 801d71e:	d1d6      	bne.n	801d6ce <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d720:	f1ba 0f00 	cmp.w	sl, #0
 801d724:	dc8e      	bgt.n	801d644 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d726:	b007      	add	sp, #28
 801d728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d72c:	d087      	beq.n	801d63e <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d72e:	1e5d      	subs	r5, r3, #1
 801d730:	fb05 2906 	mla	r9, r5, r6, r2
 801d734:	ea5f 4929 	movs.w	r9, r9, asr #16
 801d738:	9504      	str	r5, [sp, #16]
 801d73a:	d480      	bmi.n	801d63e <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d73c:	454c      	cmp	r4, r9
 801d73e:	dd35      	ble.n	801d7ac <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d740:	9d04      	ldr	r5, [sp, #16]
 801d742:	fb05 1507 	mla	r5, r5, r7, r1
 801d746:	ea5f 4925 	movs.w	r9, r5, asr #16
 801d74a:	d42f      	bmi.n	801d7ac <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d74c:	9d02      	ldr	r5, [sp, #8]
 801d74e:	45a9      	cmp	r9, r5
 801d750:	da2c      	bge.n	801d7ac <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d752:	2b00      	cmp	r3, #0
 801d754:	f77f af73 	ble.w	801d63e <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d758:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d75c:	9d05      	ldr	r5, [sp, #20]
 801d75e:	4699      	mov	r9, r3
 801d760:	46a6      	mov	lr, r4
 801d762:	e001      	b.n	801d768 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801d764:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d768:	140c      	asrs	r4, r1, #16
 801d76a:	fb0e 5404 	mla	r4, lr, r4, r5
 801d76e:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801d772:	f814 e00e 	ldrb.w	lr, [r4, lr]
 801d776:	4b11      	ldr	r3, [pc, #68]	; (801d7bc <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>)
 801d778:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d77c:	eb0b 040e 	add.w	r4, fp, lr
 801d780:	f894 8001 	ldrb.w	r8, [r4, #1]
 801d784:	78a4      	ldrb	r4, [r4, #2]
 801d786:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d78a:	f81b e00e 	ldrb.w	lr, [fp, lr]
 801d78e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d792:	ea03 2404 	and.w	r4, r3, r4, lsl #8
 801d796:	ea44 0408 	orr.w	r4, r4, r8
 801d79a:	ea44 04de 	orr.w	r4, r4, lr, lsr #3
 801d79e:	f820 4b02 	strh.w	r4, [r0], #2
 801d7a2:	4548      	cmp	r0, r9
 801d7a4:	4439      	add	r1, r7
 801d7a6:	4432      	add	r2, r6
 801d7a8:	d1dc      	bne.n	801d764 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d7aa:	e748      	b.n	801d63e <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d7ac:	2b00      	cmp	r3, #0
 801d7ae:	f77f af46 	ble.w	801d63e <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d7b2:	1415      	asrs	r5, r2, #16
 801d7b4:	4604      	mov	r4, r0
 801d7b6:	9501      	str	r5, [sp, #4]
 801d7b8:	e783      	b.n	801d6c2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801d7ba:	bf00      	nop
 801d7bc:	fffff800 	.word	0xfffff800

0801d7c0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d7c0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801d7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7c8:	b087      	sub	sp, #28
 801d7ca:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801d7ce:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 801d7d2:	e9dd 0b17 	ldrd	r0, fp, [sp, #92]	; 0x5c
 801d7d6:	6854      	ldr	r4, [r2, #4]
 801d7d8:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801d7dc:	fb04 1100 	mla	r1, r4, r0, r1
 801d7e0:	e9dd 9a13 	ldrd	r9, sl, [sp, #76]	; 0x4c
 801d7e4:	6810      	ldr	r0, [r2, #0]
 801d7e6:	e9db 2400 	ldrd	r2, r4, [fp]
 801d7ea:	eb00 0e41 	add.w	lr, r0, r1, lsl #1
 801d7ee:	1d21      	adds	r1, r4, #4
 801d7f0:	9505      	str	r5, [sp, #20]
 801d7f2:	9102      	str	r1, [sp, #8]
 801d7f4:	9201      	str	r2, [sp, #4]
 801d7f6:	e9dd 7211 	ldrd	r7, r2, [sp, #68]	; 0x44
 801d7fa:	9903      	ldr	r1, [sp, #12]
 801d7fc:	2900      	cmp	r1, #0
 801d7fe:	dc03      	bgt.n	801d808 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d800:	9904      	ldr	r1, [sp, #16]
 801d802:	2900      	cmp	r1, #0
 801d804:	f340 80b6 	ble.w	801d974 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801d808:	e9db 4602 	ldrd	r4, r6, [fp, #8]
 801d80c:	2b00      	cmp	r3, #0
 801d80e:	f507 4700 	add.w	r7, r7, #32768	; 0x8000
 801d812:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d816:	b221      	sxth	r1, r4
 801d818:	b235      	sxth	r5, r6
 801d81a:	f340 80ae 	ble.w	801d97a <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d81e:	1438      	asrs	r0, r7, #16
 801d820:	d406      	bmi.n	801d830 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d822:	4288      	cmp	r0, r1
 801d824:	da04      	bge.n	801d830 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d826:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d82a:	d401      	bmi.n	801d830 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d82c:	45ac      	cmp	ip, r5
 801d82e:	db3c      	blt.n	801d8aa <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801d830:	3b01      	subs	r3, #1
 801d832:	444f      	add	r7, r9
 801d834:	4452      	add	r2, sl
 801d836:	f10e 0e02 	add.w	lr, lr, #2
 801d83a:	d1f0      	bne.n	801d81e <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d83c:	9b03      	ldr	r3, [sp, #12]
 801d83e:	2b00      	cmp	r3, #0
 801d840:	f340 8098 	ble.w	801d974 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801d844:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d848:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d84c:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801d850:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d854:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801d858:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d85c:	ee76 6a62 	vsub.f32	s13, s12, s5
 801d860:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801d864:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d868:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d86c:	ee16 2a90 	vmov	r2, s13
 801d870:	3b01      	subs	r3, #1
 801d872:	9303      	str	r3, [sp, #12]
 801d874:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d876:	9904      	ldr	r1, [sp, #16]
 801d878:	fb92 f9f3 	sdiv	r9, r2, r3
 801d87c:	ee17 2a10 	vmov	r2, s14
 801d880:	eeb0 7a43 	vmov.f32	s14, s6
 801d884:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d888:	fb92 faf3 	sdiv	sl, r2, r3
 801d88c:	ee17 2a10 	vmov	r2, s14
 801d890:	eeb0 7a62 	vmov.f32	s14, s5
 801d894:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d898:	eeb0 3a67 	vmov.f32	s6, s15
 801d89c:	ee17 7a10 	vmov	r7, s14
 801d8a0:	eef0 2a46 	vmov.f32	s5, s12
 801d8a4:	bf08      	it	eq
 801d8a6:	460b      	moveq	r3, r1
 801d8a8:	e7a7      	b.n	801d7fa <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d8aa:	f103 38ff 	add.w	r8, r3, #4294967295
 801d8ae:	fb08 7c09 	mla	ip, r8, r9, r7
 801d8b2:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801d8b6:	d56a      	bpl.n	801d98e <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 801d8b8:	4675      	mov	r5, lr
 801d8ba:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 801d8be:	e002      	b.n	801d8c6 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801d8c0:	1438      	asrs	r0, r7, #16
 801d8c2:	e9db 4602 	ldrd	r4, r6, [fp, #8]
 801d8c6:	2800      	cmp	r0, #0
 801d8c8:	444f      	add	r7, r9
 801d8ca:	db4b      	blt.n	801d964 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d8cc:	42a0      	cmp	r0, r4
 801d8ce:	da49      	bge.n	801d964 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d8d0:	1413      	asrs	r3, r2, #16
 801d8d2:	d447      	bmi.n	801d964 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d8d4:	42b3      	cmp	r3, r6
 801d8d6:	b224      	sxth	r4, r4
 801d8d8:	da44      	bge.n	801d964 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d8da:	9901      	ldr	r1, [sp, #4]
 801d8dc:	fb03 1404 	mla	r4, r3, r4, r1
 801d8e0:	9902      	ldr	r1, [sp, #8]
 801d8e2:	5c23      	ldrb	r3, [r4, r0]
 801d8e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801d8e8:	0e0b      	lsrs	r3, r1, #24
 801d8ea:	d03b      	beq.n	801d964 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d8ec:	9805      	ldr	r0, [sp, #20]
 801d8ee:	f3c1 4807 	ubfx	r8, r1, #16, #8
 801d8f2:	fb00 f003 	mul.w	r0, r0, r3
 801d8f6:	1c43      	adds	r3, r0, #1
 801d8f8:	eb03 2320 	add.w	r3, r3, r0, asr #8
 801d8fc:	121b      	asrs	r3, r3, #8
 801d8fe:	43d8      	mvns	r0, r3
 801d900:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 801d904:	b29b      	uxth	r3, r3
 801d906:	b2c9      	uxtb	r1, r1
 801d908:	882e      	ldrh	r6, [r5, #0]
 801d90a:	fb1c fc03 	smulbb	ip, ip, r3
 801d90e:	fb18 f803 	smulbb	r8, r8, r3
 801d912:	fb11 f303 	smulbb	r3, r1, r3
 801d916:	10f4      	asrs	r4, r6, #3
 801d918:	1231      	asrs	r1, r6, #8
 801d91a:	00f6      	lsls	r6, r6, #3
 801d91c:	b2c0      	uxtb	r0, r0
 801d91e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d922:	b2f6      	uxtb	r6, r6
 801d924:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d928:	fb01 8800 	mla	r8, r1, r0, r8
 801d92c:	fb04 c400 	mla	r4, r4, r0, ip
 801d930:	fb06 3100 	mla	r1, r6, r0, r3
 801d934:	fa1f fc88 	uxth.w	ip, r8
 801d938:	b289      	uxth	r1, r1
 801d93a:	b2a4      	uxth	r4, r4
 801d93c:	1c4e      	adds	r6, r1, #1
 801d93e:	1c60      	adds	r0, r4, #1
 801d940:	f10c 0301 	add.w	r3, ip, #1
 801d944:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801d948:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801d94c:	eb00 2114 	add.w	r1, r0, r4, lsr #8
 801d950:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801d954:	f3c6 20c4 	ubfx	r0, r6, #11, #5
 801d958:	0949      	lsrs	r1, r1, #5
 801d95a:	4303      	orrs	r3, r0
 801d95c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d960:	430b      	orrs	r3, r1
 801d962:	802b      	strh	r3, [r5, #0]
 801d964:	3502      	adds	r5, #2
 801d966:	4575      	cmp	r5, lr
 801d968:	4452      	add	r2, sl
 801d96a:	d1a9      	bne.n	801d8c0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801d96c:	9b03      	ldr	r3, [sp, #12]
 801d96e:	2b00      	cmp	r3, #0
 801d970:	f73f af68 	bgt.w	801d844 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d974:	b007      	add	sp, #28
 801d976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d97a:	f43f af5f 	beq.w	801d83c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d97e:	f103 38ff 	add.w	r8, r3, #4294967295
 801d982:	fb08 7c09 	mla	ip, r8, r9, r7
 801d986:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801d98a:	f53f af57 	bmi.w	801d83c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d98e:	4561      	cmp	r1, ip
 801d990:	dd5c      	ble.n	801da4c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d992:	fb08 280a 	mla	r8, r8, sl, r2
 801d996:	ea5f 4828 	movs.w	r8, r8, asr #16
 801d99a:	d457      	bmi.n	801da4c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d99c:	45a8      	cmp	r8, r5
 801d99e:	da55      	bge.n	801da4c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d9a0:	2b00      	cmp	r3, #0
 801d9a2:	f77f af4b 	ble.w	801d83c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d9a6:	eb0e 0843 	add.w	r8, lr, r3, lsl #1
 801d9aa:	e001      	b.n	801d9b0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801d9ac:	f9bb 1008 	ldrsh.w	r1, [fp, #8]
 801d9b0:	9801      	ldr	r0, [sp, #4]
 801d9b2:	1413      	asrs	r3, r2, #16
 801d9b4:	fb01 0303 	mla	r3, r1, r3, r0
 801d9b8:	1439      	asrs	r1, r7, #16
 801d9ba:	5c5b      	ldrb	r3, [r3, r1]
 801d9bc:	9902      	ldr	r1, [sp, #8]
 801d9be:	444f      	add	r7, r9
 801d9c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801d9c4:	4452      	add	r2, sl
 801d9c6:	0e18      	lsrs	r0, r3, #24
 801d9c8:	d03b      	beq.n	801da42 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801d9ca:	9905      	ldr	r1, [sp, #20]
 801d9cc:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801d9d0:	fb01 f100 	mul.w	r1, r1, r0
 801d9d4:	1c48      	adds	r0, r1, #1
 801d9d6:	eb00 2021 	add.w	r0, r0, r1, asr #8
 801d9da:	1200      	asrs	r0, r0, #8
 801d9dc:	43c1      	mvns	r1, r0
 801d9de:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801d9e2:	b280      	uxth	r0, r0
 801d9e4:	b2db      	uxtb	r3, r3
 801d9e6:	f8be 5000 	ldrh.w	r5, [lr]
 801d9ea:	fb16 f600 	smulbb	r6, r6, r0
 801d9ee:	fb1c fc00 	smulbb	ip, ip, r0
 801d9f2:	fb13 f300 	smulbb	r3, r3, r0
 801d9f6:	122c      	asrs	r4, r5, #8
 801d9f8:	10e8      	asrs	r0, r5, #3
 801d9fa:	00ed      	lsls	r5, r5, #3
 801d9fc:	b2c9      	uxtb	r1, r1
 801d9fe:	b2ed      	uxtb	r5, r5
 801da00:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801da04:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801da08:	fb00 6001 	mla	r0, r0, r1, r6
 801da0c:	fb05 3301 	mla	r3, r5, r1, r3
 801da10:	fb04 c401 	mla	r4, r4, r1, ip
 801da14:	b280      	uxth	r0, r0
 801da16:	b2a4      	uxth	r4, r4
 801da18:	b29b      	uxth	r3, r3
 801da1a:	1c65      	adds	r5, r4, #1
 801da1c:	1c5e      	adds	r6, r3, #1
 801da1e:	1c41      	adds	r1, r0, #1
 801da20:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801da24:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801da28:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801da2c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801da30:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801da34:	0949      	lsrs	r1, r1, #5
 801da36:	431c      	orrs	r4, r3
 801da38:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801da3c:	430c      	orrs	r4, r1
 801da3e:	f8ae 4000 	strh.w	r4, [lr]
 801da42:	f10e 0e02 	add.w	lr, lr, #2
 801da46:	45c6      	cmp	lr, r8
 801da48:	d1b0      	bne.n	801d9ac <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801da4a:	e6f7      	b.n	801d83c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	f77f aef5 	ble.w	801d83c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801da52:	4675      	mov	r5, lr
 801da54:	1438      	asrs	r0, r7, #16
 801da56:	e730      	b.n	801d8ba <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>

0801da58 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801da58:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801da5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da60:	b085      	sub	sp, #20
 801da62:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801da66:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 801da6a:	e9dd 0b15 	ldrd	r0, fp, [sp, #84]	; 0x54
 801da6e:	6854      	ldr	r4, [r2, #4]
 801da70:	e9dd 9a11 	ldrd	r9, sl, [sp, #68]	; 0x44
 801da74:	fb04 1000 	mla	r0, r4, r0, r1
 801da78:	6814      	ldr	r4, [r2, #0]
 801da7a:	e9db 2500 	ldrd	r2, r5, [fp]
 801da7e:	eb04 0e40 	add.w	lr, r4, r0, lsl #1
 801da82:	1d28      	adds	r0, r5, #4
 801da84:	9001      	str	r0, [sp, #4]
 801da86:	9200      	str	r2, [sp, #0]
 801da88:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
 801da8c:	9802      	ldr	r0, [sp, #8]
 801da8e:	2800      	cmp	r0, #0
 801da90:	dc03      	bgt.n	801da9a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801da92:	9803      	ldr	r0, [sp, #12]
 801da94:	2800      	cmp	r0, #0
 801da96:	f340 80b8 	ble.w	801dc0a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801da9a:	e9db 5602 	ldrd	r5, r6, [fp, #8]
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801daa4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801daa8:	b228      	sxth	r0, r5
 801daaa:	b237      	sxth	r7, r6
 801daac:	f340 80b0 	ble.w	801dc10 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801dab0:	140c      	asrs	r4, r1, #16
 801dab2:	d406      	bmi.n	801dac2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dab4:	4284      	cmp	r4, r0
 801dab6:	da04      	bge.n	801dac2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dab8:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801dabc:	d401      	bmi.n	801dac2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dabe:	45bc      	cmp	ip, r7
 801dac0:	db3c      	blt.n	801db3c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801dac2:	3b01      	subs	r3, #1
 801dac4:	4449      	add	r1, r9
 801dac6:	4452      	add	r2, sl
 801dac8:	f10e 0e02 	add.w	lr, lr, #2
 801dacc:	d1f0      	bne.n	801dab0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801dace:	9b02      	ldr	r3, [sp, #8]
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	f340 809a 	ble.w	801dc0a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801dad6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dada:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dade:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801dae2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dae6:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801daea:	ee61 7a27 	vmul.f32	s15, s2, s15
 801daee:	ee76 6a62 	vsub.f32	s13, s12, s5
 801daf2:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801daf6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dafa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801dafe:	ee16 2a90 	vmov	r2, s13
 801db02:	3b01      	subs	r3, #1
 801db04:	9302      	str	r3, [sp, #8]
 801db06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801db08:	9803      	ldr	r0, [sp, #12]
 801db0a:	fb92 f9f3 	sdiv	r9, r2, r3
 801db0e:	ee17 2a10 	vmov	r2, s14
 801db12:	eeb0 7a43 	vmov.f32	s14, s6
 801db16:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801db1a:	fb92 faf3 	sdiv	sl, r2, r3
 801db1e:	ee17 2a10 	vmov	r2, s14
 801db22:	eeb0 7a62 	vmov.f32	s14, s5
 801db26:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801db2a:	eeb0 3a67 	vmov.f32	s6, s15
 801db2e:	ee17 1a10 	vmov	r1, s14
 801db32:	eef0 2a46 	vmov.f32	s5, s12
 801db36:	bf08      	it	eq
 801db38:	4603      	moveq	r3, r0
 801db3a:	e7a7      	b.n	801da8c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801db3c:	f103 38ff 	add.w	r8, r3, #4294967295
 801db40:	fb08 1c09 	mla	ip, r8, r9, r1
 801db44:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801db48:	d56c      	bpl.n	801dc24 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 801db4a:	4677      	mov	r7, lr
 801db4c:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 801db50:	e002      	b.n	801db58 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801db52:	140c      	asrs	r4, r1, #16
 801db54:	e9db 5602 	ldrd	r5, r6, [fp, #8]
 801db58:	2c00      	cmp	r4, #0
 801db5a:	db4d      	blt.n	801dbf8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801db5c:	42ac      	cmp	r4, r5
 801db5e:	da4b      	bge.n	801dbf8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801db60:	1413      	asrs	r3, r2, #16
 801db62:	d449      	bmi.n	801dbf8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801db64:	42b3      	cmp	r3, r6
 801db66:	b22d      	sxth	r5, r5
 801db68:	da46      	bge.n	801dbf8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801db6a:	9800      	ldr	r0, [sp, #0]
 801db6c:	fb03 0505 	mla	r5, r3, r5, r0
 801db70:	9801      	ldr	r0, [sp, #4]
 801db72:	5d2b      	ldrb	r3, [r5, r4]
 801db74:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801db78:	0e18      	lsrs	r0, r3, #24
 801db7a:	28ff      	cmp	r0, #255	; 0xff
 801db7c:	f000 80c0 	beq.w	801dd00 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801db80:	b2c4      	uxtb	r4, r0
 801db82:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801db86:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801db8a:	b2a5      	uxth	r5, r4
 801db8c:	b2db      	uxtb	r3, r3
 801db8e:	b398      	cbz	r0, 801dbf8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801db90:	43e4      	mvns	r4, r4
 801db92:	f8b7 8000 	ldrh.w	r8, [r7]
 801db96:	fb16 f605 	smulbb	r6, r6, r5
 801db9a:	fb1c fc05 	smulbb	ip, ip, r5
 801db9e:	fb13 f505 	smulbb	r5, r3, r5
 801dba2:	ea4f 2028 	mov.w	r0, r8, asr #8
 801dba6:	b2e3      	uxtb	r3, r4
 801dba8:	ea4f 04e8 	mov.w	r4, r8, asr #3
 801dbac:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801dbb0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801dbb4:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801dbb8:	fa5f f888 	uxtb.w	r8, r8
 801dbbc:	fb04 6403 	mla	r4, r4, r3, r6
 801dbc0:	fb00 cc03 	mla	ip, r0, r3, ip
 801dbc4:	fb08 5303 	mla	r3, r8, r3, r5
 801dbc8:	fa1f fc8c 	uxth.w	ip, ip
 801dbcc:	b298      	uxth	r0, r3
 801dbce:	b2a5      	uxth	r5, r4
 801dbd0:	f10c 0301 	add.w	r3, ip, #1
 801dbd4:	1c44      	adds	r4, r0, #1
 801dbd6:	1c6e      	adds	r6, r5, #1
 801dbd8:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801dbdc:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801dbe0:	eb06 2015 	add.w	r0, r6, r5, lsr #8
 801dbe4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801dbe8:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801dbec:	0940      	lsrs	r0, r0, #5
 801dbee:	4323      	orrs	r3, r4
 801dbf0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dbf4:	4303      	orrs	r3, r0
 801dbf6:	803b      	strh	r3, [r7, #0]
 801dbf8:	3702      	adds	r7, #2
 801dbfa:	4577      	cmp	r7, lr
 801dbfc:	4449      	add	r1, r9
 801dbfe:	4452      	add	r2, sl
 801dc00:	d1a7      	bne.n	801db52 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801dc02:	9b02      	ldr	r3, [sp, #8]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	f73f af66 	bgt.w	801dad6 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801dc0a:	b005      	add	sp, #20
 801dc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc10:	f43f af5d 	beq.w	801dace <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dc14:	f103 38ff 	add.w	r8, r3, #4294967295
 801dc18:	fb08 1c09 	mla	ip, r8, r9, r1
 801dc1c:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801dc20:	f53f af55 	bmi.w	801dace <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dc24:	4560      	cmp	r0, ip
 801dc26:	dd65      	ble.n	801dcf4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801dc28:	fb08 280a 	mla	r8, r8, sl, r2
 801dc2c:	ea5f 4828 	movs.w	r8, r8, asr #16
 801dc30:	d460      	bmi.n	801dcf4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801dc32:	45b8      	cmp	r8, r7
 801dc34:	da5e      	bge.n	801dcf4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801dc36:	2b00      	cmp	r3, #0
 801dc38:	f77f af49 	ble.w	801dace <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dc3c:	eb0e 0843 	add.w	r8, lr, r3, lsl #1
 801dc40:	e03f      	b.n	801dcc2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801dc42:	b2f0      	uxtb	r0, r6
 801dc44:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801dc48:	f3c3 2707 	ubfx	r7, r3, #8, #8
 801dc4c:	b284      	uxth	r4, r0
 801dc4e:	b2db      	uxtb	r3, r3
 801dc50:	b376      	cbz	r6, 801dcb0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801dc52:	43c0      	mvns	r0, r0
 801dc54:	f8be 6000 	ldrh.w	r6, [lr]
 801dc58:	fb17 f704 	smulbb	r7, r7, r4
 801dc5c:	fb1c fc04 	smulbb	ip, ip, r4
 801dc60:	fb13 f304 	smulbb	r3, r3, r4
 801dc64:	1235      	asrs	r5, r6, #8
 801dc66:	10f4      	asrs	r4, r6, #3
 801dc68:	00f6      	lsls	r6, r6, #3
 801dc6a:	b2c0      	uxtb	r0, r0
 801dc6c:	b2f6      	uxtb	r6, r6
 801dc6e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801dc72:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801dc76:	fb04 7400 	mla	r4, r4, r0, r7
 801dc7a:	fb06 3300 	mla	r3, r6, r0, r3
 801dc7e:	fb05 c500 	mla	r5, r5, r0, ip
 801dc82:	b2a4      	uxth	r4, r4
 801dc84:	b2ad      	uxth	r5, r5
 801dc86:	b29b      	uxth	r3, r3
 801dc88:	1c6e      	adds	r6, r5, #1
 801dc8a:	1c5f      	adds	r7, r3, #1
 801dc8c:	1c60      	adds	r0, r4, #1
 801dc8e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801dc92:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801dc96:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801dc9a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801dc9e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801dca2:	0940      	lsrs	r0, r0, #5
 801dca4:	432b      	orrs	r3, r5
 801dca6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dcaa:	4303      	orrs	r3, r0
 801dcac:	f8ae 3000 	strh.w	r3, [lr]
 801dcb0:	f10e 0e02 	add.w	lr, lr, #2
 801dcb4:	45c6      	cmp	lr, r8
 801dcb6:	4449      	add	r1, r9
 801dcb8:	4452      	add	r2, sl
 801dcba:	f43f af08 	beq.w	801dace <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dcbe:	f9bb 0008 	ldrsh.w	r0, [fp, #8]
 801dcc2:	9c00      	ldr	r4, [sp, #0]
 801dcc4:	1413      	asrs	r3, r2, #16
 801dcc6:	fb00 4303 	mla	r3, r0, r3, r4
 801dcca:	1408      	asrs	r0, r1, #16
 801dccc:	5c1b      	ldrb	r3, [r3, r0]
 801dcce:	9801      	ldr	r0, [sp, #4]
 801dcd0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801dcd4:	0e1e      	lsrs	r6, r3, #24
 801dcd6:	2eff      	cmp	r6, #255	; 0xff
 801dcd8:	d1b3      	bne.n	801dc42 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801dcda:	0958      	lsrs	r0, r3, #5
 801dcdc:	f400 64fc 	and.w	r4, r0, #2016	; 0x7e0
 801dce0:	480d      	ldr	r0, [pc, #52]	; (801dd18 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801dce2:	ea00 2013 	and.w	r0, r0, r3, lsr #8
 801dce6:	4320      	orrs	r0, r4
 801dce8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801dcec:	4303      	orrs	r3, r0
 801dcee:	f8ae 3000 	strh.w	r3, [lr]
 801dcf2:	e7dd      	b.n	801dcb0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801dcf4:	2b00      	cmp	r3, #0
 801dcf6:	f77f aeea 	ble.w	801dace <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dcfa:	4677      	mov	r7, lr
 801dcfc:	140c      	asrs	r4, r1, #16
 801dcfe:	e725      	b.n	801db4c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801dd00:	0958      	lsrs	r0, r3, #5
 801dd02:	f400 64fc 	and.w	r4, r0, #2016	; 0x7e0
 801dd06:	4804      	ldr	r0, [pc, #16]	; (801dd18 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801dd08:	ea00 2013 	and.w	r0, r0, r3, lsr #8
 801dd0c:	4320      	orrs	r0, r4
 801dd0e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801dd12:	4303      	orrs	r3, r0
 801dd14:	803b      	strh	r3, [r7, #0]
 801dd16:	e76f      	b.n	801dbf8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801dd18:	fffff800 	.word	0xfffff800

0801dd1c <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd20:	b089      	sub	sp, #36	; 0x24
 801dd22:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 801dd26:	9104      	str	r1, [sp, #16]
 801dd28:	ea6f 0c05 	mvn.w	ip, r5
 801dd2c:	e9dd 4117 	ldrd	r4, r1, [sp, #92]	; 0x5c
 801dd30:	e9dd 6715 	ldrd	r6, r7, [sp, #84]	; 0x54
 801dd34:	6860      	ldr	r0, [r4, #4]
 801dd36:	9205      	str	r2, [sp, #20]
 801dd38:	e9dd 2b19 	ldrd	r2, fp, [sp, #100]	; 0x64
 801dd3c:	fb00 1102 	mla	r1, r0, r2, r1
 801dd40:	6824      	ldr	r4, [r4, #0]
 801dd42:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dd46:	4421      	add	r1, r4
 801dd48:	f8db 4004 	ldr.w	r4, [fp, #4]
 801dd4c:	f8db 2000 	ldr.w	r2, [fp]
 801dd50:	3404      	adds	r4, #4
 801dd52:	fa5f fc8c 	uxtb.w	ip, ip
 801dd56:	fa1f f985 	uxth.w	r9, r5
 801dd5a:	9407      	str	r4, [sp, #28]
 801dd5c:	9202      	str	r2, [sp, #8]
 801dd5e:	e9dd 2013 	ldrd	r2, r0, [sp, #76]	; 0x4c
 801dd62:	9c04      	ldr	r4, [sp, #16]
 801dd64:	2c00      	cmp	r4, #0
 801dd66:	dc03      	bgt.n	801dd70 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801dd68:	9c05      	ldr	r4, [sp, #20]
 801dd6a:	2c00      	cmp	r4, #0
 801dd6c:	f340 80b1 	ble.w	801ded2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801dd70:	e9db e802 	ldrd	lr, r8, [fp, #8]
 801dd74:	2b00      	cmp	r3, #0
 801dd76:	fa0f f588 	sxth.w	r5, r8
 801dd7a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801dd7e:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 801dd82:	fa0f f48e 	sxth.w	r4, lr
 801dd86:	9503      	str	r5, [sp, #12]
 801dd88:	f340 80a6 	ble.w	801ded8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801dd8c:	46f2      	mov	sl, lr
 801dd8e:	9401      	str	r4, [sp, #4]
 801dd90:	1415      	asrs	r5, r2, #16
 801dd92:	d408      	bmi.n	801dda6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801dd94:	9c01      	ldr	r4, [sp, #4]
 801dd96:	42a5      	cmp	r5, r4
 801dd98:	da05      	bge.n	801dda6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801dd9a:	ea5f 4e20 	movs.w	lr, r0, asr #16
 801dd9e:	d402      	bmi.n	801dda6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801dda0:	9c03      	ldr	r4, [sp, #12]
 801dda2:	45a6      	cmp	lr, r4
 801dda4:	db3e      	blt.n	801de24 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801dda6:	3b01      	subs	r3, #1
 801dda8:	4432      	add	r2, r6
 801ddaa:	4438      	add	r0, r7
 801ddac:	f101 0103 	add.w	r1, r1, #3
 801ddb0:	d1ee      	bne.n	801dd90 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ddb2:	9b04      	ldr	r3, [sp, #16]
 801ddb4:	2b00      	cmp	r3, #0
 801ddb6:	f340 808c 	ble.w	801ded2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801ddba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ddbe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ddc2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ddc6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ddca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ddce:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801ddd2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ddd6:	ee76 6a62 	vsub.f32	s13, s12, s5
 801ddda:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801ddde:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dde2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801dde6:	ee16 2a90 	vmov	r2, s13
 801ddea:	3b01      	subs	r3, #1
 801ddec:	9304      	str	r3, [sp, #16]
 801ddee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ddf0:	9c05      	ldr	r4, [sp, #20]
 801ddf2:	fb92 f6f3 	sdiv	r6, r2, r3
 801ddf6:	ee17 2a10 	vmov	r2, s14
 801ddfa:	eeb0 7a43 	vmov.f32	s14, s6
 801ddfe:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801de02:	ee17 0a10 	vmov	r0, s14
 801de06:	eeb0 7a62 	vmov.f32	s14, s5
 801de0a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801de0e:	fb92 f7f3 	sdiv	r7, r2, r3
 801de12:	eeb0 3a67 	vmov.f32	s6, s15
 801de16:	ee17 2a10 	vmov	r2, s14
 801de1a:	eef0 2a46 	vmov.f32	s5, s12
 801de1e:	bf08      	it	eq
 801de20:	4623      	moveq	r3, r4
 801de22:	e79e      	b.n	801dd62 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801de24:	9506      	str	r5, [sp, #24]
 801de26:	1e5d      	subs	r5, r3, #1
 801de28:	46d6      	mov	lr, sl
 801de2a:	fb05 2a06 	mla	sl, r5, r6, r2
 801de2e:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801de32:	9c01      	ldr	r4, [sp, #4]
 801de34:	9501      	str	r5, [sp, #4]
 801de36:	d559      	bpl.n	801deec <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801de38:	460c      	mov	r4, r1
 801de3a:	9d06      	ldr	r5, [sp, #24]
 801de3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de40:	4419      	add	r1, r3
 801de42:	4673      	mov	r3, lr
 801de44:	46b6      	mov	lr, r6
 801de46:	4646      	mov	r6, r8
 801de48:	e002      	b.n	801de50 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801de4a:	1415      	asrs	r5, r2, #16
 801de4c:	e9db 3602 	ldrd	r3, r6, [fp, #8]
 801de50:	2d00      	cmp	r5, #0
 801de52:	4472      	add	r2, lr
 801de54:	db35      	blt.n	801dec2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801de56:	429d      	cmp	r5, r3
 801de58:	da33      	bge.n	801dec2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801de5a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801de5e:	d430      	bmi.n	801dec2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801de60:	45b0      	cmp	r8, r6
 801de62:	b21b      	sxth	r3, r3
 801de64:	da2d      	bge.n	801dec2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801de66:	9e02      	ldr	r6, [sp, #8]
 801de68:	fb08 6303 	mla	r3, r8, r3, r6
 801de6c:	7826      	ldrb	r6, [r4, #0]
 801de6e:	5d5b      	ldrb	r3, [r3, r5]
 801de70:	fb16 f80c 	smulbb	r8, r6, ip
 801de74:	9d07      	ldr	r5, [sp, #28]
 801de76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de7a:	5cee      	ldrb	r6, [r5, r3]
 801de7c:	442b      	add	r3, r5
 801de7e:	fb06 8609 	mla	r6, r6, r9, r8
 801de82:	b2b6      	uxth	r6, r6
 801de84:	7865      	ldrb	r5, [r4, #1]
 801de86:	f106 0801 	add.w	r8, r6, #1
 801de8a:	eb08 2616 	add.w	r6, r8, r6, lsr #8
 801de8e:	1236      	asrs	r6, r6, #8
 801de90:	fb15 f80c 	smulbb	r8, r5, ip
 801de94:	7026      	strb	r6, [r4, #0]
 801de96:	785d      	ldrb	r5, [r3, #1]
 801de98:	78a6      	ldrb	r6, [r4, #2]
 801de9a:	fb05 8509 	mla	r5, r5, r9, r8
 801de9e:	b2ad      	uxth	r5, r5
 801dea0:	f105 0801 	add.w	r8, r5, #1
 801dea4:	eb08 2515 	add.w	r5, r8, r5, lsr #8
 801dea8:	122d      	asrs	r5, r5, #8
 801deaa:	fb16 f60c 	smulbb	r6, r6, ip
 801deae:	7065      	strb	r5, [r4, #1]
 801deb0:	789b      	ldrb	r3, [r3, #2]
 801deb2:	fb03 6309 	mla	r3, r3, r9, r6
 801deb6:	b29b      	uxth	r3, r3
 801deb8:	1c5d      	adds	r5, r3, #1
 801deba:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801debe:	121b      	asrs	r3, r3, #8
 801dec0:	70a3      	strb	r3, [r4, #2]
 801dec2:	3403      	adds	r4, #3
 801dec4:	428c      	cmp	r4, r1
 801dec6:	4438      	add	r0, r7
 801dec8:	d1bf      	bne.n	801de4a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 801deca:	9b04      	ldr	r3, [sp, #16]
 801decc:	2b00      	cmp	r3, #0
 801dece:	f73f af74 	bgt.w	801ddba <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ded2:	b009      	add	sp, #36	; 0x24
 801ded4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ded8:	f43f af6b 	beq.w	801ddb2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801dedc:	1e5d      	subs	r5, r3, #1
 801dede:	fb05 2a06 	mla	sl, r5, r6, r2
 801dee2:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801dee6:	9501      	str	r5, [sp, #4]
 801dee8:	f53f af63 	bmi.w	801ddb2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801deec:	4554      	cmp	r4, sl
 801deee:	dd54      	ble.n	801df9a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801def0:	9d01      	ldr	r5, [sp, #4]
 801def2:	fb05 0507 	mla	r5, r5, r7, r0
 801def6:	ea5f 4a25 	movs.w	sl, r5, asr #16
 801defa:	d44e      	bmi.n	801df9a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801defc:	9d03      	ldr	r5, [sp, #12]
 801defe:	45aa      	cmp	sl, r5
 801df00:	da4b      	bge.n	801df9a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801df02:	2b00      	cmp	r3, #0
 801df04:	f77f af55 	ble.w	801ddb2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801df08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df0c:	eb01 0e03 	add.w	lr, r1, r3
 801df10:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801df14:	3103      	adds	r1, #3
 801df16:	e002      	b.n	801df1e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801df18:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801df1c:	3103      	adds	r1, #3
 801df1e:	9d02      	ldr	r5, [sp, #8]
 801df20:	1403      	asrs	r3, r0, #16
 801df22:	fb04 5303 	mla	r3, r4, r3, r5
 801df26:	1415      	asrs	r5, r2, #16
 801df28:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 801df2c:	5d5b      	ldrb	r3, [r3, r5]
 801df2e:	fb14 f40c 	smulbb	r4, r4, ip
 801df32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df36:	f818 5003 	ldrb.w	r5, [r8, r3]
 801df3a:	4443      	add	r3, r8
 801df3c:	fb05 4509 	mla	r5, r5, r9, r4
 801df40:	b2ad      	uxth	r5, r5
 801df42:	f105 0a01 	add.w	sl, r5, #1
 801df46:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 801df4a:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801df4e:	122d      	asrs	r5, r5, #8
 801df50:	fb14 f40c 	smulbb	r4, r4, ip
 801df54:	f801 5c03 	strb.w	r5, [r1, #-3]
 801df58:	785d      	ldrb	r5, [r3, #1]
 801df5a:	f811 ac01 	ldrb.w	sl, [r1, #-1]
 801df5e:	fb05 4409 	mla	r4, r5, r9, r4
 801df62:	b2a4      	uxth	r4, r4
 801df64:	1c65      	adds	r5, r4, #1
 801df66:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801df6a:	1224      	asrs	r4, r4, #8
 801df6c:	fb1a fa0c 	smulbb	sl, sl, ip
 801df70:	f801 4c02 	strb.w	r4, [r1, #-2]
 801df74:	789b      	ldrb	r3, [r3, #2]
 801df76:	458e      	cmp	lr, r1
 801df78:	fb03 aa09 	mla	sl, r3, r9, sl
 801df7c:	fa1f fa8a 	uxth.w	sl, sl
 801df80:	f10a 0301 	add.w	r3, sl, #1
 801df84:	eb03 2a1a 	add.w	sl, r3, sl, lsr #8
 801df88:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801df8c:	4438      	add	r0, r7
 801df8e:	4432      	add	r2, r6
 801df90:	f801 ac01 	strb.w	sl, [r1, #-1]
 801df94:	d1c0      	bne.n	801df18 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801df96:	4671      	mov	r1, lr
 801df98:	e70b      	b.n	801ddb2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801df9a:	2b00      	cmp	r3, #0
 801df9c:	f77f af09 	ble.w	801ddb2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801dfa0:	1415      	asrs	r5, r2, #16
 801dfa2:	460c      	mov	r4, r1
 801dfa4:	9506      	str	r5, [sp, #24]
 801dfa6:	e749      	b.n	801de3c <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>

0801dfa8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfac:	4689      	mov	r9, r1
 801dfae:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801dfb2:	46c8      	mov	r8, r9
 801dfb4:	b087      	sub	sp, #28
 801dfb6:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801dfba:	684c      	ldr	r4, [r1, #4]
 801dfbc:	9203      	str	r2, [sp, #12]
 801dfbe:	e9dd 2c17 	ldrd	r2, ip, [sp, #92]	; 0x5c
 801dfc2:	fb04 0202 	mla	r2, r4, r2, r0
 801dfc6:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801dfca:	680d      	ldr	r5, [r1, #0]
 801dfcc:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801dfd0:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801dfd4:	f8dc 2000 	ldr.w	r2, [ip]
 801dfd8:	4428      	add	r0, r5
 801dfda:	f104 0b04 	add.w	fp, r4, #4
 801dfde:	9205      	str	r2, [sp, #20]
 801dfe0:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801dfe4:	f1b8 0f00 	cmp.w	r8, #0
 801dfe8:	dc03      	bgt.n	801dff2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801dfea:	9c03      	ldr	r4, [sp, #12]
 801dfec:	2c00      	cmp	r4, #0
 801dfee:	f340 808d 	ble.w	801e10c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801dff2:	e9dc ea02 	ldrd	lr, sl, [ip, #8]
 801dff6:	2b00      	cmp	r3, #0
 801dff8:	fa0f f58a 	sxth.w	r5, sl
 801dffc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e000:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e004:	fa0f f48e 	sxth.w	r4, lr
 801e008:	9502      	str	r5, [sp, #8]
 801e00a:	f340 8082 	ble.w	801e112 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801e00e:	46f1      	mov	r9, lr
 801e010:	9401      	str	r4, [sp, #4]
 801e012:	1415      	asrs	r5, r2, #16
 801e014:	d408      	bmi.n	801e028 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e016:	9c01      	ldr	r4, [sp, #4]
 801e018:	42a5      	cmp	r5, r4
 801e01a:	da05      	bge.n	801e028 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e01c:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801e020:	d402      	bmi.n	801e028 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e022:	9c02      	ldr	r4, [sp, #8]
 801e024:	45a6      	cmp	lr, r4
 801e026:	db3b      	blt.n	801e0a0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801e028:	3b01      	subs	r3, #1
 801e02a:	4432      	add	r2, r6
 801e02c:	4439      	add	r1, r7
 801e02e:	f100 0003 	add.w	r0, r0, #3
 801e032:	d1ee      	bne.n	801e012 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e034:	f1b8 0f00 	cmp.w	r8, #0
 801e038:	dd68      	ble.n	801e10c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e03a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e03e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e042:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801e046:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e04a:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e04e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e052:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e056:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e05a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e05e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e062:	ee16 2a90 	vmov	r2, s13
 801e066:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e068:	9c03      	ldr	r4, [sp, #12]
 801e06a:	fb92 f6f3 	sdiv	r6, r2, r3
 801e06e:	ee17 2a10 	vmov	r2, s14
 801e072:	eeb0 7a43 	vmov.f32	s14, s6
 801e076:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e07a:	ee17 1a10 	vmov	r1, s14
 801e07e:	eeb0 7a62 	vmov.f32	s14, s5
 801e082:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e086:	f1b8 0801 	subs.w	r8, r8, #1
 801e08a:	fb92 f7f3 	sdiv	r7, r2, r3
 801e08e:	eeb0 3a67 	vmov.f32	s6, s15
 801e092:	ee17 2a10 	vmov	r2, s14
 801e096:	eef0 2a46 	vmov.f32	s5, s12
 801e09a:	bf08      	it	eq
 801e09c:	4623      	moveq	r3, r4
 801e09e:	e7a1      	b.n	801dfe4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e0a0:	9c01      	ldr	r4, [sp, #4]
 801e0a2:	9501      	str	r5, [sp, #4]
 801e0a4:	1e5d      	subs	r5, r3, #1
 801e0a6:	46ce      	mov	lr, r9
 801e0a8:	fb06 2905 	mla	r9, r6, r5, r2
 801e0ac:	ea5f 4929 	movs.w	r9, r9, asr #16
 801e0b0:	9504      	str	r5, [sp, #16]
 801e0b2:	d536      	bpl.n	801e122 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801e0b4:	4604      	mov	r4, r0
 801e0b6:	9d01      	ldr	r5, [sp, #4]
 801e0b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e0bc:	4418      	add	r0, r3
 801e0be:	4673      	mov	r3, lr
 801e0c0:	46b6      	mov	lr, r6
 801e0c2:	4656      	mov	r6, sl
 801e0c4:	e002      	b.n	801e0cc <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801e0c6:	1415      	asrs	r5, r2, #16
 801e0c8:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801e0cc:	2d00      	cmp	r5, #0
 801e0ce:	4472      	add	r2, lr
 801e0d0:	db15      	blt.n	801e0fe <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e0d2:	429d      	cmp	r5, r3
 801e0d4:	da13      	bge.n	801e0fe <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e0d6:	ea5f 4921 	movs.w	r9, r1, asr #16
 801e0da:	d410      	bmi.n	801e0fe <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e0dc:	45b1      	cmp	r9, r6
 801e0de:	da0e      	bge.n	801e0fe <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e0e0:	9e05      	ldr	r6, [sp, #20]
 801e0e2:	b21b      	sxth	r3, r3
 801e0e4:	fb09 6303 	mla	r3, r9, r3, r6
 801e0e8:	5d5b      	ldrb	r3, [r3, r5]
 801e0ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e0ee:	f81b 5003 	ldrb.w	r5, [fp, r3]
 801e0f2:	445b      	add	r3, fp
 801e0f4:	7025      	strb	r5, [r4, #0]
 801e0f6:	785d      	ldrb	r5, [r3, #1]
 801e0f8:	7065      	strb	r5, [r4, #1]
 801e0fa:	789b      	ldrb	r3, [r3, #2]
 801e0fc:	70a3      	strb	r3, [r4, #2]
 801e0fe:	3403      	adds	r4, #3
 801e100:	4284      	cmp	r4, r0
 801e102:	4439      	add	r1, r7
 801e104:	d1df      	bne.n	801e0c6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e106:	f1b8 0f00 	cmp.w	r8, #0
 801e10a:	dc96      	bgt.n	801e03a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e10c:	b007      	add	sp, #28
 801e10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e112:	d08f      	beq.n	801e034 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e114:	1e5d      	subs	r5, r3, #1
 801e116:	fb06 2905 	mla	r9, r6, r5, r2
 801e11a:	ea5f 4929 	movs.w	r9, r9, asr #16
 801e11e:	9504      	str	r5, [sp, #16]
 801e120:	d488      	bmi.n	801e034 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e122:	45a1      	cmp	r9, r4
 801e124:	da2d      	bge.n	801e182 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801e126:	9d04      	ldr	r5, [sp, #16]
 801e128:	fb07 1505 	mla	r5, r7, r5, r1
 801e12c:	ea5f 4925 	movs.w	r9, r5, asr #16
 801e130:	d427      	bmi.n	801e182 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801e132:	9d02      	ldr	r5, [sp, #8]
 801e134:	454d      	cmp	r5, r9
 801e136:	dd24      	ble.n	801e182 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801e138:	2b00      	cmp	r3, #0
 801e13a:	f77f af7b 	ble.w	801e034 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e13e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e142:	18c5      	adds	r5, r0, r3
 801e144:	f8dd e014 	ldr.w	lr, [sp, #20]
 801e148:	3003      	adds	r0, #3
 801e14a:	e002      	b.n	801e152 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801e14c:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 801e150:	3003      	adds	r0, #3
 801e152:	140b      	asrs	r3, r1, #16
 801e154:	fb04 e303 	mla	r3, r4, r3, lr
 801e158:	1414      	asrs	r4, r2, #16
 801e15a:	5d1b      	ldrb	r3, [r3, r4]
 801e15c:	4285      	cmp	r5, r0
 801e15e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e162:	f81b 4003 	ldrb.w	r4, [fp, r3]
 801e166:	445b      	add	r3, fp
 801e168:	f800 4c03 	strb.w	r4, [r0, #-3]
 801e16c:	785c      	ldrb	r4, [r3, #1]
 801e16e:	4439      	add	r1, r7
 801e170:	f800 4c02 	strb.w	r4, [r0, #-2]
 801e174:	789b      	ldrb	r3, [r3, #2]
 801e176:	4432      	add	r2, r6
 801e178:	f800 3c01 	strb.w	r3, [r0, #-1]
 801e17c:	d1e6      	bne.n	801e14c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e17e:	4628      	mov	r0, r5
 801e180:	e758      	b.n	801e034 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e182:	2b00      	cmp	r3, #0
 801e184:	f77f af56 	ble.w	801e034 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e188:	1415      	asrs	r5, r2, #16
 801e18a:	4604      	mov	r4, r0
 801e18c:	9501      	str	r5, [sp, #4]
 801e18e:	e793      	b.n	801e0b8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>

0801e190 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e194:	b087      	sub	sp, #28
 801e196:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801e19a:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801e19e:	e9dd 2c17 	ldrd	r2, ip, [sp, #92]	; 0x5c
 801e1a2:	684c      	ldr	r4, [r1, #4]
 801e1a4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801e1a8:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801e1ac:	fb04 0202 	mla	r2, r4, r2, r0
 801e1b0:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 801e1b4:	f8dc 2000 	ldr.w	r2, [ip]
 801e1b8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801e1bc:	9201      	str	r2, [sp, #4]
 801e1be:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e1c2:	6808      	ldr	r0, [r1, #0]
 801e1c4:	9204      	str	r2, [sp, #16]
 801e1c6:	1d22      	adds	r2, r4, #4
 801e1c8:	e9dd e111 	ldrd	lr, r1, [sp, #68]	; 0x44
 801e1cc:	9205      	str	r2, [sp, #20]
 801e1ce:	4672      	mov	r2, lr
 801e1d0:	4428      	add	r0, r5
 801e1d2:	9c02      	ldr	r4, [sp, #8]
 801e1d4:	2c00      	cmp	r4, #0
 801e1d6:	dc03      	bgt.n	801e1e0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801e1d8:	9c03      	ldr	r4, [sp, #12]
 801e1da:	2c00      	cmp	r4, #0
 801e1dc:	f340 80ba 	ble.w	801e354 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801e1e0:	e9dc e802 	ldrd	lr, r8, [ip, #8]
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e1ea:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e1ee:	fa0f f48e 	sxth.w	r4, lr
 801e1f2:	fa0f f988 	sxth.w	r9, r8
 801e1f6:	f340 80b0 	ble.w	801e35a <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801e1fa:	1415      	asrs	r5, r2, #16
 801e1fc:	d406      	bmi.n	801e20c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e1fe:	42a5      	cmp	r5, r4
 801e200:	da04      	bge.n	801e20c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e202:	ea5f 4a21 	movs.w	sl, r1, asr #16
 801e206:	d401      	bmi.n	801e20c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e208:	45ca      	cmp	sl, r9
 801e20a:	db3c      	blt.n	801e286 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801e20c:	3b01      	subs	r3, #1
 801e20e:	4432      	add	r2, r6
 801e210:	4439      	add	r1, r7
 801e212:	f100 0003 	add.w	r0, r0, #3
 801e216:	d1f0      	bne.n	801e1fa <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e218:	9b02      	ldr	r3, [sp, #8]
 801e21a:	2b00      	cmp	r3, #0
 801e21c:	f340 809a 	ble.w	801e354 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801e220:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e224:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e228:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801e22c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e230:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e234:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e238:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e23c:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e240:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e244:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e248:	ee16 2a90 	vmov	r2, s13
 801e24c:	3b01      	subs	r3, #1
 801e24e:	9302      	str	r3, [sp, #8]
 801e250:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e252:	9c03      	ldr	r4, [sp, #12]
 801e254:	fb92 f6f3 	sdiv	r6, r2, r3
 801e258:	ee17 2a10 	vmov	r2, s14
 801e25c:	eeb0 7a43 	vmov.f32	s14, s6
 801e260:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e264:	ee17 1a10 	vmov	r1, s14
 801e268:	eeb0 7a62 	vmov.f32	s14, s5
 801e26c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e270:	fb92 f7f3 	sdiv	r7, r2, r3
 801e274:	eeb0 3a67 	vmov.f32	s6, s15
 801e278:	ee17 2a10 	vmov	r2, s14
 801e27c:	eef0 2a46 	vmov.f32	s5, s12
 801e280:	bf08      	it	eq
 801e282:	4623      	moveq	r3, r4
 801e284:	e7a5      	b.n	801e1d2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801e286:	f103 3bff 	add.w	fp, r3, #4294967295
 801e28a:	fb0b 2a06 	mla	sl, fp, r6, r2
 801e28e:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801e292:	d56c      	bpl.n	801e36e <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801e294:	4604      	mov	r4, r0
 801e296:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e29a:	4418      	add	r0, r3
 801e29c:	4673      	mov	r3, lr
 801e29e:	46b6      	mov	lr, r6
 801e2a0:	4646      	mov	r6, r8
 801e2a2:	e002      	b.n	801e2aa <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801e2a4:	1415      	asrs	r5, r2, #16
 801e2a6:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801e2aa:	2d00      	cmp	r5, #0
 801e2ac:	4472      	add	r2, lr
 801e2ae:	db49      	blt.n	801e344 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e2b0:	429d      	cmp	r5, r3
 801e2b2:	da47      	bge.n	801e344 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e2b4:	ea5f 4821 	movs.w	r8, r1, asr #16
 801e2b8:	d444      	bmi.n	801e344 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e2ba:	45b0      	cmp	r8, r6
 801e2bc:	b21b      	sxth	r3, r3
 801e2be:	da41      	bge.n	801e344 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e2c0:	9e01      	ldr	r6, [sp, #4]
 801e2c2:	fb08 6303 	mla	r3, r8, r3, r6
 801e2c6:	5d5b      	ldrb	r3, [r3, r5]
 801e2c8:	9d05      	ldr	r5, [sp, #20]
 801e2ca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801e2ce:	0e1d      	lsrs	r5, r3, #24
 801e2d0:	d038      	beq.n	801e344 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e2d2:	9e04      	ldr	r6, [sp, #16]
 801e2d4:	fa5f f983 	uxtb.w	r9, r3
 801e2d8:	fb06 f605 	mul.w	r6, r6, r5
 801e2dc:	1c75      	adds	r5, r6, #1
 801e2de:	eb05 2526 	add.w	r5, r5, r6, asr #8
 801e2e2:	122d      	asrs	r5, r5, #8
 801e2e4:	43ee      	mvns	r6, r5
 801e2e6:	b2ad      	uxth	r5, r5
 801e2e8:	fb19 f905 	smulbb	r9, r9, r5
 801e2ec:	f3c3 2807 	ubfx	r8, r3, #8, #8
 801e2f0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e2f4:	f894 a000 	ldrb.w	sl, [r4]
 801e2f8:	fb18 f805 	smulbb	r8, r8, r5
 801e2fc:	fb13 f305 	smulbb	r3, r3, r5
 801e300:	b2f5      	uxtb	r5, r6
 801e302:	fb0a 9605 	mla	r6, sl, r5, r9
 801e306:	f894 b001 	ldrb.w	fp, [r4, #1]
 801e30a:	f894 9002 	ldrb.w	r9, [r4, #2]
 801e30e:	fb0b 8805 	mla	r8, fp, r5, r8
 801e312:	fb09 3305 	mla	r3, r9, r5, r3
 801e316:	fa1f fa86 	uxth.w	sl, r6
 801e31a:	fa1f f888 	uxth.w	r8, r8
 801e31e:	b29b      	uxth	r3, r3
 801e320:	f10a 0601 	add.w	r6, sl, #1
 801e324:	f108 0501 	add.w	r5, r8, #1
 801e328:	f103 0901 	add.w	r9, r3, #1
 801e32c:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 801e330:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 801e334:	eb09 2313 	add.w	r3, r9, r3, lsr #8
 801e338:	1236      	asrs	r6, r6, #8
 801e33a:	122d      	asrs	r5, r5, #8
 801e33c:	121b      	asrs	r3, r3, #8
 801e33e:	7026      	strb	r6, [r4, #0]
 801e340:	7065      	strb	r5, [r4, #1]
 801e342:	70a3      	strb	r3, [r4, #2]
 801e344:	3403      	adds	r4, #3
 801e346:	4284      	cmp	r4, r0
 801e348:	4439      	add	r1, r7
 801e34a:	d1ab      	bne.n	801e2a4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e34c:	9b02      	ldr	r3, [sp, #8]
 801e34e:	2b00      	cmp	r3, #0
 801e350:	f73f af66 	bgt.w	801e220 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e354:	b007      	add	sp, #28
 801e356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e35a:	f43f af5d 	beq.w	801e218 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e35e:	f103 3bff 	add.w	fp, r3, #4294967295
 801e362:	fb0b 2a06 	mla	sl, fp, r6, r2
 801e366:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801e36a:	f53f af55 	bmi.w	801e218 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e36e:	4554      	cmp	r4, sl
 801e370:	dd64      	ble.n	801e43c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801e372:	fb0b 1b07 	mla	fp, fp, r7, r1
 801e376:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801e37a:	d45f      	bmi.n	801e43c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801e37c:	45cb      	cmp	fp, r9
 801e37e:	da5d      	bge.n	801e43c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801e380:	2b00      	cmp	r3, #0
 801e382:	f77f af49 	ble.w	801e218 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e386:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e38a:	eb00 0e03 	add.w	lr, r0, r3
 801e38e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801e392:	3003      	adds	r0, #3
 801e394:	e002      	b.n	801e39c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801e396:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 801e39a:	3003      	adds	r0, #3
 801e39c:	9d01      	ldr	r5, [sp, #4]
 801e39e:	140b      	asrs	r3, r1, #16
 801e3a0:	fb04 5303 	mla	r3, r4, r3, r5
 801e3a4:	1414      	asrs	r4, r2, #16
 801e3a6:	5d1b      	ldrb	r3, [r3, r4]
 801e3a8:	4432      	add	r2, r6
 801e3aa:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801e3ae:	4439      	add	r1, r7
 801e3b0:	ea5f 6a13 	movs.w	sl, r3, lsr #24
 801e3b4:	d03e      	beq.n	801e434 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801e3b6:	9c04      	ldr	r4, [sp, #16]
 801e3b8:	fa5f f983 	uxtb.w	r9, r3
 801e3bc:	fb04 f40a 	mul.w	r4, r4, sl
 801e3c0:	f104 0a01 	add.w	sl, r4, #1
 801e3c4:	eb0a 2a24 	add.w	sl, sl, r4, asr #8
 801e3c8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e3cc:	ea6f 040a 	mvn.w	r4, sl
 801e3d0:	fa1f fa8a 	uxth.w	sl, sl
 801e3d4:	fb19 f90a 	smulbb	r9, r9, sl
 801e3d8:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801e3dc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e3e0:	fb15 fb0a 	smulbb	fp, r5, sl
 801e3e4:	fb13 f30a 	smulbb	r3, r3, sl
 801e3e8:	f810 ac03 	ldrb.w	sl, [r0, #-3]
 801e3ec:	b2e4      	uxtb	r4, r4
 801e3ee:	fb0a 9904 	mla	r9, sl, r4, r9
 801e3f2:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 801e3f6:	f810 ac01 	ldrb.w	sl, [r0, #-1]
 801e3fa:	fb05 b504 	mla	r5, r5, r4, fp
 801e3fe:	fb0a 3304 	mla	r3, sl, r4, r3
 801e402:	fa1f f989 	uxth.w	r9, r9
 801e406:	b2ad      	uxth	r5, r5
 801e408:	b29b      	uxth	r3, r3
 801e40a:	f109 0b01 	add.w	fp, r9, #1
 801e40e:	f105 0a01 	add.w	sl, r5, #1
 801e412:	1c5c      	adds	r4, r3, #1
 801e414:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e418:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801e41c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e420:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e424:	122d      	asrs	r5, r5, #8
 801e426:	121b      	asrs	r3, r3, #8
 801e428:	f800 9c03 	strb.w	r9, [r0, #-3]
 801e42c:	f800 5c02 	strb.w	r5, [r0, #-2]
 801e430:	f800 3c01 	strb.w	r3, [r0, #-1]
 801e434:	4586      	cmp	lr, r0
 801e436:	d1ae      	bne.n	801e396 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e438:	4670      	mov	r0, lr
 801e43a:	e6ed      	b.n	801e218 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	f77f aeeb 	ble.w	801e218 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e442:	4604      	mov	r4, r0
 801e444:	1415      	asrs	r5, r2, #16
 801e446:	e726      	b.n	801e296 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>

0801e448 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e448:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801e44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e450:	b087      	sub	sp, #28
 801e452:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801e456:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801e45a:	e9dd 2b17 	ldrd	r2, fp, [sp, #92]	; 0x5c
 801e45e:	684c      	ldr	r4, [r1, #4]
 801e460:	680d      	ldr	r5, [r1, #0]
 801e462:	fb04 0202 	mla	r2, r4, r2, r0
 801e466:	e9dd 8913 	ldrd	r8, r9, [sp, #76]	; 0x4c
 801e46a:	f8db 4004 	ldr.w	r4, [fp, #4]
 801e46e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801e472:	3404      	adds	r4, #4
 801e474:	f8db 2000 	ldr.w	r2, [fp]
 801e478:	4428      	add	r0, r5
 801e47a:	9402      	str	r4, [sp, #8]
 801e47c:	9201      	str	r2, [sp, #4]
 801e47e:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801e482:	9c03      	ldr	r4, [sp, #12]
 801e484:	2c00      	cmp	r4, #0
 801e486:	dc03      	bgt.n	801e490 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e488:	9c04      	ldr	r4, [sp, #16]
 801e48a:	2c00      	cmp	r4, #0
 801e48c:	f340 80b7 	ble.w	801e5fe <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801e490:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801e494:	2b00      	cmp	r3, #0
 801e496:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e49a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e49e:	b234      	sxth	r4, r6
 801e4a0:	fa0f fc87 	sxth.w	ip, r7
 801e4a4:	f340 80ae 	ble.w	801e604 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801e4a8:	1415      	asrs	r5, r2, #16
 801e4aa:	d406      	bmi.n	801e4ba <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e4ac:	42a5      	cmp	r5, r4
 801e4ae:	da04      	bge.n	801e4ba <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e4b0:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801e4b4:	d401      	bmi.n	801e4ba <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e4b6:	45e6      	cmp	lr, ip
 801e4b8:	db3c      	blt.n	801e534 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xec>
 801e4ba:	3b01      	subs	r3, #1
 801e4bc:	4442      	add	r2, r8
 801e4be:	4449      	add	r1, r9
 801e4c0:	f100 0003 	add.w	r0, r0, #3
 801e4c4:	d1f0      	bne.n	801e4a8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e4c6:	9b03      	ldr	r3, [sp, #12]
 801e4c8:	2b00      	cmp	r3, #0
 801e4ca:	f340 8098 	ble.w	801e5fe <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801e4ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e4d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e4d6:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801e4da:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e4de:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e4e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e4e6:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e4ea:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e4ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e4f2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e4f6:	ee16 2a90 	vmov	r2, s13
 801e4fa:	3b01      	subs	r3, #1
 801e4fc:	9303      	str	r3, [sp, #12]
 801e4fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e500:	9c04      	ldr	r4, [sp, #16]
 801e502:	fb92 f8f3 	sdiv	r8, r2, r3
 801e506:	ee17 2a10 	vmov	r2, s14
 801e50a:	eeb0 7a43 	vmov.f32	s14, s6
 801e50e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e512:	ee17 1a10 	vmov	r1, s14
 801e516:	eeb0 7a62 	vmov.f32	s14, s5
 801e51a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e51e:	fb92 f9f3 	sdiv	r9, r2, r3
 801e522:	eeb0 3a67 	vmov.f32	s6, s15
 801e526:	ee17 2a10 	vmov	r2, s14
 801e52a:	eef0 2a46 	vmov.f32	s5, s12
 801e52e:	bf08      	it	eq
 801e530:	4623      	moveq	r3, r4
 801e532:	e7a6      	b.n	801e482 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e534:	f103 3aff 	add.w	sl, r3, #4294967295
 801e538:	fb0a 2e08 	mla	lr, sl, r8, r2
 801e53c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801e540:	d56a      	bpl.n	801e618 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801e542:	4604      	mov	r4, r0
 801e544:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e548:	4418      	add	r0, r3
 801e54a:	e002      	b.n	801e552 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801e54c:	1415      	asrs	r5, r2, #16
 801e54e:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801e552:	2d00      	cmp	r5, #0
 801e554:	db4a      	blt.n	801e5ec <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e556:	42b5      	cmp	r5, r6
 801e558:	da48      	bge.n	801e5ec <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e55a:	140b      	asrs	r3, r1, #16
 801e55c:	d446      	bmi.n	801e5ec <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e55e:	42bb      	cmp	r3, r7
 801e560:	b236      	sxth	r6, r6
 801e562:	da43      	bge.n	801e5ec <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e564:	9f01      	ldr	r7, [sp, #4]
 801e566:	fb03 7606 	mla	r6, r3, r6, r7
 801e56a:	5d73      	ldrb	r3, [r6, r5]
 801e56c:	9d02      	ldr	r5, [sp, #8]
 801e56e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801e572:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e576:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e57a:	f000 80be 	beq.w	801e6fa <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 801e57e:	b2df      	uxtb	r7, r3
 801e580:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801e584:	f3c3 4a07 	ubfx	sl, r3, #16, #8
 801e588:	fa5f f38c 	uxtb.w	r3, ip
 801e58c:	b29d      	uxth	r5, r3
 801e58e:	f1bc 0f00 	cmp.w	ip, #0
 801e592:	d02b      	beq.n	801e5ec <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e594:	43db      	mvns	r3, r3
 801e596:	b2db      	uxtb	r3, r3
 801e598:	9305      	str	r3, [sp, #20]
 801e59a:	f894 e001 	ldrb.w	lr, [r4, #1]
 801e59e:	fb17 f305 	smulbb	r3, r7, r5
 801e5a2:	9f05      	ldr	r7, [sp, #20]
 801e5a4:	f894 c002 	ldrb.w	ip, [r4, #2]
 801e5a8:	fb1e fe07 	smulbb	lr, lr, r7
 801e5ac:	fb1c fc07 	smulbb	ip, ip, r7
 801e5b0:	fb06 ee05 	mla	lr, r6, r5, lr
 801e5b4:	7827      	ldrb	r7, [r4, #0]
 801e5b6:	9e05      	ldr	r6, [sp, #20]
 801e5b8:	fb0a c505 	mla	r5, sl, r5, ip
 801e5bc:	fb07 3706 	mla	r7, r7, r6, r3
 801e5c0:	b2ab      	uxth	r3, r5
 801e5c2:	b2bf      	uxth	r7, r7
 801e5c4:	fa1f f68e 	uxth.w	r6, lr
 801e5c8:	1c7d      	adds	r5, r7, #1
 801e5ca:	f106 0e01 	add.w	lr, r6, #1
 801e5ce:	f103 0c01 	add.w	ip, r3, #1
 801e5d2:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801e5d6:	eb0c 2613 	add.w	r6, ip, r3, lsr #8
 801e5da:	eb05 2317 	add.w	r3, r5, r7, lsr #8
 801e5de:	121b      	asrs	r3, r3, #8
 801e5e0:	ea4f 272e 	mov.w	r7, lr, asr #8
 801e5e4:	1235      	asrs	r5, r6, #8
 801e5e6:	7067      	strb	r7, [r4, #1]
 801e5e8:	70a5      	strb	r5, [r4, #2]
 801e5ea:	7023      	strb	r3, [r4, #0]
 801e5ec:	3403      	adds	r4, #3
 801e5ee:	4284      	cmp	r4, r0
 801e5f0:	4442      	add	r2, r8
 801e5f2:	4449      	add	r1, r9
 801e5f4:	d1aa      	bne.n	801e54c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e5f6:	9b03      	ldr	r3, [sp, #12]
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	f73f af68 	bgt.w	801e4ce <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e5fe:	b007      	add	sp, #28
 801e600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e604:	f43f af5f 	beq.w	801e4c6 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e608:	f103 3aff 	add.w	sl, r3, #4294967295
 801e60c:	fb0a 2e08 	mla	lr, sl, r8, r2
 801e610:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801e614:	f53f af57 	bmi.w	801e4c6 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e618:	4574      	cmp	r4, lr
 801e61a:	dd68      	ble.n	801e6ee <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e61c:	fb0a 1a09 	mla	sl, sl, r9, r1
 801e620:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801e624:	d463      	bmi.n	801e6ee <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e626:	45e2      	cmp	sl, ip
 801e628:	da61      	bge.n	801e6ee <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e62a:	2b00      	cmp	r3, #0
 801e62c:	f77f af4b 	ble.w	801e4c6 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e630:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e634:	eb00 0e03 	add.w	lr, r0, r3
 801e638:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801e63c:	3003      	adds	r0, #3
 801e63e:	e03b      	b.n	801e6b8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 801e640:	b2fc      	uxtb	r4, r7
 801e642:	fa5f fc83 	uxtb.w	ip, r3
 801e646:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801e64a:	b2a5      	uxth	r5, r4
 801e64c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e650:	b357      	cbz	r7, 801e6a8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801e652:	43e4      	mvns	r4, r4
 801e654:	f810 ac02 	ldrb.w	sl, [r0, #-2]
 801e658:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801e65c:	b2e4      	uxtb	r4, r4
 801e65e:	fb1c fc05 	smulbb	ip, ip, r5
 801e662:	fb18 f804 	smulbb	r8, r8, r4
 801e666:	fb1a fa04 	smulbb	sl, sl, r4
 801e66a:	f810 7c03 	ldrb.w	r7, [r0, #-3]
 801e66e:	fb03 8305 	mla	r3, r3, r5, r8
 801e672:	fb06 a605 	mla	r6, r6, r5, sl
 801e676:	fb07 c404 	mla	r4, r7, r4, ip
 801e67a:	b2b6      	uxth	r6, r6
 801e67c:	b2a4      	uxth	r4, r4
 801e67e:	b29b      	uxth	r3, r3
 801e680:	f106 0c01 	add.w	ip, r6, #1
 801e684:	f103 0801 	add.w	r8, r3, #1
 801e688:	1c65      	adds	r5, r4, #1
 801e68a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e68e:	eb08 2313 	add.w	r3, r8, r3, lsr #8
 801e692:	eb05 2514 	add.w	r5, r5, r4, lsr #8
 801e696:	1236      	asrs	r6, r6, #8
 801e698:	121b      	asrs	r3, r3, #8
 801e69a:	122d      	asrs	r5, r5, #8
 801e69c:	f800 6c02 	strb.w	r6, [r0, #-2]
 801e6a0:	f800 3c01 	strb.w	r3, [r0, #-1]
 801e6a4:	f800 5c03 	strb.w	r5, [r0, #-3]
 801e6a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e6aa:	4586      	cmp	lr, r0
 801e6ac:	441a      	add	r2, r3
 801e6ae:	4449      	add	r1, r9
 801e6b0:	d01b      	beq.n	801e6ea <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e6b2:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801e6b6:	3003      	adds	r0, #3
 801e6b8:	9d01      	ldr	r5, [sp, #4]
 801e6ba:	140b      	asrs	r3, r1, #16
 801e6bc:	fb04 5303 	mla	r3, r4, r3, r5
 801e6c0:	1414      	asrs	r4, r2, #16
 801e6c2:	5d1b      	ldrb	r3, [r3, r4]
 801e6c4:	9c02      	ldr	r4, [sp, #8]
 801e6c6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801e6ca:	0e1f      	lsrs	r7, r3, #24
 801e6cc:	2fff      	cmp	r7, #255	; 0xff
 801e6ce:	d1b7      	bne.n	801e640 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801e6d0:	0a1d      	lsrs	r5, r3, #8
 801e6d2:	0c1c      	lsrs	r4, r3, #16
 801e6d4:	f800 3c03 	strb.w	r3, [r0, #-3]
 801e6d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e6da:	4586      	cmp	lr, r0
 801e6dc:	f800 5c02 	strb.w	r5, [r0, #-2]
 801e6e0:	f800 4c01 	strb.w	r4, [r0, #-1]
 801e6e4:	441a      	add	r2, r3
 801e6e6:	4449      	add	r1, r9
 801e6e8:	d1e3      	bne.n	801e6b2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e6ea:	4670      	mov	r0, lr
 801e6ec:	e6eb      	b.n	801e4c6 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e6ee:	2b00      	cmp	r3, #0
 801e6f0:	f77f aee9 	ble.w	801e4c6 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e6f4:	4604      	mov	r4, r0
 801e6f6:	1415      	asrs	r5, r2, #16
 801e6f8:	e724      	b.n	801e544 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801e6fa:	0a1e      	lsrs	r6, r3, #8
 801e6fc:	0c1d      	lsrs	r5, r3, #16
 801e6fe:	7023      	strb	r3, [r4, #0]
 801e700:	7066      	strb	r6, [r4, #1]
 801e702:	70a5      	strb	r5, [r4, #2]
 801e704:	e772      	b.n	801e5ec <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e706:	bf00      	nop

0801e708 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e70c:	b089      	sub	sp, #36	; 0x24
 801e70e:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 801e712:	9101      	str	r1, [sp, #4]
 801e714:	ea6f 0a00 	mvn.w	sl, r0
 801e718:	e9dd e815 	ldrd	lr, r8, [sp, #84]	; 0x54
 801e71c:	9919      	ldr	r1, [sp, #100]	; 0x64
 801e71e:	9202      	str	r2, [sp, #8]
 801e720:	e9dd 5217 	ldrd	r5, r2, [sp, #92]	; 0x5c
 801e724:	686c      	ldr	r4, [r5, #4]
 801e726:	682f      	ldr	r7, [r5, #0]
 801e728:	fb04 2401 	mla	r4, r4, r1, r2
 801e72c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e72e:	b280      	uxth	r0, r0
 801e730:	e9d2 2100 	ldrd	r2, r1, [r2]
 801e734:	3104      	adds	r1, #4
 801e736:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 801e73a:	fa5f fa8a 	uxtb.w	sl, sl
 801e73e:	9007      	str	r0, [sp, #28]
 801e740:	9105      	str	r1, [sp, #20]
 801e742:	9200      	str	r2, [sp, #0]
 801e744:	e9dd 2513 	ldrd	r2, r5, [sp, #76]	; 0x4c
 801e748:	9901      	ldr	r1, [sp, #4]
 801e74a:	2900      	cmp	r1, #0
 801e74c:	dc03      	bgt.n	801e756 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801e74e:	9902      	ldr	r1, [sp, #8]
 801e750:	2900      	cmp	r1, #0
 801e752:	f340 80b6 	ble.w	801e8c2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e756:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e758:	2b00      	cmp	r3, #0
 801e75a:	e9d1 4602 	ldrd	r4, r6, [r1, #8]
 801e75e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e762:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 801e766:	b221      	sxth	r1, r4
 801e768:	fa0f fc86 	sxth.w	ip, r6
 801e76c:	f340 80ac 	ble.w	801e8c8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801e770:	1410      	asrs	r0, r2, #16
 801e772:	d406      	bmi.n	801e782 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e774:	4288      	cmp	r0, r1
 801e776:	da04      	bge.n	801e782 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e778:	ea5f 4925 	movs.w	r9, r5, asr #16
 801e77c:	d401      	bmi.n	801e782 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e77e:	45e1      	cmp	r9, ip
 801e780:	db3e      	blt.n	801e800 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801e782:	3b01      	subs	r3, #1
 801e784:	4472      	add	r2, lr
 801e786:	4445      	add	r5, r8
 801e788:	f107 0704 	add.w	r7, r7, #4
 801e78c:	d1f0      	bne.n	801e770 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e78e:	9b01      	ldr	r3, [sp, #4]
 801e790:	2b00      	cmp	r3, #0
 801e792:	f340 8096 	ble.w	801e8c2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e796:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e79a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e79e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e7a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e7a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e7aa:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e7ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e7b2:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e7b6:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e7ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e7be:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e7c2:	ee16 2a90 	vmov	r2, s13
 801e7c6:	3b01      	subs	r3, #1
 801e7c8:	9301      	str	r3, [sp, #4]
 801e7ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e7cc:	9902      	ldr	r1, [sp, #8]
 801e7ce:	fb92 fef3 	sdiv	lr, r2, r3
 801e7d2:	ee17 2a10 	vmov	r2, s14
 801e7d6:	eeb0 7a43 	vmov.f32	s14, s6
 801e7da:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e7de:	ee17 5a10 	vmov	r5, s14
 801e7e2:	eeb0 7a62 	vmov.f32	s14, s5
 801e7e6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e7ea:	fb92 f8f3 	sdiv	r8, r2, r3
 801e7ee:	eeb0 3a67 	vmov.f32	s6, s15
 801e7f2:	ee17 2a10 	vmov	r2, s14
 801e7f6:	eef0 2a46 	vmov.f32	s5, s12
 801e7fa:	bf08      	it	eq
 801e7fc:	460b      	moveq	r3, r1
 801e7fe:	e7a3      	b.n	801e748 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e800:	f103 39ff 	add.w	r9, r3, #4294967295
 801e804:	fb09 2b0e 	mla	fp, r9, lr, r2
 801e808:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801e80c:	d566      	bpl.n	801e8dc <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e80e:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801e812:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e814:	e002      	b.n	801e81c <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e816:	1410      	asrs	r0, r2, #16
 801e818:	e9d1 4602 	ldrd	r4, r6, [r1, #8]
 801e81c:	2800      	cmp	r0, #0
 801e81e:	f109 39ff 	add.w	r9, r9, #4294967295
 801e822:	4472      	add	r2, lr
 801e824:	db3f      	blt.n	801e8a6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e826:	42a0      	cmp	r0, r4
 801e828:	da3d      	bge.n	801e8a6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e82a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801e82e:	d43a      	bmi.n	801e8a6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e830:	45b4      	cmp	ip, r6
 801e832:	da38      	bge.n	801e8a6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e834:	9e00      	ldr	r6, [sp, #0]
 801e836:	b224      	sxth	r4, r4
 801e838:	fb0c 6404 	mla	r4, ip, r4, r6
 801e83c:	f814 b000 	ldrb.w	fp, [r4, r0]
 801e840:	7838      	ldrb	r0, [r7, #0]
 801e842:	9c05      	ldr	r4, [sp, #20]
 801e844:	fb10 f30a 	smulbb	r3, r0, sl
 801e848:	9306      	str	r3, [sp, #24]
 801e84a:	9b07      	ldr	r3, [sp, #28]
 801e84c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801e850:	4618      	mov	r0, r3
 801e852:	eb04 060b 	add.w	r6, r4, fp
 801e856:	78b4      	ldrb	r4, [r6, #2]
 801e858:	7876      	ldrb	r6, [r6, #1]
 801e85a:	fb14 fc03 	smulbb	ip, r4, r3
 801e85e:	9c05      	ldr	r4, [sp, #20]
 801e860:	fb16 f603 	smulbb	r6, r6, r3
 801e864:	f814 400b 	ldrb.w	r4, [r4, fp]
 801e868:	9b06      	ldr	r3, [sp, #24]
 801e86a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e86e:	fb04 3000 	mla	r0, r4, r0, r3
 801e872:	78bc      	ldrb	r4, [r7, #2]
 801e874:	fb0b 660a 	mla	r6, fp, sl, r6
 801e878:	fb04 c40a 	mla	r4, r4, sl, ip
 801e87c:	b2b6      	uxth	r6, r6
 801e87e:	b280      	uxth	r0, r0
 801e880:	b2a4      	uxth	r4, r4
 801e882:	f106 0c01 	add.w	ip, r6, #1
 801e886:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e88a:	f104 0b01 	add.w	fp, r4, #1
 801e88e:	f100 0c01 	add.w	ip, r0, #1
 801e892:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801e896:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 801e89a:	1236      	asrs	r6, r6, #8
 801e89c:	1224      	asrs	r4, r4, #8
 801e89e:	1200      	asrs	r0, r0, #8
 801e8a0:	707e      	strb	r6, [r7, #1]
 801e8a2:	70bc      	strb	r4, [r7, #2]
 801e8a4:	7038      	strb	r0, [r7, #0]
 801e8a6:	f1b9 3fff 	cmp.w	r9, #4294967295
 801e8aa:	f107 0704 	add.w	r7, r7, #4
 801e8ae:	4445      	add	r5, r8
 801e8b0:	d1b1      	bne.n	801e816 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801e8b2:	e9dd b303 	ldrd	fp, r3, [sp, #12]
 801e8b6:	eb0b 0783 	add.w	r7, fp, r3, lsl #2
 801e8ba:	9b01      	ldr	r3, [sp, #4]
 801e8bc:	2b00      	cmp	r3, #0
 801e8be:	f73f af6a 	bgt.w	801e796 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e8c2:	b009      	add	sp, #36	; 0x24
 801e8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8c8:	f43f af61 	beq.w	801e78e <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e8cc:	f103 39ff 	add.w	r9, r3, #4294967295
 801e8d0:	fb09 2b0e 	mla	fp, r9, lr, r2
 801e8d4:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801e8d8:	f53f af59 	bmi.w	801e78e <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e8dc:	4559      	cmp	r1, fp
 801e8de:	dd57      	ble.n	801e990 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e8e0:	fb09 5008 	mla	r0, r9, r8, r5
 801e8e4:	1400      	asrs	r0, r0, #16
 801e8e6:	d453      	bmi.n	801e990 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e8e8:	4560      	cmp	r0, ip
 801e8ea:	da51      	bge.n	801e990 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e8ec:	2b00      	cmp	r3, #0
 801e8ee:	f77f af4e 	ble.w	801e78e <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e8f2:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801e8f6:	f107 0c04 	add.w	ip, r7, #4
 801e8fa:	f8dd b014 	ldr.w	fp, [sp, #20]
 801e8fe:	460b      	mov	r3, r1
 801e900:	9f07      	ldr	r7, [sp, #28]
 801e902:	e002      	b.n	801e90a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801e904:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e906:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801e90a:	9800      	ldr	r0, [sp, #0]
 801e90c:	1429      	asrs	r1, r5, #16
 801e90e:	fb03 0301 	mla	r3, r3, r1, r0
 801e912:	1411      	asrs	r1, r2, #16
 801e914:	5c5e      	ldrb	r6, [r3, r1]
 801e916:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801e91a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e91e:	eb0b 0006 	add.w	r0, fp, r6
 801e922:	7881      	ldrb	r1, [r0, #2]
 801e924:	7840      	ldrb	r0, [r0, #1]
 801e926:	fb13 f30a 	smulbb	r3, r3, sl
 801e92a:	fb10 f007 	smulbb	r0, r0, r7
 801e92e:	fb11 f407 	smulbb	r4, r1, r7
 801e932:	f81b 1006 	ldrb.w	r1, [fp, r6]
 801e936:	f81c 6c03 	ldrb.w	r6, [ip, #-3]
 801e93a:	fb01 3307 	mla	r3, r1, r7, r3
 801e93e:	f81c 1c02 	ldrb.w	r1, [ip, #-2]
 801e942:	fb06 000a 	mla	r0, r6, sl, r0
 801e946:	fb01 410a 	mla	r1, r1, sl, r4
 801e94a:	b280      	uxth	r0, r0
 801e94c:	b29b      	uxth	r3, r3
 801e94e:	b289      	uxth	r1, r1
 801e950:	1c44      	adds	r4, r0, #1
 801e952:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801e956:	1c4e      	adds	r6, r1, #1
 801e958:	1c5c      	adds	r4, r3, #1
 801e95a:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801e95e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e962:	f109 39ff 	add.w	r9, r9, #4294967295
 801e966:	1200      	asrs	r0, r0, #8
 801e968:	1209      	asrs	r1, r1, #8
 801e96a:	121b      	asrs	r3, r3, #8
 801e96c:	f1b9 3fff 	cmp.w	r9, #4294967295
 801e970:	f80c 0c03 	strb.w	r0, [ip, #-3]
 801e974:	f80c 1c02 	strb.w	r1, [ip, #-2]
 801e978:	f80c 3c04 	strb.w	r3, [ip, #-4]
 801e97c:	4445      	add	r5, r8
 801e97e:	4472      	add	r2, lr
 801e980:	f10c 0c04 	add.w	ip, ip, #4
 801e984:	d1be      	bne.n	801e904 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801e986:	e9dd 7303 	ldrd	r7, r3, [sp, #12]
 801e98a:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 801e98e:	e6fe      	b.n	801e78e <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e990:	2b00      	cmp	r3, #0
 801e992:	f77f aefc 	ble.w	801e78e <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e996:	1410      	asrs	r0, r2, #16
 801e998:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801e99c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e99e:	e73d      	b.n	801e81c <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>

0801e9a0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9a4:	468a      	mov	sl, r1
 801e9a6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801e9aa:	46d1      	mov	r9, sl
 801e9ac:	b087      	sub	sp, #28
 801e9ae:	e9dd 1415 	ldrd	r1, r4, [sp, #84]	; 0x54
 801e9b2:	684d      	ldr	r5, [r1, #4]
 801e9b4:	9203      	str	r2, [sp, #12]
 801e9b6:	e9dd 2e17 	ldrd	r2, lr, [sp, #92]	; 0x5c
 801e9ba:	fb05 4402 	mla	r4, r5, r2, r4
 801e9be:	e9de 2000 	ldrd	r2, r0, [lr]
 801e9c2:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801e9c6:	680d      	ldr	r5, [r1, #0]
 801e9c8:	f100 0b04 	add.w	fp, r0, #4
 801e9cc:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801e9d0:	9205      	str	r2, [sp, #20]
 801e9d2:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801e9d6:	f1b9 0f00 	cmp.w	r9, #0
 801e9da:	dc03      	bgt.n	801e9e4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e9dc:	9803      	ldr	r0, [sp, #12]
 801e9de:	2800      	cmp	r0, #0
 801e9e0:	f340 8091 	ble.w	801eb06 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801e9e4:	e9de 8a02 	ldrd	r8, sl, [lr, #8]
 801e9e8:	2b00      	cmp	r3, #0
 801e9ea:	fa0f f088 	sxth.w	r0, r8
 801e9ee:	fa0f f48a 	sxth.w	r4, sl
 801e9f2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e9f6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e9fa:	9001      	str	r0, [sp, #4]
 801e9fc:	9402      	str	r4, [sp, #8]
 801e9fe:	f340 8085 	ble.w	801eb0c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ea02:	1414      	asrs	r4, r2, #16
 801ea04:	d408      	bmi.n	801ea18 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ea06:	9801      	ldr	r0, [sp, #4]
 801ea08:	4284      	cmp	r4, r0
 801ea0a:	da05      	bge.n	801ea18 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ea0c:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801ea10:	d402      	bmi.n	801ea18 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ea12:	9802      	ldr	r0, [sp, #8]
 801ea14:	4584      	cmp	ip, r0
 801ea16:	db3b      	blt.n	801ea90 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801ea18:	3b01      	subs	r3, #1
 801ea1a:	4432      	add	r2, r6
 801ea1c:	4439      	add	r1, r7
 801ea1e:	f105 0504 	add.w	r5, r5, #4
 801ea22:	d1ee      	bne.n	801ea02 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ea24:	f1b9 0f00 	cmp.w	r9, #0
 801ea28:	dd6d      	ble.n	801eb06 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801ea2a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ea2e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ea32:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801ea36:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ea3a:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801ea3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ea42:	ee76 6a62 	vsub.f32	s13, s12, s5
 801ea46:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801ea4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ea4e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ea52:	ee16 2a90 	vmov	r2, s13
 801ea56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea58:	9803      	ldr	r0, [sp, #12]
 801ea5a:	fb92 f6f3 	sdiv	r6, r2, r3
 801ea5e:	ee17 2a10 	vmov	r2, s14
 801ea62:	eeb0 7a43 	vmov.f32	s14, s6
 801ea66:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ea6a:	ee17 1a10 	vmov	r1, s14
 801ea6e:	eeb0 7a62 	vmov.f32	s14, s5
 801ea72:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ea76:	f1b9 0901 	subs.w	r9, r9, #1
 801ea7a:	fb92 f7f3 	sdiv	r7, r2, r3
 801ea7e:	eeb0 3a67 	vmov.f32	s6, s15
 801ea82:	ee17 2a10 	vmov	r2, s14
 801ea86:	eef0 2a46 	vmov.f32	s5, s12
 801ea8a:	bf08      	it	eq
 801ea8c:	4603      	moveq	r3, r0
 801ea8e:	e7a2      	b.n	801e9d6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ea90:	f103 3cff 	add.w	ip, r3, #4294967295
 801ea94:	9404      	str	r4, [sp, #16]
 801ea96:	fb06 240c 	mla	r4, r6, ip, r2
 801ea9a:	1424      	asrs	r4, r4, #16
 801ea9c:	d578      	bpl.n	801eb90 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ea9e:	9613      	str	r6, [sp, #76]	; 0x4c
 801eaa0:	2000      	movs	r0, #0
 801eaa2:	4646      	mov	r6, r8
 801eaa4:	46d4      	mov	ip, sl
 801eaa6:	9c04      	ldr	r4, [sp, #16]
 801eaa8:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 801eaac:	e002      	b.n	801eab4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801eaae:	1414      	asrs	r4, r2, #16
 801eab0:	e9de 6c02 	ldrd	r6, ip, [lr, #8]
 801eab4:	2c00      	cmp	r4, #0
 801eab6:	4442      	add	r2, r8
 801eab8:	db1c      	blt.n	801eaf4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801eaba:	42b4      	cmp	r4, r6
 801eabc:	da1a      	bge.n	801eaf4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801eabe:	ea5f 4a21 	movs.w	sl, r1, asr #16
 801eac2:	d417      	bmi.n	801eaf4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801eac4:	45e2      	cmp	sl, ip
 801eac6:	da15      	bge.n	801eaf4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801eac8:	fa0f fc86 	sxth.w	ip, r6
 801eacc:	9e05      	ldr	r6, [sp, #20]
 801eace:	fb0a 6c0c 	mla	ip, sl, ip, r6
 801ead2:	f81c 4004 	ldrb.w	r4, [ip, r4]
 801ead6:	eb05 0680 	add.w	r6, r5, r0, lsl #2
 801eada:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801eade:	f81b c004 	ldrb.w	ip, [fp, r4]
 801eae2:	445c      	add	r4, fp
 801eae4:	f805 c020 	strb.w	ip, [r5, r0, lsl #2]
 801eae8:	f894 c001 	ldrb.w	ip, [r4, #1]
 801eaec:	f886 c001 	strb.w	ip, [r6, #1]
 801eaf0:	78a4      	ldrb	r4, [r4, #2]
 801eaf2:	70b4      	strb	r4, [r6, #2]
 801eaf4:	3001      	adds	r0, #1
 801eaf6:	4283      	cmp	r3, r0
 801eaf8:	4439      	add	r1, r7
 801eafa:	d1d8      	bne.n	801eaae <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801eafc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801eb00:	f1b9 0f00 	cmp.w	r9, #0
 801eb04:	dc91      	bgt.n	801ea2a <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801eb06:	b007      	add	sp, #28
 801eb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb0c:	d08a      	beq.n	801ea24 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eb0e:	f103 3cff 	add.w	ip, r3, #4294967295
 801eb12:	fb0c 2406 	mla	r4, ip, r6, r2
 801eb16:	1424      	asrs	r4, r4, #16
 801eb18:	d484      	bmi.n	801ea24 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eb1a:	42a0      	cmp	r0, r4
 801eb1c:	dd32      	ble.n	801eb84 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801eb1e:	fb07 140c 	mla	r4, r7, ip, r1
 801eb22:	1420      	asrs	r0, r4, #16
 801eb24:	d42e      	bmi.n	801eb84 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801eb26:	9c02      	ldr	r4, [sp, #8]
 801eb28:	4284      	cmp	r4, r0
 801eb2a:	dd2b      	ble.n	801eb84 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801eb2c:	2b00      	cmp	r3, #0
 801eb2e:	f77f af79 	ble.w	801ea24 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eb32:	1d2c      	adds	r4, r5, #4
 801eb34:	f8dd a014 	ldr.w	sl, [sp, #20]
 801eb38:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801eb3c:	e001      	b.n	801eb42 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801eb3e:	f9be 8008 	ldrsh.w	r8, [lr, #8]
 801eb42:	1408      	asrs	r0, r1, #16
 801eb44:	fb08 a000 	mla	r0, r8, r0, sl
 801eb48:	ea4f 4822 	mov.w	r8, r2, asr #16
 801eb4c:	f810 0008 	ldrb.w	r0, [r0, r8]
 801eb50:	f10c 3cff 	add.w	ip, ip, #4294967295
 801eb54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eb58:	f81b 8000 	ldrb.w	r8, [fp, r0]
 801eb5c:	4458      	add	r0, fp
 801eb5e:	f804 8c04 	strb.w	r8, [r4, #-4]
 801eb62:	f890 8001 	ldrb.w	r8, [r0, #1]
 801eb66:	f1bc 3fff 	cmp.w	ip, #4294967295
 801eb6a:	f804 8c03 	strb.w	r8, [r4, #-3]
 801eb6e:	7880      	ldrb	r0, [r0, #2]
 801eb70:	4439      	add	r1, r7
 801eb72:	f804 0c02 	strb.w	r0, [r4, #-2]
 801eb76:	4432      	add	r2, r6
 801eb78:	f104 0404 	add.w	r4, r4, #4
 801eb7c:	d1df      	bne.n	801eb3e <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801eb7e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801eb82:	e7bd      	b.n	801eb00 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801eb84:	2b00      	cmp	r3, #0
 801eb86:	f77f af4d 	ble.w	801ea24 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eb8a:	1410      	asrs	r0, r2, #16
 801eb8c:	9004      	str	r0, [sp, #16]
 801eb8e:	e786      	b.n	801ea9e <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfe>
 801eb90:	9801      	ldr	r0, [sp, #4]
 801eb92:	e7c2      	b.n	801eb1a <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>

0801eb94 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb94:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801eb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb9c:	b08b      	sub	sp, #44	; 0x2c
 801eb9e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801eba2:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
 801eba6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801eba8:	6854      	ldr	r4, [r2, #4]
 801ebaa:	6816      	ldr	r6, [r2, #0]
 801ebac:	fb04 1000 	mla	r0, r4, r0, r1
 801ebb0:	e9dd 4b17 	ldrd	r4, fp, [sp, #92]	; 0x5c
 801ebb4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801ebb6:	f89d 7074 	ldrb.w	r7, [sp, #116]	; 0x74
 801ebba:	e9d2 2500 	ldrd	r2, r5, [r2]
 801ebbe:	3504      	adds	r5, #4
 801ebc0:	9703      	str	r7, [sp, #12]
 801ebc2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 801ebc6:	9507      	str	r5, [sp, #28]
 801ebc8:	9206      	str	r2, [sp, #24]
 801ebca:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 801ebce:	9d01      	ldr	r5, [sp, #4]
 801ebd0:	2d00      	cmp	r5, #0
 801ebd2:	dc03      	bgt.n	801ebdc <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ebd4:	9d02      	ldr	r5, [sp, #8]
 801ebd6:	2d00      	cmp	r5, #0
 801ebd8:	f340 80d5 	ble.w	801ed86 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801ebdc:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801ebde:	2b00      	cmp	r3, #0
 801ebe0:	e9d5 7c02 	ldrd	r7, ip, [r5, #8]
 801ebe4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ebe8:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801ebec:	b23d      	sxth	r5, r7
 801ebee:	fa0f fe8c 	sxth.w	lr, ip
 801ebf2:	f340 80cb 	ble.w	801ed8c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801ebf6:	1416      	asrs	r6, r2, #16
 801ebf8:	d406      	bmi.n	801ec08 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ebfa:	42ae      	cmp	r6, r5
 801ebfc:	da04      	bge.n	801ec08 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ebfe:	ea5f 4821 	movs.w	r8, r1, asr #16
 801ec02:	d401      	bmi.n	801ec08 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ec04:	45f0      	cmp	r8, lr
 801ec06:	db3c      	blt.n	801ec82 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 801ec08:	3b01      	subs	r3, #1
 801ec0a:	4422      	add	r2, r4
 801ec0c:	4459      	add	r1, fp
 801ec0e:	f100 0004 	add.w	r0, r0, #4
 801ec12:	d1f0      	bne.n	801ebf6 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ec14:	9b01      	ldr	r3, [sp, #4]
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	f340 80b5 	ble.w	801ed86 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801ec1c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ec20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ec24:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801ec28:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ec2c:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801ec30:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ec34:	ee76 6a62 	vsub.f32	s13, s12, s5
 801ec38:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801ec3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ec40:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ec44:	ee16 2a90 	vmov	r2, s13
 801ec48:	3b01      	subs	r3, #1
 801ec4a:	9301      	str	r3, [sp, #4]
 801ec4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ec4e:	9d02      	ldr	r5, [sp, #8]
 801ec50:	fb92 f4f3 	sdiv	r4, r2, r3
 801ec54:	ee17 2a10 	vmov	r2, s14
 801ec58:	eeb0 7a43 	vmov.f32	s14, s6
 801ec5c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ec60:	ee17 1a10 	vmov	r1, s14
 801ec64:	eeb0 7a62 	vmov.f32	s14, s5
 801ec68:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ec6c:	fb92 fbf3 	sdiv	fp, r2, r3
 801ec70:	eeb0 3a67 	vmov.f32	s6, s15
 801ec74:	ee17 2a10 	vmov	r2, s14
 801ec78:	eef0 2a46 	vmov.f32	s5, s12
 801ec7c:	bf08      	it	eq
 801ec7e:	462b      	moveq	r3, r5
 801ec80:	e7a5      	b.n	801ebce <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ec82:	f103 38ff 	add.w	r8, r3, #4294967295
 801ec86:	fb08 2904 	mla	r9, r8, r4, r2
 801ec8a:	ea5f 4929 	movs.w	r9, r9, asr #16
 801ec8e:	f140 8087 	bpl.w	801eda0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801ec92:	f1c3 0900 	rsb	r9, r3, #0
 801ec96:	4698      	mov	r8, r3
 801ec98:	2500      	movs	r5, #0
 801ec9a:	9004      	str	r0, [sp, #16]
 801ec9c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ec9e:	e002      	b.n	801eca6 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801eca0:	1416      	asrs	r6, r2, #16
 801eca2:	e9d3 7c02 	ldrd	r7, ip, [r3, #8]
 801eca6:	2e00      	cmp	r6, #0
 801eca8:	4422      	add	r2, r4
 801ecaa:	db61      	blt.n	801ed70 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ecac:	42be      	cmp	r6, r7
 801ecae:	da5f      	bge.n	801ed70 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ecb0:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801ecb4:	d45c      	bmi.n	801ed70 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ecb6:	45e6      	cmp	lr, ip
 801ecb8:	b23f      	sxth	r7, r7
 801ecba:	da59      	bge.n	801ed70 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ecbc:	9806      	ldr	r0, [sp, #24]
 801ecbe:	fb0e 0707 	mla	r7, lr, r7, r0
 801ecc2:	9807      	ldr	r0, [sp, #28]
 801ecc4:	5dbe      	ldrb	r6, [r7, r6]
 801ecc6:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 801ecca:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
 801ecce:	9804      	ldr	r0, [sp, #16]
 801ecd0:	9705      	str	r7, [sp, #20]
 801ecd2:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 801ecd6:	0e37      	lsrs	r7, r6, #24
 801ecd8:	9008      	str	r0, [sp, #32]
 801ecda:	d049      	beq.n	801ed70 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ecdc:	9803      	ldr	r0, [sp, #12]
 801ecde:	fa5f fa86 	uxtb.w	sl, r6
 801ece2:	fb00 f707 	mul.w	r7, r0, r7
 801ece6:	9805      	ldr	r0, [sp, #20]
 801ece8:	f107 0c01 	add.w	ip, r7, #1
 801ecec:	eb0c 2c27 	add.w	ip, ip, r7, asr #8
 801ecf0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ecf4:	4686      	mov	lr, r0
 801ecf6:	ea6f 070c 	mvn.w	r7, ip
 801ecfa:	fa1f fc8c 	uxth.w	ip, ip
 801ecfe:	fb1a fa0c 	smulbb	sl, sl, ip
 801ed02:	9804      	ldr	r0, [sp, #16]
 801ed04:	b2ff      	uxtb	r7, r7
 801ed06:	f810 e02e 	ldrb.w	lr, [r0, lr, lsl #2]
 801ed0a:	9805      	ldr	r0, [sp, #20]
 801ed0c:	fb0e ae07 	mla	lr, lr, r7, sl
 801ed10:	fa1f fe8e 	uxth.w	lr, lr
 801ed14:	f10e 0a01 	add.w	sl, lr, #1
 801ed18:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801ed1c:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 801ed20:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ed24:	fb16 f60c 	smulbb	r6, r6, ip
 801ed28:	9609      	str	r6, [sp, #36]	; 0x24
 801ed2a:	4606      	mov	r6, r0
 801ed2c:	9804      	ldr	r0, [sp, #16]
 801ed2e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ed32:	f800 e026 	strb.w	lr, [r0, r6, lsl #2]
 801ed36:	fb1a fa0c 	smulbb	sl, sl, ip
 801ed3a:	9808      	ldr	r0, [sp, #32]
 801ed3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ed3e:	f890 e002 	ldrb.w	lr, [r0, #2]
 801ed42:	f890 c001 	ldrb.w	ip, [r0, #1]
 801ed46:	fb0e 6607 	mla	r6, lr, r7, r6
 801ed4a:	fb0c ac07 	mla	ip, ip, r7, sl
 801ed4e:	b2b6      	uxth	r6, r6
 801ed50:	fa1f fe8c 	uxth.w	lr, ip
 801ed54:	1c77      	adds	r7, r6, #1
 801ed56:	f10e 0c01 	add.w	ip, lr, #1
 801ed5a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ed5e:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801ed62:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ed66:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801ed6a:	7047      	strb	r7, [r0, #1]
 801ed6c:	f880 c002 	strb.w	ip, [r0, #2]
 801ed70:	3d01      	subs	r5, #1
 801ed72:	45a9      	cmp	r9, r5
 801ed74:	4459      	add	r1, fp
 801ed76:	d193      	bne.n	801eca0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ed78:	9b01      	ldr	r3, [sp, #4]
 801ed7a:	9804      	ldr	r0, [sp, #16]
 801ed7c:	2b00      	cmp	r3, #0
 801ed7e:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801ed82:	f73f af4b 	bgt.w	801ec1c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801ed86:	b00b      	add	sp, #44	; 0x2c
 801ed88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed8c:	f43f af42 	beq.w	801ec14 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ed90:	f103 38ff 	add.w	r8, r3, #4294967295
 801ed94:	fb08 2904 	mla	r9, r8, r4, r2
 801ed98:	ea5f 4929 	movs.w	r9, r9, asr #16
 801ed9c:	f53f af3a 	bmi.w	801ec14 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801eda0:	454d      	cmp	r5, r9
 801eda2:	dd68      	ble.n	801ee76 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801eda4:	fb08 160b 	mla	r6, r8, fp, r1
 801eda8:	1436      	asrs	r6, r6, #16
 801edaa:	d464      	bmi.n	801ee76 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801edac:	4576      	cmp	r6, lr
 801edae:	da62      	bge.n	801ee76 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	f77f af2f 	ble.w	801ec14 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801edb6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 801edba:	f100 0e04 	add.w	lr, r0, #4
 801edbe:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801edc2:	e002      	b.n	801edca <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801edc4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801edc6:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 801edca:	140b      	asrs	r3, r1, #16
 801edcc:	fb05 6303 	mla	r3, r5, r3, r6
 801edd0:	1410      	asrs	r0, r2, #16
 801edd2:	5c1b      	ldrb	r3, [r3, r0]
 801edd4:	f108 38ff 	add.w	r8, r8, #4294967295
 801edd8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801eddc:	4422      	add	r2, r4
 801edde:	0e18      	lsrs	r0, r3, #24
 801ede0:	4459      	add	r1, fp
 801ede2:	d03e      	beq.n	801ee62 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 801ede4:	9d03      	ldr	r5, [sp, #12]
 801ede6:	fa5f fc83 	uxtb.w	ip, r3
 801edea:	fb05 f000 	mul.w	r0, r5, r0
 801edee:	f100 0901 	add.w	r9, r0, #1
 801edf2:	eb09 2920 	add.w	r9, r9, r0, asr #8
 801edf6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801edfa:	ea6f 0009 	mvn.w	r0, r9
 801edfe:	fa1f f989 	uxth.w	r9, r9
 801ee02:	fb1c fc09 	smulbb	ip, ip, r9
 801ee06:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801ee0a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801ee0e:	fb15 fa09 	smulbb	sl, r5, r9
 801ee12:	fb13 f309 	smulbb	r3, r3, r9
 801ee16:	f81e 9c04 	ldrb.w	r9, [lr, #-4]
 801ee1a:	b2c0      	uxtb	r0, r0
 801ee1c:	fb09 cc00 	mla	ip, r9, r0, ip
 801ee20:	f81e 5c03 	ldrb.w	r5, [lr, #-3]
 801ee24:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 801ee28:	fb05 a500 	mla	r5, r5, r0, sl
 801ee2c:	fb09 3300 	mla	r3, r9, r0, r3
 801ee30:	fa1f fc8c 	uxth.w	ip, ip
 801ee34:	b2ad      	uxth	r5, r5
 801ee36:	b29b      	uxth	r3, r3
 801ee38:	f10c 0a01 	add.w	sl, ip, #1
 801ee3c:	f105 0901 	add.w	r9, r5, #1
 801ee40:	1c58      	adds	r0, r3, #1
 801ee42:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801ee46:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801ee4a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801ee4e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ee52:	122d      	asrs	r5, r5, #8
 801ee54:	121b      	asrs	r3, r3, #8
 801ee56:	f80e cc04 	strb.w	ip, [lr, #-4]
 801ee5a:	f80e 5c03 	strb.w	r5, [lr, #-3]
 801ee5e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ee62:	f1b8 3fff 	cmp.w	r8, #4294967295
 801ee66:	f10e 0e04 	add.w	lr, lr, #4
 801ee6a:	d1ab      	bne.n	801edc4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801ee6c:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 801ee70:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801ee74:	e6ce      	b.n	801ec14 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ee76:	2b00      	cmp	r3, #0
 801ee78:	f77f aecc 	ble.w	801ec14 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ee7c:	1416      	asrs	r6, r2, #16
 801ee7e:	e708      	b.n	801ec92 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfe>

0801ee80 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ee80:	4770      	bx	lr
 801ee82:	bf00      	nop

0801ee84 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ee84:	4770      	bx	lr
 801ee86:	bf00      	nop

0801ee88 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ee88:	4770      	bx	lr
 801ee8a:	bf00      	nop

0801ee8c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801ee8c:	4770      	bx	lr
 801ee8e:	bf00      	nop

0801ee90 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ee90:	4770      	bx	lr
 801ee92:	bf00      	nop

0801ee94 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801ee94:	4770      	bx	lr
 801ee96:	bf00      	nop

0801ee98 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ee98:	4770      	bx	lr
 801ee9a:	bf00      	nop

0801ee9c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ee9c:	4770      	bx	lr
 801ee9e:	bf00      	nop

0801eea0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801eea0:	4770      	bx	lr
 801eea2:	bf00      	nop

0801eea4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801eea4:	4770      	bx	lr
 801eea6:	bf00      	nop

0801eea8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801eea8:	4770      	bx	lr
 801eeaa:	bf00      	nop

0801eeac <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801eeac:	4770      	bx	lr
 801eeae:	bf00      	nop

0801eeb0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801eeb0:	4770      	bx	lr
 801eeb2:	bf00      	nop

0801eeb4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801eeb4:	4770      	bx	lr
 801eeb6:	bf00      	nop

0801eeb8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801eeb8:	4770      	bx	lr
 801eeba:	bf00      	nop

0801eebc <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801eebc:	4770      	bx	lr
 801eebe:	bf00      	nop

0801eec0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801eec0:	4770      	bx	lr
 801eec2:	bf00      	nop

0801eec4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801eec4:	4770      	bx	lr
 801eec6:	bf00      	nop

0801eec8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801eec8:	4770      	bx	lr
 801eeca:	bf00      	nop

0801eecc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801eecc:	4770      	bx	lr
 801eece:	bf00      	nop

0801eed0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801eed0:	4770      	bx	lr
 801eed2:	bf00      	nop

0801eed4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801eed4:	4770      	bx	lr
 801eed6:	bf00      	nop

0801eed8 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv>:
 801eed8:	b508      	push	{r3, lr}
 801eeda:	4b0d      	ldr	r3, [pc, #52]	; (801ef10 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x38>)
 801eedc:	881b      	ldrh	r3, [r3, #0]
 801eede:	b17b      	cbz	r3, 801ef00 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x28>
 801eee0:	7a02      	ldrb	r2, [r0, #8]
 801eee2:	2a02      	cmp	r2, #2
 801eee4:	d007      	beq.n	801eef6 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x1e>
 801eee6:	2a01      	cmp	r2, #1
 801eee8:	bf0c      	ite	eq
 801eeea:	2003      	moveq	r0, #3
 801eeec:	2002      	movne	r0, #2
 801eeee:	fb13 f000 	smulbb	r0, r3, r0
 801eef2:	b280      	uxth	r0, r0
 801eef4:	bd08      	pop	{r3, pc}
 801eef6:	2004      	movs	r0, #4
 801eef8:	fb13 f000 	smulbb	r0, r3, r0
 801eefc:	b280      	uxth	r0, r0
 801eefe:	bd08      	pop	{r3, pc}
 801ef00:	4b04      	ldr	r3, [pc, #16]	; (801ef14 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x3c>)
 801ef02:	4a05      	ldr	r2, [pc, #20]	; (801ef18 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x40>)
 801ef04:	f44f 7187 	mov.w	r1, #270	; 0x10e
 801ef08:	4804      	ldr	r0, [pc, #16]	; (801ef1c <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x44>)
 801ef0a:	f009 f8e5 	bl	80280d8 <__assert_func>
 801ef0e:	bf00      	nop
 801ef10:	20198152 	.word	0x20198152
 801ef14:	0802b490 	.word	0x0802b490
 801ef18:	0802c24c 	.word	0x0802c24c
 801ef1c:	0802b4d4 	.word	0x0802b4d4

0801ef20 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv>:
 801ef20:	b530      	push	{r4, r5, lr}
 801ef22:	4b26      	ldr	r3, [pc, #152]	; (801efbc <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x9c>)
 801ef24:	b083      	sub	sp, #12
 801ef26:	681c      	ldr	r4, [r3, #0]
 801ef28:	2c00      	cmp	r4, #0
 801ef2a:	d040      	beq.n	801efae <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x8e>
 801ef2c:	4b24      	ldr	r3, [pc, #144]	; (801efc0 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa0>)
 801ef2e:	4605      	mov	r5, r0
 801ef30:	781b      	ldrb	r3, [r3, #0]
 801ef32:	b9f3      	cbnz	r3, 801ef72 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x52>
 801ef34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ef36:	7a2a      	ldrb	r2, [r5, #8]
 801ef38:	2a01      	cmp	r2, #1
 801ef3a:	d025      	beq.n	801ef88 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x68>
 801ef3c:	d30d      	bcc.n	801ef5a <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x3a>
 801ef3e:	2a02      	cmp	r2, #2
 801ef40:	d12f      	bne.n	801efa2 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x82>
 801ef42:	4920      	ldr	r1, [pc, #128]	; (801efc4 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801ef44:	4a20      	ldr	r2, [pc, #128]	; (801efc8 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801ef46:	8809      	ldrh	r1, [r1, #0]
 801ef48:	8812      	ldrh	r2, [r2, #0]
 801ef4a:	008c      	lsls	r4, r1, #2
 801ef4c:	4618      	mov	r0, r3
 801ef4e:	9400      	str	r4, [sp, #0]
 801ef50:	2310      	movs	r3, #16
 801ef52:	f7fb ff1d 	bl	801ad90 <nema_bind_dst_tex>
 801ef56:	b003      	add	sp, #12
 801ef58:	bd30      	pop	{r4, r5, pc}
 801ef5a:	491a      	ldr	r1, [pc, #104]	; (801efc4 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801ef5c:	4a1a      	ldr	r2, [pc, #104]	; (801efc8 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801ef5e:	8809      	ldrh	r1, [r1, #0]
 801ef60:	8812      	ldrh	r2, [r2, #0]
 801ef62:	004c      	lsls	r4, r1, #1
 801ef64:	4618      	mov	r0, r3
 801ef66:	9400      	str	r4, [sp, #0]
 801ef68:	2304      	movs	r3, #4
 801ef6a:	f7fb ff11 	bl	801ad90 <nema_bind_dst_tex>
 801ef6e:	b003      	add	sp, #12
 801ef70:	bd30      	pop	{r4, r5, pc}
 801ef72:	6823      	ldr	r3, [r4, #0]
 801ef74:	4620      	mov	r0, r4
 801ef76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ef78:	4798      	blx	r3
 801ef7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ef7c:	4283      	cmp	r3, r0
 801ef7e:	d1da      	bne.n	801ef36 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x16>
 801ef80:	7a2a      	ldrb	r2, [r5, #8]
 801ef82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ef84:	2a01      	cmp	r2, #1
 801ef86:	d1d9      	bne.n	801ef3c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x1c>
 801ef88:	490e      	ldr	r1, [pc, #56]	; (801efc4 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801ef8a:	4a0f      	ldr	r2, [pc, #60]	; (801efc8 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801ef8c:	8809      	ldrh	r1, [r1, #0]
 801ef8e:	8812      	ldrh	r2, [r2, #0]
 801ef90:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801ef94:	4618      	mov	r0, r3
 801ef96:	9400      	str	r4, [sp, #0]
 801ef98:	2339      	movs	r3, #57	; 0x39
 801ef9a:	f7fb fef9 	bl	801ad90 <nema_bind_dst_tex>
 801ef9e:	b003      	add	sp, #12
 801efa0:	bd30      	pop	{r4, r5, pc}
 801efa2:	4b0a      	ldr	r3, [pc, #40]	; (801efcc <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xac>)
 801efa4:	4a0a      	ldr	r2, [pc, #40]	; (801efd0 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb0>)
 801efa6:	2140      	movs	r1, #64	; 0x40
 801efa8:	480a      	ldr	r0, [pc, #40]	; (801efd4 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb4>)
 801efaa:	f009 f895 	bl	80280d8 <__assert_func>
 801efae:	4b0a      	ldr	r3, [pc, #40]	; (801efd8 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb8>)
 801efb0:	4a0a      	ldr	r2, [pc, #40]	; (801efdc <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xbc>)
 801efb2:	217c      	movs	r1, #124	; 0x7c
 801efb4:	480a      	ldr	r0, [pc, #40]	; (801efe0 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xc0>)
 801efb6:	f009 f88f 	bl	80280d8 <__assert_func>
 801efba:	bf00      	nop
 801efbc:	20198388 	.word	0x20198388
 801efc0:	20198156 	.word	0x20198156
 801efc4:	20198152 	.word	0x20198152
 801efc8:	20198154 	.word	0x20198154
 801efcc:	0802af74 	.word	0x0802af74
 801efd0:	0802ba88 	.word	0x0802ba88
 801efd4:	0802afbc 	.word	0x0802afbc
 801efd8:	0802af18 	.word	0x0802af18
 801efdc:	0802b720 	.word	0x0802b720
 801efe0:	0802af40 	.word	0x0802af40

0801efe4 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh>:
 801efe4:	2b00      	cmp	r3, #0
 801efe6:	d058      	beq.n	801f09a <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801efe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801efec:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 801eff0:	b085      	sub	sp, #20
 801eff2:	2c00      	cmp	r4, #0
 801eff4:	dd4e      	ble.n	801f094 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb0>
 801eff6:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
 801effa:	2c00      	cmp	r4, #0
 801effc:	dd4a      	ble.n	801f094 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb0>
 801effe:	4616      	mov	r6, r2
 801f000:	4605      	mov	r5, r0
 801f002:	6808      	ldr	r0, [r1, #0]
 801f004:	6849      	ldr	r1, [r1, #4]
 801f006:	461c      	mov	r4, r3
 801f008:	4f27      	ldr	r7, [pc, #156]	; (801f0a8 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xc4>)
 801f00a:	ab02      	add	r3, sp, #8
 801f00c:	c303      	stmia	r3!, {r0, r1}
 801f00e:	a802      	add	r0, sp, #8
 801f010:	f7f8 fb9a 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f014:	6838      	ldr	r0, [r7, #0]
 801f016:	f3c6 4807 	ubfx	r8, r6, #16, #8
 801f01a:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801f01e:	b2f6      	uxtb	r6, r6
 801f020:	2800      	cmp	r0, #0
 801f022:	d03b      	beq.n	801f09c <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb8>
 801f024:	f7fe f8f6 	bl	801d214 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801f028:	682b      	ldr	r3, [r5, #0]
 801f02a:	4628      	mov	r0, r5
 801f02c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f02e:	4798      	blx	r3
 801f030:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f034:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801f038:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 801f03c:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 801f040:	f7fb fdf2 	bl	801ac28 <nema_set_clip>
 801f044:	f04f 33ff 	mov.w	r3, #4294967295
 801f048:	2100      	movs	r1, #0
 801f04a:	461a      	mov	r2, r3
 801f04c:	4817      	ldr	r0, [pc, #92]	; (801f0ac <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xc8>)
 801f04e:	f7fd fc33 	bl	801c8b8 <nema_set_blend>
 801f052:	2200      	movs	r2, #0
 801f054:	4623      	mov	r3, r4
 801f056:	4611      	mov	r1, r2
 801f058:	4610      	mov	r0, r2
 801f05a:	f7fb fe19 	bl	801ac90 <nema_rgba>
 801f05e:	f7fd fff1 	bl	801d044 <nema_set_const_color>
 801f062:	4632      	mov	r2, r6
 801f064:	4649      	mov	r1, r9
 801f066:	4640      	mov	r0, r8
 801f068:	23ff      	movs	r3, #255	; 0xff
 801f06a:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 801f06e:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 801f072:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801f076:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801f07a:	f7fb fe09 	bl	801ac90 <nema_rgba>
 801f07e:	4643      	mov	r3, r8
 801f080:	9000      	str	r0, [sp, #0]
 801f082:	4632      	mov	r2, r6
 801f084:	4620      	mov	r0, r4
 801f086:	4629      	mov	r1, r5
 801f088:	f7fb ff38 	bl	801aefc <nema_fill_rect>
 801f08c:	6838      	ldr	r0, [r7, #0]
 801f08e:	b128      	cbz	r0, 801f09c <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb8>
 801f090:	f7fe f8e0 	bl	801d254 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801f094:	b005      	add	sp, #20
 801f096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f09a:	4770      	bx	lr
 801f09c:	4b04      	ldr	r3, [pc, #16]	; (801f0b0 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xcc>)
 801f09e:	4a05      	ldr	r2, [pc, #20]	; (801f0b4 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd0>)
 801f0a0:	217c      	movs	r1, #124	; 0x7c
 801f0a2:	4805      	ldr	r0, [pc, #20]	; (801f0b8 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd4>)
 801f0a4:	f009 f818 	bl	80280d8 <__assert_func>
 801f0a8:	20198388 	.word	0x20198388
 801f0ac:	08000504 	.word	0x08000504
 801f0b0:	0802af18 	.word	0x0802af18
 801f0b4:	0802b720 	.word	0x0802b720
 801f0b8:	0802af40 	.word	0x0802af40

0801f0bc <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801f0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0c0:	b085      	sub	sp, #20
 801f0c2:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 801f0c6:	2c00      	cmp	r4, #0
 801f0c8:	d063      	beq.n	801f192 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 801f0ca:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801f0ce:	2d00      	cmp	r5, #0
 801f0d0:	dd5f      	ble.n	801f192 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 801f0d2:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 801f0d6:	2d00      	cmp	r5, #0
 801f0d8:	dd5b      	ble.n	801f192 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 801f0da:	460f      	mov	r7, r1
 801f0dc:	4606      	mov	r6, r0
 801f0de:	6859      	ldr	r1, [r3, #4]
 801f0e0:	6818      	ldr	r0, [r3, #0]
 801f0e2:	f8df 9124 	ldr.w	r9, [pc, #292]	; 801f208 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14c>
 801f0e6:	ab02      	add	r3, sp, #8
 801f0e8:	c303      	stmia	r3!, {r0, r1}
 801f0ea:	a802      	add	r0, sp, #8
 801f0ec:	4690      	mov	r8, r2
 801f0ee:	f7f8 fb2b 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f0f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f0f4:	f8d9 0000 	ldr.w	r0, [r9]
 801f0f8:	f3c3 4a07 	ubfx	sl, r3, #16, #8
 801f0fc:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 801f100:	b2dd      	uxtb	r5, r3
 801f102:	2800      	cmp	r0, #0
 801f104:	d060      	beq.n	801f1c8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10c>
 801f106:	f7fe f885 	bl	801d214 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801f10a:	7a33      	ldrb	r3, [r6, #8]
 801f10c:	2b01      	cmp	r3, #1
 801f10e:	d043      	beq.n	801f198 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xdc>
 801f110:	d34e      	bcc.n	801f1b0 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf4>
 801f112:	2b02      	cmp	r3, #2
 801f114:	d15e      	bne.n	801f1d4 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801f116:	4b33      	ldr	r3, [pc, #204]	; (801f1e4 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 801f118:	4a33      	ldr	r2, [pc, #204]	; (801f1e8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 801f11a:	8819      	ldrh	r1, [r3, #0]
 801f11c:	ea4f 0388 	mov.w	r3, r8, lsl #2
 801f120:	8812      	ldrh	r2, [r2, #0]
 801f122:	4638      	mov	r0, r7
 801f124:	9300      	str	r3, [sp, #0]
 801f126:	2310      	movs	r3, #16
 801f128:	f7fb fe32 	bl	801ad90 <nema_bind_dst_tex>
 801f12c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f130:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801f134:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 801f138:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 801f13c:	f7fb fd74 	bl	801ac28 <nema_set_clip>
 801f140:	f04f 33ff 	mov.w	r3, #4294967295
 801f144:	2100      	movs	r1, #0
 801f146:	461a      	mov	r2, r3
 801f148:	4828      	ldr	r0, [pc, #160]	; (801f1ec <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x130>)
 801f14a:	f7fd fbb5 	bl	801c8b8 <nema_set_blend>
 801f14e:	2200      	movs	r2, #0
 801f150:	4623      	mov	r3, r4
 801f152:	4611      	mov	r1, r2
 801f154:	4610      	mov	r0, r2
 801f156:	f7fb fd9b 	bl	801ac90 <nema_rgba>
 801f15a:	f7fd ff73 	bl	801d044 <nema_set_const_color>
 801f15e:	462a      	mov	r2, r5
 801f160:	4659      	mov	r1, fp
 801f162:	23ff      	movs	r3, #255	; 0xff
 801f164:	4650      	mov	r0, sl
 801f166:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 801f16a:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 801f16e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801f172:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801f176:	f7fb fd8b 	bl	801ac90 <nema_rgba>
 801f17a:	463b      	mov	r3, r7
 801f17c:	9000      	str	r0, [sp, #0]
 801f17e:	4632      	mov	r2, r6
 801f180:	4620      	mov	r0, r4
 801f182:	4629      	mov	r1, r5
 801f184:	f7fb feba 	bl	801aefc <nema_fill_rect>
 801f188:	f8d9 0000 	ldr.w	r0, [r9]
 801f18c:	b1e0      	cbz	r0, 801f1c8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10c>
 801f18e:	f7fe f861 	bl	801d254 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801f192:	b005      	add	sp, #20
 801f194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f198:	4b12      	ldr	r3, [pc, #72]	; (801f1e4 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 801f19a:	4a13      	ldr	r2, [pc, #76]	; (801f1e8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 801f19c:	8819      	ldrh	r1, [r3, #0]
 801f19e:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801f1a2:	8812      	ldrh	r2, [r2, #0]
 801f1a4:	4638      	mov	r0, r7
 801f1a6:	9300      	str	r3, [sp, #0]
 801f1a8:	2339      	movs	r3, #57	; 0x39
 801f1aa:	f7fb fdf1 	bl	801ad90 <nema_bind_dst_tex>
 801f1ae:	e7bd      	b.n	801f12c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801f1b0:	4b0c      	ldr	r3, [pc, #48]	; (801f1e4 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 801f1b2:	4a0d      	ldr	r2, [pc, #52]	; (801f1e8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 801f1b4:	8819      	ldrh	r1, [r3, #0]
 801f1b6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801f1ba:	8812      	ldrh	r2, [r2, #0]
 801f1bc:	4638      	mov	r0, r7
 801f1be:	9300      	str	r3, [sp, #0]
 801f1c0:	2304      	movs	r3, #4
 801f1c2:	f7fb fde5 	bl	801ad90 <nema_bind_dst_tex>
 801f1c6:	e7b1      	b.n	801f12c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801f1c8:	4b09      	ldr	r3, [pc, #36]	; (801f1f0 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>)
 801f1ca:	4a0a      	ldr	r2, [pc, #40]	; (801f1f4 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x138>)
 801f1cc:	217c      	movs	r1, #124	; 0x7c
 801f1ce:	480a      	ldr	r0, [pc, #40]	; (801f1f8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13c>)
 801f1d0:	f008 ff82 	bl	80280d8 <__assert_func>
 801f1d4:	4b09      	ldr	r3, [pc, #36]	; (801f1fc <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x140>)
 801f1d6:	4a0a      	ldr	r2, [pc, #40]	; (801f200 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>)
 801f1d8:	f44f 71cb 	mov.w	r1, #406	; 0x196
 801f1dc:	4809      	ldr	r0, [pc, #36]	; (801f204 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>)
 801f1de:	f008 ff7b 	bl	80280d8 <__assert_func>
 801f1e2:	bf00      	nop
 801f1e4:	20198152 	.word	0x20198152
 801f1e8:	20198154 	.word	0x20198154
 801f1ec:	08000504 	.word	0x08000504
 801f1f0:	0802af18 	.word	0x0802af18
 801f1f4:	0802b720 	.word	0x0802b720
 801f1f8:	0802af40 	.word	0x0802af40
 801f1fc:	0802af74 	.word	0x0802af74
 801f200:	0802b7dc 	.word	0x0802b7dc
 801f204:	0802afbc 	.word	0x0802afbc
 801f208:	20198388 	.word	0x20198388

0801f20c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801f20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f210:	b091      	sub	sp, #68	; 0x44
 801f212:	f89d 108c 	ldrb.w	r1, [sp, #140]	; 0x8c
 801f216:	ac0a      	add	r4, sp, #40	; 0x28
 801f218:	e884 000c 	stmia.w	r4, {r2, r3}
 801f21c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801f220:	1e4f      	subs	r7, r1, #1
 801f222:	fa5f fc87 	uxtb.w	ip, r7
 801f226:	4682      	mov	sl, r0
 801f228:	9303      	str	r3, [sp, #12]
 801f22a:	f89d 0090 	ldrb.w	r0, [sp, #144]	; 0x90
 801f22e:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 801f232:	f1bc 0f01 	cmp.w	ip, #1
 801f236:	9304      	str	r3, [sp, #16]
 801f238:	f9bd 8068 	ldrsh.w	r8, [sp, #104]	; 0x68
 801f23c:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	; 0x6c
 801f240:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f242:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801f246:	9005      	str	r0, [sp, #20]
 801f248:	f89d 6094 	ldrb.w	r6, [sp, #148]	; 0x94
 801f24c:	d905      	bls.n	801f25a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4e>
 801f24e:	2904      	cmp	r1, #4
 801f250:	f000 80d0 	beq.w	801f3f4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e8>
 801f254:	2908      	cmp	r1, #8
 801f256:	f040 816f 	bne.w	801f538 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x32c>
 801f25a:	7b53      	ldrb	r3, [r2, #13]
 801f25c:	7990      	ldrb	r0, [r2, #6]
 801f25e:	0159      	lsls	r1, r3, #5
 801f260:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801f264:	ea50 0901 	orrs.w	r9, r0, r1
 801f268:	f000 80c1 	beq.w	801f3ee <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801f26c:	011b      	lsls	r3, r3, #4
 801f26e:	79d0      	ldrb	r0, [r2, #7]
 801f270:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801f274:	ea50 0301 	orrs.w	r3, r0, r1
 801f278:	9306      	str	r3, [sp, #24]
 801f27a:	f000 80b8 	beq.w	801f3ee <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801f27e:	f992 3009 	ldrsb.w	r3, [r2, #9]
 801f282:	9a03      	ldr	r2, [sp, #12]
 801f284:	b29b      	uxth	r3, r3
 801f286:	2a00      	cmp	r2, #0
 801f288:	f040 80be 	bne.w	801f408 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fc>
 801f28c:	4498      	add	r8, r3
 801f28e:	fa0f f888 	sxth.w	r8, r8
 801f292:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f294:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f298:	4543      	cmp	r3, r8
 801f29a:	dd06      	ble.n	801f2aa <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x9e>
 801f29c:	9a03      	ldr	r2, [sp, #12]
 801f29e:	441a      	add	r2, r3
 801f2a0:	eba2 0508 	sub.w	r5, r2, r8
 801f2a4:	4698      	mov	r8, r3
 801f2a6:	b2ab      	uxth	r3, r5
 801f2a8:	9303      	str	r3, [sp, #12]
 801f2aa:	f8df c30c 	ldr.w	ip, [pc, #780]	; 801f5b8 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801f2ae:	465a      	mov	r2, fp
 801f2b0:	f89c 5000 	ldrb.w	r5, [ip]
 801f2b4:	4641      	mov	r1, r8
 801f2b6:	4633      	mov	r3, r6
 801f2b8:	4620      	mov	r0, r4
 801f2ba:	9507      	str	r5, [sp, #28]
 801f2bc:	f7f8 f8be 	bl	801743c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801f2c0:	465a      	mov	r2, fp
 801f2c2:	4641      	mov	r1, r8
 801f2c4:	4633      	mov	r3, r6
 801f2c6:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 801f2ca:	4620      	mov	r0, r4
 801f2cc:	f7f8 f8d3 	bl	8017476 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801f2d0:	a910      	add	r1, sp, #64	; 0x40
 801f2d2:	f821 0d0a 	strh.w	r0, [r1, #-10]!
 801f2d6:	a80d      	add	r0, sp, #52	; 0x34
 801f2d8:	f7f8 f9f4 	bl	80176c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801f2dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f2de:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f2e2:	9308      	str	r3, [sp, #32]
 801f2e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f2e6:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 801f2ea:	fa5f f883 	uxtb.w	r8, r3
 801f2ee:	2f07      	cmp	r7, #7
 801f2f0:	f200 811f 	bhi.w	801f532 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x326>
 801f2f4:	e8df f017 	tbh	[pc, r7, lsl #1]
 801f2f8:	009b00a1 	.word	0x009b00a1
 801f2fc:	0095011d 	.word	0x0095011d
 801f300:	011d011d 	.word	0x011d011d
 801f304:	0008011d 	.word	0x0008011d
 801f308:	2708      	movs	r7, #8
 801f30a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801f30e:	4ca1      	ldr	r4, [pc, #644]	; (801f594 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801f310:	6820      	ldr	r0, [r4, #0]
 801f312:	2800      	cmp	r0, #0
 801f314:	f000 8137 	beq.w	801f586 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801f318:	f7fd ff7c 	bl	801d214 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801f31c:	f8da 3000 	ldr.w	r3, [sl]
 801f320:	4650      	mov	r0, sl
 801f322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f324:	4798      	blx	r3
 801f326:	2e02      	cmp	r6, #2
 801f328:	f000 80e6 	beq.w	801f4f8 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>
 801f32c:	2e03      	cmp	r6, #3
 801f32e:	f000 80c7 	beq.w	801f4c0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b4>
 801f332:	2e01      	cmp	r6, #1
 801f334:	f000 80a8 	beq.w	801f488 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 801f338:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f33a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f33e:	8819      	ldrh	r1, [r3, #0]
 801f340:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f344:	440a      	add	r2, r1
 801f346:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f348:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f34c:	8848      	ldrh	r0, [r1, #2]
 801f34e:	6849      	ldr	r1, [r1, #4]
 801f350:	4403      	add	r3, r0
 801f352:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f356:	910f      	str	r1, [sp, #60]	; 0x3c
 801f358:	a80e      	add	r0, sp, #56	; 0x38
 801f35a:	f7f8 f9f5 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f35e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801f362:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801f366:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801f36a:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 801f36e:	f7fb fc5b 	bl	801ac28 <nema_set_clip>
 801f372:	2200      	movs	r2, #0
 801f374:	9d05      	ldr	r5, [sp, #20]
 801f376:	4611      	mov	r1, r2
 801f378:	462b      	mov	r3, r5
 801f37a:	4610      	mov	r0, r2
 801f37c:	f7fb fc88 	bl	801ac90 <nema_rgba>
 801f380:	f7fd fe60 	bl	801d044 <nema_set_const_color>
 801f384:	462b      	mov	r3, r5
 801f386:	4642      	mov	r2, r8
 801f388:	4659      	mov	r1, fp
 801f38a:	9808      	ldr	r0, [sp, #32]
 801f38c:	f7fb fc80 	bl	801ac90 <nema_rgba>
 801f390:	f7fb fc3e 	bl	801ac10 <nema_set_tex_color>
 801f394:	f04f 33ff 	mov.w	r3, #4294967295
 801f398:	2201      	movs	r2, #1
 801f39a:	2100      	movs	r1, #0
 801f39c:	487e      	ldr	r0, [pc, #504]	; (801f598 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801f39e:	f7fd fa8b 	bl	801c8b8 <nema_set_blend>
 801f3a2:	2200      	movs	r2, #0
 801f3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3a6:	9201      	str	r2, [sp, #4]
 801f3a8:	9300      	str	r3, [sp, #0]
 801f3aa:	4649      	mov	r1, r9
 801f3ac:	463b      	mov	r3, r7
 801f3ae:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f3b0:	9a06      	ldr	r2, [sp, #24]
 801f3b2:	f7fb fc75 	bl	801aca0 <nema_bind_src_tex>
 801f3b6:	9b07      	ldr	r3, [sp, #28]
 801f3b8:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 801f3bc:	2b01      	cmp	r3, #1
 801f3be:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801f3c2:	d040      	beq.n	801f446 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x23a>
 801f3c4:	2e02      	cmp	r6, #2
 801f3c6:	d051      	beq.n	801f46c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 801f3c8:	2e03      	cmp	r6, #3
 801f3ca:	f000 80c7 	beq.w	801f55c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801f3ce:	2e01      	cmp	r6, #1
 801f3d0:	9b04      	ldr	r3, [sp, #16]
 801f3d2:	f000 80b8 	beq.w	801f546 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 801f3d6:	1ac9      	subs	r1, r1, r3
 801f3d8:	9b03      	ldr	r3, [sp, #12]
 801f3da:	1ac0      	subs	r0, r0, r3
 801f3dc:	f7fb fda0 	bl	801af20 <nema_blit>
 801f3e0:	6823      	ldr	r3, [r4, #0]
 801f3e2:	2b00      	cmp	r3, #0
 801f3e4:	f000 80cf 	beq.w	801f586 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801f3e8:	2201      	movs	r2, #1
 801f3ea:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 801f3ee:	b011      	add	sp, #68	; 0x44
 801f3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	f47f af30 	bne.w	801f25a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4e>
 801f3fa:	4b68      	ldr	r3, [pc, #416]	; (801f59c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801f3fc:	4a68      	ldr	r2, [pc, #416]	; (801f5a0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801f3fe:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 801f402:	4868      	ldr	r0, [pc, #416]	; (801f5a4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 801f404:	f008 fe68 	bl	80280d8 <__assert_func>
 801f408:	1ad5      	subs	r5, r2, r3
 801f40a:	b2ab      	uxth	r3, r5
 801f40c:	041a      	lsls	r2, r3, #16
 801f40e:	9303      	str	r3, [sp, #12]
 801f410:	f57f af3f 	bpl.w	801f292 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801f414:	eba8 0803 	sub.w	r8, r8, r3
 801f418:	2300      	movs	r3, #0
 801f41a:	fa0f f888 	sxth.w	r8, r8
 801f41e:	9303      	str	r3, [sp, #12]
 801f420:	e737      	b.n	801f292 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801f422:	f109 0301 	add.w	r3, r9, #1
 801f426:	105b      	asrs	r3, r3, #1
 801f428:	9309      	str	r3, [sp, #36]	; 0x24
 801f42a:	2729      	movs	r7, #41	; 0x29
 801f42c:	e76f      	b.n	801f30e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801f42e:	f109 0303 	add.w	r3, r9, #3
 801f432:	109b      	asrs	r3, r3, #2
 801f434:	9309      	str	r3, [sp, #36]	; 0x24
 801f436:	2728      	movs	r7, #40	; 0x28
 801f438:	e769      	b.n	801f30e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801f43a:	f109 0307 	add.w	r3, r9, #7
 801f43e:	10db      	asrs	r3, r3, #3
 801f440:	9309      	str	r3, [sp, #36]	; 0x24
 801f442:	2727      	movs	r7, #39	; 0x27
 801f444:	e763      	b.n	801f30e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801f446:	2e02      	cmp	r6, #2
 801f448:	f000 8093 	beq.w	801f572 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x366>
 801f44c:	2e03      	cmp	r6, #3
 801f44e:	d00d      	beq.n	801f46c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 801f450:	2e01      	cmp	r6, #1
 801f452:	f000 8091 	beq.w	801f578 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801f456:	461a      	mov	r2, r3
 801f458:	9b03      	ldr	r3, [sp, #12]
 801f45a:	4419      	add	r1, r3
 801f45c:	9b04      	ldr	r3, [sp, #16]
 801f45e:	eba1 0109 	sub.w	r1, r1, r9
 801f462:	3101      	adds	r1, #1
 801f464:	1ac0      	subs	r0, r0, r3
 801f466:	f7fb fd75 	bl	801af54 <nema_blit_rotate>
 801f46a:	e7b9      	b.n	801f3e0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801f46c:	9b04      	ldr	r3, [sp, #16]
 801f46e:	2202      	movs	r2, #2
 801f470:	4419      	add	r1, r3
 801f472:	9b03      	ldr	r3, [sp, #12]
 801f474:	4418      	add	r0, r3
 801f476:	9b06      	ldr	r3, [sp, #24]
 801f478:	eba0 0009 	sub.w	r0, r0, r9
 801f47c:	1ac9      	subs	r1, r1, r3
 801f47e:	3101      	adds	r1, #1
 801f480:	3001      	adds	r0, #1
 801f482:	f7fb fd67 	bl	801af54 <nema_blit_rotate>
 801f486:	e7ab      	b.n	801f3e0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801f488:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801f48c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801f490:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f492:	440b      	add	r3, r1
 801f494:	8852      	ldrh	r2, [r2, #2]
 801f496:	981e      	ldr	r0, [sp, #120]	; 0x78
 801f498:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f49a:	1a9b      	subs	r3, r3, r2
 801f49c:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 801f4a0:	f8b0 c000 	ldrh.w	ip, [r0]
 801f4a4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801f4a8:	8880      	ldrh	r0, [r0, #4]
 801f4aa:	1a5b      	subs	r3, r3, r1
 801f4ac:	4462      	add	r2, ip
 801f4ae:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801f4b2:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
 801f4b6:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801f4ba:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 801f4be:	e74b      	b.n	801f358 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 801f4c0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801f4c4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f4c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f4ca:	440b      	add	r3, r1
 801f4cc:	8812      	ldrh	r2, [r2, #0]
 801f4ce:	981e      	ldr	r0, [sp, #120]	; 0x78
 801f4d0:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f4d2:	1a9b      	subs	r3, r3, r2
 801f4d4:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 801f4d8:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 801f4dc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f4e0:	88c0      	ldrh	r0, [r0, #6]
 801f4e2:	1a5b      	subs	r3, r3, r1
 801f4e4:	4462      	add	r2, ip
 801f4e6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f4ea:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
 801f4ee:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f4f2:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 801f4f6:	e72f      	b.n	801f358 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 801f4f8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801f4fc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f500:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f504:	440a      	add	r2, r1
 801f506:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f508:	8808      	ldrh	r0, [r1, #0]
 801f50a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801f50e:	1a12      	subs	r2, r2, r0
 801f510:	440b      	add	r3, r1
 801f512:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f514:	981e      	ldr	r0, [sp, #120]	; 0x78
 801f516:	8849      	ldrh	r1, [r1, #2]
 801f518:	8880      	ldrh	r0, [r0, #4]
 801f51a:	1a5b      	subs	r3, r3, r1
 801f51c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f51e:	1a12      	subs	r2, r2, r0
 801f520:	88c8      	ldrh	r0, [r1, #6]
 801f522:	6849      	ldr	r1, [r1, #4]
 801f524:	1a1b      	subs	r3, r3, r0
 801f526:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f52a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f52e:	910f      	str	r1, [sp, #60]	; 0x3c
 801f530:	e712      	b.n	801f358 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 801f532:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801f536:	e6ea      	b.n	801f30e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801f538:	4b1b      	ldr	r3, [pc, #108]	; (801f5a8 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801f53a:	4a19      	ldr	r2, [pc, #100]	; (801f5a0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801f53c:	f240 11ab 	movw	r1, #427	; 0x1ab
 801f540:	4818      	ldr	r0, [pc, #96]	; (801f5a4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 801f542:	f008 fdc9 	bl	80280d8 <__assert_func>
 801f546:	4403      	add	r3, r0
 801f548:	4618      	mov	r0, r3
 801f54a:	9b06      	ldr	r3, [sp, #24]
 801f54c:	2203      	movs	r2, #3
 801f54e:	1ac0      	subs	r0, r0, r3
 801f550:	9b03      	ldr	r3, [sp, #12]
 801f552:	3001      	adds	r0, #1
 801f554:	1ac9      	subs	r1, r1, r3
 801f556:	f7fb fcfd 	bl	801af54 <nema_blit_rotate>
 801f55a:	e741      	b.n	801f3e0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801f55c:	9b03      	ldr	r3, [sp, #12]
 801f55e:	2201      	movs	r2, #1
 801f560:	4419      	add	r1, r3
 801f562:	9b04      	ldr	r3, [sp, #16]
 801f564:	eba1 0109 	sub.w	r1, r1, r9
 801f568:	3101      	adds	r1, #1
 801f56a:	1ac0      	subs	r0, r0, r3
 801f56c:	f7fb fcf2 	bl	801af54 <nema_blit_rotate>
 801f570:	e736      	b.n	801f3e0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801f572:	9b04      	ldr	r3, [sp, #16]
 801f574:	4418      	add	r0, r3
 801f576:	e7e8      	b.n	801f54a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f578:	9b04      	ldr	r3, [sp, #16]
 801f57a:	1ac9      	subs	r1, r1, r3
 801f57c:	9b03      	ldr	r3, [sp, #12]
 801f57e:	1ac0      	subs	r0, r0, r3
 801f580:	f7fb fcce 	bl	801af20 <nema_blit>
 801f584:	e72c      	b.n	801f3e0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801f586:	4b09      	ldr	r3, [pc, #36]	; (801f5ac <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801f588:	4a09      	ldr	r2, [pc, #36]	; (801f5b0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801f58a:	217c      	movs	r1, #124	; 0x7c
 801f58c:	4809      	ldr	r0, [pc, #36]	; (801f5b4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801f58e:	f008 fda3 	bl	80280d8 <__assert_func>
 801f592:	bf00      	nop
 801f594:	20198388 	.word	0x20198388
 801f598:	08000504 	.word	0x08000504
 801f59c:	0802b42c 	.word	0x0802b42c
 801f5a0:	0802c154 	.word	0x0802c154
 801f5a4:	0802afbc 	.word	0x0802afbc
 801f5a8:	0802b39c 	.word	0x0802b39c
 801f5ac:	0802af18 	.word	0x0802af18
 801f5b0:	0802b720 	.word	0x0802b720
 801f5b4:	0802af40 	.word	0x0802af40
 801f5b8:	20198150 	.word	0x20198150

0801f5bc <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801f5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5c0:	b087      	sub	sp, #28
 801f5c2:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801f5c6:	e9dd 8410 	ldrd	r8, r4, [sp, #64]	; 0x40
 801f5ca:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 801f5ce:	f8bd e050 	ldrh.w	lr, [sp, #80]	; 0x50
 801f5d2:	2e00      	cmp	r6, #0
 801f5d4:	d065      	beq.n	801f6a2 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 801f5d6:	f9b4 a004 	ldrsh.w	sl, [r4, #4]
 801f5da:	f1ba 0f00 	cmp.w	sl, #0
 801f5de:	dd60      	ble.n	801f6a2 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 801f5e0:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 801f5e4:	f1ba 0f00 	cmp.w	sl, #0
 801f5e8:	dd5b      	ble.n	801f6a2 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 801f5ea:	f3c7 0a87 	ubfx	sl, r7, #2, #8
 801f5ee:	f1ba 0f0b 	cmp.w	sl, #11
 801f5f2:	d059      	beq.n	801f6a8 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xec>
 801f5f4:	469c      	mov	ip, r3
 801f5f6:	4b7e      	ldr	r3, [pc, #504]	; (801f7f0 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x234>)
 801f5f8:	4615      	mov	r5, r2
 801f5fa:	f893 b000 	ldrb.w	fp, [r3]
 801f5fe:	f8dc 3008 	ldr.w	r3, [ip, #8]
 801f602:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f606:	9303      	str	r3, [sp, #12]
 801f608:	f1bb 0f01 	cmp.w	fp, #1
 801f60c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 801f610:	9205      	str	r2, [sp, #20]
 801f612:	bf08      	it	eq
 801f614:	9a03      	ldreq	r2, [sp, #12]
 801f616:	9302      	str	r3, [sp, #8]
 801f618:	bf08      	it	eq
 801f61a:	e9cd 2302 	strdeq	r2, r3, [sp, #8]
 801f61e:	f1ba 0f0d 	cmp.w	sl, #13
 801f622:	4681      	mov	r9, r0
 801f624:	d034      	beq.n	801f690 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd4>
 801f626:	4b73      	ldr	r3, [pc, #460]	; (801f7f4 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x238>)
 801f628:	6818      	ldr	r0, [r3, #0]
 801f62a:	2800      	cmp	r0, #0
 801f62c:	f000 80d3 	beq.w	801f7d6 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x21a>
 801f630:	f8dc 3000 	ldr.w	r3, [ip]
 801f634:	9304      	str	r3, [sp, #16]
 801f636:	f7fd fded 	bl	801d214 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801f63a:	f8d9 3000 	ldr.w	r3, [r9]
 801f63e:	4648      	mov	r0, r9
 801f640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f642:	4798      	blx	r3
 801f644:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f648:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f64c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801f650:	f9b4 0000 	ldrsh.w	r0, [r4]
 801f654:	f7fb fae8 	bl	801ac28 <nema_set_clip>
 801f658:	2200      	movs	r2, #0
 801f65a:	4633      	mov	r3, r6
 801f65c:	4611      	mov	r1, r2
 801f65e:	4610      	mov	r0, r2
 801f660:	f7fb fb16 	bl	801ac90 <nema_rgba>
 801f664:	f7fd fcee 	bl	801d044 <nema_set_const_color>
 801f668:	f04f 33ff 	mov.w	r3, #4294967295
 801f66c:	2201      	movs	r2, #1
 801f66e:	2100      	movs	r1, #0
 801f670:	4861      	ldr	r0, [pc, #388]	; (801f7f8 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23c>)
 801f672:	f7fd f921 	bl	801c8b8 <nema_set_blend>
 801f676:	f1ba 0f0d 	cmp.w	sl, #13
 801f67a:	f200 80b2 	bhi.w	801f7e2 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x226>
 801f67e:	e8df f00a 	tbb	[pc, sl]
 801f682:	8d1b      	.short	0x8d1b
 801f684:	b0b0b08b 	.word	0xb0b0b08b
 801f688:	b0b0b0b0 	.word	0xb0b0b0b0
 801f68c:	888fb0b0 	.word	0x888fb0b0
 801f690:	9b05      	ldr	r3, [sp, #20]
 801f692:	b133      	cbz	r3, 801f6a2 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 801f694:	781b      	ldrb	r3, [r3, #0]
 801f696:	f1a3 0216 	sub.w	r2, r3, #22
 801f69a:	2a01      	cmp	r2, #1
 801f69c:	d9c3      	bls.n	801f626 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6a>
 801f69e:	2b12      	cmp	r3, #18
 801f6a0:	d0c1      	beq.n	801f626 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6a>
 801f6a2:	b007      	add	sp, #28
 801f6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6a8:	e9cd 6e13 	strd	r6, lr, [sp, #76]	; 0x4c
 801f6ac:	9712      	str	r7, [sp, #72]	; 0x48
 801f6ae:	b007      	add	sp, #28
 801f6b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6b4:	f7f7 b9be 	b.w	8016a34 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 801f6b8:	2304      	movs	r3, #4
 801f6ba:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801f6be:	f04f 34ff 	mov.w	r4, #4294967295
 801f6c2:	f007 0701 	and.w	r7, r7, #1
 801f6c6:	9804      	ldr	r0, [sp, #16]
 801f6c8:	9701      	str	r7, [sp, #4]
 801f6ca:	9400      	str	r4, [sp, #0]
 801f6cc:	f7fb fae8 	bl	801aca0 <nema_bind_src_tex>
 801f6d0:	2001      	movs	r0, #1
 801f6d2:	f7fc f915 	bl	801b900 <nema_enable_tiling>
 801f6d6:	2301      	movs	r3, #1
 801f6d8:	461a      	mov	r2, r3
 801f6da:	4619      	mov	r1, r3
 801f6dc:	4618      	mov	r0, r3
 801f6de:	f7fc f923 	bl	801b928 <nema_enable_aa>
 801f6e2:	f1bb 0f01 	cmp.w	fp, #1
 801f6e6:	d069      	beq.n	801f7bc <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x200>
 801f6e8:	edd5 2a00 	vldr	s5, [r5]
 801f6ec:	ed95 4a01 	vldr	s8, [r5, #4]
 801f6f0:	edd5 4a05 	vldr	s9, [r5, #20]
 801f6f4:	ed95 5a06 	vldr	s10, [r5, #24]
 801f6f8:	edd5 5a0a 	vldr	s11, [r5, #40]	; 0x28
 801f6fc:	ed95 6a0b 	vldr	s12, [r5, #44]	; 0x2c
 801f700:	353c      	adds	r5, #60	; 0x3c
 801f702:	f9b8 3000 	ldrsh.w	r3, [r8]
 801f706:	eddf 7a3d 	vldr	s15, [pc, #244]	; 801f7fc <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x240>
 801f70a:	ee00 3a10 	vmov	s0, r3
 801f70e:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801f712:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801f716:	ee03 3a90 	vmov	s7, r3
 801f71a:	edd5 6a00 	vldr	s13, [r5]
 801f71e:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801f722:	ed95 7a01 	vldr	s14, [r5, #4]
 801f726:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801f72a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801f72e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801f732:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801f736:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801f73a:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801f73e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f742:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f746:	eeb0 3a40 	vmov.f32	s6, s0
 801f74a:	eeb0 2a40 	vmov.f32	s4, s0
 801f74e:	eeb0 1a40 	vmov.f32	s2, s0
 801f752:	eef0 1a63 	vmov.f32	s3, s7
 801f756:	eea2 0aa7 	vfma.f32	s0, s5, s15
 801f75a:	eef0 0a63 	vmov.f32	s1, s7
 801f75e:	eef0 2a63 	vmov.f32	s5, s7
 801f762:	eea6 3aa7 	vfma.f32	s6, s13, s15
 801f766:	eea5 2aa7 	vfma.f32	s4, s11, s15
 801f76a:	eea4 1aa7 	vfma.f32	s2, s9, s15
 801f76e:	eee6 2a27 	vfma.f32	s5, s12, s15
 801f772:	eee5 1a27 	vfma.f32	s3, s10, s15
 801f776:	eee4 0a27 	vfma.f32	s1, s8, s15
 801f77a:	eee7 3a27 	vfma.f32	s7, s14, s15
 801f77e:	f7fb fd49 	bl	801b214 <nema_blit_quad_fit>
 801f782:	4b1c      	ldr	r3, [pc, #112]	; (801f7f4 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x238>)
 801f784:	6818      	ldr	r0, [r3, #0]
 801f786:	b330      	cbz	r0, 801f7d6 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x21a>
 801f788:	b007      	add	sp, #28
 801f78a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f78e:	f7fd bd61 	b.w	801d254 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801f792:	9b05      	ldr	r3, [sp, #20]
 801f794:	781b      	ldrb	r3, [r3, #0]
 801f796:	e790      	b.n	801f6ba <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 801f798:	2310      	movs	r3, #16
 801f79a:	e78e      	b.n	801f6ba <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 801f79c:	2339      	movs	r3, #57	; 0x39
 801f79e:	e78c      	b.n	801f6ba <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 801f7a0:	4a17      	ldr	r2, [pc, #92]	; (801f800 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x244>)
 801f7a2:	23ff      	movs	r3, #255	; 0xff
 801f7a4:	6810      	ldr	r0, [r2, #0]
 801f7a6:	b2c2      	uxtb	r2, r0
 801f7a8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801f7ac:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801f7b0:	f7fb fa6e 	bl	801ac90 <nema_rgba>
 801f7b4:	f7fb fa2c 	bl	801ac10 <nema_set_tex_color>
 801f7b8:	2329      	movs	r3, #41	; 0x29
 801f7ba:	e77e      	b.n	801f6ba <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 801f7bc:	edd5 2a05 	vldr	s5, [r5, #20]
 801f7c0:	ed95 4a06 	vldr	s8, [r5, #24]
 801f7c4:	edd5 4a0a 	vldr	s9, [r5, #40]	; 0x28
 801f7c8:	ed95 5a0b 	vldr	s10, [r5, #44]	; 0x2c
 801f7cc:	edd5 5a0f 	vldr	s11, [r5, #60]	; 0x3c
 801f7d0:	ed95 6a10 	vldr	s12, [r5, #64]	; 0x40
 801f7d4:	e795      	b.n	801f702 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x146>
 801f7d6:	4b0b      	ldr	r3, [pc, #44]	; (801f804 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x248>)
 801f7d8:	4a0b      	ldr	r2, [pc, #44]	; (801f808 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x24c>)
 801f7da:	217c      	movs	r1, #124	; 0x7c
 801f7dc:	480b      	ldr	r0, [pc, #44]	; (801f80c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x250>)
 801f7de:	f008 fc7b 	bl	80280d8 <__assert_func>
 801f7e2:	4b0b      	ldr	r3, [pc, #44]	; (801f810 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x254>)
 801f7e4:	4a0b      	ldr	r2, [pc, #44]	; (801f814 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x258>)
 801f7e6:	f240 314f 	movw	r1, #847	; 0x34f
 801f7ea:	480b      	ldr	r0, [pc, #44]	; (801f818 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x25c>)
 801f7ec:	f008 fc74 	bl	80280d8 <__assert_func>
 801f7f0:	20198150 	.word	0x20198150
 801f7f4:	20198388 	.word	0x20198388
 801f7f8:	08000504 	.word	0x08000504
 801f7fc:	3d800000 	.word	0x3d800000
 801f800:	20198160 	.word	0x20198160
 801f804:	0802af18 	.word	0x0802af18
 801f808:	0802b720 	.word	0x0802b720
 801f80c:	0802af40 	.word	0x0802af40
 801f810:	0802ae10 	.word	0x0802ae10
 801f814:	0802b8d8 	.word	0x0802b8d8
 801f818:	0802afbc 	.word	0x0802afbc

0801f81c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801f81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f820:	4680      	mov	r8, r0
 801f822:	460f      	mov	r7, r1
 801f824:	4614      	mov	r4, r2
 801f826:	461e      	mov	r6, r3
 801f828:	4db2      	ldr	r5, [pc, #712]	; (801faf4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2d8>)
 801f82a:	e8d5 3f8f 	ldab	r3, [r5]
 801f82e:	07da      	lsls	r2, r3, #31
 801f830:	f140 823a 	bpl.w	801fca8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48c>
 801f834:	4db0      	ldr	r5, [pc, #704]	; (801faf8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2dc>)
 801f836:	e8d5 3f8f 	ldab	r3, [r5]
 801f83a:	07db      	lsls	r3, r3, #31
 801f83c:	f140 8225 	bpl.w	801fc8a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46e>
 801f840:	4dae      	ldr	r5, [pc, #696]	; (801fafc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e0>)
 801f842:	e8d5 3f8f 	ldab	r3, [r5]
 801f846:	07d8      	lsls	r0, r3, #31
 801f848:	f140 8210 	bpl.w	801fc6c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x450>
 801f84c:	4dac      	ldr	r5, [pc, #688]	; (801fb00 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e4>)
 801f84e:	e8d5 3f8f 	ldab	r3, [r5]
 801f852:	07d9      	lsls	r1, r3, #31
 801f854:	f140 81fb 	bpl.w	801fc4e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x432>
 801f858:	4daa      	ldr	r5, [pc, #680]	; (801fb04 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e8>)
 801f85a:	e8d5 3f8f 	ldab	r3, [r5]
 801f85e:	07da      	lsls	r2, r3, #31
 801f860:	f140 81e6 	bpl.w	801fc30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x414>
 801f864:	4da8      	ldr	r5, [pc, #672]	; (801fb08 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2ec>)
 801f866:	e8d5 3f8f 	ldab	r3, [r5]
 801f86a:	07db      	lsls	r3, r3, #31
 801f86c:	f140 81d1 	bpl.w	801fc12 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3f6>
 801f870:	4da6      	ldr	r5, [pc, #664]	; (801fb0c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f0>)
 801f872:	e8d5 3f8f 	ldab	r3, [r5]
 801f876:	07d8      	lsls	r0, r3, #31
 801f878:	f140 81bc 	bpl.w	801fbf4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3d8>
 801f87c:	4da4      	ldr	r5, [pc, #656]	; (801fb10 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f4>)
 801f87e:	e8d5 3f8f 	ldab	r3, [r5]
 801f882:	07d9      	lsls	r1, r3, #31
 801f884:	f140 81a7 	bpl.w	801fbd6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3ba>
 801f888:	4da2      	ldr	r5, [pc, #648]	; (801fb14 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f8>)
 801f88a:	e8d5 3f8f 	ldab	r3, [r5]
 801f88e:	07da      	lsls	r2, r3, #31
 801f890:	f140 8192 	bpl.w	801fbb8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x39c>
 801f894:	4da0      	ldr	r5, [pc, #640]	; (801fb18 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2fc>)
 801f896:	e8d5 3f8f 	ldab	r3, [r5]
 801f89a:	07db      	lsls	r3, r3, #31
 801f89c:	f140 811a 	bpl.w	801fad4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2b8>
 801f8a0:	4d9e      	ldr	r5, [pc, #632]	; (801fb1c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x300>)
 801f8a2:	e8d5 3f8f 	ldab	r3, [r5]
 801f8a6:	07d8      	lsls	r0, r3, #31
 801f8a8:	f140 8105 	bpl.w	801fab6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x29a>
 801f8ac:	4d9c      	ldr	r5, [pc, #624]	; (801fb20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x304>)
 801f8ae:	e8d5 3f8f 	ldab	r3, [r5]
 801f8b2:	07d9      	lsls	r1, r3, #31
 801f8b4:	f140 80f0 	bpl.w	801fa98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x27c>
 801f8b8:	4d9a      	ldr	r5, [pc, #616]	; (801fb24 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x308>)
 801f8ba:	e8d5 3f8f 	ldab	r3, [r5]
 801f8be:	07da      	lsls	r2, r3, #31
 801f8c0:	f140 80db 	bpl.w	801fa7a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x25e>
 801f8c4:	4d98      	ldr	r5, [pc, #608]	; (801fb28 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30c>)
 801f8c6:	e8d5 3f8f 	ldab	r3, [r5]
 801f8ca:	07db      	lsls	r3, r3, #31
 801f8cc:	f140 80c6 	bpl.w	801fa5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x240>
 801f8d0:	4d96      	ldr	r5, [pc, #600]	; (801fb2c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x310>)
 801f8d2:	e8d5 3f8f 	ldab	r3, [r5]
 801f8d6:	07d8      	lsls	r0, r3, #31
 801f8d8:	f140 80b1 	bpl.w	801fa3e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x222>
 801f8dc:	4d94      	ldr	r5, [pc, #592]	; (801fb30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x314>)
 801f8de:	e8d5 3f8f 	ldab	r3, [r5]
 801f8e2:	07d9      	lsls	r1, r3, #31
 801f8e4:	f140 809c 	bpl.w	801fa20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x204>
 801f8e8:	4d92      	ldr	r5, [pc, #584]	; (801fb34 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x318>)
 801f8ea:	e8d5 3f8f 	ldab	r3, [r5]
 801f8ee:	07da      	lsls	r2, r3, #31
 801f8f0:	f140 8087 	bpl.w	801fa02 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e6>
 801f8f4:	4d90      	ldr	r5, [pc, #576]	; (801fb38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x31c>)
 801f8f6:	e8d5 3f8f 	ldab	r3, [r5]
 801f8fa:	07db      	lsls	r3, r3, #31
 801f8fc:	d573      	bpl.n	801f9e6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ca>
 801f8fe:	4d8f      	ldr	r5, [pc, #572]	; (801fb3c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x320>)
 801f900:	e8d5 3f8f 	ldab	r3, [r5]
 801f904:	07d8      	lsls	r0, r3, #31
 801f906:	d560      	bpl.n	801f9ca <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ae>
 801f908:	4d8d      	ldr	r5, [pc, #564]	; (801fb40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x324>)
 801f90a:	e8d5 3f8f 	ldab	r3, [r5]
 801f90e:	07d9      	lsls	r1, r3, #31
 801f910:	d54d      	bpl.n	801f9ae <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x192>
 801f912:	4d8c      	ldr	r5, [pc, #560]	; (801fb44 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x328>)
 801f914:	e8d5 3f8f 	ldab	r3, [r5]
 801f918:	07da      	lsls	r2, r3, #31
 801f91a:	d53a      	bpl.n	801f992 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 801f91c:	4d8a      	ldr	r5, [pc, #552]	; (801fb48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x32c>)
 801f91e:	e8d5 3f8f 	ldab	r3, [r5]
 801f922:	07db      	lsls	r3, r3, #31
 801f924:	d517      	bpl.n	801f956 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801f926:	f898 3008 	ldrb.w	r3, [r8, #8]
 801f92a:	2b01      	cmp	r3, #1
 801f92c:	d024      	beq.n	801f978 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15c>
 801f92e:	f0c0 81ca 	bcc.w	801fcc6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4aa>
 801f932:	2b02      	cmp	r3, #2
 801f934:	d002      	beq.n	801f93c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801f936:	2000      	movs	r0, #0
 801f938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f93c:	2eff      	cmp	r6, #255	; 0xff
 801f93e:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 801f942:	f000 81cb 	beq.w	801fcdc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c0>
 801f946:	2c03      	cmp	r4, #3
 801f948:	d8f5      	bhi.n	801f936 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801f94a:	e8df f014 	tbh	[pc, r4, lsl #1]
 801f94e:	01ff      	.short	0x01ff
 801f950:	01e701ee 	.word	0x01e701ee
 801f954:	01e0      	.short	0x01e0
 801f956:	4628      	mov	r0, r5
 801f958:	f008 fb93 	bl	8028082 <__cxa_guard_acquire>
 801f95c:	2800      	cmp	r0, #0
 801f95e:	d0e2      	beq.n	801f926 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10a>
 801f960:	4628      	mov	r0, r5
 801f962:	f008 fb9a 	bl	802809a <__cxa_guard_release>
 801f966:	4a79      	ldr	r2, [pc, #484]	; (801fb4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f968:	4979      	ldr	r1, [pc, #484]	; (801fb50 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x334>)
 801f96a:	487a      	ldr	r0, [pc, #488]	; (801fb54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x338>)
 801f96c:	f008 fb82 	bl	8028074 <__aeabi_atexit>
 801f970:	f898 3008 	ldrb.w	r3, [r8, #8]
 801f974:	2b01      	cmp	r3, #1
 801f976:	d1da      	bne.n	801f92e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x112>
 801f978:	2eff      	cmp	r6, #255	; 0xff
 801f97a:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 801f97e:	f000 81b6 	beq.w	801fcee <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4d2>
 801f982:	2c03      	cmp	r4, #3
 801f984:	d8d7      	bhi.n	801f936 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801f986:	e8df f014 	tbh	[pc, r4, lsl #1]
 801f98a:	0233      	.short	0x0233
 801f98c:	021b0222 	.word	0x021b0222
 801f990:	0214      	.short	0x0214
 801f992:	4628      	mov	r0, r5
 801f994:	f008 fb75 	bl	8028082 <__cxa_guard_acquire>
 801f998:	2800      	cmp	r0, #0
 801f99a:	d0bf      	beq.n	801f91c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801f99c:	4628      	mov	r0, r5
 801f99e:	f008 fb7c 	bl	802809a <__cxa_guard_release>
 801f9a2:	4a6a      	ldr	r2, [pc, #424]	; (801fb4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f9a4:	496c      	ldr	r1, [pc, #432]	; (801fb58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x33c>)
 801f9a6:	486d      	ldr	r0, [pc, #436]	; (801fb5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x340>)
 801f9a8:	f008 fb64 	bl	8028074 <__aeabi_atexit>
 801f9ac:	e7b6      	b.n	801f91c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801f9ae:	4628      	mov	r0, r5
 801f9b0:	f008 fb67 	bl	8028082 <__cxa_guard_acquire>
 801f9b4:	2800      	cmp	r0, #0
 801f9b6:	d0ac      	beq.n	801f912 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf6>
 801f9b8:	4628      	mov	r0, r5
 801f9ba:	f008 fb6e 	bl	802809a <__cxa_guard_release>
 801f9be:	4a63      	ldr	r2, [pc, #396]	; (801fb4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f9c0:	4967      	ldr	r1, [pc, #412]	; (801fb60 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x344>)
 801f9c2:	4868      	ldr	r0, [pc, #416]	; (801fb64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x348>)
 801f9c4:	f008 fb56 	bl	8028074 <__aeabi_atexit>
 801f9c8:	e7a3      	b.n	801f912 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf6>
 801f9ca:	4628      	mov	r0, r5
 801f9cc:	f008 fb59 	bl	8028082 <__cxa_guard_acquire>
 801f9d0:	2800      	cmp	r0, #0
 801f9d2:	d099      	beq.n	801f908 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801f9d4:	4628      	mov	r0, r5
 801f9d6:	f008 fb60 	bl	802809a <__cxa_guard_release>
 801f9da:	4a5c      	ldr	r2, [pc, #368]	; (801fb4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f9dc:	4962      	ldr	r1, [pc, #392]	; (801fb68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x34c>)
 801f9de:	4863      	ldr	r0, [pc, #396]	; (801fb6c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x350>)
 801f9e0:	f008 fb48 	bl	8028074 <__aeabi_atexit>
 801f9e4:	e790      	b.n	801f908 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801f9e6:	4628      	mov	r0, r5
 801f9e8:	f008 fb4b 	bl	8028082 <__cxa_guard_acquire>
 801f9ec:	2800      	cmp	r0, #0
 801f9ee:	d086      	beq.n	801f8fe <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801f9f0:	4628      	mov	r0, r5
 801f9f2:	f008 fb52 	bl	802809a <__cxa_guard_release>
 801f9f6:	4a55      	ldr	r2, [pc, #340]	; (801fb4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f9f8:	495d      	ldr	r1, [pc, #372]	; (801fb70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x354>)
 801f9fa:	485e      	ldr	r0, [pc, #376]	; (801fb74 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x358>)
 801f9fc:	f008 fb3a 	bl	8028074 <__aeabi_atexit>
 801fa00:	e77d      	b.n	801f8fe <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801fa02:	4628      	mov	r0, r5
 801fa04:	f008 fb3d 	bl	8028082 <__cxa_guard_acquire>
 801fa08:	2800      	cmp	r0, #0
 801fa0a:	f43f af73 	beq.w	801f8f4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801fa0e:	4628      	mov	r0, r5
 801fa10:	f008 fb43 	bl	802809a <__cxa_guard_release>
 801fa14:	4a4d      	ldr	r2, [pc, #308]	; (801fb4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fa16:	4958      	ldr	r1, [pc, #352]	; (801fb78 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x35c>)
 801fa18:	4858      	ldr	r0, [pc, #352]	; (801fb7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x360>)
 801fa1a:	f008 fb2b 	bl	8028074 <__aeabi_atexit>
 801fa1e:	e769      	b.n	801f8f4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801fa20:	4628      	mov	r0, r5
 801fa22:	f008 fb2e 	bl	8028082 <__cxa_guard_acquire>
 801fa26:	2800      	cmp	r0, #0
 801fa28:	f43f af5e 	beq.w	801f8e8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801fa2c:	4628      	mov	r0, r5
 801fa2e:	f008 fb34 	bl	802809a <__cxa_guard_release>
 801fa32:	4a46      	ldr	r2, [pc, #280]	; (801fb4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fa34:	4952      	ldr	r1, [pc, #328]	; (801fb80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x364>)
 801fa36:	4853      	ldr	r0, [pc, #332]	; (801fb84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x368>)
 801fa38:	f008 fb1c 	bl	8028074 <__aeabi_atexit>
 801fa3c:	e754      	b.n	801f8e8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801fa3e:	4628      	mov	r0, r5
 801fa40:	f008 fb1f 	bl	8028082 <__cxa_guard_acquire>
 801fa44:	2800      	cmp	r0, #0
 801fa46:	f43f af49 	beq.w	801f8dc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801fa4a:	4628      	mov	r0, r5
 801fa4c:	f008 fb25 	bl	802809a <__cxa_guard_release>
 801fa50:	4a3e      	ldr	r2, [pc, #248]	; (801fb4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fa52:	494d      	ldr	r1, [pc, #308]	; (801fb88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x36c>)
 801fa54:	484d      	ldr	r0, [pc, #308]	; (801fb8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x370>)
 801fa56:	f008 fb0d 	bl	8028074 <__aeabi_atexit>
 801fa5a:	e73f      	b.n	801f8dc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801fa5c:	4628      	mov	r0, r5
 801fa5e:	f008 fb10 	bl	8028082 <__cxa_guard_acquire>
 801fa62:	2800      	cmp	r0, #0
 801fa64:	f43f af34 	beq.w	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 801fa68:	4628      	mov	r0, r5
 801fa6a:	f008 fb16 	bl	802809a <__cxa_guard_release>
 801fa6e:	4a37      	ldr	r2, [pc, #220]	; (801fb4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fa70:	4947      	ldr	r1, [pc, #284]	; (801fb90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x374>)
 801fa72:	4848      	ldr	r0, [pc, #288]	; (801fb94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x378>)
 801fa74:	f008 fafe 	bl	8028074 <__aeabi_atexit>
 801fa78:	e72a      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 801fa7a:	4628      	mov	r0, r5
 801fa7c:	f008 fb01 	bl	8028082 <__cxa_guard_acquire>
 801fa80:	2800      	cmp	r0, #0
 801fa82:	f43f af1f 	beq.w	801f8c4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801fa86:	4628      	mov	r0, r5
 801fa88:	f008 fb07 	bl	802809a <__cxa_guard_release>
 801fa8c:	4a2f      	ldr	r2, [pc, #188]	; (801fb4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fa8e:	4942      	ldr	r1, [pc, #264]	; (801fb98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x37c>)
 801fa90:	4842      	ldr	r0, [pc, #264]	; (801fb9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x380>)
 801fa92:	f008 faef 	bl	8028074 <__aeabi_atexit>
 801fa96:	e715      	b.n	801f8c4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801fa98:	4628      	mov	r0, r5
 801fa9a:	f008 faf2 	bl	8028082 <__cxa_guard_acquire>
 801fa9e:	2800      	cmp	r0, #0
 801faa0:	f43f af0a 	beq.w	801f8b8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9c>
 801faa4:	4628      	mov	r0, r5
 801faa6:	f008 faf8 	bl	802809a <__cxa_guard_release>
 801faaa:	4a28      	ldr	r2, [pc, #160]	; (801fb4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801faac:	493c      	ldr	r1, [pc, #240]	; (801fba0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x384>)
 801faae:	483d      	ldr	r0, [pc, #244]	; (801fba4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x388>)
 801fab0:	f008 fae0 	bl	8028074 <__aeabi_atexit>
 801fab4:	e700      	b.n	801f8b8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9c>
 801fab6:	4628      	mov	r0, r5
 801fab8:	f008 fae3 	bl	8028082 <__cxa_guard_acquire>
 801fabc:	2800      	cmp	r0, #0
 801fabe:	f43f aef5 	beq.w	801f8ac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x90>
 801fac2:	4628      	mov	r0, r5
 801fac4:	f008 fae9 	bl	802809a <__cxa_guard_release>
 801fac8:	4a20      	ldr	r2, [pc, #128]	; (801fb4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801faca:	4937      	ldr	r1, [pc, #220]	; (801fba8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x38c>)
 801facc:	4837      	ldr	r0, [pc, #220]	; (801fbac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x390>)
 801face:	f008 fad1 	bl	8028074 <__aeabi_atexit>
 801fad2:	e6eb      	b.n	801f8ac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x90>
 801fad4:	4628      	mov	r0, r5
 801fad6:	f008 fad4 	bl	8028082 <__cxa_guard_acquire>
 801fada:	2800      	cmp	r0, #0
 801fadc:	f43f aee0 	beq.w	801f8a0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801fae0:	4628      	mov	r0, r5
 801fae2:	f008 fada 	bl	802809a <__cxa_guard_release>
 801fae6:	4a19      	ldr	r2, [pc, #100]	; (801fb4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fae8:	4931      	ldr	r1, [pc, #196]	; (801fbb0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x394>)
 801faea:	4832      	ldr	r0, [pc, #200]	; (801fbb4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x398>)
 801faec:	f008 fac2 	bl	8028074 <__aeabi_atexit>
 801faf0:	e6d6      	b.n	801f8a0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801faf2:	bf00      	nop
 801faf4:	201983b0 	.word	0x201983b0
 801faf8:	201983c4 	.word	0x201983c4
 801fafc:	2019838c 	.word	0x2019838c
 801fb00:	20198398 	.word	0x20198398
 801fb04:	201983d0 	.word	0x201983d0
 801fb08:	201983dc 	.word	0x201983dc
 801fb0c:	201983a4 	.word	0x201983a4
 801fb10:	201983bc 	.word	0x201983bc
 801fb14:	201983b4 	.word	0x201983b4
 801fb18:	201983c8 	.word	0x201983c8
 801fb1c:	20198390 	.word	0x20198390
 801fb20:	2019839c 	.word	0x2019839c
 801fb24:	201983d4 	.word	0x201983d4
 801fb28:	201983e0 	.word	0x201983e0
 801fb2c:	201983a8 	.word	0x201983a8
 801fb30:	201983c0 	.word	0x201983c0
 801fb34:	201983b8 	.word	0x201983b8
 801fb38:	201983cc 	.word	0x201983cc
 801fb3c:	20198394 	.word	0x20198394
 801fb40:	201983a0 	.word	0x201983a0
 801fb44:	201983d8 	.word	0x201983d8
 801fb48:	201983ac 	.word	0x201983ac
 801fb4c:	20000000 	.word	0x20000000
 801fb50:	0801ee85 	.word	0x0801ee85
 801fb54:	20000088 	.word	0x20000088
 801fb58:	0801ee81 	.word	0x0801ee81
 801fb5c:	200000b4 	.word	0x200000b4
 801fb60:	0801ee91 	.word	0x0801ee91
 801fb64:	2000007c 	.word	0x2000007c
 801fb68:	0801ee95 	.word	0x0801ee95
 801fb6c:	20000070 	.word	0x20000070
 801fb70:	0801ee89 	.word	0x0801ee89
 801fb74:	200000a8 	.word	0x200000a8
 801fb78:	0801ee8d 	.word	0x0801ee8d
 801fb7c:	20000094 	.word	0x20000094
 801fb80:	0801eea1 	.word	0x0801eea1
 801fb84:	2000009c 	.word	0x2000009c
 801fb88:	0801eea5 	.word	0x0801eea5
 801fb8c:	20000084 	.word	0x20000084
 801fb90:	0801ee99 	.word	0x0801ee99
 801fb94:	200000bc 	.word	0x200000bc
 801fb98:	0801ee9d 	.word	0x0801ee9d
 801fb9c:	200000b0 	.word	0x200000b0
 801fba0:	0801eeb1 	.word	0x0801eeb1
 801fba4:	20000078 	.word	0x20000078
 801fba8:	0801eeb5 	.word	0x0801eeb5
 801fbac:	2000006c 	.word	0x2000006c
 801fbb0:	0801eea9 	.word	0x0801eea9
 801fbb4:	200000a4 	.word	0x200000a4
 801fbb8:	4628      	mov	r0, r5
 801fbba:	f008 fa62 	bl	8028082 <__cxa_guard_acquire>
 801fbbe:	2800      	cmp	r0, #0
 801fbc0:	f43f ae68 	beq.w	801f894 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78>
 801fbc4:	4628      	mov	r0, r5
 801fbc6:	f008 fa68 	bl	802809a <__cxa_guard_release>
 801fbca:	4aa6      	ldr	r2, [pc, #664]	; (801fe64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fbcc:	49a6      	ldr	r1, [pc, #664]	; (801fe68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64c>)
 801fbce:	48a7      	ldr	r0, [pc, #668]	; (801fe6c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x650>)
 801fbd0:	f008 fa50 	bl	8028074 <__aeabi_atexit>
 801fbd4:	e65e      	b.n	801f894 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78>
 801fbd6:	4628      	mov	r0, r5
 801fbd8:	f008 fa53 	bl	8028082 <__cxa_guard_acquire>
 801fbdc:	2800      	cmp	r0, #0
 801fbde:	f43f ae53 	beq.w	801f888 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801fbe2:	4628      	mov	r0, r5
 801fbe4:	f008 fa59 	bl	802809a <__cxa_guard_release>
 801fbe8:	4a9e      	ldr	r2, [pc, #632]	; (801fe64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fbea:	49a1      	ldr	r1, [pc, #644]	; (801fe70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x654>)
 801fbec:	48a1      	ldr	r0, [pc, #644]	; (801fe74 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x658>)
 801fbee:	f008 fa41 	bl	8028074 <__aeabi_atexit>
 801fbf2:	e649      	b.n	801f888 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801fbf4:	4628      	mov	r0, r5
 801fbf6:	f008 fa44 	bl	8028082 <__cxa_guard_acquire>
 801fbfa:	2800      	cmp	r0, #0
 801fbfc:	f43f ae3e 	beq.w	801f87c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801fc00:	4628      	mov	r0, r5
 801fc02:	f008 fa4a 	bl	802809a <__cxa_guard_release>
 801fc06:	4a97      	ldr	r2, [pc, #604]	; (801fe64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fc08:	499b      	ldr	r1, [pc, #620]	; (801fe78 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x65c>)
 801fc0a:	489c      	ldr	r0, [pc, #624]	; (801fe7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x660>)
 801fc0c:	f008 fa32 	bl	8028074 <__aeabi_atexit>
 801fc10:	e634      	b.n	801f87c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801fc12:	4628      	mov	r0, r5
 801fc14:	f008 fa35 	bl	8028082 <__cxa_guard_acquire>
 801fc18:	2800      	cmp	r0, #0
 801fc1a:	f43f ae29 	beq.w	801f870 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801fc1e:	4628      	mov	r0, r5
 801fc20:	f008 fa3b 	bl	802809a <__cxa_guard_release>
 801fc24:	4a8f      	ldr	r2, [pc, #572]	; (801fe64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fc26:	4996      	ldr	r1, [pc, #600]	; (801fe80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x664>)
 801fc28:	4896      	ldr	r0, [pc, #600]	; (801fe84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x668>)
 801fc2a:	f008 fa23 	bl	8028074 <__aeabi_atexit>
 801fc2e:	e61f      	b.n	801f870 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801fc30:	4628      	mov	r0, r5
 801fc32:	f008 fa26 	bl	8028082 <__cxa_guard_acquire>
 801fc36:	2800      	cmp	r0, #0
 801fc38:	f43f ae14 	beq.w	801f864 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48>
 801fc3c:	4628      	mov	r0, r5
 801fc3e:	f008 fa2c 	bl	802809a <__cxa_guard_release>
 801fc42:	4a88      	ldr	r2, [pc, #544]	; (801fe64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fc44:	4990      	ldr	r1, [pc, #576]	; (801fe88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66c>)
 801fc46:	4891      	ldr	r0, [pc, #580]	; (801fe8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x670>)
 801fc48:	f008 fa14 	bl	8028074 <__aeabi_atexit>
 801fc4c:	e60a      	b.n	801f864 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48>
 801fc4e:	4628      	mov	r0, r5
 801fc50:	f008 fa17 	bl	8028082 <__cxa_guard_acquire>
 801fc54:	2800      	cmp	r0, #0
 801fc56:	f43f adff 	beq.w	801f858 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3c>
 801fc5a:	4628      	mov	r0, r5
 801fc5c:	f008 fa1d 	bl	802809a <__cxa_guard_release>
 801fc60:	4a80      	ldr	r2, [pc, #512]	; (801fe64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fc62:	498b      	ldr	r1, [pc, #556]	; (801fe90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x674>)
 801fc64:	488b      	ldr	r0, [pc, #556]	; (801fe94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x678>)
 801fc66:	f008 fa05 	bl	8028074 <__aeabi_atexit>
 801fc6a:	e5f5      	b.n	801f858 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3c>
 801fc6c:	4628      	mov	r0, r5
 801fc6e:	f008 fa08 	bl	8028082 <__cxa_guard_acquire>
 801fc72:	2800      	cmp	r0, #0
 801fc74:	f43f adea 	beq.w	801f84c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30>
 801fc78:	4628      	mov	r0, r5
 801fc7a:	f008 fa0e 	bl	802809a <__cxa_guard_release>
 801fc7e:	4a79      	ldr	r2, [pc, #484]	; (801fe64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fc80:	4985      	ldr	r1, [pc, #532]	; (801fe98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x67c>)
 801fc82:	4886      	ldr	r0, [pc, #536]	; (801fe9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x680>)
 801fc84:	f008 f9f6 	bl	8028074 <__aeabi_atexit>
 801fc88:	e5e0      	b.n	801f84c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30>
 801fc8a:	4628      	mov	r0, r5
 801fc8c:	f008 f9f9 	bl	8028082 <__cxa_guard_acquire>
 801fc90:	2800      	cmp	r0, #0
 801fc92:	f43f add5 	beq.w	801f840 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fc96:	4628      	mov	r0, r5
 801fc98:	f008 f9ff 	bl	802809a <__cxa_guard_release>
 801fc9c:	4a71      	ldr	r2, [pc, #452]	; (801fe64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fc9e:	4980      	ldr	r1, [pc, #512]	; (801fea0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x684>)
 801fca0:	4880      	ldr	r0, [pc, #512]	; (801fea4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x688>)
 801fca2:	f008 f9e7 	bl	8028074 <__aeabi_atexit>
 801fca6:	e5cb      	b.n	801f840 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fca8:	4628      	mov	r0, r5
 801fcaa:	f008 f9ea 	bl	8028082 <__cxa_guard_acquire>
 801fcae:	2800      	cmp	r0, #0
 801fcb0:	f43f adc0 	beq.w	801f834 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fcb4:	4628      	mov	r0, r5
 801fcb6:	f008 f9f0 	bl	802809a <__cxa_guard_release>
 801fcba:	4a6a      	ldr	r2, [pc, #424]	; (801fe64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fcbc:	497a      	ldr	r1, [pc, #488]	; (801fea8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x68c>)
 801fcbe:	487b      	ldr	r0, [pc, #492]	; (801feac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x690>)
 801fcc0:	f008 f9d8 	bl	8028074 <__aeabi_atexit>
 801fcc4:	e5b6      	b.n	801f834 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fcc6:	2eff      	cmp	r6, #255	; 0xff
 801fcc8:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 801fccc:	d018      	beq.n	801fd00 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e4>
 801fcce:	2c03      	cmp	r4, #3
 801fcd0:	f63f ae31 	bhi.w	801f936 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fcd4:	e8df f004 	tbb	[pc, r4]
 801fcd8:	4b525963 	.word	0x4b525963
 801fcdc:	2c03      	cmp	r4, #3
 801fcde:	f63f ae2a 	bhi.w	801f936 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fce2:	e8df f014 	tbh	[pc, r4, lsl #1]
 801fce6:	012d      	.short	0x012d
 801fce8:	001b011e 	.word	0x001b011e
 801fcec:	0014      	.short	0x0014
 801fcee:	2c03      	cmp	r4, #3
 801fcf0:	f63f ae21 	bhi.w	801f936 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fcf4:	e8df f014 	tbh	[pc, r4, lsl #1]
 801fcf8:	00f000ff 	.word	0x00f000ff
 801fcfc:	00af010e 	.word	0x00af010e
 801fd00:	2c03      	cmp	r4, #3
 801fd02:	f63f ae18 	bhi.w	801f936 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fd06:	e8df f004 	tbb	[pc, r4]
 801fd0a:	929c      	.short	0x929c
 801fd0c:	848b      	.short	0x848b
 801fd0e:	687b      	ldr	r3, [r7, #4]
 801fd10:	4867      	ldr	r0, [pc, #412]	; (801feb0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x694>)
 801fd12:	781b      	ldrb	r3, [r3, #0]
 801fd14:	2b00      	cmp	r3, #0
 801fd16:	bf18      	it	ne
 801fd18:	2000      	movne	r0, #0
 801fd1a:	e60d      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fd1c:	687b      	ldr	r3, [r7, #4]
 801fd1e:	4865      	ldr	r0, [pc, #404]	; (801feb4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x698>)
 801fd20:	781b      	ldrb	r3, [r3, #0]
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	bf18      	it	ne
 801fd26:	2000      	movne	r0, #0
 801fd28:	e606      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fd2a:	687b      	ldr	r3, [r7, #4]
 801fd2c:	781b      	ldrb	r3, [r3, #0]
 801fd2e:	2b01      	cmp	r3, #1
 801fd30:	f000 811b 	beq.w	801ff6a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x74e>
 801fd34:	f0c0 8113 	bcc.w	801ff5e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x742>
 801fd38:	2b02      	cmp	r3, #2
 801fd3a:	f47f adfc 	bne.w	801f936 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fd3e:	4b5e      	ldr	r3, [pc, #376]	; (801feb8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x69c>)
 801fd40:	4a5e      	ldr	r2, [pc, #376]	; (801febc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801fd42:	f240 616e 	movw	r1, #1646	; 0x66e
 801fd46:	485e      	ldr	r0, [pc, #376]	; (801fec0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801fd48:	f008 f9c6 	bl	80280d8 <__assert_func>
 801fd4c:	687b      	ldr	r3, [r7, #4]
 801fd4e:	781b      	ldrb	r3, [r3, #0]
 801fd50:	2b01      	cmp	r3, #1
 801fd52:	f000 8108 	beq.w	801ff66 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x74a>
 801fd56:	f0c0 8104 	bcc.w	801ff62 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x746>
 801fd5a:	2b02      	cmp	r3, #2
 801fd5c:	f47f adeb 	bne.w	801f936 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fd60:	4b55      	ldr	r3, [pc, #340]	; (801feb8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x69c>)
 801fd62:	4a56      	ldr	r2, [pc, #344]	; (801febc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801fd64:	f240 617a 	movw	r1, #1658	; 0x67a
 801fd68:	4855      	ldr	r0, [pc, #340]	; (801fec0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801fd6a:	f008 f9b5 	bl	80280d8 <__assert_func>
 801fd6e:	687b      	ldr	r3, [r7, #4]
 801fd70:	4846      	ldr	r0, [pc, #280]	; (801fe8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x670>)
 801fd72:	781b      	ldrb	r3, [r3, #0]
 801fd74:	2b00      	cmp	r3, #0
 801fd76:	bf18      	it	ne
 801fd78:	2000      	movne	r0, #0
 801fd7a:	e5dd      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fd7c:	687b      	ldr	r3, [r7, #4]
 801fd7e:	483f      	ldr	r0, [pc, #252]	; (801fe7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x660>)
 801fd80:	781b      	ldrb	r3, [r3, #0]
 801fd82:	2b00      	cmp	r3, #0
 801fd84:	bf18      	it	ne
 801fd86:	2000      	movne	r0, #0
 801fd88:	e5d6      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fd8a:	687b      	ldr	r3, [r7, #4]
 801fd8c:	781b      	ldrb	r3, [r3, #0]
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	f000 80ed 	beq.w	801ff6e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x752>
 801fd94:	2b01      	cmp	r3, #1
 801fd96:	4845      	ldr	r0, [pc, #276]	; (801feac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x690>)
 801fd98:	bf18      	it	ne
 801fd9a:	2000      	movne	r0, #0
 801fd9c:	e5cc      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fd9e:	687b      	ldr	r3, [r7, #4]
 801fda0:	781b      	ldrb	r3, [r3, #0]
 801fda2:	2b00      	cmp	r3, #0
 801fda4:	f000 80e5 	beq.w	801ff72 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x756>
 801fda8:	2b01      	cmp	r3, #1
 801fdaa:	483c      	ldr	r0, [pc, #240]	; (801fe9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x680>)
 801fdac:	bf18      	it	ne
 801fdae:	2000      	movne	r0, #0
 801fdb0:	e5c2      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	4843      	ldr	r0, [pc, #268]	; (801fec4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a8>)
 801fdb6:	781b      	ldrb	r3, [r3, #0]
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	bf18      	it	ne
 801fdbc:	2000      	movne	r0, #0
 801fdbe:	e5bb      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fdc0:	687b      	ldr	r3, [r7, #4]
 801fdc2:	4841      	ldr	r0, [pc, #260]	; (801fec8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6ac>)
 801fdc4:	781b      	ldrb	r3, [r3, #0]
 801fdc6:	2b00      	cmp	r3, #0
 801fdc8:	bf18      	it	ne
 801fdca:	2000      	movne	r0, #0
 801fdcc:	e5b4      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fdce:	687b      	ldr	r3, [r7, #4]
 801fdd0:	781b      	ldrb	r3, [r3, #0]
 801fdd2:	2b01      	cmp	r3, #1
 801fdd4:	f000 80d5 	beq.w	801ff82 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x766>
 801fdd8:	f0c0 80d1 	bcc.w	801ff7e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x762>
 801fddc:	2b02      	cmp	r3, #2
 801fdde:	f47f adaa 	bne.w	801f936 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fde2:	4b3a      	ldr	r3, [pc, #232]	; (801fecc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b0>)
 801fde4:	4a35      	ldr	r2, [pc, #212]	; (801febc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801fde6:	f240 6113 	movw	r1, #1555	; 0x613
 801fdea:	4835      	ldr	r0, [pc, #212]	; (801fec0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801fdec:	f008 f974 	bl	80280d8 <__assert_func>
 801fdf0:	687b      	ldr	r3, [r7, #4]
 801fdf2:	781b      	ldrb	r3, [r3, #0]
 801fdf4:	2b01      	cmp	r3, #1
 801fdf6:	f000 80c0 	beq.w	801ff7a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x75e>
 801fdfa:	f0c0 80bc 	bcc.w	801ff76 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x75a>
 801fdfe:	2b02      	cmp	r3, #2
 801fe00:	f47f ad99 	bne.w	801f936 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fe04:	4b32      	ldr	r3, [pc, #200]	; (801fed0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b4>)
 801fe06:	4a2d      	ldr	r2, [pc, #180]	; (801febc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801fe08:	f240 611f 	movw	r1, #1567	; 0x61f
 801fe0c:	482c      	ldr	r0, [pc, #176]	; (801fec0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801fe0e:	f008 f963 	bl	80280d8 <__assert_func>
 801fe12:	687b      	ldr	r3, [r7, #4]
 801fe14:	481b      	ldr	r0, [pc, #108]	; (801fe84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x668>)
 801fe16:	781b      	ldrb	r3, [r3, #0]
 801fe18:	2b00      	cmp	r3, #0
 801fe1a:	bf18      	it	ne
 801fe1c:	2000      	movne	r0, #0
 801fe1e:	e58b      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fe20:	687b      	ldr	r3, [r7, #4]
 801fe22:	4814      	ldr	r0, [pc, #80]	; (801fe74 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x658>)
 801fe24:	781b      	ldrb	r3, [r3, #0]
 801fe26:	2b00      	cmp	r3, #0
 801fe28:	bf18      	it	ne
 801fe2a:	2000      	movne	r0, #0
 801fe2c:	e584      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fe2e:	687b      	ldr	r3, [r7, #4]
 801fe30:	781b      	ldrb	r3, [r3, #0]
 801fe32:	2b00      	cmp	r3, #0
 801fe34:	f000 80af 	beq.w	801ff96 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x77a>
 801fe38:	2b01      	cmp	r3, #1
 801fe3a:	481a      	ldr	r0, [pc, #104]	; (801fea4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x688>)
 801fe3c:	bf18      	it	ne
 801fe3e:	2000      	movne	r0, #0
 801fe40:	e57a      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fe42:	687b      	ldr	r3, [r7, #4]
 801fe44:	781b      	ldrb	r3, [r3, #0]
 801fe46:	2b00      	cmp	r3, #0
 801fe48:	f000 80a7 	beq.w	801ff9a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x77e>
 801fe4c:	2b01      	cmp	r3, #1
 801fe4e:	4811      	ldr	r0, [pc, #68]	; (801fe94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x678>)
 801fe50:	bf18      	it	ne
 801fe52:	2000      	movne	r0, #0
 801fe54:	e570      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fe56:	687b      	ldr	r3, [r7, #4]
 801fe58:	481e      	ldr	r0, [pc, #120]	; (801fed4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b8>)
 801fe5a:	781b      	ldrb	r3, [r3, #0]
 801fe5c:	2b00      	cmp	r3, #0
 801fe5e:	bf18      	it	ne
 801fe60:	2000      	movne	r0, #0
 801fe62:	e569      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fe64:	20000000 	.word	0x20000000
 801fe68:	0801eead 	.word	0x0801eead
 801fe6c:	20000090 	.word	0x20000090
 801fe70:	0801eec1 	.word	0x0801eec1
 801fe74:	20000098 	.word	0x20000098
 801fe78:	0801eec5 	.word	0x0801eec5
 801fe7c:	20000080 	.word	0x20000080
 801fe80:	0801eeb9 	.word	0x0801eeb9
 801fe84:	200000b8 	.word	0x200000b8
 801fe88:	0801eebd 	.word	0x0801eebd
 801fe8c:	200000ac 	.word	0x200000ac
 801fe90:	0801eed1 	.word	0x0801eed1
 801fe94:	20000074 	.word	0x20000074
 801fe98:	0801eed5 	.word	0x0801eed5
 801fe9c:	20000068 	.word	0x20000068
 801fea0:	0801eec9 	.word	0x0801eec9
 801fea4:	200000a0 	.word	0x200000a0
 801fea8:	0801eecd 	.word	0x0801eecd
 801feac:	2000008c 	.word	0x2000008c
 801feb0:	200000b4 	.word	0x200000b4
 801feb4:	20000088 	.word	0x20000088
 801feb8:	0802b114 	.word	0x0802b114
 801febc:	0802bef4 	.word	0x0802bef4
 801fec0:	0802afbc 	.word	0x0802afbc
 801fec4:	200000b0 	.word	0x200000b0
 801fec8:	20000084 	.word	0x20000084
 801fecc:	0802b080 	.word	0x0802b080
 801fed0:	0802b0c8 	.word	0x0802b0c8
 801fed4:	200000bc 	.word	0x200000bc
 801fed8:	687b      	ldr	r3, [r7, #4]
 801feda:	781b      	ldrb	r3, [r3, #0]
 801fedc:	2b01      	cmp	r3, #1
 801fede:	d060      	beq.n	801ffa2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x786>
 801fee0:	d35d      	bcc.n	801ff9e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x782>
 801fee2:	2b02      	cmp	r3, #2
 801fee4:	f47f ad27 	bne.w	801f936 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fee8:	4b2f      	ldr	r3, [pc, #188]	; (801ffa8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801feea:	4a30      	ldr	r2, [pc, #192]	; (801ffac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801feec:	f240 613e 	movw	r1, #1598	; 0x63e
 801fef0:	482f      	ldr	r0, [pc, #188]	; (801ffb0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801fef2:	f008 f8f1 	bl	80280d8 <__assert_func>
 801fef6:	687b      	ldr	r3, [r7, #4]
 801fef8:	781b      	ldrb	r3, [r3, #0]
 801fefa:	2b01      	cmp	r3, #1
 801fefc:	d049      	beq.n	801ff92 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x776>
 801fefe:	d346      	bcc.n	801ff8e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x772>
 801ff00:	2b02      	cmp	r3, #2
 801ff02:	f47f ad18 	bne.w	801f936 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801ff06:	4b28      	ldr	r3, [pc, #160]	; (801ffa8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801ff08:	4a28      	ldr	r2, [pc, #160]	; (801ffac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801ff0a:	f240 614a 	movw	r1, #1610	; 0x64a
 801ff0e:	4828      	ldr	r0, [pc, #160]	; (801ffb0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801ff10:	f008 f8e2 	bl	80280d8 <__assert_func>
 801ff14:	687b      	ldr	r3, [r7, #4]
 801ff16:	4827      	ldr	r0, [pc, #156]	; (801ffb4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x798>)
 801ff18:	781b      	ldrb	r3, [r3, #0]
 801ff1a:	2b00      	cmp	r3, #0
 801ff1c:	bf18      	it	ne
 801ff1e:	2000      	movne	r0, #0
 801ff20:	e50a      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff22:	687b      	ldr	r3, [r7, #4]
 801ff24:	781b      	ldrb	r3, [r3, #0]
 801ff26:	2b01      	cmp	r3, #1
 801ff28:	d02d      	beq.n	801ff86 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76a>
 801ff2a:	d318      	bcc.n	801ff5e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x742>
 801ff2c:	2b02      	cmp	r3, #2
 801ff2e:	f47f ad02 	bne.w	801f936 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801ff32:	4b1d      	ldr	r3, [pc, #116]	; (801ffa8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801ff34:	4a1d      	ldr	r2, [pc, #116]	; (801ffac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801ff36:	f240 619b 	movw	r1, #1691	; 0x69b
 801ff3a:	481d      	ldr	r0, [pc, #116]	; (801ffb0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801ff3c:	f008 f8cc 	bl	80280d8 <__assert_func>
 801ff40:	687b      	ldr	r3, [r7, #4]
 801ff42:	781b      	ldrb	r3, [r3, #0]
 801ff44:	2b01      	cmp	r3, #1
 801ff46:	d020      	beq.n	801ff8a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76e>
 801ff48:	d30b      	bcc.n	801ff62 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x746>
 801ff4a:	2b02      	cmp	r3, #2
 801ff4c:	f47f acf3 	bne.w	801f936 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801ff50:	4b15      	ldr	r3, [pc, #84]	; (801ffa8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801ff52:	4a16      	ldr	r2, [pc, #88]	; (801ffac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801ff54:	f240 61a7 	movw	r1, #1703	; 0x6a7
 801ff58:	4815      	ldr	r0, [pc, #84]	; (801ffb0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801ff5a:	f008 f8bd 	bl	80280d8 <__assert_func>
 801ff5e:	4816      	ldr	r0, [pc, #88]	; (801ffb8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x79c>)
 801ff60:	e4ea      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff62:	4816      	ldr	r0, [pc, #88]	; (801ffbc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a0>)
 801ff64:	e4e8      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff66:	4816      	ldr	r0, [pc, #88]	; (801ffc0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a4>)
 801ff68:	e4e6      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff6a:	4816      	ldr	r0, [pc, #88]	; (801ffc4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a8>)
 801ff6c:	e4e4      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff6e:	4816      	ldr	r0, [pc, #88]	; (801ffc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7ac>)
 801ff70:	e4e2      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff72:	4816      	ldr	r0, [pc, #88]	; (801ffcc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b0>)
 801ff74:	e4e0      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff76:	4816      	ldr	r0, [pc, #88]	; (801ffd0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b4>)
 801ff78:	e4de      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff7a:	4816      	ldr	r0, [pc, #88]	; (801ffd4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b8>)
 801ff7c:	e4dc      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff7e:	4816      	ldr	r0, [pc, #88]	; (801ffd8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7bc>)
 801ff80:	e4da      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff82:	4816      	ldr	r0, [pc, #88]	; (801ffdc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c0>)
 801ff84:	e4d8      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff86:	4816      	ldr	r0, [pc, #88]	; (801ffe0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c4>)
 801ff88:	e4d6      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff8a:	4816      	ldr	r0, [pc, #88]	; (801ffe4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c8>)
 801ff8c:	e4d4      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff8e:	4809      	ldr	r0, [pc, #36]	; (801ffb4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x798>)
 801ff90:	e4d2      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff92:	4815      	ldr	r0, [pc, #84]	; (801ffe8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7cc>)
 801ff94:	e4d0      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff96:	4815      	ldr	r0, [pc, #84]	; (801ffec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d0>)
 801ff98:	e4ce      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff9a:	4815      	ldr	r0, [pc, #84]	; (801fff0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d4>)
 801ff9c:	e4cc      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff9e:	4815      	ldr	r0, [pc, #84]	; (801fff4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d8>)
 801ffa0:	e4ca      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ffa2:	4815      	ldr	r0, [pc, #84]	; (801fff8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7dc>)
 801ffa4:	e4c8      	b.n	801f938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ffa6:	bf00      	nop
 801ffa8:	0802b0c8 	.word	0x0802b0c8
 801ffac:	0802bef4 	.word	0x0802bef4
 801ffb0:	0802afbc 	.word	0x0802afbc
 801ffb4:	2000009c 	.word	0x2000009c
 801ffb8:	200000b4 	.word	0x200000b4
 801ffbc:	20000088 	.word	0x20000088
 801ffc0:	20000070 	.word	0x20000070
 801ffc4:	20000094 	.word	0x20000094
 801ffc8:	200000ac 	.word	0x200000ac
 801ffcc:	20000080 	.word	0x20000080
 801ffd0:	20000084 	.word	0x20000084
 801ffd4:	2000006c 	.word	0x2000006c
 801ffd8:	200000b0 	.word	0x200000b0
 801ffdc:	20000090 	.word	0x20000090
 801ffe0:	200000a8 	.word	0x200000a8
 801ffe4:	2000007c 	.word	0x2000007c
 801ffe8:	20000078 	.word	0x20000078
 801ffec:	200000b8 	.word	0x200000b8
 801fff0:	20000098 	.word	0x20000098
 801fff4:	200000bc 	.word	0x200000bc
 801fff8:	200000a4 	.word	0x200000a4

0801fffc <_ZN8touchgfx8LCDGPU2DD0Ev>:
 801fffc:	b510      	push	{r4, lr}
 801fffe:	4604      	mov	r4, r0
 8020000:	210c      	movs	r1, #12
 8020002:	f008 f83c 	bl	802807e <_ZdlPvj>
 8020006:	4620      	mov	r0, r4
 8020008:	bd10      	pop	{r4, pc}
 802000a:	bf00      	nop

0802000c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802000c:	b510      	push	{r4, lr}
 802000e:	4604      	mov	r4, r0
 8020010:	2104      	movs	r1, #4
 8020012:	f008 f834 	bl	802807e <_ZdlPvj>
 8020016:	4620      	mov	r0, r4
 8020018:	bd10      	pop	{r4, pc}
 802001a:	bf00      	nop

0802001c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802001c:	b510      	push	{r4, lr}
 802001e:	4604      	mov	r4, r0
 8020020:	2104      	movs	r1, #4
 8020022:	f008 f82c 	bl	802807e <_ZdlPvj>
 8020026:	4620      	mov	r0, r4
 8020028:	bd10      	pop	{r4, pc}
 802002a:	bf00      	nop

0802002c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 802002c:	b510      	push	{r4, lr}
 802002e:	4604      	mov	r4, r0
 8020030:	2104      	movs	r1, #4
 8020032:	f008 f824 	bl	802807e <_ZdlPvj>
 8020036:	4620      	mov	r0, r4
 8020038:	bd10      	pop	{r4, pc}
 802003a:	bf00      	nop

0802003c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802003c:	b510      	push	{r4, lr}
 802003e:	4604      	mov	r4, r0
 8020040:	2104      	movs	r1, #4
 8020042:	f008 f81c 	bl	802807e <_ZdlPvj>
 8020046:	4620      	mov	r0, r4
 8020048:	bd10      	pop	{r4, pc}
 802004a:	bf00      	nop

0802004c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 802004c:	b510      	push	{r4, lr}
 802004e:	4604      	mov	r4, r0
 8020050:	2104      	movs	r1, #4
 8020052:	f008 f814 	bl	802807e <_ZdlPvj>
 8020056:	4620      	mov	r0, r4
 8020058:	bd10      	pop	{r4, pc}
 802005a:	bf00      	nop

0802005c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 802005c:	b510      	push	{r4, lr}
 802005e:	4604      	mov	r4, r0
 8020060:	2104      	movs	r1, #4
 8020062:	f008 f80c 	bl	802807e <_ZdlPvj>
 8020066:	4620      	mov	r0, r4
 8020068:	bd10      	pop	{r4, pc}
 802006a:	bf00      	nop

0802006c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802006c:	b510      	push	{r4, lr}
 802006e:	4604      	mov	r4, r0
 8020070:	2104      	movs	r1, #4
 8020072:	f008 f804 	bl	802807e <_ZdlPvj>
 8020076:	4620      	mov	r0, r4
 8020078:	bd10      	pop	{r4, pc}
 802007a:	bf00      	nop

0802007c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802007c:	b510      	push	{r4, lr}
 802007e:	4604      	mov	r4, r0
 8020080:	2104      	movs	r1, #4
 8020082:	f007 fffc 	bl	802807e <_ZdlPvj>
 8020086:	4620      	mov	r0, r4
 8020088:	bd10      	pop	{r4, pc}
 802008a:	bf00      	nop

0802008c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802008c:	b510      	push	{r4, lr}
 802008e:	4604      	mov	r4, r0
 8020090:	2104      	movs	r1, #4
 8020092:	f007 fff4 	bl	802807e <_ZdlPvj>
 8020096:	4620      	mov	r0, r4
 8020098:	bd10      	pop	{r4, pc}
 802009a:	bf00      	nop

0802009c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802009c:	b510      	push	{r4, lr}
 802009e:	4604      	mov	r4, r0
 80200a0:	2104      	movs	r1, #4
 80200a2:	f007 ffec 	bl	802807e <_ZdlPvj>
 80200a6:	4620      	mov	r0, r4
 80200a8:	bd10      	pop	{r4, pc}
 80200aa:	bf00      	nop

080200ac <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80200ac:	b510      	push	{r4, lr}
 80200ae:	4604      	mov	r4, r0
 80200b0:	2104      	movs	r1, #4
 80200b2:	f007 ffe4 	bl	802807e <_ZdlPvj>
 80200b6:	4620      	mov	r0, r4
 80200b8:	bd10      	pop	{r4, pc}
 80200ba:	bf00      	nop

080200bc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80200bc:	b510      	push	{r4, lr}
 80200be:	4604      	mov	r4, r0
 80200c0:	2104      	movs	r1, #4
 80200c2:	f007 ffdc 	bl	802807e <_ZdlPvj>
 80200c6:	4620      	mov	r0, r4
 80200c8:	bd10      	pop	{r4, pc}
 80200ca:	bf00      	nop

080200cc <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80200cc:	b510      	push	{r4, lr}
 80200ce:	4604      	mov	r4, r0
 80200d0:	2104      	movs	r1, #4
 80200d2:	f007 ffd4 	bl	802807e <_ZdlPvj>
 80200d6:	4620      	mov	r0, r4
 80200d8:	bd10      	pop	{r4, pc}
 80200da:	bf00      	nop

080200dc <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80200dc:	b510      	push	{r4, lr}
 80200de:	4604      	mov	r4, r0
 80200e0:	2104      	movs	r1, #4
 80200e2:	f007 ffcc 	bl	802807e <_ZdlPvj>
 80200e6:	4620      	mov	r0, r4
 80200e8:	bd10      	pop	{r4, pc}
 80200ea:	bf00      	nop

080200ec <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80200ec:	b510      	push	{r4, lr}
 80200ee:	4604      	mov	r4, r0
 80200f0:	2104      	movs	r1, #4
 80200f2:	f007 ffc4 	bl	802807e <_ZdlPvj>
 80200f6:	4620      	mov	r0, r4
 80200f8:	bd10      	pop	{r4, pc}
 80200fa:	bf00      	nop

080200fc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80200fc:	b510      	push	{r4, lr}
 80200fe:	4604      	mov	r4, r0
 8020100:	2104      	movs	r1, #4
 8020102:	f007 ffbc 	bl	802807e <_ZdlPvj>
 8020106:	4620      	mov	r0, r4
 8020108:	bd10      	pop	{r4, pc}
 802010a:	bf00      	nop

0802010c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802010c:	b510      	push	{r4, lr}
 802010e:	4604      	mov	r4, r0
 8020110:	2104      	movs	r1, #4
 8020112:	f007 ffb4 	bl	802807e <_ZdlPvj>
 8020116:	4620      	mov	r0, r4
 8020118:	bd10      	pop	{r4, pc}
 802011a:	bf00      	nop

0802011c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802011c:	b510      	push	{r4, lr}
 802011e:	4604      	mov	r4, r0
 8020120:	2104      	movs	r1, #4
 8020122:	f007 ffac 	bl	802807e <_ZdlPvj>
 8020126:	4620      	mov	r0, r4
 8020128:	bd10      	pop	{r4, pc}
 802012a:	bf00      	nop

0802012c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 802012c:	b510      	push	{r4, lr}
 802012e:	4604      	mov	r4, r0
 8020130:	2104      	movs	r1, #4
 8020132:	f007 ffa4 	bl	802807e <_ZdlPvj>
 8020136:	4620      	mov	r0, r4
 8020138:	bd10      	pop	{r4, pc}
 802013a:	bf00      	nop

0802013c <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 802013c:	b510      	push	{r4, lr}
 802013e:	4604      	mov	r4, r0
 8020140:	2104      	movs	r1, #4
 8020142:	f007 ff9c 	bl	802807e <_ZdlPvj>
 8020146:	4620      	mov	r0, r4
 8020148:	bd10      	pop	{r4, pc}
 802014a:	bf00      	nop

0802014c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802014c:	b510      	push	{r4, lr}
 802014e:	4604      	mov	r4, r0
 8020150:	2104      	movs	r1, #4
 8020152:	f007 ff94 	bl	802807e <_ZdlPvj>
 8020156:	4620      	mov	r0, r4
 8020158:	bd10      	pop	{r4, pc}
 802015a:	bf00      	nop

0802015c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802015c:	b510      	push	{r4, lr}
 802015e:	4604      	mov	r4, r0
 8020160:	2104      	movs	r1, #4
 8020162:	f007 ff8c 	bl	802807e <_ZdlPvj>
 8020166:	4620      	mov	r0, r4
 8020168:	bd10      	pop	{r4, pc}
 802016a:	bf00      	nop

0802016c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>:
 802016c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020170:	461c      	mov	r4, r3
 8020172:	4617      	mov	r7, r2
 8020174:	b086      	sub	sp, #24
 8020176:	4606      	mov	r6, r0
 8020178:	4688      	mov	r8, r1
 802017a:	6818      	ldr	r0, [r3, #0]
 802017c:	6859      	ldr	r1, [r3, #4]
 802017e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020180:	ad02      	add	r5, sp, #8
 8020182:	c503      	stmia	r5!, {r0, r1}
 8020184:	6818      	ldr	r0, [r3, #0]
 8020186:	6859      	ldr	r1, [r3, #4]
 8020188:	ad04      	add	r5, sp, #16
 802018a:	c503      	stmia	r5!, {r0, r1}
 802018c:	a802      	add	r0, sp, #8
 802018e:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
 8020192:	f7f7 fad9 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020196:	4621      	mov	r1, r4
 8020198:	a804      	add	r0, sp, #16
 802019a:	f7f7 fafd 	bl	8017798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802019e:	2f01      	cmp	r7, #1
 80201a0:	d05c      	beq.n	802025c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf0>
 80201a2:	d357      	bcc.n	8020254 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xe8>
 80201a4:	2f02      	cmp	r7, #2
 80201a6:	d163      	bne.n	8020270 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x104>
 80201a8:	f04f 0910 	mov.w	r9, #16
 80201ac:	2504      	movs	r5, #4
 80201ae:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80201b2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80201b6:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80201ba:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80201be:	fb14 2403 	smlabb	r4, r4, r3, r2
 80201c2:	4f2e      	ldr	r7, [pc, #184]	; (802027c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x110>)
 80201c4:	440a      	add	r2, r1
 80201c6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80201ca:	6838      	ldr	r0, [r7, #0]
 80201cc:	440b      	add	r3, r1
 80201ce:	fb05 8404 	mla	r4, r5, r4, r8
 80201d2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80201d6:	f8ad 3012 	strh.w	r3, [sp, #18]
 80201da:	2800      	cmp	r0, #0
 80201dc:	d042      	beq.n	8020264 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf8>
 80201de:	f7fd f819 	bl	801d214 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 80201e2:	6833      	ldr	r3, [r6, #0]
 80201e4:	4630      	mov	r0, r6
 80201e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80201e8:	4798      	blx	r3
 80201ea:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80201ee:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80201f2:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80201f6:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80201fa:	f7fa fd15 	bl	801ac28 <nema_set_clip>
 80201fe:	2200      	movs	r2, #0
 8020200:	2600      	movs	r6, #0
 8020202:	4611      	mov	r1, r2
 8020204:	4653      	mov	r3, sl
 8020206:	4610      	mov	r0, r2
 8020208:	f7fa fd42 	bl	801ac90 <nema_rgba>
 802020c:	f7fc ff1a 	bl	801d044 <nema_set_const_color>
 8020210:	f04f 33ff 	mov.w	r3, #4294967295
 8020214:	2201      	movs	r2, #1
 8020216:	2100      	movs	r1, #0
 8020218:	4819      	ldr	r0, [pc, #100]	; (8020280 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x114>)
 802021a:	f7fc fb4d 	bl	801c8b8 <nema_set_blend>
 802021e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8020222:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8020226:	fb05 f503 	mul.w	r5, r5, r3
 802022a:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 802022e:	464b      	mov	r3, r9
 8020230:	4620      	mov	r0, r4
 8020232:	e9cd 5600 	strd	r5, r6, [sp]
 8020236:	f7fa fd33 	bl	801aca0 <nema_bind_src_tex>
 802023a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 802023e:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8020242:	f7fa fe6d 	bl	801af20 <nema_blit>
 8020246:	6838      	ldr	r0, [r7, #0]
 8020248:	b160      	cbz	r0, 8020264 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf8>
 802024a:	f7fd f803 	bl	801d254 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 802024e:	b006      	add	sp, #24
 8020250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020254:	f04f 0904 	mov.w	r9, #4
 8020258:	2502      	movs	r5, #2
 802025a:	e7a8      	b.n	80201ae <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x42>
 802025c:	f04f 0939 	mov.w	r9, #57	; 0x39
 8020260:	2503      	movs	r5, #3
 8020262:	e7a4      	b.n	80201ae <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x42>
 8020264:	4b07      	ldr	r3, [pc, #28]	; (8020284 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x118>)
 8020266:	4a08      	ldr	r2, [pc, #32]	; (8020288 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x11c>)
 8020268:	217c      	movs	r1, #124	; 0x7c
 802026a:	4808      	ldr	r0, [pc, #32]	; (802028c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x120>)
 802026c:	f007 ff34 	bl	80280d8 <__assert_func>
 8020270:	4b07      	ldr	r3, [pc, #28]	; (8020290 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x124>)
 8020272:	4a08      	ldr	r2, [pc, #32]	; (8020294 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x128>)
 8020274:	21c1      	movs	r1, #193	; 0xc1
 8020276:	4808      	ldr	r0, [pc, #32]	; (8020298 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x12c>)
 8020278:	f007 ff2e 	bl	80280d8 <__assert_func>
 802027c:	20198388 	.word	0x20198388
 8020280:	08000504 	.word	0x08000504
 8020284:	0802af18 	.word	0x0802af18
 8020288:	0802b720 	.word	0x0802b720
 802028c:	0802af40 	.word	0x0802af40
 8020290:	0802b364 	.word	0x0802b364
 8020294:	0802c0bc 	.word	0x0802c0bc
 8020298:	0802afbc 	.word	0x0802afbc

0802029c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb>:
 802029c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80202a0:	4c1e      	ldr	r4, [pc, #120]	; (802031c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x80>)
 80202a2:	6806      	ldr	r6, [r0, #0]
 80202a4:	6824      	ldr	r4, [r4, #0]
 80202a6:	4605      	mov	r5, r0
 80202a8:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
 80202ac:	b087      	sub	sp, #28
 80202ae:	6937      	ldr	r7, [r6, #16]
 80202b0:	4690      	mov	r8, r2
 80202b2:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 80202b6:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 80202ba:	b170      	cbz	r0, 80202da <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x3e>
 80202bc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80202be:	b160      	cbz	r0, 80202da <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x3e>
 80202c0:	6804      	ldr	r4, [r0, #0]
 80202c2:	4a17      	ldr	r2, [pc, #92]	; (8020320 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x84>)
 80202c4:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80202c6:	4294      	cmp	r4, r2
 80202c8:	d10d      	bne.n	80202e6 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x4a>
 80202ca:	4c16      	ldr	r4, [pc, #88]	; (8020324 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x88>)
 80202cc:	7a02      	ldrb	r2, [r0, #8]
 80202ce:	42a7      	cmp	r7, r4
 80202d0:	d112      	bne.n	80202f8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x5c>
 80202d2:	b9d6      	cbnz	r6, 802030a <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x6e>
 80202d4:	b007      	add	sp, #28
 80202d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80202da:	68a0      	ldr	r0, [r4, #8]
 80202dc:	4a10      	ldr	r2, [pc, #64]	; (8020320 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x84>)
 80202de:	6804      	ldr	r4, [r0, #0]
 80202e0:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80202e2:	4294      	cmp	r4, r2
 80202e4:	d0f1      	beq.n	80202ca <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x2e>
 80202e6:	e9cd 1304 	strd	r1, r3, [sp, #16]
 80202ea:	47a0      	blx	r4
 80202ec:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
 80202f0:	4c0c      	ldr	r4, [pc, #48]	; (8020324 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x88>)
 80202f2:	4602      	mov	r2, r0
 80202f4:	42a7      	cmp	r7, r4
 80202f6:	d0ec      	beq.n	80202d2 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x36>
 80202f8:	9300      	str	r3, [sp, #0]
 80202fa:	e9cd 6901 	strd	r6, r9, [sp, #4]
 80202fe:	4643      	mov	r3, r8
 8020300:	4628      	mov	r0, r5
 8020302:	47b8      	blx	r7
 8020304:	b007      	add	sp, #28
 8020306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802030a:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
 802030e:	4628      	mov	r0, r5
 8020310:	4643      	mov	r3, r8
 8020312:	b007      	add	sp, #28
 8020314:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020318:	f7ff bf28 	b.w	802016c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>
 802031c:	20198158 	.word	0x20198158
 8020320:	0801d2f9 	.word	0x0801d2f9
 8020324:	08020329 	.word	0x08020329

08020328 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8020328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802032c:	b087      	sub	sp, #28
 802032e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8020332:	b915      	cbnz	r5, 802033a <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x12>
 8020334:	b007      	add	sp, #28
 8020336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802033a:	461c      	mov	r4, r3
 802033c:	4617      	mov	r7, r2
 802033e:	4688      	mov	r8, r1
 8020340:	4606      	mov	r6, r0
 8020342:	6859      	ldr	r1, [r3, #4]
 8020344:	6818      	ldr	r0, [r3, #0]
 8020346:	ab02      	add	r3, sp, #8
 8020348:	c303      	stmia	r3!, {r0, r1}
 802034a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802034c:	6818      	ldr	r0, [r3, #0]
 802034e:	6859      	ldr	r1, [r3, #4]
 8020350:	ab04      	add	r3, sp, #16
 8020352:	c303      	stmia	r3!, {r0, r1}
 8020354:	a802      	add	r0, sp, #8
 8020356:	f7f7 f9f7 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802035a:	4621      	mov	r1, r4
 802035c:	a804      	add	r0, sp, #16
 802035e:	f7f7 fa1b 	bl	8017798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020362:	2f01      	cmp	r7, #1
 8020364:	d05c      	beq.n	8020420 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0xf8>
 8020366:	d357      	bcc.n	8020418 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0xf0>
 8020368:	2f02      	cmp	r7, #2
 802036a:	d163      	bne.n	8020434 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x10c>
 802036c:	f04f 0910 	mov.w	r9, #16
 8020370:	2404      	movs	r4, #4
 8020372:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020376:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802037a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 802037e:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8020382:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020386:	4f2e      	ldr	r7, [pc, #184]	; (8020440 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x118>)
 8020388:	fb04 8801 	mla	r8, r4, r1, r8
 802038c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8020390:	4402      	add	r2, r0
 8020392:	6838      	ldr	r0, [r7, #0]
 8020394:	440b      	add	r3, r1
 8020396:	f8ad 2010 	strh.w	r2, [sp, #16]
 802039a:	f8ad 3012 	strh.w	r3, [sp, #18]
 802039e:	2800      	cmp	r0, #0
 80203a0:	d042      	beq.n	8020428 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x100>
 80203a2:	f7fc ff37 	bl	801d214 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 80203a6:	6833      	ldr	r3, [r6, #0]
 80203a8:	4630      	mov	r0, r6
 80203aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80203ac:	4798      	blx	r3
 80203ae:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80203b2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80203b6:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80203ba:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80203be:	f7fa fc33 	bl	801ac28 <nema_set_clip>
 80203c2:	2200      	movs	r2, #0
 80203c4:	462b      	mov	r3, r5
 80203c6:	2500      	movs	r5, #0
 80203c8:	4611      	mov	r1, r2
 80203ca:	4610      	mov	r0, r2
 80203cc:	f7fa fc60 	bl	801ac90 <nema_rgba>
 80203d0:	f7fc fe38 	bl	801d044 <nema_set_const_color>
 80203d4:	f04f 33ff 	mov.w	r3, #4294967295
 80203d8:	2201      	movs	r2, #1
 80203da:	2100      	movs	r1, #0
 80203dc:	4819      	ldr	r0, [pc, #100]	; (8020444 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x11c>)
 80203de:	f7fc fa6b 	bl	801c8b8 <nema_set_blend>
 80203e2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80203e6:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80203ea:	fb04 f403 	mul.w	r4, r4, r3
 80203ee:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 80203f2:	464b      	mov	r3, r9
 80203f4:	4640      	mov	r0, r8
 80203f6:	e9cd 4500 	strd	r4, r5, [sp]
 80203fa:	f7fa fc51 	bl	801aca0 <nema_bind_src_tex>
 80203fe:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8020402:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8020406:	f7fa fd8b 	bl	801af20 <nema_blit>
 802040a:	6838      	ldr	r0, [r7, #0]
 802040c:	b160      	cbz	r0, 8020428 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x100>
 802040e:	f7fc ff21 	bl	801d254 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8020412:	b007      	add	sp, #28
 8020414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020418:	f04f 0904 	mov.w	r9, #4
 802041c:	2402      	movs	r4, #2
 802041e:	e7a8      	b.n	8020372 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4a>
 8020420:	f04f 0939 	mov.w	r9, #57	; 0x39
 8020424:	2403      	movs	r4, #3
 8020426:	e7a4      	b.n	8020372 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4a>
 8020428:	4b07      	ldr	r3, [pc, #28]	; (8020448 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x120>)
 802042a:	4a08      	ldr	r2, [pc, #32]	; (802044c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x124>)
 802042c:	217c      	movs	r1, #124	; 0x7c
 802042e:	4808      	ldr	r0, [pc, #32]	; (8020450 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x128>)
 8020430:	f007 fe52 	bl	80280d8 <__assert_func>
 8020434:	4b07      	ldr	r3, [pc, #28]	; (8020454 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x12c>)
 8020436:	4a08      	ldr	r2, [pc, #32]	; (8020458 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x130>)
 8020438:	21c1      	movs	r1, #193	; 0xc1
 802043a:	4808      	ldr	r0, [pc, #32]	; (802045c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x134>)
 802043c:	f007 fe4c 	bl	80280d8 <__assert_func>
 8020440:	20198388 	.word	0x20198388
 8020444:	08000504 	.word	0x08000504
 8020448:	0802af18 	.word	0x0802af18
 802044c:	0802b720 	.word	0x0802b720
 8020450:	0802af40 	.word	0x0802af40
 8020454:	0802b364 	.word	0x0802b364
 8020458:	0802c0bc 	.word	0x0802c0bc
 802045c:	0802afbc 	.word	0x0802afbc

08020460 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8020460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020464:	4682      	mov	sl, r0
 8020466:	4851      	ldr	r0, [pc, #324]	; (80205ac <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x14c>)
 8020468:	b08f      	sub	sp, #60	; 0x3c
 802046a:	6800      	ldr	r0, [r0, #0]
 802046c:	9104      	str	r1, [sp, #16]
 802046e:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8020472:	f9bd 0064 	ldrsh.w	r0, [sp, #100]	; 0x64
 8020476:	2902      	cmp	r1, #2
 8020478:	9003      	str	r0, [sp, #12]
 802047a:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
 802047e:	9006      	str	r0, [sp, #24]
 8020480:	f000 81cd 	beq.w	802081e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3be>
 8020484:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020486:	2900      	cmp	r1, #0
 8020488:	f000 81c3 	beq.w	8020812 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3b2>
 802048c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8020490:	8899      	ldrh	r1, [r3, #4]
 8020492:	b2ae      	uxth	r6, r5
 8020494:	4431      	add	r1, r6
 8020496:	b289      	uxth	r1, r1
 8020498:	fa0f fc81 	sxth.w	ip, r1
 802049c:	4565      	cmp	r5, ip
 802049e:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 80204a2:	da28      	bge.n	80204f6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 80204a4:	9803      	ldr	r0, [sp, #12]
 80204a6:	1830      	adds	r0, r6, r0
 80204a8:	b280      	uxth	r0, r0
 80204aa:	9005      	str	r0, [sp, #20]
 80204ac:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 80204b0:	4575      	cmp	r5, lr
 80204b2:	da20      	bge.n	80204f6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 80204b4:	f8b3 8006 	ldrh.w	r8, [r3, #6]
 80204b8:	b2a7      	uxth	r7, r4
 80204ba:	4638      	mov	r0, r7
 80204bc:	4447      	add	r7, r8
 80204be:	b2bf      	uxth	r7, r7
 80204c0:	fa0f f987 	sxth.w	r9, r7
 80204c4:	454c      	cmp	r4, r9
 80204c6:	da16      	bge.n	80204f6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 80204c8:	4680      	mov	r8, r0
 80204ca:	9007      	str	r0, [sp, #28]
 80204cc:	9806      	ldr	r0, [sp, #24]
 80204ce:	4480      	add	r8, r0
 80204d0:	fa1f f888 	uxth.w	r8, r8
 80204d4:	fa0f fb88 	sxth.w	fp, r8
 80204d8:	455c      	cmp	r4, fp
 80204da:	da0c      	bge.n	80204f6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 80204dc:	9805      	ldr	r0, [sp, #20]
 80204de:	45d9      	cmp	r9, fp
 80204e0:	bfc8      	it	gt
 80204e2:	4647      	movgt	r7, r8
 80204e4:	45f4      	cmp	ip, lr
 80204e6:	bfc8      	it	gt
 80204e8:	4601      	movgt	r1, r0
 80204ea:	9807      	ldr	r0, [sp, #28]
 80204ec:	1b89      	subs	r1, r1, r6
 80204ee:	1a3f      	subs	r7, r7, r0
 80204f0:	b209      	sxth	r1, r1
 80204f2:	b23f      	sxth	r7, r7
 80204f4:	e005      	b.n	8020502 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xa2>
 80204f6:	2700      	movs	r7, #0
 80204f8:	463c      	mov	r4, r7
 80204fa:	4639      	mov	r1, r7
 80204fc:	463e      	mov	r6, r7
 80204fe:	463d      	mov	r5, r7
 8020500:	9707      	str	r7, [sp, #28]
 8020502:	f9b2 b000 	ldrsh.w	fp, [r2]
 8020506:	8890      	ldrh	r0, [r2, #4]
 8020508:	4458      	add	r0, fp
 802050a:	b280      	uxth	r0, r0
 802050c:	fa0f fc80 	sxth.w	ip, r0
 8020510:	45ac      	cmp	ip, r5
 8020512:	dd51      	ble.n	80205b8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 8020514:	4431      	add	r1, r6
 8020516:	b289      	uxth	r1, r1
 8020518:	fa0f fe81 	sxth.w	lr, r1
 802051c:	45f3      	cmp	fp, lr
 802051e:	da4b      	bge.n	80205b8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 8020520:	f9b2 8002 	ldrsh.w	r8, [r2, #2]
 8020524:	88d6      	ldrh	r6, [r2, #6]
 8020526:	4446      	add	r6, r8
 8020528:	b2b6      	uxth	r6, r6
 802052a:	fa0f f986 	sxth.w	r9, r6
 802052e:	454c      	cmp	r4, r9
 8020530:	da42      	bge.n	80205b8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 8020532:	9a07      	ldr	r2, [sp, #28]
 8020534:	443a      	add	r2, r7
 8020536:	b297      	uxth	r7, r2
 8020538:	b23a      	sxth	r2, r7
 802053a:	4590      	cmp	r8, r2
 802053c:	9205      	str	r2, [sp, #20]
 802053e:	da3b      	bge.n	80205b8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 8020540:	45ab      	cmp	fp, r5
 8020542:	bfb8      	it	lt
 8020544:	46ab      	movlt	fp, r5
 8020546:	4544      	cmp	r4, r8
 8020548:	bfb8      	it	lt
 802054a:	4644      	movlt	r4, r8
 802054c:	45f4      	cmp	ip, lr
 802054e:	bfc8      	it	gt
 8020550:	4608      	movgt	r0, r1
 8020552:	9905      	ldr	r1, [sp, #20]
 8020554:	465a      	mov	r2, fp
 8020556:	4589      	cmp	r9, r1
 8020558:	bfc8      	it	gt
 802055a:	463e      	movgt	r6, r7
 802055c:	f8df c054 	ldr.w	ip, [pc, #84]	; 80205b4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x154>
 8020560:	4f13      	ldr	r7, [pc, #76]	; (80205b0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x150>)
 8020562:	fa1f f58b 	uxth.w	r5, fp
 8020566:	1b36      	subs	r6, r6, r4
 8020568:	1b41      	subs	r1, r0, r5
 802056a:	f8bc c000 	ldrh.w	ip, [ip]
 802056e:	883f      	ldrh	r7, [r7, #0]
 8020570:	fa0f fb86 	sxth.w	fp, r6
 8020574:	fa0f f981 	sxth.w	r9, r1
 8020578:	2a00      	cmp	r2, #0
 802057a:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 802057e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020582:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
 8020586:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 802058a:	fa0f f68c 	sxth.w	r6, ip
 802058e:	b239      	sxth	r1, r7
 8020590:	f280 812b 	bge.w	80207ea <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x38a>
 8020594:	f04f 0e00 	mov.w	lr, #0
 8020598:	fa0f f980 	sxth.w	r9, r0
 802059c:	4675      	mov	r5, lr
 802059e:	4672      	mov	r2, lr
 80205a0:	4648      	mov	r0, r9
 80205a2:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 80205a6:	f8ad e020 	strh.w	lr, [sp, #32]
 80205aa:	e015      	b.n	80205d8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 80205ac:	20198158 	.word	0x20198158
 80205b0:	2019814e 	.word	0x2019814e
 80205b4:	2019814c 	.word	0x2019814c
 80205b8:	2200      	movs	r2, #0
 80205ba:	48a3      	ldr	r0, [pc, #652]	; (8020848 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3e8>)
 80205bc:	4615      	mov	r5, r2
 80205be:	f8b0 c000 	ldrh.w	ip, [r0]
 80205c2:	4693      	mov	fp, r2
 80205c4:	4614      	mov	r4, r2
 80205c6:	4610      	mov	r0, r2
 80205c8:	4691      	mov	r9, r2
 80205ca:	49a0      	ldr	r1, [pc, #640]	; (802084c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3ec>)
 80205cc:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80205d0:	880f      	ldrh	r7, [r1, #0]
 80205d2:	fa0f f68c 	sxth.w	r6, ip
 80205d6:	b239      	sxth	r1, r7
 80205d8:	1ab2      	subs	r2, r6, r2
 80205da:	4282      	cmp	r2, r0
 80205dc:	da05      	bge.n	80205ea <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x18a>
 80205de:	ebac 0c05 	sub.w	ip, ip, r5
 80205e2:	fa0f f98c 	sxth.w	r9, ip
 80205e6:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 80205ea:	2c00      	cmp	r4, #0
 80205ec:	f2c0 80e8 	blt.w	80207c0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x360>
 80205f0:	4622      	mov	r2, r4
 80205f2:	1a89      	subs	r1, r1, r2
 80205f4:	458b      	cmp	fp, r1
 80205f6:	dd04      	ble.n	8020602 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a2>
 80205f8:	1b3f      	subs	r7, r7, r4
 80205fa:	fa0f fb87 	sxth.w	fp, r7
 80205fe:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 8020602:	f1b9 0f00 	cmp.w	r9, #0
 8020606:	f340 80d2 	ble.w	80207ae <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34e>
 802060a:	f1bb 0f00 	cmp.w	fp, #0
 802060e:	f340 80ce 	ble.w	80207ae <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34e>
 8020612:	2200      	movs	r2, #0
 8020614:	8819      	ldrh	r1, [r3, #0]
 8020616:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 802061a:	9b03      	ldr	r3, [sp, #12]
 802061c:	1a6d      	subs	r5, r5, r1
 802061e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8020622:	eba4 0408 	sub.w	r4, r4, r8
 8020626:	9b06      	ldr	r3, [sp, #24]
 8020628:	a90c      	add	r1, sp, #48	; 0x30
 802062a:	a80a      	add	r0, sp, #40	; 0x28
 802062c:	b22d      	sxth	r5, r5
 802062e:	b224      	sxth	r4, r4
 8020630:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020634:	920c      	str	r2, [sp, #48]	; 0x30
 8020636:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 802063a:	f8ad b02e 	strh.w	fp, [sp, #46]	; 0x2e
 802063e:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8020642:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
 8020646:	f7f7 f8a7 	bl	8017798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802064a:	a808      	add	r0, sp, #32
 802064c:	f7f7 f87c 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020650:	a80c      	add	r0, sp, #48	; 0x30
 8020652:	f7f7 f879 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020656:	4b7e      	ldr	r3, [pc, #504]	; (8020850 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f0>)
 8020658:	681b      	ldr	r3, [r3, #0]
 802065a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 802065e:	2a00      	cmp	r2, #0
 8020660:	f040 80ba 	bne.w	80207d8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x378>
 8020664:	6898      	ldr	r0, [r3, #8]
 8020666:	6803      	ldr	r3, [r0, #0]
 8020668:	4a7a      	ldr	r2, [pc, #488]	; (8020854 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f4>)
 802066a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802066c:	4293      	cmp	r3, r2
 802066e:	f040 80c4 	bne.w	80207fa <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x39a>
 8020672:	7a00      	ldrb	r0, [r0, #8]
 8020674:	2801      	cmp	r0, #1
 8020676:	f000 80ba 	beq.w	80207ee <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x38e>
 802067a:	f0c0 80b2 	bcc.w	80207e2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x382>
 802067e:	2802      	cmp	r0, #2
 8020680:	f040 80da 	bne.w	8020838 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3d8>
 8020684:	2310      	movs	r3, #16
 8020686:	2604      	movs	r6, #4
 8020688:	9305      	str	r3, [sp, #20]
 802068a:	9b04      	ldr	r3, [sp, #16]
 802068c:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8020690:	681b      	ldr	r3, [r3, #0]
 8020692:	fb06 f101 	mul.w	r1, r6, r1
 8020696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020698:	4a6f      	ldr	r2, [pc, #444]	; (8020858 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f8>)
 802069a:	9103      	str	r1, [sp, #12]
 802069c:	4293      	cmp	r3, r2
 802069e:	f040 80ae 	bne.w	80207fe <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x39e>
 80206a2:	4b6e      	ldr	r3, [pc, #440]	; (802085c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3fc>)
 80206a4:	881f      	ldrh	r7, [r3, #0]
 80206a6:	2f00      	cmp	r7, #0
 80206a8:	f000 80bf 	beq.w	802082a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3ca>
 80206ac:	9b04      	ldr	r3, [sp, #16]
 80206ae:	7a1b      	ldrb	r3, [r3, #8]
 80206b0:	2b02      	cmp	r3, #2
 80206b2:	f000 80a0 	beq.w	80207f6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x396>
 80206b6:	2b01      	cmp	r3, #1
 80206b8:	bf14      	ite	ne
 80206ba:	2302      	movne	r3, #2
 80206bc:	2303      	moveq	r3, #3
 80206be:	fb17 f703 	smulbb	r7, r7, r3
 80206c2:	b2bf      	uxth	r7, r7
 80206c4:	4a62      	ldr	r2, [pc, #392]	; (8020850 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f0>)
 80206c6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80206ca:	6810      	ldr	r0, [r2, #0]
 80206cc:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 80206d0:	9a03      	ldr	r2, [sp, #12]
 80206d2:	fb02 3808 	mla	r8, r2, r8, r3
 80206d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80206d8:	6803      	ldr	r3, [r0, #0]
 80206da:	4442      	add	r2, r8
 80206dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80206de:	9204      	str	r2, [sp, #16]
 80206e0:	4798      	blx	r3
 80206e2:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80206e6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80206ea:	fb07 f202 	mul.w	r2, r7, r2
 80206ee:	fb06 2303 	mla	r3, r6, r3, r2
 80206f2:	f8df 8198 	ldr.w	r8, [pc, #408]	; 802088c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x42c>
 80206f6:	18c3      	adds	r3, r0, r3
 80206f8:	f8d8 2000 	ldr.w	r2, [r8]
 80206fc:	9306      	str	r3, [sp, #24]
 80206fe:	2a00      	cmp	r2, #0
 8020700:	f000 8081 	beq.w	8020806 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 8020704:	2600      	movs	r6, #0
 8020706:	4610      	mov	r0, r2
 8020708:	f7fc fd84 	bl	801d214 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 802070c:	9b03      	ldr	r3, [sp, #12]
 802070e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8020712:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 8020716:	9300      	str	r3, [sp, #0]
 8020718:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 802071c:	f7fa fb38 	bl	801ad90 <nema_bind_dst_tex>
 8020720:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8020724:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8020728:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 802072c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8020730:	f7fa fa7a 	bl	801ac28 <nema_set_clip>
 8020734:	f04f 33ff 	mov.w	r3, #4294967295
 8020738:	2201      	movs	r2, #1
 802073a:	4631      	mov	r1, r6
 802073c:	f240 5004 	movw	r0, #1284	; 0x504
 8020740:	f7fc f8ba 	bl	801c8b8 <nema_set_blend>
 8020744:	e9dd 3005 	ldrd	r3, r0, [sp, #20]
 8020748:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 802074c:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 8020750:	9700      	str	r7, [sp, #0]
 8020752:	9601      	str	r6, [sp, #4]
 8020754:	f7fa faa4 	bl	801aca0 <nema_bind_src_tex>
 8020758:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 802075c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8020760:	f7fa fbde 	bl	801af20 <nema_blit>
 8020764:	f8d8 0000 	ldr.w	r0, [r8]
 8020768:	2800      	cmp	r0, #0
 802076a:	d04c      	beq.n	8020806 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 802076c:	f7fc fd72 	bl	801d254 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8020770:	f8d8 0000 	ldr.w	r0, [r8]
 8020774:	2800      	cmp	r0, #0
 8020776:	d046      	beq.n	8020806 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 8020778:	6803      	ldr	r3, [r0, #0]
 802077a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802077c:	4798      	blx	r3
 802077e:	f8d8 0000 	ldr.w	r0, [r8]
 8020782:	2800      	cmp	r0, #0
 8020784:	d03f      	beq.n	8020806 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 8020786:	6803      	ldr	r3, [r0, #0]
 8020788:	4637      	mov	r7, r6
 802078a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802078c:	4798      	blx	r3
 802078e:	4650      	mov	r0, sl
 8020790:	f365 060f 	bfi	r6, r5, #0, #16
 8020794:	f369 070f 	bfi	r7, r9, #0, #16
 8020798:	f364 461f 	bfi	r6, r4, #16, #16
 802079c:	f36b 471f 	bfi	r7, fp, #16, #16
 80207a0:	f8ca 6000 	str.w	r6, [sl]
 80207a4:	f8ca 7004 	str.w	r7, [sl, #4]
 80207a8:	b00f      	add	sp, #60	; 0x3c
 80207aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207ae:	2300      	movs	r3, #0
 80207b0:	4650      	mov	r0, sl
 80207b2:	f8ca 3000 	str.w	r3, [sl]
 80207b6:	f8ca 3004 	str.w	r3, [sl, #4]
 80207ba:	b00f      	add	sp, #60	; 0x3c
 80207bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207c0:	2000      	movs	r0, #0
 80207c2:	eb0b 0604 	add.w	r6, fp, r4
 80207c6:	fa0f fb86 	sxth.w	fp, r6
 80207ca:	4604      	mov	r4, r0
 80207cc:	4602      	mov	r2, r0
 80207ce:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 80207d2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80207d6:	e70c      	b.n	80205f2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x192>
 80207d8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80207da:	2800      	cmp	r0, #0
 80207dc:	f47f af43 	bne.w	8020666 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x206>
 80207e0:	e740      	b.n	8020664 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x204>
 80207e2:	2304      	movs	r3, #4
 80207e4:	2602      	movs	r6, #2
 80207e6:	9305      	str	r3, [sp, #20]
 80207e8:	e74f      	b.n	802068a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22a>
 80207ea:	4648      	mov	r0, r9
 80207ec:	e6f4      	b.n	80205d8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 80207ee:	2339      	movs	r3, #57	; 0x39
 80207f0:	2603      	movs	r6, #3
 80207f2:	9305      	str	r3, [sp, #20]
 80207f4:	e749      	b.n	802068a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22a>
 80207f6:	2304      	movs	r3, #4
 80207f8:	e761      	b.n	80206be <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x25e>
 80207fa:	4798      	blx	r3
 80207fc:	e73a      	b.n	8020674 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>
 80207fe:	9804      	ldr	r0, [sp, #16]
 8020800:	4798      	blx	r3
 8020802:	4607      	mov	r7, r0
 8020804:	e75e      	b.n	80206c4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x264>
 8020806:	4b16      	ldr	r3, [pc, #88]	; (8020860 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x400>)
 8020808:	4a16      	ldr	r2, [pc, #88]	; (8020864 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x404>)
 802080a:	217c      	movs	r1, #124	; 0x7c
 802080c:	4816      	ldr	r0, [pc, #88]	; (8020868 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x408>)
 802080e:	f007 fc63 	bl	80280d8 <__assert_func>
 8020812:	4b16      	ldr	r3, [pc, #88]	; (802086c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x40c>)
 8020814:	4a16      	ldr	r2, [pc, #88]	; (8020870 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 8020816:	21f1      	movs	r1, #241	; 0xf1
 8020818:	4816      	ldr	r0, [pc, #88]	; (8020874 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 802081a:	f007 fc5d 	bl	80280d8 <__assert_func>
 802081e:	4b16      	ldr	r3, [pc, #88]	; (8020878 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x418>)
 8020820:	4a13      	ldr	r2, [pc, #76]	; (8020870 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 8020822:	21f0      	movs	r1, #240	; 0xf0
 8020824:	4813      	ldr	r0, [pc, #76]	; (8020874 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 8020826:	f007 fc57 	bl	80280d8 <__assert_func>
 802082a:	4b14      	ldr	r3, [pc, #80]	; (802087c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x41c>)
 802082c:	4a14      	ldr	r2, [pc, #80]	; (8020880 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x420>)
 802082e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8020832:	4814      	ldr	r0, [pc, #80]	; (8020884 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x424>)
 8020834:	f007 fc50 	bl	80280d8 <__assert_func>
 8020838:	4b13      	ldr	r3, [pc, #76]	; (8020888 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x428>)
 802083a:	4a0d      	ldr	r2, [pc, #52]	; (8020870 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 802083c:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8020840:	480c      	ldr	r0, [pc, #48]	; (8020874 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 8020842:	f007 fc49 	bl	80280d8 <__assert_func>
 8020846:	bf00      	nop
 8020848:	2019814c 	.word	0x2019814c
 802084c:	2019814e 	.word	0x2019814e
 8020850:	20198158 	.word	0x20198158
 8020854:	0801d2f9 	.word	0x0801d2f9
 8020858:	0801eed9 	.word	0x0801eed9
 802085c:	20198152 	.word	0x20198152
 8020860:	0802af18 	.word	0x0802af18
 8020864:	0802b720 	.word	0x0802b720
 8020868:	0802af40 	.word	0x0802af40
 802086c:	0802b214 	.word	0x0802b214
 8020870:	0802bfa0 	.word	0x0802bfa0
 8020874:	0802afbc 	.word	0x0802afbc
 8020878:	0802b160 	.word	0x0802b160
 802087c:	0802b490 	.word	0x0802b490
 8020880:	0802c24c 	.word	0x0802c24c
 8020884:	0802b4d4 	.word	0x0802b4d4
 8020888:	0802b264 	.word	0x0802b264
 802088c:	20198388 	.word	0x20198388

08020890 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8020890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020894:	b085      	sub	sp, #20
 8020896:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802089a:	e9dd 950e 	ldrd	r9, r5, [sp, #56]	; 0x38
 802089e:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 80208a2:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 80208a6:	2e00      	cmp	r6, #0
 80208a8:	d05b      	beq.n	8020962 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 80208aa:	f9b5 e004 	ldrsh.w	lr, [r5, #4]
 80208ae:	f1be 0f00 	cmp.w	lr, #0
 80208b2:	dd56      	ble.n	8020962 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 80208b4:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 80208b8:	f1be 0f00 	cmp.w	lr, #0
 80208bc:	dd51      	ble.n	8020962 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 80208be:	f3c8 0b87 	ubfx	fp, r8, #2, #8
 80208c2:	f1bb 0f0b 	cmp.w	fp, #11
 80208c6:	f000 8165 	beq.w	8020b94 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x304>
 80208ca:	f1bb 0f0d 	cmp.w	fp, #13
 80208ce:	4684      	mov	ip, r0
 80208d0:	4614      	mov	r4, r2
 80208d2:	461f      	mov	r7, r3
 80208d4:	d03c      	beq.n	8020950 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xc0>
 80208d6:	f8df a368 	ldr.w	sl, [pc, #872]	; 8020c40 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3b0>
 80208da:	f8da 0000 	ldr.w	r0, [sl]
 80208de:	2800      	cmp	r0, #0
 80208e0:	f000 818d 	beq.w	8020bfe <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80208e4:	f8cd c00c 	str.w	ip, [sp, #12]
 80208e8:	f7fc fc94 	bl	801d214 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 80208ec:	9b03      	ldr	r3, [sp, #12]
 80208ee:	681a      	ldr	r2, [r3, #0]
 80208f0:	4618      	mov	r0, r3
 80208f2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80208f4:	4798      	blx	r3
 80208f6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80208fa:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80208fe:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8020902:	f9b5 0000 	ldrsh.w	r0, [r5]
 8020906:	f7fa f98f 	bl	801ac28 <nema_set_clip>
 802090a:	2200      	movs	r2, #0
 802090c:	4633      	mov	r3, r6
 802090e:	4611      	mov	r1, r2
 8020910:	4610      	mov	r0, r2
 8020912:	f7fa f9bd 	bl	801ac90 <nema_rgba>
 8020916:	f7fc fb95 	bl	801d044 <nema_set_const_color>
 802091a:	f04f 33ff 	mov.w	r3, #4294967295
 802091e:	2201      	movs	r2, #1
 8020920:	2100      	movs	r1, #0
 8020922:	48bd      	ldr	r0, [pc, #756]	; (8020c18 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x388>)
 8020924:	f7fb ffc8 	bl	801c8b8 <nema_set_blend>
 8020928:	f1bb 0f0d 	cmp.w	fp, #13
 802092c:	f200 816d 	bhi.w	8020c0a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x37a>
 8020930:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8020934:	00c700d3 	.word	0x00c700d3
 8020938:	016b00dc 	.word	0x016b00dc
 802093c:	016b016b 	.word	0x016b016b
 8020940:	016b016b 	.word	0x016b016b
 8020944:	016b016b 	.word	0x016b016b
 8020948:	016b016b 	.word	0x016b016b
 802094c:	001a00b2 	.word	0x001a00b2
 8020950:	685b      	ldr	r3, [r3, #4]
 8020952:	b133      	cbz	r3, 8020962 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 8020954:	781b      	ldrb	r3, [r3, #0]
 8020956:	f1a3 0216 	sub.w	r2, r3, #22
 802095a:	2a01      	cmp	r2, #1
 802095c:	d9bb      	bls.n	80208d6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x46>
 802095e:	2b12      	cmp	r3, #18
 8020960:	d0b9      	beq.n	80208d6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x46>
 8020962:	b005      	add	sp, #20
 8020964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020968:	f04f 36ff 	mov.w	r6, #4294967295
 802096c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020970:	687b      	ldr	r3, [r7, #4]
 8020972:	6838      	ldr	r0, [r7, #0]
 8020974:	781b      	ldrb	r3, [r3, #0]
 8020976:	f008 0501 	and.w	r5, r8, #1
 802097a:	e9cd 6500 	strd	r6, r5, [sp]
 802097e:	f7fa f98f 	bl	801aca0 <nema_bind_src_tex>
 8020982:	2001      	movs	r0, #1
 8020984:	f7fa ffbc 	bl	801b900 <nema_enable_tiling>
 8020988:	2300      	movs	r3, #0
 802098a:	461a      	mov	r2, r3
 802098c:	4619      	mov	r1, r3
 802098e:	4618      	mov	r0, r3
 8020990:	f7fa ffca 	bl	801b928 <nema_enable_aa>
 8020994:	f9b9 3000 	ldrsh.w	r3, [r9]
 8020998:	edd4 7a00 	vldr	s15, [r4]
 802099c:	ee02 3a10 	vmov	s4, r3
 80209a0:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 80209a4:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 80209a8:	ee02 3a90 	vmov	s5, r3
 80209ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80209b0:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8020c1c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 80209b4:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80209b8:	edd4 7a01 	vldr	s15, [r4, #4]
 80209bc:	eeb0 0a42 	vmov.f32	s0, s4
 80209c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80209c4:	eea7 0a26 	vfma.f32	s0, s14, s13
 80209c8:	eef0 0a62 	vmov.f32	s1, s5
 80209cc:	ed94 7a03 	vldr	s14, [r4, #12]
 80209d0:	4b93      	ldr	r3, [pc, #588]	; (8020c20 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x390>)
 80209d2:	eee7 0aa6 	vfma.f32	s1, s15, s13
 80209d6:	781b      	ldrb	r3, [r3, #0]
 80209d8:	edd4 7a04 	vldr	s15, [r4, #16]
 80209dc:	2b01      	cmp	r3, #1
 80209de:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80209e2:	f000 808c 	beq.w	8020afe <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x26e>
 80209e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80209ee:	f240 80ea 	bls.w	8020bc6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80209f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209f6:	bf94      	ite	ls
 80209f8:	2001      	movls	r0, #1
 80209fa:	2002      	movhi	r0, #2
 80209fc:	edd4 7a05 	vldr	s15, [r4, #20]
 8020a00:	ed94 6a08 	vldr	s12, [r4, #32]
 8020a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020a08:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8020a0c:	edd4 7a06 	vldr	s15, [r4, #24]
 8020a10:	eddf 6a82 	vldr	s13, [pc, #520]	; 8020c1c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8020a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020a18:	eeb0 1a42 	vmov.f32	s2, s4
 8020a1c:	eef0 1a62 	vmov.f32	s3, s5
 8020a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a24:	eee7 1aa6 	vfma.f32	s3, s15, s13
 8020a28:	eea7 1a26 	vfma.f32	s2, s14, s13
 8020a2c:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8020a30:	f240 80c1 	bls.w	8020bb6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x326>
 8020a34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a3c:	bf94      	ite	ls
 8020a3e:	2101      	movls	r1, #1
 8020a40:	2102      	movhi	r1, #2
 8020a42:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8020a46:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8020a4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020a4e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8020a52:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8020a56:	eddf 6a71 	vldr	s13, [pc, #452]	; 8020c1c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8020a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a62:	eee7 2aa6 	vfma.f32	s5, s15, s13
 8020a66:	eea7 2a26 	vfma.f32	s4, s14, s13
 8020a6a:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8020a6e:	f240 809a 	bls.w	8020ba6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x316>
 8020a72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a7a:	bf94      	ite	ls
 8020a7c:	2201      	movls	r2, #1
 8020a7e:	2202      	movhi	r2, #2
 8020a80:	f7fa fb44 	bl	801b10c <nema_blit_tri_fit>
 8020a84:	f8da 0000 	ldr.w	r0, [sl]
 8020a88:	2800      	cmp	r0, #0
 8020a8a:	f000 80b8 	beq.w	8020bfe <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8020a8e:	b005      	add	sp, #20
 8020a90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a94:	f7fc bbde 	b.w	801d254 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8020a98:	4a62      	ldr	r2, [pc, #392]	; (8020c24 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x394>)
 8020a9a:	23ff      	movs	r3, #255	; 0xff
 8020a9c:	6810      	ldr	r0, [r2, #0]
 8020a9e:	f008 0501 	and.w	r5, r8, #1
 8020aa2:	b2c2      	uxtb	r2, r0
 8020aa4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8020aa8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8020aac:	f7fa f8f0 	bl	801ac90 <nema_rgba>
 8020ab0:	f7fa f8ae 	bl	801ac10 <nema_set_tex_color>
 8020ab4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020ab8:	6838      	ldr	r0, [r7, #0]
 8020aba:	2329      	movs	r3, #41	; 0x29
 8020abc:	f04f 36ff 	mov.w	r6, #4294967295
 8020ac0:	e75b      	b.n	802097a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 8020ac2:	2339      	movs	r3, #57	; 0x39
 8020ac4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020ac8:	f04f 0c03 	mov.w	ip, #3
 8020acc:	6838      	ldr	r0, [r7, #0]
 8020ace:	f008 0501 	and.w	r5, r8, #1
 8020ad2:	693e      	ldr	r6, [r7, #16]
 8020ad4:	fb06 f60c 	mul.w	r6, r6, ip
 8020ad8:	e74f      	b.n	802097a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 8020ada:	f008 0501 	and.w	r5, r8, #1
 8020ade:	6838      	ldr	r0, [r7, #0]
 8020ae0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020ae4:	2304      	movs	r3, #4
 8020ae6:	f04f 0c02 	mov.w	ip, #2
 8020aea:	e7f2      	b.n	8020ad2 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x242>
 8020aec:	2310      	movs	r3, #16
 8020aee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020af2:	f04f 0c04 	mov.w	ip, #4
 8020af6:	6838      	ldr	r0, [r7, #0]
 8020af8:	f008 0501 	and.w	r5, r8, #1
 8020afc:	e7e9      	b.n	8020ad2 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x242>
 8020afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020b06:	d974      	bls.n	8020bf2 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x362>
 8020b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b0c:	bf94      	ite	ls
 8020b0e:	2002      	movls	r0, #2
 8020b10:	2003      	movhi	r0, #3
 8020b12:	edd4 7a05 	vldr	s15, [r4, #20]
 8020b16:	ed94 6a08 	vldr	s12, [r4, #32]
 8020b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020b1e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8020b22:	edd4 7a06 	vldr	s15, [r4, #24]
 8020b26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8020c1c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8020b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020b2e:	eeb0 1a42 	vmov.f32	s2, s4
 8020b32:	eef0 1a62 	vmov.f32	s3, s5
 8020b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b3a:	eee7 1aa6 	vfma.f32	s3, s15, s13
 8020b3e:	eea7 1a26 	vfma.f32	s2, s14, s13
 8020b42:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8020b46:	d94c      	bls.n	8020be2 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x352>
 8020b48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b50:	bf94      	ite	ls
 8020b52:	2102      	movls	r1, #2
 8020b54:	2103      	movhi	r1, #3
 8020b56:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8020b5a:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8020b5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020b62:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8020b66:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8020b6a:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8020c1c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8020b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b76:	eee7 2aa6 	vfma.f32	s5, s15, s13
 8020b7a:	eea7 2a26 	vfma.f32	s4, s14, s13
 8020b7e:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8020b82:	d926      	bls.n	8020bd2 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8020b84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b8c:	bf94      	ite	ls
 8020b8e:	2202      	movls	r2, #2
 8020b90:	2203      	movhi	r2, #3
 8020b92:	e775      	b.n	8020a80 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 8020b94:	e9cd 6a11 	strd	r6, sl, [sp, #68]	; 0x44
 8020b98:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8020b9c:	b005      	add	sp, #20
 8020b9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ba2:	f7f6 b887 	b.w	8016cb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 8020ba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bae:	bf94      	ite	ls
 8020bb0:	2200      	movls	r2, #0
 8020bb2:	2203      	movhi	r2, #3
 8020bb4:	e764      	b.n	8020a80 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 8020bb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bbe:	bf94      	ite	ls
 8020bc0:	2100      	movls	r1, #0
 8020bc2:	2103      	movhi	r1, #3
 8020bc4:	e73d      	b.n	8020a42 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1b2>
 8020bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bca:	bf94      	ite	ls
 8020bcc:	2000      	movls	r0, #0
 8020bce:	2003      	movhi	r0, #3
 8020bd0:	e714      	b.n	80209fc <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x16c>
 8020bd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bda:	bf94      	ite	ls
 8020bdc:	2201      	movls	r2, #1
 8020bde:	2200      	movhi	r2, #0
 8020be0:	e74e      	b.n	8020a80 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 8020be2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bea:	bf94      	ite	ls
 8020bec:	2101      	movls	r1, #1
 8020bee:	2100      	movhi	r1, #0
 8020bf0:	e7b1      	b.n	8020b56 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c6>
 8020bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bf6:	bf94      	ite	ls
 8020bf8:	2001      	movls	r0, #1
 8020bfa:	2000      	movhi	r0, #0
 8020bfc:	e789      	b.n	8020b12 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x282>
 8020bfe:	4b0a      	ldr	r3, [pc, #40]	; (8020c28 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x398>)
 8020c00:	4a0a      	ldr	r2, [pc, #40]	; (8020c2c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x39c>)
 8020c02:	217c      	movs	r1, #124	; 0x7c
 8020c04:	480a      	ldr	r0, [pc, #40]	; (8020c30 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a0>)
 8020c06:	f007 fa67 	bl	80280d8 <__assert_func>
 8020c0a:	4b0a      	ldr	r3, [pc, #40]	; (8020c34 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a4>)
 8020c0c:	4a0a      	ldr	r2, [pc, #40]	; (8020c38 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>)
 8020c0e:	f240 21d3 	movw	r1, #723	; 0x2d3
 8020c12:	480a      	ldr	r0, [pc, #40]	; (8020c3c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ac>)
 8020c14:	f007 fa60 	bl	80280d8 <__assert_func>
 8020c18:	08000504 	.word	0x08000504
 8020c1c:	3d800000 	.word	0x3d800000
 8020c20:	20198150 	.word	0x20198150
 8020c24:	20198160 	.word	0x20198160
 8020c28:	0802af18 	.word	0x0802af18
 8020c2c:	0802b720 	.word	0x0802b720
 8020c30:	0802af40 	.word	0x0802af40
 8020c34:	0802ae10 	.word	0x0802ae10
 8020c38:	0802bac4 	.word	0x0802bac4
 8020c3c:	0802afbc 	.word	0x0802afbc
 8020c40:	20198388 	.word	0x20198388

08020c44 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8020c44:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8020c48:	2700      	movs	r7, #0
 8020c4a:	4a2b      	ldr	r2, [pc, #172]	; (8020cf8 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xb4>)
 8020c4c:	4b2b      	ldr	r3, [pc, #172]	; (8020cfc <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xb8>)
 8020c4e:	4d2c      	ldr	r5, [pc, #176]	; (8020d00 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xbc>)
 8020c50:	8812      	ldrh	r2, [r2, #0]
 8020c52:	881b      	ldrh	r3, [r3, #0]
 8020c54:	b088      	sub	sp, #32
 8020c56:	4604      	mov	r4, r0
 8020c58:	6828      	ldr	r0, [r5, #0]
 8020c5a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8020c5e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020c62:	9706      	str	r7, [sp, #24]
 8020c64:	6803      	ldr	r3, [r0, #0]
 8020c66:	4689      	mov	r9, r1
 8020c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c6a:	4798      	blx	r3
 8020c6c:	6823      	ldr	r3, [r4, #0]
 8020c6e:	4a25      	ldr	r2, [pc, #148]	; (8020d04 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc0>)
 8020c70:	68de      	ldr	r6, [r3, #12]
 8020c72:	4601      	mov	r1, r0
 8020c74:	4296      	cmp	r6, r2
 8020c76:	d134      	bne.n	8020ce2 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x9e>
 8020c78:	682a      	ldr	r2, [r5, #0]
 8020c7a:	691d      	ldr	r5, [r3, #16]
 8020c7c:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8020c80:	b9a3      	cbnz	r3, 8020cac <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x68>
 8020c82:	6890      	ldr	r0, [r2, #8]
 8020c84:	4a20      	ldr	r2, [pc, #128]	; (8020d08 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc4>)
 8020c86:	6803      	ldr	r3, [r0, #0]
 8020c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020c8a:	4293      	cmp	r3, r2
 8020c8c:	d116      	bne.n	8020cbc <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x78>
 8020c8e:	4b1f      	ldr	r3, [pc, #124]	; (8020d0c <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc8>)
 8020c90:	7a02      	ldrb	r2, [r0, #8]
 8020c92:	429d      	cmp	r5, r3
 8020c94:	d119      	bne.n	8020cca <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8020c96:	23ff      	movs	r3, #255	; 0xff
 8020c98:	f8cd 9000 	str.w	r9, [sp]
 8020c9c:	9301      	str	r3, [sp, #4]
 8020c9e:	4620      	mov	r0, r4
 8020ca0:	ab06      	add	r3, sp, #24
 8020ca2:	f7ff fa63 	bl	802016c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>
 8020ca6:	b008      	add	sp, #32
 8020ca8:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8020cac:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8020cae:	2800      	cmp	r0, #0
 8020cb0:	d0e7      	beq.n	8020c82 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x3e>
 8020cb2:	6803      	ldr	r3, [r0, #0]
 8020cb4:	4a14      	ldr	r2, [pc, #80]	; (8020d08 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc4>)
 8020cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020cb8:	4293      	cmp	r3, r2
 8020cba:	d0e8      	beq.n	8020c8e <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x4a>
 8020cbc:	9105      	str	r1, [sp, #20]
 8020cbe:	4798      	blx	r3
 8020cc0:	4b12      	ldr	r3, [pc, #72]	; (8020d0c <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc8>)
 8020cc2:	4602      	mov	r2, r0
 8020cc4:	429d      	cmp	r5, r3
 8020cc6:	9905      	ldr	r1, [sp, #20]
 8020cc8:	d0e5      	beq.n	8020c96 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x52>
 8020cca:	2600      	movs	r6, #0
 8020ccc:	23ff      	movs	r3, #255	; 0xff
 8020cce:	f8cd 9000 	str.w	r9, [sp]
 8020cd2:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8020cd6:	4620      	mov	r0, r4
 8020cd8:	ab06      	add	r3, sp, #24
 8020cda:	47a8      	blx	r5
 8020cdc:	b008      	add	sp, #32
 8020cde:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8020ce2:	22ff      	movs	r2, #255	; 0xff
 8020ce4:	9701      	str	r7, [sp, #4]
 8020ce6:	9200      	str	r2, [sp, #0]
 8020ce8:	464b      	mov	r3, r9
 8020cea:	4620      	mov	r0, r4
 8020cec:	aa06      	add	r2, sp, #24
 8020cee:	47b0      	blx	r6
 8020cf0:	b008      	add	sp, #32
 8020cf2:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8020cf6:	bf00      	nop
 8020cf8:	20198152 	.word	0x20198152
 8020cfc:	20198154 	.word	0x20198154
 8020d00:	20198158 	.word	0x20198158
 8020d04:	0802029d 	.word	0x0802029d
 8020d08:	0801d2f9 	.word	0x0801d2f9
 8020d0c:	08020329 	.word	0x08020329

08020d10 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d14:	4604      	mov	r4, r0
 8020d16:	4865      	ldr	r0, [pc, #404]	; (8020eac <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19c>)
 8020d18:	460f      	mov	r7, r1
 8020d1a:	6800      	ldr	r0, [r0, #0]
 8020d1c:	b093      	sub	sp, #76	; 0x4c
 8020d1e:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8020d22:	2902      	cmp	r1, #2
 8020d24:	f000 81f2 	beq.w	802110c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3fc>
 8020d28:	f10d 0948 	add.w	r9, sp, #72	; 0x48
 8020d2c:	f829 3d1c 	strh.w	r3, [r9, #-28]!
 8020d30:	4648      	mov	r0, r9
 8020d32:	4615      	mov	r5, r2
 8020d34:	f7f9 fbbc 	bl	801a4b0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020d38:	6823      	ldr	r3, [r4, #0]
 8020d3a:	4a5d      	ldr	r2, [pc, #372]	; (8020eb0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a0>)
 8020d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020d3e:	4680      	mov	r8, r0
 8020d40:	4293      	cmp	r3, r2
 8020d42:	f040 81b5 	bne.w	80210b0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3a0>
 8020d46:	7a20      	ldrb	r0, [r4, #8]
 8020d48:	4580      	cmp	r8, r0
 8020d4a:	f040 81d9 	bne.w	8021100 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3f0>
 8020d4e:	4648      	mov	r0, r9
 8020d50:	f7f9 fb2a 	bl	801a3a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020d54:	4683      	mov	fp, r0
 8020d56:	2800      	cmp	r0, #0
 8020d58:	f000 81cc 	beq.w	80210f4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3e4>
 8020d5c:	6823      	ldr	r3, [r4, #0]
 8020d5e:	4648      	mov	r0, r9
 8020d60:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8020d64:	f7f9 fab8 	bl	801a2d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020d68:	9005      	str	r0, [sp, #20]
 8020d6a:	4648      	mov	r0, r9
 8020d6c:	f7f9 fae8 	bl	801a340 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020d70:	4b50      	ldr	r3, [pc, #320]	; (8020eb4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a4>)
 8020d72:	9006      	str	r0, [sp, #24]
 8020d74:	4598      	cmp	r8, r3
 8020d76:	f040 818e 	bne.w	8021096 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x386>
 8020d7a:	4b4c      	ldr	r3, [pc, #304]	; (8020eac <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19c>)
 8020d7c:	681b      	ldr	r3, [r3, #0]
 8020d7e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8020d82:	2b02      	cmp	r3, #2
 8020d84:	f000 81c8 	beq.w	8021118 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x408>
 8020d88:	f9b5 8000 	ldrsh.w	r8, [r5]
 8020d8c:	88ab      	ldrh	r3, [r5, #4]
 8020d8e:	fa1f fe88 	uxth.w	lr, r8
 8020d92:	4473      	add	r3, lr
 8020d94:	b29b      	uxth	r3, r3
 8020d96:	b218      	sxth	r0, r3
 8020d98:	4580      	cmp	r8, r0
 8020d9a:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
 8020d9e:	da2a      	bge.n	8020df6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8020da0:	9a05      	ldr	r2, [sp, #20]
 8020da2:	eb0e 0102 	add.w	r1, lr, r2
 8020da6:	b28a      	uxth	r2, r1
 8020da8:	9207      	str	r2, [sp, #28]
 8020daa:	f9bd c01c 	ldrsh.w	ip, [sp, #28]
 8020dae:	45e0      	cmp	r8, ip
 8020db0:	da21      	bge.n	8020df6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8020db2:	88ea      	ldrh	r2, [r5, #6]
 8020db4:	fa1f f68a 	uxth.w	r6, sl
 8020db8:	4432      	add	r2, r6
 8020dba:	b292      	uxth	r2, r2
 8020dbc:	b211      	sxth	r1, r2
 8020dbe:	458a      	cmp	sl, r1
 8020dc0:	9108      	str	r1, [sp, #32]
 8020dc2:	da18      	bge.n	8020df6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8020dc4:	9906      	ldr	r1, [sp, #24]
 8020dc6:	eb06 0901 	add.w	r9, r6, r1
 8020dca:	fa1f f989 	uxth.w	r9, r9
 8020dce:	fa0f f189 	sxth.w	r1, r9
 8020dd2:	458a      	cmp	sl, r1
 8020dd4:	9109      	str	r1, [sp, #36]	; 0x24
 8020dd6:	da0e      	bge.n	8020df6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8020dd8:	9907      	ldr	r1, [sp, #28]
 8020dda:	4560      	cmp	r0, ip
 8020ddc:	bfc8      	it	gt
 8020dde:	460b      	movgt	r3, r1
 8020de0:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8020de4:	4281      	cmp	r1, r0
 8020de6:	bfc8      	it	gt
 8020de8:	464a      	movgt	r2, r9
 8020dea:	eba3 030e 	sub.w	r3, r3, lr
 8020dee:	1b92      	subs	r2, r2, r6
 8020df0:	b21b      	sxth	r3, r3
 8020df2:	b212      	sxth	r2, r2
 8020df4:	e005      	b.n	8020e02 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xf2>
 8020df6:	2200      	movs	r2, #0
 8020df8:	4616      	mov	r6, r2
 8020dfa:	4692      	mov	sl, r2
 8020dfc:	4613      	mov	r3, r2
 8020dfe:	4696      	mov	lr, r2
 8020e00:	4690      	mov	r8, r2
 8020e02:	f9b7 0000 	ldrsh.w	r0, [r7]
 8020e06:	88b9      	ldrh	r1, [r7, #4]
 8020e08:	4401      	add	r1, r0
 8020e0a:	b289      	uxth	r1, r1
 8020e0c:	fa0f f981 	sxth.w	r9, r1
 8020e10:	45c8      	cmp	r8, r9
 8020e12:	da55      	bge.n	8020ec0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8020e14:	449e      	add	lr, r3
 8020e16:	fa1f fe8e 	uxth.w	lr, lr
 8020e1a:	fa0f f38e 	sxth.w	r3, lr
 8020e1e:	4298      	cmp	r0, r3
 8020e20:	9307      	str	r3, [sp, #28]
 8020e22:	da4d      	bge.n	8020ec0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8020e24:	f9b7 c002 	ldrsh.w	ip, [r7, #2]
 8020e28:	88fb      	ldrh	r3, [r7, #6]
 8020e2a:	4463      	add	r3, ip
 8020e2c:	b29b      	uxth	r3, r3
 8020e2e:	b21f      	sxth	r7, r3
 8020e30:	45ba      	cmp	sl, r7
 8020e32:	da45      	bge.n	8020ec0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8020e34:	4416      	add	r6, r2
 8020e36:	b2b2      	uxth	r2, r6
 8020e38:	b216      	sxth	r6, r2
 8020e3a:	45b4      	cmp	ip, r6
 8020e3c:	9608      	str	r6, [sp, #32]
 8020e3e:	da3f      	bge.n	8020ec0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8020e40:	4540      	cmp	r0, r8
 8020e42:	9e07      	ldr	r6, [sp, #28]
 8020e44:	bfb8      	it	lt
 8020e46:	4640      	movlt	r0, r8
 8020e48:	45d4      	cmp	ip, sl
 8020e4a:	bfb8      	it	lt
 8020e4c:	46d4      	movlt	ip, sl
 8020e4e:	45b1      	cmp	r9, r6
 8020e50:	bfc8      	it	gt
 8020e52:	4671      	movgt	r1, lr
 8020e54:	9e08      	ldr	r6, [sp, #32]
 8020e56:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8020eb8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a8>
 8020e5a:	42b7      	cmp	r7, r6
 8020e5c:	bfc8      	it	gt
 8020e5e:	4613      	movgt	r3, r2
 8020e60:	f8df e058 	ldr.w	lr, [pc, #88]	; 8020ebc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ac>
 8020e64:	b282      	uxth	r2, r0
 8020e66:	eba3 030c 	sub.w	r3, r3, ip
 8020e6a:	1a8f      	subs	r7, r1, r2
 8020e6c:	f8b8 a000 	ldrh.w	sl, [r8]
 8020e70:	f8be 9000 	ldrh.w	r9, [lr]
 8020e74:	b21b      	sxth	r3, r3
 8020e76:	b23f      	sxth	r7, r7
 8020e78:	2800      	cmp	r0, #0
 8020e7a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020e7e:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8020e82:	f8ad c032 	strh.w	ip, [sp, #50]	; 0x32
 8020e86:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 8020e8a:	fa0f f88a 	sxth.w	r8, sl
 8020e8e:	fa0f fe89 	sxth.w	lr, r9
 8020e92:	f280 8115 	bge.w	80210c0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3b0>
 8020e96:	2200      	movs	r2, #0
 8020e98:	f04f 0600 	mov.w	r6, #0
 8020e9c:	b20f      	sxth	r7, r1
 8020e9e:	4610      	mov	r0, r2
 8020ea0:	4639      	mov	r1, r7
 8020ea2:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 8020ea6:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8020eaa:	e01b      	b.n	8020ee4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d4>
 8020eac:	20198158 	.word	0x20198158
 8020eb0:	0801d2f9 	.word	0x0801d2f9
 8020eb4:	08020461 	.word	0x08020461
 8020eb8:	2019814c 	.word	0x2019814c
 8020ebc:	2019814e 	.word	0x2019814e
 8020ec0:	2300      	movs	r3, #0
 8020ec2:	489f      	ldr	r0, [pc, #636]	; (8021140 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x430>)
 8020ec4:	499f      	ldr	r1, [pc, #636]	; (8021144 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x434>)
 8020ec6:	f8b0 a000 	ldrh.w	sl, [r0]
 8020eca:	f8b1 9000 	ldrh.w	r9, [r1]
 8020ece:	461a      	mov	r2, r3
 8020ed0:	469c      	mov	ip, r3
 8020ed2:	4618      	mov	r0, r3
 8020ed4:	4619      	mov	r1, r3
 8020ed6:	461f      	mov	r7, r3
 8020ed8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8020edc:	fa0f f88a 	sxth.w	r8, sl
 8020ee0:	fa0f fe89 	sxth.w	lr, r9
 8020ee4:	eba8 0000 	sub.w	r0, r8, r0
 8020ee8:	4288      	cmp	r0, r1
 8020eea:	da04      	bge.n	8020ef6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1e6>
 8020eec:	ebaa 0702 	sub.w	r7, sl, r2
 8020ef0:	b23f      	sxth	r7, r7
 8020ef2:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 8020ef6:	f1bc 0f00 	cmp.w	ip, #0
 8020efa:	f2c0 80c2 	blt.w	8021082 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x372>
 8020efe:	4661      	mov	r1, ip
 8020f00:	ebae 0e01 	sub.w	lr, lr, r1
 8020f04:	4573      	cmp	r3, lr
 8020f06:	dd04      	ble.n	8020f12 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x202>
 8020f08:	eba9 030c 	sub.w	r3, r9, ip
 8020f0c:	b21b      	sxth	r3, r3
 8020f0e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020f12:	2f00      	cmp	r7, #0
 8020f14:	f340 80b1 	ble.w	802107a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x36a>
 8020f18:	2b00      	cmp	r3, #0
 8020f1a:	f340 80ae 	ble.w	802107a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x36a>
 8020f1e:	f04f 0e00 	mov.w	lr, #0
 8020f22:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8020f26:	9b05      	ldr	r3, [sp, #20]
 8020f28:	8868      	ldrh	r0, [r5, #2]
 8020f2a:	8829      	ldrh	r1, [r5, #0]
 8020f2c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8020f30:	9b06      	ldr	r3, [sp, #24]
 8020f32:	1a52      	subs	r2, r2, r1
 8020f34:	ebac 0c00 	sub.w	ip, ip, r0
 8020f38:	a910      	add	r1, sp, #64	; 0x40
 8020f3a:	a80e      	add	r0, sp, #56	; 0x38
 8020f3c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8020f40:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020f44:	f8ad c03a 	strh.w	ip, [sp, #58]	; 0x3a
 8020f48:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 8020f4c:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8020f50:	f7f6 fc22 	bl	8017798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020f54:	a80c      	add	r0, sp, #48	; 0x30
 8020f56:	f7f6 fbf7 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020f5a:	a810      	add	r0, sp, #64	; 0x40
 8020f5c:	f7f6 fbf4 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020f60:	4b79      	ldr	r3, [pc, #484]	; (8021148 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x438>)
 8020f62:	681b      	ldr	r3, [r3, #0]
 8020f64:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8020f68:	2a00      	cmp	r2, #0
 8020f6a:	f040 80a4 	bne.w	80210b6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3a6>
 8020f6e:	6898      	ldr	r0, [r3, #8]
 8020f70:	6803      	ldr	r3, [r0, #0]
 8020f72:	4a76      	ldr	r2, [pc, #472]	; (802114c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x43c>)
 8020f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020f76:	4293      	cmp	r3, r2
 8020f78:	f040 80b0 	bne.w	80210dc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3cc>
 8020f7c:	7a00      	ldrb	r0, [r0, #8]
 8020f7e:	2801      	cmp	r0, #1
 8020f80:	f000 80a5 	beq.w	80210ce <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3be>
 8020f84:	f0c0 809e 	bcc.w	80210c4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3b4>
 8020f88:	2802      	cmp	r0, #2
 8020f8a:	f040 80d2 	bne.w	8021132 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x422>
 8020f8e:	f04f 0810 	mov.w	r8, #16
 8020f92:	f04f 0a04 	mov.w	sl, #4
 8020f96:	6823      	ldr	r3, [r4, #0]
 8020f98:	4a6d      	ldr	r2, [pc, #436]	; (8021150 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x440>)
 8020f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f9c:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 8020fa0:	4293      	cmp	r3, r2
 8020fa2:	fb0a f707 	mul.w	r7, sl, r7
 8020fa6:	f040 809b 	bne.w	80210e0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d0>
 8020faa:	4b6a      	ldr	r3, [pc, #424]	; (8021154 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x444>)
 8020fac:	881b      	ldrh	r3, [r3, #0]
 8020fae:	2b00      	cmp	r3, #0
 8020fb0:	f000 80b8 	beq.w	8021124 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x414>
 8020fb4:	7a22      	ldrb	r2, [r4, #8]
 8020fb6:	2a02      	cmp	r2, #2
 8020fb8:	f000 808e 	beq.w	80210d8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3c8>
 8020fbc:	2a01      	cmp	r2, #1
 8020fbe:	bf14      	ite	ne
 8020fc0:	2402      	movne	r4, #2
 8020fc2:	2403      	moveq	r4, #3
 8020fc4:	fb13 f404 	smulbb	r4, r3, r4
 8020fc8:	b2a4      	uxth	r4, r4
 8020fca:	4a5f      	ldr	r2, [pc, #380]	; (8021148 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x438>)
 8020fcc:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8020fd0:	f9bd 903a 	ldrsh.w	r9, [sp, #58]	; 0x3a
 8020fd4:	6810      	ldr	r0, [r2, #0]
 8020fd6:	fb07 3909 	mla	r9, r7, r9, r3
 8020fda:	6803      	ldr	r3, [r0, #0]
 8020fdc:	4e5e      	ldr	r6, [pc, #376]	; (8021158 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x448>)
 8020fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020fe0:	4798      	blx	r3
 8020fe2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8020fe6:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	; 0x30
 8020fea:	fb04 f303 	mul.w	r3, r4, r3
 8020fee:	fb0a 3505 	mla	r5, sl, r5, r3
 8020ff2:	4405      	add	r5, r0
 8020ff4:	6830      	ldr	r0, [r6, #0]
 8020ff6:	44d9      	add	r9, fp
 8020ff8:	2800      	cmp	r0, #0
 8020ffa:	d075      	beq.n	80210e8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 8020ffc:	f7fc f90a 	bl	801d214 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8021000:	9700      	str	r7, [sp, #0]
 8021002:	2700      	movs	r7, #0
 8021004:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 8021008:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 802100c:	4648      	mov	r0, r9
 802100e:	4643      	mov	r3, r8
 8021010:	f7f9 febe 	bl	801ad90 <nema_bind_dst_tex>
 8021014:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8021018:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 802101c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8021020:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8021024:	f7f9 fe00 	bl	801ac28 <nema_set_clip>
 8021028:	f04f 33ff 	mov.w	r3, #4294967295
 802102c:	2201      	movs	r2, #1
 802102e:	2100      	movs	r1, #0
 8021030:	f240 5004 	movw	r0, #1284	; 0x504
 8021034:	f7fb fc40 	bl	801c8b8 <nema_set_blend>
 8021038:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 802103c:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8021040:	4643      	mov	r3, r8
 8021042:	4628      	mov	r0, r5
 8021044:	9400      	str	r4, [sp, #0]
 8021046:	9701      	str	r7, [sp, #4]
 8021048:	f7f9 fe2a 	bl	801aca0 <nema_bind_src_tex>
 802104c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8021050:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8021054:	f7f9 ff64 	bl	801af20 <nema_blit>
 8021058:	6830      	ldr	r0, [r6, #0]
 802105a:	2800      	cmp	r0, #0
 802105c:	d044      	beq.n	80210e8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 802105e:	f7fc f8f9 	bl	801d254 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8021062:	6830      	ldr	r0, [r6, #0]
 8021064:	2800      	cmp	r0, #0
 8021066:	d03f      	beq.n	80210e8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 8021068:	6803      	ldr	r3, [r0, #0]
 802106a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802106c:	4798      	blx	r3
 802106e:	6830      	ldr	r0, [r6, #0]
 8021070:	2800      	cmp	r0, #0
 8021072:	d039      	beq.n	80210e8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 8021074:	6803      	ldr	r3, [r0, #0]
 8021076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021078:	4798      	blx	r3
 802107a:	4658      	mov	r0, fp
 802107c:	b013      	add	sp, #76	; 0x4c
 802107e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021082:	2000      	movs	r0, #0
 8021084:	4463      	add	r3, ip
 8021086:	b21b      	sxth	r3, r3
 8021088:	4684      	mov	ip, r0
 802108a:	4601      	mov	r1, r0
 802108c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8021090:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8021094:	e734      	b.n	8020f00 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f0>
 8021096:	9b05      	ldr	r3, [sp, #20]
 8021098:	9002      	str	r0, [sp, #8]
 802109a:	e9cd b300 	strd	fp, r3, [sp]
 802109e:	a810      	add	r0, sp, #64	; 0x40
 80210a0:	462b      	mov	r3, r5
 80210a2:	463a      	mov	r2, r7
 80210a4:	4621      	mov	r1, r4
 80210a6:	47c0      	blx	r8
 80210a8:	4658      	mov	r0, fp
 80210aa:	b013      	add	sp, #76	; 0x4c
 80210ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210b0:	4620      	mov	r0, r4
 80210b2:	4798      	blx	r3
 80210b4:	e648      	b.n	8020d48 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x38>
 80210b6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80210b8:	2800      	cmp	r0, #0
 80210ba:	f47f af59 	bne.w	8020f70 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x260>
 80210be:	e756      	b.n	8020f6e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 80210c0:	4639      	mov	r1, r7
 80210c2:	e70f      	b.n	8020ee4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d4>
 80210c4:	f04f 0804 	mov.w	r8, #4
 80210c8:	f04f 0a02 	mov.w	sl, #2
 80210cc:	e763      	b.n	8020f96 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 80210ce:	f04f 0839 	mov.w	r8, #57	; 0x39
 80210d2:	f04f 0a03 	mov.w	sl, #3
 80210d6:	e75e      	b.n	8020f96 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 80210d8:	2404      	movs	r4, #4
 80210da:	e773      	b.n	8020fc4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b4>
 80210dc:	4798      	blx	r3
 80210de:	e74e      	b.n	8020f7e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26e>
 80210e0:	4620      	mov	r0, r4
 80210e2:	4798      	blx	r3
 80210e4:	4604      	mov	r4, r0
 80210e6:	e770      	b.n	8020fca <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ba>
 80210e8:	4b1c      	ldr	r3, [pc, #112]	; (802115c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x44c>)
 80210ea:	4a1d      	ldr	r2, [pc, #116]	; (8021160 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x450>)
 80210ec:	217c      	movs	r1, #124	; 0x7c
 80210ee:	481d      	ldr	r0, [pc, #116]	; (8021164 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x454>)
 80210f0:	f006 fff2 	bl	80280d8 <__assert_func>
 80210f4:	4b1c      	ldr	r3, [pc, #112]	; (8021168 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x458>)
 80210f6:	4a1d      	ldr	r2, [pc, #116]	; (802116c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 80210f8:	21e9      	movs	r1, #233	; 0xe9
 80210fa:	481d      	ldr	r0, [pc, #116]	; (8021170 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 80210fc:	f006 ffec 	bl	80280d8 <__assert_func>
 8021100:	4b1c      	ldr	r3, [pc, #112]	; (8021174 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x464>)
 8021102:	4a1a      	ldr	r2, [pc, #104]	; (802116c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 8021104:	21e7      	movs	r1, #231	; 0xe7
 8021106:	481a      	ldr	r0, [pc, #104]	; (8021170 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 8021108:	f006 ffe6 	bl	80280d8 <__assert_func>
 802110c:	4b1a      	ldr	r3, [pc, #104]	; (8021178 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x468>)
 802110e:	4a17      	ldr	r2, [pc, #92]	; (802116c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 8021110:	21e5      	movs	r1, #229	; 0xe5
 8021112:	4817      	ldr	r0, [pc, #92]	; (8021170 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 8021114:	f006 ffe0 	bl	80280d8 <__assert_func>
 8021118:	4b17      	ldr	r3, [pc, #92]	; (8021178 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x468>)
 802111a:	4a18      	ldr	r2, [pc, #96]	; (802117c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x46c>)
 802111c:	21f0      	movs	r1, #240	; 0xf0
 802111e:	4814      	ldr	r0, [pc, #80]	; (8021170 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 8021120:	f006 ffda 	bl	80280d8 <__assert_func>
 8021124:	4b16      	ldr	r3, [pc, #88]	; (8021180 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x470>)
 8021126:	4a17      	ldr	r2, [pc, #92]	; (8021184 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x474>)
 8021128:	f44f 7187 	mov.w	r1, #270	; 0x10e
 802112c:	4816      	ldr	r0, [pc, #88]	; (8021188 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x478>)
 802112e:	f006 ffd3 	bl	80280d8 <__assert_func>
 8021132:	4b16      	ldr	r3, [pc, #88]	; (802118c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x47c>)
 8021134:	4a11      	ldr	r2, [pc, #68]	; (802117c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x46c>)
 8021136:	f44f 718d 	mov.w	r1, #282	; 0x11a
 802113a:	480d      	ldr	r0, [pc, #52]	; (8021170 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 802113c:	f006 ffcc 	bl	80280d8 <__assert_func>
 8021140:	2019814c 	.word	0x2019814c
 8021144:	2019814e 	.word	0x2019814e
 8021148:	20198158 	.word	0x20198158
 802114c:	0801d2f9 	.word	0x0801d2f9
 8021150:	0801eed9 	.word	0x0801eed9
 8021154:	20198152 	.word	0x20198152
 8021158:	20198388 	.word	0x20198388
 802115c:	0802af18 	.word	0x0802af18
 8021160:	0802b720 	.word	0x0802b720
 8021164:	0802af40 	.word	0x0802af40
 8021168:	0802b310 	.word	0x0802b310
 802116c:	0802c034 	.word	0x0802c034
 8021170:	0802afbc 	.word	0x0802afbc
 8021174:	0802b2b8 	.word	0x0802b2b8
 8021178:	0802b160 	.word	0x0802b160
 802117c:	0802bfa0 	.word	0x0802bfa0
 8021180:	0802b490 	.word	0x0802b490
 8021184:	0802c24c 	.word	0x0802c24c
 8021188:	0802b4d4 	.word	0x0802b4d4
 802118c:	0802b264 	.word	0x0802b264

08021190 <_ZN8touchgfx8LCDGPU2DC1Ev>:
 8021190:	b410      	push	{r4}
 8021192:	2400      	movs	r4, #0
 8021194:	220d      	movs	r2, #13
 8021196:	4903      	ldr	r1, [pc, #12]	; (80211a4 <_ZN8touchgfx8LCDGPU2DC1Ev+0x14>)
 8021198:	7202      	strb	r2, [r0, #8]
 802119a:	e9c0 1400 	strd	r1, r4, [r0]
 802119e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80211a2:	4770      	bx	lr
 80211a4:	0802b6c8 	.word	0x0802b6c8

080211a8 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE>:
 80211a8:	2902      	cmp	r1, #2
 80211aa:	d906      	bls.n	80211ba <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x12>
 80211ac:	b508      	push	{r3, lr}
 80211ae:	4a04      	ldr	r2, [pc, #16]	; (80211c0 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x18>)
 80211b0:	4b04      	ldr	r3, [pc, #16]	; (80211c4 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x1c>)
 80211b2:	212a      	movs	r1, #42	; 0x2a
 80211b4:	4804      	ldr	r0, [pc, #16]	; (80211c8 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x20>)
 80211b6:	f006 ff8f 	bl	80280d8 <__assert_func>
 80211ba:	7201      	strb	r1, [r0, #8]
 80211bc:	4770      	bx	lr
 80211be:	bf00      	nop
 80211c0:	0802ba38 	.word	0x0802ba38
 80211c4:	0802ae50 	.word	0x0802ae50
 80211c8:	0802afbc 	.word	0x0802afbc

080211cc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>:
 80211cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211d0:	b093      	sub	sp, #76	; 0x4c
 80211d2:	4691      	mov	r9, r2
 80211d4:	468a      	mov	sl, r1
 80211d6:	8812      	ldrh	r2, [r2, #0]
 80211d8:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
 80211dc:	461c      	mov	r4, r3
 80211de:	910a      	str	r1, [sp, #40]	; 0x28
 80211e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80211e2:	2a00      	cmp	r2, #0
 80211e4:	f040 8109 	bne.w	80213fa <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x22e>
 80211e8:	6820      	ldr	r0, [r4, #0]
 80211ea:	6861      	ldr	r1, [r4, #4]
 80211ec:	aa0e      	add	r2, sp, #56	; 0x38
 80211ee:	c203      	stmia	r2!, {r0, r1}
 80211f0:	6818      	ldr	r0, [r3, #0]
 80211f2:	6859      	ldr	r1, [r3, #4]
 80211f4:	aa10      	add	r2, sp, #64	; 0x40
 80211f6:	c203      	stmia	r2!, {r0, r1}
 80211f8:	a80e      	add	r0, sp, #56	; 0x38
 80211fa:	f7f6 faa5 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80211fe:	4621      	mov	r1, r4
 8021200:	a810      	add	r0, sp, #64	; 0x40
 8021202:	f7f6 fac9 	bl	8017798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021206:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 802120a:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
 802120e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8021212:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8021216:	487c      	ldr	r0, [pc, #496]	; (8021408 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8021218:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802121c:	4422      	add	r2, r4
 802121e:	442b      	add	r3, r5
 8021220:	6800      	ldr	r0, [r0, #0]
 8021222:	fb11 4105 	smlabb	r1, r1, r5, r4
 8021226:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802122a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 802122e:	6802      	ldr	r2, [r0, #0]
 8021230:	4d76      	ldr	r5, [pc, #472]	; (802140c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021232:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8021236:	448a      	add	sl, r1
 8021238:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 802123c:	42ab      	cmp	r3, r5
 802123e:	910b      	str	r1, [sp, #44]	; 0x2c
 8021240:	f9bd 4046 	ldrsh.w	r4, [sp, #70]	; 0x46
 8021244:	f040 80a6 	bne.w	8021394 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c8>
 8021248:	6841      	ldr	r1, [r0, #4]
 802124a:	4d71      	ldr	r5, [pc, #452]	; (8021410 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 802124c:	680b      	ldr	r3, [r1, #0]
 802124e:	699b      	ldr	r3, [r3, #24]
 8021250:	42ab      	cmp	r3, r5
 8021252:	f040 80c4 	bne.w	80213de <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x212>
 8021256:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8021258:	4798      	blx	r3
 802125a:	4b6e      	ldr	r3, [pc, #440]	; (8021414 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 802125c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8021260:	881b      	ldrh	r3, [r3, #0]
 8021262:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8021266:	fb03 f404 	mul.w	r4, r3, r4
 802126a:	fb03 1202 	mla	r2, r3, r2, r1
 802126e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021272:	eb00 0244 	add.w	r2, r0, r4, lsl #1
 8021276:	4290      	cmp	r0, r2
 8021278:	920c      	str	r2, [sp, #48]	; 0x30
 802127a:	f080 8083 	bcs.w	8021384 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 802127e:	f04f 0b04 	mov.w	fp, #4
 8021282:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021284:	0052      	lsls	r2, r2, #1
 8021286:	920d      	str	r2, [sp, #52]	; 0x34
 8021288:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802128a:	eb00 0802 	add.w	r8, r0, r2
 802128e:	4580      	cmp	r8, r0
 8021290:	d96d      	bls.n	802136e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a2>
 8021292:	4684      	mov	ip, r0
 8021294:	f10a 3eff 	add.w	lr, sl, #4294967295
 8021298:	e03e      	b.n	8021318 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x14c>
 802129a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802129c:	f3c5 4707 	ubfx	r7, r5, #16, #8
 80212a0:	fb02 f303 	mul.w	r3, r2, r3
 80212a4:	1c59      	adds	r1, r3, #1
 80212a6:	eb01 2323 	add.w	r3, r1, r3, asr #8
 80212aa:	121b      	asrs	r3, r3, #8
 80212ac:	43da      	mvns	r2, r3
 80212ae:	b299      	uxth	r1, r3
 80212b0:	b2f6      	uxtb	r6, r6
 80212b2:	b2eb      	uxtb	r3, r5
 80212b4:	fb17 f701 	smulbb	r7, r7, r1
 80212b8:	f8bc 5000 	ldrh.w	r5, [ip]
 80212bc:	fb13 f301 	smulbb	r3, r3, r1
 80212c0:	fb16 f601 	smulbb	r6, r6, r1
 80212c4:	122c      	asrs	r4, r5, #8
 80212c6:	10e9      	asrs	r1, r5, #3
 80212c8:	00ed      	lsls	r5, r5, #3
 80212ca:	b2d2      	uxtb	r2, r2
 80212cc:	b2ed      	uxtb	r5, r5
 80212ce:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80212d2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80212d6:	fb04 7402 	mla	r4, r4, r2, r7
 80212da:	fb01 6102 	mla	r1, r1, r2, r6
 80212de:	fb05 3202 	mla	r2, r5, r2, r3
 80212e2:	b2a4      	uxth	r4, r4
 80212e4:	b292      	uxth	r2, r2
 80212e6:	b289      	uxth	r1, r1
 80212e8:	1c55      	adds	r5, r2, #1
 80212ea:	1c67      	adds	r7, r4, #1
 80212ec:	1c4b      	adds	r3, r1, #1
 80212ee:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 80212f2:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80212f6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80212fa:	f404 4278 	and.w	r2, r4, #63488	; 0xf800
 80212fe:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021302:	095b      	lsrs	r3, r3, #5
 8021304:	432a      	orrs	r2, r5
 8021306:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802130a:	431a      	orrs	r2, r3
 802130c:	f8ac 2000 	strh.w	r2, [ip]
 8021310:	f10c 0c02 	add.w	ip, ip, #2
 8021314:	45e0      	cmp	r8, ip
 8021316:	d91f      	bls.n	8021358 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 8021318:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 802131c:	fb1b b303 	smlabb	r3, fp, r3, fp
 8021320:	f859 5003 	ldr.w	r5, [r9, r3]
 8021324:	0e2b      	lsrs	r3, r5, #24
 8021326:	d0f3      	beq.n	8021310 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x144>
 8021328:	2bff      	cmp	r3, #255	; 0xff
 802132a:	ea4f 2615 	mov.w	r6, r5, lsr #8
 802132e:	d1b4      	bne.n	802129a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8021330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021332:	2aff      	cmp	r2, #255	; 0xff
 8021334:	d1b1      	bne.n	802129a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8021336:	096b      	lsrs	r3, r5, #5
 8021338:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 802133c:	f026 0607 	bic.w	r6, r6, #7
 8021340:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021344:	431e      	orrs	r6, r3
 8021346:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802134a:	4335      	orrs	r5, r6
 802134c:	f8ac 5000 	strh.w	r5, [ip]
 8021350:	f10c 0c02 	add.w	ip, ip, #2
 8021354:	45e0      	cmp	r8, ip
 8021356:	d8df      	bhi.n	8021318 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x14c>
 8021358:	43c3      	mvns	r3, r0
 802135a:	4498      	add	r8, r3
 802135c:	4b2d      	ldr	r3, [pc, #180]	; (8021414 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 802135e:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8021362:	f108 0801 	add.w	r8, r8, #1
 8021366:	881b      	ldrh	r3, [r3, #0]
 8021368:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 802136c:	44c2      	add	sl, r8
 802136e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021370:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8021374:	1b19      	subs	r1, r3, r4
 8021376:	1b12      	subs	r2, r2, r4
 8021378:	4492      	add	sl, r2
 802137a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802137c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021380:	4282      	cmp	r2, r0
 8021382:	d881      	bhi.n	8021288 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 8021384:	4b20      	ldr	r3, [pc, #128]	; (8021408 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8021386:	6818      	ldr	r0, [r3, #0]
 8021388:	6803      	ldr	r3, [r0, #0]
 802138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802138c:	4798      	blx	r3
 802138e:	b013      	add	sp, #76	; 0x4c
 8021390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021394:	4798      	blx	r3
 8021396:	4603      	mov	r3, r0
 8021398:	2b01      	cmp	r3, #1
 802139a:	d124      	bne.n	80213e6 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 802139c:	4a1e      	ldr	r2, [pc, #120]	; (8021418 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 802139e:	6810      	ldr	r0, [r2, #0]
 80213a0:	b328      	cbz	r0, 80213ee <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x222>
 80213a2:	2700      	movs	r7, #0
 80213a4:	260b      	movs	r6, #11
 80213a6:	4a1b      	ldr	r2, [pc, #108]	; (8021414 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 80213a8:	b2a1      	uxth	r1, r4
 80213aa:	8814      	ldrh	r4, [r2, #0]
 80213ac:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80213b0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80213b4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80213b8:	9406      	str	r4, [sp, #24]
 80213ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80213bc:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 80213c0:	9305      	str	r3, [sp, #20]
 80213c2:	9204      	str	r2, [sp, #16]
 80213c4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80213c8:	464a      	mov	r2, r9
 80213ca:	4651      	mov	r1, sl
 80213cc:	e9cd 6707 	strd	r6, r7, [sp, #28]
 80213d0:	9503      	str	r5, [sp, #12]
 80213d2:	9400      	str	r4, [sp, #0]
 80213d4:	f7fb ff46 	bl	801d264 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80213d8:	b013      	add	sp, #76	; 0x4c
 80213da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213de:	4608      	mov	r0, r1
 80213e0:	4798      	blx	r3
 80213e2:	4603      	mov	r3, r0
 80213e4:	e7d8      	b.n	8021398 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1cc>
 80213e6:	4b08      	ldr	r3, [pc, #32]	; (8021408 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 80213e8:	6818      	ldr	r0, [r3, #0]
 80213ea:	6802      	ldr	r2, [r0, #0]
 80213ec:	e733      	b.n	8021256 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 80213ee:	4b0b      	ldr	r3, [pc, #44]	; (802141c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 80213f0:	4a0b      	ldr	r2, [pc, #44]	; (8021420 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 80213f2:	217c      	movs	r1, #124	; 0x7c
 80213f4:	480b      	ldr	r0, [pc, #44]	; (8021424 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 80213f6:	f006 fe6f 	bl	80280d8 <__assert_func>
 80213fa:	4b0b      	ldr	r3, [pc, #44]	; (8021428 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 80213fc:	4a0b      	ldr	r2, [pc, #44]	; (802142c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x260>)
 80213fe:	f240 31c2 	movw	r1, #962	; 0x3c2
 8021402:	480b      	ldr	r0, [pc, #44]	; (8021430 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x264>)
 8021404:	f006 fe68 	bl	80280d8 <__assert_func>
 8021408:	20198158 	.word	0x20198158
 802140c:	08001edd 	.word	0x08001edd
 8021410:	0801678d 	.word	0x0801678d
 8021414:	20198152 	.word	0x20198152
 8021418:	20198388 	.word	0x20198388
 802141c:	0802af18 	.word	0x0802af18
 8021420:	0802b720 	.word	0x0802b720
 8021424:	0802af40 	.word	0x0802af40
 8021428:	0802b030 	.word	0x0802b030
 802142c:	0802bd50 	.word	0x0802bd50
 8021430:	0802afbc 	.word	0x0802afbc

08021434 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>:
 8021434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021438:	4691      	mov	r9, r2
 802143a:	8812      	ldrh	r2, [r2, #0]
 802143c:	b093      	sub	sp, #76	; 0x4c
 802143e:	2a01      	cmp	r2, #1
 8021440:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 8021444:	f040 8129 	bne.w	802169a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x266>
 8021448:	b914      	cbnz	r4, 8021450 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c>
 802144a:	b013      	add	sp, #76	; 0x4c
 802144c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021450:	461d      	mov	r5, r3
 8021452:	468a      	mov	sl, r1
 8021454:	6818      	ldr	r0, [r3, #0]
 8021456:	6859      	ldr	r1, [r3, #4]
 8021458:	ab0e      	add	r3, sp, #56	; 0x38
 802145a:	c303      	stmia	r3!, {r0, r1}
 802145c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802145e:	6818      	ldr	r0, [r3, #0]
 8021460:	6859      	ldr	r1, [r3, #4]
 8021462:	ab10      	add	r3, sp, #64	; 0x40
 8021464:	c303      	stmia	r3!, {r0, r1}
 8021466:	a80e      	add	r0, sp, #56	; 0x38
 8021468:	f7f6 f96e 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802146c:	4629      	mov	r1, r5
 802146e:	a810      	add	r0, sp, #64	; 0x40
 8021470:	f7f6 f992 	bl	8017798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021474:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
 8021478:	f9bd 6042 	ldrsh.w	r6, [sp, #66]	; 0x42
 802147c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8021480:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8021484:	488b      	ldr	r0, [pc, #556]	; (80216b4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 8021486:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802148a:	442a      	add	r2, r5
 802148c:	4433      	add	r3, r6
 802148e:	6800      	ldr	r0, [r0, #0]
 8021490:	fb11 5106 	smlabb	r1, r1, r6, r5
 8021494:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8021498:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 802149c:	6802      	ldr	r2, [r0, #0]
 802149e:	4e86      	ldr	r6, [pc, #536]	; (80216b8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x284>)
 80214a0:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 80214a4:	448a      	add	sl, r1
 80214a6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80214aa:	42b3      	cmp	r3, r6
 80214ac:	910b      	str	r1, [sp, #44]	; 0x2c
 80214ae:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 80214b2:	f040 80c8 	bne.w	8021646 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x212>
 80214b6:	6841      	ldr	r1, [r0, #4]
 80214b8:	4e80      	ldr	r6, [pc, #512]	; (80216bc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x288>)
 80214ba:	680b      	ldr	r3, [r1, #0]
 80214bc:	699b      	ldr	r3, [r3, #24]
 80214be:	42b3      	cmp	r3, r6
 80214c0:	f040 80e4 	bne.w	802168c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x258>
 80214c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80214c6:	4798      	blx	r3
 80214c8:	4b7d      	ldr	r3, [pc, #500]	; (80216c0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 80214ca:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80214ce:	881b      	ldrh	r3, [r3, #0]
 80214d0:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80214d4:	2cff      	cmp	r4, #255	; 0xff
 80214d6:	fb03 1202 	mla	r2, r3, r2, r1
 80214da:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80214de:	d06f      	beq.n	80215c0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 80214e0:	43e2      	mvns	r2, r4
 80214e2:	fb05 f503 	mul.w	r5, r5, r3
 80214e6:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 80214ea:	4288      	cmp	r0, r1
 80214ec:	910c      	str	r1, [sp, #48]	; 0x30
 80214ee:	b2d2      	uxtb	r2, r2
 80214f0:	d25e      	bcs.n	80215b0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 80214f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80214f4:	fa1f f884 	uxth.w	r8, r4
 80214f8:	0049      	lsls	r1, r1, #1
 80214fa:	b292      	uxth	r2, r2
 80214fc:	910d      	str	r1, [sp, #52]	; 0x34
 80214fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021500:	eb00 0b01 	add.w	fp, r0, r1
 8021504:	4583      	cmp	fp, r0
 8021506:	d948      	bls.n	802159a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x166>
 8021508:	4684      	mov	ip, r0
 802150a:	f10a 3eff 	add.w	lr, sl, #4294967295
 802150e:	2103      	movs	r1, #3
 8021510:	2404      	movs	r4, #4
 8021512:	f81e 6f01 	ldrb.w	r6, [lr, #1]!
 8021516:	f8bc 3000 	ldrh.w	r3, [ip]
 802151a:	fb11 4606 	smlabb	r6, r1, r6, r4
 802151e:	eb09 0106 	add.w	r1, r9, r6
 8021522:	788d      	ldrb	r5, [r1, #2]
 8021524:	784f      	ldrb	r7, [r1, #1]
 8021526:	00dc      	lsls	r4, r3, #3
 8021528:	b2e4      	uxtb	r4, r4
 802152a:	fb14 f402 	smulbb	r4, r4, r2
 802152e:	fb15 f508 	smulbb	r5, r5, r8
 8021532:	fb17 f708 	smulbb	r7, r7, r8
 8021536:	f819 6006 	ldrb.w	r6, [r9, r6]
 802153a:	1219      	asrs	r1, r3, #8
 802153c:	10db      	asrs	r3, r3, #3
 802153e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021542:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021546:	fb06 4608 	mla	r6, r6, r8, r4
 802154a:	fb01 5102 	mla	r1, r1, r2, r5
 802154e:	fb03 7302 	mla	r3, r3, r2, r7
 8021552:	b2b6      	uxth	r6, r6
 8021554:	b29b      	uxth	r3, r3
 8021556:	b28d      	uxth	r5, r1
 8021558:	1c5c      	adds	r4, r3, #1
 802155a:	1c69      	adds	r1, r5, #1
 802155c:	1c77      	adds	r7, r6, #1
 802155e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8021562:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8021566:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802156a:	f401 4378 	and.w	r3, r1, #63488	; 0xf800
 802156e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021572:	0961      	lsrs	r1, r4, #5
 8021574:	4333      	orrs	r3, r6
 8021576:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802157a:	430b      	orrs	r3, r1
 802157c:	f82c 3b02 	strh.w	r3, [ip], #2
 8021580:	45e3      	cmp	fp, ip
 8021582:	d8c4      	bhi.n	802150e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xda>
 8021584:	43c3      	mvns	r3, r0
 8021586:	449b      	add	fp, r3
 8021588:	4b4d      	ldr	r3, [pc, #308]	; (80216c0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 802158a:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 802158e:	f10b 0b01 	add.w	fp, fp, #1
 8021592:	881b      	ldrh	r3, [r3, #0]
 8021594:	eb00 004b 	add.w	r0, r0, fp, lsl #1
 8021598:	44da      	add	sl, fp
 802159a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802159c:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80215a0:	1b5c      	subs	r4, r3, r5
 80215a2:	1b49      	subs	r1, r1, r5
 80215a4:	448a      	add	sl, r1
 80215a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80215a8:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 80215ac:	4281      	cmp	r1, r0
 80215ae:	d8a6      	bhi.n	80214fe <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xca>
 80215b0:	4b40      	ldr	r3, [pc, #256]	; (80216b4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 80215b2:	6818      	ldr	r0, [r3, #0]
 80215b4:	6803      	ldr	r3, [r0, #0]
 80215b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80215b8:	4798      	blx	r3
 80215ba:	b013      	add	sp, #76	; 0x4c
 80215bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215c0:	fb05 f503 	mul.w	r5, r5, r3
 80215c4:	eb00 0e45 	add.w	lr, r0, r5, lsl #1
 80215c8:	4570      	cmp	r0, lr
 80215ca:	d2f1      	bcs.n	80215b0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 80215cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80215ce:	f04f 0c03 	mov.w	ip, #3
 80215d2:	2704      	movs	r7, #4
 80215d4:	4693      	mov	fp, r2
 80215d6:	0051      	lsls	r1, r2, #1
 80215d8:	4e3a      	ldr	r6, [pc, #232]	; (80216c4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x290>)
 80215da:	910b      	str	r1, [sp, #44]	; 0x2c
 80215dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80215de:	eb00 0802 	add.w	r8, r0, r2
 80215e2:	4580      	cmp	r8, r0
 80215e4:	d923      	bls.n	802162e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1fa>
 80215e6:	4604      	mov	r4, r0
 80215e8:	f10a 35ff 	add.w	r5, sl, #4294967295
 80215ec:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80215f0:	fb1c 7202 	smlabb	r2, ip, r2, r7
 80215f4:	eb09 0302 	add.w	r3, r9, r2
 80215f8:	7859      	ldrb	r1, [r3, #1]
 80215fa:	789b      	ldrb	r3, [r3, #2]
 80215fc:	00c9      	lsls	r1, r1, #3
 80215fe:	f819 2002 	ldrb.w	r2, [r9, r2]
 8021602:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021606:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 802160a:	430b      	orrs	r3, r1
 802160c:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8021610:	f824 3b02 	strh.w	r3, [r4], #2
 8021614:	45a0      	cmp	r8, r4
 8021616:	d8e9      	bhi.n	80215ec <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 8021618:	43c3      	mvns	r3, r0
 802161a:	4498      	add	r8, r3
 802161c:	4b28      	ldr	r3, [pc, #160]	; (80216c0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 802161e:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8021622:	f108 0801 	add.w	r8, r8, #1
 8021626:	881b      	ldrh	r3, [r3, #0]
 8021628:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 802162c:	44c2      	add	sl, r8
 802162e:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8021632:	eba3 010b 	sub.w	r1, r3, fp
 8021636:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802163a:	eba2 020b 	sub.w	r2, r2, fp
 802163e:	4586      	cmp	lr, r0
 8021640:	4492      	add	sl, r2
 8021642:	d8cb      	bhi.n	80215dc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 8021644:	e7b4      	b.n	80215b0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 8021646:	4798      	blx	r3
 8021648:	2801      	cmp	r0, #1
 802164a:	d122      	bne.n	8021692 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x25e>
 802164c:	4b1e      	ldr	r3, [pc, #120]	; (80216c8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x294>)
 802164e:	6818      	ldr	r0, [r3, #0]
 8021650:	b350      	cbz	r0, 80216a8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x274>
 8021652:	2600      	movs	r6, #0
 8021654:	270b      	movs	r7, #11
 8021656:	4b1a      	ldr	r3, [pc, #104]	; (80216c0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 8021658:	b2aa      	uxth	r2, r5
 802165a:	881d      	ldrh	r5, [r3, #0]
 802165c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8021660:	9404      	str	r4, [sp, #16]
 8021662:	9506      	str	r5, [sp, #24]
 8021664:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 8021668:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 802166c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8021670:	4651      	mov	r1, sl
 8021672:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8021676:	464a      	mov	r2, r9
 8021678:	9608      	str	r6, [sp, #32]
 802167a:	9605      	str	r6, [sp, #20]
 802167c:	9707      	str	r7, [sp, #28]
 802167e:	9503      	str	r5, [sp, #12]
 8021680:	9400      	str	r4, [sp, #0]
 8021682:	f7fb fdef 	bl	801d264 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8021686:	b013      	add	sp, #76	; 0x4c
 8021688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802168c:	4608      	mov	r0, r1
 802168e:	4798      	blx	r3
 8021690:	e7da      	b.n	8021648 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x214>
 8021692:	4b08      	ldr	r3, [pc, #32]	; (80216b4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 8021694:	6818      	ldr	r0, [r3, #0]
 8021696:	6802      	ldr	r2, [r0, #0]
 8021698:	e714      	b.n	80214c4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x90>
 802169a:	4b0c      	ldr	r3, [pc, #48]	; (80216cc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x298>)
 802169c:	4a0c      	ldr	r2, [pc, #48]	; (80216d0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x29c>)
 802169e:	f240 411b 	movw	r1, #1051	; 0x41b
 80216a2:	480c      	ldr	r0, [pc, #48]	; (80216d4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a0>)
 80216a4:	f006 fd18 	bl	80280d8 <__assert_func>
 80216a8:	4b0b      	ldr	r3, [pc, #44]	; (80216d8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a4>)
 80216aa:	4a0c      	ldr	r2, [pc, #48]	; (80216dc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a8>)
 80216ac:	217c      	movs	r1, #124	; 0x7c
 80216ae:	480c      	ldr	r0, [pc, #48]	; (80216e0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2ac>)
 80216b0:	f006 fd12 	bl	80280d8 <__assert_func>
 80216b4:	20198158 	.word	0x20198158
 80216b8:	08001edd 	.word	0x08001edd
 80216bc:	0801678d 	.word	0x0801678d
 80216c0:	20198152 	.word	0x20198152
 80216c4:	fffff800 	.word	0xfffff800
 80216c8:	20198388 	.word	0x20198388
 80216cc:	0802afe0 	.word	0x0802afe0
 80216d0:	0802bbb8 	.word	0x0802bbb8
 80216d4:	0802afbc 	.word	0x0802afbc
 80216d8:	0802af18 	.word	0x0802af18
 80216dc:	0802b720 	.word	0x0802b720
 80216e0:	0802af40 	.word	0x0802af40

080216e4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>:
 80216e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216e8:	4690      	mov	r8, r2
 80216ea:	8812      	ldrh	r2, [r2, #0]
 80216ec:	b093      	sub	sp, #76	; 0x4c
 80216ee:	461c      	mov	r4, r3
 80216f0:	f89d a074 	ldrb.w	sl, [sp, #116]	; 0x74
 80216f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80216f6:	2a00      	cmp	r2, #0
 80216f8:	f040 80fb 	bne.w	80218f2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 80216fc:	4689      	mov	r9, r1
 80216fe:	6820      	ldr	r0, [r4, #0]
 8021700:	6861      	ldr	r1, [r4, #4]
 8021702:	aa0e      	add	r2, sp, #56	; 0x38
 8021704:	c203      	stmia	r2!, {r0, r1}
 8021706:	6818      	ldr	r0, [r3, #0]
 8021708:	6859      	ldr	r1, [r3, #4]
 802170a:	aa10      	add	r2, sp, #64	; 0x40
 802170c:	c203      	stmia	r2!, {r0, r1}
 802170e:	a80e      	add	r0, sp, #56	; 0x38
 8021710:	f7f6 f81a 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021714:	4621      	mov	r1, r4
 8021716:	a810      	add	r0, sp, #64	; 0x40
 8021718:	f7f6 f83e 	bl	8017798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802171c:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 8021720:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
 8021724:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8021728:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 802172c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8021730:	4873      	ldr	r0, [pc, #460]	; (8021900 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 8021732:	fb11 4105 	smlabb	r1, r1, r5, r4
 8021736:	4422      	add	r2, r4
 8021738:	442b      	add	r3, r5
 802173a:	6800      	ldr	r0, [r0, #0]
 802173c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8021740:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8021744:	6802      	ldr	r2, [r0, #0]
 8021746:	4489      	add	r9, r1
 8021748:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 802174c:	4c6d      	ldr	r4, [pc, #436]	; (8021904 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x220>)
 802174e:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8021752:	910a      	str	r1, [sp, #40]	; 0x28
 8021754:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 8021758:	42a3      	cmp	r3, r4
 802175a:	910c      	str	r1, [sp, #48]	; 0x30
 802175c:	f040 8096 	bne.w	802188c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 8021760:	6841      	ldr	r1, [r0, #4]
 8021762:	4c69      	ldr	r4, [pc, #420]	; (8021908 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x224>)
 8021764:	680b      	ldr	r3, [r1, #0]
 8021766:	699b      	ldr	r3, [r3, #24]
 8021768:	42a3      	cmp	r3, r4
 802176a:	f040 80b4 	bne.w	80218d6 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1f2>
 802176e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8021770:	4798      	blx	r3
 8021772:	4b66      	ldr	r3, [pc, #408]	; (802190c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 8021774:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8021778:	881b      	ldrh	r3, [r3, #0]
 802177a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 802177e:	fb01 2303 	mla	r3, r1, r3, r2
 8021782:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021786:	4418      	add	r0, r3
 8021788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802178a:	2b00      	cmp	r3, #0
 802178c:	dd76      	ble.n	802187c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x198>
 802178e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021790:	2b00      	cmp	r3, #0
 8021792:	dd73      	ble.n	802187c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x198>
 8021794:	2200      	movs	r2, #0
 8021796:	2104      	movs	r1, #4
 8021798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802179c:	920b      	str	r2, [sp, #44]	; 0x2c
 802179e:	930d      	str	r3, [sp, #52]	; 0x34
 80217a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217a2:	464e      	mov	r6, r9
 80217a4:	1cc5      	adds	r5, r0, #3
 80217a6:	eb09 0c03 	add.w	ip, r9, r3
 80217aa:	e039      	b.n	8021820 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 80217ac:	fb0a f303 	mul.w	r3, sl, r3
 80217b0:	1c5a      	adds	r2, r3, #1
 80217b2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80217b6:	121b      	asrs	r3, r3, #8
 80217b8:	43df      	mvns	r7, r3
 80217ba:	b29b      	uxth	r3, r3
 80217bc:	fb1e f203 	smulbb	r2, lr, r3
 80217c0:	f815 ec03 	ldrb.w	lr, [r5, #-3]
 80217c4:	b2ff      	uxtb	r7, r7
 80217c6:	fb0e 2e07 	mla	lr, lr, r7, r2
 80217ca:	fa1f fe8e 	uxth.w	lr, lr
 80217ce:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80217d2:	f10e 0b01 	add.w	fp, lr, #1
 80217d6:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80217da:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80217de:	fb12 fb07 	smulbb	fp, r2, r7
 80217e2:	f805 ec03 	strb.w	lr, [r5, #-3]
 80217e6:	7862      	ldrb	r2, [r4, #1]
 80217e8:	f815 ec01 	ldrb.w	lr, [r5, #-1]
 80217ec:	fb02 b203 	mla	r2, r2, r3, fp
 80217f0:	b292      	uxth	r2, r2
 80217f2:	f102 0b01 	add.w	fp, r2, #1
 80217f6:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80217fa:	1212      	asrs	r2, r2, #8
 80217fc:	fb1e f707 	smulbb	r7, lr, r7
 8021800:	f805 2c02 	strb.w	r2, [r5, #-2]
 8021804:	78a2      	ldrb	r2, [r4, #2]
 8021806:	fb02 7303 	mla	r3, r2, r3, r7
 802180a:	b29b      	uxth	r3, r3
 802180c:	1c5a      	adds	r2, r3, #1
 802180e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021812:	121b      	asrs	r3, r3, #8
 8021814:	f805 3c01 	strb.w	r3, [r5, #-1]
 8021818:	45b4      	cmp	ip, r6
 802181a:	f105 0503 	add.w	r5, r5, #3
 802181e:	d01b      	beq.n	8021858 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x174>
 8021820:	f816 2b01 	ldrb.w	r2, [r6], #1
 8021824:	fb11 1202 	smlabb	r2, r1, r2, r1
 8021828:	eb08 0402 	add.w	r4, r8, r2
 802182c:	78e3      	ldrb	r3, [r4, #3]
 802182e:	2b00      	cmp	r3, #0
 8021830:	d0f2      	beq.n	8021818 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x134>
 8021832:	2bff      	cmp	r3, #255	; 0xff
 8021834:	f818 e002 	ldrb.w	lr, [r8, r2]
 8021838:	d1b8      	bne.n	80217ac <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 802183a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802183e:	d1b5      	bne.n	80217ac <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 8021840:	f805 ec03 	strb.w	lr, [r5, #-3]
 8021844:	7863      	ldrb	r3, [r4, #1]
 8021846:	45b4      	cmp	ip, r6
 8021848:	f805 3c02 	strb.w	r3, [r5, #-2]
 802184c:	78a3      	ldrb	r3, [r4, #2]
 802184e:	f105 0503 	add.w	r5, r5, #3
 8021852:	f805 3c04 	strb.w	r3, [r5, #-4]
 8021856:	d1e3      	bne.n	8021820 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 8021858:	4b2c      	ldr	r3, [pc, #176]	; (802190c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 802185a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802185c:	881b      	ldrh	r3, [r3, #0]
 802185e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021860:	1a9b      	subs	r3, r3, r2
 8021862:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021866:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021868:	442b      	add	r3, r5
 802186a:	4418      	add	r0, r3
 802186c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802186e:	3401      	adds	r4, #1
 8021870:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8021874:	42a3      	cmp	r3, r4
 8021876:	940b      	str	r4, [sp, #44]	; 0x2c
 8021878:	4491      	add	r9, r2
 802187a:	d191      	bne.n	80217a0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 802187c:	4b20      	ldr	r3, [pc, #128]	; (8021900 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 802187e:	6818      	ldr	r0, [r3, #0]
 8021880:	6803      	ldr	r3, [r0, #0]
 8021882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021884:	4798      	blx	r3
 8021886:	b013      	add	sp, #76	; 0x4c
 8021888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802188c:	4798      	blx	r3
 802188e:	4602      	mov	r2, r0
 8021890:	2a01      	cmp	r2, #1
 8021892:	d124      	bne.n	80218de <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1fa>
 8021894:	4b1e      	ldr	r3, [pc, #120]	; (8021910 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x22c>)
 8021896:	6818      	ldr	r0, [r3, #0]
 8021898:	b328      	cbz	r0, 80218e6 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x202>
 802189a:	260b      	movs	r6, #11
 802189c:	4b1b      	ldr	r3, [pc, #108]	; (802190c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 802189e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80218a2:	881f      	ldrh	r7, [r3, #0]
 80218a4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80218a8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80218ac:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 80218b0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80218b4:	9208      	str	r2, [sp, #32]
 80218b6:	9205      	str	r2, [sp, #20]
 80218b8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80218bc:	f8cd a010 	str.w	sl, [sp, #16]
 80218c0:	4642      	mov	r2, r8
 80218c2:	4649      	mov	r1, r9
 80218c4:	e9cd 7606 	strd	r7, r6, [sp, #24]
 80218c8:	9503      	str	r5, [sp, #12]
 80218ca:	9400      	str	r4, [sp, #0]
 80218cc:	f7fb fcca 	bl	801d264 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80218d0:	b013      	add	sp, #76	; 0x4c
 80218d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218d6:	4608      	mov	r0, r1
 80218d8:	4798      	blx	r3
 80218da:	4602      	mov	r2, r0
 80218dc:	e7d8      	b.n	8021890 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ac>
 80218de:	4b08      	ldr	r3, [pc, #32]	; (8021900 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 80218e0:	6818      	ldr	r0, [r3, #0]
 80218e2:	6802      	ldr	r2, [r0, #0]
 80218e4:	e743      	b.n	802176e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 80218e6:	4b0b      	ldr	r3, [pc, #44]	; (8021914 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x230>)
 80218e8:	4a0b      	ldr	r2, [pc, #44]	; (8021918 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 80218ea:	217c      	movs	r1, #124	; 0x7c
 80218ec:	480b      	ldr	r0, [pc, #44]	; (802191c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 80218ee:	f006 fbf3 	bl	80280d8 <__assert_func>
 80218f2:	4b0b      	ldr	r3, [pc, #44]	; (8021920 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 80218f4:	4a0b      	ldr	r2, [pc, #44]	; (8021924 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 80218f6:	f240 417d 	movw	r1, #1149	; 0x47d
 80218fa:	480b      	ldr	r0, [pc, #44]	; (8021928 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 80218fc:	f006 fbec 	bl	80280d8 <__assert_func>
 8021900:	20198158 	.word	0x20198158
 8021904:	08001edd 	.word	0x08001edd
 8021908:	0801678d 	.word	0x0801678d
 802190c:	20198152 	.word	0x20198152
 8021910:	20198388 	.word	0x20198388
 8021914:	0802af18 	.word	0x0802af18
 8021918:	0802b720 	.word	0x0802b720
 802191c:	0802af40 	.word	0x0802af40
 8021920:	0802b030 	.word	0x0802b030
 8021924:	0802bddc 	.word	0x0802bddc
 8021928:	0802afbc 	.word	0x0802afbc

0802192c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>:
 802192c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021930:	4617      	mov	r7, r2
 8021932:	b095      	sub	sp, #84	; 0x54
 8021934:	8812      	ldrh	r2, [r2, #0]
 8021936:	4688      	mov	r8, r1
 8021938:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 802193c:	2a01      	cmp	r2, #1
 802193e:	461c      	mov	r4, r3
 8021940:	910d      	str	r1, [sp, #52]	; 0x34
 8021942:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021944:	f040 8105 	bne.w	8021b52 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x226>
 8021948:	6820      	ldr	r0, [r4, #0]
 802194a:	6861      	ldr	r1, [r4, #4]
 802194c:	aa10      	add	r2, sp, #64	; 0x40
 802194e:	c203      	stmia	r2!, {r0, r1}
 8021950:	6818      	ldr	r0, [r3, #0]
 8021952:	6859      	ldr	r1, [r3, #4]
 8021954:	aa12      	add	r2, sp, #72	; 0x48
 8021956:	c203      	stmia	r2!, {r0, r1}
 8021958:	a810      	add	r0, sp, #64	; 0x40
 802195a:	f7f5 fef5 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802195e:	4621      	mov	r1, r4
 8021960:	a812      	add	r0, sp, #72	; 0x48
 8021962:	f7f5 ff19 	bl	8017798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021966:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 802196a:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 802196e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8021972:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8021976:	487a      	ldr	r0, [pc, #488]	; (8021b60 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021978:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 802197c:	4422      	add	r2, r4
 802197e:	442b      	add	r3, r5
 8021980:	6800      	ldr	r0, [r0, #0]
 8021982:	fb11 4105 	smlabb	r1, r1, r5, r4
 8021986:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 802198a:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 802198e:	6802      	ldr	r2, [r0, #0]
 8021990:	4c74      	ldr	r4, [pc, #464]	; (8021b64 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 8021992:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8021996:	4488      	add	r8, r1
 8021998:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 802199c:	42a3      	cmp	r3, r4
 802199e:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 80219a2:	910c      	str	r1, [sp, #48]	; 0x30
 80219a4:	f040 809f 	bne.w	8021ae6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 80219a8:	6841      	ldr	r1, [r0, #4]
 80219aa:	4c6f      	ldr	r4, [pc, #444]	; (8021b68 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 80219ac:	680b      	ldr	r3, [r1, #0]
 80219ae:	699b      	ldr	r3, [r3, #24]
 80219b0:	42a3      	cmp	r3, r4
 80219b2:	f040 80c0 	bne.w	8021b36 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20a>
 80219b6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80219b8:	4798      	blx	r3
 80219ba:	4a6c      	ldr	r2, [pc, #432]	; (8021b6c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 80219bc:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 80219c0:	8814      	ldrh	r4, [r2, #0]
 80219c2:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 80219c6:	fb04 2303 	mla	r3, r4, r3, r2
 80219ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80219ce:	4418      	add	r0, r3
 80219d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80219d2:	2b00      	cmp	r3, #0
 80219d4:	dd67      	ble.n	8021aa6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x17a>
 80219d6:	2300      	movs	r3, #0
 80219d8:	f04f 0903 	mov.w	r9, #3
 80219dc:	2104      	movs	r1, #4
 80219de:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80219e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80219e2:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 80219e6:	930e      	str	r3, [sp, #56]	; 0x38
 80219e8:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
 80219ec:	444b      	add	r3, r9
 80219ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80219f0:	b292      	uxth	r2, r2
 80219f2:	fa1f fc85 	uxth.w	ip, r5
 80219f6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80219fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80219fc:	2b00      	cmp	r3, #0
 80219fe:	dd43      	ble.n	8021a88 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x15c>
 8021a00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021a02:	2bff      	cmp	r3, #255	; 0xff
 8021a04:	d057      	beq.n	8021ab6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x18a>
 8021a06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021a08:	1cc5      	adds	r5, r0, #3
 8021a0a:	f108 3eff 	add.w	lr, r8, #4294967295
 8021a0e:	eb00 0a03 	add.w	sl, r0, r3
 8021a12:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8021a16:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 8021a1a:	fb19 1303 	smlabb	r3, r9, r3, r1
 8021a1e:	fb16 f402 	smulbb	r4, r6, r2
 8021a22:	5cfe      	ldrb	r6, [r7, r3]
 8021a24:	443b      	add	r3, r7
 8021a26:	fb06 460c 	mla	r6, r6, ip, r4
 8021a2a:	b2b6      	uxth	r6, r6
 8021a2c:	f815 4c02 	ldrb.w	r4, [r5, #-2]
 8021a30:	f106 0b01 	add.w	fp, r6, #1
 8021a34:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 8021a38:	1236      	asrs	r6, r6, #8
 8021a3a:	fb14 fb02 	smulbb	fp, r4, r2
 8021a3e:	f805 6c03 	strb.w	r6, [r5, #-3]
 8021a42:	785c      	ldrb	r4, [r3, #1]
 8021a44:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8021a48:	fb04 b40c 	mla	r4, r4, ip, fp
 8021a4c:	b2a4      	uxth	r4, r4
 8021a4e:	f104 0b01 	add.w	fp, r4, #1
 8021a52:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8021a56:	1224      	asrs	r4, r4, #8
 8021a58:	fb16 f602 	smulbb	r6, r6, r2
 8021a5c:	f805 4c02 	strb.w	r4, [r5, #-2]
 8021a60:	789b      	ldrb	r3, [r3, #2]
 8021a62:	3503      	adds	r5, #3
 8021a64:	fb03 630c 	mla	r3, r3, ip, r6
 8021a68:	b29b      	uxth	r3, r3
 8021a6a:	1c5c      	adds	r4, r3, #1
 8021a6c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8021a70:	121b      	asrs	r3, r3, #8
 8021a72:	f805 3c04 	strb.w	r3, [r5, #-4]
 8021a76:	45aa      	cmp	sl, r5
 8021a78:	d1cb      	bne.n	8021a12 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xe6>
 8021a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021a7c:	4418      	add	r0, r3
 8021a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a80:	4498      	add	r8, r3
 8021a82:	4b3a      	ldr	r3, [pc, #232]	; (8021b6c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021a84:	881c      	ldrh	r4, [r3, #0]
 8021a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a88:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 8021a8c:	eba4 0e03 	sub.w	lr, r4, r3
 8021a90:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8021a92:	1aed      	subs	r5, r5, r3
 8021a94:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 8021a98:	4418      	add	r0, r3
 8021a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021a9c:	3601      	adds	r6, #1
 8021a9e:	42b3      	cmp	r3, r6
 8021aa0:	960b      	str	r6, [sp, #44]	; 0x2c
 8021aa2:	44a8      	add	r8, r5
 8021aa4:	d1a9      	bne.n	80219fa <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8021aa6:	4b2e      	ldr	r3, [pc, #184]	; (8021b60 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021aa8:	6818      	ldr	r0, [r3, #0]
 8021aaa:	6803      	ldr	r3, [r0, #0]
 8021aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021aae:	4798      	blx	r3
 8021ab0:	b015      	add	sp, #84	; 0x54
 8021ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ab6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021ab8:	1cc4      	adds	r4, r0, #3
 8021aba:	f108 35ff 	add.w	r5, r8, #4294967295
 8021abe:	eb00 0e03 	add.w	lr, r0, r3
 8021ac2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8021ac6:	3403      	adds	r4, #3
 8021ac8:	fb19 1303 	smlabb	r3, r9, r3, r1
 8021acc:	5cfe      	ldrb	r6, [r7, r3]
 8021ace:	443b      	add	r3, r7
 8021ad0:	f804 6c06 	strb.w	r6, [r4, #-6]
 8021ad4:	785e      	ldrb	r6, [r3, #1]
 8021ad6:	f804 6c05 	strb.w	r6, [r4, #-5]
 8021ada:	789b      	ldrb	r3, [r3, #2]
 8021adc:	f804 3c04 	strb.w	r3, [r4, #-4]
 8021ae0:	45a6      	cmp	lr, r4
 8021ae2:	d1ee      	bne.n	8021ac2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x196>
 8021ae4:	e7c9      	b.n	8021a7a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x14e>
 8021ae6:	4798      	blx	r3
 8021ae8:	4603      	mov	r3, r0
 8021aea:	2b01      	cmp	r3, #1
 8021aec:	d127      	bne.n	8021b3e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x212>
 8021aee:	4a20      	ldr	r2, [pc, #128]	; (8021b70 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8021af0:	6810      	ldr	r0, [r2, #0]
 8021af2:	b340      	cbz	r0, 8021b46 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8021af4:	f04f 0c0b 	mov.w	ip, #11
 8021af8:	2600      	movs	r6, #0
 8021afa:	4a1c      	ldr	r2, [pc, #112]	; (8021b6c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021afc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021b00:	8814      	ldrh	r4, [r2, #0]
 8021b02:	fa1f f28a 	uxth.w	r2, sl
 8021b06:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8021b0a:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8021b0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021b10:	9406      	str	r4, [sp, #24]
 8021b12:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 8021b16:	9308      	str	r3, [sp, #32]
 8021b18:	9204      	str	r2, [sp, #16]
 8021b1a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8021b1e:	463a      	mov	r2, r7
 8021b20:	4641      	mov	r1, r8
 8021b22:	f8cd c01c 	str.w	ip, [sp, #28]
 8021b26:	9605      	str	r6, [sp, #20]
 8021b28:	9503      	str	r5, [sp, #12]
 8021b2a:	9400      	str	r4, [sp, #0]
 8021b2c:	f7fb fb9a 	bl	801d264 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8021b30:	b015      	add	sp, #84	; 0x54
 8021b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b36:	4608      	mov	r0, r1
 8021b38:	4798      	blx	r3
 8021b3a:	4603      	mov	r3, r0
 8021b3c:	e7d5      	b.n	8021aea <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1be>
 8021b3e:	4b08      	ldr	r3, [pc, #32]	; (8021b60 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021b40:	6818      	ldr	r0, [r3, #0]
 8021b42:	6802      	ldr	r2, [r0, #0]
 8021b44:	e737      	b.n	80219b6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8021b46:	4b0b      	ldr	r3, [pc, #44]	; (8021b74 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8021b48:	4a0b      	ldr	r2, [pc, #44]	; (8021b78 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8021b4a:	217c      	movs	r1, #124	; 0x7c
 8021b4c:	480b      	ldr	r0, [pc, #44]	; (8021b7c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8021b4e:	f006 fac3 	bl	80280d8 <__assert_func>
 8021b52:	4b0b      	ldr	r3, [pc, #44]	; (8021b80 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8021b54:	4a0b      	ldr	r2, [pc, #44]	; (8021b84 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8021b56:	f240 41c7 	movw	r1, #1223	; 0x4c7
 8021b5a:	480b      	ldr	r0, [pc, #44]	; (8021b88 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8021b5c:	f006 fabc 	bl	80280d8 <__assert_func>
 8021b60:	20198158 	.word	0x20198158
 8021b64:	08001edd 	.word	0x08001edd
 8021b68:	0801678d 	.word	0x0801678d
 8021b6c:	20198152 	.word	0x20198152
 8021b70:	20198388 	.word	0x20198388
 8021b74:	0802af18 	.word	0x0802af18
 8021b78:	0802b720 	.word	0x0802b720
 8021b7c:	0802af40 	.word	0x0802af40
 8021b80:	0802afe0 	.word	0x0802afe0
 8021b84:	0802bc40 	.word	0x0802bc40
 8021b88:	0802afbc 	.word	0x0802afbc

08021b8c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8021b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b90:	4690      	mov	r8, r2
 8021b92:	8812      	ldrh	r2, [r2, #0]
 8021b94:	b095      	sub	sp, #84	; 0x54
 8021b96:	2a01      	cmp	r2, #1
 8021b98:	461c      	mov	r4, r3
 8021b9a:	f89d 907c 	ldrb.w	r9, [sp, #124]	; 0x7c
 8021b9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021ba0:	f040 8107 	bne.w	8021db2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x226>
 8021ba4:	468a      	mov	sl, r1
 8021ba6:	6820      	ldr	r0, [r4, #0]
 8021ba8:	6861      	ldr	r1, [r4, #4]
 8021baa:	aa10      	add	r2, sp, #64	; 0x40
 8021bac:	c203      	stmia	r2!, {r0, r1}
 8021bae:	6818      	ldr	r0, [r3, #0]
 8021bb0:	6859      	ldr	r1, [r3, #4]
 8021bb2:	aa12      	add	r2, sp, #72	; 0x48
 8021bb4:	c203      	stmia	r2!, {r0, r1}
 8021bb6:	a810      	add	r0, sp, #64	; 0x40
 8021bb8:	f7f5 fdc6 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021bbc:	4621      	mov	r1, r4
 8021bbe:	a812      	add	r0, sp, #72	; 0x48
 8021bc0:	f7f5 fdea 	bl	8017798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021bc4:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 8021bc8:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 8021bcc:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8021bd0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8021bd4:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8021bd8:	4879      	ldr	r0, [pc, #484]	; (8021dc0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021bda:	fb11 4105 	smlabb	r1, r1, r5, r4
 8021bde:	4422      	add	r2, r4
 8021be0:	442b      	add	r3, r5
 8021be2:	6800      	ldr	r0, [r0, #0]
 8021be4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8021be8:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8021bec:	6802      	ldr	r2, [r0, #0]
 8021bee:	448a      	add	sl, r1
 8021bf0:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8021bf4:	4c73      	ldr	r4, [pc, #460]	; (8021dc4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 8021bf6:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8021bfa:	910c      	str	r1, [sp, #48]	; 0x30
 8021bfc:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8021c00:	42a3      	cmp	r3, r4
 8021c02:	910e      	str	r1, [sp, #56]	; 0x38
 8021c04:	f040 80a2 	bne.w	8021d4c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c0>
 8021c08:	6841      	ldr	r1, [r0, #4]
 8021c0a:	4c6f      	ldr	r4, [pc, #444]	; (8021dc8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8021c0c:	680b      	ldr	r3, [r1, #0]
 8021c0e:	699b      	ldr	r3, [r3, #24]
 8021c10:	42a3      	cmp	r3, r4
 8021c12:	f040 80c1 	bne.w	8021d98 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x20c>
 8021c16:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8021c18:	4798      	blx	r3
 8021c1a:	4b6c      	ldr	r3, [pc, #432]	; (8021dcc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021c1c:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 8021c20:	881b      	ldrh	r3, [r3, #0]
 8021c22:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8021c26:	fb01 2303 	mla	r3, r1, r3, r2
 8021c2a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021c2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8021c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021c32:	2b00      	cmp	r3, #0
 8021c34:	f340 8082 	ble.w	8021d3c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b0>
 8021c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021c3a:	2b00      	cmp	r3, #0
 8021c3c:	dd7e      	ble.n	8021d3c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b0>
 8021c3e:	2200      	movs	r2, #0
 8021c40:	f04f 0e03 	mov.w	lr, #3
 8021c44:	f04f 0c04 	mov.w	ip, #4
 8021c48:	f1c9 07ff 	rsb	r7, r9, #255	; 0xff
 8021c4c:	009b      	lsls	r3, r3, #2
 8021c4e:	920d      	str	r2, [sp, #52]	; 0x34
 8021c50:	b2bf      	uxth	r7, r7
 8021c52:	930f      	str	r3, [sp, #60]	; 0x3c
 8021c54:	fa1f f289 	uxth.w	r2, r9
 8021c58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021c5a:	4655      	mov	r5, sl
 8021c5c:	1d18      	adds	r0, r3, #4
 8021c5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021c60:	eb0a 0603 	add.w	r6, sl, r3
 8021c64:	e03e      	b.n	8021ce4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8021c66:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 8021c6a:	f810 4c03 	ldrb.w	r4, [r0, #-3]
 8021c6e:	fb13 f307 	smulbb	r3, r3, r7
 8021c72:	fb0b 3302 	mla	r3, fp, r2, r3
 8021c76:	b29b      	uxth	r3, r3
 8021c78:	f103 0b01 	add.w	fp, r3, #1
 8021c7c:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8021c80:	121b      	asrs	r3, r3, #8
 8021c82:	fb14 f407 	smulbb	r4, r4, r7
 8021c86:	f800 3c04 	strb.w	r3, [r0, #-4]
 8021c8a:	784b      	ldrb	r3, [r1, #1]
 8021c8c:	f810 bc02 	ldrb.w	fp, [r0, #-2]
 8021c90:	fb03 4302 	mla	r3, r3, r2, r4
 8021c94:	b29b      	uxth	r3, r3
 8021c96:	1c5c      	adds	r4, r3, #1
 8021c98:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8021c9c:	121b      	asrs	r3, r3, #8
 8021c9e:	fb1b fb07 	smulbb	fp, fp, r7
 8021ca2:	f800 3c03 	strb.w	r3, [r0, #-3]
 8021ca6:	788c      	ldrb	r4, [r1, #2]
 8021ca8:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8021cac:	fb04 b402 	mla	r4, r4, r2, fp
 8021cb0:	b2a4      	uxth	r4, r4
 8021cb2:	f104 0b01 	add.w	fp, r4, #1
 8021cb6:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8021cba:	1224      	asrs	r4, r4, #8
 8021cbc:	fb13 fb07 	smulbb	fp, r3, r7
 8021cc0:	f800 4c02 	strb.w	r4, [r0, #-2]
 8021cc4:	78cb      	ldrb	r3, [r1, #3]
 8021cc6:	42ae      	cmp	r6, r5
 8021cc8:	fb03 b302 	mla	r3, r3, r2, fp
 8021ccc:	b29b      	uxth	r3, r3
 8021cce:	f103 0101 	add.w	r1, r3, #1
 8021cd2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021cd6:	ea4f 2323 	mov.w	r3, r3, asr #8
 8021cda:	f800 3c01 	strb.w	r3, [r0, #-1]
 8021cde:	f100 0004 	add.w	r0, r0, #4
 8021ce2:	d018      	beq.n	8021d16 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x18a>
 8021ce4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8021ce8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021cec:	fb1e c303 	smlabb	r3, lr, r3, ip
 8021cf0:	eb08 0103 	add.w	r1, r8, r3
 8021cf4:	f818 b003 	ldrb.w	fp, [r8, r3]
 8021cf8:	d1b5      	bne.n	8021c66 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xda>
 8021cfa:	f800 bc04 	strb.w	fp, [r0, #-4]
 8021cfe:	784b      	ldrb	r3, [r1, #1]
 8021d00:	42ae      	cmp	r6, r5
 8021d02:	f800 3c03 	strb.w	r3, [r0, #-3]
 8021d06:	788b      	ldrb	r3, [r1, #2]
 8021d08:	f100 0004 	add.w	r0, r0, #4
 8021d0c:	f800 9c05 	strb.w	r9, [r0, #-5]
 8021d10:	f800 3c06 	strb.w	r3, [r0, #-6]
 8021d14:	d1e6      	bne.n	8021ce4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8021d16:	4b2d      	ldr	r3, [pc, #180]	; (8021dcc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021d18:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021d1a:	881b      	ldrh	r3, [r3, #0]
 8021d1c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021d1e:	1a1b      	subs	r3, r3, r0
 8021d20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021d24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021d26:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021d28:	441c      	add	r4, r3
 8021d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021d2c:	3001      	adds	r0, #1
 8021d2e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8021d32:	4283      	cmp	r3, r0
 8021d34:	900d      	str	r0, [sp, #52]	; 0x34
 8021d36:	940b      	str	r4, [sp, #44]	; 0x2c
 8021d38:	448a      	add	sl, r1
 8021d3a:	d18d      	bne.n	8021c58 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xcc>
 8021d3c:	4b20      	ldr	r3, [pc, #128]	; (8021dc0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021d3e:	6818      	ldr	r0, [r3, #0]
 8021d40:	6803      	ldr	r3, [r0, #0]
 8021d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d44:	4798      	blx	r3
 8021d46:	b015      	add	sp, #84	; 0x54
 8021d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d4c:	4798      	blx	r3
 8021d4e:	2801      	cmp	r0, #1
 8021d50:	d125      	bne.n	8021d9e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x212>
 8021d52:	4b1f      	ldr	r3, [pc, #124]	; (8021dd0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8021d54:	6818      	ldr	r0, [r3, #0]
 8021d56:	b330      	cbz	r0, 8021da6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8021d58:	2502      	movs	r5, #2
 8021d5a:	240b      	movs	r4, #11
 8021d5c:	2600      	movs	r6, #0
 8021d5e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8021d62:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8021d66:	9302      	str	r3, [sp, #8]
 8021d68:	4b18      	ldr	r3, [pc, #96]	; (8021dcc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021d6a:	9201      	str	r2, [sp, #4]
 8021d6c:	881b      	ldrh	r3, [r3, #0]
 8021d6e:	9508      	str	r5, [sp, #32]
 8021d70:	9407      	str	r4, [sp, #28]
 8021d72:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8021d76:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 8021d7a:	9306      	str	r3, [sp, #24]
 8021d7c:	f8cd 9010 	str.w	r9, [sp, #16]
 8021d80:	4642      	mov	r2, r8
 8021d82:	4651      	mov	r1, sl
 8021d84:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8021d88:	9605      	str	r6, [sp, #20]
 8021d8a:	9503      	str	r5, [sp, #12]
 8021d8c:	9400      	str	r4, [sp, #0]
 8021d8e:	f7fb fa69 	bl	801d264 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8021d92:	b015      	add	sp, #84	; 0x54
 8021d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d98:	4608      	mov	r0, r1
 8021d9a:	4798      	blx	r3
 8021d9c:	e7d7      	b.n	8021d4e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8021d9e:	4b08      	ldr	r3, [pc, #32]	; (8021dc0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021da0:	6818      	ldr	r0, [r3, #0]
 8021da2:	6802      	ldr	r2, [r0, #0]
 8021da4:	e737      	b.n	8021c16 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8021da6:	4b0b      	ldr	r3, [pc, #44]	; (8021dd4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8021da8:	4a0b      	ldr	r2, [pc, #44]	; (8021dd8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8021daa:	217c      	movs	r1, #124	; 0x7c
 8021dac:	480b      	ldr	r0, [pc, #44]	; (8021ddc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8021dae:	f006 f993 	bl	80280d8 <__assert_func>
 8021db2:	4b0b      	ldr	r3, [pc, #44]	; (8021de0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8021db4:	4a0b      	ldr	r2, [pc, #44]	; (8021de4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8021db6:	f240 5109 	movw	r1, #1289	; 0x509
 8021dba:	480b      	ldr	r0, [pc, #44]	; (8021de8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8021dbc:	f006 f98c 	bl	80280d8 <__assert_func>
 8021dc0:	20198158 	.word	0x20198158
 8021dc4:	08001edd 	.word	0x08001edd
 8021dc8:	0801678d 	.word	0x0801678d
 8021dcc:	20198152 	.word	0x20198152
 8021dd0:	20198388 	.word	0x20198388
 8021dd4:	0802af18 	.word	0x0802af18
 8021dd8:	0802b720 	.word	0x0802b720
 8021ddc:	0802af40 	.word	0x0802af40
 8021de0:	0802afe0 	.word	0x0802afe0
 8021de4:	0802bcc8 	.word	0x0802bcc8
 8021de8:	0802afbc 	.word	0x0802afbc

08021dec <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8021dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021df0:	4617      	mov	r7, r2
 8021df2:	8812      	ldrh	r2, [r2, #0]
 8021df4:	b095      	sub	sp, #84	; 0x54
 8021df6:	461c      	mov	r4, r3
 8021df8:	f89d 907c 	ldrb.w	r9, [sp, #124]	; 0x7c
 8021dfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021dfe:	2a00      	cmp	r2, #0
 8021e00:	f040 8112 	bne.w	8022028 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>
 8021e04:	4688      	mov	r8, r1
 8021e06:	6820      	ldr	r0, [r4, #0]
 8021e08:	6861      	ldr	r1, [r4, #4]
 8021e0a:	aa10      	add	r2, sp, #64	; 0x40
 8021e0c:	c203      	stmia	r2!, {r0, r1}
 8021e0e:	6818      	ldr	r0, [r3, #0]
 8021e10:	6859      	ldr	r1, [r3, #4]
 8021e12:	aa12      	add	r2, sp, #72	; 0x48
 8021e14:	c203      	stmia	r2!, {r0, r1}
 8021e16:	a810      	add	r0, sp, #64	; 0x40
 8021e18:	f7f5 fc96 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021e1c:	4621      	mov	r1, r4
 8021e1e:	a812      	add	r0, sp, #72	; 0x48
 8021e20:	f7f5 fcba 	bl	8017798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021e24:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 8021e28:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 8021e2c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8021e30:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8021e34:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8021e38:	487f      	ldr	r0, [pc, #508]	; (8022038 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8021e3a:	fb11 4105 	smlabb	r1, r1, r5, r4
 8021e3e:	4422      	add	r2, r4
 8021e40:	442b      	add	r3, r5
 8021e42:	6800      	ldr	r0, [r0, #0]
 8021e44:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8021e48:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8021e4c:	6802      	ldr	r2, [r0, #0]
 8021e4e:	4488      	add	r8, r1
 8021e50:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8021e54:	4c79      	ldr	r4, [pc, #484]	; (802203c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8021e56:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8021e5a:	910c      	str	r1, [sp, #48]	; 0x30
 8021e5c:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8021e60:	42a3      	cmp	r3, r4
 8021e62:	910e      	str	r1, [sp, #56]	; 0x38
 8021e64:	f040 80ab 	bne.w	8021fbe <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d2>
 8021e68:	6841      	ldr	r1, [r0, #4]
 8021e6a:	4c75      	ldr	r4, [pc, #468]	; (8022040 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8021e6c:	680b      	ldr	r3, [r1, #0]
 8021e6e:	699b      	ldr	r3, [r3, #24]
 8021e70:	42a3      	cmp	r3, r4
 8021e72:	f040 80cb 	bne.w	802200c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x220>
 8021e76:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8021e78:	4798      	blx	r3
 8021e7a:	4b72      	ldr	r3, [pc, #456]	; (8022044 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8021e7c:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 8021e80:	881b      	ldrh	r3, [r3, #0]
 8021e82:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8021e86:	fb01 2303 	mla	r3, r1, r3, r2
 8021e8a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021e8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8021e90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021e92:	2b00      	cmp	r3, #0
 8021e94:	f340 808b 	ble.w	8021fae <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8021e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e9a:	2b00      	cmp	r3, #0
 8021e9c:	f340 8087 	ble.w	8021fae <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8021ea0:	2200      	movs	r2, #0
 8021ea2:	f04f 0c04 	mov.w	ip, #4
 8021ea6:	009b      	lsls	r3, r3, #2
 8021ea8:	920d      	str	r2, [sp, #52]	; 0x34
 8021eaa:	930f      	str	r3, [sp, #60]	; 0x3c
 8021eac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021eae:	4645      	mov	r5, r8
 8021eb0:	1d1c      	adds	r4, r3, #4
 8021eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021eb4:	eb08 0e03 	add.w	lr, r8, r3
 8021eb8:	e048      	b.n	8021f4c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 8021eba:	fb09 f303 	mul.w	r3, r9, r3
 8021ebe:	1c5a      	adds	r2, r3, #1
 8021ec0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021ec4:	121b      	asrs	r3, r3, #8
 8021ec6:	b2d8      	uxtb	r0, r3
 8021ec8:	43c1      	mvns	r1, r0
 8021eca:	b29b      	uxth	r3, r3
 8021ecc:	fb1a f203 	smulbb	r2, sl, r3
 8021ed0:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8021ed4:	b2c9      	uxtb	r1, r1
 8021ed6:	fb0a 2a01 	mla	sl, sl, r1, r2
 8021eda:	fa1f fa8a 	uxth.w	sl, sl
 8021ede:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 8021ee2:	f10a 0b01 	add.w	fp, sl, #1
 8021ee6:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8021eea:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021eee:	fb12 fb01 	smulbb	fp, r2, r1
 8021ef2:	f804 ac04 	strb.w	sl, [r4, #-4]
 8021ef6:	7872      	ldrb	r2, [r6, #1]
 8021ef8:	f814 ac02 	ldrb.w	sl, [r4, #-2]
 8021efc:	fb02 b203 	mla	r2, r2, r3, fp
 8021f00:	b292      	uxth	r2, r2
 8021f02:	f102 0b01 	add.w	fp, r2, #1
 8021f06:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8021f0a:	fb1a fa01 	smulbb	sl, sl, r1
 8021f0e:	1212      	asrs	r2, r2, #8
 8021f10:	f804 2c03 	strb.w	r2, [r4, #-3]
 8021f14:	78b1      	ldrb	r1, [r6, #2]
 8021f16:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8021f1a:	fb01 a103 	mla	r1, r1, r3, sl
 8021f1e:	fb12 f303 	smulbb	r3, r2, r3
 8021f22:	b289      	uxth	r1, r1
 8021f24:	b29b      	uxth	r3, r3
 8021f26:	f101 0a01 	add.w	sl, r1, #1
 8021f2a:	1c5e      	adds	r6, r3, #1
 8021f2c:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 8021f30:	4402      	add	r2, r0
 8021f32:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8021f36:	1209      	asrs	r1, r1, #8
 8021f38:	eba2 2313 	sub.w	r3, r2, r3, lsr #8
 8021f3c:	f804 1c02 	strb.w	r1, [r4, #-2]
 8021f40:	f804 3c01 	strb.w	r3, [r4, #-1]
 8021f44:	45ae      	cmp	lr, r5
 8021f46:	f104 0404 	add.w	r4, r4, #4
 8021f4a:	d01c      	beq.n	8021f86 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x19a>
 8021f4c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8021f50:	fb1c c202 	smlabb	r2, ip, r2, ip
 8021f54:	18be      	adds	r6, r7, r2
 8021f56:	78f3      	ldrb	r3, [r6, #3]
 8021f58:	2b00      	cmp	r3, #0
 8021f5a:	d0f3      	beq.n	8021f44 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8021f5c:	2bff      	cmp	r3, #255	; 0xff
 8021f5e:	f817 a002 	ldrb.w	sl, [r7, r2]
 8021f62:	d1aa      	bne.n	8021eba <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8021f64:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021f68:	d1a7      	bne.n	8021eba <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8021f6a:	f804 ac04 	strb.w	sl, [r4, #-4]
 8021f6e:	7873      	ldrb	r3, [r6, #1]
 8021f70:	45ae      	cmp	lr, r5
 8021f72:	f804 3c03 	strb.w	r3, [r4, #-3]
 8021f76:	78b3      	ldrb	r3, [r6, #2]
 8021f78:	f104 0404 	add.w	r4, r4, #4
 8021f7c:	f804 9c05 	strb.w	r9, [r4, #-5]
 8021f80:	f804 3c06 	strb.w	r3, [r4, #-6]
 8021f84:	d1e2      	bne.n	8021f4c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 8021f86:	4b2f      	ldr	r3, [pc, #188]	; (8022044 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8021f88:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021f8a:	881b      	ldrh	r3, [r3, #0]
 8021f8c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021f8e:	1a5b      	subs	r3, r3, r1
 8021f90:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021f94:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021f96:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021f98:	4418      	add	r0, r3
 8021f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021f9c:	3101      	adds	r1, #1
 8021f9e:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 8021fa2:	428b      	cmp	r3, r1
 8021fa4:	910d      	str	r1, [sp, #52]	; 0x34
 8021fa6:	900b      	str	r0, [sp, #44]	; 0x2c
 8021fa8:	4490      	add	r8, r2
 8021faa:	f47f af7f 	bne.w	8021eac <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xc0>
 8021fae:	4b22      	ldr	r3, [pc, #136]	; (8022038 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8021fb0:	6818      	ldr	r0, [r3, #0]
 8021fb2:	6803      	ldr	r3, [r0, #0]
 8021fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021fb6:	4798      	blx	r3
 8021fb8:	b015      	add	sp, #84	; 0x54
 8021fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fbe:	4798      	blx	r3
 8021fc0:	4603      	mov	r3, r0
 8021fc2:	2b01      	cmp	r3, #1
 8021fc4:	d126      	bne.n	8022014 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x228>
 8021fc6:	4a20      	ldr	r2, [pc, #128]	; (8022048 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8021fc8:	6810      	ldr	r0, [r2, #0]
 8021fca:	b338      	cbz	r0, 802201c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x230>
 8021fcc:	f04f 0c02 	mov.w	ip, #2
 8021fd0:	260b      	movs	r6, #11
 8021fd2:	4a1c      	ldr	r2, [pc, #112]	; (8022044 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8021fd4:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8021fd8:	8814      	ldrh	r4, [r2, #0]
 8021fda:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8021fde:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8021fe2:	9406      	str	r4, [sp, #24]
 8021fe4:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 8021fe8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8021fec:	9305      	str	r3, [sp, #20]
 8021fee:	f8cd 9010 	str.w	r9, [sp, #16]
 8021ff2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8021ff6:	463a      	mov	r2, r7
 8021ff8:	4641      	mov	r1, r8
 8021ffa:	e9cd 6c07 	strd	r6, ip, [sp, #28]
 8021ffe:	9503      	str	r5, [sp, #12]
 8022000:	9400      	str	r4, [sp, #0]
 8022002:	f7fb f92f 	bl	801d264 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8022006:	b015      	add	sp, #84	; 0x54
 8022008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802200c:	4608      	mov	r0, r1
 802200e:	4798      	blx	r3
 8022010:	4603      	mov	r3, r0
 8022012:	e7d6      	b.n	8021fc2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d6>
 8022014:	4b08      	ldr	r3, [pc, #32]	; (8022038 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8022016:	6818      	ldr	r0, [r3, #0]
 8022018:	6802      	ldr	r2, [r0, #0]
 802201a:	e72c      	b.n	8021e76 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 802201c:	4b0b      	ldr	r3, [pc, #44]	; (802204c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x260>)
 802201e:	4a0c      	ldr	r2, [pc, #48]	; (8022050 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x264>)
 8022020:	217c      	movs	r1, #124	; 0x7c
 8022022:	480c      	ldr	r0, [pc, #48]	; (8022054 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x268>)
 8022024:	f006 f858 	bl	80280d8 <__assert_func>
 8022028:	4b0b      	ldr	r3, [pc, #44]	; (8022058 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x26c>)
 802202a:	4a0c      	ldr	r2, [pc, #48]	; (802205c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x270>)
 802202c:	f240 514d 	movw	r1, #1357	; 0x54d
 8022030:	480b      	ldr	r0, [pc, #44]	; (8022060 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x274>)
 8022032:	f006 f851 	bl	80280d8 <__assert_func>
 8022036:	bf00      	nop
 8022038:	20198158 	.word	0x20198158
 802203c:	08001edd 	.word	0x08001edd
 8022040:	0801678d 	.word	0x0801678d
 8022044:	20198152 	.word	0x20198152
 8022048:	20198388 	.word	0x20198388
 802204c:	0802af18 	.word	0x0802af18
 8022050:	0802b720 	.word	0x0802b720
 8022054:	0802af40 	.word	0x0802af40
 8022058:	0802b030 	.word	0x0802b030
 802205c:	0802be68 	.word	0x0802be68
 8022060:	0802afbc 	.word	0x0802afbc

08022064 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022064:	b570      	push	{r4, r5, r6, lr}
 8022066:	7814      	ldrb	r4, [r2, #0]
 8022068:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802206c:	2c01      	cmp	r4, #1
 802206e:	d00e      	beq.n	802208e <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8022070:	d302      	bcc.n	8022078 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x14>
 8022072:	2c02      	cmp	r4, #2
 8022074:	d02a      	beq.n	80220cc <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x68>
 8022076:	bd70      	pop	{r4, r5, r6, pc}
 8022078:	7a04      	ldrb	r4, [r0, #8]
 802207a:	2c01      	cmp	r4, #1
 802207c:	d021      	beq.n	80220c2 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x5e>
 802207e:	d311      	bcc.n	80220a4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8022080:	2c02      	cmp	r4, #2
 8022082:	d12a      	bne.n	80220da <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x76>
 8022084:	9505      	str	r5, [sp, #20]
 8022086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802208a:	f7ff beaf 	b.w	8021dec <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>
 802208e:	7a04      	ldrb	r4, [r0, #8]
 8022090:	2c01      	cmp	r4, #1
 8022092:	d011      	beq.n	80220b8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8022094:	d30b      	bcc.n	80220ae <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x4a>
 8022096:	2c02      	cmp	r4, #2
 8022098:	d126      	bne.n	80220e8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 802209a:	9505      	str	r5, [sp, #20]
 802209c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80220a0:	f7ff bd74 	b.w	8021b8c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>
 80220a4:	9505      	str	r5, [sp, #20]
 80220a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80220aa:	f7ff b88f 	b.w	80211cc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>
 80220ae:	9505      	str	r5, [sp, #20]
 80220b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80220b4:	f7ff b9be 	b.w	8021434 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>
 80220b8:	9505      	str	r5, [sp, #20]
 80220ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80220be:	f7ff bc35 	b.w	802192c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>
 80220c2:	9505      	str	r5, [sp, #20]
 80220c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80220c8:	f7ff bb0c 	b.w	80216e4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>
 80220cc:	4b0a      	ldr	r3, [pc, #40]	; (80220f8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x94>)
 80220ce:	4a0b      	ldr	r2, [pc, #44]	; (80220fc <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 80220d0:	f240 3199 	movw	r1, #921	; 0x399
 80220d4:	480a      	ldr	r0, [pc, #40]	; (8022100 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 80220d6:	f005 ffff 	bl	80280d8 <__assert_func>
 80220da:	4b0a      	ldr	r3, [pc, #40]	; (8022104 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>)
 80220dc:	4a07      	ldr	r2, [pc, #28]	; (80220fc <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 80220de:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 80220e2:	4807      	ldr	r0, [pc, #28]	; (8022100 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 80220e4:	f005 fff8 	bl	80280d8 <__assert_func>
 80220e8:	4b06      	ldr	r3, [pc, #24]	; (8022104 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>)
 80220ea:	4a04      	ldr	r2, [pc, #16]	; (80220fc <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 80220ec:	f240 31b9 	movw	r1, #953	; 0x3b9
 80220f0:	4803      	ldr	r0, [pc, #12]	; (8022100 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 80220f2:	f005 fff1 	bl	80280d8 <__assert_func>
 80220f6:	bf00      	nop
 80220f8:	0802ad98 	.word	0x0802ad98
 80220fc:	0802b760 	.word	0x0802b760
 8022100:	0802afbc 	.word	0x0802afbc
 8022104:	0802add4 	.word	0x0802add4

08022108 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802210c:	b089      	sub	sp, #36	; 0x24
 802210e:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
 8022112:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022114:	b13c      	cbz	r4, 8022126 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 8022116:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 802211a:	2e00      	cmp	r6, #0
 802211c:	dd03      	ble.n	8022126 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 802211e:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 8022122:	2e00      	cmp	r6, #0
 8022124:	dc02      	bgt.n	802212c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x24>
 8022126:	b009      	add	sp, #36	; 0x24
 8022128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802212c:	f04f 0800 	mov.w	r8, #0
 8022130:	4606      	mov	r6, r0
 8022132:	f362 080f 	bfi	r8, r2, #0, #16
 8022136:	4608      	mov	r0, r1
 8022138:	460f      	mov	r7, r1
 802213a:	f363 481f 	bfi	r8, r3, #16, #16
 802213e:	f7f8 f8cb 	bl	801a2d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022142:	4681      	mov	r9, r0
 8022144:	4638      	mov	r0, r7
 8022146:	f7f8 f8fb 	bl	801a340 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802214a:	2300      	movs	r3, #0
 802214c:	f369 030f 	bfi	r3, r9, #0, #16
 8022150:	f360 431f 	bfi	r3, r0, #16, #16
 8022154:	4638      	mov	r0, r7
 8022156:	e9cd 8302 	strd	r8, r3, [sp, #8]
 802215a:	f7f8 f9a9 	bl	801a4b0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802215e:	280b      	cmp	r0, #11
 8022160:	d023      	beq.n	80221aa <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 8022162:	aa04      	add	r2, sp, #16
 8022164:	f10d 0808 	add.w	r8, sp, #8
 8022168:	e898 0003 	ldmia.w	r8, {r0, r1}
 802216c:	e882 0003 	stmia.w	r2, {r0, r1}
 8022170:	6828      	ldr	r0, [r5, #0]
 8022172:	6869      	ldr	r1, [r5, #4]
 8022174:	ab06      	add	r3, sp, #24
 8022176:	c303      	stmia	r3!, {r0, r1}
 8022178:	4610      	mov	r0, r2
 802217a:	f7f5 fae5 	bl	8017748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802217e:	4641      	mov	r1, r8
 8022180:	a806      	add	r0, sp, #24
 8022182:	f7f5 fb09 	bl	8017798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022186:	4638      	mov	r0, r7
 8022188:	f7f8 f90e 	bl	801a3a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 802218c:	4680      	mov	r8, r0
 802218e:	4638      	mov	r0, r7
 8022190:	f7f8 f98e 	bl	801a4b0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022194:	280d      	cmp	r0, #13
 8022196:	d871      	bhi.n	802227c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 8022198:	e8df f000 	tbb	[pc, r0]
 802219c:	70176163 	.word	0x70176163
 80221a0:	70707070 	.word	0x70707070
 80221a4:	70707070 	.word	0x70707070
 80221a8:	6570      	.short	0x6570
 80221aa:	4638      	mov	r0, r7
 80221ac:	f7f8 f8fc 	bl	801a3a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 80221b0:	4680      	mov	r8, r0
 80221b2:	4638      	mov	r0, r7
 80221b4:	f7f8 f928 	bl	801a408 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80221b8:	4641      	mov	r1, r8
 80221ba:	4602      	mov	r2, r0
 80221bc:	e9cd 5400 	strd	r5, r4, [sp]
 80221c0:	4630      	mov	r0, r6
 80221c2:	ab02      	add	r3, sp, #8
 80221c4:	f7ff ff4e 	bl	8022064 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80221c8:	e7ad      	b.n	8022126 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 80221ca:	2710      	movs	r7, #16
 80221cc:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80221d0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80221d4:	4d2c      	ldr	r5, [pc, #176]	; (8022288 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>)
 80221d6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80221da:	440a      	add	r2, r1
 80221dc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80221e0:	6828      	ldr	r0, [r5, #0]
 80221e2:	440b      	add	r3, r1
 80221e4:	f8ad 2018 	strh.w	r2, [sp, #24]
 80221e8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80221ec:	2800      	cmp	r0, #0
 80221ee:	d03f      	beq.n	8022270 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x168>
 80221f0:	f7fb f810 	bl	801d214 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 80221f4:	6833      	ldr	r3, [r6, #0]
 80221f6:	4630      	mov	r0, r6
 80221f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80221fa:	4798      	blx	r3
 80221fc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8022200:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8022204:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8022208:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 802220c:	f7f8 fd0c 	bl	801ac28 <nema_set_clip>
 8022210:	2200      	movs	r2, #0
 8022212:	4623      	mov	r3, r4
 8022214:	2600      	movs	r6, #0
 8022216:	f04f 34ff 	mov.w	r4, #4294967295
 802221a:	4611      	mov	r1, r2
 802221c:	4610      	mov	r0, r2
 802221e:	f7f8 fd37 	bl	801ac90 <nema_rgba>
 8022222:	f7fa ff0f 	bl	801d044 <nema_set_const_color>
 8022226:	f04f 33ff 	mov.w	r3, #4294967295
 802222a:	2201      	movs	r2, #1
 802222c:	2100      	movs	r1, #0
 802222e:	4817      	ldr	r0, [pc, #92]	; (802228c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x184>)
 8022230:	f7fa fb42 	bl	801c8b8 <nema_set_blend>
 8022234:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8022238:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 802223c:	463b      	mov	r3, r7
 802223e:	4640      	mov	r0, r8
 8022240:	e9cd 4600 	strd	r4, r6, [sp]
 8022244:	f7f8 fd2c 	bl	801aca0 <nema_bind_src_tex>
 8022248:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 802224c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8022250:	f7f8 fe66 	bl	801af20 <nema_blit>
 8022254:	6828      	ldr	r0, [r5, #0]
 8022256:	b158      	cbz	r0, 8022270 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x168>
 8022258:	f7fa fffc 	bl	801d254 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 802225c:	e763      	b.n	8022126 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 802225e:	2739      	movs	r7, #57	; 0x39
 8022260:	e7b4      	b.n	80221cc <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8022262:	2704      	movs	r7, #4
 8022264:	e7b2      	b.n	80221cc <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8022266:	4638      	mov	r0, r7
 8022268:	f7f8 f8ce 	bl	801a408 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 802226c:	7807      	ldrb	r7, [r0, #0]
 802226e:	e7ad      	b.n	80221cc <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8022270:	4b07      	ldr	r3, [pc, #28]	; (8022290 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x188>)
 8022272:	4a08      	ldr	r2, [pc, #32]	; (8022294 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>)
 8022274:	217c      	movs	r1, #124	; 0x7c
 8022276:	4808      	ldr	r0, [pc, #32]	; (8022298 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x190>)
 8022278:	f005 ff2e 	bl	80280d8 <__assert_func>
 802227c:	4b07      	ldr	r3, [pc, #28]	; (802229c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x194>)
 802227e:	4a08      	ldr	r2, [pc, #32]	; (80222a0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x198>)
 8022280:	2174      	movs	r1, #116	; 0x74
 8022282:	4808      	ldr	r0, [pc, #32]	; (80222a4 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x19c>)
 8022284:	f005 ff28 	bl	80280d8 <__assert_func>
 8022288:	20198388 	.word	0x20198388
 802228c:	08000504 	.word	0x08000504
 8022290:	0802af18 	.word	0x0802af18
 8022294:	0802b720 	.word	0x0802b720
 8022298:	0802af40 	.word	0x0802af40
 802229c:	0802ae10 	.word	0x0802ae10
 80222a0:	0802b854 	.word	0x0802b854
 80222a4:	0802afbc 	.word	0x0802afbc

080222a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80222a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222ac:	b089      	sub	sp, #36	; 0x24
 80222ae:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80222b0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80222b2:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 80222b6:	9104      	str	r1, [sp, #16]
 80222b8:	8809      	ldrh	r1, [r1, #0]
 80222ba:	fb07 6c04 	mla	ip, r7, r4, r6
 80222be:	10c8      	asrs	r0, r1, #3
 80222c0:	120d      	asrs	r5, r1, #8
 80222c2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80222c6:	f005 0af8 	and.w	sl, r5, #248	; 0xf8
 80222ca:	9002      	str	r0, [sp, #8]
 80222cc:	00c9      	lsls	r1, r1, #3
 80222ce:	0200      	lsls	r0, r0, #8
 80222d0:	b2c9      	uxtb	r1, r1
 80222d2:	4690      	mov	r8, r2
 80222d4:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80222d8:	469e      	mov	lr, r3
 80222da:	eb02 030c 	add.w	r3, r2, ip
 80222de:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 80222e2:	4308      	orrs	r0, r1
 80222e4:	2f00      	cmp	r7, #0
 80222e6:	9103      	str	r1, [sp, #12]
 80222e8:	9305      	str	r3, [sp, #20]
 80222ea:	9007      	str	r0, [sp, #28]
 80222ec:	f107 0501 	add.w	r5, r7, #1
 80222f0:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	; 0x4c
 80222f4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80222f8:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 80222fc:	9200      	str	r2, [sp, #0]
 80222fe:	db02      	blt.n	8022306 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x5e>
 8022300:	42be      	cmp	r6, r7
 8022302:	f300 80a3 	bgt.w	802244c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1a4>
 8022306:	fa5f fb80 	uxtb.w	fp, r0
 802230a:	af07      	add	r7, sp, #28
 802230c:	465a      	mov	r2, fp
 802230e:	46b8      	mov	r8, r7
 8022310:	2d00      	cmp	r5, #0
 8022312:	db01      	blt.n	8022318 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x70>
 8022314:	42ae      	cmp	r6, r5
 8022316:	dc79      	bgt.n	802240c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x164>
 8022318:	f10d 0e1c 	add.w	lr, sp, #28
 802231c:	46f1      	mov	r9, lr
 802231e:	b2c0      	uxtb	r0, r0
 8022320:	9001      	str	r0, [sp, #4]
 8022322:	2b0f      	cmp	r3, #15
 8022324:	f200 80ce 	bhi.w	80224c4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 8022328:	290f      	cmp	r1, #15
 802232a:	f200 80cb 	bhi.w	80224c4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 802232e:	9c00      	ldr	r4, [sp, #0]
 8022330:	b29b      	uxth	r3, r3
 8022332:	43e4      	mvns	r4, r4
 8022334:	b289      	uxth	r1, r1
 8022336:	fb03 f501 	mul.w	r5, r3, r1
 802233a:	011b      	lsls	r3, r3, #4
 802233c:	1b5e      	subs	r6, r3, r5
 802233e:	b2b6      	uxth	r6, r6
 8022340:	f897 c002 	ldrb.w	ip, [r7, #2]
 8022344:	ebc5 1101 	rsb	r1, r5, r1, lsl #4
 8022348:	787f      	ldrb	r7, [r7, #1]
 802234a:	fb06 f202 	mul.w	r2, r6, r2
 802234e:	b289      	uxth	r1, r1
 8022350:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8022354:	fb06 fc0c 	mul.w	ip, r6, ip
 8022358:	1a5b      	subs	r3, r3, r1
 802235a:	fb06 f607 	mul.w	r6, r6, r7
 802235e:	b29b      	uxth	r3, r3
 8022360:	f898 7001 	ldrb.w	r7, [r8, #1]
 8022364:	fb03 220b 	mla	r2, r3, fp, r2
 8022368:	f898 b002 	ldrb.w	fp, [r8, #2]
 802236c:	fb03 6607 	mla	r6, r3, r7, r6
 8022370:	fb03 cc0b 	mla	ip, r3, fp, ip
 8022374:	f899 8002 	ldrb.w	r8, [r9, #2]
 8022378:	f899 7001 	ldrb.w	r7, [r9, #1]
 802237c:	9b01      	ldr	r3, [sp, #4]
 802237e:	fb01 cc08 	mla	ip, r1, r8, ip
 8022382:	fb01 2203 	mla	r2, r1, r3, r2
 8022386:	fb01 6607 	mla	r6, r1, r7, r6
 802238a:	f89e 8002 	ldrb.w	r8, [lr, #2]
 802238e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8022392:	9b03      	ldr	r3, [sp, #12]
 8022394:	9902      	ldr	r1, [sp, #8]
 8022396:	fb05 2200 	mla	r2, r5, r0, r2
 802239a:	b2e4      	uxtb	r4, r4
 802239c:	fb05 cc08 	mla	ip, r5, r8, ip
 80223a0:	fb05 6607 	mla	r6, r5, r7, r6
 80223a4:	fb13 f004 	smulbb	r0, r3, r4
 80223a8:	fb1a f304 	smulbb	r3, sl, r4
 80223ac:	fb11 f404 	smulbb	r4, r1, r4
 80223b0:	f8bd e000 	ldrh.w	lr, [sp]
 80223b4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80223b8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80223bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80223c0:	fb02 020e 	mla	r2, r2, lr, r0
 80223c4:	fb0c 330e 	mla	r3, ip, lr, r3
 80223c8:	fb06 4e0e 	mla	lr, r6, lr, r4
 80223cc:	fa1f fc83 	uxth.w	ip, r3
 80223d0:	b292      	uxth	r2, r2
 80223d2:	fa1f fe8e 	uxth.w	lr, lr
 80223d6:	f10c 0301 	add.w	r3, ip, #1
 80223da:	1c50      	adds	r0, r2, #1
 80223dc:	f10e 0101 	add.w	r1, lr, #1
 80223e0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80223e4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80223e8:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80223ec:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80223f0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80223f4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80223f8:	4313      	orrs	r3, r2
 80223fa:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80223fe:	9a04      	ldr	r2, [sp, #16]
 8022400:	ea43 030e 	orr.w	r3, r3, lr
 8022404:	8013      	strh	r3, [r2, #0]
 8022406:	b009      	add	sp, #36	; 0x24
 8022408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802240c:	2900      	cmp	r1, #0
 802240e:	d036      	beq.n	802247e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d6>
 8022410:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022412:	2d00      	cmp	r5, #0
 8022414:	db45      	blt.n	80224a2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1fa>
 8022416:	42ac      	cmp	r4, r5
 8022418:	dd43      	ble.n	80224a2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1fa>
 802241a:	9d05      	ldr	r5, [sp, #20]
 802241c:	f815 9004 	ldrb.w	r9, [r5, r4]
 8022420:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8022424:	44f1      	add	r9, lr
 8022426:	f899 5000 	ldrb.w	r5, [r9]
 802242a:	9501      	str	r5, [sp, #4]
 802242c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802242e:	3501      	adds	r5, #1
 8022430:	d433      	bmi.n	802249a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1f2>
 8022432:	42ac      	cmp	r4, r5
 8022434:	dd31      	ble.n	802249a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1f2>
 8022436:	2b00      	cmp	r3, #0
 8022438:	d040      	beq.n	80224bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x214>
 802243a:	9805      	ldr	r0, [sp, #20]
 802243c:	4420      	add	r0, r4
 802243e:	7840      	ldrb	r0, [r0, #1]
 8022440:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8022444:	f81e 0004 	ldrb.w	r0, [lr, r4]
 8022448:	44a6      	add	lr, r4
 802244a:	e76a      	b.n	8022322 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x7a>
 802244c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802244e:	2a00      	cmp	r2, #0
 8022450:	db01      	blt.n	8022456 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ae>
 8022452:	4294      	cmp	r4, r2
 8022454:	dc1b      	bgt.n	802248e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1e6>
 8022456:	f10d 081c 	add.w	r8, sp, #28
 802245a:	3201      	adds	r2, #1
 802245c:	f898 b000 	ldrb.w	fp, [r8]
 8022460:	d40a      	bmi.n	8022478 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>
 8022462:	4294      	cmp	r4, r2
 8022464:	dd08      	ble.n	8022478 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>
 8022466:	b1fb      	cbz	r3, 80224a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x200>
 8022468:	9a05      	ldr	r2, [sp, #20]
 802246a:	7857      	ldrb	r7, [r2, #1]
 802246c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022470:	f81e 2007 	ldrb.w	r2, [lr, r7]
 8022474:	4477      	add	r7, lr
 8022476:	e74b      	b.n	8022310 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x68>
 8022478:	b2c2      	uxtb	r2, r0
 802247a:	af07      	add	r7, sp, #28
 802247c:	e748      	b.n	8022310 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x68>
 802247e:	b2c0      	uxtb	r0, r0
 8022480:	2b0f      	cmp	r3, #15
 8022482:	9001      	str	r0, [sp, #4]
 8022484:	d81e      	bhi.n	80224c4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 8022486:	f10d 0e1c 	add.w	lr, sp, #28
 802248a:	46f1      	mov	r9, lr
 802248c:	e74f      	b.n	802232e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x86>
 802248e:	f818 800c 	ldrb.w	r8, [r8, ip]
 8022492:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022496:	44f0      	add	r8, lr
 8022498:	e7df      	b.n	802245a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1b2>
 802249a:	b2c0      	uxtb	r0, r0
 802249c:	f10d 0e1c 	add.w	lr, sp, #28
 80224a0:	e73f      	b.n	8022322 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x7a>
 80224a2:	f10d 091c 	add.w	r9, sp, #28
 80224a6:	e7be      	b.n	8022426 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x17e>
 80224a8:	2d00      	cmp	r5, #0
 80224aa:	b2c2      	uxtb	r2, r0
 80224ac:	af07      	add	r7, sp, #28
 80224ae:	f6bf af31 	bge.w	8022314 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 80224b2:	46be      	mov	lr, r7
 80224b4:	46b9      	mov	r9, r7
 80224b6:	4610      	mov	r0, r2
 80224b8:	9201      	str	r2, [sp, #4]
 80224ba:	e735      	b.n	8022328 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 80224bc:	b2c0      	uxtb	r0, r0
 80224be:	f10d 0e1c 	add.w	lr, sp, #28
 80224c2:	e731      	b.n	8022328 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 80224c4:	4b03      	ldr	r3, [pc, #12]	; (80224d4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x22c>)
 80224c6:	4a04      	ldr	r2, [pc, #16]	; (80224d8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x230>)
 80224c8:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80224cc:	4803      	ldr	r0, [pc, #12]	; (80224dc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x234>)
 80224ce:	f005 fe03 	bl	80280d8 <__assert_func>
 80224d2:	bf00      	nop
 80224d4:	0802b350 	.word	0x0802b350
 80224d8:	0802b9c8 	.word	0x0802b9c8
 80224dc:	0802b4d4 	.word	0x0802b4d4

080224e0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80224e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224e4:	ed2d 8b08 	vpush	{d8-d11}
 80224e8:	b095      	sub	sp, #84	; 0x54
 80224ea:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 80224ee:	e9dd 512b 	ldrd	r5, r1, [sp, #172]	; 0xac
 80224f2:	e9dd b827 	ldrd	fp, r8, [sp, #156]	; 0x9c
 80224f6:	686c      	ldr	r4, [r5, #4]
 80224f8:	461a      	mov	r2, r3
 80224fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80224fc:	f89d 60bc 	ldrb.w	r6, [sp, #188]	; 0xbc
 8022500:	fb04 1303 	mla	r3, r4, r3, r1
 8022504:	682c      	ldr	r4, [r5, #0]
 8022506:	e9cd 0612 	strd	r0, r6, [sp, #72]	; 0x48
 802250a:	43f0      	mvns	r0, r6
 802250c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8022510:	eeb0 aa40 	vmov.f32	s20, s0
 8022514:	eef0 9a60 	vmov.f32	s19, s1
 8022518:	eeb0 9a41 	vmov.f32	s18, s2
 802251c:	eef0 8a62 	vmov.f32	s17, s5
 8022520:	eeb0 8a43 	vmov.f32	s16, s6
 8022524:	eef0 ba44 	vmov.f32	s23, s8
 8022528:	eeb0 ba64 	vmov.f32	s22, s9
 802252c:	eef0 aa45 	vmov.f32	s21, s10
 8022530:	469a      	mov	sl, r3
 8022532:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8022534:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8022536:	6849      	ldr	r1, [r1, #4]
 8022538:	682d      	ldr	r5, [r5, #0]
 802253a:	3104      	adds	r1, #4
 802253c:	b2c0      	uxtb	r0, r0
 802253e:	9108      	str	r1, [sp, #32]
 8022540:	b2b1      	uxth	r1, r6
 8022542:	950b      	str	r5, [sp, #44]	; 0x2c
 8022544:	900c      	str	r0, [sp, #48]	; 0x30
 8022546:	910d      	str	r1, [sp, #52]	; 0x34
 8022548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802254a:	2b00      	cmp	r3, #0
 802254c:	dc02      	bgt.n	8022554 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802254e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022550:	2b00      	cmp	r3, #0
 8022552:	dd65      	ble.n	8022620 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022554:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022556:	2a00      	cmp	r2, #0
 8022558:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 802255c:	b225      	sxth	r5, r4
 802255e:	fa0f f78e 	sxth.w	r7, lr
 8022562:	f340 8233 	ble.w	80229cc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8022566:	1e6e      	subs	r6, r5, #1
 8022568:	f107 3cff 	add.w	ip, r7, #4294967295
 802256c:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8022570:	e9dd e929 	ldrd	lr, r9, [sp, #164]	; 0xa4
 8022574:	ea5f 432b 	movs.w	r3, fp, asr #16
 8022578:	ea4f 4128 	mov.w	r1, r8, asr #16
 802257c:	d405      	bmi.n	802258a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802257e:	42b3      	cmp	r3, r6
 8022580:	da03      	bge.n	802258a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022582:	2900      	cmp	r1, #0
 8022584:	db01      	blt.n	802258a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022586:	4561      	cmp	r1, ip
 8022588:	db4f      	blt.n	802262a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802258a:	1c58      	adds	r0, r3, #1
 802258c:	d406      	bmi.n	802259c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 802258e:	42a8      	cmp	r0, r5
 8022590:	dc04      	bgt.n	802259c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8022592:	1c48      	adds	r0, r1, #1
 8022594:	d402      	bmi.n	802259c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8022596:	42b8      	cmp	r0, r7
 8022598:	f340 817e 	ble.w	8022898 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 802259c:	3a01      	subs	r2, #1
 802259e:	44f3      	add	fp, lr
 80225a0:	44c8      	add	r8, r9
 80225a2:	f10a 0a02 	add.w	sl, sl, #2
 80225a6:	d1e5      	bne.n	8022574 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80225a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80225aa:	2b00      	cmp	r3, #0
 80225ac:	dd38      	ble.n	8022620 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80225ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80225b2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80225b6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80225ba:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80225be:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80225c2:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80225c6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80225ca:	ee76 6a68 	vsub.f32	s13, s12, s17
 80225ce:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80225d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80225d6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80225da:	ee16 2a90 	vmov	r2, s13
 80225de:	3b01      	subs	r3, #1
 80225e0:	930e      	str	r3, [sp, #56]	; 0x38
 80225e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80225e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80225e8:	ee17 2a10 	vmov	r2, s14
 80225ec:	eeb0 7a48 	vmov.f32	s14, s16
 80225f0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80225f4:	ee17 8a10 	vmov	r8, s14
 80225f8:	eeb0 7a68 	vmov.f32	s14, s17
 80225fc:	9329      	str	r3, [sp, #164]	; 0xa4
 80225fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022600:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8022604:	fb92 f3f3 	sdiv	r3, r2, r3
 8022608:	932a      	str	r3, [sp, #168]	; 0xa8
 802260a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802260c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802260e:	ee17 ba10 	vmov	fp, s14
 8022612:	eeb0 8a67 	vmov.f32	s16, s15
 8022616:	eef0 8a46 	vmov.f32	s17, s12
 802261a:	bf18      	it	ne
 802261c:	461a      	movne	r2, r3
 802261e:	e793      	b.n	8022548 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022620:	b015      	add	sp, #84	; 0x54
 8022622:	ecbd 8b08 	vpop	{d8-d11}
 8022626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802262a:	46d4      	mov	ip, sl
 802262c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8022630:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8022632:	1e51      	subs	r1, r2, #1
 8022634:	fb00 b301 	mla	r3, r0, r1, fp
 8022638:	141b      	asrs	r3, r3, #16
 802263a:	910a      	str	r1, [sp, #40]	; 0x28
 802263c:	f100 80cc 	bmi.w	80227d8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8022640:	42b3      	cmp	r3, r6
 8022642:	f280 80c9 	bge.w	80227d8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8022646:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022648:	fb03 8301 	mla	r3, r3, r1, r8
 802264c:	141b      	asrs	r3, r3, #16
 802264e:	f100 80c3 	bmi.w	80227d8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8022652:	3f01      	subs	r7, #1
 8022654:	42bb      	cmp	r3, r7
 8022656:	f280 80bf 	bge.w	80227d8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802265a:	2a00      	cmp	r2, #0
 802265c:	dda4      	ble.n	80225a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 802265e:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
 8022662:	e9cd ca09 	strd	ip, sl, [sp, #36]	; 0x24
 8022666:	e08e      	b.n	8022786 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022668:	f891 c001 	ldrb.w	ip, [r1, #1]
 802266c:	194c      	adds	r4, r1, r5
 802266e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022672:	44bc      	add	ip, r7
 8022674:	2a00      	cmp	r2, #0
 8022676:	f000 80a6 	beq.w	80227c6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 802267a:	5d48      	ldrb	r0, [r1, r5]
 802267c:	7865      	ldrb	r5, [r4, #1]
 802267e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022682:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022686:	4438      	add	r0, r7
 8022688:	443d      	add	r5, r7
 802268a:	b29b      	uxth	r3, r3
 802268c:	b292      	uxth	r2, r2
 802268e:	fb03 f402 	mul.w	r4, r3, r2
 8022692:	011b      	lsls	r3, r3, #4
 8022694:	1b19      	subs	r1, r3, r4
 8022696:	f89c 9000 	ldrb.w	r9, [ip]
 802269a:	f89c e002 	ldrb.w	lr, [ip, #2]
 802269e:	b289      	uxth	r1, r1
 80226a0:	f89c c001 	ldrb.w	ip, [ip, #1]
 80226a4:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80226a8:	fb01 f909 	mul.w	r9, r1, r9
 80226ac:	b292      	uxth	r2, r2
 80226ae:	fb01 fe0e 	mul.w	lr, r1, lr
 80226b2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80226b6:	fb01 f10c 	mul.w	r1, r1, ip
 80226ba:	f817 a00a 	ldrb.w	sl, [r7, sl]
 80226be:	1a9b      	subs	r3, r3, r2
 80226c0:	f896 c002 	ldrb.w	ip, [r6, #2]
 80226c4:	b29b      	uxth	r3, r3
 80226c6:	7876      	ldrb	r6, [r6, #1]
 80226c8:	fb03 990a 	mla	r9, r3, sl, r9
 80226cc:	fb03 ec0c 	mla	ip, r3, ip, lr
 80226d0:	fb03 1306 	mla	r3, r3, r6, r1
 80226d4:	7801      	ldrb	r1, [r0, #0]
 80226d6:	f890 e002 	ldrb.w	lr, [r0, #2]
 80226da:	fb02 9901 	mla	r9, r2, r1, r9
 80226de:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80226e0:	fb02 ce0e 	mla	lr, r2, lr, ip
 80226e4:	7829      	ldrb	r1, [r5, #0]
 80226e6:	f8b7 c000 	ldrh.w	ip, [r7]
 80226ea:	7840      	ldrb	r0, [r0, #1]
 80226ec:	78ae      	ldrb	r6, [r5, #2]
 80226ee:	fb02 3200 	mla	r2, r2, r0, r3
 80226f2:	fb04 9901 	mla	r9, r4, r1, r9
 80226f6:	7868      	ldrb	r0, [r5, #1]
 80226f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80226fa:	ea4f 252c 	mov.w	r5, ip, asr #8
 80226fe:	fb04 ee06 	mla	lr, r4, r6, lr
 8022702:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022706:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802270a:	fb15 f501 	smulbb	r5, r5, r1
 802270e:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8022712:	b2db      	uxtb	r3, r3
 8022714:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8022718:	fb13 f301 	smulbb	r3, r3, r1
 802271c:	fb1c fc01 	smulbb	ip, ip, r1
 8022720:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022722:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8022726:	fb04 2200 	mla	r2, r4, r0, r2
 802272a:	fb0e 5501 	mla	r5, lr, r1, r5
 802272e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022732:	b2ad      	uxth	r5, r5
 8022734:	fb02 cc01 	mla	ip, r2, r1, ip
 8022738:	1c6a      	adds	r2, r5, #1
 802273a:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 802273e:	463a      	mov	r2, r7
 8022740:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8022744:	fb09 3301 	mla	r3, r9, r1, r3
 8022748:	fa1f f18c 	uxth.w	r1, ip
 802274c:	b29b      	uxth	r3, r3
 802274e:	1c5c      	adds	r4, r3, #1
 8022750:	1c48      	adds	r0, r1, #1
 8022752:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8022756:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802275a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802275e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022762:	0949      	lsrs	r1, r1, #5
 8022764:	432b      	orrs	r3, r5
 8022766:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802276a:	430b      	orrs	r3, r1
 802276c:	f822 3b02 	strh.w	r3, [r2], #2
 8022770:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022772:	9209      	str	r2, [sp, #36]	; 0x24
 8022774:	449b      	add	fp, r3
 8022776:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022778:	4498      	add	r8, r3
 802277a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802277c:	429a      	cmp	r2, r3
 802277e:	d029      	beq.n	80227d4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022780:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022782:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8022786:	ea4f 432b 	mov.w	r3, fp, asr #16
 802278a:	ea4f 4128 	mov.w	r1, r8, asr #16
 802278e:	fb05 3101 	mla	r1, r5, r1, r3
 8022792:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022794:	9f08      	ldr	r7, [sp, #32]
 8022796:	f812 a001 	ldrb.w	sl, [r2, r1]
 802279a:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802279e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80227a2:	4411      	add	r1, r2
 80227a4:	eb07 060a 	add.w	r6, r7, sl
 80227a8:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80227ac:	2b00      	cmp	r3, #0
 80227ae:	f47f af5b 	bne.w	8022668 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80227b2:	b15a      	cbz	r2, 80227cc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>
 80227b4:	5d48      	ldrb	r0, [r1, r5]
 80227b6:	9908      	ldr	r1, [sp, #32]
 80227b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80227bc:	4635      	mov	r5, r6
 80227be:	4408      	add	r0, r1
 80227c0:	46b4      	mov	ip, r6
 80227c2:	460f      	mov	r7, r1
 80227c4:	e761      	b.n	802268a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80227c6:	4635      	mov	r5, r6
 80227c8:	4630      	mov	r0, r6
 80227ca:	e75e      	b.n	802268a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80227cc:	4635      	mov	r5, r6
 80227ce:	4630      	mov	r0, r6
 80227d0:	46b4      	mov	ip, r6
 80227d2:	e75a      	b.n	802268a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80227d4:	469a      	mov	sl, r3
 80227d6:	e6e7      	b.n	80225a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80227d8:	2a00      	cmp	r2, #0
 80227da:	f77f aee5 	ble.w	80225a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80227de:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80227e0:	ea4f 432b 	mov.w	r3, fp, asr #16
 80227e4:	ea4f 4128 	mov.w	r1, r8, asr #16
 80227e8:	4675      	mov	r5, lr
 80227ea:	46d1      	mov	r9, sl
 80227ec:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80227f0:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 80227f4:	9609      	str	r6, [sp, #36]	; 0x24
 80227f6:	2b00      	cmp	r3, #0
 80227f8:	f3cb 3703 	ubfx	r7, fp, #12, #4
 80227fc:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8022800:	db27      	blt.n	8022852 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8022802:	1e60      	subs	r0, r4, #1
 8022804:	4283      	cmp	r3, r0
 8022806:	da24      	bge.n	8022852 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8022808:	2900      	cmp	r1, #0
 802280a:	db22      	blt.n	8022852 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 802280c:	1e68      	subs	r0, r5, #1
 802280e:	4281      	cmp	r1, r0
 8022810:	da1f      	bge.n	8022852 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8022812:	b220      	sxth	r0, r4
 8022814:	fb01 3300 	mla	r3, r1, r0, r3
 8022818:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802281a:	5ccd      	ldrb	r5, [r1, r3]
 802281c:	440b      	add	r3, r1
 802281e:	9908      	ldr	r1, [sp, #32]
 8022820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022824:	460e      	mov	r6, r1
 8022826:	eb01 0c05 	add.w	ip, r1, r5
 802282a:	2f00      	cmp	r7, #0
 802282c:	d04b      	beq.n	80228c6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802282e:	785c      	ldrb	r4, [r3, #1]
 8022830:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022834:	440c      	add	r4, r1
 8022836:	2a00      	cmp	r2, #0
 8022838:	f000 80c4 	beq.w	80229c4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802283c:	1819      	adds	r1, r3, r0
 802283e:	7849      	ldrb	r1, [r1, #1]
 8022840:	5c18      	ldrb	r0, [r3, r0]
 8022842:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022846:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802284a:	1873      	adds	r3, r6, r1
 802284c:	9311      	str	r3, [sp, #68]	; 0x44
 802284e:	4430      	add	r0, r6
 8022850:	e03f      	b.n	80228d2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8022852:	1c58      	adds	r0, r3, #1
 8022854:	d405      	bmi.n	8022862 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8022856:	42a0      	cmp	r0, r4
 8022858:	dc03      	bgt.n	8022862 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 802285a:	1c48      	adds	r0, r1, #1
 802285c:	d401      	bmi.n	8022862 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 802285e:	42a8      	cmp	r0, r5
 8022860:	dd20      	ble.n	80228a4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c4>
 8022862:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022864:	f109 0902 	add.w	r9, r9, #2
 8022868:	449b      	add	fp, r3
 802286a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802286c:	4498      	add	r8, r3
 802286e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022870:	2b00      	cmp	r3, #0
 8022872:	dd08      	ble.n	8022886 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8022874:	e9da 4502 	ldrd	r4, r5, [sl, #8]
 8022878:	3b01      	subs	r3, #1
 802287a:	9309      	str	r3, [sp, #36]	; 0x24
 802287c:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022880:	ea4f 432b 	mov.w	r3, fp, asr #16
 8022884:	e7b7      	b.n	80227f6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022888:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 802288c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022890:	3301      	adds	r3, #1
 8022892:	eb0a 0a43 	add.w	sl, sl, r3, lsl #1
 8022896:	e687      	b.n	80225a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8022898:	3a01      	subs	r2, #1
 802289a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 802289e:	920a      	str	r2, [sp, #40]	; 0x28
 80228a0:	4616      	mov	r6, r2
 80228a2:	e7a1      	b.n	80227e8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80228a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80228a6:	b22d      	sxth	r5, r5
 80228a8:	b224      	sxth	r4, r4
 80228aa:	e9cd 2005 	strd	r2, r0, [sp, #20]
 80228ae:	e9cd 1703 	strd	r1, r7, [sp, #12]
 80228b2:	9302      	str	r3, [sp, #8]
 80228b4:	e9cd 4500 	strd	r4, r5, [sp]
 80228b8:	9b08      	ldr	r3, [sp, #32]
 80228ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80228bc:	4649      	mov	r1, r9
 80228be:	9812      	ldr	r0, [sp, #72]	; 0x48
 80228c0:	f7ff fcf2 	bl	80222a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80228c4:	e7cd      	b.n	8022862 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80228c6:	2a00      	cmp	r2, #0
 80228c8:	d173      	bne.n	80229b2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d2>
 80228ca:	4660      	mov	r0, ip
 80228cc:	4664      	mov	r4, ip
 80228ce:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 80228d2:	b2bb      	uxth	r3, r7
 80228d4:	b292      	uxth	r2, r2
 80228d6:	fb03 f702 	mul.w	r7, r3, r2
 80228da:	011b      	lsls	r3, r3, #4
 80228dc:	1bd9      	subs	r1, r3, r7
 80228de:	7826      	ldrb	r6, [r4, #0]
 80228e0:	f894 e002 	ldrb.w	lr, [r4, #2]
 80228e4:	7864      	ldrb	r4, [r4, #1]
 80228e6:	b289      	uxth	r1, r1
 80228e8:	fb01 f606 	mul.w	r6, r1, r6
 80228ec:	fb01 fe0e 	mul.w	lr, r1, lr
 80228f0:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 80228f4:	fb01 f104 	mul.w	r1, r1, r4
 80228f8:	9c08      	ldr	r4, [sp, #32]
 80228fa:	b292      	uxth	r2, r2
 80228fc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8022900:	5d65      	ldrb	r5, [r4, r5]
 8022902:	1a9b      	subs	r3, r3, r2
 8022904:	f89c 4002 	ldrb.w	r4, [ip, #2]
 8022908:	f89c c001 	ldrb.w	ip, [ip, #1]
 802290c:	b29b      	uxth	r3, r3
 802290e:	fb03 e404 	mla	r4, r3, r4, lr
 8022912:	fb03 6505 	mla	r5, r3, r5, r6
 8022916:	fb03 130c 	mla	r3, r3, ip, r1
 802291a:	f890 c001 	ldrb.w	ip, [r0, #1]
 802291e:	7801      	ldrb	r1, [r0, #0]
 8022920:	f890 e002 	ldrb.w	lr, [r0, #2]
 8022924:	fb02 3c0c 	mla	ip, r2, ip, r3
 8022928:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802292a:	fb02 5601 	mla	r6, r2, r1, r5
 802292e:	fb02 4e0e 	mla	lr, r2, lr, r4
 8022932:	7899      	ldrb	r1, [r3, #2]
 8022934:	781a      	ldrb	r2, [r3, #0]
 8022936:	785b      	ldrb	r3, [r3, #1]
 8022938:	f8b9 0000 	ldrh.w	r0, [r9]
 802293c:	fb07 c303 	mla	r3, r7, r3, ip
 8022940:	fb07 6202 	mla	r2, r7, r2, r6
 8022944:	00c5      	lsls	r5, r0, #3
 8022946:	1204      	asrs	r4, r0, #8
 8022948:	fb07 e101 	mla	r1, r7, r1, lr
 802294c:	10c0      	asrs	r0, r0, #3
 802294e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022950:	b2ed      	uxtb	r5, r5
 8022952:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8022956:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802295a:	fb15 f507 	smulbb	r5, r5, r7
 802295e:	fb14 f407 	smulbb	r4, r4, r7
 8022962:	fb10 f007 	smulbb	r0, r0, r7
 8022966:	f3c3 2707 	ubfx	r7, r3, #8, #8
 802296a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802296c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022970:	461e      	mov	r6, r3
 8022972:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022976:	fb02 5203 	mla	r2, r2, r3, r5
 802297a:	fb07 0006 	mla	r0, r7, r6, r0
 802297e:	fb01 4303 	mla	r3, r1, r3, r4
 8022982:	b281      	uxth	r1, r0
 8022984:	b294      	uxth	r4, r2
 8022986:	b29b      	uxth	r3, r3
 8022988:	1c4a      	adds	r2, r1, #1
 802298a:	1c5d      	adds	r5, r3, #1
 802298c:	1c60      	adds	r0, r4, #1
 802298e:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8022992:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8022996:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802299a:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802299e:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 80229a2:	0952      	lsrs	r2, r2, #5
 80229a4:	430b      	orrs	r3, r1
 80229a6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80229aa:	4313      	orrs	r3, r2
 80229ac:	f8a9 3000 	strh.w	r3, [r9]
 80229b0:	e757      	b.n	8022862 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80229b2:	5c18      	ldrb	r0, [r3, r0]
 80229b4:	9b08      	ldr	r3, [sp, #32]
 80229b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80229ba:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 80229be:	4418      	add	r0, r3
 80229c0:	4664      	mov	r4, ip
 80229c2:	e786      	b.n	80228d2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80229c4:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 80229c8:	4660      	mov	r0, ip
 80229ca:	e782      	b.n	80228d2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80229cc:	f43f adec 	beq.w	80225a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80229d0:	1e6e      	subs	r6, r5, #1
 80229d2:	46d4      	mov	ip, sl
 80229d4:	e62c      	b.n	8022630 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80229d6:	bf00      	nop

080229d8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 80229d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229dc:	4692      	mov	sl, r2
 80229de:	b083      	sub	sp, #12
 80229e0:	880a      	ldrh	r2, [r1, #0]
 80229e2:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80229e6:	e9dd 740e 	ldrd	r7, r4, [sp, #56]	; 0x38
 80229ea:	0215      	lsls	r5, r2, #8
 80229ec:	0150      	lsls	r0, r2, #5
 80229ee:	fb04 7e0c 	mla	lr, r4, ip, r7
 80229f2:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 80229f6:	f405 0578 	and.w	r5, r5, #16252928	; 0xf80000
 80229fa:	00d2      	lsls	r2, r2, #3
 80229fc:	4305      	orrs	r5, r0
 80229fe:	b2d2      	uxtb	r2, r2
 8022a00:	4315      	orrs	r5, r2
 8022a02:	2c00      	cmp	r4, #0
 8022a04:	9501      	str	r5, [sp, #4]
 8022a06:	eb0a 020e 	add.w	r2, sl, lr
 8022a0a:	f104 0801 	add.w	r8, r4, #1
 8022a0e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8022a12:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8022a16:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8022a1a:	db01      	blt.n	8022a20 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x48>
 8022a1c:	45a1      	cmp	r9, r4
 8022a1e:	dc71      	bgt.n	8022b04 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x12c>
 8022a20:	fa5f fa85 	uxtb.w	sl, r5
 8022a24:	f10d 0b04 	add.w	fp, sp, #4
 8022a28:	4654      	mov	r4, sl
 8022a2a:	46de      	mov	lr, fp
 8022a2c:	f1b8 0f00 	cmp.w	r8, #0
 8022a30:	db01      	blt.n	8022a36 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5e>
 8022a32:	45c1      	cmp	r9, r8
 8022a34:	dc4c      	bgt.n	8022ad0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xf8>
 8022a36:	fa5f f985 	uxtb.w	r9, r5
 8022a3a:	ab01      	add	r3, sp, #4
 8022a3c:	464d      	mov	r5, r9
 8022a3e:	4698      	mov	r8, r3
 8022a40:	2e0f      	cmp	r6, #15
 8022a42:	f200 809b 	bhi.w	8022b7c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8022a46:	280f      	cmp	r0, #15
 8022a48:	f200 8098 	bhi.w	8022b7c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8022a4c:	b2b2      	uxth	r2, r6
 8022a4e:	b280      	uxth	r0, r0
 8022a50:	fb02 f700 	mul.w	r7, r2, r0
 8022a54:	0112      	lsls	r2, r2, #4
 8022a56:	f89b c002 	ldrb.w	ip, [fp, #2]
 8022a5a:	1bd6      	subs	r6, r2, r7
 8022a5c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8022a60:	b2b6      	uxth	r6, r6
 8022a62:	ebc7 1000 	rsb	r0, r7, r0, lsl #4
 8022a66:	fb06 f404 	mul.w	r4, r6, r4
 8022a6a:	fb06 fc0c 	mul.w	ip, r6, ip
 8022a6e:	fb06 f60b 	mul.w	r6, r6, fp
 8022a72:	b280      	uxth	r0, r0
 8022a74:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8022a78:	f89e b002 	ldrb.w	fp, [lr, #2]
 8022a7c:	1a12      	subs	r2, r2, r0
 8022a7e:	f89e e001 	ldrb.w	lr, [lr, #1]
 8022a82:	b292      	uxth	r2, r2
 8022a84:	fb02 440a 	mla	r4, r2, sl, r4
 8022a88:	fb02 660e 	mla	r6, r2, lr, r6
 8022a8c:	fb02 cc0b 	mla	ip, r2, fp, ip
 8022a90:	f898 a002 	ldrb.w	sl, [r8, #2]
 8022a94:	f898 8001 	ldrb.w	r8, [r8, #1]
 8022a98:	fb00 4909 	mla	r9, r0, r9, r4
 8022a9c:	fb00 cc0a 	mla	ip, r0, sl, ip
 8022aa0:	fb00 6008 	mla	r0, r0, r8, r6
 8022aa4:	789e      	ldrb	r6, [r3, #2]
 8022aa6:	785b      	ldrb	r3, [r3, #1]
 8022aa8:	fb07 9905 	mla	r9, r7, r5, r9
 8022aac:	fb07 c506 	mla	r5, r7, r6, ip
 8022ab0:	fb07 0703 	mla	r7, r7, r3, r0
 8022ab4:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8022ab8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022abc:	097f      	lsrs	r7, r7, #5
 8022abe:	ea45 0509 	orr.w	r5, r5, r9
 8022ac2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022ac6:	433d      	orrs	r5, r7
 8022ac8:	800d      	strh	r5, [r1, #0]
 8022aca:	b003      	add	sp, #12
 8022acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ad0:	b388      	cbz	r0, 8022b36 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x15e>
 8022ad2:	2f00      	cmp	r7, #0
 8022ad4:	db40      	blt.n	8022b58 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x180>
 8022ad6:	45bc      	cmp	ip, r7
 8022ad8:	dd3e      	ble.n	8022b58 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x180>
 8022ada:	f812 800c 	ldrb.w	r8, [r2, ip]
 8022ade:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022ae2:	4498      	add	r8, r3
 8022ae4:	3701      	adds	r7, #1
 8022ae6:	f898 9000 	ldrb.w	r9, [r8]
 8022aea:	d432      	bmi.n	8022b52 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x17a>
 8022aec:	45bc      	cmp	ip, r7
 8022aee:	dd30      	ble.n	8022b52 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x17a>
 8022af0:	2e00      	cmp	r6, #0
 8022af2:	d040      	beq.n	8022b76 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x19e>
 8022af4:	4494      	add	ip, r2
 8022af6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8022afa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022afe:	5c9d      	ldrb	r5, [r3, r2]
 8022b00:	4413      	add	r3, r2
 8022b02:	e79d      	b.n	8022a40 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x68>
 8022b04:	2f00      	cmp	r7, #0
 8022b06:	db01      	blt.n	8022b0c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x134>
 8022b08:	45bc      	cmp	ip, r7
 8022b0a:	dc1c      	bgt.n	8022b46 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16e>
 8022b0c:	f10d 0e04 	add.w	lr, sp, #4
 8022b10:	1c7c      	adds	r4, r7, #1
 8022b12:	f89e a000 	ldrb.w	sl, [lr]
 8022b16:	d40a      	bmi.n	8022b2e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x156>
 8022b18:	45a4      	cmp	ip, r4
 8022b1a:	dd08      	ble.n	8022b2e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x156>
 8022b1c:	b1fe      	cbz	r6, 8022b5e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x186>
 8022b1e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022b22:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8022b26:	f813 400b 	ldrb.w	r4, [r3, fp]
 8022b2a:	449b      	add	fp, r3
 8022b2c:	e77e      	b.n	8022a2c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x54>
 8022b2e:	b2ec      	uxtb	r4, r5
 8022b30:	f10d 0b04 	add.w	fp, sp, #4
 8022b34:	e77a      	b.n	8022a2c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x54>
 8022b36:	2e0f      	cmp	r6, #15
 8022b38:	fa5f f985 	uxtb.w	r9, r5
 8022b3c:	d81e      	bhi.n	8022b7c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8022b3e:	ab01      	add	r3, sp, #4
 8022b40:	4698      	mov	r8, r3
 8022b42:	464d      	mov	r5, r9
 8022b44:	e782      	b.n	8022a4c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x74>
 8022b46:	f81a e00e 	ldrb.w	lr, [sl, lr]
 8022b4a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022b4e:	449e      	add	lr, r3
 8022b50:	e7de      	b.n	8022b10 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8022b52:	b2ed      	uxtb	r5, r5
 8022b54:	ab01      	add	r3, sp, #4
 8022b56:	e773      	b.n	8022a40 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x68>
 8022b58:	f10d 0804 	add.w	r8, sp, #4
 8022b5c:	e7c2      	b.n	8022ae4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x10c>
 8022b5e:	f1b8 0f00 	cmp.w	r8, #0
 8022b62:	b2ec      	uxtb	r4, r5
 8022b64:	f10d 0b04 	add.w	fp, sp, #4
 8022b68:	f6bf af63 	bge.w	8022a32 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8022b6c:	465b      	mov	r3, fp
 8022b6e:	46d8      	mov	r8, fp
 8022b70:	4625      	mov	r5, r4
 8022b72:	46a1      	mov	r9, r4
 8022b74:	e767      	b.n	8022a46 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8022b76:	b2ed      	uxtb	r5, r5
 8022b78:	ab01      	add	r3, sp, #4
 8022b7a:	e764      	b.n	8022a46 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8022b7c:	4b03      	ldr	r3, [pc, #12]	; (8022b8c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1b4>)
 8022b7e:	4a04      	ldr	r2, [pc, #16]	; (8022b90 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1b8>)
 8022b80:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8022b84:	4803      	ldr	r0, [pc, #12]	; (8022b94 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1bc>)
 8022b86:	f005 faa7 	bl	80280d8 <__assert_func>
 8022b8a:	bf00      	nop
 8022b8c:	0802b350 	.word	0x0802b350
 8022b90:	0802b9c8 	.word	0x0802b9c8
 8022b94:	0802b4d4 	.word	0x0802b4d4

08022b98 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b9c:	ed2d 8b0a 	vpush	{d8-d12}
 8022ba0:	eeb0 aa40 	vmov.f32	s20, s0
 8022ba4:	eef0 9a60 	vmov.f32	s19, s1
 8022ba8:	eeb0 9a41 	vmov.f32	s18, s2
 8022bac:	eef0 8a62 	vmov.f32	s17, s5
 8022bb0:	eeb0 8a43 	vmov.f32	s16, s6
 8022bb4:	eeb0 ca44 	vmov.f32	s24, s8
 8022bb8:	eef0 ba64 	vmov.f32	s23, s9
 8022bbc:	eeb0 ba45 	vmov.f32	s22, s10
 8022bc0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8022bc4:	b093      	sub	sp, #76	; 0x4c
 8022bc6:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8022bca:	e9dd 412b 	ldrd	r4, r1, [sp, #172]	; 0xac
 8022bce:	e9dd 9827 	ldrd	r9, r8, [sp, #156]	; 0x9c
 8022bd2:	9011      	str	r0, [sp, #68]	; 0x44
 8022bd4:	461a      	mov	r2, r3
 8022bd6:	6860      	ldr	r0, [r4, #4]
 8022bd8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022bda:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
 8022bde:	fb00 1303 	mla	r3, r0, r3, r1
 8022be2:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8022be4:	6820      	ldr	r0, [r4, #0]
 8022be6:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8022be8:	6849      	ldr	r1, [r1, #4]
 8022bea:	6824      	ldr	r4, [r4, #0]
 8022bec:	eb00 0b43 	add.w	fp, r0, r3, lsl #1
 8022bf0:	1d0b      	adds	r3, r1, #4
 8022bf2:	9409      	str	r4, [sp, #36]	; 0x24
 8022bf4:	930c      	str	r3, [sp, #48]	; 0x30
 8022bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022bf8:	2b00      	cmp	r3, #0
 8022bfa:	dc02      	bgt.n	8022c02 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022bfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022bfe:	2b00      	cmp	r3, #0
 8022c00:	dd61      	ble.n	8022cc6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 8022c02:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022c04:	2a00      	cmp	r2, #0
 8022c06:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 8022c0a:	b225      	sxth	r5, r4
 8022c0c:	fa0f f78e 	sxth.w	r7, lr
 8022c10:	f340 81d9 	ble.w	8022fc6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8022c14:	f8cd e01c 	str.w	lr, [sp, #28]
 8022c18:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
 8022c1c:	1e6e      	subs	r6, r5, #1
 8022c1e:	f107 3cff 	add.w	ip, r7, #4294967295
 8022c22:	ea5f 4329 	movs.w	r3, r9, asr #16
 8022c26:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022c2a:	d405      	bmi.n	8022c38 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022c2c:	42b3      	cmp	r3, r6
 8022c2e:	da03      	bge.n	8022c38 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022c30:	2900      	cmp	r1, #0
 8022c32:	db01      	blt.n	8022c38 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022c34:	4561      	cmp	r1, ip
 8022c36:	db4b      	blt.n	8022cd0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8022c38:	1c58      	adds	r0, r3, #1
 8022c3a:	d406      	bmi.n	8022c4a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8022c3c:	42a8      	cmp	r0, r5
 8022c3e:	dc04      	bgt.n	8022c4a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8022c40:	1c48      	adds	r0, r1, #1
 8022c42:	d402      	bmi.n	8022c4a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8022c44:	42b8      	cmp	r0, r7
 8022c46:	f340 8149 	ble.w	8022edc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022c4a:	3a01      	subs	r2, #1
 8022c4c:	44d1      	add	r9, sl
 8022c4e:	44f0      	add	r8, lr
 8022c50:	f10b 0b02 	add.w	fp, fp, #2
 8022c54:	d1e5      	bne.n	8022c22 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c58:	2b00      	cmp	r3, #0
 8022c5a:	dd34      	ble.n	8022cc6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 8022c5c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8022c60:	ee79 9aab 	vadd.f32	s19, s19, s23
 8022c64:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8022c68:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8022c6c:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8022c70:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022c74:	ee76 6a68 	vsub.f32	s13, s12, s17
 8022c78:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8022c7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c80:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8022c84:	ee16 2a90 	vmov	r2, s13
 8022c88:	3b01      	subs	r3, #1
 8022c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8022c8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022c8e:	fb92 faf3 	sdiv	sl, r2, r3
 8022c92:	ee17 2a10 	vmov	r2, s14
 8022c96:	eeb0 7a48 	vmov.f32	s14, s16
 8022c9a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8022c9e:	ee17 8a10 	vmov	r8, s14
 8022ca2:	eeb0 7a68 	vmov.f32	s14, s17
 8022ca6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022caa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8022cae:	932a      	str	r3, [sp, #168]	; 0xa8
 8022cb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022cb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022cb4:	ee17 9a10 	vmov	r9, s14
 8022cb8:	eeb0 8a67 	vmov.f32	s16, s15
 8022cbc:	eef0 8a46 	vmov.f32	s17, s12
 8022cc0:	bf18      	it	ne
 8022cc2:	461a      	movne	r2, r3
 8022cc4:	e797      	b.n	8022bf6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8022cc6:	b013      	add	sp, #76	; 0x4c
 8022cc8:	ecbd 8b0a 	vpop	{d8-d12}
 8022ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cd0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8022cd4:	f8cd b01c 	str.w	fp, [sp, #28]
 8022cd8:	1e51      	subs	r1, r2, #1
 8022cda:	fb0a 9301 	mla	r3, sl, r1, r9
 8022cde:	141b      	asrs	r3, r3, #16
 8022ce0:	9108      	str	r1, [sp, #32]
 8022ce2:	f100 809e 	bmi.w	8022e22 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022ce6:	42b3      	cmp	r3, r6
 8022ce8:	f280 809b 	bge.w	8022e22 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022cec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022cee:	fb03 8301 	mla	r3, r3, r1, r8
 8022cf2:	141b      	asrs	r3, r3, #16
 8022cf4:	f100 8095 	bmi.w	8022e22 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022cf8:	3f01      	subs	r7, #1
 8022cfa:	42bb      	cmp	r3, r7
 8022cfc:	f280 8091 	bge.w	8022e22 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022d00:	2a00      	cmp	r2, #0
 8022d02:	dda8      	ble.n	8022c56 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022d04:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8022d08:	f8cd a0a4 	str.w	sl, [sp, #164]	; 0xa4
 8022d0c:	f8cd b020 	str.w	fp, [sp, #32]
 8022d10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8022d14:	e060      	b.n	8022dd8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022d16:	784f      	ldrb	r7, [r1, #1]
 8022d18:	194c      	adds	r4, r1, r5
 8022d1a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022d1e:	4457      	add	r7, sl
 8022d20:	2a00      	cmp	r2, #0
 8022d22:	d075      	beq.n	8022e10 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8022d24:	5d48      	ldrb	r0, [r1, r5]
 8022d26:	7865      	ldrb	r5, [r4, #1]
 8022d28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022d2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022d30:	4450      	add	r0, sl
 8022d32:	4455      	add	r5, sl
 8022d34:	b29b      	uxth	r3, r3
 8022d36:	b292      	uxth	r2, r2
 8022d38:	fb03 f402 	mul.w	r4, r3, r2
 8022d3c:	011b      	lsls	r3, r3, #4
 8022d3e:	f897 e000 	ldrb.w	lr, [r7]
 8022d42:	f897 c002 	ldrb.w	ip, [r7, #2]
 8022d46:	1b19      	subs	r1, r3, r4
 8022d48:	787f      	ldrb	r7, [r7, #1]
 8022d4a:	b289      	uxth	r1, r1
 8022d4c:	fb01 fc0c 	mul.w	ip, r1, ip
 8022d50:	fb01 fe0e 	mul.w	lr, r1, lr
 8022d54:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8022d58:	fb01 f107 	mul.w	r1, r1, r7
 8022d5c:	b292      	uxth	r2, r2
 8022d5e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8022d62:	f81a b00b 	ldrb.w	fp, [sl, fp]
 8022d66:	78b7      	ldrb	r7, [r6, #2]
 8022d68:	1a9b      	subs	r3, r3, r2
 8022d6a:	7876      	ldrb	r6, [r6, #1]
 8022d6c:	b29b      	uxth	r3, r3
 8022d6e:	fb03 ee0b 	mla	lr, r3, fp, lr
 8022d72:	fb03 c707 	mla	r7, r3, r7, ip
 8022d76:	fb03 1306 	mla	r3, r3, r6, r1
 8022d7a:	f890 b000 	ldrb.w	fp, [r0]
 8022d7e:	f890 c002 	ldrb.w	ip, [r0, #2]
 8022d82:	7841      	ldrb	r1, [r0, #1]
 8022d84:	fb02 ee0b 	mla	lr, r2, fp, lr
 8022d88:	fb02 3301 	mla	r3, r2, r1, r3
 8022d8c:	fb02 770c 	mla	r7, r2, ip, r7
 8022d90:	f895 b000 	ldrb.w	fp, [r5]
 8022d94:	f895 c002 	ldrb.w	ip, [r5, #2]
 8022d98:	7869      	ldrb	r1, [r5, #1]
 8022d9a:	fb04 ee0b 	mla	lr, r4, fp, lr
 8022d9e:	fb04 3101 	mla	r1, r4, r1, r3
 8022da2:	fb04 7c0c 	mla	ip, r4, ip, r7
 8022da6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022da8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022dac:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022db0:	0949      	lsrs	r1, r1, #5
 8022db2:	4491      	add	r9, r2
 8022db4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022db6:	9b07      	ldr	r3, [sp, #28]
 8022db8:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022dbc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022dc0:	ea4e 0e01 	orr.w	lr, lr, r1
 8022dc4:	4490      	add	r8, r2
 8022dc6:	9a08      	ldr	r2, [sp, #32]
 8022dc8:	f823 eb02 	strh.w	lr, [r3], #2
 8022dcc:	4293      	cmp	r3, r2
 8022dce:	9307      	str	r3, [sp, #28]
 8022dd0:	d025      	beq.n	8022e1e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8022dd2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022dd4:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8022dd8:	ea4f 4329 	mov.w	r3, r9, asr #16
 8022ddc:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022de0:	fb05 3101 	mla	r1, r5, r1, r3
 8022de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022de6:	f3c9 3303 	ubfx	r3, r9, #12, #4
 8022dea:	f812 b001 	ldrb.w	fp, [r2, r1]
 8022dee:	4411      	add	r1, r2
 8022df0:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8022df4:	eb0a 060b 	add.w	r6, sl, fp
 8022df8:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8022dfc:	2b00      	cmp	r3, #0
 8022dfe:	d18a      	bne.n	8022d16 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8022e00:	b14a      	cbz	r2, 8022e16 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022e02:	5d48      	ldrb	r0, [r1, r5]
 8022e04:	4637      	mov	r7, r6
 8022e06:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022e0a:	4635      	mov	r5, r6
 8022e0c:	4450      	add	r0, sl
 8022e0e:	e791      	b.n	8022d34 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8022e10:	4635      	mov	r5, r6
 8022e12:	4630      	mov	r0, r6
 8022e14:	e78e      	b.n	8022d34 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8022e16:	4635      	mov	r5, r6
 8022e18:	4630      	mov	r0, r6
 8022e1a:	4637      	mov	r7, r6
 8022e1c:	e78a      	b.n	8022d34 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8022e1e:	4693      	mov	fp, r2
 8022e20:	e719      	b.n	8022c56 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022e22:	2a00      	cmp	r2, #0
 8022e24:	f77f af17 	ble.w	8022c56 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022e28:	9e08      	ldr	r6, [sp, #32]
 8022e2a:	ea4f 4329 	mov.w	r3, r9, asr #16
 8022e2e:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022e32:	465f      	mov	r7, fp
 8022e34:	f8cd b01c 	str.w	fp, [sp, #28]
 8022e38:	f8dd b0b8 	ldr.w	fp, [sp, #184]	; 0xb8
 8022e3c:	2b00      	cmp	r3, #0
 8022e3e:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8022e42:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8022e46:	db2a      	blt.n	8022e9e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022e48:	1e65      	subs	r5, r4, #1
 8022e4a:	42ab      	cmp	r3, r5
 8022e4c:	da27      	bge.n	8022e9e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022e4e:	2900      	cmp	r1, #0
 8022e50:	db25      	blt.n	8022e9e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022e52:	f10e 35ff 	add.w	r5, lr, #4294967295
 8022e56:	42a9      	cmp	r1, r5
 8022e58:	da21      	bge.n	8022e9e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022e5a:	b224      	sxth	r4, r4
 8022e5c:	fb01 3304 	mla	r3, r1, r4, r3
 8022e60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022e62:	f811 c003 	ldrb.w	ip, [r1, r3]
 8022e66:	440b      	add	r3, r1
 8022e68:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022e6a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022e6e:	eb01 0e0c 	add.w	lr, r1, ip
 8022e72:	2800      	cmp	r0, #0
 8022e74:	d048      	beq.n	8022f08 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8022e76:	785d      	ldrb	r5, [r3, #1]
 8022e78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022e7c:	440d      	add	r5, r1
 8022e7e:	2a00      	cmp	r2, #0
 8022e80:	f000 809e 	beq.w	8022fc0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8022e84:	1919      	adds	r1, r3, r4
 8022e86:	7849      	ldrb	r1, [r1, #1]
 8022e88:	5d1c      	ldrb	r4, [r3, r4]
 8022e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e8c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022e90:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022e94:	1859      	adds	r1, r3, r1
 8022e96:	18e3      	adds	r3, r4, r3
 8022e98:	910f      	str	r1, [sp, #60]	; 0x3c
 8022e9a:	9310      	str	r3, [sp, #64]	; 0x40
 8022e9c:	e039      	b.n	8022f12 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022e9e:	1c5d      	adds	r5, r3, #1
 8022ea0:	d405      	bmi.n	8022eae <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022ea2:	42a5      	cmp	r5, r4
 8022ea4:	dc03      	bgt.n	8022eae <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022ea6:	1c4d      	adds	r5, r1, #1
 8022ea8:	d401      	bmi.n	8022eae <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022eaa:	4575      	cmp	r5, lr
 8022eac:	dd1c      	ble.n	8022ee8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8022eae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022eb0:	2e00      	cmp	r6, #0
 8022eb2:	f107 0702 	add.w	r7, r7, #2
 8022eb6:	44d1      	add	r9, sl
 8022eb8:	4498      	add	r8, r3
 8022eba:	dd07      	ble.n	8022ecc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8022ebc:	e9db 4e02 	ldrd	r4, lr, [fp, #8]
 8022ec0:	3e01      	subs	r6, #1
 8022ec2:	ea4f 4329 	mov.w	r3, r9, asr #16
 8022ec6:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022eca:	e7b7      	b.n	8022e3c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8022ecc:	e9dd b307 	ldrd	fp, r3, [sp, #28]
 8022ed0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022ed4:	3301      	adds	r3, #1
 8022ed6:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8022eda:	e6bc      	b.n	8022c56 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022edc:	3a01      	subs	r2, #1
 8022ede:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8022ee2:	9208      	str	r2, [sp, #32]
 8022ee4:	4616      	mov	r6, r2
 8022ee6:	e7a4      	b.n	8022e32 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8022ee8:	fa0f f58e 	sxth.w	r5, lr
 8022eec:	b224      	sxth	r4, r4
 8022eee:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8022ef2:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8022ef6:	e9cd 4500 	strd	r4, r5, [sp]
 8022efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022efc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022efe:	4639      	mov	r1, r7
 8022f00:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022f02:	f7ff fd69 	bl	80229d8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8022f06:	e7d2      	b.n	8022eae <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022f08:	2a00      	cmp	r2, #0
 8022f0a:	d14f      	bne.n	8022fac <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8022f0c:	4675      	mov	r5, lr
 8022f0e:	e9cd ee0f 	strd	lr, lr, [sp, #60]	; 0x3c
 8022f12:	b283      	uxth	r3, r0
 8022f14:	b292      	uxth	r2, r2
 8022f16:	fb03 f002 	mul.w	r0, r3, r2
 8022f1a:	782c      	ldrb	r4, [r5, #0]
 8022f1c:	011b      	lsls	r3, r3, #4
 8022f1e:	940e      	str	r4, [sp, #56]	; 0x38
 8022f20:	78ac      	ldrb	r4, [r5, #2]
 8022f22:	1a19      	subs	r1, r3, r0
 8022f24:	940d      	str	r4, [sp, #52]	; 0x34
 8022f26:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022f28:	b289      	uxth	r1, r1
 8022f2a:	fb01 f404 	mul.w	r4, r1, r4
 8022f2e:	940e      	str	r4, [sp, #56]	; 0x38
 8022f30:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022f32:	786d      	ldrb	r5, [r5, #1]
 8022f34:	fb01 f404 	mul.w	r4, r1, r4
 8022f38:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8022f3c:	fb01 f105 	mul.w	r1, r1, r5
 8022f40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022f42:	b292      	uxth	r2, r2
 8022f44:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8022f48:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8022f4c:	940d      	str	r4, [sp, #52]	; 0x34
 8022f4e:	1a9b      	subs	r3, r3, r2
 8022f50:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022f52:	b29b      	uxth	r3, r3
 8022f54:	f89e 5002 	ldrb.w	r5, [lr, #2]
 8022f58:	fb03 4c0c 	mla	ip, r3, ip, r4
 8022f5c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8022f60:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022f62:	fb03 4505 	mla	r5, r3, r5, r4
 8022f66:	fb03 130e 	mla	r3, r3, lr, r1
 8022f6a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022f6c:	78a1      	ldrb	r1, [r4, #2]
 8022f6e:	f894 e000 	ldrb.w	lr, [r4]
 8022f72:	7864      	ldrb	r4, [r4, #1]
 8022f74:	fb02 5501 	mla	r5, r2, r1, r5
 8022f78:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022f7c:	fb02 3104 	mla	r1, r2, r4, r3
 8022f80:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022f82:	7822      	ldrb	r2, [r4, #0]
 8022f84:	78a3      	ldrb	r3, [r4, #2]
 8022f86:	7864      	ldrb	r4, [r4, #1]
 8022f88:	fb00 cc02 	mla	ip, r0, r2, ip
 8022f8c:	fb00 5303 	mla	r3, r0, r3, r5
 8022f90:	fb00 1204 	mla	r2, r0, r4, r1
 8022f94:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022f98:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022f9c:	0952      	lsrs	r2, r2, #5
 8022f9e:	ea43 030c 	orr.w	r3, r3, ip
 8022fa2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022fa6:	4313      	orrs	r3, r2
 8022fa8:	803b      	strh	r3, [r7, #0]
 8022faa:	e780      	b.n	8022eae <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022fac:	5d1c      	ldrb	r4, [r3, r4]
 8022fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022fb0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022fb4:	18e3      	adds	r3, r4, r3
 8022fb6:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8022fba:	9310      	str	r3, [sp, #64]	; 0x40
 8022fbc:	4675      	mov	r5, lr
 8022fbe:	e7a8      	b.n	8022f12 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022fc0:	e9cd ee0f 	strd	lr, lr, [sp, #60]	; 0x3c
 8022fc4:	e7a5      	b.n	8022f12 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022fc6:	f43f ae46 	beq.w	8022c56 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022fca:	1e6e      	subs	r6, r5, #1
 8022fcc:	f8cd b01c 	str.w	fp, [sp, #28]
 8022fd0:	e682      	b.n	8022cd8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022fd2:	bf00      	nop

08022fd4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8022fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fd8:	b08b      	sub	sp, #44	; 0x2c
 8022fda:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
 8022fde:	f8b1 c000 	ldrh.w	ip, [r1]
 8022fe2:	e9dd 6416 	ldrd	r6, r4, [sp, #88]	; 0x58
 8022fe6:	fb04 6507 	mla	r5, r4, r7, r6
 8022fea:	9107      	str	r1, [sp, #28]
 8022fec:	ea4f 01ec 	mov.w	r1, ip, asr #3
 8022ff0:	ea4f 202c 	mov.w	r0, ip, asr #8
 8022ff4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022ff8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022ffc:	469a      	mov	sl, r3
 8022ffe:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8023002:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023006:	9105      	str	r1, [sp, #20]
 8023008:	2c00      	cmp	r4, #0
 802300a:	fa5f f18c 	uxtb.w	r1, ip
 802300e:	9004      	str	r0, [sp, #16]
 8023010:	9106      	str	r1, [sp, #24]
 8023012:	eb02 0e05 	add.w	lr, r2, r5
 8023016:	f104 0801 	add.w	r8, r4, #1
 802301a:	f9bd 9054 	ldrsh.w	r9, [sp, #84]	; 0x54
 802301e:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 8023022:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 8023026:	9308      	str	r3, [sp, #32]
 8023028:	db02      	blt.n	8023030 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802302a:	45a1      	cmp	r9, r4
 802302c:	f300 8119 	bgt.w	8023262 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28e>
 8023030:	f04f 0c00 	mov.w	ip, #0
 8023034:	4665      	mov	r5, ip
 8023036:	4662      	mov	r2, ip
 8023038:	4664      	mov	r4, ip
 802303a:	f1b8 0f00 	cmp.w	r8, #0
 802303e:	db02      	blt.n	8023046 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x72>
 8023040:	45c1      	cmp	r9, r8
 8023042:	f300 8127 	bgt.w	8023294 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c0>
 8023046:	f04f 0e00 	mov.w	lr, #0
 802304a:	46f0      	mov	r8, lr
 802304c:	4676      	mov	r6, lr
 802304e:	46f1      	mov	r9, lr
 8023050:	290f      	cmp	r1, #15
 8023052:	f200 815e 	bhi.w	8023312 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 8023056:	280f      	cmp	r0, #15
 8023058:	f200 815b 	bhi.w	8023312 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 802305c:	b280      	uxth	r0, r0
 802305e:	b289      	uxth	r1, r1
 8023060:	fb00 fa01 	mul.w	sl, r0, r1
 8023064:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023068:	b280      	uxth	r0, r0
 802306a:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 802306e:	fb00 fb08 	mul.w	fp, r0, r8
 8023072:	fb0a f70e 	mul.w	r7, sl, lr
 8023076:	9301      	str	r3, [sp, #4]
 8023078:	f009 13ff 	and.w	r3, r9, #16711935	; 0xff00ff
 802307c:	9302      	str	r3, [sp, #8]
 802307e:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8023082:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023086:	9303      	str	r3, [sp, #12]
 8023088:	0109      	lsls	r1, r1, #4
 802308a:	eba1 090a 	sub.w	r9, r1, sl
 802308e:	fa1f f989 	uxth.w	r9, r9
 8023092:	fb09 f30c 	mul.w	r3, r9, ip
 8023096:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802309a:	1a09      	subs	r1, r1, r0
 802309c:	b289      	uxth	r1, r1
 802309e:	fb01 3305 	mla	r3, r1, r5, r3
 80230a2:	445b      	add	r3, fp
 80230a4:	443b      	add	r3, r7
 80230a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80230aa:	2dff      	cmp	r5, #255	; 0xff
 80230ac:	9309      	str	r3, [sp, #36]	; 0x24
 80230ae:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80230b2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80230b6:	d019      	beq.n	80230ec <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x118>
 80230b8:	fb03 f305 	mul.w	r3, r3, r5
 80230bc:	fb04 f405 	mul.w	r4, r4, r5
 80230c0:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80230c4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80230c8:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80230cc:	f504 7780 	add.w	r7, r4, #256	; 0x100
 80230d0:	445b      	add	r3, fp
 80230d2:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80230d6:	0a1b      	lsrs	r3, r3, #8
 80230d8:	0a24      	lsrs	r4, r4, #8
 80230da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80230de:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80230e2:	431c      	orrs	r4, r3
 80230e4:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80230e8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80230ec:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80230f0:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 80230f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80230f8:	d018      	beq.n	802312c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x158>
 80230fa:	fb05 f50c 	mul.w	r5, r5, ip
 80230fe:	fb02 f20c 	mul.w	r2, r2, ip
 8023102:	0a2f      	lsrs	r7, r5, #8
 8023104:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023108:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 802310c:	f502 7c80 	add.w	ip, r2, #256	; 0x100
 8023110:	443d      	add	r5, r7
 8023112:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023116:	0a2d      	lsrs	r5, r5, #8
 8023118:	0a12      	lsrs	r2, r2, #8
 802311a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802311e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023122:	432a      	orrs	r2, r5
 8023124:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8023128:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802312c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023130:	d01f      	beq.n	8023172 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x19e>
 8023132:	9f02      	ldr	r7, [sp, #8]
 8023134:	fb07 fb08 	mul.w	fp, r7, r8
 8023138:	9f03      	ldr	r7, [sp, #12]
 802313a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802313e:	fb07 f808 	mul.w	r8, r7, r8
 8023142:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023146:	f508 7780 	add.w	r7, r8, #256	; 0x100
 802314a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802314e:	eb07 2718 	add.w	r7, r7, r8, lsr #8
 8023152:	44dc      	add	ip, fp
 8023154:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023158:	0a3f      	lsrs	r7, r7, #8
 802315a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802315e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023162:	ea4c 0807 	orr.w	r8, ip, r7
 8023166:	f008 17ff 	and.w	r7, r8, #16711935	; 0xff00ff
 802316a:	9702      	str	r7, [sp, #8]
 802316c:	f408 477f 	and.w	r7, r8, #65280	; 0xff00
 8023170:	9703      	str	r7, [sp, #12]
 8023172:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023176:	d01d      	beq.n	80231b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1e0>
 8023178:	9f01      	ldr	r7, [sp, #4]
 802317a:	fb06 f60e 	mul.w	r6, r6, lr
 802317e:	fb07 f80e 	mul.w	r8, r7, lr
 8023182:	ea4f 2c18 	mov.w	ip, r8, lsr #8
 8023186:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802318a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802318e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8023192:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8023196:	44e0      	add	r8, ip
 8023198:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802319c:	0a36      	lsrs	r6, r6, #8
 802319e:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80231a2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80231a6:	ea48 0606 	orr.w	r6, r8, r6
 80231aa:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 80231ae:	9701      	str	r7, [sp, #4]
 80231b0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80231b4:	f8bd e020 	ldrh.w	lr, [sp, #32]
 80231b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80231ba:	fb05 f509 	mul.w	r5, r5, r9
 80231be:	fb07 f70e 	mul.w	r7, r7, lr
 80231c2:	f107 0c01 	add.w	ip, r7, #1
 80231c6:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80231ca:	ea6f 2c1c 	mvn.w	ip, ip, lsr #8
 80231ce:	fb02 f209 	mul.w	r2, r2, r9
 80231d2:	fb03 5501 	mla	r5, r3, r1, r5
 80231d6:	fb04 2201 	mla	r2, r4, r1, r2
 80231da:	9b02      	ldr	r3, [sp, #8]
 80231dc:	fa5f fc8c 	uxtb.w	ip, ip
 80231e0:	fb03 5500 	mla	r5, r3, r0, r5
 80231e4:	9b03      	ldr	r3, [sp, #12]
 80231e6:	fb03 2200 	mla	r2, r3, r0, r2
 80231ea:	9b01      	ldr	r3, [sp, #4]
 80231ec:	fb03 550a 	mla	r5, r3, sl, r5
 80231f0:	fb06 2a0a 	mla	sl, r6, sl, r2
 80231f4:	9a05      	ldr	r2, [sp, #20]
 80231f6:	9b04      	ldr	r3, [sp, #16]
 80231f8:	fb12 f10c 	smulbb	r1, r2, ip
 80231fc:	9a06      	ldr	r2, [sp, #24]
 80231fe:	0a2e      	lsrs	r6, r5, #8
 8023200:	fb13 f30c 	smulbb	r3, r3, ip
 8023204:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023208:	fb12 fc0c 	smulbb	ip, r2, ip
 802320c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023210:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023214:	ea46 060a 	orr.w	r6, r6, sl
 8023218:	0c30      	lsrs	r0, r6, #16
 802321a:	f3c6 2207 	ubfx	r2, r6, #8, #8
 802321e:	b2f6      	uxtb	r6, r6
 8023220:	fb00 330e 	mla	r3, r0, lr, r3
 8023224:	fb02 120e 	mla	r2, r2, lr, r1
 8023228:	fb06 c60e 	mla	r6, r6, lr, ip
 802322c:	b298      	uxth	r0, r3
 802322e:	b291      	uxth	r1, r2
 8023230:	b2b6      	uxth	r6, r6
 8023232:	1c43      	adds	r3, r0, #1
 8023234:	f106 0e01 	add.w	lr, r6, #1
 8023238:	1c4a      	adds	r2, r1, #1
 802323a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802323e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8023242:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8023246:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802324a:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802324e:	0952      	lsrs	r2, r2, #5
 8023250:	4333      	orrs	r3, r6
 8023252:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023256:	4313      	orrs	r3, r2
 8023258:	9a07      	ldr	r2, [sp, #28]
 802325a:	8013      	strh	r3, [r2, #0]
 802325c:	b00b      	add	sp, #44	; 0x2c
 802325e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023262:	2e00      	cmp	r6, #0
 8023264:	db01      	blt.n	802326a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x296>
 8023266:	42b7      	cmp	r7, r6
 8023268:	dc3c      	bgt.n	80232e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x310>
 802326a:	2500      	movs	r5, #0
 802326c:	462c      	mov	r4, r5
 802326e:	1c72      	adds	r2, r6, #1
 8023270:	d427      	bmi.n	80232c2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2ee>
 8023272:	4297      	cmp	r7, r2
 8023274:	dd25      	ble.n	80232c2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2ee>
 8023276:	b131      	cbz	r1, 8023286 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2b2>
 8023278:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802327c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8023280:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8023284:	e6d9      	b.n	802303a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 8023286:	f1b8 0f00 	cmp.w	r8, #0
 802328a:	db3b      	blt.n	8023304 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x330>
 802328c:	45c1      	cmp	r9, r8
 802328e:	dd39      	ble.n	8023304 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x330>
 8023290:	468c      	mov	ip, r1
 8023292:	460a      	mov	r2, r1
 8023294:	b1c8      	cbz	r0, 80232ca <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2f6>
 8023296:	2e00      	cmp	r6, #0
 8023298:	db2d      	blt.n	80232f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x322>
 802329a:	42b7      	cmp	r7, r6
 802329c:	dd2b      	ble.n	80232f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x322>
 802329e:	f81e 8007 	ldrb.w	r8, [lr, r7]
 80232a2:	f85a 9028 	ldr.w	r9, [sl, r8, lsl #2]
 80232a6:	ea4f 6819 	mov.w	r8, r9, lsr #24
 80232aa:	3601      	adds	r6, #1
 80232ac:	d41f      	bmi.n	80232ee <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x31a>
 80232ae:	42b7      	cmp	r7, r6
 80232b0:	dd1d      	ble.n	80232ee <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x31a>
 80232b2:	b321      	cbz	r1, 80232fe <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x32a>
 80232b4:	4477      	add	r7, lr
 80232b6:	787e      	ldrb	r6, [r7, #1]
 80232b8:	f85a 6026 	ldr.w	r6, [sl, r6, lsl #2]
 80232bc:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 80232c0:	e6c6      	b.n	8023050 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x7c>
 80232c2:	f04f 0c00 	mov.w	ip, #0
 80232c6:	4662      	mov	r2, ip
 80232c8:	e6b7      	b.n	802303a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 80232ca:	290f      	cmp	r1, #15
 80232cc:	d821      	bhi.n	8023312 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 80232ce:	b289      	uxth	r1, r1
 80232d0:	4682      	mov	sl, r0
 80232d2:	4607      	mov	r7, r0
 80232d4:	4683      	mov	fp, r0
 80232d6:	e9cd 0002 	strd	r0, r0, [sp, #8]
 80232da:	4606      	mov	r6, r0
 80232dc:	9001      	str	r0, [sp, #4]
 80232de:	4686      	mov	lr, r0
 80232e0:	4680      	mov	r8, r0
 80232e2:	e6d1      	b.n	8023088 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb4>
 80232e4:	5d52      	ldrb	r2, [r2, r5]
 80232e6:	f85a 4022 	ldr.w	r4, [sl, r2, lsl #2]
 80232ea:	0e25      	lsrs	r5, r4, #24
 80232ec:	e7bf      	b.n	802326e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x29a>
 80232ee:	f04f 0e00 	mov.w	lr, #0
 80232f2:	4676      	mov	r6, lr
 80232f4:	e6ac      	b.n	8023050 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x7c>
 80232f6:	f04f 0800 	mov.w	r8, #0
 80232fa:	46c1      	mov	r9, r8
 80232fc:	e7d5      	b.n	80232aa <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2d6>
 80232fe:	460e      	mov	r6, r1
 8023300:	468e      	mov	lr, r1
 8023302:	e6a8      	b.n	8023056 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8023304:	460a      	mov	r2, r1
 8023306:	460e      	mov	r6, r1
 8023308:	4689      	mov	r9, r1
 802330a:	468e      	mov	lr, r1
 802330c:	4688      	mov	r8, r1
 802330e:	468c      	mov	ip, r1
 8023310:	e6a1      	b.n	8023056 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8023312:	4b03      	ldr	r3, [pc, #12]	; (8023320 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x34c>)
 8023314:	4a03      	ldr	r2, [pc, #12]	; (8023324 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x350>)
 8023316:	f44f 710f 	mov.w	r1, #572	; 0x23c
 802331a:	4803      	ldr	r0, [pc, #12]	; (8023328 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x354>)
 802331c:	f004 fedc 	bl	80280d8 <__assert_func>
 8023320:	0802b350 	.word	0x0802b350
 8023324:	0802b9c8 	.word	0x0802b9c8
 8023328:	0802b4d4 	.word	0x0802b4d4

0802332c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802332c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023330:	ed2d 8b08 	vpush	{d8-d11}
 8023334:	b0a9      	sub	sp, #164	; 0xa4
 8023336:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8023338:	9022      	str	r0, [sp, #136]	; 0x88
 802333a:	9115      	str	r1, [sp, #84]	; 0x54
 802333c:	6860      	ldr	r0, [r4, #4]
 802333e:	9940      	ldr	r1, [sp, #256]	; 0x100
 8023340:	9219      	str	r2, [sp, #100]	; 0x64
 8023342:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8023344:	e9dd ba3b 	ldrd	fp, sl, [sp, #236]	; 0xec
 8023348:	fb00 1202 	mla	r2, r0, r2, r1
 802334c:	6820      	ldr	r0, [r4, #0]
 802334e:	46d1      	mov	r9, sl
 8023350:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8023354:	46da      	mov	sl, fp
 8023356:	eeb0 aa40 	vmov.f32	s20, s0
 802335a:	eef0 9a60 	vmov.f32	s19, s1
 802335e:	eeb0 9a41 	vmov.f32	s18, s2
 8023362:	eef0 8a62 	vmov.f32	s17, s5
 8023366:	eeb0 8a43 	vmov.f32	s16, s6
 802336a:	eef0 ba44 	vmov.f32	s23, s8
 802336e:	eeb0 ba64 	vmov.f32	s22, s9
 8023372:	eef0 aa45 	vmov.f32	s21, s10
 8023376:	4693      	mov	fp, r2
 8023378:	9942      	ldr	r1, [sp, #264]	; 0x108
 802337a:	9d42      	ldr	r5, [sp, #264]	; 0x108
 802337c:	6849      	ldr	r1, [r1, #4]
 802337e:	f89d 410c 	ldrb.w	r4, [sp, #268]	; 0x10c
 8023382:	3104      	adds	r1, #4
 8023384:	682d      	ldr	r5, [r5, #0]
 8023386:	910e      	str	r1, [sp, #56]	; 0x38
 8023388:	b2a1      	uxth	r1, r4
 802338a:	9423      	str	r4, [sp, #140]	; 0x8c
 802338c:	9511      	str	r5, [sp, #68]	; 0x44
 802338e:	9112      	str	r1, [sp, #72]	; 0x48
 8023390:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023392:	2a00      	cmp	r2, #0
 8023394:	dc02      	bgt.n	802339c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023396:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8023398:	2a00      	cmp	r2, #0
 802339a:	dd65      	ble.n	8023468 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802339c:	9a42      	ldr	r2, [sp, #264]	; 0x108
 802339e:	2b00      	cmp	r3, #0
 80233a0:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 80233a4:	b234      	sxth	r4, r6
 80233a6:	fa0f f78c 	sxth.w	r7, ip
 80233aa:	f340 8396 	ble.w	8023ada <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ae>
 80233ae:	1e65      	subs	r5, r4, #1
 80233b0:	f107 3eff 	add.w	lr, r7, #4294967295
 80233b4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80233b8:	e9dd c83d 	ldrd	ip, r8, [sp, #244]	; 0xf4
 80233bc:	ea5f 422a 	movs.w	r2, sl, asr #16
 80233c0:	ea4f 4129 	mov.w	r1, r9, asr #16
 80233c4:	d405      	bmi.n	80233d2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80233c6:	42aa      	cmp	r2, r5
 80233c8:	da03      	bge.n	80233d2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80233ca:	2900      	cmp	r1, #0
 80233cc:	db01      	blt.n	80233d2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80233ce:	4571      	cmp	r1, lr
 80233d0:	db4f      	blt.n	8023472 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80233d2:	1c50      	adds	r0, r2, #1
 80233d4:	d406      	bmi.n	80233e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80233d6:	42a0      	cmp	r0, r4
 80233d8:	dc04      	bgt.n	80233e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80233da:	1c48      	adds	r0, r1, #1
 80233dc:	d402      	bmi.n	80233e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80233de:	42b8      	cmp	r0, r7
 80233e0:	f340 834f 	ble.w	8023a82 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 80233e4:	3b01      	subs	r3, #1
 80233e6:	44e2      	add	sl, ip
 80233e8:	44c1      	add	r9, r8
 80233ea:	f10b 0b02 	add.w	fp, fp, #2
 80233ee:	d1e5      	bne.n	80233bc <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80233f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80233f2:	2b00      	cmp	r3, #0
 80233f4:	dd38      	ble.n	8023468 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80233f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80233fa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80233fe:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023402:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023406:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802340a:	ee29 6aa7 	vmul.f32	s12, s19, s15
 802340e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023412:	ee76 6a68 	vsub.f32	s13, s12, s17
 8023416:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802341a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802341e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023422:	ee16 2a90 	vmov	r2, s13
 8023426:	3b01      	subs	r3, #1
 8023428:	9315      	str	r3, [sp, #84]	; 0x54
 802342a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802342c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023430:	ee17 2a10 	vmov	r2, s14
 8023434:	eeb0 7a48 	vmov.f32	s14, s16
 8023438:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802343c:	ee17 9a10 	vmov	r9, s14
 8023440:	eeb0 7a68 	vmov.f32	s14, s17
 8023444:	933d      	str	r3, [sp, #244]	; 0xf4
 8023446:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8023448:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802344c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023450:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8023452:	933e      	str	r3, [sp, #248]	; 0xf8
 8023454:	ee17 aa10 	vmov	sl, s14
 8023458:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802345a:	eeb0 8a67 	vmov.f32	s16, s15
 802345e:	eef0 8a46 	vmov.f32	s17, s12
 8023462:	bf08      	it	eq
 8023464:	4613      	moveq	r3, r2
 8023466:	e793      	b.n	8023390 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8023468:	b029      	add	sp, #164	; 0xa4
 802346a:	ecbd 8b08 	vpop	{d8-d11}
 802346e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023472:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8023476:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 802347a:	983d      	ldr	r0, [sp, #244]	; 0xf4
 802347c:	1e59      	subs	r1, r3, #1
 802347e:	fb00 a201 	mla	r2, r0, r1, sl
 8023482:	1412      	asrs	r2, r2, #16
 8023484:	910d      	str	r1, [sp, #52]	; 0x34
 8023486:	f100 8161 	bmi.w	802374c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802348a:	42aa      	cmp	r2, r5
 802348c:	f280 815e 	bge.w	802374c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8023490:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8023492:	fb02 9201 	mla	r2, r2, r1, r9
 8023496:	1412      	asrs	r2, r2, #16
 8023498:	f100 8158 	bmi.w	802374c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802349c:	3f01      	subs	r7, #1
 802349e:	42ba      	cmp	r2, r7
 80234a0:	f280 8154 	bge.w	802374c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80234a4:	2b00      	cmp	r3, #0
 80234a6:	dda3      	ble.n	80233f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 80234a8:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 80234ac:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 80234b0:	46d0      	mov	r8, sl
 80234b2:	4621      	mov	r1, r4
 80234b4:	e129      	b.n	802370a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80234b6:	f893 c001 	ldrb.w	ip, [r3, #1]
 80234ba:	f856 502c 	ldr.w	r5, [r6, ip, lsl #2]
 80234be:	9513      	str	r5, [sp, #76]	; 0x4c
 80234c0:	0e2d      	lsrs	r5, r5, #24
 80234c2:	950a      	str	r5, [sp, #40]	; 0x28
 80234c4:	b162      	cbz	r2, 80234e0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80234c6:	185d      	adds	r5, r3, r1
 80234c8:	786d      	ldrb	r5, [r5, #1]
 80234ca:	5c5b      	ldrb	r3, [r3, r1]
 80234cc:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 80234d0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80234d4:	9116      	str	r1, [sp, #88]	; 0x58
 80234d6:	9314      	str	r3, [sp, #80]	; 0x50
 80234d8:	0e09      	lsrs	r1, r1, #24
 80234da:	0e1b      	lsrs	r3, r3, #24
 80234dc:	910c      	str	r1, [sp, #48]	; 0x30
 80234de:	930b      	str	r3, [sp, #44]	; 0x2c
 80234e0:	b2a4      	uxth	r4, r4
 80234e2:	b292      	uxth	r2, r2
 80234e4:	fb04 f502 	mul.w	r5, r4, r2
 80234e8:	0124      	lsls	r4, r4, #4
 80234ea:	1b66      	subs	r6, r4, r5
 80234ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80234ee:	b2b6      	uxth	r6, r6
 80234f0:	fb06 f103 	mul.w	r1, r6, r3
 80234f4:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80234f8:	b292      	uxth	r2, r2
 80234fa:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 80234fe:	1a9b      	subs	r3, r3, r2
 8023500:	b29b      	uxth	r3, r3
 8023502:	fb03 1100 	mla	r1, r3, r0, r1
 8023506:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023508:	fb02 1104 	mla	r1, r2, r4, r1
 802350c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802350e:	fb05 1104 	mla	r1, r5, r4, r1
 8023512:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023516:	2900      	cmp	r1, #0
 8023518:	f000 80ea 	beq.w	80236f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c4>
 802351c:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 8023520:	28ff      	cmp	r0, #255	; 0xff
 8023522:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023526:	940f      	str	r4, [sp, #60]	; 0x3c
 8023528:	970d      	str	r7, [sp, #52]	; 0x34
 802352a:	d01c      	beq.n	8023566 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802352c:	fb04 f400 	mul.w	r4, r4, r0
 8023530:	4627      	mov	r7, r4
 8023532:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023534:	fb04 fe00 	mul.w	lr, r4, r0
 8023538:	0a3c      	lsrs	r4, r7, #8
 802353a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802353e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023542:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 8023546:	4427      	add	r7, r4
 8023548:	eb00 201e 	add.w	r0, r0, lr, lsr #8
 802354c:	0a3f      	lsrs	r7, r7, #8
 802354e:	0a00      	lsrs	r0, r0, #8
 8023550:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023554:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023558:	4307      	orrs	r7, r0
 802355a:	f007 10ff 	and.w	r0, r7, #16711935	; 0xff00ff
 802355e:	900f      	str	r0, [sp, #60]	; 0x3c
 8023560:	f407 407f 	and.w	r0, r7, #65280	; 0xff00
 8023564:	900d      	str	r0, [sp, #52]	; 0x34
 8023566:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023568:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 802356c:	f400 4e7f 	and.w	lr, r0, #65280	; 0xff00
 8023570:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023572:	28ff      	cmp	r0, #255	; 0xff
 8023574:	d01c      	beq.n	80235b0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8023576:	fb0c fc00 	mul.w	ip, ip, r0
 802357a:	fb0e fe00 	mul.w	lr, lr, r0
 802357e:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8023582:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023586:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802358a:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 802358e:	44a4      	add	ip, r4
 8023590:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8023594:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023598:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802359c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80235a0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80235a4:	ea4c 0e0e 	orr.w	lr, ip, lr
 80235a8:	f00e 1cff 	and.w	ip, lr, #16711935	; 0xff00ff
 80235ac:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80235b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80235b2:	f000 17ff 	and.w	r7, r0, #16711935	; 0xff00ff
 80235b6:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 80235ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80235bc:	28ff      	cmp	r0, #255	; 0xff
 80235be:	d01a      	beq.n	80235f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80235c0:	fb07 f700 	mul.w	r7, r7, r0
 80235c4:	fb0a fa00 	mul.w	sl, sl, r0
 80235c8:	0a3c      	lsrs	r4, r7, #8
 80235ca:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80235ce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80235d2:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80235d6:	4427      	add	r7, r4
 80235d8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80235dc:	0a3f      	lsrs	r7, r7, #8
 80235de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80235e2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80235e6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80235ea:	ea47 0a0a 	orr.w	sl, r7, sl
 80235ee:	f00a 17ff 	and.w	r7, sl, #16711935	; 0xff00ff
 80235f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80235f6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80235f8:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80235fc:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8023600:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023602:	2cff      	cmp	r4, #255	; 0xff
 8023604:	d01d      	beq.n	8023642 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8023606:	fb00 f004 	mul.w	r0, r0, r4
 802360a:	fb0b fb04 	mul.w	fp, fp, r4
 802360e:	0a04      	lsrs	r4, r0, #8
 8023610:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023614:	9418      	str	r4, [sp, #96]	; 0x60
 8023616:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 802361a:	9417      	str	r4, [sp, #92]	; 0x5c
 802361c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802361e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8023622:	4420      	add	r0, r4
 8023624:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023626:	0a00      	lsrs	r0, r0, #8
 8023628:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 802362c:	0a24      	lsrs	r4, r4, #8
 802362e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023632:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8023636:	ea40 0b0b 	orr.w	fp, r0, fp
 802363a:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 802363e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023642:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023644:	fb0c fc06 	mul.w	ip, ip, r6
 8023648:	fb01 f104 	mul.w	r1, r1, r4
 802364c:	1c4c      	adds	r4, r1, #1
 802364e:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8023652:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023656:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023658:	fb0e f606 	mul.w	r6, lr, r6
 802365c:	fb04 cc03 	mla	ip, r4, r3, ip
 8023660:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023662:	fb07 cc02 	mla	ip, r7, r2, ip
 8023666:	fb04 6603 	mla	r6, r4, r3, r6
 802366a:	fb0a 6602 	mla	r6, sl, r2, r6
 802366e:	fb00 cc05 	mla	ip, r0, r5, ip
 8023672:	fb0b 6605 	mla	r6, fp, r5, r6
 8023676:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802367a:	0a36      	lsrs	r6, r6, #8
 802367c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023680:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 8023684:	ea4c 0303 	orr.w	r3, ip, r3
 8023688:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802368a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802368c:	0c1f      	lsrs	r7, r3, #16
 802368e:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8023692:	b2db      	uxtb	r3, r3
 8023694:	8805      	ldrh	r5, [r0, #0]
 8023696:	fb13 f302 	smulbb	r3, r3, r2
 802369a:	fb17 f702 	smulbb	r7, r7, r2
 802369e:	fb16 f602 	smulbb	r6, r6, r2
 80236a2:	1228      	asrs	r0, r5, #8
 80236a4:	10ea      	asrs	r2, r5, #3
 80236a6:	00ed      	lsls	r5, r5, #3
 80236a8:	b2c9      	uxtb	r1, r1
 80236aa:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80236ae:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80236b2:	b2ed      	uxtb	r5, r5
 80236b4:	fb00 7001 	mla	r0, r0, r1, r7
 80236b8:	fb02 6201 	mla	r2, r2, r1, r6
 80236bc:	fb05 3101 	mla	r1, r5, r1, r3
 80236c0:	b280      	uxth	r0, r0
 80236c2:	b292      	uxth	r2, r2
 80236c4:	b289      	uxth	r1, r1
 80236c6:	1c43      	adds	r3, r0, #1
 80236c8:	1c4c      	adds	r4, r1, #1
 80236ca:	f102 0c01 	add.w	ip, r2, #1
 80236ce:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80236d2:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 80236d6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80236da:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80236de:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80236e2:	0952      	lsrs	r2, r2, #5
 80236e4:	4308      	orrs	r0, r1
 80236e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80236ea:	4302      	orrs	r2, r0
 80236ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80236ee:	8002      	strh	r2, [r0, #0]
 80236f0:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 80236f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236f4:	4490      	add	r8, r2
 80236f6:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80236f8:	3302      	adds	r3, #2
 80236fa:	4491      	add	r9, r2
 80236fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80236fe:	9309      	str	r3, [sp, #36]	; 0x24
 8023700:	4293      	cmp	r3, r2
 8023702:	d021      	beq.n	8023748 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8023704:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8023706:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802370a:	ea4f 4228 	mov.w	r2, r8, asr #16
 802370e:	ea4f 4329 	mov.w	r3, r9, asr #16
 8023712:	fb01 2303 	mla	r3, r1, r3, r2
 8023716:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023718:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 802371a:	5cc2      	ldrb	r2, [r0, r3]
 802371c:	f3c8 3403 	ubfx	r4, r8, #12, #4
 8023720:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8023724:	4403      	add	r3, r0
 8023726:	f3c9 3203 	ubfx	r2, r9, #12, #4
 802372a:	0e38      	lsrs	r0, r7, #24
 802372c:	2c00      	cmp	r4, #0
 802372e:	f47f aec2 	bne.w	80234b6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8023732:	2a00      	cmp	r2, #0
 8023734:	f43f aed4 	beq.w	80234e0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023738:	5c5b      	ldrb	r3, [r3, r1]
 802373a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802373c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8023740:	9314      	str	r3, [sp, #80]	; 0x50
 8023742:	0e1b      	lsrs	r3, r3, #24
 8023744:	930b      	str	r3, [sp, #44]	; 0x2c
 8023746:	e6cb      	b.n	80234e0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023748:	4693      	mov	fp, r2
 802374a:	e651      	b.n	80233f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 802374c:	2b00      	cmp	r3, #0
 802374e:	f77f ae4f 	ble.w	80233f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8023752:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8023756:	ea4f 422a 	mov.w	r2, sl, asr #16
 802375a:	ea4f 4129 	mov.w	r1, r9, asr #16
 802375e:	2a00      	cmp	r2, #0
 8023760:	465f      	mov	r7, fp
 8023762:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8023766:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8023768:	e9dd 5b3d 	ldrd	r5, fp, [sp, #244]	; 0xf4
 802376c:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8023770:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 8023774:	f2c0 815c 	blt.w	8023a30 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8023778:	1e73      	subs	r3, r6, #1
 802377a:	429a      	cmp	r2, r3
 802377c:	f280 8158 	bge.w	8023a30 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8023780:	2900      	cmp	r1, #0
 8023782:	f2c0 8155 	blt.w	8023a30 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8023786:	f10c 33ff 	add.w	r3, ip, #4294967295
 802378a:	4299      	cmp	r1, r3
 802378c:	f280 8150 	bge.w	8023a30 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8023790:	b233      	sxth	r3, r6
 8023792:	fb01 2203 	mla	r2, r1, r3, r2
 8023796:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023798:	930f      	str	r3, [sp, #60]	; 0x3c
 802379a:	5c8b      	ldrb	r3, [r1, r2]
 802379c:	440a      	add	r2, r1
 802379e:	4616      	mov	r6, r2
 80237a0:	9210      	str	r2, [sp, #64]	; 0x40
 80237a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80237a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80237a8:	0e0b      	lsrs	r3, r1, #24
 80237aa:	2800      	cmp	r0, #0
 80237ac:	f000 816f 	beq.w	8023a8e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x762>
 80237b0:	f896 c001 	ldrb.w	ip, [r6, #1]
 80237b4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80237b8:	9224      	str	r2, [sp, #144]	; 0x90
 80237ba:	0e12      	lsrs	r2, r2, #24
 80237bc:	921a      	str	r2, [sp, #104]	; 0x68
 80237be:	f1be 0f00 	cmp.w	lr, #0
 80237c2:	f040 8172 	bne.w	8023aaa <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 80237c6:	b280      	uxth	r0, r0
 80237c8:	fa1f fc8e 	uxth.w	ip, lr
 80237cc:	fb00 f20c 	mul.w	r2, r0, ip
 80237d0:	0106      	lsls	r6, r0, #4
 80237d2:	1ab0      	subs	r0, r6, r2
 80237d4:	b280      	uxth	r0, r0
 80237d6:	4686      	mov	lr, r0
 80237d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80237da:	981a      	ldr	r0, [sp, #104]	; 0x68
 80237dc:	ebc2 1c0c 	rsb	ip, r2, ip, lsl #4
 80237e0:	fb0e f000 	mul.w	r0, lr, r0
 80237e4:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 80237e8:	fa1f fe8c 	uxth.w	lr, ip
 80237ec:	eba6 060e 	sub.w	r6, r6, lr
 80237f0:	b2b6      	uxth	r6, r6
 80237f2:	fb06 0003 	mla	r0, r6, r3, r0
 80237f6:	9610      	str	r6, [sp, #64]	; 0x40
 80237f8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80237fa:	fb0e 0006 	mla	r0, lr, r6, r0
 80237fe:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8023800:	fb02 0006 	mla	r0, r2, r6, r0
 8023804:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023808:	9017      	str	r0, [sp, #92]	; 0x5c
 802380a:	2800      	cmp	r0, #0
 802380c:	f000 80fa 	beq.w	8023a04 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8023810:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 8023814:	2bff      	cmp	r3, #255	; 0xff
 8023816:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802381a:	9018      	str	r0, [sp, #96]	; 0x60
 802381c:	911d      	str	r1, [sp, #116]	; 0x74
 802381e:	d01b      	beq.n	8023858 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52c>
 8023820:	fb01 f103 	mul.w	r1, r1, r3
 8023824:	fb00 f003 	mul.w	r0, r0, r3
 8023828:	460b      	mov	r3, r1
 802382a:	0a01      	lsrs	r1, r0, #8
 802382c:	f100 1601 	add.w	r6, r0, #65537	; 0x10001
 8023830:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023834:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8023838:	4431      	add	r1, r6
 802383a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802383e:	0a09      	lsrs	r1, r1, #8
 8023840:	0a1b      	lsrs	r3, r3, #8
 8023842:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023846:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802384a:	430b      	orrs	r3, r1
 802384c:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8023850:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023854:	9118      	str	r1, [sp, #96]	; 0x60
 8023856:	931d      	str	r3, [sp, #116]	; 0x74
 8023858:	9924      	ldr	r1, [sp, #144]	; 0x90
 802385a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 802385c:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8023860:	2eff      	cmp	r6, #255	; 0xff
 8023862:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023866:	931e      	str	r3, [sp, #120]	; 0x78
 8023868:	911f      	str	r1, [sp, #124]	; 0x7c
 802386a:	d01b      	beq.n	80238a4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x578>
 802386c:	fb01 f106 	mul.w	r1, r1, r6
 8023870:	fb03 f306 	mul.w	r3, r3, r6
 8023874:	460e      	mov	r6, r1
 8023876:	0a19      	lsrs	r1, r3, #8
 8023878:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 802387c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023880:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8023884:	4401      	add	r1, r0
 8023886:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 802388a:	0a09      	lsrs	r1, r1, #8
 802388c:	0a1b      	lsrs	r3, r3, #8
 802388e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023892:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023896:	4319      	orrs	r1, r3
 8023898:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 802389c:	931e      	str	r3, [sp, #120]	; 0x78
 802389e:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
 80238a2:	931f      	str	r3, [sp, #124]	; 0x7c
 80238a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80238a6:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 80238aa:	f403 4c7f 	and.w	ip, r3, #65280	; 0xff00
 80238ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80238b0:	9120      	str	r1, [sp, #128]	; 0x80
 80238b2:	2bff      	cmp	r3, #255	; 0xff
 80238b4:	d01c      	beq.n	80238f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 80238b6:	fb01 f103 	mul.w	r1, r1, r3
 80238ba:	4608      	mov	r0, r1
 80238bc:	fb0c fc03 	mul.w	ip, ip, r3
 80238c0:	0a09      	lsrs	r1, r1, #8
 80238c2:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 80238c6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80238ca:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80238ce:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80238d2:	4408      	add	r0, r1
 80238d4:	0a00      	lsrs	r0, r0, #8
 80238d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80238da:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80238de:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80238e2:	ea40 0c0c 	orr.w	ip, r0, ip
 80238e6:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80238ea:	9320      	str	r3, [sp, #128]	; 0x80
 80238ec:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80238f0:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80238f2:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 80238f6:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 80238fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80238fc:	9321      	str	r3, [sp, #132]	; 0x84
 80238fe:	29ff      	cmp	r1, #255	; 0xff
 8023900:	d019      	beq.n	8023936 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 8023902:	fb03 f301 	mul.w	r3, r3, r1
 8023906:	fb06 f601 	mul.w	r6, r6, r1
 802390a:	0a19      	lsrs	r1, r3, #8
 802390c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023910:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8023914:	f506 7080 	add.w	r0, r6, #256	; 0x100
 8023918:	4419      	add	r1, r3
 802391a:	eb00 2616 	add.w	r6, r0, r6, lsr #8
 802391e:	0a09      	lsrs	r1, r1, #8
 8023920:	0a36      	lsrs	r6, r6, #8
 8023922:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023926:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802392a:	430e      	orrs	r6, r1
 802392c:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8023930:	9321      	str	r3, [sp, #132]	; 0x84
 8023932:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023936:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8023938:	9912      	ldr	r1, [sp, #72]	; 0x48
 802393a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802393c:	fb00 f001 	mul.w	r0, r0, r1
 8023940:	4601      	mov	r1, r0
 8023942:	3001      	adds	r0, #1
 8023944:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8023948:	ea6f 2011 	mvn.w	r0, r1, lsr #8
 802394c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802394e:	9025      	str	r0, [sp, #148]	; 0x94
 8023950:	981e      	ldr	r0, [sp, #120]	; 0x78
 8023952:	fb00 f001 	mul.w	r0, r0, r1
 8023956:	900f      	str	r0, [sp, #60]	; 0x3c
 8023958:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802395a:	fb00 f001 	mul.w	r0, r0, r1
 802395e:	9017      	str	r0, [sp, #92]	; 0x5c
 8023960:	9818      	ldr	r0, [sp, #96]	; 0x60
 8023962:	4601      	mov	r1, r0
 8023964:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023966:	fb01 0003 	mla	r0, r1, r3, r0
 802396a:	900f      	str	r0, [sp, #60]	; 0x3c
 802396c:	981d      	ldr	r0, [sp, #116]	; 0x74
 802396e:	4601      	mov	r1, r0
 8023970:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8023972:	fb01 0103 	mla	r1, r1, r3, r0
 8023976:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023978:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802397a:	fb0c 110e 	mla	r1, ip, lr, r1
 802397e:	fb03 000e 	mla	r0, r3, lr, r0
 8023982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023984:	f89d e094 	ldrb.w	lr, [sp, #148]	; 0x94
 8023988:	fb03 0002 	mla	r0, r3, r2, r0
 802398c:	fb06 1302 	mla	r3, r6, r2, r1
 8023990:	0a02      	lsrs	r2, r0, #8
 8023992:	0a1b      	lsrs	r3, r3, #8
 8023994:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023998:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802399c:	4313      	orrs	r3, r2
 802399e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80239a0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80239a4:	f3c3 2607 	ubfx	r6, r3, #8, #8
 80239a8:	b2db      	uxtb	r3, r3
 80239aa:	8838      	ldrh	r0, [r7, #0]
 80239ac:	fb16 f602 	smulbb	r6, r6, r2
 80239b0:	fb1c fc02 	smulbb	ip, ip, r2
 80239b4:	fb13 f302 	smulbb	r3, r3, r2
 80239b8:	1201      	asrs	r1, r0, #8
 80239ba:	10c2      	asrs	r2, r0, #3
 80239bc:	00c0      	lsls	r0, r0, #3
 80239be:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80239c2:	b2c0      	uxtb	r0, r0
 80239c4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80239c8:	fb01 cc0e 	mla	ip, r1, lr, ip
 80239cc:	fb02 620e 	mla	r2, r2, lr, r6
 80239d0:	fb00 330e 	mla	r3, r0, lr, r3
 80239d4:	b296      	uxth	r6, r2
 80239d6:	b29b      	uxth	r3, r3
 80239d8:	fa1f fc8c 	uxth.w	ip, ip
 80239dc:	1c58      	adds	r0, r3, #1
 80239de:	f10c 0201 	add.w	r2, ip, #1
 80239e2:	1c71      	adds	r1, r6, #1
 80239e4:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 80239e8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80239ec:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 80239f0:	f402 4378 	and.w	r3, r2, #63488	; 0xf800
 80239f4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80239f8:	094a      	lsrs	r2, r1, #5
 80239fa:	4303      	orrs	r3, r0
 80239fc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023a00:	4313      	orrs	r3, r2
 8023a02:	803b      	strh	r3, [r7, #0]
 8023a04:	f1b8 0f00 	cmp.w	r8, #0
 8023a08:	f107 0702 	add.w	r7, r7, #2
 8023a0c:	44aa      	add	sl, r5
 8023a0e:	44d9      	add	r9, fp
 8023a10:	dd2e      	ble.n	8023a70 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8023a12:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8023a16:	ea4f 422a 	mov.w	r2, sl, asr #16
 8023a1a:	2a00      	cmp	r2, #0
 8023a1c:	f108 38ff 	add.w	r8, r8, #4294967295
 8023a20:	ea4f 4129 	mov.w	r1, r9, asr #16
 8023a24:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8023a28:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 8023a2c:	f6bf aea4 	bge.w	8023778 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8023a30:	1c53      	adds	r3, r2, #1
 8023a32:	d4e7      	bmi.n	8023a04 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8023a34:	42b3      	cmp	r3, r6
 8023a36:	dce5      	bgt.n	8023a04 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8023a38:	1c4b      	adds	r3, r1, #1
 8023a3a:	d4e3      	bmi.n	8023a04 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8023a3c:	4563      	cmp	r3, ip
 8023a3e:	dce1      	bgt.n	8023a04 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8023a40:	fa0f f38c 	sxth.w	r3, ip
 8023a44:	b236      	sxth	r6, r6
 8023a46:	e9cd 6300 	strd	r6, r3, [sp]
 8023a4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023a4c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8023a50:	e9cd e305 	strd	lr, r3, [sp, #20]
 8023a54:	9202      	str	r2, [sp, #8]
 8023a56:	4639      	mov	r1, r7
 8023a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023a5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023a5c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8023a5e:	f7ff fab9 	bl	8022fd4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8023a62:	f1b8 0f00 	cmp.w	r8, #0
 8023a66:	f107 0702 	add.w	r7, r7, #2
 8023a6a:	44aa      	add	sl, r5
 8023a6c:	44d9      	add	r9, fp
 8023a6e:	dcd0      	bgt.n	8023a12 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e6>
 8023a70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023a72:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8023a76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023a7a:	3301      	adds	r3, #1
 8023a7c:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8023a80:	e4b6      	b.n	80233f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8023a82:	3b01      	subs	r3, #1
 8023a84:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8023a88:	930d      	str	r3, [sp, #52]	; 0x34
 8023a8a:	4698      	mov	r8, r3
 8023a8c:	e667      	b.n	802375e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8023a8e:	f1be 0f00 	cmp.w	lr, #0
 8023a92:	f43f ae98 	beq.w	80237c6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8023a96:	4632      	mov	r2, r6
 8023a98:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023a9a:	5d92      	ldrb	r2, [r2, r6]
 8023a9c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8023a9e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8023aa2:	9226      	str	r2, [sp, #152]	; 0x98
 8023aa4:	0e12      	lsrs	r2, r2, #24
 8023aa6:	921b      	str	r2, [sp, #108]	; 0x6c
 8023aa8:	e68d      	b.n	80237c6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8023aaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023aac:	eb06 0c02 	add.w	ip, r6, r2
 8023ab0:	4632      	mov	r2, r6
 8023ab2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023ab4:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023ab8:	5d92      	ldrb	r2, [r2, r6]
 8023aba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8023abc:	9210      	str	r2, [sp, #64]	; 0x40
 8023abe:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 8023ac2:	920f      	str	r2, [sp, #60]	; 0x3c
 8023ac4:	9227      	str	r2, [sp, #156]	; 0x9c
 8023ac6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023ac8:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8023acc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023ace:	9626      	str	r6, [sp, #152]	; 0x98
 8023ad0:	0e12      	lsrs	r2, r2, #24
 8023ad2:	921c      	str	r2, [sp, #112]	; 0x70
 8023ad4:	0e32      	lsrs	r2, r6, #24
 8023ad6:	921b      	str	r2, [sp, #108]	; 0x6c
 8023ad8:	e675      	b.n	80237c6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8023ada:	f43f ac89 	beq.w	80233f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8023ade:	1e65      	subs	r5, r4, #1
 8023ae0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8023ae4:	e4c9      	b.n	802347a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8023ae6:	bf00      	nop

08023ae8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8023ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023aec:	b089      	sub	sp, #36	; 0x24
 8023aee:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
 8023af2:	880f      	ldrh	r7, [r1, #0]
 8023af4:	e9dd 5014 	ldrd	r5, r0, [sp, #80]	; 0x50
 8023af8:	fb00 5408 	mla	r4, r0, r8, r5
 8023afc:	9106      	str	r1, [sp, #24]
 8023afe:	10f9      	asrs	r1, r7, #3
 8023b00:	123e      	asrs	r6, r7, #8
 8023b02:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023b06:	00ff      	lsls	r7, r7, #3
 8023b08:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8023b0c:	9104      	str	r1, [sp, #16]
 8023b0e:	2800      	cmp	r0, #0
 8023b10:	b2f9      	uxtb	r1, r7
 8023b12:	9105      	str	r1, [sp, #20]
 8023b14:	9603      	str	r6, [sp, #12]
 8023b16:	eb02 0704 	add.w	r7, r2, r4
 8023b1a:	f100 0c01 	add.w	ip, r0, #1
 8023b1e:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8023b22:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8023b26:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8023b2a:	db02      	blt.n	8023b32 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x4a>
 8023b2c:	4582      	cmp	sl, r0
 8023b2e:	f300 8113 	bgt.w	8023d58 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8023b32:	2600      	movs	r6, #0
 8023b34:	46b1      	mov	r9, r6
 8023b36:	4630      	mov	r0, r6
 8023b38:	4634      	mov	r4, r6
 8023b3a:	f1bc 0f00 	cmp.w	ip, #0
 8023b3e:	db02      	blt.n	8023b46 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5e>
 8023b40:	45e2      	cmp	sl, ip
 8023b42:	f300 8123 	bgt.w	8023d8c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a4>
 8023b46:	2700      	movs	r7, #0
 8023b48:	46bc      	mov	ip, r7
 8023b4a:	463d      	mov	r5, r7
 8023b4c:	9702      	str	r7, [sp, #8]
 8023b4e:	f1be 0f0f 	cmp.w	lr, #15
 8023b52:	f200 8160 	bhi.w	8023e16 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8023b56:	290f      	cmp	r1, #15
 8023b58:	f200 815d 	bhi.w	8023e16 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8023b5c:	b289      	uxth	r1, r1
 8023b5e:	fa1f f38e 	uxth.w	r3, lr
 8023b62:	fb01 f803 	mul.w	r8, r1, r3
 8023b66:	f005 12ff 	and.w	r2, r5, #16711935	; 0xff00ff
 8023b6a:	9200      	str	r2, [sp, #0]
 8023b6c:	9a02      	ldr	r2, [sp, #8]
 8023b6e:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8023b72:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023b76:	b289      	uxth	r1, r1
 8023b78:	9201      	str	r2, [sp, #4]
 8023b7a:	fb01 fa0c 	mul.w	sl, r1, ip
 8023b7e:	9a02      	ldr	r2, [sp, #8]
 8023b80:	fb08 fb07 	mul.w	fp, r8, r7
 8023b84:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023b88:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023b8c:	9202      	str	r2, [sp, #8]
 8023b8e:	011b      	lsls	r3, r3, #4
 8023b90:	eba3 0e08 	sub.w	lr, r3, r8
 8023b94:	fa1f fe8e 	uxth.w	lr, lr
 8023b98:	fb0e f206 	mul.w	r2, lr, r6
 8023b9c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8023ba0:	1a5b      	subs	r3, r3, r1
 8023ba2:	b29b      	uxth	r3, r3
 8023ba4:	fb03 2209 	mla	r2, r3, r9, r2
 8023ba8:	4452      	add	r2, sl
 8023baa:	445a      	add	r2, fp
 8023bac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023bb0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023bb4:	9207      	str	r2, [sp, #28]
 8023bb6:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 8023bba:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023bbe:	d019      	beq.n	8023bf4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x10c>
 8023bc0:	fb02 f209 	mul.w	r2, r2, r9
 8023bc4:	fb04 f409 	mul.w	r4, r4, r9
 8023bc8:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8023bcc:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023bd0:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8023bd4:	f504 7a80 	add.w	sl, r4, #256	; 0x100
 8023bd8:	445a      	add	r2, fp
 8023bda:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8023bde:	0a12      	lsrs	r2, r2, #8
 8023be0:	0a24      	lsrs	r4, r4, #8
 8023be2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023be6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023bea:	4314      	orrs	r4, r2
 8023bec:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 8023bf0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023bf4:	2eff      	cmp	r6, #255	; 0xff
 8023bf6:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 8023bfa:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023bfe:	d01b      	beq.n	8023c38 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x150>
 8023c00:	fb0a fa06 	mul.w	sl, sl, r6
 8023c04:	fb00 f006 	mul.w	r0, r0, r6
 8023c08:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8023c0c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023c10:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023c14:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8023c18:	44da      	add	sl, fp
 8023c1a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8023c1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c22:	0a00      	lsrs	r0, r0, #8
 8023c24:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8023c28:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023c2c:	ea4a 0000 	orr.w	r0, sl, r0
 8023c30:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 8023c34:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023c38:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023c3c:	d020      	beq.n	8023c80 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x198>
 8023c3e:	9e01      	ldr	r6, [sp, #4]
 8023c40:	fb06 fb0c 	mul.w	fp, r6, ip
 8023c44:	9e02      	ldr	r6, [sp, #8]
 8023c46:	ea4f 291b 	mov.w	r9, fp, lsr #8
 8023c4a:	fb06 fc0c 	mul.w	ip, r6, ip
 8023c4e:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8023c52:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8023c56:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c5a:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8023c5e:	44cb      	add	fp, r9
 8023c60:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023c64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c68:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023c6c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023c70:	ea4b 0c0c 	orr.w	ip, fp, ip
 8023c74:	f00c 16ff 	and.w	r6, ip, #16711935	; 0xff00ff
 8023c78:	9601      	str	r6, [sp, #4]
 8023c7a:	f40c 467f 	and.w	r6, ip, #65280	; 0xff00
 8023c7e:	9602      	str	r6, [sp, #8]
 8023c80:	2fff      	cmp	r7, #255	; 0xff
 8023c82:	d01d      	beq.n	8023cc0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d8>
 8023c84:	9e00      	ldr	r6, [sp, #0]
 8023c86:	fb05 f507 	mul.w	r5, r5, r7
 8023c8a:	fb06 fb07 	mul.w	fp, r6, r7
 8023c8e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8023c92:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8023c96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c9a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c9e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8023ca2:	44e3      	add	fp, ip
 8023ca4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023ca8:	0a2d      	lsrs	r5, r5, #8
 8023caa:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023cae:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023cb2:	ea4b 0505 	orr.w	r5, fp, r5
 8023cb6:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8023cba:	9600      	str	r6, [sp, #0]
 8023cbc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023cc0:	9e07      	ldr	r6, [sp, #28]
 8023cc2:	fb0a fa0e 	mul.w	sl, sl, lr
 8023cc6:	43f7      	mvns	r7, r6
 8023cc8:	fb00 f00e 	mul.w	r0, r0, lr
 8023ccc:	fb02 aa03 	mla	sl, r2, r3, sl
 8023cd0:	fb04 0003 	mla	r0, r4, r3, r0
 8023cd4:	9b01      	ldr	r3, [sp, #4]
 8023cd6:	b2ff      	uxtb	r7, r7
 8023cd8:	fb03 aa01 	mla	sl, r3, r1, sl
 8023cdc:	9b02      	ldr	r3, [sp, #8]
 8023cde:	fb03 0c01 	mla	ip, r3, r1, r0
 8023ce2:	9b00      	ldr	r3, [sp, #0]
 8023ce4:	9803      	ldr	r0, [sp, #12]
 8023ce6:	fb03 aa08 	mla	sl, r3, r8, sl
 8023cea:	9b05      	ldr	r3, [sp, #20]
 8023cec:	9904      	ldr	r1, [sp, #16]
 8023cee:	fb03 f307 	mul.w	r3, r3, r7
 8023cf2:	fb00 f007 	mul.w	r0, r0, r7
 8023cf6:	fb01 f107 	mul.w	r1, r1, r7
 8023cfa:	461f      	mov	r7, r3
 8023cfc:	fb05 c808 	mla	r8, r5, r8, ip
 8023d00:	ea4f 251a 	mov.w	r5, sl, lsr #8
 8023d04:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023d08:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023d0c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023d10:	ea45 0508 	orr.w	r5, r5, r8
 8023d14:	f100 0c01 	add.w	ip, r0, #1
 8023d18:	1c4e      	adds	r6, r1, #1
 8023d1a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8023d1e:	0c2c      	lsrs	r4, r5, #16
 8023d20:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8023d24:	1c78      	adds	r0, r7, #1
 8023d26:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8023d2a:	4b3e      	ldr	r3, [pc, #248]	; (8023e24 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x33c>)
 8023d2c:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8023d30:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8023d34:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8023d38:	b2ed      	uxtb	r5, r5
 8023d3a:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 8023d3e:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8023d42:	00d2      	lsls	r2, r2, #3
 8023d44:	ea43 05d5 	orr.w	r5, r3, r5, lsr #3
 8023d48:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8023d4c:	431d      	orrs	r5, r3
 8023d4e:	9b06      	ldr	r3, [sp, #24]
 8023d50:	801d      	strh	r5, [r3, #0]
 8023d52:	b009      	add	sp, #36	; 0x24
 8023d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d58:	2d00      	cmp	r5, #0
 8023d5a:	db01      	blt.n	8023d60 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x278>
 8023d5c:	45a8      	cmp	r8, r5
 8023d5e:	dc41      	bgt.n	8023de4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2fc>
 8023d60:	f04f 0900 	mov.w	r9, #0
 8023d64:	464c      	mov	r4, r9
 8023d66:	1c6a      	adds	r2, r5, #1
 8023d68:	d42a      	bmi.n	8023dc0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2d8>
 8023d6a:	4590      	cmp	r8, r2
 8023d6c:	dd28      	ble.n	8023dc0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2d8>
 8023d6e:	f1be 0f00 	cmp.w	lr, #0
 8023d72:	d004      	beq.n	8023d7e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x296>
 8023d74:	787a      	ldrb	r2, [r7, #1]
 8023d76:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023d7a:	0e06      	lsrs	r6, r0, #24
 8023d7c:	e6dd      	b.n	8023b3a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x52>
 8023d7e:	f1bc 0f00 	cmp.w	ip, #0
 8023d82:	db40      	blt.n	8023e06 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x31e>
 8023d84:	45e2      	cmp	sl, ip
 8023d86:	dd3e      	ble.n	8023e06 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x31e>
 8023d88:	4676      	mov	r6, lr
 8023d8a:	4670      	mov	r0, lr
 8023d8c:	b1d9      	cbz	r1, 8023dc6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2de>
 8023d8e:	2d00      	cmp	r5, #0
 8023d90:	db31      	blt.n	8023df6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x30e>
 8023d92:	45a8      	cmp	r8, r5
 8023d94:	dd2f      	ble.n	8023df6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x30e>
 8023d96:	f817 2008 	ldrb.w	r2, [r7, r8]
 8023d9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8023d9e:	9202      	str	r2, [sp, #8]
 8023da0:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8023da4:	3501      	adds	r5, #1
 8023da6:	d423      	bmi.n	8023df0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x308>
 8023da8:	45a8      	cmp	r8, r5
 8023daa:	dd21      	ble.n	8023df0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x308>
 8023dac:	f1be 0f00 	cmp.w	lr, #0
 8023db0:	d026      	beq.n	8023e00 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x318>
 8023db2:	44b8      	add	r8, r7
 8023db4:	f898 5001 	ldrb.w	r5, [r8, #1]
 8023db8:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8023dbc:	0e2f      	lsrs	r7, r5, #24
 8023dbe:	e6c6      	b.n	8023b4e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 8023dc0:	2600      	movs	r6, #0
 8023dc2:	4630      	mov	r0, r6
 8023dc4:	e6b9      	b.n	8023b3a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x52>
 8023dc6:	f1be 0f0f 	cmp.w	lr, #15
 8023dca:	d824      	bhi.n	8023e16 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8023dcc:	fa1f f38e 	uxth.w	r3, lr
 8023dd0:	4688      	mov	r8, r1
 8023dd2:	468b      	mov	fp, r1
 8023dd4:	468a      	mov	sl, r1
 8023dd6:	e9cd 1101 	strd	r1, r1, [sp, #4]
 8023dda:	460d      	mov	r5, r1
 8023ddc:	9100      	str	r1, [sp, #0]
 8023dde:	460f      	mov	r7, r1
 8023de0:	468c      	mov	ip, r1
 8023de2:	e6d4      	b.n	8023b8e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 8023de4:	5d12      	ldrb	r2, [r2, r4]
 8023de6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8023dea:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023dee:	e7ba      	b.n	8023d66 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27e>
 8023df0:	2700      	movs	r7, #0
 8023df2:	463d      	mov	r5, r7
 8023df4:	e6ab      	b.n	8023b4e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 8023df6:	f04f 0c00 	mov.w	ip, #0
 8023dfa:	f8cd c008 	str.w	ip, [sp, #8]
 8023dfe:	e7d1      	b.n	8023da4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2bc>
 8023e00:	4675      	mov	r5, lr
 8023e02:	4677      	mov	r7, lr
 8023e04:	e6a7      	b.n	8023b56 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6e>
 8023e06:	4670      	mov	r0, lr
 8023e08:	4675      	mov	r5, lr
 8023e0a:	f8cd e008 	str.w	lr, [sp, #8]
 8023e0e:	4677      	mov	r7, lr
 8023e10:	46f4      	mov	ip, lr
 8023e12:	4676      	mov	r6, lr
 8023e14:	e69f      	b.n	8023b56 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6e>
 8023e16:	4b04      	ldr	r3, [pc, #16]	; (8023e28 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x340>)
 8023e18:	4a04      	ldr	r2, [pc, #16]	; (8023e2c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x344>)
 8023e1a:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8023e1e:	4804      	ldr	r0, [pc, #16]	; (8023e30 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x348>)
 8023e20:	f004 f95a 	bl	80280d8 <__assert_func>
 8023e24:	fffff800 	.word	0xfffff800
 8023e28:	0802b350 	.word	0x0802b350
 8023e2c:	0802b9c8 	.word	0x0802b9c8
 8023e30:	0802b4d4 	.word	0x0802b4d4

08023e34 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e38:	ed2d 8b08 	vpush	{d8-d11}
 8023e3c:	b0a3      	sub	sp, #140	; 0x8c
 8023e3e:	901e      	str	r0, [sp, #120]	; 0x78
 8023e40:	9111      	str	r1, [sp, #68]	; 0x44
 8023e42:	9215      	str	r2, [sp, #84]	; 0x54
 8023e44:	e9dd 4139 	ldrd	r4, r1, [sp, #228]	; 0xe4
 8023e48:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8023e4a:	6860      	ldr	r0, [r4, #4]
 8023e4c:	e9dd 8b35 	ldrd	r8, fp, [sp, #212]	; 0xd4
 8023e50:	fb00 1202 	mla	r2, r0, r2, r1
 8023e54:	6820      	ldr	r0, [r4, #0]
 8023e56:	46c1      	mov	r9, r8
 8023e58:	eb00 0a42 	add.w	sl, r0, r2, lsl #1
 8023e5c:	46d8      	mov	r8, fp
 8023e5e:	eeb0 aa40 	vmov.f32	s20, s0
 8023e62:	eef0 9a60 	vmov.f32	s19, s1
 8023e66:	eeb0 9a41 	vmov.f32	s18, s2
 8023e6a:	eef0 8a62 	vmov.f32	s17, s5
 8023e6e:	eeb0 8a43 	vmov.f32	s16, s6
 8023e72:	eef0 ba44 	vmov.f32	s23, s8
 8023e76:	eeb0 ba64 	vmov.f32	s22, s9
 8023e7a:	eef0 aa45 	vmov.f32	s21, s10
 8023e7e:	46d3      	mov	fp, sl
 8023e80:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8023e82:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
 8023e84:	6849      	ldr	r1, [r1, #4]
 8023e86:	6824      	ldr	r4, [r4, #0]
 8023e88:	1d0a      	adds	r2, r1, #4
 8023e8a:	940e      	str	r4, [sp, #56]	; 0x38
 8023e8c:	920b      	str	r2, [sp, #44]	; 0x2c
 8023e8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023e90:	2a00      	cmp	r2, #0
 8023e92:	dc02      	bgt.n	8023e9a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8023e94:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023e96:	2a00      	cmp	r2, #0
 8023e98:	dd65      	ble.n	8023f66 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8023e9a:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8023e9c:	2b00      	cmp	r3, #0
 8023e9e:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8023ea2:	b234      	sxth	r4, r6
 8023ea4:	fa0f f78c 	sxth.w	r7, ip
 8023ea8:	f340 836d 	ble.w	8024586 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8023eac:	1e65      	subs	r5, r4, #1
 8023eae:	f107 3eff 	add.w	lr, r7, #4294967295
 8023eb2:	f8cd c01c 	str.w	ip, [sp, #28]
 8023eb6:	e9dd ca37 	ldrd	ip, sl, [sp, #220]	; 0xdc
 8023eba:	ea5f 4229 	movs.w	r2, r9, asr #16
 8023ebe:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023ec2:	d405      	bmi.n	8023ed0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023ec4:	42aa      	cmp	r2, r5
 8023ec6:	da03      	bge.n	8023ed0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023ec8:	2900      	cmp	r1, #0
 8023eca:	db01      	blt.n	8023ed0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023ecc:	4571      	cmp	r1, lr
 8023ece:	db4f      	blt.n	8023f70 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8023ed0:	1c50      	adds	r0, r2, #1
 8023ed2:	d406      	bmi.n	8023ee2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023ed4:	42a0      	cmp	r0, r4
 8023ed6:	dc04      	bgt.n	8023ee2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023ed8:	1c48      	adds	r0, r1, #1
 8023eda:	d402      	bmi.n	8023ee2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023edc:	42b8      	cmp	r0, r7
 8023ede:	f340 832f 	ble.w	8024540 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8023ee2:	3b01      	subs	r3, #1
 8023ee4:	44e1      	add	r9, ip
 8023ee6:	44d0      	add	r8, sl
 8023ee8:	f10b 0b02 	add.w	fp, fp, #2
 8023eec:	d1e5      	bne.n	8023eba <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023eee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023ef0:	2b00      	cmp	r3, #0
 8023ef2:	dd38      	ble.n	8023f66 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8023ef4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023ef8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023efc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023f00:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023f04:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023f08:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8023f0c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023f10:	ee76 6a68 	vsub.f32	s13, s12, s17
 8023f14:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8023f18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f1c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023f20:	ee16 2a90 	vmov	r2, s13
 8023f24:	3b01      	subs	r3, #1
 8023f26:	9311      	str	r3, [sp, #68]	; 0x44
 8023f28:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023f2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f2e:	ee17 2a10 	vmov	r2, s14
 8023f32:	eeb0 7a48 	vmov.f32	s14, s16
 8023f36:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023f3a:	ee17 8a10 	vmov	r8, s14
 8023f3e:	eeb0 7a68 	vmov.f32	s14, s17
 8023f42:	9337      	str	r3, [sp, #220]	; 0xdc
 8023f44:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023f46:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023f4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023f50:	9338      	str	r3, [sp, #224]	; 0xe0
 8023f52:	ee17 9a10 	vmov	r9, s14
 8023f56:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023f58:	eeb0 8a67 	vmov.f32	s16, s15
 8023f5c:	eef0 8a46 	vmov.f32	s17, s12
 8023f60:	bf08      	it	eq
 8023f62:	4613      	moveq	r3, r2
 8023f64:	e793      	b.n	8023e8e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8023f66:	b023      	add	sp, #140	; 0x8c
 8023f68:	ecbd 8b08 	vpop	{d8-d11}
 8023f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f70:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8023f74:	f8cd b01c 	str.w	fp, [sp, #28]
 8023f78:	9837      	ldr	r0, [sp, #220]	; 0xdc
 8023f7a:	1e59      	subs	r1, r3, #1
 8023f7c:	fb00 9201 	mla	r2, r0, r1, r9
 8023f80:	1412      	asrs	r2, r2, #16
 8023f82:	910c      	str	r1, [sp, #48]	; 0x30
 8023f84:	f100 815e 	bmi.w	8024244 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023f88:	42aa      	cmp	r2, r5
 8023f8a:	f280 815b 	bge.w	8024244 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023f8e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8023f90:	fb02 8201 	mla	r2, r2, r1, r8
 8023f94:	1412      	asrs	r2, r2, #16
 8023f96:	f100 8155 	bmi.w	8024244 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023f9a:	3f01      	subs	r7, #1
 8023f9c:	42ba      	cmp	r2, r7
 8023f9e:	f280 8151 	bge.w	8024244 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023fa2:	2b00      	cmp	r3, #0
 8023fa4:	dda3      	ble.n	8023eee <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8023fa6:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8023faa:	4621      	mov	r1, r4
 8023fac:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8023fb0:	f8cd 90d4 	str.w	r9, [sp, #212]	; 0xd4
 8023fb4:	464a      	mov	r2, r9
 8023fb6:	464c      	mov	r4, r9
 8023fb8:	e122      	b.n	8024200 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8023fba:	f893 c001 	ldrb.w	ip, [r3, #1]
 8023fbe:	f856 502c 	ldr.w	r5, [r6, ip, lsl #2]
 8023fc2:	950f      	str	r5, [sp, #60]	; 0x3c
 8023fc4:	0e2d      	lsrs	r5, r5, #24
 8023fc6:	9508      	str	r5, [sp, #32]
 8023fc8:	b162      	cbz	r2, 8023fe4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8023fca:	185d      	adds	r5, r3, r1
 8023fcc:	786d      	ldrb	r5, [r5, #1]
 8023fce:	5c5b      	ldrb	r3, [r3, r1]
 8023fd0:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8023fd4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023fd8:	9112      	str	r1, [sp, #72]	; 0x48
 8023fda:	9310      	str	r3, [sp, #64]	; 0x40
 8023fdc:	0e09      	lsrs	r1, r1, #24
 8023fde:	0e1b      	lsrs	r3, r3, #24
 8023fe0:	910a      	str	r1, [sp, #40]	; 0x28
 8023fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8023fe4:	b2a4      	uxth	r4, r4
 8023fe6:	b292      	uxth	r2, r2
 8023fe8:	fb04 f502 	mul.w	r5, r4, r2
 8023fec:	0124      	lsls	r4, r4, #4
 8023fee:	1b66      	subs	r6, r4, r5
 8023ff0:	9b08      	ldr	r3, [sp, #32]
 8023ff2:	b2b6      	uxth	r6, r6
 8023ff4:	fb06 f103 	mul.w	r1, r6, r3
 8023ff8:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8023ffc:	b292      	uxth	r2, r2
 8023ffe:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 8024002:	1a9b      	subs	r3, r3, r2
 8024004:	b29b      	uxth	r3, r3
 8024006:	fb03 1100 	mla	r1, r3, r0, r1
 802400a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802400c:	fb02 1104 	mla	r1, r2, r4, r1
 8024010:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024012:	fb05 1104 	mla	r1, r5, r4, r1
 8024016:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802401a:	2900      	cmp	r1, #0
 802401c:	f000 80df 	beq.w	80241de <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8024020:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 8024024:	28ff      	cmp	r0, #255	; 0xff
 8024026:	940c      	str	r4, [sp, #48]	; 0x30
 8024028:	f407 497f 	and.w	r9, r7, #65280	; 0xff00
 802402c:	d01a      	beq.n	8024064 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 802402e:	fb04 f400 	mul.w	r4, r4, r0
 8024032:	4627      	mov	r7, r4
 8024034:	fb09 fc00 	mul.w	ip, r9, r0
 8024038:	0a24      	lsrs	r4, r4, #8
 802403a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802403e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024042:	f50c 7080 	add.w	r0, ip, #256	; 0x100
 8024046:	4427      	add	r7, r4
 8024048:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 802404c:	0a3f      	lsrs	r7, r7, #8
 802404e:	0a00      	lsrs	r0, r0, #8
 8024050:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024054:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024058:	4307      	orrs	r7, r0
 802405a:	f007 10ff 	and.w	r0, r7, #16711935	; 0xff00ff
 802405e:	900c      	str	r0, [sp, #48]	; 0x30
 8024060:	f407 497f 	and.w	r9, r7, #65280	; 0xff00
 8024064:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024066:	f000 17ff 	and.w	r7, r0, #16711935	; 0xff00ff
 802406a:	f400 4c7f 	and.w	ip, r0, #65280	; 0xff00
 802406e:	9808      	ldr	r0, [sp, #32]
 8024070:	28ff      	cmp	r0, #255	; 0xff
 8024072:	d01a      	beq.n	80240aa <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8024074:	fb07 f700 	mul.w	r7, r7, r0
 8024078:	fb0c fc00 	mul.w	ip, ip, r0
 802407c:	0a3c      	lsrs	r4, r7, #8
 802407e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024082:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024086:	f50c 7080 	add.w	r0, ip, #256	; 0x100
 802408a:	4427      	add	r7, r4
 802408c:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8024090:	0a3f      	lsrs	r7, r7, #8
 8024092:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024096:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802409a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802409e:	ea47 0c0c 	orr.w	ip, r7, ip
 80240a2:	f00c 17ff 	and.w	r7, ip, #16711935	; 0xff00ff
 80240a6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80240aa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80240ac:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 80240b0:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 80240b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80240b6:	28ff      	cmp	r0, #255	; 0xff
 80240b8:	d01c      	beq.n	80240f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 80240ba:	fb0e fe00 	mul.w	lr, lr, r0
 80240be:	fb0a fa00 	mul.w	sl, sl, r0
 80240c2:	ea4f 241e 	mov.w	r4, lr, lsr #8
 80240c6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80240ca:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80240ce:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80240d2:	44a6      	add	lr, r4
 80240d4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80240d8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80240dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80240e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80240e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80240e8:	ea4e 0a0a 	orr.w	sl, lr, sl
 80240ec:	f00a 1eff 	and.w	lr, sl, #16711935	; 0xff00ff
 80240f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80240f4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80240f6:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80240fa:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80240fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024100:	2cff      	cmp	r4, #255	; 0xff
 8024102:	d01d      	beq.n	8024140 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8024104:	fb00 f004 	mul.w	r0, r0, r4
 8024108:	fb0b fb04 	mul.w	fp, fp, r4
 802410c:	0a04      	lsrs	r4, r0, #8
 802410e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024112:	9414      	str	r4, [sp, #80]	; 0x50
 8024114:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 8024118:	9413      	str	r4, [sp, #76]	; 0x4c
 802411a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802411c:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024120:	4420      	add	r0, r4
 8024122:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024124:	0a00      	lsrs	r0, r0, #8
 8024126:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 802412a:	0a24      	lsrs	r4, r4, #8
 802412c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024130:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8024134:	ea40 0b0b 	orr.w	fp, r0, fp
 8024138:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 802413c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024140:	43c9      	mvns	r1, r1
 8024142:	fb07 f706 	mul.w	r7, r7, r6
 8024146:	fb0c f606 	mul.w	r6, ip, r6
 802414a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802414c:	fb09 6603 	mla	r6, r9, r3, r6
 8024150:	fb04 7703 	mla	r7, r4, r3, r7
 8024154:	9b07      	ldr	r3, [sp, #28]
 8024156:	fb0e 7702 	mla	r7, lr, r2, r7
 802415a:	fb0a 6602 	mla	r6, sl, r2, r6
 802415e:	f8b3 e000 	ldrh.w	lr, [r3]
 8024162:	b2c9      	uxtb	r1, r1
 8024164:	ea4f 242e 	mov.w	r4, lr, asr #8
 8024168:	fb00 7005 	mla	r0, r0, r5, r7
 802416c:	fb0b 6605 	mla	r6, fp, r5, r6
 8024170:	ea4f 09ee 	mov.w	r9, lr, asr #3
 8024174:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024178:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802417c:	fb04 f401 	mul.w	r4, r4, r1
 8024180:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8024184:	fa5f fe8e 	uxtb.w	lr, lr
 8024188:	fb09 f901 	mul.w	r9, r9, r1
 802418c:	fb0e f101 	mul.w	r1, lr, r1
 8024190:	0a00      	lsrs	r0, r0, #8
 8024192:	0a36      	lsrs	r6, r6, #8
 8024194:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024198:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802419c:	1c62      	adds	r2, r4, #1
 802419e:	ea40 0306 	orr.w	r3, r0, r6
 80241a2:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80241a6:	f109 0001 	add.w	r0, r9, #1
 80241aa:	1c4a      	adds	r2, r1, #1
 80241ac:	0c1e      	lsrs	r6, r3, #16
 80241ae:	f3c3 2507 	ubfx	r5, r3, #8, #8
 80241b2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80241b6:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 80241ba:	4a21      	ldr	r2, [pc, #132]	; (8024240 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40c>)
 80241bc:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 80241c0:	b2db      	uxtb	r3, r3
 80241c2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80241c6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80241ca:	ea02 2404 	and.w	r4, r2, r4, lsl #8
 80241ce:	00c0      	lsls	r0, r0, #3
 80241d0:	ea44 04d3 	orr.w	r4, r4, r3, lsr #3
 80241d4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80241d8:	9b07      	ldr	r3, [sp, #28]
 80241da:	4320      	orrs	r0, r4
 80241dc:	8018      	strh	r0, [r3, #0]
 80241de:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80241e0:	9937      	ldr	r1, [sp, #220]	; 0xdc
 80241e2:	9b07      	ldr	r3, [sp, #28]
 80241e4:	440a      	add	r2, r1
 80241e6:	9235      	str	r2, [sp, #212]	; 0xd4
 80241e8:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 80241ea:	3302      	adds	r3, #2
 80241ec:	4490      	add	r8, r2
 80241ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80241f0:	9307      	str	r3, [sp, #28]
 80241f2:	4293      	cmp	r3, r2
 80241f4:	d022      	beq.n	802423c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 80241f6:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80241f8:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80241fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80241fe:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 8024200:	1412      	asrs	r2, r2, #16
 8024202:	ea4f 4328 	mov.w	r3, r8, asr #16
 8024206:	fb01 2303 	mla	r3, r1, r3, r2
 802420a:	980e      	ldr	r0, [sp, #56]	; 0x38
 802420c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802420e:	5cc2      	ldrb	r2, [r0, r3]
 8024210:	f3c4 3403 	ubfx	r4, r4, #12, #4
 8024214:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8024218:	4403      	add	r3, r0
 802421a:	f3c8 3203 	ubfx	r2, r8, #12, #4
 802421e:	0e38      	lsrs	r0, r7, #24
 8024220:	2c00      	cmp	r4, #0
 8024222:	f47f aeca 	bne.w	8023fba <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024226:	2a00      	cmp	r2, #0
 8024228:	f43f aedc 	beq.w	8023fe4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802422c:	5c5b      	ldrb	r3, [r3, r1]
 802422e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024230:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8024234:	9310      	str	r3, [sp, #64]	; 0x40
 8024236:	0e1b      	lsrs	r3, r3, #24
 8024238:	9309      	str	r3, [sp, #36]	; 0x24
 802423a:	e6d3      	b.n	8023fe4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802423c:	4693      	mov	fp, r2
 802423e:	e656      	b.n	8023eee <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024240:	fffff800 	.word	0xfffff800
 8024244:	2b00      	cmp	r3, #0
 8024246:	f77f ae52 	ble.w	8023eee <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802424a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802424e:	ea4f 4229 	mov.w	r2, r9, asr #16
 8024252:	ea4f 4128 	mov.w	r1, r8, asr #16
 8024256:	2a00      	cmp	r2, #0
 8024258:	465f      	mov	r7, fp
 802425a:	f8cd b01c 	str.w	fp, [sp, #28]
 802425e:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
 8024260:	e9dd b337 	ldrd	fp, r3, [sp, #220]	; 0xdc
 8024264:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8024268:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 802426c:	f2c0 8147 	blt.w	80244fe <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8024270:	1e73      	subs	r3, r6, #1
 8024272:	429a      	cmp	r2, r3
 8024274:	f280 8143 	bge.w	80244fe <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8024278:	2900      	cmp	r1, #0
 802427a:	f2c0 8140 	blt.w	80244fe <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802427e:	f10c 33ff 	add.w	r3, ip, #4294967295
 8024282:	4299      	cmp	r1, r3
 8024284:	f280 813b 	bge.w	80244fe <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8024288:	b236      	sxth	r6, r6
 802428a:	fb01 2106 	mla	r1, r1, r6, r2
 802428e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024290:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024292:	5c53      	ldrb	r3, [r2, r1]
 8024294:	4411      	add	r1, r2
 8024296:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 802429a:	910d      	str	r1, [sp, #52]	; 0x34
 802429c:	0e13      	lsrs	r3, r2, #24
 802429e:	2800      	cmp	r0, #0
 80242a0:	f000 8154 	beq.w	802454c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80242a4:	f891 c001 	ldrb.w	ip, [r1, #1]
 80242a8:	9513      	str	r5, [sp, #76]	; 0x4c
 80242aa:	f855 102c 	ldr.w	r1, [r5, ip, lsl #2]
 80242ae:	911f      	str	r1, [sp, #124]	; 0x7c
 80242b0:	0e09      	lsrs	r1, r1, #24
 80242b2:	9116      	str	r1, [sp, #88]	; 0x58
 80242b4:	f1be 0f00 	cmp.w	lr, #0
 80242b8:	f040 8153 	bne.w	8024562 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80242bc:	b286      	uxth	r6, r0
 80242be:	fa1f fc8e 	uxth.w	ip, lr
 80242c2:	fb06 f00c 	mul.w	r0, r6, ip
 80242c6:	0136      	lsls	r6, r6, #4
 80242c8:	1a31      	subs	r1, r6, r0
 80242ca:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80242cc:	b289      	uxth	r1, r1
 80242ce:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80242d2:	9113      	str	r1, [sp, #76]	; 0x4c
 80242d4:	fb01 f105 	mul.w	r1, r1, r5
 80242d8:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 80242dc:	fa1f f58c 	uxth.w	r5, ip
 80242e0:	1b76      	subs	r6, r6, r5
 80242e2:	b2b6      	uxth	r6, r6
 80242e4:	fb06 1c03 	mla	ip, r6, r3, r1
 80242e8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80242ea:	9514      	str	r5, [sp, #80]	; 0x50
 80242ec:	fb05 cc01 	mla	ip, r5, r1, ip
 80242f0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80242f2:	9619      	str	r6, [sp, #100]	; 0x64
 80242f4:	fb00 cc01 	mla	ip, r0, r1, ip
 80242f8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80242fc:	f1bc 0f00 	cmp.w	ip, #0
 8024300:	f000 80e6 	beq.w	80244d0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8024304:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 8024308:	2bff      	cmp	r3, #255	; 0xff
 802430a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802430e:	911a      	str	r1, [sp, #104]	; 0x68
 8024310:	921b      	str	r2, [sp, #108]	; 0x6c
 8024312:	d01b      	beq.n	802434c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8024314:	fb02 f203 	mul.w	r2, r2, r3
 8024318:	fb01 f103 	mul.w	r1, r1, r3
 802431c:	4613      	mov	r3, r2
 802431e:	0a0a      	lsrs	r2, r1, #8
 8024320:	f101 1601 	add.w	r6, r1, #65537	; 0x10001
 8024324:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024328:	f503 7180 	add.w	r1, r3, #256	; 0x100
 802432c:	4432      	add	r2, r6
 802432e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024332:	0a12      	lsrs	r2, r2, #8
 8024334:	0a1b      	lsrs	r3, r3, #8
 8024336:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802433a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802433e:	4313      	orrs	r3, r2
 8024340:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8024344:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024348:	921a      	str	r2, [sp, #104]	; 0x68
 802434a:	931b      	str	r3, [sp, #108]	; 0x6c
 802434c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802434e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8024350:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8024354:	2aff      	cmp	r2, #255	; 0xff
 8024356:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802435a:	931c      	str	r3, [sp, #112]	; 0x70
 802435c:	d01b      	beq.n	8024396 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 802435e:	fb03 f302 	mul.w	r3, r3, r2
 8024362:	461e      	mov	r6, r3
 8024364:	fb01 f102 	mul.w	r1, r1, r2
 8024368:	0a0a      	lsrs	r2, r1, #8
 802436a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802436e:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 8024372:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8024376:	440a      	add	r2, r1
 8024378:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 802437c:	0a12      	lsrs	r2, r2, #8
 802437e:	0a1b      	lsrs	r3, r3, #8
 8024380:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024384:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024388:	ea42 0603 	orr.w	r6, r2, r3
 802438c:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 8024390:	f006 11ff 	and.w	r1, r6, #16711935	; 0xff00ff
 8024394:	931c      	str	r3, [sp, #112]	; 0x70
 8024396:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024398:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802439a:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802439e:	2aff      	cmp	r2, #255	; 0xff
 80243a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80243a4:	931d      	str	r3, [sp, #116]	; 0x74
 80243a6:	d01b      	beq.n	80243e0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 80243a8:	fb03 f302 	mul.w	r3, r3, r2
 80243ac:	fb06 f602 	mul.w	r6, r6, r2
 80243b0:	461a      	mov	r2, r3
 80243b2:	0a33      	lsrs	r3, r6, #8
 80243b4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80243b8:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80243bc:	f502 7380 	add.w	r3, r2, #256	; 0x100
 80243c0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80243c4:	4476      	add	r6, lr
 80243c6:	0a36      	lsrs	r6, r6, #8
 80243c8:	0a1b      	lsrs	r3, r3, #8
 80243ca:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80243ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80243d2:	ea46 0203 	orr.w	r2, r6, r3
 80243d6:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 80243da:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 80243de:	931d      	str	r3, [sp, #116]	; 0x74
 80243e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80243e2:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80243e6:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80243ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80243ec:	930d      	str	r3, [sp, #52]	; 0x34
 80243ee:	2aff      	cmp	r2, #255	; 0xff
 80243f0:	d01b      	beq.n	802442a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 80243f2:	fb03 f302 	mul.w	r3, r3, r2
 80243f6:	fb0e fe02 	mul.w	lr, lr, r2
 80243fa:	0a1a      	lsrs	r2, r3, #8
 80243fc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024400:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8024404:	f50e 7580 	add.w	r5, lr, #256	; 0x100
 8024408:	441a      	add	r2, r3
 802440a:	eb05 2e1e 	add.w	lr, r5, lr, lsr #8
 802440e:	0a12      	lsrs	r2, r2, #8
 8024410:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024414:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024418:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802441c:	ea42 0e0e 	orr.w	lr, r2, lr
 8024420:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8024424:	930d      	str	r3, [sp, #52]	; 0x34
 8024426:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802442a:	ea6f 0c0c 	mvn.w	ip, ip
 802442e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024430:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8024432:	fb01 f305 	mul.w	r3, r1, r5
 8024436:	991c      	ldr	r1, [sp, #112]	; 0x70
 8024438:	fa5f fc8c 	uxtb.w	ip, ip
 802443c:	fb01 f105 	mul.w	r1, r1, r5
 8024440:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8024442:	fb02 3305 	mla	r3, r2, r5, r3
 8024446:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8024448:	fb02 1105 	mla	r1, r2, r5, r1
 802444c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802444e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8024450:	fb06 3605 	mla	r6, r6, r5, r3
 8024454:	fb02 1205 	mla	r2, r2, r5, r1
 8024458:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802445a:	8839      	ldrh	r1, [r7, #0]
 802445c:	fb03 6300 	mla	r3, r3, r0, r6
 8024460:	fb0e 2e00 	mla	lr, lr, r0, r2
 8024464:	10c8      	asrs	r0, r1, #3
 8024466:	120a      	asrs	r2, r1, #8
 8024468:	f000 06fc 	and.w	r6, r0, #252	; 0xfc
 802446c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024470:	00c9      	lsls	r1, r1, #3
 8024472:	fb02 f20c 	mul.w	r2, r2, ip
 8024476:	fb06 f60c 	mul.w	r6, r6, ip
 802447a:	b2c9      	uxtb	r1, r1
 802447c:	fb01 f00c 	mul.w	r0, r1, ip
 8024480:	0a1b      	lsrs	r3, r3, #8
 8024482:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024486:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 802448a:	f40e 437f 	and.w	r3, lr, #65280	; 0xff00
 802448e:	430b      	orrs	r3, r1
 8024490:	f106 0e01 	add.w	lr, r6, #1
 8024494:	1c51      	adds	r1, r2, #1
 8024496:	0c1d      	lsrs	r5, r3, #16
 8024498:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802449c:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80244a0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80244a4:	fa5f fe83 	uxtb.w	lr, r3
 80244a8:	f100 0c01 	add.w	ip, r0, #1
 80244ac:	4b39      	ldr	r3, [pc, #228]	; (8024594 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>)
 80244ae:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80244b2:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80244b6:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 80244ba:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 80244be:	00c9      	lsls	r1, r1, #3
 80244c0:	eb0e 2310 	add.w	r3, lr, r0, lsr #8
 80244c4:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 80244c8:	f401 62fc 	and.w	r2, r1, #2016	; 0x7e0
 80244cc:	4313      	orrs	r3, r2
 80244ce:	803b      	strh	r3, [r7, #0]
 80244d0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80244d2:	f1ba 0f00 	cmp.w	sl, #0
 80244d6:	f107 0702 	add.w	r7, r7, #2
 80244da:	44d9      	add	r9, fp
 80244dc:	4498      	add	r8, r3
 80244de:	dd26      	ble.n	802452e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80244e0:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 80244e4:	ea4f 4229 	mov.w	r2, r9, asr #16
 80244e8:	2a00      	cmp	r2, #0
 80244ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80244ee:	ea4f 4128 	mov.w	r1, r8, asr #16
 80244f2:	f3c9 3003 	ubfx	r0, r9, #12, #4
 80244f6:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 80244fa:	f6bf aeb9 	bge.w	8024270 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 80244fe:	1c53      	adds	r3, r2, #1
 8024500:	d4e6      	bmi.n	80244d0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8024502:	42b3      	cmp	r3, r6
 8024504:	dce4      	bgt.n	80244d0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8024506:	1c4b      	adds	r3, r1, #1
 8024508:	d4e2      	bmi.n	80244d0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 802450a:	4563      	cmp	r3, ip
 802450c:	dce0      	bgt.n	80244d0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 802450e:	fa0f f38c 	sxth.w	r3, ip
 8024512:	b236      	sxth	r6, r6
 8024514:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024518:	e9cd 6300 	strd	r6, r3, [sp]
 802451c:	e9cd 0e04 	strd	r0, lr, [sp, #16]
 8024520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024524:	4639      	mov	r1, r7
 8024526:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024528:	f7ff fade 	bl	8023ae8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 802452c:	e7d0      	b.n	80244d0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 802452e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024530:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024534:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024538:	3301      	adds	r3, #1
 802453a:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 802453e:	e4d6      	b.n	8023eee <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024540:	3b01      	subs	r3, #1
 8024542:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8024546:	930c      	str	r3, [sp, #48]	; 0x30
 8024548:	469a      	mov	sl, r3
 802454a:	e684      	b.n	8024256 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x422>
 802454c:	f1be 0f00 	cmp.w	lr, #0
 8024550:	f43f aeb4 	beq.w	80242bc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8024554:	5d89      	ldrb	r1, [r1, r6]
 8024556:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802455a:	9120      	str	r1, [sp, #128]	; 0x80
 802455c:	0e09      	lsrs	r1, r1, #24
 802455e:	9117      	str	r1, [sp, #92]	; 0x5c
 8024560:	e6ac      	b.n	80242bc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8024562:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024564:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024566:	eb01 0c06 	add.w	ip, r1, r6
 802456a:	f89c c001 	ldrb.w	ip, [ip, #1]
 802456e:	5d89      	ldrb	r1, [r1, r6]
 8024570:	f855 602c 	ldr.w	r6, [r5, ip, lsl #2]
 8024574:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8024578:	0e35      	lsrs	r5, r6, #24
 802457a:	9120      	str	r1, [sp, #128]	; 0x80
 802457c:	0e09      	lsrs	r1, r1, #24
 802457e:	9621      	str	r6, [sp, #132]	; 0x84
 8024580:	9518      	str	r5, [sp, #96]	; 0x60
 8024582:	9117      	str	r1, [sp, #92]	; 0x5c
 8024584:	e69a      	b.n	80242bc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8024586:	f43f acb2 	beq.w	8023eee <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802458a:	1e65      	subs	r5, r4, #1
 802458c:	f8cd b01c 	str.w	fp, [sp, #28]
 8024590:	e4f2      	b.n	8023f78 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8024592:	bf00      	nop
 8024594:	fffff800 	.word	0xfffff800

08024598 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8024598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802459c:	b08b      	sub	sp, #44	; 0x2c
 802459e:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
 80245a2:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 80245a6:	ea6f 0b00 	mvn.w	fp, r0
 80245aa:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80245ac:	f9bd 5050 	ldrsh.w	r5, [sp, #80]	; 0x50
 80245b0:	9005      	str	r0, [sp, #20]
 80245b2:	fb0c 4805 	mla	r8, ip, r5, r4
 80245b6:	7848      	ldrb	r0, [r1, #1]
 80245b8:	788e      	ldrb	r6, [r1, #2]
 80245ba:	0204      	lsls	r4, r0, #8
 80245bc:	780f      	ldrb	r7, [r1, #0]
 80245be:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80245c2:	9306      	str	r3, [sp, #24]
 80245c4:	fa5f f38b 	uxtb.w	r3, fp
 80245c8:	433c      	orrs	r4, r7
 80245ca:	9304      	str	r3, [sp, #16]
 80245cc:	f1bc 0f00 	cmp.w	ip, #0
 80245d0:	eb02 0308 	add.w	r3, r2, r8
 80245d4:	9003      	str	r0, [sp, #12]
 80245d6:	9602      	str	r6, [sp, #8]
 80245d8:	9307      	str	r3, [sp, #28]
 80245da:	9409      	str	r4, [sp, #36]	; 0x24
 80245dc:	f10c 0601 	add.w	r6, ip, #1
 80245e0:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 80245e4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80245e8:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 80245ec:	db02      	blt.n	80245f4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x5c>
 80245ee:	45e6      	cmp	lr, ip
 80245f0:	f300 80a0 	bgt.w	8024734 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x19c>
 80245f4:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 80245f8:	46e0      	mov	r8, ip
 80245fa:	fa5f fb84 	uxtb.w	fp, r4
 80245fe:	f8cd b004 	str.w	fp, [sp, #4]
 8024602:	2e00      	cmp	r6, #0
 8024604:	db01      	blt.n	802460a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x72>
 8024606:	45b6      	cmp	lr, r6
 8024608:	dc73      	bgt.n	80246f2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x15a>
 802460a:	fa5f fa84 	uxtb.w	sl, r4
 802460e:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 8024612:	4654      	mov	r4, sl
 8024614:	46f1      	mov	r9, lr
 8024616:	2b0f      	cmp	r3, #15
 8024618:	f200 80cb 	bhi.w	80247b2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x21a>
 802461c:	280f      	cmp	r0, #15
 802461e:	f200 80c8 	bhi.w	80247b2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x21a>
 8024622:	b29b      	uxth	r3, r3
 8024624:	b280      	uxth	r0, r0
 8024626:	fb03 f600 	mul.w	r6, r3, r0
 802462a:	011b      	lsls	r3, r3, #4
 802462c:	1b9d      	subs	r5, r3, r6
 802462e:	9a01      	ldr	r2, [sp, #4]
 8024630:	b2ad      	uxth	r5, r5
 8024632:	ebc6 1000 	rsb	r0, r6, r0, lsl #4
 8024636:	fb05 f202 	mul.w	r2, r5, r2
 802463a:	b280      	uxth	r0, r0
 802463c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8024640:	1a1b      	subs	r3, r3, r0
 8024642:	b29b      	uxth	r3, r3
 8024644:	fb03 220b 	mla	r2, r3, fp, r2
 8024648:	fb00 2a0a 	mla	sl, r0, sl, r2
 802464c:	f8bd b010 	ldrh.w	fp, [sp, #16]
 8024650:	fb06 a404 	mla	r4, r6, r4, sl
 8024654:	fb17 f70b 	smulbb	r7, r7, fp
 8024658:	f8bd a014 	ldrh.w	sl, [sp, #20]
 802465c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8024660:	fb04 770a 	mla	r7, r4, sl, r7
 8024664:	b2bf      	uxth	r7, r7
 8024666:	1c7a      	adds	r2, r7, #1
 8024668:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802466c:	123f      	asrs	r7, r7, #8
 802466e:	700f      	strb	r7, [r1, #0]
 8024670:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8024674:	f898 7001 	ldrb.w	r7, [r8, #1]
 8024678:	fb05 f204 	mul.w	r2, r5, r4
 802467c:	fb03 2407 	mla	r4, r3, r7, r2
 8024680:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024684:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8024688:	fb00 4202 	mla	r2, r0, r2, r4
 802468c:	9c03      	ldr	r4, [sp, #12]
 802468e:	fb06 2207 	mla	r2, r6, r7, r2
 8024692:	fb14 f40b 	smulbb	r4, r4, fp
 8024696:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802469a:	fb02 420a 	mla	r2, r2, sl, r4
 802469e:	b292      	uxth	r2, r2
 80246a0:	1c54      	adds	r4, r2, #1
 80246a2:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80246a6:	1212      	asrs	r2, r2, #8
 80246a8:	704a      	strb	r2, [r1, #1]
 80246aa:	f89c 4002 	ldrb.w	r4, [ip, #2]
 80246ae:	f898 2002 	ldrb.w	r2, [r8, #2]
 80246b2:	fb05 f504 	mul.w	r5, r5, r4
 80246b6:	fb03 5502 	mla	r5, r3, r2, r5
 80246ba:	f899 4002 	ldrb.w	r4, [r9, #2]
 80246be:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80246c2:	fb00 5004 	mla	r0, r0, r4, r5
 80246c6:	9b02      	ldr	r3, [sp, #8]
 80246c8:	fb06 0602 	mla	r6, r6, r2, r0
 80246cc:	fb13 fb0b 	smulbb	fp, r3, fp
 80246d0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80246d4:	fb06 ba0a 	mla	sl, r6, sl, fp
 80246d8:	fa1f fa8a 	uxth.w	sl, sl
 80246dc:	f10a 0b01 	add.w	fp, sl, #1
 80246e0:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80246e4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80246e8:	f881 a002 	strb.w	sl, [r1, #2]
 80246ec:	b00b      	add	sp, #44	; 0x2c
 80246ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80246f2:	2800      	cmp	r0, #0
 80246f4:	d089      	beq.n	802460a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x72>
 80246f6:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80246f8:	2e00      	cmp	r6, #0
 80246fa:	db47      	blt.n	802478c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1f4>
 80246fc:	42b5      	cmp	r5, r6
 80246fe:	dd45      	ble.n	802478c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1f4>
 8024700:	9a07      	ldr	r2, [sp, #28]
 8024702:	f812 9005 	ldrb.w	r9, [r2, r5]
 8024706:	9a06      	ldr	r2, [sp, #24]
 8024708:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 802470c:	4491      	add	r9, r2
 802470e:	3601      	adds	r6, #1
 8024710:	f899 a000 	ldrb.w	sl, [r9]
 8024714:	d436      	bmi.n	8024784 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ec>
 8024716:	42b5      	cmp	r5, r6
 8024718:	dd34      	ble.n	8024784 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ec>
 802471a:	2b00      	cmp	r3, #0
 802471c:	d045      	beq.n	80247aa <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x212>
 802471e:	9a07      	ldr	r2, [sp, #28]
 8024720:	442a      	add	r2, r5
 8024722:	f892 e001 	ldrb.w	lr, [r2, #1]
 8024726:	9a06      	ldr	r2, [sp, #24]
 8024728:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802472c:	f812 400e 	ldrb.w	r4, [r2, lr]
 8024730:	4496      	add	lr, r2
 8024732:	e770      	b.n	8024616 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7e>
 8024734:	4691      	mov	r9, r2
 8024736:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8024738:	2a00      	cmp	r2, #0
 802473a:	db01      	blt.n	8024740 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1a8>
 802473c:	4295      	cmp	r5, r2
 802473e:	dc19      	bgt.n	8024774 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>
 8024740:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 8024744:	3201      	adds	r2, #1
 8024746:	f898 b000 	ldrb.w	fp, [r8]
 802474a:	d40e      	bmi.n	802476a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d2>
 802474c:	4295      	cmp	r5, r2
 802474e:	dd0c      	ble.n	802476a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d2>
 8024750:	b1fb      	cbz	r3, 8024792 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1fa>
 8024752:	9a07      	ldr	r2, [sp, #28]
 8024754:	f892 c001 	ldrb.w	ip, [r2, #1]
 8024758:	9a06      	ldr	r2, [sp, #24]
 802475a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802475e:	f812 200c 	ldrb.w	r2, [r2, ip]
 8024762:	9201      	str	r2, [sp, #4]
 8024764:	9a06      	ldr	r2, [sp, #24]
 8024766:	4494      	add	ip, r2
 8024768:	e74b      	b.n	8024602 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6a>
 802476a:	b2e2      	uxtb	r2, r4
 802476c:	9201      	str	r2, [sp, #4]
 802476e:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8024772:	e746      	b.n	8024602 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6a>
 8024774:	f819 8008 	ldrb.w	r8, [r9, r8]
 8024778:	9a06      	ldr	r2, [sp, #24]
 802477a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802477e:	4490      	add	r8, r2
 8024780:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8024782:	e7df      	b.n	8024744 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ac>
 8024784:	b2e4      	uxtb	r4, r4
 8024786:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 802478a:	e744      	b.n	8024616 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7e>
 802478c:	f10d 0924 	add.w	r9, sp, #36	; 0x24
 8024790:	e7bd      	b.n	802470e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x176>
 8024792:	b2e2      	uxtb	r2, r4
 8024794:	2e00      	cmp	r6, #0
 8024796:	9201      	str	r2, [sp, #4]
 8024798:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 802479c:	f6bf af33 	bge.w	8024606 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6e>
 80247a0:	46e6      	mov	lr, ip
 80247a2:	46e1      	mov	r9, ip
 80247a4:	4692      	mov	sl, r2
 80247a6:	4614      	mov	r4, r2
 80247a8:	e738      	b.n	802461c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x84>
 80247aa:	b2e4      	uxtb	r4, r4
 80247ac:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 80247b0:	e734      	b.n	802461c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x84>
 80247b2:	4b03      	ldr	r3, [pc, #12]	; (80247c0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x228>)
 80247b4:	4a03      	ldr	r2, [pc, #12]	; (80247c4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x22c>)
 80247b6:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80247ba:	4803      	ldr	r0, [pc, #12]	; (80247c8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x230>)
 80247bc:	f003 fc8c 	bl	80280d8 <__assert_func>
 80247c0:	0802b350 	.word	0x0802b350
 80247c4:	0802b9c8 	.word	0x0802b9c8
 80247c8:	0802b4d4 	.word	0x0802b4d4

080247cc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80247cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247d0:	ed2d 8b08 	vpush	{d8-d11}
 80247d4:	b097      	sub	sp, #92	; 0x5c
 80247d6:	f89d 60c4 	ldrb.w	r6, [sp, #196]	; 0xc4
 80247da:	eeb0 aa40 	vmov.f32	s20, s0
 80247de:	e9dd b729 	ldrd	fp, r7, [sp, #164]	; 0xa4
 80247e2:	e9cd 0614 	strd	r0, r6, [sp, #80]	; 0x50
 80247e6:	43f0      	mvns	r0, r6
 80247e8:	eef0 9a60 	vmov.f32	s19, s1
 80247ec:	eeb0 9a41 	vmov.f32	s18, s2
 80247f0:	eef0 8a62 	vmov.f32	s17, s5
 80247f4:	eeb0 8a43 	vmov.f32	s16, s6
 80247f8:	eef0 ba44 	vmov.f32	s23, s8
 80247fc:	eeb0 ba64 	vmov.f32	s22, s9
 8024800:	eef0 aa45 	vmov.f32	s21, s10
 8024804:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8024808:	e9dd 512d 	ldrd	r5, r1, [sp, #180]	; 0xb4
 802480c:	461a      	mov	r2, r3
 802480e:	686c      	ldr	r4, [r5, #4]
 8024810:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024812:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
 8024816:	fb04 1303 	mla	r3, r4, r3, r1
 802481a:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 802481c:	6829      	ldr	r1, [r5, #0]
 802481e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024822:	6865      	ldr	r5, [r4, #4]
 8024824:	eb01 0a03 	add.w	sl, r1, r3
 8024828:	b2c3      	uxtb	r3, r0
 802482a:	6824      	ldr	r4, [r4, #0]
 802482c:	9309      	str	r3, [sp, #36]	; 0x24
 802482e:	1d2b      	adds	r3, r5, #4
 8024830:	930a      	str	r3, [sp, #40]	; 0x28
 8024832:	b2b3      	uxth	r3, r6
 8024834:	940d      	str	r4, [sp, #52]	; 0x34
 8024836:	930b      	str	r3, [sp, #44]	; 0x2c
 8024838:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802483a:	2b00      	cmp	r3, #0
 802483c:	dc02      	bgt.n	8024844 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802483e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024840:	2b00      	cmp	r3, #0
 8024842:	dd63      	ble.n	802490c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8024844:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024846:	2a00      	cmp	r2, #0
 8024848:	e9d3 6e02 	ldrd	r6, lr, [r3, #8]
 802484c:	b234      	sxth	r4, r6
 802484e:	fa0f fc8e 	sxth.w	ip, lr
 8024852:	f340 825b 	ble.w	8024d0c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>
 8024856:	f8cd e020 	str.w	lr, [sp, #32]
 802485a:	f8dd e0b0 	ldr.w	lr, [sp, #176]	; 0xb0
 802485e:	1e65      	subs	r5, r4, #1
 8024860:	f10c 38ff 	add.w	r8, ip, #4294967295
 8024864:	ea5f 432b 	movs.w	r3, fp, asr #16
 8024868:	ea4f 4127 	mov.w	r1, r7, asr #16
 802486c:	d405      	bmi.n	802487a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802486e:	42ab      	cmp	r3, r5
 8024870:	da03      	bge.n	802487a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8024872:	2900      	cmp	r1, #0
 8024874:	db01      	blt.n	802487a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8024876:	4541      	cmp	r1, r8
 8024878:	db4d      	blt.n	8024916 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802487a:	1c58      	adds	r0, r3, #1
 802487c:	d406      	bmi.n	802488c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802487e:	42a0      	cmp	r0, r4
 8024880:	dc04      	bgt.n	802488c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8024882:	1c48      	adds	r0, r1, #1
 8024884:	d402      	bmi.n	802488c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8024886:	4560      	cmp	r0, ip
 8024888:	f340 819b 	ble.w	8024bc2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 802488c:	3a01      	subs	r2, #1
 802488e:	44cb      	add	fp, r9
 8024890:	4477      	add	r7, lr
 8024892:	f10a 0a03 	add.w	sl, sl, #3
 8024896:	d1e5      	bne.n	8024864 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8024898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802489a:	2b00      	cmp	r3, #0
 802489c:	dd36      	ble.n	802490c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802489e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80248a2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80248a6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80248aa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80248ae:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80248b2:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80248b6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80248ba:	ee76 6a68 	vsub.f32	s13, s12, s17
 80248be:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80248c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80248c6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80248ca:	ee16 2a90 	vmov	r2, s13
 80248ce:	3b01      	subs	r3, #1
 80248d0:	930e      	str	r3, [sp, #56]	; 0x38
 80248d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80248d4:	fb92 f9f3 	sdiv	r9, r2, r3
 80248d8:	ee17 2a10 	vmov	r2, s14
 80248dc:	eeb0 7a48 	vmov.f32	s14, s16
 80248e0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80248e4:	ee17 7a10 	vmov	r7, s14
 80248e8:	eeb0 7a68 	vmov.f32	s14, s17
 80248ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80248f0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80248f4:	932c      	str	r3, [sp, #176]	; 0xb0
 80248f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80248f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80248fa:	ee17 ba10 	vmov	fp, s14
 80248fe:	eeb0 8a67 	vmov.f32	s16, s15
 8024902:	eef0 8a46 	vmov.f32	s17, s12
 8024906:	bf18      	it	ne
 8024908:	461a      	movne	r2, r3
 802490a:	e795      	b.n	8024838 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802490c:	b017      	add	sp, #92	; 0x5c
 802490e:	ecbd 8b08 	vpop	{d8-d11}
 8024912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024916:	f8dd e020 	ldr.w	lr, [sp, #32]
 802491a:	1e51      	subs	r1, r2, #1
 802491c:	fb09 b301 	mla	r3, r9, r1, fp
 8024920:	141b      	asrs	r3, r3, #16
 8024922:	9108      	str	r1, [sp, #32]
 8024924:	f100 80e7 	bmi.w	8024af6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8024928:	42ab      	cmp	r3, r5
 802492a:	f280 80e4 	bge.w	8024af6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802492e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024930:	fb03 7301 	mla	r3, r3, r1, r7
 8024934:	141b      	asrs	r3, r3, #16
 8024936:	f100 80de 	bmi.w	8024af6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802493a:	f10c 3cff 	add.w	ip, ip, #4294967295
 802493e:	4563      	cmp	r3, ip
 8024940:	f280 80d9 	bge.w	8024af6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8024944:	2a00      	cmp	r2, #0
 8024946:	dda7      	ble.n	8024898 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8024948:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802494c:	eb0a 0302 	add.w	r3, sl, r2
 8024950:	930c      	str	r3, [sp, #48]	; 0x30
 8024952:	f10a 0c03 	add.w	ip, sl, #3
 8024956:	e9cd 792a 	strd	r7, r9, [sp, #168]	; 0xa8
 802495a:	463b      	mov	r3, r7
 802495c:	e09a      	b.n	8024a94 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 802495e:	784d      	ldrb	r5, [r1, #1]
 8024960:	1908      	adds	r0, r1, r4
 8024962:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024966:	4435      	add	r5, r6
 8024968:	2a00      	cmp	r2, #0
 802496a:	f000 80b5 	beq.w	8024ad8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802496e:	5d0c      	ldrb	r4, [r1, r4]
 8024970:	f890 e001 	ldrb.w	lr, [r0, #1]
 8024974:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024978:	19a1      	adds	r1, r4, r6
 802497a:	9108      	str	r1, [sp, #32]
 802497c:	4631      	mov	r1, r6
 802497e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8024982:	9f08      	ldr	r7, [sp, #32]
 8024984:	44b6      	add	lr, r6
 8024986:	b29b      	uxth	r3, r3
 8024988:	b292      	uxth	r2, r2
 802498a:	fb03 f602 	mul.w	r6, r3, r2
 802498e:	011b      	lsls	r3, r3, #4
 8024990:	f895 9000 	ldrb.w	r9, [r5]
 8024994:	1b98      	subs	r0, r3, r6
 8024996:	b280      	uxth	r0, r0
 8024998:	fb00 f909 	mul.w	r9, r0, r9
 802499c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80249a0:	b292      	uxth	r2, r2
 80249a2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80249a6:	f811 100a 	ldrb.w	r1, [r1, sl]
 80249aa:	1a9b      	subs	r3, r3, r2
 80249ac:	b29b      	uxth	r3, r3
 80249ae:	fb03 9101 	mla	r1, r3, r1, r9
 80249b2:	f897 9000 	ldrb.w	r9, [r7]
 80249b6:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80249b8:	fb02 1109 	mla	r1, r2, r9, r1
 80249bc:	f89e a000 	ldrb.w	sl, [lr]
 80249c0:	f81c 9c03 	ldrb.w	r9, [ip, #-3]
 80249c4:	44a3      	add	fp, r4
 80249c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80249c8:	fb06 110a 	mla	r1, r6, sl, r1
 80249cc:	fb19 f904 	smulbb	r9, r9, r4
 80249d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80249d2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80249d6:	fb01 9904 	mla	r9, r1, r4, r9
 80249da:	fa1f f989 	uxth.w	r9, r9
 80249de:	f109 0101 	add.w	r1, r9, #1
 80249e2:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80249e6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80249ea:	f80c 9c03 	strb.w	r9, [ip, #-3]
 80249ee:	7869      	ldrb	r1, [r5, #1]
 80249f0:	f898 9001 	ldrb.w	r9, [r8, #1]
 80249f4:	fb00 f101 	mul.w	r1, r0, r1
 80249f8:	9c08      	ldr	r4, [sp, #32]
 80249fa:	fb03 1109 	mla	r1, r3, r9, r1
 80249fe:	f894 9001 	ldrb.w	r9, [r4, #1]
 8024a02:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 8024a04:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8024a06:	fb02 1109 	mla	r1, r2, r9, r1
 8024a0a:	f89e a001 	ldrb.w	sl, [lr, #1]
 8024a0e:	443c      	add	r4, r7
 8024a10:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
 8024a14:	942a      	str	r4, [sp, #168]	; 0xa8
 8024a16:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024a18:	fb06 110a 	mla	r1, r6, sl, r1
 8024a1c:	fb19 f904 	smulbb	r9, r9, r4
 8024a20:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024a22:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024a26:	fb01 9907 	mla	r9, r1, r7, r9
 8024a2a:	fa1f f989 	uxth.w	r9, r9
 8024a2e:	f109 0101 	add.w	r1, r9, #1
 8024a32:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8024a36:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024a3a:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8024a3e:	78a9      	ldrb	r1, [r5, #2]
 8024a40:	f898 5002 	ldrb.w	r5, [r8, #2]
 8024a44:	fb00 f001 	mul.w	r0, r0, r1
 8024a48:	fb03 0005 	mla	r0, r3, r5, r0
 8024a4c:	9b08      	ldr	r3, [sp, #32]
 8024a4e:	f89e 4002 	ldrb.w	r4, [lr, #2]
 8024a52:	789b      	ldrb	r3, [r3, #2]
 8024a54:	f81c ec01 	ldrb.w	lr, [ip, #-1]
 8024a58:	fb02 0003 	mla	r0, r2, r3, r0
 8024a5c:	fb06 0004 	mla	r0, r6, r4, r0
 8024a60:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024a62:	fb1e f404 	smulbb	r4, lr, r4
 8024a66:	f3c0 2e07 	ubfx	lr, r0, #8, #8
 8024a6a:	fb0e 4e07 	mla	lr, lr, r7, r4
 8024a6e:	fa1f fe8e 	uxth.w	lr, lr
 8024a72:	f10e 0301 	add.w	r3, lr, #1
 8024a76:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8024a7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024a7c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024a80:	4563      	cmp	r3, ip
 8024a82:	f80c ec01 	strb.w	lr, [ip, #-1]
 8024a86:	d034      	beq.n	8024af2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8024a88:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024a8a:	f10c 0c03 	add.w	ip, ip, #3
 8024a8e:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 8024a92:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024a94:	1419      	asrs	r1, r3, #16
 8024a96:	ea4f 432b 	mov.w	r3, fp, asr #16
 8024a9a:	fb04 3101 	mla	r1, r4, r1, r3
 8024a9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024aa0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8024aa2:	f812 a001 	ldrb.w	sl, [r2, r1]
 8024aa6:	4411      	add	r1, r2
 8024aa8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024aaa:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8024aae:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024ab2:	eb06 080a 	add.w	r8, r6, sl
 8024ab6:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8024aba:	2b00      	cmp	r3, #0
 8024abc:	f47f af4f 	bne.w	802495e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8024ac0:	b182      	cbz	r2, 8024ae4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8024ac2:	5d0c      	ldrb	r4, [r1, r4]
 8024ac4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024ac6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024aca:	1861      	adds	r1, r4, r1
 8024acc:	9108      	str	r1, [sp, #32]
 8024ace:	46c6      	mov	lr, r8
 8024ad0:	4645      	mov	r5, r8
 8024ad2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024ad4:	9f08      	ldr	r7, [sp, #32]
 8024ad6:	e756      	b.n	8024986 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024ad8:	46c6      	mov	lr, r8
 8024ada:	f8cd 8020 	str.w	r8, [sp, #32]
 8024ade:	4631      	mov	r1, r6
 8024ae0:	4647      	mov	r7, r8
 8024ae2:	e750      	b.n	8024986 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024ae4:	46c6      	mov	lr, r8
 8024ae6:	f8cd 8020 	str.w	r8, [sp, #32]
 8024aea:	4645      	mov	r5, r8
 8024aec:	4631      	mov	r1, r6
 8024aee:	4647      	mov	r7, r8
 8024af0:	e749      	b.n	8024986 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024af2:	469a      	mov	sl, r3
 8024af4:	e6d0      	b.n	8024898 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8024af6:	2a00      	cmp	r2, #0
 8024af8:	f77f aece 	ble.w	8024898 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8024afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024b00:	ea4f 432b 	mov.w	r3, fp, asr #16
 8024b04:	1439      	asrs	r1, r7, #16
 8024b06:	4654      	mov	r4, sl
 8024b08:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8024b0a:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8024b0e:	2b00      	cmp	r3, #0
 8024b10:	f3cb 3003 	ubfx	r0, fp, #12, #4
 8024b14:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8024b18:	db2f      	blt.n	8024b7a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024b1a:	f106 3cff 	add.w	ip, r6, #4294967295
 8024b1e:	4563      	cmp	r3, ip
 8024b20:	da2b      	bge.n	8024b7a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024b22:	2900      	cmp	r1, #0
 8024b24:	db29      	blt.n	8024b7a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024b26:	f10e 3cff 	add.w	ip, lr, #4294967295
 8024b2a:	4561      	cmp	r1, ip
 8024b2c:	da25      	bge.n	8024b7a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024b2e:	fa0f fa86 	sxth.w	sl, r6
 8024b32:	fb01 330a 	mla	r3, r1, sl, r3
 8024b36:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024b38:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8024b3a:	f811 e003 	ldrb.w	lr, [r1, r3]
 8024b3e:	440b      	add	r3, r1
 8024b40:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8024b44:	eb06 0c0e 	add.w	ip, r6, lr
 8024b48:	2800      	cmp	r0, #0
 8024b4a:	d052      	beq.n	8024bf2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x426>
 8024b4c:	7859      	ldrb	r1, [r3, #1]
 8024b4e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024b52:	1871      	adds	r1, r6, r1
 8024b54:	910c      	str	r1, [sp, #48]	; 0x30
 8024b56:	2a00      	cmp	r2, #0
 8024b58:	f000 80d5 	beq.w	8024d06 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53a>
 8024b5c:	eb03 010a 	add.w	r1, r3, sl
 8024b60:	7849      	ldrb	r1, [r1, #1]
 8024b62:	f813 300a 	ldrb.w	r3, [r3, sl]
 8024b66:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024b6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024b6e:	1871      	adds	r1, r6, r1
 8024b70:	18f3      	adds	r3, r6, r3
 8024b72:	9110      	str	r1, [sp, #64]	; 0x40
 8024b74:	9311      	str	r3, [sp, #68]	; 0x44
 8024b76:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024b78:	e042      	b.n	8024c00 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024b7a:	f113 0c01 	adds.w	ip, r3, #1
 8024b7e:	d406      	bmi.n	8024b8e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024b80:	45b4      	cmp	ip, r6
 8024b82:	dc04      	bgt.n	8024b8e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024b84:	f111 0c01 	adds.w	ip, r1, #1
 8024b88:	d401      	bmi.n	8024b8e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024b8a:	45f4      	cmp	ip, lr
 8024b8c:	dd1f      	ble.n	8024bce <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8024b8e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024b90:	f1b8 0f00 	cmp.w	r8, #0
 8024b94:	f104 0403 	add.w	r4, r4, #3
 8024b98:	44cb      	add	fp, r9
 8024b9a:	441f      	add	r7, r3
 8024b9c:	dd07      	ble.n	8024bae <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8024b9e:	e9d5 6e02 	ldrd	r6, lr, [r5, #8]
 8024ba2:	f108 38ff 	add.w	r8, r8, #4294967295
 8024ba6:	ea4f 432b 	mov.w	r3, fp, asr #16
 8024baa:	1439      	asrs	r1, r7, #16
 8024bac:	e7af      	b.n	8024b0e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024bae:	9b08      	ldr	r3, [sp, #32]
 8024bb0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8024bb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024bb8:	3301      	adds	r3, #1
 8024bba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024bbe:	449a      	add	sl, r3
 8024bc0:	e66a      	b.n	8024898 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8024bc2:	3a01      	subs	r2, #1
 8024bc4:	f8dd e020 	ldr.w	lr, [sp, #32]
 8024bc8:	4690      	mov	r8, r2
 8024bca:	9208      	str	r2, [sp, #32]
 8024bcc:	e79b      	b.n	8024b06 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8024bce:	fa0f fe8e 	sxth.w	lr, lr
 8024bd2:	b236      	sxth	r6, r6
 8024bd4:	e9cd 6e00 	strd	r6, lr, [sp]
 8024bd8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8024bda:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8024bde:	e9cd 2605 	strd	r2, r6, [sp, #20]
 8024be2:	9302      	str	r3, [sp, #8]
 8024be4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024be8:	4621      	mov	r1, r4
 8024bea:	9814      	ldr	r0, [sp, #80]	; 0x50
 8024bec:	f7ff fcd4 	bl	8024598 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8024bf0:	e7cd      	b.n	8024b8e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024bf2:	2a00      	cmp	r2, #0
 8024bf4:	d17b      	bne.n	8024cee <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x522>
 8024bf6:	4661      	mov	r1, ip
 8024bf8:	e9cd cc10 	strd	ip, ip, [sp, #64]	; 0x40
 8024bfc:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8024c00:	b283      	uxth	r3, r0
 8024c02:	b292      	uxth	r2, r2
 8024c04:	fb03 f602 	mul.w	r6, r3, r2
 8024c08:	011b      	lsls	r3, r3, #4
 8024c0a:	7809      	ldrb	r1, [r1, #0]
 8024c0c:	1b98      	subs	r0, r3, r6
 8024c0e:	b280      	uxth	r0, r0
 8024c10:	9012      	str	r0, [sp, #72]	; 0x48
 8024c12:	fb00 f101 	mul.w	r1, r0, r1
 8024c16:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8024c1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024c1c:	b292      	uxth	r2, r2
 8024c1e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8024c22:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8024c26:	1a9b      	subs	r3, r3, r2
 8024c28:	b29b      	uxth	r3, r3
 8024c2a:	fb03 110e 	mla	r1, r3, lr, r1
 8024c2e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024c30:	f890 a000 	ldrb.w	sl, [r0]
 8024c34:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024c36:	fb02 110a 	mla	r1, r2, sl, r1
 8024c3a:	f890 e000 	ldrb.w	lr, [r0]
 8024c3e:	f894 a000 	ldrb.w	sl, [r4]
 8024c42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024c44:	fb06 110e 	mla	r1, r6, lr, r1
 8024c48:	fb1a fa00 	smulbb	sl, sl, r0
 8024c4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024c4e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024c52:	fb01 a100 	mla	r1, r1, r0, sl
 8024c56:	b289      	uxth	r1, r1
 8024c58:	f101 0e01 	add.w	lr, r1, #1
 8024c5c:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 8024c60:	1209      	asrs	r1, r1, #8
 8024c62:	7021      	strb	r1, [r4, #0]
 8024c64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024c66:	9812      	ldr	r0, [sp, #72]	; 0x48
 8024c68:	7849      	ldrb	r1, [r1, #1]
 8024c6a:	f89c e001 	ldrb.w	lr, [ip, #1]
 8024c6e:	fb00 f101 	mul.w	r1, r0, r1
 8024c72:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024c74:	fb03 110e 	mla	r1, r3, lr, r1
 8024c78:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024c7c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024c7e:	fb02 110a 	mla	r1, r2, sl, r1
 8024c82:	f890 e001 	ldrb.w	lr, [r0, #1]
 8024c86:	f894 a001 	ldrb.w	sl, [r4, #1]
 8024c8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024c8c:	fb06 110e 	mla	r1, r6, lr, r1
 8024c90:	fb1a fa00 	smulbb	sl, sl, r0
 8024c94:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024c96:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024c9a:	fb01 a100 	mla	r1, r1, r0, sl
 8024c9e:	b289      	uxth	r1, r1
 8024ca0:	f101 0e01 	add.w	lr, r1, #1
 8024ca4:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 8024ca8:	1209      	asrs	r1, r1, #8
 8024caa:	7061      	strb	r1, [r4, #1]
 8024cac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024cae:	9812      	ldr	r0, [sp, #72]	; 0x48
 8024cb0:	7889      	ldrb	r1, [r1, #2]
 8024cb2:	f89c c002 	ldrb.w	ip, [ip, #2]
 8024cb6:	fb00 f001 	mul.w	r0, r0, r1
 8024cba:	fb03 010c 	mla	r1, r3, ip, r0
 8024cbe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024cc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024cc2:	7880      	ldrb	r0, [r0, #2]
 8024cc4:	789b      	ldrb	r3, [r3, #2]
 8024cc6:	fb02 1100 	mla	r1, r2, r0, r1
 8024cca:	78a2      	ldrb	r2, [r4, #2]
 8024ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024cce:	fb06 1303 	mla	r3, r6, r3, r1
 8024cd2:	fb12 f200 	smulbb	r2, r2, r0
 8024cd6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024cd8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024cdc:	fb03 2300 	mla	r3, r3, r0, r2
 8024ce0:	b29b      	uxth	r3, r3
 8024ce2:	1c5a      	adds	r2, r3, #1
 8024ce4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024ce8:	121b      	asrs	r3, r3, #8
 8024cea:	70a3      	strb	r3, [r4, #2]
 8024cec:	e74f      	b.n	8024b8e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024cee:	f813 300a 	ldrb.w	r3, [r3, sl]
 8024cf2:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8024cf6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024cfa:	18f3      	adds	r3, r6, r3
 8024cfc:	9311      	str	r3, [sp, #68]	; 0x44
 8024cfe:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8024d02:	4661      	mov	r1, ip
 8024d04:	e77c      	b.n	8024c00 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024d06:	e9cd cc10 	strd	ip, ip, [sp, #64]	; 0x40
 8024d0a:	e779      	b.n	8024c00 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024d0c:	f43f adc4 	beq.w	8024898 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8024d10:	1e65      	subs	r5, r4, #1
 8024d12:	e602      	b.n	802491a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>

08024d14 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8024d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d18:	b083      	sub	sp, #12
 8024d1a:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 8024d1e:	f891 9001 	ldrb.w	r9, [r1, #1]
 8024d22:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8024d26:	7888      	ldrb	r0, [r1, #2]
 8024d28:	fb07 6c08 	mla	ip, r7, r8, r6
 8024d2c:	ea4f 2909 	mov.w	r9, r9, lsl #8
 8024d30:	780c      	ldrb	r4, [r1, #0]
 8024d32:	ea49 4900 	orr.w	r9, r9, r0, lsl #16
 8024d36:	ea49 0404 	orr.w	r4, r9, r4
 8024d3a:	2f00      	cmp	r7, #0
 8024d3c:	9401      	str	r4, [sp, #4]
 8024d3e:	eb02 090c 	add.w	r9, r2, ip
 8024d42:	f107 0e01 	add.w	lr, r7, #1
 8024d46:	f9bd a034 	ldrsh.w	sl, [sp, #52]	; 0x34
 8024d4a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8024d4e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8024d52:	db01      	blt.n	8024d58 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x44>
 8024d54:	45ba      	cmp	sl, r7
 8024d56:	dc6e      	bgt.n	8024e36 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x122>
 8024d58:	fa5f fb84 	uxtb.w	fp, r4
 8024d5c:	af01      	add	r7, sp, #4
 8024d5e:	465a      	mov	r2, fp
 8024d60:	46bc      	mov	ip, r7
 8024d62:	f1be 0f00 	cmp.w	lr, #0
 8024d66:	db01      	blt.n	8024d6c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x58>
 8024d68:	45f2      	cmp	sl, lr
 8024d6a:	dc49      	bgt.n	8024e00 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xec>
 8024d6c:	fa5f fa84 	uxtb.w	sl, r4
 8024d70:	ab01      	add	r3, sp, #4
 8024d72:	46d1      	mov	r9, sl
 8024d74:	469e      	mov	lr, r3
 8024d76:	280f      	cmp	r0, #15
 8024d78:	f200 8098 	bhi.w	8024eac <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8024d7c:	2d0f      	cmp	r5, #15
 8024d7e:	f200 8095 	bhi.w	8024eac <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8024d82:	b280      	uxth	r0, r0
 8024d84:	b2ad      	uxth	r5, r5
 8024d86:	fb00 f805 	mul.w	r8, r0, r5
 8024d8a:	0104      	lsls	r4, r0, #4
 8024d8c:	eba4 0608 	sub.w	r6, r4, r8
 8024d90:	b2b6      	uxth	r6, r6
 8024d92:	fb06 f002 	mul.w	r0, r6, r2
 8024d96:	ebc8 1505 	rsb	r5, r8, r5, lsl #4
 8024d9a:	b2ad      	uxth	r5, r5
 8024d9c:	f5c4 7280 	rsb	r2, r4, #256	; 0x100
 8024da0:	1b52      	subs	r2, r2, r5
 8024da2:	b292      	uxth	r2, r2
 8024da4:	fb02 000b 	mla	r0, r2, fp, r0
 8024da8:	fb05 000a 	mla	r0, r5, sl, r0
 8024dac:	fb08 0009 	mla	r0, r8, r9, r0
 8024db0:	1200      	asrs	r0, r0, #8
 8024db2:	7008      	strb	r0, [r1, #0]
 8024db4:	f897 9001 	ldrb.w	r9, [r7, #1]
 8024db8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8024dbc:	fb06 f909 	mul.w	r9, r6, r9
 8024dc0:	fb02 9904 	mla	r9, r2, r4, r9
 8024dc4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8024dc8:	7858      	ldrb	r0, [r3, #1]
 8024dca:	fb05 9404 	mla	r4, r5, r4, r9
 8024dce:	fb08 4000 	mla	r0, r8, r0, r4
 8024dd2:	1200      	asrs	r0, r0, #8
 8024dd4:	7048      	strb	r0, [r1, #1]
 8024dd6:	78bc      	ldrb	r4, [r7, #2]
 8024dd8:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8024ddc:	fb06 f604 	mul.w	r6, r6, r4
 8024de0:	fb02 6600 	mla	r6, r2, r0, r6
 8024de4:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8024de8:	789b      	ldrb	r3, [r3, #2]
 8024dea:	fb05 6500 	mla	r5, r5, r0, r6
 8024dee:	fb08 5803 	mla	r8, r8, r3, r5
 8024df2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024df6:	f881 8002 	strb.w	r8, [r1, #2]
 8024dfa:	b003      	add	sp, #12
 8024dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e00:	b385      	cbz	r5, 8024e64 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x150>
 8024e02:	2e00      	cmp	r6, #0
 8024e04:	db40      	blt.n	8024e88 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x174>
 8024e06:	45b0      	cmp	r8, r6
 8024e08:	dd3e      	ble.n	8024e88 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x174>
 8024e0a:	f819 e008 	ldrb.w	lr, [r9, r8]
 8024e0e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8024e12:	449e      	add	lr, r3
 8024e14:	3601      	adds	r6, #1
 8024e16:	f89e a000 	ldrb.w	sl, [lr]
 8024e1a:	d431      	bmi.n	8024e80 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x16c>
 8024e1c:	45b0      	cmp	r8, r6
 8024e1e:	dd2f      	ble.n	8024e80 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x16c>
 8024e20:	2800      	cmp	r0, #0
 8024e22:	d03f      	beq.n	8024ea4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x190>
 8024e24:	44c8      	add	r8, r9
 8024e26:	f898 4001 	ldrb.w	r4, [r8, #1]
 8024e2a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024e2e:	f813 9004 	ldrb.w	r9, [r3, r4]
 8024e32:	4423      	add	r3, r4
 8024e34:	e79f      	b.n	8024d76 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x62>
 8024e36:	2e00      	cmp	r6, #0
 8024e38:	db01      	blt.n	8024e3e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8024e3a:	45b0      	cmp	r8, r6
 8024e3c:	dc1a      	bgt.n	8024e74 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>
 8024e3e:	f10d 0c04 	add.w	ip, sp, #4
 8024e42:	1c72      	adds	r2, r6, #1
 8024e44:	f89c b000 	ldrb.w	fp, [ip]
 8024e48:	d409      	bmi.n	8024e5e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x14a>
 8024e4a:	4590      	cmp	r8, r2
 8024e4c:	dd07      	ble.n	8024e5e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x14a>
 8024e4e:	b1f0      	cbz	r0, 8024e8e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x17a>
 8024e50:	f899 7001 	ldrb.w	r7, [r9, #1]
 8024e54:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024e58:	5dda      	ldrb	r2, [r3, r7]
 8024e5a:	441f      	add	r7, r3
 8024e5c:	e781      	b.n	8024d62 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8024e5e:	b2e2      	uxtb	r2, r4
 8024e60:	af01      	add	r7, sp, #4
 8024e62:	e77e      	b.n	8024d62 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8024e64:	280f      	cmp	r0, #15
 8024e66:	fa5f fa84 	uxtb.w	sl, r4
 8024e6a:	d81f      	bhi.n	8024eac <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8024e6c:	ab01      	add	r3, sp, #4
 8024e6e:	469e      	mov	lr, r3
 8024e70:	46d1      	mov	r9, sl
 8024e72:	e786      	b.n	8024d82 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x6e>
 8024e74:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8024e78:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024e7c:	449c      	add	ip, r3
 8024e7e:	e7e0      	b.n	8024e42 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8024e80:	fa5f f984 	uxtb.w	r9, r4
 8024e84:	ab01      	add	r3, sp, #4
 8024e86:	e776      	b.n	8024d76 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x62>
 8024e88:	f10d 0e04 	add.w	lr, sp, #4
 8024e8c:	e7c2      	b.n	8024e14 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x100>
 8024e8e:	f1be 0f00 	cmp.w	lr, #0
 8024e92:	b2e2      	uxtb	r2, r4
 8024e94:	af01      	add	r7, sp, #4
 8024e96:	f6bf af67 	bge.w	8024d68 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x54>
 8024e9a:	463b      	mov	r3, r7
 8024e9c:	46be      	mov	lr, r7
 8024e9e:	4691      	mov	r9, r2
 8024ea0:	4692      	mov	sl, r2
 8024ea2:	e76b      	b.n	8024d7c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8024ea4:	fa5f f984 	uxtb.w	r9, r4
 8024ea8:	ab01      	add	r3, sp, #4
 8024eaa:	e767      	b.n	8024d7c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8024eac:	4b03      	ldr	r3, [pc, #12]	; (8024ebc <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1a8>)
 8024eae:	4a04      	ldr	r2, [pc, #16]	; (8024ec0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1ac>)
 8024eb0:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8024eb4:	4803      	ldr	r0, [pc, #12]	; (8024ec4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1b0>)
 8024eb6:	f003 f90f 	bl	80280d8 <__assert_func>
 8024eba:	bf00      	nop
 8024ebc:	0802b350 	.word	0x0802b350
 8024ec0:	0802b9c8 	.word	0x0802b9c8
 8024ec4:	0802b4d4 	.word	0x0802b4d4

08024ec8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ecc:	ed2d 8b0a 	vpush	{d8-d12}
 8024ed0:	eeb0 aa40 	vmov.f32	s20, s0
 8024ed4:	eef0 9a60 	vmov.f32	s19, s1
 8024ed8:	eeb0 9a41 	vmov.f32	s18, s2
 8024edc:	eef0 8a62 	vmov.f32	s17, s5
 8024ee0:	eeb0 8a43 	vmov.f32	s16, s6
 8024ee4:	eeb0 ca44 	vmov.f32	s24, s8
 8024ee8:	eef0 ba64 	vmov.f32	s23, s9
 8024eec:	eeb0 ba45 	vmov.f32	s22, s10
 8024ef0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8024ef4:	b093      	sub	sp, #76	; 0x4c
 8024ef6:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8024efa:	e9dd 412b 	ldrd	r4, r1, [sp, #172]	; 0xac
 8024efe:	e9dd 9b27 	ldrd	r9, fp, [sp, #156]	; 0x9c
 8024f02:	9011      	str	r0, [sp, #68]	; 0x44
 8024f04:	461a      	mov	r2, r3
 8024f06:	6860      	ldr	r0, [r4, #4]
 8024f08:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024f0a:	fb00 1803 	mla	r8, r0, r3, r1
 8024f0e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024f10:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8024f12:	6821      	ldr	r1, [r4, #0]
 8024f14:	685b      	ldr	r3, [r3, #4]
 8024f16:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024f1a:	6800      	ldr	r0, [r0, #0]
 8024f1c:	eb01 0a08 	add.w	sl, r1, r8
 8024f20:	3304      	adds	r3, #4
 8024f22:	f8dd 80a4 	ldr.w	r8, [sp, #164]	; 0xa4
 8024f26:	9009      	str	r0, [sp, #36]	; 0x24
 8024f28:	9307      	str	r3, [sp, #28]
 8024f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f2c:	2b00      	cmp	r3, #0
 8024f2e:	dc02      	bgt.n	8024f36 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024f32:	2b00      	cmp	r3, #0
 8024f34:	dd61      	ble.n	8024ffa <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8024f36:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024f38:	2a00      	cmp	r2, #0
 8024f3a:	e9d3 6e02 	ldrd	r6, lr, [r3, #8]
 8024f3e:	b230      	sxth	r0, r6
 8024f40:	fa0f f78e 	sxth.w	r7, lr
 8024f44:	f340 81fe 	ble.w	8025344 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47c>
 8024f48:	f8cd e018 	str.w	lr, [sp, #24]
 8024f4c:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
 8024f50:	1e45      	subs	r5, r0, #1
 8024f52:	f107 3cff 	add.w	ip, r7, #4294967295
 8024f56:	ea5f 4329 	movs.w	r3, r9, asr #16
 8024f5a:	ea4f 412b 	mov.w	r1, fp, asr #16
 8024f5e:	d405      	bmi.n	8024f6c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8024f60:	42ab      	cmp	r3, r5
 8024f62:	da03      	bge.n	8024f6c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8024f64:	2900      	cmp	r1, #0
 8024f66:	db01      	blt.n	8024f6c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8024f68:	4561      	cmp	r1, ip
 8024f6a:	db4b      	blt.n	8025004 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8024f6c:	1c5c      	adds	r4, r3, #1
 8024f6e:	d406      	bmi.n	8024f7e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024f70:	4284      	cmp	r4, r0
 8024f72:	dc04      	bgt.n	8024f7e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024f74:	1c4c      	adds	r4, r1, #1
 8024f76:	d402      	bmi.n	8024f7e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024f78:	42bc      	cmp	r4, r7
 8024f7a:	f340 815e 	ble.w	802523a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8024f7e:	3a01      	subs	r2, #1
 8024f80:	44c1      	add	r9, r8
 8024f82:	44f3      	add	fp, lr
 8024f84:	f10a 0a03 	add.w	sl, sl, #3
 8024f88:	d1e5      	bne.n	8024f56 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f8c:	2b00      	cmp	r3, #0
 8024f8e:	dd34      	ble.n	8024ffa <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8024f90:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8024f94:	ee79 9aab 	vadd.f32	s19, s19, s23
 8024f98:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8024f9c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8024fa0:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8024fa4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024fa8:	ee76 6a68 	vsub.f32	s13, s12, s17
 8024fac:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8024fb0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024fb4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024fb8:	ee16 2a90 	vmov	r2, s13
 8024fbc:	3b01      	subs	r3, #1
 8024fbe:	930a      	str	r3, [sp, #40]	; 0x28
 8024fc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024fc2:	fb92 f8f3 	sdiv	r8, r2, r3
 8024fc6:	ee17 2a10 	vmov	r2, s14
 8024fca:	eeb0 7a48 	vmov.f32	s14, s16
 8024fce:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024fd2:	ee17 ba10 	vmov	fp, s14
 8024fd6:	eeb0 7a68 	vmov.f32	s14, s17
 8024fda:	fb92 f3f3 	sdiv	r3, r2, r3
 8024fde:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024fe2:	932a      	str	r3, [sp, #168]	; 0xa8
 8024fe4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024fe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024fe8:	ee17 9a10 	vmov	r9, s14
 8024fec:	eeb0 8a67 	vmov.f32	s16, s15
 8024ff0:	eef0 8a46 	vmov.f32	s17, s12
 8024ff4:	bf18      	it	ne
 8024ff6:	461a      	movne	r2, r3
 8024ff8:	e797      	b.n	8024f2a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8024ffa:	b013      	add	sp, #76	; 0x4c
 8024ffc:	ecbd 8b0a 	vpop	{d8-d12}
 8025000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025004:	f8dd e018 	ldr.w	lr, [sp, #24]
 8025008:	1e51      	subs	r1, r2, #1
 802500a:	fb08 9301 	mla	r3, r8, r1, r9
 802500e:	141b      	asrs	r3, r3, #16
 8025010:	9106      	str	r1, [sp, #24]
 8025012:	f100 80aa 	bmi.w	802516a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8025016:	42ab      	cmp	r3, r5
 8025018:	f280 80a7 	bge.w	802516a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802501c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802501e:	fb03 b301 	mla	r3, r3, r1, fp
 8025022:	141b      	asrs	r3, r3, #16
 8025024:	f100 80a1 	bmi.w	802516a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8025028:	3f01      	subs	r7, #1
 802502a:	42bb      	cmp	r3, r7
 802502c:	f280 809d 	bge.w	802516a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8025030:	2a00      	cmp	r2, #0
 8025032:	ddaa      	ble.n	8024f8a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8025034:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025038:	eb0a 0302 	add.w	r3, sl, r2
 802503c:	9308      	str	r3, [sp, #32]
 802503e:	f10a 0a03 	add.w	sl, sl, #3
 8025042:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
 8025046:	e062      	b.n	802510e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8025048:	784c      	ldrb	r4, [r1, #1]
 802504a:	180d      	adds	r5, r1, r0
 802504c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025050:	4434      	add	r4, r6
 8025052:	2a00      	cmp	r2, #0
 8025054:	d07c      	beq.n	8025150 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8025056:	5c08      	ldrb	r0, [r1, r0]
 8025058:	786f      	ldrb	r7, [r5, #1]
 802505a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802505e:	1981      	adds	r1, r0, r6
 8025060:	4608      	mov	r0, r1
 8025062:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025066:	9106      	str	r1, [sp, #24]
 8025068:	4437      	add	r7, r6
 802506a:	b29b      	uxth	r3, r3
 802506c:	b292      	uxth	r2, r2
 802506e:	fb03 f502 	mul.w	r5, r3, r2
 8025072:	011b      	lsls	r3, r3, #4
 8025074:	f894 e000 	ldrb.w	lr, [r4]
 8025078:	1b59      	subs	r1, r3, r5
 802507a:	b289      	uxth	r1, r1
 802507c:	fb01 fe0e 	mul.w	lr, r1, lr
 8025080:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8025084:	b292      	uxth	r2, r2
 8025086:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802508a:	f816 6008 	ldrb.w	r6, [r6, r8]
 802508e:	1a9b      	subs	r3, r3, r2
 8025090:	b29b      	uxth	r3, r3
 8025092:	fb03 e606 	mla	r6, r3, r6, lr
 8025096:	f890 e000 	ldrb.w	lr, [r0]
 802509a:	f897 8000 	ldrb.w	r8, [r7]
 802509e:	fb02 660e 	mla	r6, r2, lr, r6
 80250a2:	fb05 6808 	mla	r8, r5, r8, r6
 80250a6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80250aa:	f80a 8c03 	strb.w	r8, [sl, #-3]
 80250ae:	f894 8001 	ldrb.w	r8, [r4, #1]
 80250b2:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80250b4:	fb01 f608 	mul.w	r6, r1, r8
 80250b8:	f89c e001 	ldrb.w	lr, [ip, #1]
 80250bc:	4481      	add	r9, r0
 80250be:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80250c0:	fb03 680e 	mla	r8, r3, lr, r6
 80250c4:	4483      	add	fp, r0
 80250c6:	9806      	ldr	r0, [sp, #24]
 80250c8:	787e      	ldrb	r6, [r7, #1]
 80250ca:	f890 e001 	ldrb.w	lr, [r0, #1]
 80250ce:	fb02 8e0e 	mla	lr, r2, lr, r8
 80250d2:	fb05 ee06 	mla	lr, r5, r6, lr
 80250d6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80250da:	f80a ec02 	strb.w	lr, [sl, #-2]
 80250de:	78a4      	ldrb	r4, [r4, #2]
 80250e0:	f89c 6002 	ldrb.w	r6, [ip, #2]
 80250e4:	fb01 f104 	mul.w	r1, r1, r4
 80250e8:	fb03 1106 	mla	r1, r3, r6, r1
 80250ec:	7883      	ldrb	r3, [r0, #2]
 80250ee:	78b8      	ldrb	r0, [r7, #2]
 80250f0:	fb02 1103 	mla	r1, r2, r3, r1
 80250f4:	fb05 1500 	mla	r5, r5, r0, r1
 80250f8:	9b08      	ldr	r3, [sp, #32]
 80250fa:	122d      	asrs	r5, r5, #8
 80250fc:	4553      	cmp	r3, sl
 80250fe:	f80a 5c01 	strb.w	r5, [sl, #-1]
 8025102:	d030      	beq.n	8025166 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8025104:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025106:	f10a 0a03 	add.w	sl, sl, #3
 802510a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802510e:	ea4f 4329 	mov.w	r3, r9, asr #16
 8025112:	ea4f 412b 	mov.w	r1, fp, asr #16
 8025116:	fb00 3101 	mla	r1, r0, r1, r3
 802511a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802511c:	9e07      	ldr	r6, [sp, #28]
 802511e:	f812 8001 	ldrb.w	r8, [r2, r1]
 8025122:	f3c9 3303 	ubfx	r3, r9, #12, #4
 8025126:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802512a:	4411      	add	r1, r2
 802512c:	eb06 0c08 	add.w	ip, r6, r8
 8025130:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8025134:	2b00      	cmp	r3, #0
 8025136:	d187      	bne.n	8025048 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x180>
 8025138:	b17a      	cbz	r2, 802515a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 802513a:	5c08      	ldrb	r0, [r1, r0]
 802513c:	9907      	ldr	r1, [sp, #28]
 802513e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025142:	1841      	adds	r1, r0, r1
 8025144:	4667      	mov	r7, ip
 8025146:	9106      	str	r1, [sp, #24]
 8025148:	4664      	mov	r4, ip
 802514a:	9e07      	ldr	r6, [sp, #28]
 802514c:	4608      	mov	r0, r1
 802514e:	e78c      	b.n	802506a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8025150:	4667      	mov	r7, ip
 8025152:	f8cd c018 	str.w	ip, [sp, #24]
 8025156:	4660      	mov	r0, ip
 8025158:	e787      	b.n	802506a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802515a:	4667      	mov	r7, ip
 802515c:	f8cd c018 	str.w	ip, [sp, #24]
 8025160:	4664      	mov	r4, ip
 8025162:	4660      	mov	r0, ip
 8025164:	e781      	b.n	802506a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8025166:	469a      	mov	sl, r3
 8025168:	e70f      	b.n	8024f8a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802516a:	2a00      	cmp	r2, #0
 802516c:	f77f af0d 	ble.w	8024f8a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8025170:	9d06      	ldr	r5, [sp, #24]
 8025172:	ea4f 4329 	mov.w	r3, r9, asr #16
 8025176:	ea4f 412b 	mov.w	r1, fp, asr #16
 802517a:	4657      	mov	r7, sl
 802517c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8025180:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8025182:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 8025186:	2b00      	cmp	r3, #0
 8025188:	f3c9 3003 	ubfx	r0, r9, #12, #4
 802518c:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8025190:	db31      	blt.n	80251f6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8025192:	f106 3cff 	add.w	ip, r6, #4294967295
 8025196:	4563      	cmp	r3, ip
 8025198:	da2d      	bge.n	80251f6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802519a:	2900      	cmp	r1, #0
 802519c:	db2b      	blt.n	80251f6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802519e:	f10e 3cff 	add.w	ip, lr, #4294967295
 80251a2:	4561      	cmp	r1, ip
 80251a4:	da27      	bge.n	80251f6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80251a6:	fa0f fc86 	sxth.w	ip, r6
 80251aa:	fb01 330c 	mla	r3, r1, ip, r3
 80251ae:	9e07      	ldr	r6, [sp, #28]
 80251b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80251b2:	f811 e003 	ldrb.w	lr, [r1, r3]
 80251b6:	440b      	add	r3, r1
 80251b8:	4631      	mov	r1, r6
 80251ba:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80251be:	4471      	add	r1, lr
 80251c0:	910e      	str	r1, [sp, #56]	; 0x38
 80251c2:	2800      	cmp	r0, #0
 80251c4:	d04f      	beq.n	8025266 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80251c6:	7859      	ldrb	r1, [r3, #1]
 80251c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80251cc:	1871      	adds	r1, r6, r1
 80251ce:	9108      	str	r1, [sp, #32]
 80251d0:	2a00      	cmp	r2, #0
 80251d2:	f000 80b2 	beq.w	802533a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 80251d6:	eb03 010c 	add.w	r1, r3, ip
 80251da:	f813 600c 	ldrb.w	r6, [r3, ip]
 80251de:	7849      	ldrb	r1, [r1, #1]
 80251e0:	9b07      	ldr	r3, [sp, #28]
 80251e2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80251e6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80251ea:	1859      	adds	r1, r3, r1
 80251ec:	18f3      	adds	r3, r6, r3
 80251ee:	910c      	str	r1, [sp, #48]	; 0x30
 80251f0:	930d      	str	r3, [sp, #52]	; 0x34
 80251f2:	9e08      	ldr	r6, [sp, #32]
 80251f4:	e03d      	b.n	8025272 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80251f6:	f113 0c01 	adds.w	ip, r3, #1
 80251fa:	d406      	bmi.n	802520a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80251fc:	45b4      	cmp	ip, r6
 80251fe:	dc04      	bgt.n	802520a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025200:	f111 0c01 	adds.w	ip, r1, #1
 8025204:	d401      	bmi.n	802520a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025206:	45f4      	cmp	ip, lr
 8025208:	dd1d      	ble.n	8025246 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802520a:	2d00      	cmp	r5, #0
 802520c:	f107 0703 	add.w	r7, r7, #3
 8025210:	44c1      	add	r9, r8
 8025212:	44d3      	add	fp, sl
 8025214:	dd07      	ble.n	8025226 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8025216:	e9d4 6e02 	ldrd	r6, lr, [r4, #8]
 802521a:	3d01      	subs	r5, #1
 802521c:	ea4f 4329 	mov.w	r3, r9, asr #16
 8025220:	ea4f 412b 	mov.w	r1, fp, asr #16
 8025224:	e7af      	b.n	8025186 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8025226:	9b06      	ldr	r3, [sp, #24]
 8025228:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 802522c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025230:	3301      	adds	r3, #1
 8025232:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025236:	449a      	add	sl, r3
 8025238:	e6a7      	b.n	8024f8a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802523a:	3a01      	subs	r2, #1
 802523c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8025240:	4615      	mov	r5, r2
 8025242:	9206      	str	r2, [sp, #24]
 8025244:	e799      	b.n	802517a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 8025246:	fa0f fe8e 	sxth.w	lr, lr
 802524a:	b236      	sxth	r6, r6
 802524c:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8025250:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8025254:	e9cd 6e00 	strd	r6, lr, [sp]
 8025258:	9b07      	ldr	r3, [sp, #28]
 802525a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802525c:	4639      	mov	r1, r7
 802525e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025260:	f7ff fd58 	bl	8024d14 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8025264:	e7d1      	b.n	802520a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025266:	2a00      	cmp	r2, #0
 8025268:	d15b      	bne.n	8025322 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 802526a:	460e      	mov	r6, r1
 802526c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 8025270:	9108      	str	r1, [sp, #32]
 8025272:	b283      	uxth	r3, r0
 8025274:	b292      	uxth	r2, r2
 8025276:	fb03 f002 	mul.w	r0, r3, r2
 802527a:	011b      	lsls	r3, r3, #4
 802527c:	f896 c000 	ldrb.w	ip, [r6]
 8025280:	1a19      	subs	r1, r3, r0
 8025282:	b289      	uxth	r1, r1
 8025284:	fb01 fc0c 	mul.w	ip, r1, ip
 8025288:	9e07      	ldr	r6, [sp, #28]
 802528a:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 802528e:	b292      	uxth	r2, r2
 8025290:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8025294:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8025298:	1a9b      	subs	r3, r3, r2
 802529a:	b29b      	uxth	r3, r3
 802529c:	fb03 cc0e 	mla	ip, r3, lr, ip
 80252a0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80252a2:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 80252a6:	f896 e000 	ldrb.w	lr, [r6]
 80252aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80252ac:	f896 c000 	ldrb.w	ip, [r6]
 80252b0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80252b2:	fb02 6e0e 	mla	lr, r2, lr, r6
 80252b6:	fb00 ec0c 	mla	ip, r0, ip, lr
 80252ba:	9e08      	ldr	r6, [sp, #32]
 80252bc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80252c0:	f887 c000 	strb.w	ip, [r7]
 80252c4:	f896 c001 	ldrb.w	ip, [r6, #1]
 80252c8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80252ca:	fb01 fc0c 	mul.w	ip, r1, ip
 80252ce:	f896 e001 	ldrb.w	lr, [r6, #1]
 80252d2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80252d4:	fb03 ce0e 	mla	lr, r3, lr, ip
 80252d8:	f896 c001 	ldrb.w	ip, [r6, #1]
 80252dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80252de:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 80252e2:	f896 c001 	ldrb.w	ip, [r6, #1]
 80252e6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80252e8:	fb02 ee06 	mla	lr, r2, r6, lr
 80252ec:	fb00 ec0c 	mla	ip, r0, ip, lr
 80252f0:	9e08      	ldr	r6, [sp, #32]
 80252f2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80252f6:	f887 c001 	strb.w	ip, [r7, #1]
 80252fa:	f896 c002 	ldrb.w	ip, [r6, #2]
 80252fe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8025300:	fb01 f10c 	mul.w	r1, r1, ip
 8025304:	f896 e002 	ldrb.w	lr, [r6, #2]
 8025308:	fb03 110e 	mla	r1, r3, lr, r1
 802530c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802530e:	789e      	ldrb	r6, [r3, #2]
 8025310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025312:	fb02 1206 	mla	r2, r2, r6, r1
 8025316:	789b      	ldrb	r3, [r3, #2]
 8025318:	fb00 2303 	mla	r3, r0, r3, r2
 802531c:	121b      	asrs	r3, r3, #8
 802531e:	70bb      	strb	r3, [r7, #2]
 8025320:	e773      	b.n	802520a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025322:	4631      	mov	r1, r6
 8025324:	f813 600c 	ldrb.w	r6, [r3, ip]
 8025328:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802532a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802532e:	1871      	adds	r1, r6, r1
 8025330:	930c      	str	r3, [sp, #48]	; 0x30
 8025332:	910d      	str	r1, [sp, #52]	; 0x34
 8025334:	9308      	str	r3, [sp, #32]
 8025336:	461e      	mov	r6, r3
 8025338:	e79b      	b.n	8025272 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802533a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 802533c:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
 8025340:	460e      	mov	r6, r1
 8025342:	e796      	b.n	8025272 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025344:	f43f ae21 	beq.w	8024f8a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8025348:	1e45      	subs	r5, r0, #1
 802534a:	e65d      	b.n	8025008 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>

0802534c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 802534c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025350:	b087      	sub	sp, #28
 8025352:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 8025356:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 802535a:	fb06 080c 	mla	r8, r6, ip, r0
 802535e:	2e00      	cmp	r6, #0
 8025360:	4696      	mov	lr, r2
 8025362:	eb02 0a08 	add.w	sl, r2, r8
 8025366:	f106 0b01 	add.w	fp, r6, #1
 802536a:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 802536e:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
 8025372:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8025376:	f89d 4058 	ldrb.w	r4, [sp, #88]	; 0x58
 802537a:	db02      	blt.n	8025382 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 802537c:	42b2      	cmp	r2, r6
 802537e:	f300 80f1 	bgt.w	8025564 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x218>
 8025382:	2600      	movs	r6, #0
 8025384:	46b1      	mov	r9, r6
 8025386:	46b0      	mov	r8, r6
 8025388:	46b6      	mov	lr, r6
 802538a:	f1bb 0f00 	cmp.w	fp, #0
 802538e:	db02      	blt.n	8025396 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x4a>
 8025390:	455a      	cmp	r2, fp
 8025392:	f300 8101 	bgt.w	8025598 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8025396:	f04f 0c00 	mov.w	ip, #0
 802539a:	e9cd cc02 	strd	ip, ip, [sp, #8]
 802539e:	f8cd c004 	str.w	ip, [sp, #4]
 80253a2:	2f0f      	cmp	r7, #15
 80253a4:	f200 813a 	bhi.w	802561c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 80253a8:	2d0f      	cmp	r5, #15
 80253aa:	f200 8137 	bhi.w	802561c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 80253ae:	b2a8      	uxth	r0, r5
 80253b0:	b2bb      	uxth	r3, r7
 80253b2:	fb00 f503 	mul.w	r5, r0, r3
 80253b6:	9a01      	ldr	r2, [sp, #4]
 80253b8:	ebc5 1000 	rsb	r0, r5, r0, lsl #4
 80253bc:	b280      	uxth	r0, r0
 80253be:	fb00 fa02 	mul.w	sl, r0, r2
 80253c2:	fb05 fb0c 	mul.w	fp, r5, ip
 80253c6:	011b      	lsls	r3, r3, #4
 80253c8:	1b5f      	subs	r7, r3, r5
 80253ca:	b2bf      	uxth	r7, r7
 80253cc:	fb07 f206 	mul.w	r2, r7, r6
 80253d0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80253d4:	1a1b      	subs	r3, r3, r0
 80253d6:	b29b      	uxth	r3, r3
 80253d8:	fb03 2209 	mla	r2, r3, r9, r2
 80253dc:	4452      	add	r2, sl
 80253de:	445a      	add	r2, fp
 80253e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80253e4:	2a00      	cmp	r2, #0
 80253e6:	f000 80ba 	beq.w	802555e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x212>
 80253ea:	b2a4      	uxth	r4, r4
 80253ec:	fb02 f204 	mul.w	r2, r2, r4
 80253f0:	f102 0a01 	add.w	sl, r2, #1
 80253f4:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 80253f8:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80253fc:	9205      	str	r2, [sp, #20]
 80253fe:	f008 12ff 	and.w	r2, r8, #16711935	; 0xff00ff
 8025402:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025406:	fb06 f202 	mul.w	r2, r6, r2
 802540a:	fb06 f608 	mul.w	r6, r6, r8
 802540e:	f00e 1bff 	and.w	fp, lr, #16711935	; 0xff00ff
 8025412:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025416:	fb09 fb0b 	mul.w	fp, r9, fp
 802541a:	fb09 fe0e 	mul.w	lr, r9, lr
 802541e:	f506 7980 	add.w	r9, r6, #256	; 0x100
 8025422:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8025426:	0a36      	lsrs	r6, r6, #8
 8025428:	ea4f 2812 	mov.w	r8, r2, lsr #8
 802542c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025430:	fb07 f606 	mul.w	r6, r7, r6
 8025434:	9404      	str	r4, [sp, #16]
 8025436:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 802543a:	9c03      	ldr	r4, [sp, #12]
 802543c:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8025440:	4490      	add	r8, r2
 8025442:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025446:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 802544a:	fb0c f202 	mul.w	r2, ip, r2
 802544e:	f404 497f 	and.w	r9, r4, #65280	; 0xff00
 8025452:	ea4f 2a1b 	mov.w	sl, fp, lsr #8
 8025456:	9c02      	ldr	r4, [sp, #8]
 8025458:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802545c:	fb0c fc09 	mul.w	ip, ip, r9
 8025460:	fb08 f807 	mul.w	r8, r8, r7
 8025464:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8025468:	9603      	str	r6, [sp, #12]
 802546a:	f50e 7980 	add.w	r9, lr, #256	; 0x100
 802546e:	9e01      	ldr	r6, [sp, #4]
 8025470:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025474:	44d3      	add	fp, sl
 8025476:	eb09 2e1e 	add.w	lr, r9, lr, lsr #8
 802547a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802547e:	f404 497f 	and.w	r9, r4, #65280	; 0xff00
 8025482:	fb06 f707 	mul.w	r7, r6, r7
 8025486:	fb06 f909 	mul.w	r9, r6, r9
 802548a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802548e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025492:	9e03      	ldr	r6, [sp, #12]
 8025494:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8025498:	ea4f 2a12 	mov.w	sl, r2, lsr #8
 802549c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80254a0:	fb0b 8803 	mla	r8, fp, r3, r8
 80254a4:	fb03 660e 	mla	r6, r3, lr, r6
 80254a8:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 80254ac:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80254b0:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 80254b4:	4492      	add	sl, r2
 80254b6:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 80254ba:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 80254be:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80254c2:	0a3a      	lsrs	r2, r7, #8
 80254c4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80254c8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80254cc:	fb0b 8b05 	mla	fp, fp, r5, r8
 80254d0:	fb05 660e 	mla	r6, r5, lr, r6
 80254d4:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80254d8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80254dc:	f509 7580 	add.w	r5, r9, #256	; 0x100
 80254e0:	44b8      	add	r8, r7
 80254e2:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 80254e6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80254ea:	0a2d      	lsrs	r5, r5, #8
 80254ec:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80254f0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80254f4:	fb00 6505 	mla	r5, r0, r5, r6
 80254f8:	fb08 b800 	mla	r8, r8, r0, fp
 80254fc:	0a2d      	lsrs	r5, r5, #8
 80254fe:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8025502:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025506:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802550a:	4328      	orrs	r0, r5
 802550c:	784b      	ldrb	r3, [r1, #1]
 802550e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8025512:	9c04      	ldr	r4, [sp, #16]
 8025514:	788d      	ldrb	r5, [r1, #2]
 8025516:	fa5f fa80 	uxtb.w	sl, r0
 802551a:	fb13 f602 	smulbb	r6, r3, r2
 802551e:	fb15 f502 	smulbb	r5, r5, r2
 8025522:	fb1a fa04 	smulbb	sl, sl, r4
 8025526:	780f      	ldrb	r7, [r1, #0]
 8025528:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 802552c:	0c00      	lsrs	r0, r0, #16
 802552e:	fb0c 6304 	mla	r3, ip, r4, r6
 8025532:	fb07 a202 	mla	r2, r7, r2, sl
 8025536:	fb00 5404 	mla	r4, r0, r4, r5
 802553a:	b29b      	uxth	r3, r3
 802553c:	b292      	uxth	r2, r2
 802553e:	b2a4      	uxth	r4, r4
 8025540:	1c56      	adds	r6, r2, #1
 8025542:	1c5d      	adds	r5, r3, #1
 8025544:	1c60      	adds	r0, r4, #1
 8025546:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802554a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 802554e:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8025552:	1212      	asrs	r2, r2, #8
 8025554:	121b      	asrs	r3, r3, #8
 8025556:	1224      	asrs	r4, r4, #8
 8025558:	700a      	strb	r2, [r1, #0]
 802555a:	704b      	strb	r3, [r1, #1]
 802555c:	708c      	strb	r4, [r1, #2]
 802555e:	b007      	add	sp, #28
 8025560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025564:	2800      	cmp	r0, #0
 8025566:	db01      	blt.n	802556c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x220>
 8025568:	4584      	cmp	ip, r0
 802556a:	dc3d      	bgt.n	80255e8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>
 802556c:	f04f 0900 	mov.w	r9, #0
 8025570:	46ce      	mov	lr, r9
 8025572:	1c46      	adds	r6, r0, #1
 8025574:	d42a      	bmi.n	80255cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x280>
 8025576:	45b4      	cmp	ip, r6
 8025578:	dd28      	ble.n	80255cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x280>
 802557a:	b137      	cbz	r7, 802558a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x23e>
 802557c:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8025580:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 8025584:	ea4f 6618 	mov.w	r6, r8, lsr #24
 8025588:	e6ff      	b.n	802538a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 802558a:	f1bb 0f00 	cmp.w	fp, #0
 802558e:	db3e      	blt.n	802560e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2c2>
 8025590:	455a      	cmp	r2, fp
 8025592:	dd3c      	ble.n	802560e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2c2>
 8025594:	463e      	mov	r6, r7
 8025596:	46b8      	mov	r8, r7
 8025598:	b1dd      	cbz	r5, 80255d2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x286>
 802559a:	2800      	cmp	r0, #0
 802559c:	db30      	blt.n	8025600 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2b4>
 802559e:	4584      	cmp	ip, r0
 80255a0:	dd2e      	ble.n	8025600 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2b4>
 80255a2:	f81a 200c 	ldrb.w	r2, [sl, ip]
 80255a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80255aa:	9202      	str	r2, [sp, #8]
 80255ac:	0e12      	lsrs	r2, r2, #24
 80255ae:	9201      	str	r2, [sp, #4]
 80255b0:	3001      	adds	r0, #1
 80255b2:	d420      	bmi.n	80255f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2aa>
 80255b4:	4584      	cmp	ip, r0
 80255b6:	dd1e      	ble.n	80255f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2aa>
 80255b8:	b337      	cbz	r7, 8025608 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2bc>
 80255ba:	44d4      	add	ip, sl
 80255bc:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80255c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80255c4:	9303      	str	r3, [sp, #12]
 80255c6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80255ca:	e6ea      	b.n	80253a2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x56>
 80255cc:	2600      	movs	r6, #0
 80255ce:	46b0      	mov	r8, r6
 80255d0:	e6db      	b.n	802538a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 80255d2:	2f0f      	cmp	r7, #15
 80255d4:	d822      	bhi.n	802561c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 80255d6:	b2bb      	uxth	r3, r7
 80255d8:	4628      	mov	r0, r5
 80255da:	46ab      	mov	fp, r5
 80255dc:	46aa      	mov	sl, r5
 80255de:	e9cd 5502 	strd	r5, r5, [sp, #8]
 80255e2:	46ac      	mov	ip, r5
 80255e4:	9501      	str	r5, [sp, #4]
 80255e6:	e6ee      	b.n	80253c6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 80255e8:	f81e 6008 	ldrb.w	r6, [lr, r8]
 80255ec:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
 80255f0:	ea4f 691e 	mov.w	r9, lr, lsr #24
 80255f4:	e7bd      	b.n	8025572 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x226>
 80255f6:	f04f 0c00 	mov.w	ip, #0
 80255fa:	f8cd c00c 	str.w	ip, [sp, #12]
 80255fe:	e6d0      	b.n	80253a2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x56>
 8025600:	2200      	movs	r2, #0
 8025602:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8025606:	e7d3      	b.n	80255b0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8025608:	9703      	str	r7, [sp, #12]
 802560a:	46bc      	mov	ip, r7
 802560c:	e6cc      	b.n	80253a8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x5c>
 802560e:	46b8      	mov	r8, r7
 8025610:	e9cd 7702 	strd	r7, r7, [sp, #8]
 8025614:	46bc      	mov	ip, r7
 8025616:	9701      	str	r7, [sp, #4]
 8025618:	463e      	mov	r6, r7
 802561a:	e6c5      	b.n	80253a8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x5c>
 802561c:	4b03      	ldr	r3, [pc, #12]	; (802562c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e0>)
 802561e:	4a04      	ldr	r2, [pc, #16]	; (8025630 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e4>)
 8025620:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8025624:	4803      	ldr	r0, [pc, #12]	; (8025634 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e8>)
 8025626:	f002 fd57 	bl	80280d8 <__assert_func>
 802562a:	bf00      	nop
 802562c:	0802b350 	.word	0x0802b350
 8025630:	0802b9c8 	.word	0x0802b9c8
 8025634:	0802b4d4 	.word	0x0802b4d4

08025638 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802563c:	ed2d 8b08 	vpush	{d8-d11}
 8025640:	b0a9      	sub	sp, #164	; 0xa4
 8025642:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8025644:	9022      	str	r0, [sp, #136]	; 0x88
 8025646:	9114      	str	r1, [sp, #80]	; 0x50
 8025648:	6860      	ldr	r0, [r4, #4]
 802564a:	9940      	ldr	r1, [sp, #256]	; 0x100
 802564c:	9217      	str	r2, [sp, #92]	; 0x5c
 802564e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8025650:	eeb0 aa40 	vmov.f32	s20, s0
 8025654:	fb00 1b02 	mla	fp, r0, r2, r1
 8025658:	6821      	ldr	r1, [r4, #0]
 802565a:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
 802565e:	eb01 0800 	add.w	r8, r1, r0
 8025662:	e9dd ab3b 	ldrd	sl, fp, [sp, #236]	; 0xec
 8025666:	eef0 9a60 	vmov.f32	s19, s1
 802566a:	eeb0 9a41 	vmov.f32	s18, s2
 802566e:	eef0 8a62 	vmov.f32	s17, s5
 8025672:	eeb0 8a43 	vmov.f32	s16, s6
 8025676:	eef0 ba44 	vmov.f32	s23, s8
 802567a:	eeb0 ba64 	vmov.f32	s22, s9
 802567e:	eef0 aa45 	vmov.f32	s21, s10
 8025682:	46c1      	mov	r9, r8
 8025684:	465f      	mov	r7, fp
 8025686:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8025688:	9d42      	ldr	r5, [sp, #264]	; 0x108
 802568a:	6852      	ldr	r2, [r2, #4]
 802568c:	f89d 410c 	ldrb.w	r4, [sp, #268]	; 0x10c
 8025690:	3204      	adds	r2, #4
 8025692:	682d      	ldr	r5, [r5, #0]
 8025694:	920a      	str	r2, [sp, #40]	; 0x28
 8025696:	b2a2      	uxth	r2, r4
 8025698:	9423      	str	r4, [sp, #140]	; 0x8c
 802569a:	9511      	str	r5, [sp, #68]	; 0x44
 802569c:	9216      	str	r2, [sp, #88]	; 0x58
 802569e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80256a0:	2a00      	cmp	r2, #0
 80256a2:	dc02      	bgt.n	80256aa <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80256a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80256a6:	2a00      	cmp	r2, #0
 80256a8:	dd65      	ble.n	8025776 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80256aa:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80256ac:	2b00      	cmp	r3, #0
 80256ae:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 80256b2:	b235      	sxth	r5, r6
 80256b4:	fa0f f88c 	sxth.w	r8, ip
 80256b8:	f340 838b 	ble.w	8025dd2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79a>
 80256bc:	1e6c      	subs	r4, r5, #1
 80256be:	f108 3eff 	add.w	lr, r8, #4294967295
 80256c2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80256c6:	e9dd cb3d 	ldrd	ip, fp, [sp, #244]	; 0xf4
 80256ca:	ea5f 422a 	movs.w	r2, sl, asr #16
 80256ce:	ea4f 4127 	mov.w	r1, r7, asr #16
 80256d2:	d405      	bmi.n	80256e0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80256d4:	42a2      	cmp	r2, r4
 80256d6:	da03      	bge.n	80256e0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80256d8:	2900      	cmp	r1, #0
 80256da:	db01      	blt.n	80256e0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80256dc:	4571      	cmp	r1, lr
 80256de:	db4f      	blt.n	8025780 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80256e0:	1c50      	adds	r0, r2, #1
 80256e2:	d406      	bmi.n	80256f2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80256e4:	42a8      	cmp	r0, r5
 80256e6:	dc04      	bgt.n	80256f2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80256e8:	1c48      	adds	r0, r1, #1
 80256ea:	d402      	bmi.n	80256f2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80256ec:	4540      	cmp	r0, r8
 80256ee:	f340 834c 	ble.w	8025d8a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 80256f2:	3b01      	subs	r3, #1
 80256f4:	44e2      	add	sl, ip
 80256f6:	445f      	add	r7, fp
 80256f8:	f109 0903 	add.w	r9, r9, #3
 80256fc:	d1e5      	bne.n	80256ca <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80256fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025700:	2b00      	cmp	r3, #0
 8025702:	dd38      	ble.n	8025776 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8025704:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025708:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802570c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025710:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025714:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025718:	ee29 6aa7 	vmul.f32	s12, s19, s15
 802571c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025720:	ee76 6a68 	vsub.f32	s13, s12, s17
 8025724:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8025728:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802572c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8025730:	ee16 2a90 	vmov	r2, s13
 8025734:	3b01      	subs	r3, #1
 8025736:	9314      	str	r3, [sp, #80]	; 0x50
 8025738:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802573a:	fb92 f3f3 	sdiv	r3, r2, r3
 802573e:	ee17 2a10 	vmov	r2, s14
 8025742:	eeb0 7a48 	vmov.f32	s14, s16
 8025746:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802574a:	ee17 7a10 	vmov	r7, s14
 802574e:	eeb0 7a68 	vmov.f32	s14, s17
 8025752:	933d      	str	r3, [sp, #244]	; 0xf4
 8025754:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8025756:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802575a:	fb92 f3f3 	sdiv	r3, r2, r3
 802575e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8025760:	933e      	str	r3, [sp, #248]	; 0xf8
 8025762:	ee17 aa10 	vmov	sl, s14
 8025766:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8025768:	eeb0 8a67 	vmov.f32	s16, s15
 802576c:	eef0 8a46 	vmov.f32	s17, s12
 8025770:	bf08      	it	eq
 8025772:	4613      	moveq	r3, r2
 8025774:	e793      	b.n	802569e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8025776:	b029      	add	sp, #164	; 0xa4
 8025778:	ecbd 8b08 	vpop	{d8-d11}
 802577c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025780:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8025784:	983d      	ldr	r0, [sp, #244]	; 0xf4
 8025786:	1e59      	subs	r1, r3, #1
 8025788:	fb00 a201 	mla	r2, r0, r1, sl
 802578c:	1412      	asrs	r2, r2, #16
 802578e:	9109      	str	r1, [sp, #36]	; 0x24
 8025790:	f100 8168 	bmi.w	8025a64 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 8025794:	42a2      	cmp	r2, r4
 8025796:	f280 8165 	bge.w	8025a64 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 802579a:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 802579c:	fb02 7201 	mla	r2, r2, r1, r7
 80257a0:	1412      	asrs	r2, r2, #16
 80257a2:	f100 815f 	bmi.w	8025a64 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 80257a6:	f108 31ff 	add.w	r1, r8, #4294967295
 80257aa:	428a      	cmp	r2, r1
 80257ac:	f280 815a 	bge.w	8025a64 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 80257b0:	2b00      	cmp	r3, #0
 80257b2:	dda4      	ble.n	80256fe <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80257b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80257b8:	444b      	add	r3, r9
 80257ba:	9310      	str	r3, [sp, #64]	; 0x40
 80257bc:	f109 0303 	add.w	r3, r9, #3
 80257c0:	9309      	str	r3, [sp, #36]	; 0x24
 80257c2:	46d1      	mov	r9, sl
 80257c4:	973c      	str	r7, [sp, #240]	; 0xf0
 80257c6:	462e      	mov	r6, r5
 80257c8:	463b      	mov	r3, r7
 80257ca:	e12b      	b.n	8025a24 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80257cc:	785f      	ldrb	r7, [r3, #1]
 80257ce:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 80257d2:	9712      	str	r7, [sp, #72]	; 0x48
 80257d4:	0e3f      	lsrs	r7, r7, #24
 80257d6:	970b      	str	r7, [sp, #44]	; 0x2c
 80257d8:	b16a      	cbz	r2, 80257f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80257da:	199f      	adds	r7, r3, r6
 80257dc:	5d9b      	ldrb	r3, [r3, r6]
 80257de:	4626      	mov	r6, r4
 80257e0:	787f      	ldrb	r7, [r7, #1]
 80257e2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80257e6:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
 80257ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80257ec:	9415      	str	r4, [sp, #84]	; 0x54
 80257ee:	0e1b      	lsrs	r3, r3, #24
 80257f0:	0e24      	lsrs	r4, r4, #24
 80257f2:	940d      	str	r4, [sp, #52]	; 0x34
 80257f4:	930c      	str	r3, [sp, #48]	; 0x30
 80257f6:	fa1f fc81 	uxth.w	ip, r1
 80257fa:	b292      	uxth	r2, r2
 80257fc:	fb0c f602 	mul.w	r6, ip, r2
 8025800:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8025804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025806:	ebac 0706 	sub.w	r7, ip, r6
 802580a:	b2bf      	uxth	r7, r7
 802580c:	fb07 f103 	mul.w	r1, r7, r3
 8025810:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8025814:	b292      	uxth	r2, r2
 8025816:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 802581a:	1a9b      	subs	r3, r3, r2
 802581c:	b29b      	uxth	r3, r3
 802581e:	fb03 1100 	mla	r1, r3, r0, r1
 8025822:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025824:	fb02 1104 	mla	r1, r2, r4, r1
 8025828:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802582a:	fb06 1104 	mla	r1, r6, r4, r1
 802582e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025832:	2900      	cmp	r1, #0
 8025834:	f000 80e5 	beq.w	8025a02 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8025838:	f005 14ff 	and.w	r4, r5, #16711935	; 0xff00ff
 802583c:	28ff      	cmp	r0, #255	; 0xff
 802583e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025842:	940e      	str	r4, [sp, #56]	; 0x38
 8025844:	950f      	str	r5, [sp, #60]	; 0x3c
 8025846:	d01d      	beq.n	8025884 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 8025848:	fb04 fe00 	mul.w	lr, r4, r0
 802584c:	fb05 f800 	mul.w	r8, r5, r0
 8025850:	ea4f 251e 	mov.w	r5, lr, lsr #8
 8025854:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025858:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802585c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8025860:	44ae      	add	lr, r5
 8025862:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025866:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802586a:	0a00      	lsrs	r0, r0, #8
 802586c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025870:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025874:	ea4e 0e00 	orr.w	lr, lr, r0
 8025878:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 802587c:	900e      	str	r0, [sp, #56]	; 0x38
 802587e:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 8025882:	900f      	str	r0, [sp, #60]	; 0x3c
 8025884:	9812      	ldr	r0, [sp, #72]	; 0x48
 8025886:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 802588a:	f400 487f 	and.w	r8, r0, #65280	; 0xff00
 802588e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025890:	28ff      	cmp	r0, #255	; 0xff
 8025892:	d01c      	beq.n	80258ce <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8025894:	fb0e fe00 	mul.w	lr, lr, r0
 8025898:	fb08 f800 	mul.w	r8, r8, r0
 802589c:	ea4f 251e 	mov.w	r5, lr, lsr #8
 80258a0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80258a4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80258a8:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80258ac:	44ae      	add	lr, r5
 80258ae:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 80258b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80258b6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80258ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80258be:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80258c2:	ea4e 0808 	orr.w	r8, lr, r8
 80258c6:	f008 1eff 	and.w	lr, r8, #16711935	; 0xff00ff
 80258ca:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80258ce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80258d0:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 80258d4:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 80258d8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80258da:	28ff      	cmp	r0, #255	; 0xff
 80258dc:	d01c      	beq.n	8025918 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80258de:	fb0c fc00 	mul.w	ip, ip, r0
 80258e2:	fb0a fa00 	mul.w	sl, sl, r0
 80258e6:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80258ea:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80258ee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80258f2:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80258f6:	44ac      	add	ip, r5
 80258f8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80258fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025900:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025904:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025908:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802590c:	ea4c 0a0a 	orr.w	sl, ip, sl
 8025910:	f00a 1cff 	and.w	ip, sl, #16711935	; 0xff00ff
 8025914:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025918:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802591a:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 802591e:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8025922:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025924:	2cff      	cmp	r4, #255	; 0xff
 8025926:	d019      	beq.n	802595c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8025928:	fb00 f004 	mul.w	r0, r0, r4
 802592c:	fb0b fb04 	mul.w	fp, fp, r4
 8025930:	0a05      	lsrs	r5, r0, #8
 8025932:	f005 14ff 	and.w	r4, r5, #16711935	; 0xff00ff
 8025936:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802593a:	f50b 7580 	add.w	r5, fp, #256	; 0x100
 802593e:	eb05 251b 	add.w	r5, r5, fp, lsr #8
 8025942:	4420      	add	r0, r4
 8025944:	0a00      	lsrs	r0, r0, #8
 8025946:	0a2d      	lsrs	r5, r5, #8
 8025948:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802594c:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8025950:	ea40 0b0b 	orr.w	fp, r0, fp
 8025954:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 8025958:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802595c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802595e:	fb0e fe07 	mul.w	lr, lr, r7
 8025962:	fb01 f104 	mul.w	r1, r1, r4
 8025966:	1c4d      	adds	r5, r1, #1
 8025968:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 802596c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025970:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025972:	fb08 f707 	mul.w	r7, r8, r7
 8025976:	fb05 ee03 	mla	lr, r5, r3, lr
 802597a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802597c:	fb0c ee02 	mla	lr, ip, r2, lr
 8025980:	fb05 7703 	mla	r7, r5, r3, r7
 8025984:	fb0a 7702 	mla	r7, sl, r2, r7
 8025988:	fb00 ee06 	mla	lr, r0, r6, lr
 802598c:	fb0b 7706 	mla	r7, fp, r6, r7
 8025990:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025992:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025996:	0a3f      	lsrs	r7, r7, #8
 8025998:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802599c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80259a0:	ea4e 0307 	orr.w	r3, lr, r7
 80259a4:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 80259a8:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80259ac:	b2c9      	uxtb	r1, r1
 80259ae:	fa5f fc83 	uxtb.w	ip, r3
 80259b2:	fb16 f601 	smulbb	r6, r6, r1
 80259b6:	fb17 f701 	smulbb	r7, r7, r1
 80259ba:	fb1c fc04 	smulbb	ip, ip, r4
 80259be:	f810 0c03 	ldrb.w	r0, [r0, #-3]
 80259c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80259c6:	0c1b      	lsrs	r3, r3, #16
 80259c8:	fb00 c101 	mla	r1, r0, r1, ip
 80259cc:	fb03 6304 	mla	r3, r3, r4, r6
 80259d0:	fb02 7204 	mla	r2, r2, r4, r7
 80259d4:	b289      	uxth	r1, r1
 80259d6:	b292      	uxth	r2, r2
 80259d8:	b29b      	uxth	r3, r3
 80259da:	f101 0e01 	add.w	lr, r1, #1
 80259de:	1c56      	adds	r6, r2, #1
 80259e0:	1c5d      	adds	r5, r3, #1
 80259e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80259e4:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 80259e8:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80259ec:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80259f0:	1209      	asrs	r1, r1, #8
 80259f2:	1212      	asrs	r2, r2, #8
 80259f4:	121b      	asrs	r3, r3, #8
 80259f6:	f800 1c03 	strb.w	r1, [r0, #-3]
 80259fa:	f800 2c02 	strb.w	r2, [r0, #-2]
 80259fe:	f800 3c01 	strb.w	r3, [r0, #-1]
 8025a02:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8025a04:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8025a06:	4499      	add	r9, r3
 8025a08:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8025a0a:	4413      	add	r3, r2
 8025a0c:	933c      	str	r3, [sp, #240]	; 0xf0
 8025a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025a10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025a12:	4293      	cmp	r3, r2
 8025a14:	d024      	beq.n	8025a60 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8025a16:	4613      	mov	r3, r2
 8025a18:	3303      	adds	r3, #3
 8025a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8025a1c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8025a1e:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8025a22:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8025a24:	ea4f 4229 	mov.w	r2, r9, asr #16
 8025a28:	141b      	asrs	r3, r3, #16
 8025a2a:	fb06 2303 	mla	r3, r6, r3, r2
 8025a2e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025a30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025a32:	5cc2      	ldrb	r2, [r0, r3]
 8025a34:	f3c9 3103 	ubfx	r1, r9, #12, #4
 8025a38:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 8025a3c:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8025a3e:	4403      	add	r3, r0
 8025a40:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8025a44:	0e28      	lsrs	r0, r5, #24
 8025a46:	2900      	cmp	r1, #0
 8025a48:	f47f aec0 	bne.w	80257cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x194>
 8025a4c:	2a00      	cmp	r2, #0
 8025a4e:	f43f aed2 	beq.w	80257f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025a52:	5d9b      	ldrb	r3, [r3, r6]
 8025a54:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8025a58:	9313      	str	r3, [sp, #76]	; 0x4c
 8025a5a:	0e1b      	lsrs	r3, r3, #24
 8025a5c:	930c      	str	r3, [sp, #48]	; 0x30
 8025a5e:	e6ca      	b.n	80257f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025a60:	4699      	mov	r9, r3
 8025a62:	e64c      	b.n	80256fe <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8025a64:	2b00      	cmp	r3, #0
 8025a66:	f77f ae4a 	ble.w	80256fe <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8025a6a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8025a6e:	ea4f 422a 	mov.w	r2, sl, asr #16
 8025a72:	1439      	asrs	r1, r7, #16
 8025a74:	2a00      	cmp	r2, #0
 8025a76:	46cb      	mov	fp, r9
 8025a78:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8025a7c:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8025a7e:	e9dd 953d 	ldrd	r9, r5, [sp, #244]	; 0xf4
 8025a82:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8025a86:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8025a8a:	f2c0 8154 	blt.w	8025d36 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8025a8e:	1e73      	subs	r3, r6, #1
 8025a90:	429a      	cmp	r2, r3
 8025a92:	f280 8150 	bge.w	8025d36 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8025a96:	2900      	cmp	r1, #0
 8025a98:	f2c0 814d 	blt.w	8025d36 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8025a9c:	f10c 33ff 	add.w	r3, ip, #4294967295
 8025aa0:	4299      	cmp	r1, r3
 8025aa2:	f280 8148 	bge.w	8025d36 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8025aa6:	b236      	sxth	r6, r6
 8025aa8:	fb01 2206 	mla	r2, r1, r6, r2
 8025aac:	9911      	ldr	r1, [sp, #68]	; 0x44
 8025aae:	5c8b      	ldrb	r3, [r1, r2]
 8025ab0:	440a      	add	r2, r1
 8025ab2:	9210      	str	r2, [sp, #64]	; 0x40
 8025ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025aba:	930e      	str	r3, [sp, #56]	; 0x38
 8025abc:	0e1b      	lsrs	r3, r3, #24
 8025abe:	2800      	cmp	r0, #0
 8025ac0:	f000 8169 	beq.w	8025d96 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8025ac4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8025ac6:	f891 c001 	ldrb.w	ip, [r1, #1]
 8025aca:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8025ace:	9224      	str	r2, [sp, #144]	; 0x90
 8025ad0:	0e12      	lsrs	r2, r2, #24
 8025ad2:	9218      	str	r2, [sp, #96]	; 0x60
 8025ad4:	f1be 0f00 	cmp.w	lr, #0
 8025ad8:	f040 816a 	bne.w	8025db0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>
 8025adc:	b280      	uxth	r0, r0
 8025ade:	fa1f fc8e 	uxth.w	ip, lr
 8025ae2:	fb00 f20c 	mul.w	r2, r0, ip
 8025ae6:	4611      	mov	r1, r2
 8025ae8:	0106      	lsls	r6, r0, #4
 8025aea:	1ab0      	subs	r0, r6, r2
 8025aec:	9210      	str	r2, [sp, #64]	; 0x40
 8025aee:	b282      	uxth	r2, r0
 8025af0:	9818      	ldr	r0, [sp, #96]	; 0x60
 8025af2:	ebc1 1c0c 	rsb	ip, r1, ip, lsl #4
 8025af6:	fb02 f000 	mul.w	r0, r2, r0
 8025afa:	921b      	str	r2, [sp, #108]	; 0x6c
 8025afc:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 8025b00:	fa1f f28c 	uxth.w	r2, ip
 8025b04:	1ab6      	subs	r6, r6, r2
 8025b06:	b2b6      	uxth	r6, r6
 8025b08:	fb06 0c03 	mla	ip, r6, r3, r0
 8025b0c:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025b0e:	921c      	str	r2, [sp, #112]	; 0x70
 8025b10:	fb02 cc00 	mla	ip, r2, r0, ip
 8025b14:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8025b16:	961d      	str	r6, [sp, #116]	; 0x74
 8025b18:	fb01 cc02 	mla	ip, r1, r2, ip
 8025b1c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8025b20:	f1bc 0f00 	cmp.w	ip, #0
 8025b24:	f000 80f1 	beq.w	8025d0a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8025b28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025b2a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025b2c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025b30:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8025b34:	2bff      	cmp	r3, #255	; 0xff
 8025b36:	921e      	str	r2, [sp, #120]	; 0x78
 8025b38:	910e      	str	r1, [sp, #56]	; 0x38
 8025b3a:	d01b      	beq.n	8025b74 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8025b3c:	fb01 f103 	mul.w	r1, r1, r3
 8025b40:	fb02 f203 	mul.w	r2, r2, r3
 8025b44:	460b      	mov	r3, r1
 8025b46:	0a11      	lsrs	r1, r2, #8
 8025b48:	f102 1601 	add.w	r6, r2, #65537	; 0x10001
 8025b4c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025b50:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8025b54:	4431      	add	r1, r6
 8025b56:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025b5a:	0a09      	lsrs	r1, r1, #8
 8025b5c:	0a1b      	lsrs	r3, r3, #8
 8025b5e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025b62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025b66:	430b      	orrs	r3, r1
 8025b68:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8025b6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025b70:	921e      	str	r2, [sp, #120]	; 0x78
 8025b72:	930e      	str	r3, [sp, #56]	; 0x38
 8025b74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8025b76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025b78:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025b7c:	29ff      	cmp	r1, #255	; 0xff
 8025b7e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025b82:	931f      	str	r3, [sp, #124]	; 0x7c
 8025b84:	9220      	str	r2, [sp, #128]	; 0x80
 8025b86:	d01b      	beq.n	8025bc0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8025b88:	fb03 f301 	mul.w	r3, r3, r1
 8025b8c:	fb02 f201 	mul.w	r2, r2, r1
 8025b90:	0a19      	lsrs	r1, r3, #8
 8025b92:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8025b96:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025b9a:	f502 7380 	add.w	r3, r2, #256	; 0x100
 8025b9e:	4401      	add	r1, r0
 8025ba0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025ba4:	0a09      	lsrs	r1, r1, #8
 8025ba6:	0a1b      	lsrs	r3, r3, #8
 8025ba8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025bac:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025bb0:	ea41 0003 	orr.w	r0, r1, r3
 8025bb4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8025bb8:	931f      	str	r3, [sp, #124]	; 0x7c
 8025bba:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8025bbe:	9320      	str	r3, [sp, #128]	; 0x80
 8025bc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025bc2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8025bc4:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8025bc8:	2aff      	cmp	r2, #255	; 0xff
 8025bca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025bce:	9321      	str	r3, [sp, #132]	; 0x84
 8025bd0:	d01a      	beq.n	8025c08 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d0>
 8025bd2:	fb03 f302 	mul.w	r3, r3, r2
 8025bd6:	4618      	mov	r0, r3
 8025bd8:	fb06 f602 	mul.w	r6, r6, r2
 8025bdc:	0a31      	lsrs	r1, r6, #8
 8025bde:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025be2:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8025be6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8025bea:	440e      	add	r6, r1
 8025bec:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025bf0:	0a36      	lsrs	r6, r6, #8
 8025bf2:	0a1b      	lsrs	r3, r3, #8
 8025bf4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025bf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025bfc:	4333      	orrs	r3, r6
 8025bfe:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8025c02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025c06:	9321      	str	r3, [sp, #132]	; 0x84
 8025c08:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8025c0a:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025c0e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8025c12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8025c14:	2aff      	cmp	r2, #255	; 0xff
 8025c16:	d01a      	beq.n	8025c4e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x616>
 8025c18:	fb03 f302 	mul.w	r3, r3, r2
 8025c1c:	fb0e fe02 	mul.w	lr, lr, r2
 8025c20:	0a19      	lsrs	r1, r3, #8
 8025c22:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8025c26:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025c2a:	f50e 7380 	add.w	r3, lr, #256	; 0x100
 8025c2e:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8025c32:	4401      	add	r1, r0
 8025c34:	0a09      	lsrs	r1, r1, #8
 8025c36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025c3a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025c3e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025c42:	ea41 0e0e 	orr.w	lr, r1, lr
 8025c46:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8025c4a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025c4e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8025c50:	fb0c f102 	mul.w	r1, ip, r2
 8025c54:	1c48      	adds	r0, r1, #1
 8025c56:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8025c5a:	ea6f 2211 	mvn.w	r2, r1, lsr #8
 8025c5e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025c60:	9225      	str	r2, [sp, #148]	; 0x94
 8025c62:	4684      	mov	ip, r0
 8025c64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8025c66:	9820      	ldr	r0, [sp, #128]	; 0x80
 8025c68:	fb0c fc02 	mul.w	ip, ip, r2
 8025c6c:	fb00 f002 	mul.w	r0, r0, r2
 8025c70:	4601      	mov	r1, r0
 8025c72:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8025c74:	981e      	ldr	r0, [sp, #120]	; 0x78
 8025c76:	fb00 cc02 	mla	ip, r0, r2, ip
 8025c7a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8025c7c:	fb00 1102 	mla	r1, r0, r2, r1
 8025c80:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8025c82:	9821      	ldr	r0, [sp, #132]	; 0x84
 8025c84:	fb06 c602 	mla	r6, r6, r2, ip
 8025c88:	fb00 1002 	mla	r0, r0, r2, r1
 8025c8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025c8e:	f89d 1094 	ldrb.w	r1, [sp, #148]	; 0x94
 8025c92:	fb03 6602 	mla	r6, r3, r2, r6
 8025c96:	fb0e 0302 	mla	r3, lr, r2, r0
 8025c9a:	0a32      	lsrs	r2, r6, #8
 8025c9c:	0a1b      	lsrs	r3, r3, #8
 8025c9e:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8025ca2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025ca6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025caa:	4313      	orrs	r3, r2
 8025cac:	fb16 f001 	smulbb	r0, r6, r1
 8025cb0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8025cb2:	fa5f fe83 	uxtb.w	lr, r3
 8025cb6:	fb1e fe02 	smulbb	lr, lr, r2
 8025cba:	f89b c001 	ldrb.w	ip, [fp, #1]
 8025cbe:	900e      	str	r0, [sp, #56]	; 0x38
 8025cc0:	f89b 0000 	ldrb.w	r0, [fp]
 8025cc4:	fb1c fc01 	smulbb	ip, ip, r1
 8025cc8:	fb00 e001 	mla	r0, r0, r1, lr
 8025ccc:	4611      	mov	r1, r2
 8025cce:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8025cd2:	fb06 c202 	mla	r2, r6, r2, ip
 8025cd6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8025cd8:	0c1b      	lsrs	r3, r3, #16
 8025cda:	fb03 6301 	mla	r3, r3, r1, r6
 8025cde:	b280      	uxth	r0, r0
 8025ce0:	b296      	uxth	r6, r2
 8025ce2:	b29b      	uxth	r3, r3
 8025ce4:	1c5a      	adds	r2, r3, #1
 8025ce6:	f100 0c01 	add.w	ip, r0, #1
 8025cea:	1c71      	adds	r1, r6, #1
 8025cec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025cf0:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8025cf4:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8025cf8:	1200      	asrs	r0, r0, #8
 8025cfa:	120a      	asrs	r2, r1, #8
 8025cfc:	121b      	asrs	r3, r3, #8
 8025cfe:	f88b 0000 	strb.w	r0, [fp]
 8025d02:	f88b 2001 	strb.w	r2, [fp, #1]
 8025d06:	f88b 3002 	strb.w	r3, [fp, #2]
 8025d0a:	f1b8 0f00 	cmp.w	r8, #0
 8025d0e:	f10b 0b03 	add.w	fp, fp, #3
 8025d12:	44ca      	add	sl, r9
 8025d14:	442f      	add	r7, r5
 8025d16:	dd2e      	ble.n	8025d76 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73e>
 8025d18:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8025d1c:	ea4f 422a 	mov.w	r2, sl, asr #16
 8025d20:	2a00      	cmp	r2, #0
 8025d22:	f108 38ff 	add.w	r8, r8, #4294967295
 8025d26:	ea4f 4127 	mov.w	r1, r7, asr #16
 8025d2a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8025d2e:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8025d32:	f6bf aeac 	bge.w	8025a8e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8025d36:	1c53      	adds	r3, r2, #1
 8025d38:	d4e7      	bmi.n	8025d0a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8025d3a:	42b3      	cmp	r3, r6
 8025d3c:	dce5      	bgt.n	8025d0a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8025d3e:	1c4b      	adds	r3, r1, #1
 8025d40:	d4e3      	bmi.n	8025d0a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8025d42:	4563      	cmp	r3, ip
 8025d44:	dce1      	bgt.n	8025d0a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8025d46:	fa0f f38c 	sxth.w	r3, ip
 8025d4a:	b236      	sxth	r6, r6
 8025d4c:	e9cd 6300 	strd	r6, r3, [sp]
 8025d50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025d52:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8025d56:	e9cd e305 	strd	lr, r3, [sp, #20]
 8025d5a:	9202      	str	r2, [sp, #8]
 8025d5c:	4659      	mov	r1, fp
 8025d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025d60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025d62:	9822      	ldr	r0, [sp, #136]	; 0x88
 8025d64:	f7ff faf2 	bl	802534c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8025d68:	f1b8 0f00 	cmp.w	r8, #0
 8025d6c:	f10b 0b03 	add.w	fp, fp, #3
 8025d70:	44ca      	add	sl, r9
 8025d72:	442f      	add	r7, r5
 8025d74:	dcd0      	bgt.n	8025d18 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8025d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d78:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8025d7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025d80:	3301      	adds	r3, #1
 8025d82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025d86:	4499      	add	r9, r3
 8025d88:	e4b9      	b.n	80256fe <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8025d8a:	3b01      	subs	r3, #1
 8025d8c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8025d90:	4698      	mov	r8, r3
 8025d92:	9309      	str	r3, [sp, #36]	; 0x24
 8025d94:	e66e      	b.n	8025a74 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8025d96:	f1be 0f00 	cmp.w	lr, #0
 8025d9a:	f43f ae9f 	beq.w	8025adc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8025d9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025da0:	5d92      	ldrb	r2, [r2, r6]
 8025da2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8025da4:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8025da8:	9226      	str	r2, [sp, #152]	; 0x98
 8025daa:	0e12      	lsrs	r2, r2, #24
 8025dac:	9219      	str	r2, [sp, #100]	; 0x64
 8025dae:	e695      	b.n	8025adc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8025db0:	eb01 0c06 	add.w	ip, r1, r6
 8025db4:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025db8:	5d89      	ldrb	r1, [r1, r6]
 8025dba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8025dbc:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 8025dc0:	f856 6021 	ldr.w	r6, [r6, r1, lsl #2]
 8025dc4:	9227      	str	r2, [sp, #156]	; 0x9c
 8025dc6:	0e12      	lsrs	r2, r2, #24
 8025dc8:	921a      	str	r2, [sp, #104]	; 0x68
 8025dca:	0e32      	lsrs	r2, r6, #24
 8025dcc:	9626      	str	r6, [sp, #152]	; 0x98
 8025dce:	9219      	str	r2, [sp, #100]	; 0x64
 8025dd0:	e684      	b.n	8025adc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8025dd2:	f43f ac94 	beq.w	80256fe <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8025dd6:	1e6c      	subs	r4, r5, #1
 8025dd8:	e4d4      	b.n	8025784 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8025dda:	bf00      	nop

08025ddc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8025ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025de0:	b089      	sub	sp, #36	; 0x24
 8025de2:	f9bd b048 	ldrsh.w	fp, [sp, #72]	; 0x48
 8025de6:	e9dd 4014 	ldrd	r4, r0, [sp, #80]	; 0x50
 8025dea:	fb00 450b 	mla	r5, r0, fp, r4
 8025dee:	2800      	cmp	r0, #0
 8025df0:	4694      	mov	ip, r2
 8025df2:	f100 0601 	add.w	r6, r0, #1
 8025df6:	442a      	add	r2, r5
 8025df8:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8025dfc:	f89d a058 	ldrb.w	sl, [sp, #88]	; 0x58
 8025e00:	f89d 705c 	ldrb.w	r7, [sp, #92]	; 0x5c
 8025e04:	db02      	blt.n	8025e0c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x30>
 8025e06:	4580      	cmp	r8, r0
 8025e08:	f300 810a 	bgt.w	8026020 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x244>
 8025e0c:	f04f 0c00 	mov.w	ip, #0
 8025e10:	46e6      	mov	lr, ip
 8025e12:	4665      	mov	r5, ip
 8025e14:	46e1      	mov	r9, ip
 8025e16:	2e00      	cmp	r6, #0
 8025e18:	db02      	blt.n	8025e20 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x44>
 8025e1a:	45b0      	cmp	r8, r6
 8025e1c:	f300 811a 	bgt.w	8026054 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x278>
 8025e20:	2400      	movs	r4, #0
 8025e22:	46a0      	mov	r8, r4
 8025e24:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8025e28:	f1ba 0f0f 	cmp.w	sl, #15
 8025e2c:	f200 8158 	bhi.w	80260e0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8025e30:	2f0f      	cmp	r7, #15
 8025e32:	f200 8155 	bhi.w	80260e0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8025e36:	b2ba      	uxth	r2, r7
 8025e38:	fa1f f38a 	uxth.w	r3, sl
 8025e3c:	fb02 f703 	mul.w	r7, r2, r3
 8025e40:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8025e44:	b292      	uxth	r2, r2
 8025e46:	fb02 fa08 	mul.w	sl, r2, r8
 8025e4a:	fb07 fb04 	mul.w	fp, r7, r4
 8025e4e:	011b      	lsls	r3, r3, #4
 8025e50:	1bd8      	subs	r0, r3, r7
 8025e52:	b280      	uxth	r0, r0
 8025e54:	9001      	str	r0, [sp, #4]
 8025e56:	fb00 f00c 	mul.w	r0, r0, ip
 8025e5a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8025e5e:	1a9b      	subs	r3, r3, r2
 8025e60:	b29b      	uxth	r3, r3
 8025e62:	fb03 000e 	mla	r0, r3, lr, r0
 8025e66:	4450      	add	r0, sl
 8025e68:	4458      	add	r0, fp
 8025e6a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025e6e:	9002      	str	r0, [sp, #8]
 8025e70:	2800      	cmp	r0, #0
 8025e72:	f000 80d2 	beq.w	802601a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8025e76:	f009 10ff 	and.w	r0, r9, #16711935	; 0xff00ff
 8025e7a:	f409 467f 	and.w	r6, r9, #65280	; 0xff00
 8025e7e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025e82:	9005      	str	r0, [sp, #20]
 8025e84:	9606      	str	r6, [sp, #24]
 8025e86:	d01e      	beq.n	8025ec6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xea>
 8025e88:	fb00 fb0e 	mul.w	fp, r0, lr
 8025e8c:	fb06 fe0e 	mul.w	lr, r6, lr
 8025e90:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8025e94:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025e98:	f50e 7a80 	add.w	sl, lr, #256	; 0x100
 8025e9c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025ea0:	4483      	add	fp, r0
 8025ea2:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8025ea6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025eaa:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 8025eae:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8025eb2:	f40a 4e7f 	and.w	lr, sl, #65280	; 0xff00
 8025eb6:	ea4b 0e0e 	orr.w	lr, fp, lr
 8025eba:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8025ebe:	9005      	str	r0, [sp, #20]
 8025ec0:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 8025ec4:	9006      	str	r0, [sp, #24]
 8025ec6:	f405 407f 	and.w	r0, r5, #65280	; 0xff00
 8025eca:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025ece:	f005 1aff 	and.w	sl, r5, #16711935	; 0xff00ff
 8025ed2:	9007      	str	r0, [sp, #28]
 8025ed4:	d01d      	beq.n	8025f12 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x136>
 8025ed6:	fb0a fa0c 	mul.w	sl, sl, ip
 8025eda:	fb00 f50c 	mul.w	r5, r0, ip
 8025ede:	ea4f 201a 	mov.w	r0, sl, lsr #8
 8025ee2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025ee6:	f505 7b80 	add.w	fp, r5, #256	; 0x100
 8025eea:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025eee:	4482      	add	sl, r0
 8025ef0:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025ef4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ef8:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8025efc:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8025f00:	f40b 457f 	and.w	r5, fp, #65280	; 0xff00
 8025f04:	ea4a 0505 	orr.w	r5, sl, r5
 8025f08:	f405 407f 	and.w	r0, r5, #65280	; 0xff00
 8025f0c:	f005 1aff 	and.w	sl, r5, #16711935	; 0xff00ff
 8025f10:	9007      	str	r0, [sp, #28]
 8025f12:	9803      	ldr	r0, [sp, #12]
 8025f14:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025f18:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8025f1c:	f400 467f 	and.w	r6, r0, #65280	; 0xff00
 8025f20:	d01b      	beq.n	8025f5a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x17e>
 8025f22:	fb09 f908 	mul.w	r9, r9, r8
 8025f26:	fb06 f608 	mul.w	r6, r6, r8
 8025f2a:	ea4f 2c19 	mov.w	ip, r9, lsr #8
 8025f2e:	f506 7080 	add.w	r0, r6, #256	; 0x100
 8025f32:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f36:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8025f3a:	eb00 2616 	add.w	r6, r0, r6, lsr #8
 8025f3e:	44e1      	add	r9, ip
 8025f40:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025f44:	0a30      	lsrs	r0, r6, #8
 8025f46:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8025f4a:	f400 467f 	and.w	r6, r0, #65280	; 0xff00
 8025f4e:	ea49 0606 	orr.w	r6, r9, r6
 8025f52:	f006 19ff 	and.w	r9, r6, #16711935	; 0xff00ff
 8025f56:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025f5a:	9d04      	ldr	r5, [sp, #16]
 8025f5c:	2cff      	cmp	r4, #255	; 0xff
 8025f5e:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8025f62:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8025f66:	d01a      	beq.n	8025f9e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1c2>
 8025f68:	fb00 f004 	mul.w	r0, r0, r4
 8025f6c:	fb0e f404 	mul.w	r4, lr, r4
 8025f70:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8025f74:	f504 7e80 	add.w	lr, r4, #256	; 0x100
 8025f78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f7c:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8025f80:	eb0e 2414 	add.w	r4, lr, r4, lsr #8
 8025f84:	4460      	add	r0, ip
 8025f86:	0a00      	lsrs	r0, r0, #8
 8025f88:	0a24      	lsrs	r4, r4, #8
 8025f8a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025f8e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025f92:	ea40 0e0e 	orr.w	lr, r0, lr
 8025f96:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8025f9a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025f9e:	9c02      	ldr	r4, [sp, #8]
 8025fa0:	9d07      	ldr	r5, [sp, #28]
 8025fa2:	ea6f 0c04 	mvn.w	ip, r4
 8025fa6:	9c01      	ldr	r4, [sp, #4]
 8025fa8:	fa5f fc8c 	uxtb.w	ip, ip
 8025fac:	fb0a fb04 	mul.w	fp, sl, r4
 8025fb0:	fb05 f504 	mul.w	r5, r5, r4
 8025fb4:	9c05      	ldr	r4, [sp, #20]
 8025fb6:	fb04 bb03 	mla	fp, r4, r3, fp
 8025fba:	9c06      	ldr	r4, [sp, #24]
 8025fbc:	fb09 b902 	mla	r9, r9, r2, fp
 8025fc0:	fb04 5303 	mla	r3, r4, r3, r5
 8025fc4:	fb06 3602 	mla	r6, r6, r2, r3
 8025fc8:	780c      	ldrb	r4, [r1, #0]
 8025fca:	fb00 9007 	mla	r0, r0, r7, r9
 8025fce:	784a      	ldrb	r2, [r1, #1]
 8025fd0:	fb0e 6707 	mla	r7, lr, r7, r6
 8025fd4:	788b      	ldrb	r3, [r1, #2]
 8025fd6:	fb02 f20c 	mul.w	r2, r2, ip
 8025fda:	fb03 f30c 	mul.w	r3, r3, ip
 8025fde:	fb04 fc0c 	mul.w	ip, r4, ip
 8025fe2:	0a00      	lsrs	r0, r0, #8
 8025fe4:	0a3f      	lsrs	r7, r7, #8
 8025fe6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025fea:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025fee:	4338      	orrs	r0, r7
 8025ff0:	1c54      	adds	r4, r2, #1
 8025ff2:	1c5f      	adds	r7, r3, #1
 8025ff4:	f10c 0601 	add.w	r6, ip, #1
 8025ff8:	0a05      	lsrs	r5, r0, #8
 8025ffa:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8025ffe:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8026002:	0c04      	lsrs	r4, r0, #16
 8026004:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8026008:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802600c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8026010:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8026014:	704a      	strb	r2, [r1, #1]
 8026016:	708b      	strb	r3, [r1, #2]
 8026018:	7008      	strb	r0, [r1, #0]
 802601a:	b009      	add	sp, #36	; 0x24
 802601c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026020:	2c00      	cmp	r4, #0
 8026022:	db01      	blt.n	8026028 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24c>
 8026024:	45a3      	cmp	fp, r4
 8026026:	dc41      	bgt.n	80260ac <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2d0>
 8026028:	f04f 0e00 	mov.w	lr, #0
 802602c:	46f1      	mov	r9, lr
 802602e:	1c60      	adds	r0, r4, #1
 8026030:	d42b      	bmi.n	802608a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ae>
 8026032:	4583      	cmp	fp, r0
 8026034:	dd29      	ble.n	802608a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ae>
 8026036:	f1ba 0f00 	cmp.w	sl, #0
 802603a:	d005      	beq.n	8026048 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x26c>
 802603c:	7850      	ldrb	r0, [r2, #1]
 802603e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8026042:	ea4f 6c15 	mov.w	ip, r5, lsr #24
 8026046:	e6e6      	b.n	8025e16 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3a>
 8026048:	2e00      	cmp	r6, #0
 802604a:	db42      	blt.n	80260d2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2f6>
 802604c:	45b0      	cmp	r8, r6
 802604e:	dd40      	ble.n	80260d2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2f6>
 8026050:	46d4      	mov	ip, sl
 8026052:	4655      	mov	r5, sl
 8026054:	b1ef      	cbz	r7, 8026092 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2b6>
 8026056:	2c00      	cmp	r4, #0
 8026058:	db32      	blt.n	80260c0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2e4>
 802605a:	45a3      	cmp	fp, r4
 802605c:	dd30      	ble.n	80260c0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2e4>
 802605e:	f812 000b 	ldrb.w	r0, [r2, fp]
 8026062:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8026066:	9003      	str	r0, [sp, #12]
 8026068:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802606c:	3401      	adds	r4, #1
 802606e:	d424      	bmi.n	80260ba <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2de>
 8026070:	45a3      	cmp	fp, r4
 8026072:	dd22      	ble.n	80260ba <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2de>
 8026074:	f1ba 0f00 	cmp.w	sl, #0
 8026078:	d027      	beq.n	80260ca <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ee>
 802607a:	4493      	add	fp, r2
 802607c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8026080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8026084:	9304      	str	r3, [sp, #16]
 8026086:	0e1c      	lsrs	r4, r3, #24
 8026088:	e6ce      	b.n	8025e28 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x4c>
 802608a:	f04f 0c00 	mov.w	ip, #0
 802608e:	4665      	mov	r5, ip
 8026090:	e6c1      	b.n	8025e16 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3a>
 8026092:	f1ba 0f0f 	cmp.w	sl, #15
 8026096:	d823      	bhi.n	80260e0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8026098:	fa1f f38a 	uxth.w	r3, sl
 802609c:	463a      	mov	r2, r7
 802609e:	46bb      	mov	fp, r7
 80260a0:	46ba      	mov	sl, r7
 80260a2:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80260a6:	463c      	mov	r4, r7
 80260a8:	46b8      	mov	r8, r7
 80260aa:	e6d0      	b.n	8025e4e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x72>
 80260ac:	f81c 0005 	ldrb.w	r0, [ip, r5]
 80260b0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 80260b4:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 80260b8:	e7b9      	b.n	802602e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 80260ba:	2400      	movs	r4, #0
 80260bc:	9404      	str	r4, [sp, #16]
 80260be:	e6b3      	b.n	8025e28 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x4c>
 80260c0:	f04f 0800 	mov.w	r8, #0
 80260c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80260c8:	e7d0      	b.n	802606c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>
 80260ca:	f8cd a010 	str.w	sl, [sp, #16]
 80260ce:	4654      	mov	r4, sl
 80260d0:	e6ae      	b.n	8025e30 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x54>
 80260d2:	4655      	mov	r5, sl
 80260d4:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80260d8:	4654      	mov	r4, sl
 80260da:	46d0      	mov	r8, sl
 80260dc:	46d4      	mov	ip, sl
 80260de:	e6a7      	b.n	8025e30 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x54>
 80260e0:	4b03      	ldr	r3, [pc, #12]	; (80260f0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x314>)
 80260e2:	4a04      	ldr	r2, [pc, #16]	; (80260f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x318>)
 80260e4:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80260e8:	4803      	ldr	r0, [pc, #12]	; (80260f8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x31c>)
 80260ea:	f001 fff5 	bl	80280d8 <__assert_func>
 80260ee:	bf00      	nop
 80260f0:	0802b350 	.word	0x0802b350
 80260f4:	0802b9c8 	.word	0x0802b9c8
 80260f8:	0802b4d4 	.word	0x0802b4d4

080260fc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80260fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026100:	ed2d 8b0a 	vpush	{d8-d12}
 8026104:	eeb0 aa40 	vmov.f32	s20, s0
 8026108:	eef0 9a60 	vmov.f32	s19, s1
 802610c:	eeb0 9a41 	vmov.f32	s18, s2
 8026110:	eef0 8a62 	vmov.f32	s17, s5
 8026114:	eeb0 8a43 	vmov.f32	s16, s6
 8026118:	eeb0 ca44 	vmov.f32	s24, s8
 802611c:	eef0 ba64 	vmov.f32	s23, s9
 8026120:	eeb0 ba45 	vmov.f32	s22, s10
 8026124:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8026128:	b0a3      	sub	sp, #140	; 0x8c
 802612a:	901e      	str	r0, [sp, #120]	; 0x78
 802612c:	9111      	str	r1, [sp, #68]	; 0x44
 802612e:	9213      	str	r2, [sp, #76]	; 0x4c
 8026130:	e9dd 413b 	ldrd	r4, r1, [sp, #236]	; 0xec
 8026134:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8026136:	6860      	ldr	r0, [r4, #4]
 8026138:	fb00 1b02 	mla	fp, r0, r2, r1
 802613c:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 802613e:	6821      	ldr	r1, [r4, #0]
 8026140:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8026142:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
 8026146:	6852      	ldr	r2, [r2, #4]
 8026148:	eb01 0800 	add.w	r8, r1, r0
 802614c:	6824      	ldr	r4, [r4, #0]
 802614e:	e9dd 7b37 	ldrd	r7, fp, [sp, #220]	; 0xdc
 8026152:	3204      	adds	r2, #4
 8026154:	46c3      	mov	fp, r8
 8026156:	46b8      	mov	r8, r7
 8026158:	9f38      	ldr	r7, [sp, #224]	; 0xe0
 802615a:	940e      	str	r4, [sp, #56]	; 0x38
 802615c:	920a      	str	r2, [sp, #40]	; 0x28
 802615e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026160:	2a00      	cmp	r2, #0
 8026162:	dc02      	bgt.n	802616a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026164:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8026166:	2a00      	cmp	r2, #0
 8026168:	dd63      	ble.n	8026232 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 802616a:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 802616c:	2b00      	cmp	r3, #0
 802616e:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8026172:	b234      	sxth	r4, r6
 8026174:	fa0f f98c 	sxth.w	r9, ip
 8026178:	f340 835f 	ble.w	802683a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73e>
 802617c:	1e65      	subs	r5, r4, #1
 802617e:	f109 3eff 	add.w	lr, r9, #4294967295
 8026182:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8026186:	e9dd ca39 	ldrd	ip, sl, [sp, #228]	; 0xe4
 802618a:	ea5f 4228 	movs.w	r2, r8, asr #16
 802618e:	ea4f 4127 	mov.w	r1, r7, asr #16
 8026192:	d405      	bmi.n	80261a0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8026194:	42aa      	cmp	r2, r5
 8026196:	da03      	bge.n	80261a0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8026198:	2900      	cmp	r1, #0
 802619a:	db01      	blt.n	80261a0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802619c:	4571      	cmp	r1, lr
 802619e:	db4d      	blt.n	802623c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80261a0:	1c50      	adds	r0, r2, #1
 80261a2:	d406      	bmi.n	80261b2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80261a4:	42a0      	cmp	r0, r4
 80261a6:	dc04      	bgt.n	80261b2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80261a8:	1c48      	adds	r0, r1, #1
 80261aa:	d402      	bmi.n	80261b2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80261ac:	4548      	cmp	r0, r9
 80261ae:	f340 831e 	ble.w	80267ee <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80261b2:	3b01      	subs	r3, #1
 80261b4:	44e0      	add	r8, ip
 80261b6:	4457      	add	r7, sl
 80261b8:	f10b 0b03 	add.w	fp, fp, #3
 80261bc:	d1e5      	bne.n	802618a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80261be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80261c0:	2b00      	cmp	r3, #0
 80261c2:	dd36      	ble.n	8026232 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80261c4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80261c8:	ee79 9aab 	vadd.f32	s19, s19, s23
 80261cc:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80261d0:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80261d4:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80261d8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80261dc:	ee76 6a68 	vsub.f32	s13, s12, s17
 80261e0:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80261e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80261e8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80261ec:	ee16 2a90 	vmov	r2, s13
 80261f0:	3b01      	subs	r3, #1
 80261f2:	9311      	str	r3, [sp, #68]	; 0x44
 80261f4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80261f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80261fa:	ee17 2a10 	vmov	r2, s14
 80261fe:	eeb0 7a48 	vmov.f32	s14, s16
 8026202:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026206:	ee17 7a10 	vmov	r7, s14
 802620a:	eeb0 7a68 	vmov.f32	s14, s17
 802620e:	9339      	str	r3, [sp, #228]	; 0xe4
 8026210:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8026212:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026216:	fb92 f3f3 	sdiv	r3, r2, r3
 802621a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802621c:	933a      	str	r3, [sp, #232]	; 0xe8
 802621e:	ee17 8a10 	vmov	r8, s14
 8026222:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8026224:	eeb0 8a67 	vmov.f32	s16, s15
 8026228:	eef0 8a46 	vmov.f32	s17, s12
 802622c:	bf08      	it	eq
 802622e:	4613      	moveq	r3, r2
 8026230:	e795      	b.n	802615e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8026232:	b023      	add	sp, #140	; 0x8c
 8026234:	ecbd 8b0a 	vpop	{d8-d12}
 8026238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802623c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8026240:	9839      	ldr	r0, [sp, #228]	; 0xe4
 8026242:	1e59      	subs	r1, r3, #1
 8026244:	fb00 8201 	mla	r2, r0, r1, r8
 8026248:	1412      	asrs	r2, r2, #16
 802624a:	9109      	str	r1, [sp, #36]	; 0x24
 802624c:	f100 8151 	bmi.w	80264f2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8026250:	42aa      	cmp	r2, r5
 8026252:	f280 814e 	bge.w	80264f2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8026256:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8026258:	fb02 7201 	mla	r2, r2, r1, r7
 802625c:	1412      	asrs	r2, r2, #16
 802625e:	f100 8148 	bmi.w	80264f2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8026262:	f109 31ff 	add.w	r1, r9, #4294967295
 8026266:	428a      	cmp	r2, r1
 8026268:	f280 8143 	bge.w	80264f2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 802626c:	2b00      	cmp	r3, #0
 802626e:	dda6      	ble.n	80261be <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8026270:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026274:	445b      	add	r3, fp
 8026276:	930d      	str	r3, [sp, #52]	; 0x34
 8026278:	f10b 0c03 	add.w	ip, fp, #3
 802627c:	46c1      	mov	r9, r8
 802627e:	9738      	str	r7, [sp, #224]	; 0xe0
 8026280:	4621      	mov	r1, r4
 8026282:	463b      	mov	r3, r7
 8026284:	e114      	b.n	80264b0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8026286:	f893 e001 	ldrb.w	lr, [r3, #1]
 802628a:	f856 502e 	ldr.w	r5, [r6, lr, lsl #2]
 802628e:	950f      	str	r5, [sp, #60]	; 0x3c
 8026290:	0e2d      	lsrs	r5, r5, #24
 8026292:	9506      	str	r5, [sp, #24]
 8026294:	b162      	cbz	r2, 80262b0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026296:	185d      	adds	r5, r3, r1
 8026298:	786d      	ldrb	r5, [r5, #1]
 802629a:	5c5b      	ldrb	r3, [r3, r1]
 802629c:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 80262a0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80262a4:	9112      	str	r1, [sp, #72]	; 0x48
 80262a6:	9310      	str	r3, [sp, #64]	; 0x40
 80262a8:	0e09      	lsrs	r1, r1, #24
 80262aa:	0e1b      	lsrs	r3, r3, #24
 80262ac:	9108      	str	r1, [sp, #32]
 80262ae:	9307      	str	r3, [sp, #28]
 80262b0:	b2a4      	uxth	r4, r4
 80262b2:	b292      	uxth	r2, r2
 80262b4:	fb04 f502 	mul.w	r5, r4, r2
 80262b8:	0124      	lsls	r4, r4, #4
 80262ba:	1b66      	subs	r6, r4, r5
 80262bc:	9b06      	ldr	r3, [sp, #24]
 80262be:	b2b6      	uxth	r6, r6
 80262c0:	fb06 f103 	mul.w	r1, r6, r3
 80262c4:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80262c8:	b292      	uxth	r2, r2
 80262ca:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 80262ce:	1a9b      	subs	r3, r3, r2
 80262d0:	b29b      	uxth	r3, r3
 80262d2:	fb03 1100 	mla	r1, r3, r0, r1
 80262d6:	9c07      	ldr	r4, [sp, #28]
 80262d8:	fb02 1104 	mla	r1, r2, r4, r1
 80262dc:	9c08      	ldr	r4, [sp, #32]
 80262de:	fb05 1104 	mla	r1, r5, r4, r1
 80262e2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80262e6:	9109      	str	r1, [sp, #36]	; 0x24
 80262e8:	2900      	cmp	r1, #0
 80262ea:	f000 80d2 	beq.w	8026492 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 80262ee:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 80262f2:	f407 417f 	and.w	r1, r7, #65280	; 0xff00
 80262f6:	28ff      	cmp	r0, #255	; 0xff
 80262f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80262fa:	910c      	str	r1, [sp, #48]	; 0x30
 80262fc:	d01b      	beq.n	8026336 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80262fe:	fb04 f400 	mul.w	r4, r4, r0
 8026302:	4627      	mov	r7, r4
 8026304:	fb01 fe00 	mul.w	lr, r1, r0
 8026308:	0a24      	lsrs	r4, r4, #8
 802630a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802630e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026312:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 8026316:	4427      	add	r7, r4
 8026318:	eb00 201e 	add.w	r0, r0, lr, lsr #8
 802631c:	0a3f      	lsrs	r7, r7, #8
 802631e:	0a00      	lsrs	r0, r0, #8
 8026320:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026324:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026328:	4307      	orrs	r7, r0
 802632a:	f007 11ff 	and.w	r1, r7, #16711935	; 0xff00ff
 802632e:	910b      	str	r1, [sp, #44]	; 0x2c
 8026330:	f407 417f 	and.w	r1, r7, #65280	; 0xff00
 8026334:	910c      	str	r1, [sp, #48]	; 0x30
 8026336:	9806      	ldr	r0, [sp, #24]
 8026338:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802633a:	28ff      	cmp	r0, #255	; 0xff
 802633c:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8026340:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8026344:	d01a      	beq.n	802637c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8026346:	fb07 f700 	mul.w	r7, r7, r0
 802634a:	fb0e fe00 	mul.w	lr, lr, r0
 802634e:	0a3c      	lsrs	r4, r7, #8
 8026350:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026354:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026358:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 802635c:	4427      	add	r7, r4
 802635e:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8026362:	0a3f      	lsrs	r7, r7, #8
 8026364:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026368:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802636c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026370:	ea47 0e0e 	orr.w	lr, r7, lr
 8026374:	f00e 17ff 	and.w	r7, lr, #16711935	; 0xff00ff
 8026378:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802637c:	9c07      	ldr	r4, [sp, #28]
 802637e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8026380:	2cff      	cmp	r4, #255	; 0xff
 8026382:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 8026386:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802638a:	d01b      	beq.n	80263c4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 802638c:	fb00 f004 	mul.w	r0, r0, r4
 8026390:	fb0a fa04 	mul.w	sl, sl, r4
 8026394:	ea4f 2810 	mov.w	r8, r0, lsr #8
 8026398:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802639c:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80263a0:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 80263a4:	4440      	add	r0, r8
 80263a6:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 80263aa:	0a00      	lsrs	r0, r0, #8
 80263ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80263b0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80263b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80263b8:	ea40 0a0a 	orr.w	sl, r0, sl
 80263bc:	f00a 10ff 	and.w	r0, sl, #16711935	; 0xff00ff
 80263c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80263c4:	9c08      	ldr	r4, [sp, #32]
 80263c6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80263c8:	2cff      	cmp	r4, #255	; 0xff
 80263ca:	f001 18ff 	and.w	r8, r1, #16711935	; 0xff00ff
 80263ce:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 80263d2:	d01b      	beq.n	802640c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80263d4:	fb08 f804 	mul.w	r8, r8, r4
 80263d8:	fb0b fb04 	mul.w	fp, fp, r4
 80263dc:	ea4f 2418 	mov.w	r4, r8, lsr #8
 80263e0:	f004 11ff 	and.w	r1, r4, #16711935	; 0xff00ff
 80263e4:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80263e8:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 80263ec:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 80263f0:	4488      	add	r8, r1
 80263f2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80263f6:	0a24      	lsrs	r4, r4, #8
 80263f8:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80263fc:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8026400:	ea48 0b0b 	orr.w	fp, r8, fp
 8026404:	f00b 18ff 	and.w	r8, fp, #16711935	; 0xff00ff
 8026408:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802640c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802640e:	fb07 f706 	mul.w	r7, r7, r6
 8026412:	43c9      	mvns	r1, r1
 8026414:	fb0e f606 	mul.w	r6, lr, r6
 8026418:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802641a:	f81c ec02 	ldrb.w	lr, [ip, #-2]
 802641e:	fb04 7703 	mla	r7, r4, r3, r7
 8026422:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026424:	fb00 7702 	mla	r7, r0, r2, r7
 8026428:	fb04 6603 	mla	r6, r4, r3, r6
 802642c:	fb0a 6602 	mla	r6, sl, r2, r6
 8026430:	f81c 3c03 	ldrb.w	r3, [ip, #-3]
 8026434:	fb0b 6b05 	mla	fp, fp, r5, r6
 8026438:	fb08 7805 	mla	r8, r8, r5, r7
 802643c:	f81c 4c01 	ldrb.w	r4, [ip, #-1]
 8026440:	b2c9      	uxtb	r1, r1
 8026442:	fb0e fe01 	mul.w	lr, lr, r1
 8026446:	fb04 f401 	mul.w	r4, r4, r1
 802644a:	fb03 f101 	mul.w	r1, r3, r1
 802644e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026452:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8026456:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802645a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802645e:	ea48 030b 	orr.w	r3, r8, fp
 8026462:	f10e 0201 	add.w	r2, lr, #1
 8026466:	1c66      	adds	r6, r4, #1
 8026468:	1c4d      	adds	r5, r1, #1
 802646a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 802646e:	0a18      	lsrs	r0, r3, #8
 8026470:	0c1a      	lsrs	r2, r3, #16
 8026472:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 8026476:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 802647a:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 802647e:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8026482:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026486:	f80c ec02 	strb.w	lr, [ip, #-2]
 802648a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 802648e:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8026492:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8026494:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8026496:	4499      	add	r9, r3
 8026498:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802649a:	4413      	add	r3, r2
 802649c:	9338      	str	r3, [sp, #224]	; 0xe0
 802649e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80264a0:	4563      	cmp	r3, ip
 80264a2:	d024      	beq.n	80264ee <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80264a4:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80264a6:	f10c 0c03 	add.w	ip, ip, #3
 80264aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80264ae:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80264b0:	ea4f 4229 	mov.w	r2, r9, asr #16
 80264b4:	141b      	asrs	r3, r3, #16
 80264b6:	fb01 2303 	mla	r3, r1, r3, r2
 80264ba:	980e      	ldr	r0, [sp, #56]	; 0x38
 80264bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80264be:	5cc2      	ldrb	r2, [r0, r3]
 80264c0:	f3c9 3403 	ubfx	r4, r9, #12, #4
 80264c4:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80264c8:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 80264ca:	4403      	add	r3, r0
 80264cc:	f3c2 3203 	ubfx	r2, r2, #12, #4
 80264d0:	0e38      	lsrs	r0, r7, #24
 80264d2:	2c00      	cmp	r4, #0
 80264d4:	f47f aed7 	bne.w	8026286 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80264d8:	2a00      	cmp	r2, #0
 80264da:	f43f aee9 	beq.w	80262b0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80264de:	5c5b      	ldrb	r3, [r3, r1]
 80264e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80264e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80264e6:	9310      	str	r3, [sp, #64]	; 0x40
 80264e8:	0e1b      	lsrs	r3, r3, #24
 80264ea:	9307      	str	r3, [sp, #28]
 80264ec:	e6e0      	b.n	80262b0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80264ee:	469b      	mov	fp, r3
 80264f0:	e665      	b.n	80261be <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80264f2:	2b00      	cmp	r3, #0
 80264f4:	f77f ae63 	ble.w	80261be <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80264f8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80264fc:	ea4f 4228 	mov.w	r2, r8, asr #16
 8026500:	1439      	asrs	r1, r7, #16
 8026502:	2a00      	cmp	r2, #0
 8026504:	46d9      	mov	r9, fp
 8026506:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 802650a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 802650c:	e9dd b539 	ldrd	fp, r5, [sp, #228]	; 0xe4
 8026510:	f3c8 3003 	ubfx	r0, r8, #12, #4
 8026514:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8026518:	f2c0 8141 	blt.w	802679e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 802651c:	1e73      	subs	r3, r6, #1
 802651e:	429a      	cmp	r2, r3
 8026520:	f280 813d 	bge.w	802679e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 8026524:	2900      	cmp	r1, #0
 8026526:	f2c0 813a 	blt.w	802679e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 802652a:	f10c 33ff 	add.w	r3, ip, #4294967295
 802652e:	4299      	cmp	r1, r3
 8026530:	f280 8135 	bge.w	802679e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 8026534:	b233      	sxth	r3, r6
 8026536:	fb01 2203 	mla	r2, r1, r3, r2
 802653a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802653c:	930c      	str	r3, [sp, #48]	; 0x30
 802653e:	5c8b      	ldrb	r3, [r1, r2]
 8026540:	440a      	add	r2, r1
 8026542:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026544:	4616      	mov	r6, r2
 8026546:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802654a:	930d      	str	r3, [sp, #52]	; 0x34
 802654c:	0e1b      	lsrs	r3, r3, #24
 802654e:	2800      	cmp	r0, #0
 8026550:	f000 8153 	beq.w	80267fa <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8026554:	f896 c001 	ldrb.w	ip, [r6, #1]
 8026558:	f851 202c 	ldr.w	r2, [r1, ip, lsl #2]
 802655c:	921f      	str	r2, [sp, #124]	; 0x7c
 802655e:	0e12      	lsrs	r2, r2, #24
 8026560:	9214      	str	r2, [sp, #80]	; 0x50
 8026562:	f1be 0f00 	cmp.w	lr, #0
 8026566:	f040 8155 	bne.w	8026814 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802656a:	b280      	uxth	r0, r0
 802656c:	fa1f fc8e 	uxth.w	ip, lr
 8026570:	fb00 f20c 	mul.w	r2, r0, ip
 8026574:	0106      	lsls	r6, r0, #4
 8026576:	1ab0      	subs	r0, r6, r2
 8026578:	b281      	uxth	r1, r0
 802657a:	9814      	ldr	r0, [sp, #80]	; 0x50
 802657c:	ebc2 1c0c 	rsb	ip, r2, ip, lsl #4
 8026580:	fb01 f000 	mul.w	r0, r1, r0
 8026584:	9117      	str	r1, [sp, #92]	; 0x5c
 8026586:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 802658a:	fa1f f18c 	uxth.w	r1, ip
 802658e:	1a76      	subs	r6, r6, r1
 8026590:	b2b6      	uxth	r6, r6
 8026592:	9619      	str	r6, [sp, #100]	; 0x64
 8026594:	fb06 0603 	mla	r6, r6, r3, r0
 8026598:	9815      	ldr	r0, [sp, #84]	; 0x54
 802659a:	9118      	str	r1, [sp, #96]	; 0x60
 802659c:	fb01 6600 	mla	r6, r1, r0, r6
 80265a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80265a2:	fb02 6601 	mla	r6, r2, r1, r6
 80265a6:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80265aa:	911a      	str	r1, [sp, #104]	; 0x68
 80265ac:	2900      	cmp	r1, #0
 80265ae:	f000 80e0 	beq.w	8026772 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 80265b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80265b4:	2bff      	cmp	r3, #255	; 0xff
 80265b6:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
 80265ba:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80265be:	910d      	str	r1, [sp, #52]	; 0x34
 80265c0:	901b      	str	r0, [sp, #108]	; 0x6c
 80265c2:	d01c      	beq.n	80265fe <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 80265c4:	fb01 f103 	mul.w	r1, r1, r3
 80265c8:	fb00 f003 	mul.w	r0, r0, r3
 80265cc:	460e      	mov	r6, r1
 80265ce:	4603      	mov	r3, r0
 80265d0:	0a09      	lsrs	r1, r1, #8
 80265d2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80265d6:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80265da:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80265de:	4431      	add	r1, r6
 80265e0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80265e4:	0a09      	lsrs	r1, r1, #8
 80265e6:	0a1b      	lsrs	r3, r3, #8
 80265e8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80265ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80265f0:	430b      	orrs	r3, r1
 80265f2:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 80265f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80265fa:	910d      	str	r1, [sp, #52]	; 0x34
 80265fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80265fe:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8026600:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8026604:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 8026608:	9914      	ldr	r1, [sp, #80]	; 0x50
 802660a:	931c      	str	r3, [sp, #112]	; 0x70
 802660c:	29ff      	cmp	r1, #255	; 0xff
 802660e:	d019      	beq.n	8026644 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8026610:	fb03 f301 	mul.w	r3, r3, r1
 8026614:	fb06 f601 	mul.w	r6, r6, r1
 8026618:	0a19      	lsrs	r1, r3, #8
 802661a:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 802661e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026622:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8026626:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 802662a:	4401      	add	r1, r0
 802662c:	0a09      	lsrs	r1, r1, #8
 802662e:	0a1b      	lsrs	r3, r3, #8
 8026630:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026634:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026638:	4319      	orrs	r1, r3
 802663a:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 802663e:	931c      	str	r3, [sp, #112]	; 0x70
 8026640:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 8026644:	9920      	ldr	r1, [sp, #128]	; 0x80
 8026646:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 802664a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802664e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8026650:	930c      	str	r3, [sp, #48]	; 0x30
 8026652:	29ff      	cmp	r1, #255	; 0xff
 8026654:	901d      	str	r0, [sp, #116]	; 0x74
 8026656:	d01a      	beq.n	802668e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x592>
 8026658:	fb03 f301 	mul.w	r3, r3, r1
 802665c:	fb00 fc01 	mul.w	ip, r0, r1
 8026660:	0a19      	lsrs	r1, r3, #8
 8026662:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8026666:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802666a:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 802666e:	4401      	add	r1, r0
 8026670:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8026674:	0a09      	lsrs	r1, r1, #8
 8026676:	0a1b      	lsrs	r3, r3, #8
 8026678:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802667c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026680:	4319      	orrs	r1, r3
 8026682:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8026686:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802668a:	930c      	str	r3, [sp, #48]	; 0x30
 802668c:	911d      	str	r1, [sp, #116]	; 0x74
 802668e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8026690:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8026694:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8026698:	9916      	ldr	r1, [sp, #88]	; 0x58
 802669a:	29ff      	cmp	r1, #255	; 0xff
 802669c:	d01c      	beq.n	80266d8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 802669e:	fb0c fc01 	mul.w	ip, ip, r1
 80266a2:	fb0e fe01 	mul.w	lr, lr, r1
 80266a6:	ea4f 201c 	mov.w	r0, ip, lsr #8
 80266aa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80266ae:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80266b2:	f50e 7180 	add.w	r1, lr, #256	; 0x100
 80266b6:	4484      	add	ip, r0
 80266b8:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80266bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80266c0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80266c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80266c8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80266cc:	ea4c 0e0e 	orr.w	lr, ip, lr
 80266d0:	f00e 1cff 	and.w	ip, lr, #16711935	; 0xff00ff
 80266d4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80266d8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80266da:	981c      	ldr	r0, [sp, #112]	; 0x70
 80266dc:	43c9      	mvns	r1, r1
 80266de:	911a      	str	r1, [sp, #104]	; 0x68
 80266e0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80266e2:	fb00 f001 	mul.w	r0, r0, r1
 80266e6:	fb06 f301 	mul.w	r3, r6, r1
 80266ea:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80266ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80266ee:	fb01 0006 	mla	r0, r1, r6, r0
 80266f2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80266f4:	fb01 3106 	mla	r1, r1, r6, r3
 80266f8:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80266fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80266fc:	910d      	str	r1, [sp, #52]	; 0x34
 80266fe:	fb03 0306 	mla	r3, r3, r6, r0
 8026702:	990d      	ldr	r1, [sp, #52]	; 0x34
 8026704:	981d      	ldr	r0, [sp, #116]	; 0x74
 8026706:	fb0c 3302 	mla	r3, ip, r2, r3
 802670a:	fb00 1106 	mla	r1, r0, r6, r1
 802670e:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 8026712:	f899 0002 	ldrb.w	r0, [r9, #2]
 8026716:	fb0e 1e02 	mla	lr, lr, r2, r1
 802671a:	f899 2001 	ldrb.w	r2, [r9, #1]
 802671e:	f899 1000 	ldrb.w	r1, [r9]
 8026722:	fb00 f006 	mul.w	r0, r0, r6
 8026726:	fb02 fc06 	mul.w	ip, r2, r6
 802672a:	fb01 f106 	mul.w	r1, r1, r6
 802672e:	0a1b      	lsrs	r3, r3, #8
 8026730:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026734:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8026738:	1c46      	adds	r6, r0, #1
 802673a:	f40e 437f 	and.w	r3, lr, #65280	; 0xff00
 802673e:	4313      	orrs	r3, r2
 8026740:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8026744:	f10c 0201 	add.w	r2, ip, #1
 8026748:	1c4e      	adds	r6, r1, #1
 802674a:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 802674e:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 8026752:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8026756:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 802675a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802675e:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8026762:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026766:	f889 2001 	strb.w	r2, [r9, #1]
 802676a:	f889 0002 	strb.w	r0, [r9, #2]
 802676e:	f889 3000 	strb.w	r3, [r9]
 8026772:	f1ba 0f00 	cmp.w	sl, #0
 8026776:	f109 0903 	add.w	r9, r9, #3
 802677a:	44d8      	add	r8, fp
 802677c:	442f      	add	r7, r5
 802677e:	dd2c      	ble.n	80267da <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6de>
 8026780:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8026784:	ea4f 4228 	mov.w	r2, r8, asr #16
 8026788:	2a00      	cmp	r2, #0
 802678a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802678e:	ea4f 4127 	mov.w	r1, r7, asr #16
 8026792:	f3c8 3003 	ubfx	r0, r8, #12, #4
 8026796:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 802679a:	f6bf aebf 	bge.w	802651c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802679e:	1c53      	adds	r3, r2, #1
 80267a0:	d4e7      	bmi.n	8026772 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 80267a2:	42b3      	cmp	r3, r6
 80267a4:	dce5      	bgt.n	8026772 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 80267a6:	1c4b      	adds	r3, r1, #1
 80267a8:	d4e3      	bmi.n	8026772 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 80267aa:	4563      	cmp	r3, ip
 80267ac:	dce1      	bgt.n	8026772 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 80267ae:	fa0f f38c 	sxth.w	r3, ip
 80267b2:	b236      	sxth	r6, r6
 80267b4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80267b8:	e9cd 6300 	strd	r6, r3, [sp]
 80267bc:	e9cd 0e04 	strd	r0, lr, [sp, #16]
 80267c0:	4649      	mov	r1, r9
 80267c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80267c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80267c6:	981e      	ldr	r0, [sp, #120]	; 0x78
 80267c8:	f7ff fb08 	bl	8025ddc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80267cc:	f1ba 0f00 	cmp.w	sl, #0
 80267d0:	f109 0903 	add.w	r9, r9, #3
 80267d4:	44d8      	add	r8, fp
 80267d6:	442f      	add	r7, r5
 80267d8:	dcd2      	bgt.n	8026780 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x684>
 80267da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80267dc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80267e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80267e4:	3301      	adds	r3, #1
 80267e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80267ea:	449b      	add	fp, r3
 80267ec:	e4e7      	b.n	80261be <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80267ee:	3b01      	subs	r3, #1
 80267f0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80267f4:	469a      	mov	sl, r3
 80267f6:	9309      	str	r3, [sp, #36]	; 0x24
 80267f8:	e683      	b.n	8026502 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 80267fa:	f1be 0f00 	cmp.w	lr, #0
 80267fe:	f43f aeb4 	beq.w	802656a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 8026802:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026804:	5c72      	ldrb	r2, [r6, r1]
 8026806:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026808:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802680c:	9220      	str	r2, [sp, #128]	; 0x80
 802680e:	0e12      	lsrs	r2, r2, #24
 8026810:	9215      	str	r2, [sp, #84]	; 0x54
 8026812:	e6aa      	b.n	802656a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 8026814:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026816:	eb06 0c02 	add.w	ip, r6, r2
 802681a:	4632      	mov	r2, r6
 802681c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802681e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8026822:	5d92      	ldrb	r2, [r2, r6]
 8026824:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8026828:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802682c:	0e31      	lsrs	r1, r6, #24
 802682e:	9220      	str	r2, [sp, #128]	; 0x80
 8026830:	0e12      	lsrs	r2, r2, #24
 8026832:	9621      	str	r6, [sp, #132]	; 0x84
 8026834:	9116      	str	r1, [sp, #88]	; 0x58
 8026836:	9215      	str	r2, [sp, #84]	; 0x54
 8026838:	e697      	b.n	802656a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 802683a:	f43f acc0 	beq.w	80261be <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802683e:	1e65      	subs	r5, r4, #1
 8026840:	e4fe      	b.n	8026240 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8026842:	bf00      	nop

08026844 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>:
 8026844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026848:	b087      	sub	sp, #28
 802684a:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 802684e:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	; 0x40
 8026852:	ea6f 000b 	mvn.w	r0, fp
 8026856:	e9dd 4712 	ldrd	r4, r7, [sp, #72]	; 0x48
 802685a:	fb07 4c06 	mla	ip, r7, r6, r4
 802685e:	b2c0      	uxtb	r0, r0
 8026860:	2f00      	cmp	r7, #0
 8026862:	9002      	str	r0, [sp, #8]
 8026864:	eb02 0e0c 	add.w	lr, r2, ip
 8026868:	f107 0801 	add.w	r8, r7, #1
 802686c:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8026870:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8026874:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 8026878:	db02      	blt.n	8026880 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x3c>
 802687a:	45b9      	cmp	r9, r7
 802687c:	f300 80a0 	bgt.w	80269c0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x17c>
 8026880:	468c      	mov	ip, r1
 8026882:	460f      	mov	r7, r1
 8026884:	780a      	ldrb	r2, [r1, #0]
 8026886:	9203      	str	r2, [sp, #12]
 8026888:	9201      	str	r2, [sp, #4]
 802688a:	f1b8 0f00 	cmp.w	r8, #0
 802688e:	db01      	blt.n	8026894 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x50>
 8026890:	45c1      	cmp	r9, r8
 8026892:	dc7b      	bgt.n	802698c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x148>
 8026894:	460b      	mov	r3, r1
 8026896:	4689      	mov	r9, r1
 8026898:	f891 a000 	ldrb.w	sl, [r1]
 802689c:	f8cd a014 	str.w	sl, [sp, #20]
 80268a0:	2d0f      	cmp	r5, #15
 80268a2:	f200 80cd 	bhi.w	8026a40 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 80268a6:	280f      	cmp	r0, #15
 80268a8:	f200 80ca 	bhi.w	8026a40 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 80268ac:	780a      	ldrb	r2, [r1, #0]
 80268ae:	9204      	str	r2, [sp, #16]
 80268b0:	b2aa      	uxth	r2, r5
 80268b2:	b280      	uxth	r0, r0
 80268b4:	fb02 f500 	mul.w	r5, r2, r0
 80268b8:	0112      	lsls	r2, r2, #4
 80268ba:	f89c 8001 	ldrb.w	r8, [ip, #1]
 80268be:	f89c e002 	ldrb.w	lr, [ip, #2]
 80268c2:	1b54      	subs	r4, r2, r5
 80268c4:	b2a4      	uxth	r4, r4
 80268c6:	fb04 f808 	mul.w	r8, r4, r8
 80268ca:	fb04 fe0e 	mul.w	lr, r4, lr
 80268ce:	ebc5 1000 	rsb	r0, r5, r0, lsl #4
 80268d2:	b280      	uxth	r0, r0
 80268d4:	9e01      	ldr	r6, [sp, #4]
 80268d6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80268da:	f897 c001 	ldrb.w	ip, [r7, #1]
 80268de:	1a12      	subs	r2, r2, r0
 80268e0:	78bf      	ldrb	r7, [r7, #2]
 80268e2:	b292      	uxth	r2, r2
 80268e4:	fb04 f406 	mul.w	r4, r4, r6
 80268e8:	fb02 8c0c 	mla	ip, r2, ip, r8
 80268ec:	fb02 e707 	mla	r7, r2, r7, lr
 80268f0:	9e03      	ldr	r6, [sp, #12]
 80268f2:	f899 8001 	ldrb.w	r8, [r9, #1]
 80268f6:	f899 e002 	ldrb.w	lr, [r9, #2]
 80268fa:	fb02 4206 	mla	r2, r2, r6, r4
 80268fe:	fb00 cc08 	mla	ip, r0, r8, ip
 8026902:	fb00 770e 	mla	r7, r0, lr, r7
 8026906:	f893 8001 	ldrb.w	r8, [r3, #1]
 802690a:	f893 e002 	ldrb.w	lr, [r3, #2]
 802690e:	fb00 220a 	mla	r2, r0, sl, r2
 8026912:	fb05 c808 	mla	r8, r5, r8, ip
 8026916:	fb05 7e0e 	mla	lr, r5, lr, r7
 802691a:	9805      	ldr	r0, [sp, #20]
 802691c:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 8026920:	fb05 2500 	mla	r5, r5, r0, r2
 8026924:	9a04      	ldr	r2, [sp, #16]
 8026926:	fa1f f38b 	uxth.w	r3, fp
 802692a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802692e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8026932:	fb12 f609 	smulbb	r6, r2, r9
 8026936:	fb1e fe03 	smulbb	lr, lr, r3
 802693a:	fb18 f803 	smulbb	r8, r8, r3
 802693e:	784a      	ldrb	r2, [r1, #1]
 8026940:	7888      	ldrb	r0, [r1, #2]
 8026942:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8026946:	fb05 6503 	mla	r5, r5, r3, r6
 802694a:	fb02 8809 	mla	r8, r2, r9, r8
 802694e:	fb00 e909 	mla	r9, r0, r9, lr
 8026952:	b2ad      	uxth	r5, r5
 8026954:	fa1f f888 	uxth.w	r8, r8
 8026958:	fa1f f989 	uxth.w	r9, r9
 802695c:	f108 0001 	add.w	r0, r8, #1
 8026960:	f109 0201 	add.w	r2, r9, #1
 8026964:	1c6b      	adds	r3, r5, #1
 8026966:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 802696a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802696e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026972:	ea4f 2828 	mov.w	r8, r8, asr #8
 8026976:	ea4f 2929 	mov.w	r9, r9, asr #8
 802697a:	122d      	asrs	r5, r5, #8
 802697c:	f881 8001 	strb.w	r8, [r1, #1]
 8026980:	f881 9002 	strb.w	r9, [r1, #2]
 8026984:	700d      	strb	r5, [r1, #0]
 8026986:	b007      	add	sp, #28
 8026988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802698c:	b388      	cbz	r0, 80269f2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1ae>
 802698e:	2c00      	cmp	r4, #0
 8026990:	db44      	blt.n	8026a1c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d8>
 8026992:	42a6      	cmp	r6, r4
 8026994:	dd42      	ble.n	8026a1c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d8>
 8026996:	f81e 9006 	ldrb.w	r9, [lr, r6]
 802699a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 802699e:	4499      	add	r9, r3
 80269a0:	3401      	adds	r4, #1
 80269a2:	f899 a000 	ldrb.w	sl, [r9]
 80269a6:	d435      	bmi.n	8026a14 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d0>
 80269a8:	42a6      	cmp	r6, r4
 80269aa:	dd33      	ble.n	8026a14 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d0>
 80269ac:	2d00      	cmp	r5, #0
 80269ae:	d043      	beq.n	8026a38 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1f4>
 80269b0:	4476      	add	r6, lr
 80269b2:	7872      	ldrb	r2, [r6, #1]
 80269b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80269b8:	5c9c      	ldrb	r4, [r3, r2]
 80269ba:	4413      	add	r3, r2
 80269bc:	9405      	str	r4, [sp, #20]
 80269be:	e76f      	b.n	80268a0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5c>
 80269c0:	2c00      	cmp	r4, #0
 80269c2:	db01      	blt.n	80269c8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x184>
 80269c4:	42a6      	cmp	r6, r4
 80269c6:	dc1f      	bgt.n	8026a08 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1c4>
 80269c8:	460f      	mov	r7, r1
 80269ca:	783a      	ldrb	r2, [r7, #0]
 80269cc:	9203      	str	r2, [sp, #12]
 80269ce:	1c62      	adds	r2, r4, #1
 80269d0:	d40b      	bmi.n	80269ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a6>
 80269d2:	4296      	cmp	r6, r2
 80269d4:	dd09      	ble.n	80269ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a6>
 80269d6:	b31d      	cbz	r5, 8026a20 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1dc>
 80269d8:	f89e c001 	ldrb.w	ip, [lr, #1]
 80269dc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80269e0:	f813 200c 	ldrb.w	r2, [r3, ip]
 80269e4:	449c      	add	ip, r3
 80269e6:	9201      	str	r2, [sp, #4]
 80269e8:	e74f      	b.n	802688a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x46>
 80269ea:	780a      	ldrb	r2, [r1, #0]
 80269ec:	468c      	mov	ip, r1
 80269ee:	9201      	str	r2, [sp, #4]
 80269f0:	e74b      	b.n	802688a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x46>
 80269f2:	2d0f      	cmp	r5, #15
 80269f4:	f891 a000 	ldrb.w	sl, [r1]
 80269f8:	d822      	bhi.n	8026a40 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 80269fa:	f8cd a010 	str.w	sl, [sp, #16]
 80269fe:	460b      	mov	r3, r1
 8026a00:	4689      	mov	r9, r1
 8026a02:	f8cd a014 	str.w	sl, [sp, #20]
 8026a06:	e753      	b.n	80268b0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x6c>
 8026a08:	f812 700c 	ldrb.w	r7, [r2, ip]
 8026a0c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8026a10:	441f      	add	r7, r3
 8026a12:	e7da      	b.n	80269ca <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x186>
 8026a14:	780b      	ldrb	r3, [r1, #0]
 8026a16:	9305      	str	r3, [sp, #20]
 8026a18:	460b      	mov	r3, r1
 8026a1a:	e741      	b.n	80268a0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5c>
 8026a1c:	4689      	mov	r9, r1
 8026a1e:	e7bf      	b.n	80269a0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x15c>
 8026a20:	780a      	ldrb	r2, [r1, #0]
 8026a22:	f1b8 0f00 	cmp.w	r8, #0
 8026a26:	9201      	str	r2, [sp, #4]
 8026a28:	468c      	mov	ip, r1
 8026a2a:	f6bf af31 	bge.w	8026890 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x4c>
 8026a2e:	460b      	mov	r3, r1
 8026a30:	4689      	mov	r9, r1
 8026a32:	9205      	str	r2, [sp, #20]
 8026a34:	4692      	mov	sl, r2
 8026a36:	e736      	b.n	80268a6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x62>
 8026a38:	780b      	ldrb	r3, [r1, #0]
 8026a3a:	9305      	str	r3, [sp, #20]
 8026a3c:	460b      	mov	r3, r1
 8026a3e:	e732      	b.n	80268a6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x62>
 8026a40:	4b03      	ldr	r3, [pc, #12]	; (8026a50 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x20c>)
 8026a42:	4a04      	ldr	r2, [pc, #16]	; (8026a54 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x210>)
 8026a44:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8026a48:	4803      	ldr	r0, [pc, #12]	; (8026a58 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x214>)
 8026a4a:	f001 fb45 	bl	80280d8 <__assert_func>
 8026a4e:	bf00      	nop
 8026a50:	0802b350 	.word	0x0802b350
 8026a54:	0802b9c8 	.word	0x0802b9c8
 8026a58:	0802b4d4 	.word	0x0802b4d4

08026a5c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a60:	ed2d 8b08 	vpush	{d8-d11}
 8026a64:	b095      	sub	sp, #84	; 0x54
 8026a66:	f89d 40bc 	ldrb.w	r4, [sp, #188]	; 0xbc
 8026a6a:	9013      	str	r0, [sp, #76]	; 0x4c
 8026a6c:	43e0      	mvns	r0, r4
 8026a6e:	e9dd a727 	ldrd	sl, r7, [sp, #156]	; 0x9c
 8026a72:	eeb0 aa40 	vmov.f32	s20, s0
 8026a76:	eef0 9a60 	vmov.f32	s19, s1
 8026a7a:	eeb0 9a41 	vmov.f32	s18, s2
 8026a7e:	eef0 8a62 	vmov.f32	s17, s5
 8026a82:	eeb0 8a43 	vmov.f32	s16, s6
 8026a86:	eef0 ba44 	vmov.f32	s23, s8
 8026a8a:	eeb0 ba64 	vmov.f32	s22, s9
 8026a8e:	eef0 aa45 	vmov.f32	s21, s10
 8026a92:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8026a96:	9411      	str	r4, [sp, #68]	; 0x44
 8026a98:	469b      	mov	fp, r3
 8026a9a:	e9dd 422b 	ldrd	r4, r2, [sp, #172]	; 0xac
 8026a9e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026aa0:	6861      	ldr	r1, [r4, #4]
 8026aa2:	fb01 2303 	mla	r3, r1, r3, r2
 8026aa6:	6821      	ldr	r1, [r4, #0]
 8026aa8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8026aaa:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8026aac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8026ab0:	6852      	ldr	r2, [r2, #4]
 8026ab2:	6824      	ldr	r4, [r4, #0]
 8026ab4:	930d      	str	r3, [sp, #52]	; 0x34
 8026ab6:	b2c3      	uxtb	r3, r0
 8026ab8:	930b      	str	r3, [sp, #44]	; 0x2c
 8026aba:	1d13      	adds	r3, r2, #4
 8026abc:	940a      	str	r4, [sp, #40]	; 0x28
 8026abe:	9308      	str	r3, [sp, #32]
 8026ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026ac2:	2b00      	cmp	r3, #0
 8026ac4:	dc02      	bgt.n	8026acc <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8026ac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026ac8:	2b00      	cmp	r3, #0
 8026aca:	dd6c      	ble.n	8026ba6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8026acc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026ace:	f1bb 0f00 	cmp.w	fp, #0
 8026ad2:	e9d3 5e02 	ldrd	r5, lr, [r3, #8]
 8026ad6:	b228      	sxth	r0, r5
 8026ad8:	fa0f f68e 	sxth.w	r6, lr
 8026adc:	f340 8245 	ble.w	8026f6a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 8026ae0:	e9dd 8929 	ldrd	r8, r9, [sp, #164]	; 0xa4
 8026ae4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026ae6:	1e44      	subs	r4, r0, #1
 8026ae8:	f106 3cff 	add.w	ip, r6, #4294967295
 8026aec:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8026af0:	ea5f 432a 	movs.w	r3, sl, asr #16
 8026af4:	ea4f 4127 	mov.w	r1, r7, asr #16
 8026af8:	d405      	bmi.n	8026b06 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026afa:	42a3      	cmp	r3, r4
 8026afc:	da03      	bge.n	8026b06 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026afe:	2900      	cmp	r1, #0
 8026b00:	db01      	blt.n	8026b06 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026b02:	4561      	cmp	r1, ip
 8026b04:	db54      	blt.n	8026bb0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8026b06:	f113 0e01 	adds.w	lr, r3, #1
 8026b0a:	d407      	bmi.n	8026b1c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8026b0c:	4586      	cmp	lr, r0
 8026b0e:	dc05      	bgt.n	8026b1c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8026b10:	f111 0e01 	adds.w	lr, r1, #1
 8026b14:	d402      	bmi.n	8026b1c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8026b16:	45b6      	cmp	lr, r6
 8026b18:	f340 8189 	ble.w	8026e2e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8026b1c:	f1bb 0b01 	subs.w	fp, fp, #1
 8026b20:	44c2      	add	sl, r8
 8026b22:	444f      	add	r7, r9
 8026b24:	f102 0204 	add.w	r2, r2, #4
 8026b28:	d1e2      	bne.n	8026af0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026b2a:	920d      	str	r2, [sp, #52]	; 0x34
 8026b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026b2e:	2b00      	cmp	r3, #0
 8026b30:	dd39      	ble.n	8026ba6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8026b32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026b36:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026b3a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026b3e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026b42:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026b46:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8026b4a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026b4e:	ee76 6a68 	vsub.f32	s13, s12, s17
 8026b52:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8026b56:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026b5a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026b5e:	ee16 2a90 	vmov	r2, s13
 8026b62:	3b01      	subs	r3, #1
 8026b64:	930e      	str	r3, [sp, #56]	; 0x38
 8026b66:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026b68:	fb92 f3f3 	sdiv	r3, r2, r3
 8026b6c:	ee17 2a10 	vmov	r2, s14
 8026b70:	eeb0 7a48 	vmov.f32	s14, s16
 8026b74:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026b78:	ee17 7a10 	vmov	r7, s14
 8026b7c:	eeb0 7a68 	vmov.f32	s14, s17
 8026b80:	9329      	str	r3, [sp, #164]	; 0xa4
 8026b82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026b84:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026b88:	fb92 f3f3 	sdiv	r3, r2, r3
 8026b8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026b8e:	932a      	str	r3, [sp, #168]	; 0xa8
 8026b90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026b92:	ee17 aa10 	vmov	sl, s14
 8026b96:	eeb0 8a67 	vmov.f32	s16, s15
 8026b9a:	eef0 8a46 	vmov.f32	s17, s12
 8026b9e:	bf14      	ite	ne
 8026ba0:	469b      	movne	fp, r3
 8026ba2:	4693      	moveq	fp, r2
 8026ba4:	e78c      	b.n	8026ac0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8026ba6:	b015      	add	sp, #84	; 0x54
 8026ba8:	ecbd 8b08 	vpop	{d8-d11}
 8026bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026bb0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8026bb4:	920d      	str	r2, [sp, #52]	; 0x34
 8026bb6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8026bb8:	f10b 32ff 	add.w	r2, fp, #4294967295
 8026bbc:	fb01 a302 	mla	r3, r1, r2, sl
 8026bc0:	141b      	asrs	r3, r3, #16
 8026bc2:	9209      	str	r2, [sp, #36]	; 0x24
 8026bc4:	f100 80d3 	bmi.w	8026d6e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8026bc8:	42a3      	cmp	r3, r4
 8026bca:	f280 80d0 	bge.w	8026d6e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8026bce:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026bd0:	fb03 7302 	mla	r3, r3, r2, r7
 8026bd4:	141b      	asrs	r3, r3, #16
 8026bd6:	f100 80ca 	bmi.w	8026d6e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8026bda:	3e01      	subs	r6, #1
 8026bdc:	42b3      	cmp	r3, r6
 8026bde:	f280 80c6 	bge.w	8026d6e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8026be2:	f1bb 0f00 	cmp.w	fp, #0
 8026be6:	dda1      	ble.n	8026b2c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8026be8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8026bec:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8026bf0:	930c      	str	r3, [sp, #48]	; 0x30
 8026bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026bf4:	f103 0804 	add.w	r8, r3, #4
 8026bf8:	e08f      	b.n	8026d1a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8026bfa:	7861      	ldrb	r1, [r4, #1]
 8026bfc:	eb04 0c00 	add.w	ip, r4, r0
 8026c00:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026c04:	4431      	add	r1, r6
 8026c06:	2a00      	cmp	r2, #0
 8026c08:	f000 80a3 	beq.w	8026d52 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f6>
 8026c0c:	5c20      	ldrb	r0, [r4, r0]
 8026c0e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8026c12:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026c16:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8026c1a:	4430      	add	r0, r6
 8026c1c:	44b4      	add	ip, r6
 8026c1e:	b29b      	uxth	r3, r3
 8026c20:	b292      	uxth	r2, r2
 8026c22:	fb03 f402 	mul.w	r4, r3, r2
 8026c26:	011b      	lsls	r3, r3, #4
 8026c28:	f891 b001 	ldrb.w	fp, [r1, #1]
 8026c2c:	1b1e      	subs	r6, r3, r4
 8026c2e:	f891 9002 	ldrb.w	r9, [r1, #2]
 8026c32:	b2b6      	uxth	r6, r6
 8026c34:	7809      	ldrb	r1, [r1, #0]
 8026c36:	fb06 fb0b 	mul.w	fp, r6, fp
 8026c3a:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8026c3e:	b292      	uxth	r2, r2
 8026c40:	fb06 f909 	mul.w	r9, r6, r9
 8026c44:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8026c48:	fb06 f601 	mul.w	r6, r6, r1
 8026c4c:	1a9b      	subs	r3, r3, r2
 8026c4e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8026c52:	b29b      	uxth	r3, r3
 8026c54:	f89e e002 	ldrb.w	lr, [lr, #2]
 8026c58:	fb03 bb01 	mla	fp, r3, r1, fp
 8026c5c:	9908      	ldr	r1, [sp, #32]
 8026c5e:	fb03 990e 	mla	r9, r3, lr, r9
 8026c62:	5d49      	ldrb	r1, [r1, r5]
 8026c64:	7885      	ldrb	r5, [r0, #2]
 8026c66:	fb03 6301 	mla	r3, r3, r1, r6
 8026c6a:	f890 e001 	ldrb.w	lr, [r0, #1]
 8026c6e:	fb02 9905 	mla	r9, r2, r5, r9
 8026c72:	7801      	ldrb	r1, [r0, #0]
 8026c74:	fb02 bb0e 	mla	fp, r2, lr, fp
 8026c78:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8026c7c:	fb02 3301 	mla	r3, r2, r1, r3
 8026c80:	f89c e001 	ldrb.w	lr, [ip, #1]
 8026c84:	fb04 9900 	mla	r9, r4, r0, r9
 8026c88:	f89c 1000 	ldrb.w	r1, [ip]
 8026c8c:	fb04 bb0e 	mla	fp, r4, lr, fp
 8026c90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026c92:	f818 cc04 	ldrb.w	ip, [r8, #-4]
 8026c96:	fb04 3301 	mla	r3, r4, r1, r3
 8026c9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026c9c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8026ca0:	fb19 f902 	smulbb	r9, r9, r2
 8026ca4:	fb1c fc01 	smulbb	ip, ip, r1
 8026ca8:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8026cac:	f818 5c02 	ldrb.w	r5, [r8, #-2]
 8026cb0:	fb1b fb02 	smulbb	fp, fp, r2
 8026cb4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026cb8:	f818 6c03 	ldrb.w	r6, [r8, #-3]
 8026cbc:	fb05 9901 	mla	r9, r5, r1, r9
 8026cc0:	fb03 c302 	mla	r3, r3, r2, ip
 8026cc4:	fb06 bb01 	mla	fp, r6, r1, fp
 8026cc8:	fa1f f989 	uxth.w	r9, r9
 8026ccc:	b29b      	uxth	r3, r3
 8026cce:	f109 0101 	add.w	r1, r9, #1
 8026cd2:	1c5a      	adds	r2, r3, #1
 8026cd4:	fa1f fb8b 	uxth.w	fp, fp
 8026cd8:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8026cdc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026ce0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8026ce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026ce4:	f10b 0001 	add.w	r0, fp, #1
 8026ce8:	3a01      	subs	r2, #1
 8026cea:	eb00 2b1b 	add.w	fp, r0, fp, lsr #8
 8026cee:	448a      	add	sl, r1
 8026cf0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8026cf2:	9209      	str	r2, [sp, #36]	; 0x24
 8026cf4:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8026cf8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026cfc:	121b      	asrs	r3, r3, #8
 8026cfe:	3201      	adds	r2, #1
 8026d00:	f808 bc03 	strb.w	fp, [r8, #-3]
 8026d04:	f808 9c02 	strb.w	r9, [r8, #-2]
 8026d08:	f808 3c04 	strb.w	r3, [r8, #-4]
 8026d0c:	440f      	add	r7, r1
 8026d0e:	f108 0804 	add.w	r8, r8, #4
 8026d12:	d025      	beq.n	8026d60 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8026d14:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026d16:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8026d1a:	ea4f 432a 	mov.w	r3, sl, asr #16
 8026d1e:	143c      	asrs	r4, r7, #16
 8026d20:	fb00 3404 	mla	r4, r0, r4, r3
 8026d24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026d26:	9e08      	ldr	r6, [sp, #32]
 8026d28:	5d15      	ldrb	r5, [r2, r4]
 8026d2a:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8026d2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026d32:	4414      	add	r4, r2
 8026d34:	eb06 0e05 	add.w	lr, r6, r5
 8026d38:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8026d3c:	2b00      	cmp	r3, #0
 8026d3e:	f47f af5c 	bne.w	8026bfa <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8026d42:	b14a      	cbz	r2, 8026d58 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026d44:	5c20      	ldrb	r0, [r4, r0]
 8026d46:	46f4      	mov	ip, lr
 8026d48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026d4c:	4430      	add	r0, r6
 8026d4e:	4671      	mov	r1, lr
 8026d50:	e765      	b.n	8026c1e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8026d52:	46f4      	mov	ip, lr
 8026d54:	4670      	mov	r0, lr
 8026d56:	e762      	b.n	8026c1e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8026d58:	46f4      	mov	ip, lr
 8026d5a:	4670      	mov	r0, lr
 8026d5c:	4671      	mov	r1, lr
 8026d5e:	e75e      	b.n	8026c1e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8026d60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026d62:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8026d66:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8026d6a:	930d      	str	r3, [sp, #52]	; 0x34
 8026d6c:	e6de      	b.n	8026b2c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8026d6e:	f1bb 0f00 	cmp.w	fp, #0
 8026d72:	f77f aedb 	ble.w	8026b2c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8026d76:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8026d7a:	ea4f 432a 	mov.w	r3, sl, asr #16
 8026d7e:	1439      	asrs	r1, r7, #16
 8026d80:	4676      	mov	r6, lr
 8026d82:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8026d86:	f8dd 80b8 	ldr.w	r8, [sp, #184]	; 0xb8
 8026d8a:	2b00      	cmp	r3, #0
 8026d8c:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8026d90:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8026d94:	db29      	blt.n	8026dea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8026d96:	1e6c      	subs	r4, r5, #1
 8026d98:	42a3      	cmp	r3, r4
 8026d9a:	da26      	bge.n	8026dea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8026d9c:	2900      	cmp	r1, #0
 8026d9e:	db24      	blt.n	8026dea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8026da0:	1e74      	subs	r4, r6, #1
 8026da2:	42a1      	cmp	r1, r4
 8026da4:	da21      	bge.n	8026dea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8026da6:	b22c      	sxth	r4, r5
 8026da8:	fb01 3304 	mla	r3, r1, r4, r3
 8026dac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026dae:	5ce9      	ldrb	r1, [r5, r3]
 8026db0:	442b      	add	r3, r5
 8026db2:	9d08      	ldr	r5, [sp, #32]
 8026db4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026db8:	9112      	str	r1, [sp, #72]	; 0x48
 8026dba:	eb05 0c01 	add.w	ip, r5, r1
 8026dbe:	2800      	cmp	r0, #0
 8026dc0:	d04e      	beq.n	8026e60 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8026dc2:	f893 e001 	ldrb.w	lr, [r3, #1]
 8026dc6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8026dca:	44ae      	add	lr, r5
 8026dcc:	2a00      	cmp	r2, #0
 8026dce:	f000 80c7 	beq.w	8026f60 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8026dd2:	1919      	adds	r1, r3, r4
 8026dd4:	7849      	ldrb	r1, [r1, #1]
 8026dd6:	5d1c      	ldrb	r4, [r3, r4]
 8026dd8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026ddc:	186b      	adds	r3, r5, r1
 8026dde:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026de2:	930c      	str	r3, [sp, #48]	; 0x30
 8026de4:	1963      	adds	r3, r4, r5
 8026de6:	9310      	str	r3, [sp, #64]	; 0x40
 8026de8:	e041      	b.n	8026e6e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026dea:	1c5c      	adds	r4, r3, #1
 8026dec:	d405      	bmi.n	8026dfa <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8026dee:	42ac      	cmp	r4, r5
 8026df0:	dc03      	bgt.n	8026dfa <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8026df2:	1c4c      	adds	r4, r1, #1
 8026df4:	d401      	bmi.n	8026dfa <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8026df6:	42b4      	cmp	r4, r6
 8026df8:	dd21      	ble.n	8026e3e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8026dfa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026dfc:	f1b9 0f00 	cmp.w	r9, #0
 8026e00:	449a      	add	sl, r3
 8026e02:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026e04:	f10b 0b04 	add.w	fp, fp, #4
 8026e08:	441f      	add	r7, r3
 8026e0a:	dd07      	ble.n	8026e1c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8026e0c:	e9d8 5602 	ldrd	r5, r6, [r8, #8]
 8026e10:	f109 39ff 	add.w	r9, r9, #4294967295
 8026e14:	ea4f 432a 	mov.w	r3, sl, asr #16
 8026e18:	1439      	asrs	r1, r7, #16
 8026e1a:	e7b6      	b.n	8026d8a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8026e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026e20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026e24:	3301      	adds	r3, #1
 8026e26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026e2a:	930d      	str	r3, [sp, #52]	; 0x34
 8026e2c:	e67e      	b.n	8026b2c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8026e2e:	920d      	str	r2, [sp, #52]	; 0x34
 8026e30:	f10b 32ff 	add.w	r2, fp, #4294967295
 8026e34:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8026e38:	4691      	mov	r9, r2
 8026e3a:	9209      	str	r2, [sp, #36]	; 0x24
 8026e3c:	e7a0      	b.n	8026d80 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8026e3e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026e40:	b236      	sxth	r6, r6
 8026e42:	b22d      	sxth	r5, r5
 8026e44:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8026e48:	e9cd 2405 	strd	r2, r4, [sp, #20]
 8026e4c:	9302      	str	r3, [sp, #8]
 8026e4e:	e9cd 5600 	strd	r5, r6, [sp]
 8026e52:	9b08      	ldr	r3, [sp, #32]
 8026e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026e56:	4659      	mov	r1, fp
 8026e58:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8026e5a:	f7ff fcf3 	bl	8026844 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>
 8026e5e:	e7cc      	b.n	8026dfa <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8026e60:	2a00      	cmp	r2, #0
 8026e62:	d173      	bne.n	8026f4c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8026e64:	46e6      	mov	lr, ip
 8026e66:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8026e6a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8026e6e:	b283      	uxth	r3, r0
 8026e70:	b292      	uxth	r2, r2
 8026e72:	fb03 f002 	mul.w	r0, r3, r2
 8026e76:	011b      	lsls	r3, r3, #4
 8026e78:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8026e7c:	f89e 5002 	ldrb.w	r5, [lr, #2]
 8026e80:	1a19      	subs	r1, r3, r0
 8026e82:	b289      	uxth	r1, r1
 8026e84:	f89e e000 	ldrb.w	lr, [lr]
 8026e88:	fb01 f505 	mul.w	r5, r1, r5
 8026e8c:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8026e90:	fb01 f606 	mul.w	r6, r1, r6
 8026e94:	b292      	uxth	r2, r2
 8026e96:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8026e9a:	fb01 f40e 	mul.w	r4, r1, lr
 8026e9e:	1a9b      	subs	r3, r3, r2
 8026ea0:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8026ea4:	f89c e002 	ldrb.w	lr, [ip, #2]
 8026ea8:	b29b      	uxth	r3, r3
 8026eaa:	fb03 6601 	mla	r6, r3, r1, r6
 8026eae:	fb03 5e0e 	mla	lr, r3, lr, r5
 8026eb2:	9908      	ldr	r1, [sp, #32]
 8026eb4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026eb6:	5d49      	ldrb	r1, [r1, r5]
 8026eb8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026eba:	fb03 4301 	mla	r3, r3, r1, r4
 8026ebe:	f895 c001 	ldrb.w	ip, [r5, #1]
 8026ec2:	78ad      	ldrb	r5, [r5, #2]
 8026ec4:	fb02 6c0c 	mla	ip, r2, ip, r6
 8026ec8:	fb02 e505 	mla	r5, r2, r5, lr
 8026ecc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026ece:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026ed0:	784e      	ldrb	r6, [r1, #1]
 8026ed2:	7824      	ldrb	r4, [r4, #0]
 8026ed4:	7889      	ldrb	r1, [r1, #2]
 8026ed6:	fb02 3204 	mla	r2, r2, r4, r3
 8026eda:	fb00 cc06 	mla	ip, r0, r6, ip
 8026ede:	fb00 5501 	mla	r5, r0, r1, r5
 8026ee2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026ee4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8026ee6:	780b      	ldrb	r3, [r1, #0]
 8026ee8:	f89b 4000 	ldrb.w	r4, [fp]
 8026eec:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8026ef0:	fb00 2003 	mla	r0, r0, r3, r2
 8026ef4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8026ef8:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8026efc:	fb15 f501 	smulbb	r5, r5, r1
 8026f00:	fb14 f406 	smulbb	r4, r4, r6
 8026f04:	fb1c fc01 	smulbb	ip, ip, r1
 8026f08:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8026f0c:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8026f10:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026f14:	fb00 4001 	mla	r0, r0, r1, r4
 8026f18:	fb03 5306 	mla	r3, r3, r6, r5
 8026f1c:	fb02 c106 	mla	r1, r2, r6, ip
 8026f20:	b29b      	uxth	r3, r3
 8026f22:	b280      	uxth	r0, r0
 8026f24:	b289      	uxth	r1, r1
 8026f26:	1c5a      	adds	r2, r3, #1
 8026f28:	1c4d      	adds	r5, r1, #1
 8026f2a:	1c44      	adds	r4, r0, #1
 8026f2c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026f30:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8026f34:	eb04 2310 	add.w	r3, r4, r0, lsr #8
 8026f38:	1209      	asrs	r1, r1, #8
 8026f3a:	1212      	asrs	r2, r2, #8
 8026f3c:	121b      	asrs	r3, r3, #8
 8026f3e:	f88b 1001 	strb.w	r1, [fp, #1]
 8026f42:	f88b 2002 	strb.w	r2, [fp, #2]
 8026f46:	f88b 3000 	strb.w	r3, [fp]
 8026f4a:	e756      	b.n	8026dfa <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8026f4c:	5d1c      	ldrb	r4, [r3, r4]
 8026f4e:	9b08      	ldr	r3, [sp, #32]
 8026f50:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026f54:	18e3      	adds	r3, r4, r3
 8026f56:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8026f5a:	9310      	str	r3, [sp, #64]	; 0x40
 8026f5c:	46e6      	mov	lr, ip
 8026f5e:	e786      	b.n	8026e6e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026f60:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8026f64:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8026f68:	e781      	b.n	8026e6e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026f6a:	f43f addf 	beq.w	8026b2c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8026f6e:	1e44      	subs	r4, r0, #1
 8026f70:	e621      	b.n	8026bb6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8026f72:	bf00      	nop

08026f74 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>:
 8026f74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f78:	f9bd c028 	ldrsh.w	ip, [sp, #40]	; 0x28
 8026f7c:	e9dd 640c 	ldrd	r6, r4, [sp, #48]	; 0x30
 8026f80:	fb04 6e0c 	mla	lr, r4, ip, r6
 8026f84:	2c00      	cmp	r4, #0
 8026f86:	461f      	mov	r7, r3
 8026f88:	eb02 0a0e 	add.w	sl, r2, lr
 8026f8c:	f104 0801 	add.w	r8, r4, #1
 8026f90:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8026f94:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8026f98:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8026f9c:	db01      	blt.n	8026fa2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x2e>
 8026f9e:	45a1      	cmp	r9, r4
 8026fa0:	dc6f      	bgt.n	8027082 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x10e>
 8026fa2:	f891 b000 	ldrb.w	fp, [r1]
 8026fa6:	460b      	mov	r3, r1
 8026fa8:	465c      	mov	r4, fp
 8026faa:	468e      	mov	lr, r1
 8026fac:	f1b8 0f00 	cmp.w	r8, #0
 8026fb0:	db01      	blt.n	8026fb6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x42>
 8026fb2:	45c1      	cmp	r9, r8
 8026fb4:	dc4a      	bgt.n	802704c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xd8>
 8026fb6:	f891 9000 	ldrb.w	r9, [r1]
 8026fba:	460f      	mov	r7, r1
 8026fbc:	46ca      	mov	sl, r9
 8026fbe:	4688      	mov	r8, r1
 8026fc0:	2d0f      	cmp	r5, #15
 8026fc2:	f200 8097 	bhi.w	80270f4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 8026fc6:	280f      	cmp	r0, #15
 8026fc8:	f200 8094 	bhi.w	80270f4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 8026fcc:	b2aa      	uxth	r2, r5
 8026fce:	b280      	uxth	r0, r0
 8026fd0:	fb02 f600 	mul.w	r6, r2, r0
 8026fd4:	0112      	lsls	r2, r2, #4
 8026fd6:	1b95      	subs	r5, r2, r6
 8026fd8:	f893 c001 	ldrb.w	ip, [r3, #1]
 8026fdc:	789b      	ldrb	r3, [r3, #2]
 8026fde:	b2ad      	uxth	r5, r5
 8026fe0:	ebc6 1000 	rsb	r0, r6, r0, lsl #4
 8026fe4:	fb05 f404 	mul.w	r4, r5, r4
 8026fe8:	fb05 fc0c 	mul.w	ip, r5, ip
 8026fec:	fb05 f503 	mul.w	r5, r5, r3
 8026ff0:	b280      	uxth	r0, r0
 8026ff2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026ff6:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8026ffa:	1a12      	subs	r2, r2, r0
 8026ffc:	f89e e002 	ldrb.w	lr, [lr, #2]
 8027000:	b292      	uxth	r2, r2
 8027002:	fb02 cc03 	mla	ip, r2, r3, ip
 8027006:	fb02 440b 	mla	r4, r2, fp, r4
 802700a:	fb02 520e 	mla	r2, r2, lr, r5
 802700e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8027012:	f898 8002 	ldrb.w	r8, [r8, #2]
 8027016:	fb00 cc03 	mla	ip, r0, r3, ip
 802701a:	fb00 4909 	mla	r9, r0, r9, r4
 802701e:	fb00 2008 	mla	r0, r0, r8, r2
 8027022:	787b      	ldrb	r3, [r7, #1]
 8027024:	78ba      	ldrb	r2, [r7, #2]
 8027026:	fb06 9a0a 	mla	sl, r6, sl, r9
 802702a:	fb06 c303 	mla	r3, r6, r3, ip
 802702e:	fb06 0602 	mla	r6, r6, r2, r0
 8027032:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8027036:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802703a:	0236      	lsls	r6, r6, #8
 802703c:	ea43 030a 	orr.w	r3, r3, sl
 8027040:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8027044:	4333      	orrs	r3, r6
 8027046:	600b      	str	r3, [r1, #0]
 8027048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802704c:	b378      	cbz	r0, 80270ae <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x13a>
 802704e:	2e00      	cmp	r6, #0
 8027050:	db3f      	blt.n	80270d2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15e>
 8027052:	45b4      	cmp	ip, r6
 8027054:	dd3d      	ble.n	80270d2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15e>
 8027056:	f81a 800c 	ldrb.w	r8, [sl, ip]
 802705a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802705e:	44b8      	add	r8, r7
 8027060:	3601      	adds	r6, #1
 8027062:	f898 9000 	ldrb.w	r9, [r8]
 8027066:	d430      	bmi.n	80270ca <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x156>
 8027068:	45b4      	cmp	ip, r6
 802706a:	dd2e      	ble.n	80270ca <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x156>
 802706c:	2d00      	cmp	r5, #0
 802706e:	d03d      	beq.n	80270ec <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x178>
 8027070:	44d4      	add	ip, sl
 8027072:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8027076:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802707a:	f817 a002 	ldrb.w	sl, [r7, r2]
 802707e:	4417      	add	r7, r2
 8027080:	e79e      	b.n	8026fc0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x4c>
 8027082:	2e00      	cmp	r6, #0
 8027084:	db01      	blt.n	802708a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x116>
 8027086:	45b4      	cmp	ip, r6
 8027088:	dc19      	bgt.n	80270be <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x14a>
 802708a:	468e      	mov	lr, r1
 802708c:	1c73      	adds	r3, r6, #1
 802708e:	f89e b000 	ldrb.w	fp, [lr]
 8027092:	d409      	bmi.n	80270a8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x134>
 8027094:	459c      	cmp	ip, r3
 8027096:	dd07      	ble.n	80270a8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x134>
 8027098:	b1ed      	cbz	r5, 80270d6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 802709a:	f89a 3001 	ldrb.w	r3, [sl, #1]
 802709e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80270a2:	5cfc      	ldrb	r4, [r7, r3]
 80270a4:	443b      	add	r3, r7
 80270a6:	e781      	b.n	8026fac <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x38>
 80270a8:	780c      	ldrb	r4, [r1, #0]
 80270aa:	460b      	mov	r3, r1
 80270ac:	e77e      	b.n	8026fac <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x38>
 80270ae:	2d0f      	cmp	r5, #15
 80270b0:	f891 9000 	ldrb.w	r9, [r1]
 80270b4:	d81e      	bhi.n	80270f4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 80270b6:	460f      	mov	r7, r1
 80270b8:	4688      	mov	r8, r1
 80270ba:	46ca      	mov	sl, r9
 80270bc:	e786      	b.n	8026fcc <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x58>
 80270be:	f812 e00e 	ldrb.w	lr, [r2, lr]
 80270c2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80270c6:	449e      	add	lr, r3
 80270c8:	e7e0      	b.n	802708c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x118>
 80270ca:	f891 a000 	ldrb.w	sl, [r1]
 80270ce:	460f      	mov	r7, r1
 80270d0:	e776      	b.n	8026fc0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x4c>
 80270d2:	4688      	mov	r8, r1
 80270d4:	e7c4      	b.n	8027060 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xec>
 80270d6:	f1b8 0f00 	cmp.w	r8, #0
 80270da:	780c      	ldrb	r4, [r1, #0]
 80270dc:	460b      	mov	r3, r1
 80270de:	f6bf af68 	bge.w	8026fb2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x3e>
 80270e2:	460f      	mov	r7, r1
 80270e4:	4688      	mov	r8, r1
 80270e6:	46a2      	mov	sl, r4
 80270e8:	46a1      	mov	r9, r4
 80270ea:	e76c      	b.n	8026fc6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 80270ec:	f891 a000 	ldrb.w	sl, [r1]
 80270f0:	460f      	mov	r7, r1
 80270f2:	e768      	b.n	8026fc6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 80270f4:	4b03      	ldr	r3, [pc, #12]	; (8027104 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x190>)
 80270f6:	4a04      	ldr	r2, [pc, #16]	; (8027108 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x194>)
 80270f8:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80270fc:	4803      	ldr	r0, [pc, #12]	; (802710c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x198>)
 80270fe:	f000 ffeb 	bl	80280d8 <__assert_func>
 8027102:	bf00      	nop
 8027104:	0802b350 	.word	0x0802b350
 8027108:	0802b9c8 	.word	0x0802b9c8
 802710c:	0802b4d4 	.word	0x0802b4d4

08027110 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027114:	ed2d 8b0a 	vpush	{d8-d12}
 8027118:	eeb0 aa40 	vmov.f32	s20, s0
 802711c:	eef0 9a60 	vmov.f32	s19, s1
 8027120:	eeb0 9a41 	vmov.f32	s18, s2
 8027124:	eef0 8a62 	vmov.f32	s17, s5
 8027128:	eeb0 8a43 	vmov.f32	s16, s6
 802712c:	eeb0 ca44 	vmov.f32	s24, s8
 8027130:	eef0 ba64 	vmov.f32	s23, s9
 8027134:	eeb0 ba45 	vmov.f32	s22, s10
 8027138:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802713c:	b091      	sub	sp, #68	; 0x44
 802713e:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8027142:	e9dd 9525 	ldrd	r9, r5, [sp, #148]	; 0x94
 8027146:	900f      	str	r0, [sp, #60]	; 0x3c
 8027148:	4698      	mov	r8, r3
 802714a:	e9dd 0229 	ldrd	r0, r2, [sp, #164]	; 0xa4
 802714e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027150:	6841      	ldr	r1, [r0, #4]
 8027152:	fb01 2303 	mla	r3, r1, r3, r2
 8027156:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8027158:	6801      	ldr	r1, [r0, #0]
 802715a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 802715c:	6852      	ldr	r2, [r2, #4]
 802715e:	6800      	ldr	r0, [r0, #0]
 8027160:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
 8027164:	1d13      	adds	r3, r2, #4
 8027166:	9009      	str	r0, [sp, #36]	; 0x24
 8027168:	930c      	str	r3, [sp, #48]	; 0x30
 802716a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802716c:	2b00      	cmp	r3, #0
 802716e:	dc02      	bgt.n	8027176 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8027170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027172:	2b00      	cmp	r3, #0
 8027174:	dd66      	ble.n	8027244 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8027176:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027178:	f1b8 0f00 	cmp.w	r8, #0
 802717c:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 8027180:	b221      	sxth	r1, r4
 8027182:	fa0f f78e 	sxth.w	r7, lr
 8027186:	f340 81df 	ble.w	8027548 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802718a:	1e4e      	subs	r6, r1, #1
 802718c:	f107 3cff 	add.w	ip, r7, #4294967295
 8027190:	f8cd e01c 	str.w	lr, [sp, #28]
 8027194:	e9dd eb27 	ldrd	lr, fp, [sp, #156]	; 0x9c
 8027198:	ea5f 4329 	movs.w	r3, r9, asr #16
 802719c:	ea4f 4025 	mov.w	r0, r5, asr #16
 80271a0:	d405      	bmi.n	80271ae <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80271a2:	42b3      	cmp	r3, r6
 80271a4:	da03      	bge.n	80271ae <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80271a6:	2800      	cmp	r0, #0
 80271a8:	db01      	blt.n	80271ae <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80271aa:	4560      	cmp	r0, ip
 80271ac:	db4f      	blt.n	802724e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80271ae:	1c5a      	adds	r2, r3, #1
 80271b0:	d406      	bmi.n	80271c0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80271b2:	428a      	cmp	r2, r1
 80271b4:	dc04      	bgt.n	80271c0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80271b6:	1c42      	adds	r2, r0, #1
 80271b8:	d402      	bmi.n	80271c0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80271ba:	42ba      	cmp	r2, r7
 80271bc:	f340 8157 	ble.w	802746e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80271c0:	f1b8 0801 	subs.w	r8, r8, #1
 80271c4:	44f1      	add	r9, lr
 80271c6:	445d      	add	r5, fp
 80271c8:	f10a 0a04 	add.w	sl, sl, #4
 80271cc:	d1e4      	bne.n	8027198 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80271ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80271d0:	2b00      	cmp	r3, #0
 80271d2:	dd37      	ble.n	8027244 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80271d4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80271d8:	ee79 9aab 	vadd.f32	s19, s19, s23
 80271dc:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80271e0:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80271e4:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80271e8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80271ec:	ee76 6a68 	vsub.f32	s13, s12, s17
 80271f0:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80271f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80271f8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80271fc:	ee16 2a90 	vmov	r2, s13
 8027200:	3b01      	subs	r3, #1
 8027202:	930a      	str	r3, [sp, #40]	; 0x28
 8027204:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027206:	fb92 f3f3 	sdiv	r3, r2, r3
 802720a:	ee17 2a10 	vmov	r2, s14
 802720e:	eeb0 7a48 	vmov.f32	s14, s16
 8027212:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027216:	ee17 5a10 	vmov	r5, s14
 802721a:	eeb0 7a68 	vmov.f32	s14, s17
 802721e:	9327      	str	r3, [sp, #156]	; 0x9c
 8027220:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027222:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027226:	fb92 f3f3 	sdiv	r3, r2, r3
 802722a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802722c:	9328      	str	r3, [sp, #160]	; 0xa0
 802722e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027230:	ee17 9a10 	vmov	r9, s14
 8027234:	eeb0 8a67 	vmov.f32	s16, s15
 8027238:	eef0 8a46 	vmov.f32	s17, s12
 802723c:	bf14      	ite	ne
 802723e:	4698      	movne	r8, r3
 8027240:	4690      	moveq	r8, r2
 8027242:	e792      	b.n	802716a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8027244:	b011      	add	sp, #68	; 0x44
 8027246:	ecbd 8b0a 	vpop	{d8-d12}
 802724a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802724e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8027252:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027254:	f108 32ff 	add.w	r2, r8, #4294967295
 8027258:	fb00 9302 	mla	r3, r0, r2, r9
 802725c:	141b      	asrs	r3, r3, #16
 802725e:	9207      	str	r2, [sp, #28]
 8027260:	f100 80a6 	bmi.w	80273b0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8027264:	42b3      	cmp	r3, r6
 8027266:	f280 80a3 	bge.w	80273b0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802726a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802726c:	fb03 5302 	mla	r3, r3, r2, r5
 8027270:	141b      	asrs	r3, r3, #16
 8027272:	f100 809d 	bmi.w	80273b0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8027276:	3f01      	subs	r7, #1
 8027278:	42bb      	cmp	r3, r7
 802727a:	f280 8099 	bge.w	80273b0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802727e:	f1b8 0f00 	cmp.w	r8, #0
 8027282:	dda4      	ble.n	80271ce <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8027284:	f8cd a020 	str.w	sl, [sp, #32]
 8027288:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 802728c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8027290:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8027294:	e065      	b.n	8027362 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8027296:	f890 c001 	ldrb.w	ip, [r0, #1]
 802729a:	1844      	adds	r4, r0, r1
 802729c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80272a0:	44d4      	add	ip, sl
 80272a2:	2a00      	cmp	r2, #0
 80272a4:	d078      	beq.n	8027398 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80272a6:	5c40      	ldrb	r0, [r0, r1]
 80272a8:	7866      	ldrb	r6, [r4, #1]
 80272aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80272ae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80272b2:	4450      	add	r0, sl
 80272b4:	4456      	add	r6, sl
 80272b6:	b29b      	uxth	r3, r3
 80272b8:	b292      	uxth	r2, r2
 80272ba:	fb03 f402 	mul.w	r4, r3, r2
 80272be:	011b      	lsls	r3, r3, #4
 80272c0:	f89c 8000 	ldrb.w	r8, [ip]
 80272c4:	f89c e001 	ldrb.w	lr, [ip, #1]
 80272c8:	1b19      	subs	r1, r3, r4
 80272ca:	f89c c002 	ldrb.w	ip, [ip, #2]
 80272ce:	b289      	uxth	r1, r1
 80272d0:	fb01 fe0e 	mul.w	lr, r1, lr
 80272d4:	fb01 f808 	mul.w	r8, r1, r8
 80272d8:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80272dc:	fb01 f10c 	mul.w	r1, r1, ip
 80272e0:	b292      	uxth	r2, r2
 80272e2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80272e6:	f81a b00b 	ldrb.w	fp, [sl, fp]
 80272ea:	f897 c001 	ldrb.w	ip, [r7, #1]
 80272ee:	1a9b      	subs	r3, r3, r2
 80272f0:	78bf      	ldrb	r7, [r7, #2]
 80272f2:	b29b      	uxth	r3, r3
 80272f4:	fb03 880b 	mla	r8, r3, fp, r8
 80272f8:	fb03 ec0c 	mla	ip, r3, ip, lr
 80272fc:	fb03 1307 	mla	r3, r3, r7, r1
 8027300:	7881      	ldrb	r1, [r0, #2]
 8027302:	f890 b000 	ldrb.w	fp, [r0]
 8027306:	fb02 3301 	mla	r3, r2, r1, r3
 802730a:	f890 e001 	ldrb.w	lr, [r0, #1]
 802730e:	78b1      	ldrb	r1, [r6, #2]
 8027310:	fb02 880b 	mla	r8, r2, fp, r8
 8027314:	fb02 cc0e 	mla	ip, r2, lr, ip
 8027318:	fb04 3301 	mla	r3, r4, r1, r3
 802731c:	f896 b000 	ldrb.w	fp, [r6]
 8027320:	f896 e001 	ldrb.w	lr, [r6, #1]
 8027324:	0219      	lsls	r1, r3, #8
 8027326:	fb04 880b 	mla	r8, r4, fp, r8
 802732a:	fb04 cc0e 	mla	ip, r4, lr, ip
 802732e:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
 8027332:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8027334:	9a07      	ldr	r2, [sp, #28]
 8027336:	4489      	add	r9, r1
 8027338:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802733a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802733e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027342:	ea48 080c 	orr.w	r8, r8, ip
 8027346:	440d      	add	r5, r1
 8027348:	9908      	ldr	r1, [sp, #32]
 802734a:	3a01      	subs	r2, #1
 802734c:	ea48 0303 	orr.w	r3, r8, r3
 8027350:	9207      	str	r2, [sp, #28]
 8027352:	f841 3b04 	str.w	r3, [r1], #4
 8027356:	3201      	adds	r2, #1
 8027358:	9108      	str	r1, [sp, #32]
 802735a:	d024      	beq.n	80273a6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802735c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802735e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027362:	ea4f 4329 	mov.w	r3, r9, asr #16
 8027366:	1428      	asrs	r0, r5, #16
 8027368:	fb01 3000 	mla	r0, r1, r0, r3
 802736c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802736e:	f3c9 3303 	ubfx	r3, r9, #12, #4
 8027372:	f812 b000 	ldrb.w	fp, [r2, r0]
 8027376:	4410      	add	r0, r2
 8027378:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 802737c:	eb0a 070b 	add.w	r7, sl, fp
 8027380:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8027384:	2b00      	cmp	r3, #0
 8027386:	d186      	bne.n	8027296 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8027388:	b14a      	cbz	r2, 802739e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 802738a:	5c40      	ldrb	r0, [r0, r1]
 802738c:	463e      	mov	r6, r7
 802738e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027392:	4450      	add	r0, sl
 8027394:	46bc      	mov	ip, r7
 8027396:	e78e      	b.n	80272b6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8027398:	463e      	mov	r6, r7
 802739a:	4638      	mov	r0, r7
 802739c:	e78b      	b.n	80272b6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802739e:	463e      	mov	r6, r7
 80273a0:	4638      	mov	r0, r7
 80273a2:	46bc      	mov	ip, r7
 80273a4:	e787      	b.n	80272b6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80273a6:	e9dd a80d 	ldrd	sl, r8, [sp, #52]	; 0x34
 80273aa:	eb0a 0a88 	add.w	sl, sl, r8, lsl #2
 80273ae:	e70e      	b.n	80271ce <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80273b0:	f1b8 0f00 	cmp.w	r8, #0
 80273b4:	f77f af0b 	ble.w	80271ce <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80273b8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80273bc:	ea4f 4329 	mov.w	r3, r9, asr #16
 80273c0:	1428      	asrs	r0, r5, #16
 80273c2:	4677      	mov	r7, lr
 80273c4:	46d0      	mov	r8, sl
 80273c6:	f8cd a020 	str.w	sl, [sp, #32]
 80273ca:	f8dd a0b0 	ldr.w	sl, [sp, #176]	; 0xb0
 80273ce:	2b00      	cmp	r3, #0
 80273d0:	f3c9 3103 	ubfx	r1, r9, #12, #4
 80273d4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80273d8:	db28      	blt.n	802742c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80273da:	1e66      	subs	r6, r4, #1
 80273dc:	42b3      	cmp	r3, r6
 80273de:	da25      	bge.n	802742c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80273e0:	2800      	cmp	r0, #0
 80273e2:	db23      	blt.n	802742c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80273e4:	1e7e      	subs	r6, r7, #1
 80273e6:	42b0      	cmp	r0, r6
 80273e8:	da20      	bge.n	802742c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80273ea:	b224      	sxth	r4, r4
 80273ec:	fb00 3304 	mla	r3, r0, r4, r3
 80273f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80273f2:	5cc7      	ldrb	r7, [r0, r3]
 80273f4:	4403      	add	r3, r0
 80273f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80273f8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80273fc:	eb00 0c07 	add.w	ip, r0, r7
 8027400:	2900      	cmp	r1, #0
 8027402:	d04a      	beq.n	802749a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8027404:	785e      	ldrb	r6, [r3, #1]
 8027406:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802740a:	4406      	add	r6, r0
 802740c:	2a00      	cmp	r2, #0
 802740e:	f000 8098 	beq.w	8027542 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8027412:	1918      	adds	r0, r3, r4
 8027414:	7840      	ldrb	r0, [r0, #1]
 8027416:	5d1c      	ldrb	r4, [r3, r4]
 8027418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802741a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802741e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027422:	1818      	adds	r0, r3, r0
 8027424:	18e3      	adds	r3, r4, r3
 8027426:	900d      	str	r0, [sp, #52]	; 0x34
 8027428:	930e      	str	r3, [sp, #56]	; 0x38
 802742a:	e03b      	b.n	80274a4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802742c:	1c5e      	adds	r6, r3, #1
 802742e:	d405      	bmi.n	802743c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8027430:	42a6      	cmp	r6, r4
 8027432:	dc03      	bgt.n	802743c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8027434:	1c46      	adds	r6, r0, #1
 8027436:	d401      	bmi.n	802743c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8027438:	42be      	cmp	r6, r7
 802743a:	dd1f      	ble.n	802747c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802743c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802743e:	f1bb 0f00 	cmp.w	fp, #0
 8027442:	4499      	add	r9, r3
 8027444:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027446:	f108 0804 	add.w	r8, r8, #4
 802744a:	441d      	add	r5, r3
 802744c:	dd07      	ble.n	802745e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 802744e:	e9da 4702 	ldrd	r4, r7, [sl, #8]
 8027452:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027456:	ea4f 4329 	mov.w	r3, r9, asr #16
 802745a:	1428      	asrs	r0, r5, #16
 802745c:	e7b7      	b.n	80273ce <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 802745e:	e9dd 3a07 	ldrd	r3, sl, [sp, #28]
 8027462:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027466:	3301      	adds	r3, #1
 8027468:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
 802746c:	e6af      	b.n	80271ce <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802746e:	f108 32ff 	add.w	r2, r8, #4294967295
 8027472:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8027476:	4693      	mov	fp, r2
 8027478:	9207      	str	r2, [sp, #28]
 802747a:	e7a2      	b.n	80273c2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 802747c:	b23f      	sxth	r7, r7
 802747e:	b224      	sxth	r4, r4
 8027480:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8027484:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8027488:	e9cd 4700 	strd	r4, r7, [sp]
 802748c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802748e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027490:	4641      	mov	r1, r8
 8027492:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027494:	f7ff fd6e 	bl	8026f74 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>
 8027498:	e7d0      	b.n	802743c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802749a:	2a00      	cmp	r2, #0
 802749c:	d147      	bne.n	802752e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41e>
 802749e:	4666      	mov	r6, ip
 80274a0:	e9cd cc0d 	strd	ip, ip, [sp, #52]	; 0x34
 80274a4:	b28b      	uxth	r3, r1
 80274a6:	b292      	uxth	r2, r2
 80274a8:	fb03 f002 	mul.w	r0, r3, r2
 80274ac:	011b      	lsls	r3, r3, #4
 80274ae:	f896 e000 	ldrb.w	lr, [r6]
 80274b2:	7874      	ldrb	r4, [r6, #1]
 80274b4:	1a19      	subs	r1, r3, r0
 80274b6:	78b6      	ldrb	r6, [r6, #2]
 80274b8:	b289      	uxth	r1, r1
 80274ba:	fb01 f404 	mul.w	r4, r1, r4
 80274be:	fb01 fe0e 	mul.w	lr, r1, lr
 80274c2:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 80274c6:	fb01 f106 	mul.w	r1, r1, r6
 80274ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80274cc:	b292      	uxth	r2, r2
 80274ce:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80274d2:	5df7      	ldrb	r7, [r6, r7]
 80274d4:	1a9b      	subs	r3, r3, r2
 80274d6:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80274da:	f89c c002 	ldrb.w	ip, [ip, #2]
 80274de:	b29b      	uxth	r3, r3
 80274e0:	fb03 4606 	mla	r6, r3, r6, r4
 80274e4:	fb03 e707 	mla	r7, r3, r7, lr
 80274e8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80274ea:	fb03 130c 	mla	r3, r3, ip, r1
 80274ee:	7861      	ldrb	r1, [r4, #1]
 80274f0:	f894 c000 	ldrb.w	ip, [r4]
 80274f4:	78a4      	ldrb	r4, [r4, #2]
 80274f6:	fb02 6601 	mla	r6, r2, r1, r6
 80274fa:	fb02 770c 	mla	r7, r2, ip, r7
 80274fe:	fb02 3104 	mla	r1, r2, r4, r3
 8027502:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027504:	7862      	ldrb	r2, [r4, #1]
 8027506:	7823      	ldrb	r3, [r4, #0]
 8027508:	78a4      	ldrb	r4, [r4, #2]
 802750a:	fb00 6602 	mla	r6, r0, r2, r6
 802750e:	fb00 7303 	mla	r3, r0, r3, r7
 8027512:	fb00 1204 	mla	r2, r0, r4, r1
 8027516:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802751a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802751e:	0212      	lsls	r2, r2, #8
 8027520:	4333      	orrs	r3, r6
 8027522:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8027526:	4313      	orrs	r3, r2
 8027528:	f8c8 3000 	str.w	r3, [r8]
 802752c:	e786      	b.n	802743c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802752e:	5d1c      	ldrb	r4, [r3, r4]
 8027530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027532:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027536:	18e3      	adds	r3, r4, r3
 8027538:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 802753c:	930e      	str	r3, [sp, #56]	; 0x38
 802753e:	4666      	mov	r6, ip
 8027540:	e7b0      	b.n	80274a4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027542:	e9cd cc0d 	strd	ip, ip, [sp, #52]	; 0x34
 8027546:	e7ad      	b.n	80274a4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027548:	f43f ae41 	beq.w	80271ce <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802754c:	1e4e      	subs	r6, r1, #1
 802754e:	e680      	b.n	8027252 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>

08027550 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>:
 8027550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027554:	b087      	sub	sp, #28
 8027556:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 802755a:	e9dd 0412 	ldrd	r0, r4, [sp, #72]	; 0x48
 802755e:	fb04 070c 	mla	r7, r4, ip, r0
 8027562:	9100      	str	r1, [sp, #0]
 8027564:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
 8027568:	2c00      	cmp	r4, #0
 802756a:	eb02 0b07 	add.w	fp, r2, r7
 802756e:	f104 0501 	add.w	r5, r4, #1
 8027572:	f9bd 8044 	ldrsh.w	r8, [sp, #68]	; 0x44
 8027576:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
 802757a:	f89d 6054 	ldrb.w	r6, [sp, #84]	; 0x54
 802757e:	9101      	str	r1, [sp, #4]
 8027580:	db02      	blt.n	8027588 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x38>
 8027582:	45a0      	cmp	r8, r4
 8027584:	f300 811a 	bgt.w	80277bc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x26c>
 8027588:	2700      	movs	r7, #0
 802758a:	46be      	mov	lr, r7
 802758c:	46b9      	mov	r9, r7
 802758e:	463c      	mov	r4, r7
 8027590:	2d00      	cmp	r5, #0
 8027592:	db02      	blt.n	802759a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x4a>
 8027594:	45a8      	cmp	r8, r5
 8027596:	f300 812b 	bgt.w	80277f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2a0>
 802759a:	f04f 0c00 	mov.w	ip, #0
 802759e:	46e0      	mov	r8, ip
 80275a0:	4665      	mov	r5, ip
 80275a2:	f8cd c010 	str.w	ip, [sp, #16]
 80275a6:	f1ba 0f0f 	cmp.w	sl, #15
 80275aa:	f200 8167 	bhi.w	802787c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 80275ae:	2e0f      	cmp	r6, #15
 80275b0:	f200 8164 	bhi.w	802787c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 80275b4:	b2b2      	uxth	r2, r6
 80275b6:	fa1f f38a 	uxth.w	r3, sl
 80275ba:	fb02 f603 	mul.w	r6, r2, r3
 80275be:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80275c2:	b292      	uxth	r2, r2
 80275c4:	fb02 fa08 	mul.w	sl, r2, r8
 80275c8:	fb06 fb0c 	mul.w	fp, r6, ip
 80275cc:	011b      	lsls	r3, r3, #4
 80275ce:	1b98      	subs	r0, r3, r6
 80275d0:	b280      	uxth	r0, r0
 80275d2:	9002      	str	r0, [sp, #8]
 80275d4:	fb00 f007 	mul.w	r0, r0, r7
 80275d8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80275dc:	1a9b      	subs	r3, r3, r2
 80275de:	b29b      	uxth	r3, r3
 80275e0:	fb03 000e 	mla	r0, r3, lr, r0
 80275e4:	4450      	add	r0, sl
 80275e6:	4458      	add	r0, fp
 80275e8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80275ec:	9003      	str	r0, [sp, #12]
 80275ee:	2800      	cmp	r0, #0
 80275f0:	f000 80e1 	beq.w	80277b6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x266>
 80275f4:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80275f8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80275fc:	f009 1bff 	and.w	fp, r9, #16711935	; 0xff00ff
 8027600:	9105      	str	r1, [sp, #20]
 8027602:	d01d      	beq.n	8027640 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xf0>
 8027604:	fb0b fb0e 	mul.w	fp, fp, lr
 8027608:	fb01 fe0e 	mul.w	lr, r1, lr
 802760c:	ea4f 2a1b 	mov.w	sl, fp, lsr #8
 8027610:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8027614:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027618:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 802761c:	44d3      	add	fp, sl
 802761e:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8027622:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027626:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802762a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802762e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027632:	ea4b 0e0e 	orr.w	lr, fp, lr
 8027636:	f40e 417f 	and.w	r1, lr, #65280	; 0xff00
 802763a:	f00e 1bff 	and.w	fp, lr, #16711935	; 0xff00ff
 802763e:	9105      	str	r1, [sp, #20]
 8027640:	2fff      	cmp	r7, #255	; 0xff
 8027642:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8027646:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802764a:	d01b      	beq.n	8027684 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x134>
 802764c:	fb0e fe07 	mul.w	lr, lr, r7
 8027650:	fb04 f407 	mul.w	r4, r4, r7
 8027654:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 8027658:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 802765c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027660:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8027664:	44d6      	add	lr, sl
 8027666:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802766a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802766e:	0a24      	lsrs	r4, r4, #8
 8027670:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027674:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027678:	ea4e 0404 	orr.w	r4, lr, r4
 802767c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8027680:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027684:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027688:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 802768c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027690:	d019      	beq.n	80276c6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x176>
 8027692:	fb00 f008 	mul.w	r0, r0, r8
 8027696:	fb05 f508 	mul.w	r5, r5, r8
 802769a:	ea4f 2910 	mov.w	r9, r0, lsr #8
 802769e:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 80276a2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80276a6:	f505 7780 	add.w	r7, r5, #256	; 0x100
 80276aa:	4448      	add	r0, r9
 80276ac:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80276b0:	0a00      	lsrs	r0, r0, #8
 80276b2:	0a2d      	lsrs	r5, r5, #8
 80276b4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80276b8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80276bc:	4305      	orrs	r5, r0
 80276be:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 80276c2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80276c6:	9904      	ldr	r1, [sp, #16]
 80276c8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80276cc:	f001 1aff 	and.w	sl, r1, #16711935	; 0xff00ff
 80276d0:	f401 497f 	and.w	r9, r1, #65280	; 0xff00
 80276d4:	d01c      	beq.n	8027710 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x1c0>
 80276d6:	fb0a fa0c 	mul.w	sl, sl, ip
 80276da:	fb09 fc0c 	mul.w	ip, r9, ip
 80276de:	ea4f 281a 	mov.w	r8, sl, lsr #8
 80276e2:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80276e6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80276ea:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80276ee:	44c2      	add	sl, r8
 80276f0:	eb07 2c1c 	add.w	ip, r7, ip, lsr #8
 80276f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80276f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80276fc:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8027700:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027704:	ea4a 090c 	orr.w	r9, sl, ip
 8027708:	f009 1aff 	and.w	sl, r9, #16711935	; 0xff00ff
 802770c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027710:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8027714:	9903      	ldr	r1, [sp, #12]
 8027716:	fb01 fc08 	mul.w	ip, r1, r8
 802771a:	f10c 0701 	add.w	r7, ip, #1
 802771e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027722:	ea6f 2c17 	mvn.w	ip, r7, lsr #8
 8027726:	9902      	ldr	r1, [sp, #8]
 8027728:	fa5f f78c 	uxtb.w	r7, ip
 802772c:	fb04 f401 	mul.w	r4, r4, r1
 8027730:	fb0e fe01 	mul.w	lr, lr, r1
 8027734:	9905      	ldr	r1, [sp, #20]
 8027736:	fb0b ee03 	mla	lr, fp, r3, lr
 802773a:	fb01 4303 	mla	r3, r1, r3, r4
 802773e:	fb00 e002 	mla	r0, r0, r2, lr
 8027742:	fb05 3502 	mla	r5, r5, r2, r3
 8027746:	fb0a 0a06 	mla	sl, sl, r6, r0
 802774a:	fb09 5906 	mla	r9, r9, r6, r5
 802774e:	ea4f 261a 	mov.w	r6, sl, lsr #8
 8027752:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027756:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802775a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802775e:	ea46 0609 	orr.w	r6, r6, r9
 8027762:	b2f2      	uxtb	r2, r6
 8027764:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8027768:	0c36      	lsrs	r6, r6, #16
 802776a:	9900      	ldr	r1, [sp, #0]
 802776c:	fb12 f408 	smulbb	r4, r2, r8
 8027770:	fb13 f008 	smulbb	r0, r3, r8
 8027774:	fb16 f808 	smulbb	r8, r6, r8
 8027778:	780a      	ldrb	r2, [r1, #0]
 802777a:	784b      	ldrb	r3, [r1, #1]
 802777c:	788e      	ldrb	r6, [r1, #2]
 802777e:	fb02 4207 	mla	r2, r2, r7, r4
 8027782:	fb03 0307 	mla	r3, r3, r7, r0
 8027786:	fb06 8807 	mla	r8, r6, r7, r8
 802778a:	b292      	uxth	r2, r2
 802778c:	b29b      	uxth	r3, r3
 802778e:	fa1f f888 	uxth.w	r8, r8
 8027792:	1c54      	adds	r4, r2, #1
 8027794:	1c58      	adds	r0, r3, #1
 8027796:	f108 0701 	add.w	r7, r8, #1
 802779a:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 802779e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80277a2:	eb07 2818 	add.w	r8, r7, r8, lsr #8
 80277a6:	1212      	asrs	r2, r2, #8
 80277a8:	121b      	asrs	r3, r3, #8
 80277aa:	ea4f 2828 	mov.w	r8, r8, asr #8
 80277ae:	700a      	strb	r2, [r1, #0]
 80277b0:	704b      	strb	r3, [r1, #1]
 80277b2:	f881 8002 	strb.w	r8, [r1, #2]
 80277b6:	b007      	add	sp, #28
 80277b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80277bc:	2800      	cmp	r0, #0
 80277be:	db01      	blt.n	80277c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x274>
 80277c0:	4584      	cmp	ip, r0
 80277c2:	dc40      	bgt.n	8027846 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2f6>
 80277c4:	f04f 0e00 	mov.w	lr, #0
 80277c8:	46f1      	mov	r9, lr
 80277ca:	1c42      	adds	r2, r0, #1
 80277cc:	d42b      	bmi.n	8027826 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2d6>
 80277ce:	4594      	cmp	ip, r2
 80277d0:	dd29      	ble.n	8027826 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2d6>
 80277d2:	f1ba 0f00 	cmp.w	sl, #0
 80277d6:	d005      	beq.n	80277e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x294>
 80277d8:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80277dc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80277e0:	0e27      	lsrs	r7, r4, #24
 80277e2:	e6d5      	b.n	8027590 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x40>
 80277e4:	2d00      	cmp	r5, #0
 80277e6:	db41      	blt.n	802786c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x31c>
 80277e8:	45a8      	cmp	r8, r5
 80277ea:	dd3f      	ble.n	802786c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x31c>
 80277ec:	4657      	mov	r7, sl
 80277ee:	4654      	mov	r4, sl
 80277f0:	b1e6      	cbz	r6, 802782c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2dc>
 80277f2:	2800      	cmp	r0, #0
 80277f4:	db32      	blt.n	802785c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x30c>
 80277f6:	4584      	cmp	ip, r0
 80277f8:	dd30      	ble.n	802785c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x30c>
 80277fa:	f81b 200c 	ldrb.w	r2, [fp, ip]
 80277fe:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8027802:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8027806:	3001      	adds	r0, #1
 8027808:	d423      	bmi.n	8027852 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x302>
 802780a:	4584      	cmp	ip, r0
 802780c:	dd21      	ble.n	8027852 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x302>
 802780e:	f1ba 0f00 	cmp.w	sl, #0
 8027812:	d027      	beq.n	8027864 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x314>
 8027814:	44dc      	add	ip, fp
 8027816:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802781a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802781e:	9304      	str	r3, [sp, #16]
 8027820:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027824:	e6bf      	b.n	80275a6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x56>
 8027826:	2700      	movs	r7, #0
 8027828:	463c      	mov	r4, r7
 802782a:	e6b1      	b.n	8027590 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x40>
 802782c:	f1ba 0f0f 	cmp.w	sl, #15
 8027830:	d824      	bhi.n	802787c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 8027832:	fa1f f38a 	uxth.w	r3, sl
 8027836:	4632      	mov	r2, r6
 8027838:	46b3      	mov	fp, r6
 802783a:	46b2      	mov	sl, r6
 802783c:	9604      	str	r6, [sp, #16]
 802783e:	4635      	mov	r5, r6
 8027840:	46b4      	mov	ip, r6
 8027842:	46b0      	mov	r8, r6
 8027844:	e6c2      	b.n	80275cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x7c>
 8027846:	5dd2      	ldrb	r2, [r2, r7]
 8027848:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 802784c:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 8027850:	e7bb      	b.n	80277ca <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x27a>
 8027852:	f04f 0c00 	mov.w	ip, #0
 8027856:	f8cd c010 	str.w	ip, [sp, #16]
 802785a:	e6a4      	b.n	80275a6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x56>
 802785c:	f04f 0800 	mov.w	r8, #0
 8027860:	4645      	mov	r5, r8
 8027862:	e7d0      	b.n	8027806 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2b6>
 8027864:	f8cd a010 	str.w	sl, [sp, #16]
 8027868:	46d4      	mov	ip, sl
 802786a:	e6a0      	b.n	80275ae <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x5e>
 802786c:	4654      	mov	r4, sl
 802786e:	f8cd a010 	str.w	sl, [sp, #16]
 8027872:	4655      	mov	r5, sl
 8027874:	46d4      	mov	ip, sl
 8027876:	46d0      	mov	r8, sl
 8027878:	4657      	mov	r7, sl
 802787a:	e698      	b.n	80275ae <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x5e>
 802787c:	4b03      	ldr	r3, [pc, #12]	; (802788c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x33c>)
 802787e:	4a04      	ldr	r2, [pc, #16]	; (8027890 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x340>)
 8027880:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8027884:	4803      	ldr	r0, [pc, #12]	; (8027894 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x344>)
 8027886:	f000 fc27 	bl	80280d8 <__assert_func>
 802788a:	bf00      	nop
 802788c:	0802b350 	.word	0x0802b350
 8027890:	0802b9c8 	.word	0x0802b9c8
 8027894:	0802b4d4 	.word	0x0802b4d4

08027898 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802789c:	ed2d 8b08 	vpush	{d8-d11}
 80278a0:	b0a9      	sub	sp, #164	; 0xa4
 80278a2:	e9dd ba3b 	ldrd	fp, sl, [sp, #236]	; 0xec
 80278a6:	eeb0 aa40 	vmov.f32	s20, s0
 80278aa:	46d9      	mov	r9, fp
 80278ac:	eef0 9a60 	vmov.f32	s19, s1
 80278b0:	eeb0 9a41 	vmov.f32	s18, s2
 80278b4:	eef0 8a62 	vmov.f32	s17, s5
 80278b8:	eeb0 8a43 	vmov.f32	s16, s6
 80278bc:	eef0 ba44 	vmov.f32	s23, s8
 80278c0:	eeb0 ba64 	vmov.f32	s22, s9
 80278c4:	eef0 aa45 	vmov.f32	s21, s10
 80278c8:	46d3      	mov	fp, sl
 80278ca:	9022      	str	r0, [sp, #136]	; 0x88
 80278cc:	983f      	ldr	r0, [sp, #252]	; 0xfc
 80278ce:	9115      	str	r1, [sp, #84]	; 0x54
 80278d0:	9218      	str	r2, [sp, #96]	; 0x60
 80278d2:	6841      	ldr	r1, [r0, #4]
 80278d4:	9a40      	ldr	r2, [sp, #256]	; 0x100
 80278d6:	469e      	mov	lr, r3
 80278d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80278da:	6807      	ldr	r7, [r0, #0]
 80278dc:	fb01 2303 	mla	r3, r1, r3, r2
 80278e0:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80278e2:	9842      	ldr	r0, [sp, #264]	; 0x108
 80278e4:	6852      	ldr	r2, [r2, #4]
 80278e6:	f89d 110c 	ldrb.w	r1, [sp, #268]	; 0x10c
 80278ea:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80278ee:	6800      	ldr	r0, [r0, #0]
 80278f0:	1d13      	adds	r3, r2, #4
 80278f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80278f4:	b28b      	uxth	r3, r1
 80278f6:	9123      	str	r1, [sp, #140]	; 0x8c
 80278f8:	9011      	str	r0, [sp, #68]	; 0x44
 80278fa:	9317      	str	r3, [sp, #92]	; 0x5c
 80278fc:	9712      	str	r7, [sp, #72]	; 0x48
 80278fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027900:	2b00      	cmp	r3, #0
 8027902:	dc02      	bgt.n	802790a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8027904:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027906:	2b00      	cmp	r3, #0
 8027908:	dd68      	ble.n	80279dc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 802790a:	9b42      	ldr	r3, [sp, #264]	; 0x108
 802790c:	f1be 0f00 	cmp.w	lr, #0
 8027910:	e9d3 5702 	ldrd	r5, r7, [r3, #8]
 8027914:	b228      	sxth	r0, r5
 8027916:	b23e      	sxth	r6, r7
 8027918:	f340 83a0 	ble.w	802805c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c4>
 802791c:	e9dd 8a3d 	ldrd	r8, sl, [sp, #244]	; 0xf4
 8027920:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027922:	1e44      	subs	r4, r0, #1
 8027924:	f106 3cff 	add.w	ip, r6, #4294967295
 8027928:	9709      	str	r7, [sp, #36]	; 0x24
 802792a:	ea5f 4329 	movs.w	r3, r9, asr #16
 802792e:	ea4f 422b 	mov.w	r2, fp, asr #16
 8027932:	d405      	bmi.n	8027940 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027934:	42a3      	cmp	r3, r4
 8027936:	da03      	bge.n	8027940 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027938:	2a00      	cmp	r2, #0
 802793a:	db01      	blt.n	8027940 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802793c:	4562      	cmp	r2, ip
 802793e:	db52      	blt.n	80279e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8027940:	1c5f      	adds	r7, r3, #1
 8027942:	d406      	bmi.n	8027952 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8027944:	4287      	cmp	r7, r0
 8027946:	dc04      	bgt.n	8027952 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8027948:	1c57      	adds	r7, r2, #1
 802794a:	d402      	bmi.n	8027952 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802794c:	42b7      	cmp	r7, r6
 802794e:	f340 835f 	ble.w	8028010 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>
 8027952:	f1be 0e01 	subs.w	lr, lr, #1
 8027956:	44c1      	add	r9, r8
 8027958:	44d3      	add	fp, sl
 802795a:	f101 0104 	add.w	r1, r1, #4
 802795e:	d1e4      	bne.n	802792a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027960:	9112      	str	r1, [sp, #72]	; 0x48
 8027962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027964:	2b00      	cmp	r3, #0
 8027966:	dd39      	ble.n	80279dc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8027968:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802796c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027970:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027974:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027978:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802797c:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8027980:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027984:	ee76 6a68 	vsub.f32	s13, s12, s17
 8027988:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802798c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027990:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027994:	ee16 2a90 	vmov	r2, s13
 8027998:	3b01      	subs	r3, #1
 802799a:	9315      	str	r3, [sp, #84]	; 0x54
 802799c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802799e:	fb92 f3f3 	sdiv	r3, r2, r3
 80279a2:	ee17 2a10 	vmov	r2, s14
 80279a6:	eeb0 7a48 	vmov.f32	s14, s16
 80279aa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80279ae:	ee17 ba10 	vmov	fp, s14
 80279b2:	eeb0 7a68 	vmov.f32	s14, s17
 80279b6:	933d      	str	r3, [sp, #244]	; 0xf4
 80279b8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80279ba:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80279be:	fb92 f3f3 	sdiv	r3, r2, r3
 80279c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80279c4:	933e      	str	r3, [sp, #248]	; 0xf8
 80279c6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80279c8:	ee17 9a10 	vmov	r9, s14
 80279cc:	eeb0 8a67 	vmov.f32	s16, s15
 80279d0:	eef0 8a46 	vmov.f32	s17, s12
 80279d4:	bf14      	ite	ne
 80279d6:	469e      	movne	lr, r3
 80279d8:	4696      	moveq	lr, r2
 80279da:	e790      	b.n	80278fe <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80279dc:	b029      	add	sp, #164	; 0xa4
 80279de:	ecbd 8b08 	vpop	{d8-d11}
 80279e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80279e6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80279e8:	9112      	str	r1, [sp, #72]	; 0x48
 80279ea:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80279ec:	f10e 32ff 	add.w	r2, lr, #4294967295
 80279f0:	fb01 9302 	mla	r3, r1, r2, r9
 80279f4:	141b      	asrs	r3, r3, #16
 80279f6:	920a      	str	r2, [sp, #40]	; 0x28
 80279f8:	f100 816a 	bmi.w	8027cd0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80279fc:	42a3      	cmp	r3, r4
 80279fe:	f280 8167 	bge.w	8027cd0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8027a02:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8027a04:	fb03 b302 	mla	r3, r3, r2, fp
 8027a08:	141b      	asrs	r3, r3, #16
 8027a0a:	f100 8161 	bmi.w	8027cd0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8027a0e:	3e01      	subs	r6, #1
 8027a10:	42b3      	cmp	r3, r6
 8027a12:	f280 815d 	bge.w	8027cd0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8027a16:	f1be 0f00 	cmp.w	lr, #0
 8027a1a:	dda2      	ble.n	8027962 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8027a1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027a1e:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 8027a22:	3304      	adds	r3, #4
 8027a24:	9309      	str	r3, [sp, #36]	; 0x24
 8027a26:	f8cd b0f0 	str.w	fp, [sp, #240]	; 0xf0
 8027a2a:	4606      	mov	r6, r0
 8027a2c:	465b      	mov	r3, fp
 8027a2e:	e12a      	b.n	8027c86 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8027a30:	785f      	ldrb	r7, [r3, #1]
 8027a32:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8027a36:	9713      	str	r7, [sp, #76]	; 0x4c
 8027a38:	0e3f      	lsrs	r7, r7, #24
 8027a3a:	970c      	str	r7, [sp, #48]	; 0x30
 8027a3c:	b16a      	cbz	r2, 8027a5a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027a3e:	199f      	adds	r7, r3, r6
 8027a40:	5d9b      	ldrb	r3, [r3, r6]
 8027a42:	462e      	mov	r6, r5
 8027a44:	787f      	ldrb	r7, [r7, #1]
 8027a46:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027a4a:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8027a4e:	9314      	str	r3, [sp, #80]	; 0x50
 8027a50:	9516      	str	r5, [sp, #88]	; 0x58
 8027a52:	0e1b      	lsrs	r3, r3, #24
 8027a54:	0e2d      	lsrs	r5, r5, #24
 8027a56:	950e      	str	r5, [sp, #56]	; 0x38
 8027a58:	930d      	str	r3, [sp, #52]	; 0x34
 8027a5a:	fa1f fc81 	uxth.w	ip, r1
 8027a5e:	b292      	uxth	r2, r2
 8027a60:	fb0c f602 	mul.w	r6, ip, r2
 8027a64:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8027a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027a6a:	ebac 0706 	sub.w	r7, ip, r6
 8027a6e:	b2bf      	uxth	r7, r7
 8027a70:	fb07 f103 	mul.w	r1, r7, r3
 8027a74:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8027a78:	b292      	uxth	r2, r2
 8027a7a:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8027a7e:	1a9b      	subs	r3, r3, r2
 8027a80:	b29b      	uxth	r3, r3
 8027a82:	fb03 1104 	mla	r1, r3, r4, r1
 8027a86:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027a88:	fb02 1105 	mla	r1, r2, r5, r1
 8027a8c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027a8e:	fb06 1105 	mla	r1, r6, r5, r1
 8027a92:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027a96:	2900      	cmp	r1, #0
 8027a98:	f000 80e3 	beq.w	8027c62 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8027a9c:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8027aa0:	2cff      	cmp	r4, #255	; 0xff
 8027aa2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027aa6:	950f      	str	r5, [sp, #60]	; 0x3c
 8027aa8:	9010      	str	r0, [sp, #64]	; 0x40
 8027aaa:	d01e      	beq.n	8027aea <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8027aac:	fb00 f004 	mul.w	r0, r0, r4
 8027ab0:	fb05 fe04 	mul.w	lr, r5, r4
 8027ab4:	4604      	mov	r4, r0
 8027ab6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8027aba:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8027abe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027ac2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027ac6:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8027aca:	44e6      	add	lr, ip
 8027acc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027ad0:	0a24      	lsrs	r4, r4, #8
 8027ad2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027ad6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027ada:	ea4e 0e04 	orr.w	lr, lr, r4
 8027ade:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8027ae2:	900f      	str	r0, [sp, #60]	; 0x3c
 8027ae4:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 8027ae8:	9010      	str	r0, [sp, #64]	; 0x40
 8027aea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027aec:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 8027af0:	f400 487f 	and.w	r8, r0, #65280	; 0xff00
 8027af4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027af6:	28ff      	cmp	r0, #255	; 0xff
 8027af8:	d01c      	beq.n	8027b34 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8027afa:	fb0e fe00 	mul.w	lr, lr, r0
 8027afe:	fb08 f800 	mul.w	r8, r8, r0
 8027b02:	ea4f 241e 	mov.w	r4, lr, lsr #8
 8027b06:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027b0a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027b0e:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8027b12:	44a6      	add	lr, r4
 8027b14:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8027b18:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027b1c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027b20:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027b24:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027b28:	ea4e 0808 	orr.w	r8, lr, r8
 8027b2c:	f008 1eff 	and.w	lr, r8, #16711935	; 0xff00ff
 8027b30:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027b34:	9814      	ldr	r0, [sp, #80]	; 0x50
 8027b36:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 8027b3a:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 8027b3e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027b40:	28ff      	cmp	r0, #255	; 0xff
 8027b42:	d01c      	beq.n	8027b7e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8027b44:	fb0c fc00 	mul.w	ip, ip, r0
 8027b48:	fb0a fa00 	mul.w	sl, sl, r0
 8027b4c:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8027b50:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027b54:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027b58:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8027b5c:	44a4      	add	ip, r4
 8027b5e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8027b62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027b66:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027b6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027b6e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027b72:	ea4c 0a0a 	orr.w	sl, ip, sl
 8027b76:	f00a 1cff 	and.w	ip, sl, #16711935	; 0xff00ff
 8027b7a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027b7e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8027b80:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8027b84:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8027b88:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027b8a:	2cff      	cmp	r4, #255	; 0xff
 8027b8c:	d019      	beq.n	8027bc2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8027b8e:	fb00 f004 	mul.w	r0, r0, r4
 8027b92:	fb0b fb04 	mul.w	fp, fp, r4
 8027b96:	0a04      	lsrs	r4, r0, #8
 8027b98:	f004 15ff 	and.w	r5, r4, #16711935	; 0xff00ff
 8027b9c:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8027ba0:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 8027ba4:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 8027ba8:	4428      	add	r0, r5
 8027baa:	0a00      	lsrs	r0, r0, #8
 8027bac:	0a24      	lsrs	r4, r4, #8
 8027bae:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027bb2:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8027bb6:	ea40 0b0b 	orr.w	fp, r0, fp
 8027bba:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 8027bbe:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027bc2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8027bc4:	fb0e fe07 	mul.w	lr, lr, r7
 8027bc8:	fb01 f105 	mul.w	r1, r1, r5
 8027bcc:	1c4c      	adds	r4, r1, #1
 8027bce:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8027bd2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8027bd6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027bd8:	fb08 f707 	mul.w	r7, r8, r7
 8027bdc:	fb04 ee03 	mla	lr, r4, r3, lr
 8027be0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027be2:	fb0c ee02 	mla	lr, ip, r2, lr
 8027be6:	fb04 7703 	mla	r7, r4, r3, r7
 8027bea:	fb0a 7702 	mla	r7, sl, r2, r7
 8027bee:	fb00 ee06 	mla	lr, r0, r6, lr
 8027bf2:	fb0b 7706 	mla	r7, fp, r6, r7
 8027bf6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027bfa:	0a3f      	lsrs	r7, r7, #8
 8027bfc:	f407 437f 	and.w	r3, r7, #65280	; 0xff00
 8027c00:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027c04:	ea4e 0303 	orr.w	r3, lr, r3
 8027c08:	b2df      	uxtb	r7, r3
 8027c0a:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8027c0e:	0c1b      	lsrs	r3, r3, #16
 8027c10:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8027c12:	fb17 f705 	smulbb	r7, r7, r5
 8027c16:	fb16 f605 	smulbb	r6, r6, r5
 8027c1a:	fb13 f305 	smulbb	r3, r3, r5
 8027c1e:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 8027c22:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 8027c26:	f814 cc02 	ldrb.w	ip, [r4, #-2]
 8027c2a:	b2c9      	uxtb	r1, r1
 8027c2c:	fb00 7001 	mla	r0, r0, r1, r7
 8027c30:	fb02 6201 	mla	r2, r2, r1, r6
 8027c34:	fb0c 3101 	mla	r1, ip, r1, r3
 8027c38:	b280      	uxth	r0, r0
 8027c3a:	b292      	uxth	r2, r2
 8027c3c:	b289      	uxth	r1, r1
 8027c3e:	1c47      	adds	r7, r0, #1
 8027c40:	1c56      	adds	r6, r2, #1
 8027c42:	1c4b      	adds	r3, r1, #1
 8027c44:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8027c48:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8027c4c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027c50:	1200      	asrs	r0, r0, #8
 8027c52:	1212      	asrs	r2, r2, #8
 8027c54:	1209      	asrs	r1, r1, #8
 8027c56:	f804 0c04 	strb.w	r0, [r4, #-4]
 8027c5a:	f804 2c03 	strb.w	r2, [r4, #-3]
 8027c5e:	f804 1c02 	strb.w	r1, [r4, #-2]
 8027c62:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8027c64:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8027c66:	4491      	add	r9, r2
 8027c68:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8027c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027c6c:	440a      	add	r2, r1
 8027c6e:	923c      	str	r2, [sp, #240]	; 0xf0
 8027c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027c72:	3b01      	subs	r3, #1
 8027c74:	930a      	str	r3, [sp, #40]	; 0x28
 8027c76:	3204      	adds	r2, #4
 8027c78:	3301      	adds	r3, #1
 8027c7a:	9209      	str	r2, [sp, #36]	; 0x24
 8027c7c:	d021      	beq.n	8027cc2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8027c7e:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8027c80:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8027c84:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8027c86:	ea4f 4229 	mov.w	r2, r9, asr #16
 8027c8a:	141b      	asrs	r3, r3, #16
 8027c8c:	fb06 2303 	mla	r3, r6, r3, r2
 8027c90:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027c92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027c94:	5ce2      	ldrb	r2, [r4, r3]
 8027c96:	f3c9 3103 	ubfx	r1, r9, #12, #4
 8027c9a:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 8027c9e:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8027ca0:	4423      	add	r3, r4
 8027ca2:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8027ca6:	0e04      	lsrs	r4, r0, #24
 8027ca8:	2900      	cmp	r1, #0
 8027caa:	f47f aec1 	bne.w	8027a30 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8027cae:	2a00      	cmp	r2, #0
 8027cb0:	f43f aed3 	beq.w	8027a5a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027cb4:	5d9b      	ldrb	r3, [r3, r6]
 8027cb6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027cba:	9314      	str	r3, [sp, #80]	; 0x50
 8027cbc:	0e1b      	lsrs	r3, r3, #24
 8027cbe:	930d      	str	r3, [sp, #52]	; 0x34
 8027cc0:	e6cb      	b.n	8027a5a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027cc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027cc4:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 8027cc8:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 8027ccc:	9312      	str	r3, [sp, #72]	; 0x48
 8027cce:	e648      	b.n	8027962 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8027cd0:	f1be 0f00 	cmp.w	lr, #0
 8027cd4:	f77f ae45 	ble.w	8027962 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8027cd8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8027cdc:	ea4f 4329 	mov.w	r3, r9, asr #16
 8027ce0:	ea4f 422b 	mov.w	r2, fp, asr #16
 8027ce4:	2b00      	cmp	r3, #0
 8027ce6:	46be      	mov	lr, r7
 8027ce8:	4629      	mov	r1, r5
 8027cea:	e9dd 653d 	ldrd	r6, r5, [sp, #244]	; 0xf4
 8027cee:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8027cf2:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8027cf4:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8027cf8:	f3cb 3703 	ubfx	r7, fp, #12, #4
 8027cfc:	f2c0 815d 	blt.w	8027fba <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8027d00:	f101 3cff 	add.w	ip, r1, #4294967295
 8027d04:	4563      	cmp	r3, ip
 8027d06:	f280 8158 	bge.w	8027fba <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8027d0a:	2a00      	cmp	r2, #0
 8027d0c:	f2c0 8155 	blt.w	8027fba <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8027d10:	f10e 3cff 	add.w	ip, lr, #4294967295
 8027d14:	4562      	cmp	r2, ip
 8027d16:	f280 8150 	bge.w	8027fba <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8027d1a:	fa0f fc81 	sxth.w	ip, r1
 8027d1e:	fb02 330c 	mla	r3, r2, ip, r3
 8027d22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027d24:	5cd1      	ldrb	r1, [r2, r3]
 8027d26:	18d3      	adds	r3, r2, r3
 8027d28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027d2a:	469e      	mov	lr, r3
 8027d2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027d30:	0e19      	lsrs	r1, r3, #24
 8027d32:	9309      	str	r3, [sp, #36]	; 0x24
 8027d34:	910f      	str	r1, [sp, #60]	; 0x3c
 8027d36:	2800      	cmp	r0, #0
 8027d38:	f000 8171 	beq.w	802801e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x786>
 8027d3c:	4671      	mov	r1, lr
 8027d3e:	f89e e001 	ldrb.w	lr, [lr, #1]
 8027d42:	4613      	mov	r3, r2
 8027d44:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8027d48:	9224      	str	r2, [sp, #144]	; 0x90
 8027d4a:	0e12      	lsrs	r2, r2, #24
 8027d4c:	921a      	str	r2, [sp, #104]	; 0x68
 8027d4e:	2f00      	cmp	r7, #0
 8027d50:	f040 8171 	bne.w	8028036 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79e>
 8027d54:	b280      	uxth	r0, r0
 8027d56:	b2bf      	uxth	r7, r7
 8027d58:	fb00 f207 	mul.w	r2, r0, r7
 8027d5c:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 8027d60:	ebac 0002 	sub.w	r0, ip, r2
 8027d64:	b280      	uxth	r0, r0
 8027d66:	4603      	mov	r3, r0
 8027d68:	9010      	str	r0, [sp, #64]	; 0x40
 8027d6a:	981a      	ldr	r0, [sp, #104]	; 0x68
 8027d6c:	ebc2 1707 	rsb	r7, r2, r7, lsl #4
 8027d70:	fb03 f000 	mul.w	r0, r3, r0
 8027d74:	fa1f fe87 	uxth.w	lr, r7
 8027d78:	f5cc 7780 	rsb	r7, ip, #256	; 0x100
 8027d7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027d7e:	eba7 070e 	sub.w	r7, r7, lr
 8027d82:	b2bf      	uxth	r7, r7
 8027d84:	fb07 0003 	mla	r0, r7, r3, r0
 8027d88:	9719      	str	r7, [sp, #100]	; 0x64
 8027d8a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8027d8c:	fb0e 0007 	mla	r0, lr, r7, r0
 8027d90:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8027d92:	fb02 0007 	mla	r0, r2, r7, r0
 8027d96:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027d9a:	900f      	str	r0, [sp, #60]	; 0x3c
 8027d9c:	2800      	cmp	r0, #0
 8027d9e:	f000 80f6 	beq.w	8027f8e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8027da2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027da4:	2bff      	cmp	r3, #255	; 0xff
 8027da6:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 8027daa:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027dae:	901d      	str	r0, [sp, #116]	; 0x74
 8027db0:	9109      	str	r1, [sp, #36]	; 0x24
 8027db2:	d01b      	beq.n	8027dec <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x554>
 8027db4:	fb01 f103 	mul.w	r1, r1, r3
 8027db8:	fb00 f003 	mul.w	r0, r0, r3
 8027dbc:	460b      	mov	r3, r1
 8027dbe:	0a01      	lsrs	r1, r0, #8
 8027dc0:	f100 1701 	add.w	r7, r0, #65537	; 0x10001
 8027dc4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027dc8:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8027dcc:	4439      	add	r1, r7
 8027dce:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027dd2:	0a09      	lsrs	r1, r1, #8
 8027dd4:	0a1b      	lsrs	r3, r3, #8
 8027dd6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027dda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027dde:	430b      	orrs	r3, r1
 8027de0:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8027de4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027de8:	911d      	str	r1, [sp, #116]	; 0x74
 8027dea:	9309      	str	r3, [sp, #36]	; 0x24
 8027dec:	9924      	ldr	r1, [sp, #144]	; 0x90
 8027dee:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8027df0:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8027df4:	2fff      	cmp	r7, #255	; 0xff
 8027df6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027dfa:	931e      	str	r3, [sp, #120]	; 0x78
 8027dfc:	911f      	str	r1, [sp, #124]	; 0x7c
 8027dfe:	d01c      	beq.n	8027e3a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 8027e00:	fb01 f107 	mul.w	r1, r1, r7
 8027e04:	fb03 f307 	mul.w	r3, r3, r7
 8027e08:	460f      	mov	r7, r1
 8027e0a:	0a19      	lsrs	r1, r3, #8
 8027e0c:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8027e10:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027e14:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8027e18:	4401      	add	r1, r0
 8027e1a:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8027e1e:	0a09      	lsrs	r1, r1, #8
 8027e20:	0a1b      	lsrs	r3, r3, #8
 8027e22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027e26:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027e2a:	ea41 0003 	orr.w	r0, r1, r3
 8027e2e:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8027e32:	931e      	str	r3, [sp, #120]	; 0x78
 8027e34:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8027e38:	931f      	str	r3, [sp, #124]	; 0x7c
 8027e3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027e3c:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8027e40:	f403 4c7f 	and.w	ip, r3, #65280	; 0xff00
 8027e44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027e46:	9120      	str	r1, [sp, #128]	; 0x80
 8027e48:	2bff      	cmp	r3, #255	; 0xff
 8027e4a:	d01b      	beq.n	8027e84 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8027e4c:	fb01 f103 	mul.w	r1, r1, r3
 8027e50:	fb0c fc03 	mul.w	ip, ip, r3
 8027e54:	0a08      	lsrs	r0, r1, #8
 8027e56:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 8027e5a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027e5e:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 8027e62:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027e66:	4401      	add	r1, r0
 8027e68:	0a09      	lsrs	r1, r1, #8
 8027e6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027e6e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027e72:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027e76:	ea41 0c0c 	orr.w	ip, r1, ip
 8027e7a:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8027e7e:	9320      	str	r3, [sp, #128]	; 0x80
 8027e80:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027e84:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027e86:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8027e8a:	f400 477f 	and.w	r7, r0, #65280	; 0xff00
 8027e8e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8027e90:	9321      	str	r3, [sp, #132]	; 0x84
 8027e92:	28ff      	cmp	r0, #255	; 0xff
 8027e94:	d019      	beq.n	8027eca <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 8027e96:	fb03 f300 	mul.w	r3, r3, r0
 8027e9a:	fb07 f700 	mul.w	r7, r7, r0
 8027e9e:	0a18      	lsrs	r0, r3, #8
 8027ea0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027ea4:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8027ea8:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8027eac:	4418      	add	r0, r3
 8027eae:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8027eb2:	0a00      	lsrs	r0, r0, #8
 8027eb4:	0a3f      	lsrs	r7, r7, #8
 8027eb6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027eba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027ebe:	4307      	orrs	r7, r0
 8027ec0:	f007 13ff 	and.w	r3, r7, #16711935	; 0xff00ff
 8027ec4:	9321      	str	r3, [sp, #132]	; 0x84
 8027ec6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027eca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027ecc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8027ece:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027ed0:	fb01 f100 	mul.w	r1, r1, r0
 8027ed4:	4608      	mov	r0, r1
 8027ed6:	3101      	adds	r1, #1
 8027ed8:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027edc:	ea6f 2110 	mvn.w	r1, r0, lsr #8
 8027ee0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027ee2:	9125      	str	r1, [sp, #148]	; 0x94
 8027ee4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8027ee6:	fb01 f100 	mul.w	r1, r1, r0
 8027eea:	910f      	str	r1, [sp, #60]	; 0x3c
 8027eec:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8027eee:	fb01 f100 	mul.w	r1, r1, r0
 8027ef2:	9110      	str	r1, [sp, #64]	; 0x40
 8027ef4:	991d      	ldr	r1, [sp, #116]	; 0x74
 8027ef6:	4608      	mov	r0, r1
 8027ef8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027efa:	fb00 1103 	mla	r1, r0, r3, r1
 8027efe:	910f      	str	r1, [sp, #60]	; 0x3c
 8027f00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027f02:	4608      	mov	r0, r1
 8027f04:	9910      	ldr	r1, [sp, #64]	; 0x40
 8027f06:	fb00 1003 	mla	r0, r0, r3, r1
 8027f0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027f0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027f0e:	fb0c 000e 	mla	r0, ip, lr, r0
 8027f12:	fb03 110e 	mla	r1, r3, lr, r1
 8027f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027f18:	f89a c002 	ldrb.w	ip, [sl, #2]
 8027f1c:	fb03 1102 	mla	r1, r3, r2, r1
 8027f20:	fb07 0302 	mla	r3, r7, r2, r0
 8027f24:	0a0a      	lsrs	r2, r1, #8
 8027f26:	0a1b      	lsrs	r3, r3, #8
 8027f28:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027f2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027f30:	4313      	orrs	r3, r2
 8027f32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027f34:	b2df      	uxtb	r7, r3
 8027f36:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8027f3a:	0c1b      	lsrs	r3, r3, #16
 8027f3c:	fb17 f702 	smulbb	r7, r7, r2
 8027f40:	fb10 f002 	smulbb	r0, r0, r2
 8027f44:	fb13 f302 	smulbb	r3, r3, r2
 8027f48:	f89d e094 	ldrb.w	lr, [sp, #148]	; 0x94
 8027f4c:	f89a 1000 	ldrb.w	r1, [sl]
 8027f50:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8027f54:	fb01 710e 	mla	r1, r1, lr, r7
 8027f58:	fb02 020e 	mla	r2, r2, lr, r0
 8027f5c:	fb0c 330e 	mla	r3, ip, lr, r3
 8027f60:	b297      	uxth	r7, r2
 8027f62:	fa1f fc81 	uxth.w	ip, r1
 8027f66:	b298      	uxth	r0, r3
 8027f68:	f10c 0101 	add.w	r1, ip, #1
 8027f6c:	1c7a      	adds	r2, r7, #1
 8027f6e:	1c43      	adds	r3, r0, #1
 8027f70:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8027f74:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8027f78:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027f7c:	1209      	asrs	r1, r1, #8
 8027f7e:	1212      	asrs	r2, r2, #8
 8027f80:	121b      	asrs	r3, r3, #8
 8027f82:	f88a 1000 	strb.w	r1, [sl]
 8027f86:	f88a 2001 	strb.w	r2, [sl, #1]
 8027f8a:	f88a 3002 	strb.w	r3, [sl, #2]
 8027f8e:	f1b8 0f00 	cmp.w	r8, #0
 8027f92:	f10a 0a04 	add.w	sl, sl, #4
 8027f96:	44b1      	add	r9, r6
 8027f98:	44ab      	add	fp, r5
 8027f9a:	dd30      	ble.n	8027ffe <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x766>
 8027f9c:	e9d4 1e02 	ldrd	r1, lr, [r4, #8]
 8027fa0:	ea4f 4329 	mov.w	r3, r9, asr #16
 8027fa4:	2b00      	cmp	r3, #0
 8027fa6:	f108 38ff 	add.w	r8, r8, #4294967295
 8027faa:	ea4f 422b 	mov.w	r2, fp, asr #16
 8027fae:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8027fb2:	f3cb 3703 	ubfx	r7, fp, #12, #4
 8027fb6:	f6bf aea3 	bge.w	8027d00 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8027fba:	f113 0c01 	adds.w	ip, r3, #1
 8027fbe:	d4e6      	bmi.n	8027f8e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8027fc0:	458c      	cmp	ip, r1
 8027fc2:	dce4      	bgt.n	8027f8e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8027fc4:	f112 0c01 	adds.w	ip, r2, #1
 8027fc8:	d4e1      	bmi.n	8027f8e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8027fca:	45f4      	cmp	ip, lr
 8027fcc:	dcdf      	bgt.n	8027f8e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8027fce:	fa0f fe8e 	sxth.w	lr, lr
 8027fd2:	b209      	sxth	r1, r1
 8027fd4:	e9cd 1e00 	strd	r1, lr, [sp]
 8027fd8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8027fda:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8027fde:	e9cd 7105 	strd	r7, r1, [sp, #20]
 8027fe2:	9302      	str	r3, [sp, #8]
 8027fe4:	4651      	mov	r1, sl
 8027fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027fe8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027fea:	9822      	ldr	r0, [sp, #136]	; 0x88
 8027fec:	f7ff fab0 	bl	8027550 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>
 8027ff0:	f1b8 0f00 	cmp.w	r8, #0
 8027ff4:	f10a 0a04 	add.w	sl, sl, #4
 8027ff8:	44b1      	add	r9, r6
 8027ffa:	44ab      	add	fp, r5
 8027ffc:	dcce      	bgt.n	8027f9c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8027ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028000:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8028002:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8028006:	3301      	adds	r3, #1
 8028008:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802800c:	9312      	str	r3, [sp, #72]	; 0x48
 802800e:	e4a8      	b.n	8027962 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8028010:	9112      	str	r1, [sp, #72]	; 0x48
 8028012:	f10e 31ff 	add.w	r1, lr, #4294967295
 8028016:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8028018:	910a      	str	r1, [sp, #40]	; 0x28
 802801a:	4688      	mov	r8, r1
 802801c:	e662      	b.n	8027ce4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802801e:	2f00      	cmp	r7, #0
 8028020:	f43f ae98 	beq.w	8027d54 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8028024:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028026:	f81e 200c 	ldrb.w	r2, [lr, ip]
 802802a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802802e:	0e13      	lsrs	r3, r2, #24
 8028030:	9226      	str	r2, [sp, #152]	; 0x98
 8028032:	931b      	str	r3, [sp, #108]	; 0x6c
 8028034:	e68e      	b.n	8027d54 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8028036:	eb01 0e0c 	add.w	lr, r1, ip
 802803a:	f89e e001 	ldrb.w	lr, [lr, #1]
 802803e:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8028042:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 8028046:	4611      	mov	r1, r2
 8028048:	9227      	str	r2, [sp, #156]	; 0x9c
 802804a:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 802804e:	4613      	mov	r3, r2
 8028050:	9226      	str	r2, [sp, #152]	; 0x98
 8028052:	0e0a      	lsrs	r2, r1, #24
 8028054:	921c      	str	r2, [sp, #112]	; 0x70
 8028056:	0e1a      	lsrs	r2, r3, #24
 8028058:	921b      	str	r2, [sp, #108]	; 0x6c
 802805a:	e67b      	b.n	8027d54 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 802805c:	f43f ac81 	beq.w	8027962 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8028060:	1e44      	subs	r4, r0, #1
 8028062:	e4c2      	b.n	80279ea <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>

08028064 <_GLOBAL__sub_I__ZN8touchgfx19GPU2DVectorRenderer5setupERKNS_6WidgetERKNS_4RectE>:
 8028064:	2200      	movs	r2, #0
 8028066:	4b02      	ldr	r3, [pc, #8]	; (8028070 <_GLOBAL__sub_I__ZN8touchgfx19GPU2DVectorRenderer5setupERKNS_6WidgetERKNS_4RectE+0xc>)
 8028068:	e9c3 2200 	strd	r2, r2, [r3]
 802806c:	4770      	bx	lr
 802806e:	bf00      	nop
 8028070:	201983e4 	.word	0x201983e4

08028074 <__aeabi_atexit>:
 8028074:	460b      	mov	r3, r1
 8028076:	4601      	mov	r1, r0
 8028078:	4618      	mov	r0, r3
 802807a:	f000 b851 	b.w	8028120 <__cxa_atexit>

0802807e <_ZdlPvj>:
 802807e:	f000 b812 	b.w	80280a6 <_ZdlPv>

08028082 <__cxa_guard_acquire>:
 8028082:	6803      	ldr	r3, [r0, #0]
 8028084:	07db      	lsls	r3, r3, #31
 8028086:	d406      	bmi.n	8028096 <__cxa_guard_acquire+0x14>
 8028088:	7843      	ldrb	r3, [r0, #1]
 802808a:	b103      	cbz	r3, 802808e <__cxa_guard_acquire+0xc>
 802808c:	deff      	udf	#255	; 0xff
 802808e:	2301      	movs	r3, #1
 8028090:	7043      	strb	r3, [r0, #1]
 8028092:	4618      	mov	r0, r3
 8028094:	4770      	bx	lr
 8028096:	2000      	movs	r0, #0
 8028098:	4770      	bx	lr

0802809a <__cxa_guard_release>:
 802809a:	2301      	movs	r3, #1
 802809c:	6003      	str	r3, [r0, #0]
 802809e:	4770      	bx	lr

080280a0 <__cxa_pure_virtual>:
 80280a0:	b508      	push	{r3, lr}
 80280a2:	f000 f80d 	bl	80280c0 <_ZSt9terminatev>

080280a6 <_ZdlPv>:
 80280a6:	f000 b88d 	b.w	80281c4 <free>

080280aa <_ZN10__cxxabiv111__terminateEPFvvE>:
 80280aa:	b508      	push	{r3, lr}
 80280ac:	4780      	blx	r0
 80280ae:	f000 f80c 	bl	80280ca <abort>
	...

080280b4 <_ZSt13get_terminatev>:
 80280b4:	4b01      	ldr	r3, [pc, #4]	; (80280bc <_ZSt13get_terminatev+0x8>)
 80280b6:	e8d3 0faf 	lda	r0, [r3]
 80280ba:	4770      	bx	lr
 80280bc:	200000c0 	.word	0x200000c0

080280c0 <_ZSt9terminatev>:
 80280c0:	b508      	push	{r3, lr}
 80280c2:	f7ff fff7 	bl	80280b4 <_ZSt13get_terminatev>
 80280c6:	f7ff fff0 	bl	80280aa <_ZN10__cxxabiv111__terminateEPFvvE>

080280ca <abort>:
 80280ca:	2006      	movs	r0, #6
 80280cc:	b508      	push	{r3, lr}
 80280ce:	f000 fd6b 	bl	8028ba8 <raise>
 80280d2:	2001      	movs	r0, #1
 80280d4:	f7d9 fca0 	bl	8001a18 <_exit>

080280d8 <__assert_func>:
 80280d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80280da:	4614      	mov	r4, r2
 80280dc:	461a      	mov	r2, r3
 80280de:	4b09      	ldr	r3, [pc, #36]	; (8028104 <__assert_func+0x2c>)
 80280e0:	4605      	mov	r5, r0
 80280e2:	681b      	ldr	r3, [r3, #0]
 80280e4:	68d8      	ldr	r0, [r3, #12]
 80280e6:	b14c      	cbz	r4, 80280fc <__assert_func+0x24>
 80280e8:	4b07      	ldr	r3, [pc, #28]	; (8028108 <__assert_func+0x30>)
 80280ea:	9100      	str	r1, [sp, #0]
 80280ec:	4907      	ldr	r1, [pc, #28]	; (802810c <__assert_func+0x34>)
 80280ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80280f2:	462b      	mov	r3, r5
 80280f4:	f000 f828 	bl	8028148 <fiprintf>
 80280f8:	f7ff ffe7 	bl	80280ca <abort>
 80280fc:	4b04      	ldr	r3, [pc, #16]	; (8028110 <__assert_func+0x38>)
 80280fe:	461c      	mov	r4, r3
 8028100:	e7f3      	b.n	80280ea <__assert_func+0x12>
 8028102:	bf00      	nop
 8028104:	200000c4 	.word	0x200000c4
 8028108:	0802c286 	.word	0x0802c286
 802810c:	0802c293 	.word	0x0802c293
 8028110:	0802c2c1 	.word	0x0802c2c1

08028114 <atexit>:
 8028114:	2300      	movs	r3, #0
 8028116:	4601      	mov	r1, r0
 8028118:	461a      	mov	r2, r3
 802811a:	4618      	mov	r0, r3
 802811c:	f000 be20 	b.w	8028d60 <__register_exitproc>

08028120 <__cxa_atexit>:
 8028120:	b510      	push	{r4, lr}
 8028122:	4c05      	ldr	r4, [pc, #20]	; (8028138 <__cxa_atexit+0x18>)
 8028124:	4613      	mov	r3, r2
 8028126:	b12c      	cbz	r4, 8028134 <__cxa_atexit+0x14>
 8028128:	460a      	mov	r2, r1
 802812a:	4601      	mov	r1, r0
 802812c:	2002      	movs	r0, #2
 802812e:	f000 fe17 	bl	8028d60 <__register_exitproc>
 8028132:	bd10      	pop	{r4, pc}
 8028134:	4620      	mov	r0, r4
 8028136:	e7fc      	b.n	8028132 <__cxa_atexit+0x12>
 8028138:	08028d61 	.word	0x08028d61

0802813c <__errno>:
 802813c:	4b01      	ldr	r3, [pc, #4]	; (8028144 <__errno+0x8>)
 802813e:	6818      	ldr	r0, [r3, #0]
 8028140:	4770      	bx	lr
 8028142:	bf00      	nop
 8028144:	200000c4 	.word	0x200000c4

08028148 <fiprintf>:
 8028148:	b40e      	push	{r1, r2, r3}
 802814a:	b503      	push	{r0, r1, lr}
 802814c:	ab03      	add	r3, sp, #12
 802814e:	4601      	mov	r1, r0
 8028150:	4805      	ldr	r0, [pc, #20]	; (8028168 <fiprintf+0x20>)
 8028152:	f853 2b04 	ldr.w	r2, [r3], #4
 8028156:	6800      	ldr	r0, [r0, #0]
 8028158:	9301      	str	r3, [sp, #4]
 802815a:	f000 f95b 	bl	8028414 <_vfiprintf_r>
 802815e:	b002      	add	sp, #8
 8028160:	f85d eb04 	ldr.w	lr, [sp], #4
 8028164:	b003      	add	sp, #12
 8028166:	4770      	bx	lr
 8028168:	200000c4 	.word	0x200000c4

0802816c <__libc_init_array>:
 802816c:	b570      	push	{r4, r5, r6, lr}
 802816e:	4d0d      	ldr	r5, [pc, #52]	; (80281a4 <__libc_init_array+0x38>)
 8028170:	2600      	movs	r6, #0
 8028172:	4c0d      	ldr	r4, [pc, #52]	; (80281a8 <__libc_init_array+0x3c>)
 8028174:	1b64      	subs	r4, r4, r5
 8028176:	10a4      	asrs	r4, r4, #2
 8028178:	42a6      	cmp	r6, r4
 802817a:	d109      	bne.n	8028190 <__libc_init_array+0x24>
 802817c:	4d0b      	ldr	r5, [pc, #44]	; (80281ac <__libc_init_array+0x40>)
 802817e:	2600      	movs	r6, #0
 8028180:	4c0b      	ldr	r4, [pc, #44]	; (80281b0 <__libc_init_array+0x44>)
 8028182:	f001 f935 	bl	80293f0 <_init>
 8028186:	1b64      	subs	r4, r4, r5
 8028188:	10a4      	asrs	r4, r4, #2
 802818a:	42a6      	cmp	r6, r4
 802818c:	d105      	bne.n	802819a <__libc_init_array+0x2e>
 802818e:	bd70      	pop	{r4, r5, r6, pc}
 8028190:	f855 3b04 	ldr.w	r3, [r5], #4
 8028194:	3601      	adds	r6, #1
 8028196:	4798      	blx	r3
 8028198:	e7ee      	b.n	8028178 <__libc_init_array+0xc>
 802819a:	f855 3b04 	ldr.w	r3, [r5], #4
 802819e:	3601      	adds	r6, #1
 80281a0:	4798      	blx	r3
 80281a2:	e7f2      	b.n	802818a <__libc_init_array+0x1e>
 80281a4:	0802c3ec 	.word	0x0802c3ec
 80281a8:	0802c3ec 	.word	0x0802c3ec
 80281ac:	0802c3ec 	.word	0x0802c3ec
 80281b0:	0802c408 	.word	0x0802c408

080281b4 <malloc>:
 80281b4:	4b02      	ldr	r3, [pc, #8]	; (80281c0 <malloc+0xc>)
 80281b6:	4601      	mov	r1, r0
 80281b8:	6818      	ldr	r0, [r3, #0]
 80281ba:	f000 b88d 	b.w	80282d8 <_malloc_r>
 80281be:	bf00      	nop
 80281c0:	200000c4 	.word	0x200000c4

080281c4 <free>:
 80281c4:	4b02      	ldr	r3, [pc, #8]	; (80281d0 <free+0xc>)
 80281c6:	4601      	mov	r1, r0
 80281c8:	6818      	ldr	r0, [r3, #0]
 80281ca:	f000 b819 	b.w	8028200 <_free_r>
 80281ce:	bf00      	nop
 80281d0:	200000c4 	.word	0x200000c4

080281d4 <memcpy>:
 80281d4:	440a      	add	r2, r1
 80281d6:	1e43      	subs	r3, r0, #1
 80281d8:	4291      	cmp	r1, r2
 80281da:	d100      	bne.n	80281de <memcpy+0xa>
 80281dc:	4770      	bx	lr
 80281de:	b510      	push	{r4, lr}
 80281e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80281e4:	4291      	cmp	r1, r2
 80281e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80281ea:	d1f9      	bne.n	80281e0 <memcpy+0xc>
 80281ec:	bd10      	pop	{r4, pc}

080281ee <memset>:
 80281ee:	4402      	add	r2, r0
 80281f0:	4603      	mov	r3, r0
 80281f2:	4293      	cmp	r3, r2
 80281f4:	d100      	bne.n	80281f8 <memset+0xa>
 80281f6:	4770      	bx	lr
 80281f8:	f803 1b01 	strb.w	r1, [r3], #1
 80281fc:	e7f9      	b.n	80281f2 <memset+0x4>
	...

08028200 <_free_r>:
 8028200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8028202:	2900      	cmp	r1, #0
 8028204:	d043      	beq.n	802828e <_free_r+0x8e>
 8028206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802820a:	1f0c      	subs	r4, r1, #4
 802820c:	9001      	str	r0, [sp, #4]
 802820e:	2b00      	cmp	r3, #0
 8028210:	bfb8      	it	lt
 8028212:	18e4      	addlt	r4, r4, r3
 8028214:	f001 f834 	bl	8029280 <__malloc_lock>
 8028218:	4a1e      	ldr	r2, [pc, #120]	; (8028294 <_free_r+0x94>)
 802821a:	9801      	ldr	r0, [sp, #4]
 802821c:	6813      	ldr	r3, [r2, #0]
 802821e:	b933      	cbnz	r3, 802822e <_free_r+0x2e>
 8028220:	6063      	str	r3, [r4, #4]
 8028222:	6014      	str	r4, [r2, #0]
 8028224:	b003      	add	sp, #12
 8028226:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802822a:	f001 b82f 	b.w	802928c <__malloc_unlock>
 802822e:	42a3      	cmp	r3, r4
 8028230:	d908      	bls.n	8028244 <_free_r+0x44>
 8028232:	6825      	ldr	r5, [r4, #0]
 8028234:	1961      	adds	r1, r4, r5
 8028236:	428b      	cmp	r3, r1
 8028238:	bf01      	itttt	eq
 802823a:	6819      	ldreq	r1, [r3, #0]
 802823c:	685b      	ldreq	r3, [r3, #4]
 802823e:	1949      	addeq	r1, r1, r5
 8028240:	6021      	streq	r1, [r4, #0]
 8028242:	e7ed      	b.n	8028220 <_free_r+0x20>
 8028244:	461a      	mov	r2, r3
 8028246:	685b      	ldr	r3, [r3, #4]
 8028248:	b10b      	cbz	r3, 802824e <_free_r+0x4e>
 802824a:	42a3      	cmp	r3, r4
 802824c:	d9fa      	bls.n	8028244 <_free_r+0x44>
 802824e:	6811      	ldr	r1, [r2, #0]
 8028250:	1855      	adds	r5, r2, r1
 8028252:	42a5      	cmp	r5, r4
 8028254:	d10b      	bne.n	802826e <_free_r+0x6e>
 8028256:	6824      	ldr	r4, [r4, #0]
 8028258:	4421      	add	r1, r4
 802825a:	1854      	adds	r4, r2, r1
 802825c:	6011      	str	r1, [r2, #0]
 802825e:	42a3      	cmp	r3, r4
 8028260:	d1e0      	bne.n	8028224 <_free_r+0x24>
 8028262:	681c      	ldr	r4, [r3, #0]
 8028264:	685b      	ldr	r3, [r3, #4]
 8028266:	4421      	add	r1, r4
 8028268:	6053      	str	r3, [r2, #4]
 802826a:	6011      	str	r1, [r2, #0]
 802826c:	e7da      	b.n	8028224 <_free_r+0x24>
 802826e:	d902      	bls.n	8028276 <_free_r+0x76>
 8028270:	230c      	movs	r3, #12
 8028272:	6003      	str	r3, [r0, #0]
 8028274:	e7d6      	b.n	8028224 <_free_r+0x24>
 8028276:	6825      	ldr	r5, [r4, #0]
 8028278:	1961      	adds	r1, r4, r5
 802827a:	428b      	cmp	r3, r1
 802827c:	bf02      	ittt	eq
 802827e:	6819      	ldreq	r1, [r3, #0]
 8028280:	685b      	ldreq	r3, [r3, #4]
 8028282:	1949      	addeq	r1, r1, r5
 8028284:	6063      	str	r3, [r4, #4]
 8028286:	bf08      	it	eq
 8028288:	6021      	streq	r1, [r4, #0]
 802828a:	6054      	str	r4, [r2, #4]
 802828c:	e7ca      	b.n	8028224 <_free_r+0x24>
 802828e:	b003      	add	sp, #12
 8028290:	bd30      	pop	{r4, r5, pc}
 8028292:	bf00      	nop
 8028294:	201983ec 	.word	0x201983ec

08028298 <sbrk_aligned>:
 8028298:	b570      	push	{r4, r5, r6, lr}
 802829a:	4e0e      	ldr	r6, [pc, #56]	; (80282d4 <sbrk_aligned+0x3c>)
 802829c:	460c      	mov	r4, r1
 802829e:	4605      	mov	r5, r0
 80282a0:	6831      	ldr	r1, [r6, #0]
 80282a2:	b911      	cbnz	r1, 80282aa <sbrk_aligned+0x12>
 80282a4:	f000 fc48 	bl	8028b38 <_sbrk_r>
 80282a8:	6030      	str	r0, [r6, #0]
 80282aa:	4621      	mov	r1, r4
 80282ac:	4628      	mov	r0, r5
 80282ae:	f000 fc43 	bl	8028b38 <_sbrk_r>
 80282b2:	1c43      	adds	r3, r0, #1
 80282b4:	d00a      	beq.n	80282cc <sbrk_aligned+0x34>
 80282b6:	1cc4      	adds	r4, r0, #3
 80282b8:	f024 0403 	bic.w	r4, r4, #3
 80282bc:	42a0      	cmp	r0, r4
 80282be:	d007      	beq.n	80282d0 <sbrk_aligned+0x38>
 80282c0:	1a21      	subs	r1, r4, r0
 80282c2:	4628      	mov	r0, r5
 80282c4:	f000 fc38 	bl	8028b38 <_sbrk_r>
 80282c8:	3001      	adds	r0, #1
 80282ca:	d101      	bne.n	80282d0 <sbrk_aligned+0x38>
 80282cc:	f04f 34ff 	mov.w	r4, #4294967295
 80282d0:	4620      	mov	r0, r4
 80282d2:	bd70      	pop	{r4, r5, r6, pc}
 80282d4:	201983f0 	.word	0x201983f0

080282d8 <_malloc_r>:
 80282d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80282dc:	1ccd      	adds	r5, r1, #3
 80282de:	4607      	mov	r7, r0
 80282e0:	f025 0503 	bic.w	r5, r5, #3
 80282e4:	3508      	adds	r5, #8
 80282e6:	2d0c      	cmp	r5, #12
 80282e8:	bf38      	it	cc
 80282ea:	250c      	movcc	r5, #12
 80282ec:	2d00      	cmp	r5, #0
 80282ee:	db01      	blt.n	80282f4 <_malloc_r+0x1c>
 80282f0:	42a9      	cmp	r1, r5
 80282f2:	d905      	bls.n	8028300 <_malloc_r+0x28>
 80282f4:	230c      	movs	r3, #12
 80282f6:	2600      	movs	r6, #0
 80282f8:	603b      	str	r3, [r7, #0]
 80282fa:	4630      	mov	r0, r6
 80282fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028300:	4e2e      	ldr	r6, [pc, #184]	; (80283bc <_malloc_r+0xe4>)
 8028302:	f000 ffbd 	bl	8029280 <__malloc_lock>
 8028306:	6833      	ldr	r3, [r6, #0]
 8028308:	461c      	mov	r4, r3
 802830a:	bb34      	cbnz	r4, 802835a <_malloc_r+0x82>
 802830c:	4629      	mov	r1, r5
 802830e:	4638      	mov	r0, r7
 8028310:	f7ff ffc2 	bl	8028298 <sbrk_aligned>
 8028314:	1c43      	adds	r3, r0, #1
 8028316:	4604      	mov	r4, r0
 8028318:	d14d      	bne.n	80283b6 <_malloc_r+0xde>
 802831a:	6834      	ldr	r4, [r6, #0]
 802831c:	4626      	mov	r6, r4
 802831e:	2e00      	cmp	r6, #0
 8028320:	d140      	bne.n	80283a4 <_malloc_r+0xcc>
 8028322:	6823      	ldr	r3, [r4, #0]
 8028324:	4631      	mov	r1, r6
 8028326:	4638      	mov	r0, r7
 8028328:	eb04 0803 	add.w	r8, r4, r3
 802832c:	f000 fc04 	bl	8028b38 <_sbrk_r>
 8028330:	4580      	cmp	r8, r0
 8028332:	d13a      	bne.n	80283aa <_malloc_r+0xd2>
 8028334:	6821      	ldr	r1, [r4, #0]
 8028336:	3503      	adds	r5, #3
 8028338:	4638      	mov	r0, r7
 802833a:	1a6d      	subs	r5, r5, r1
 802833c:	f025 0503 	bic.w	r5, r5, #3
 8028340:	3508      	adds	r5, #8
 8028342:	2d0c      	cmp	r5, #12
 8028344:	bf38      	it	cc
 8028346:	250c      	movcc	r5, #12
 8028348:	4629      	mov	r1, r5
 802834a:	f7ff ffa5 	bl	8028298 <sbrk_aligned>
 802834e:	3001      	adds	r0, #1
 8028350:	d02b      	beq.n	80283aa <_malloc_r+0xd2>
 8028352:	6823      	ldr	r3, [r4, #0]
 8028354:	442b      	add	r3, r5
 8028356:	6023      	str	r3, [r4, #0]
 8028358:	e00e      	b.n	8028378 <_malloc_r+0xa0>
 802835a:	6822      	ldr	r2, [r4, #0]
 802835c:	1b52      	subs	r2, r2, r5
 802835e:	d41e      	bmi.n	802839e <_malloc_r+0xc6>
 8028360:	2a0b      	cmp	r2, #11
 8028362:	d916      	bls.n	8028392 <_malloc_r+0xba>
 8028364:	1961      	adds	r1, r4, r5
 8028366:	42a3      	cmp	r3, r4
 8028368:	6025      	str	r5, [r4, #0]
 802836a:	bf18      	it	ne
 802836c:	6059      	strne	r1, [r3, #4]
 802836e:	6863      	ldr	r3, [r4, #4]
 8028370:	bf08      	it	eq
 8028372:	6031      	streq	r1, [r6, #0]
 8028374:	5162      	str	r2, [r4, r5]
 8028376:	604b      	str	r3, [r1, #4]
 8028378:	f104 060b 	add.w	r6, r4, #11
 802837c:	4638      	mov	r0, r7
 802837e:	f000 ff85 	bl	802928c <__malloc_unlock>
 8028382:	1d23      	adds	r3, r4, #4
 8028384:	f026 0607 	bic.w	r6, r6, #7
 8028388:	1af2      	subs	r2, r6, r3
 802838a:	d0b6      	beq.n	80282fa <_malloc_r+0x22>
 802838c:	1b9b      	subs	r3, r3, r6
 802838e:	50a3      	str	r3, [r4, r2]
 8028390:	e7b3      	b.n	80282fa <_malloc_r+0x22>
 8028392:	6862      	ldr	r2, [r4, #4]
 8028394:	42a3      	cmp	r3, r4
 8028396:	bf0c      	ite	eq
 8028398:	6032      	streq	r2, [r6, #0]
 802839a:	605a      	strne	r2, [r3, #4]
 802839c:	e7ec      	b.n	8028378 <_malloc_r+0xa0>
 802839e:	4623      	mov	r3, r4
 80283a0:	6864      	ldr	r4, [r4, #4]
 80283a2:	e7b2      	b.n	802830a <_malloc_r+0x32>
 80283a4:	4634      	mov	r4, r6
 80283a6:	6876      	ldr	r6, [r6, #4]
 80283a8:	e7b9      	b.n	802831e <_malloc_r+0x46>
 80283aa:	230c      	movs	r3, #12
 80283ac:	4638      	mov	r0, r7
 80283ae:	603b      	str	r3, [r7, #0]
 80283b0:	f000 ff6c 	bl	802928c <__malloc_unlock>
 80283b4:	e7a1      	b.n	80282fa <_malloc_r+0x22>
 80283b6:	6025      	str	r5, [r4, #0]
 80283b8:	e7de      	b.n	8028378 <_malloc_r+0xa0>
 80283ba:	bf00      	nop
 80283bc:	201983ec 	.word	0x201983ec

080283c0 <__sfputc_r>:
 80283c0:	6893      	ldr	r3, [r2, #8]
 80283c2:	3b01      	subs	r3, #1
 80283c4:	2b00      	cmp	r3, #0
 80283c6:	6093      	str	r3, [r2, #8]
 80283c8:	b410      	push	{r4}
 80283ca:	da08      	bge.n	80283de <__sfputc_r+0x1e>
 80283cc:	6994      	ldr	r4, [r2, #24]
 80283ce:	42a3      	cmp	r3, r4
 80283d0:	db01      	blt.n	80283d6 <__sfputc_r+0x16>
 80283d2:	290a      	cmp	r1, #10
 80283d4:	d103      	bne.n	80283de <__sfputc_r+0x1e>
 80283d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80283da:	f000 bc01 	b.w	8028be0 <__swbuf_r>
 80283de:	6813      	ldr	r3, [r2, #0]
 80283e0:	1c58      	adds	r0, r3, #1
 80283e2:	6010      	str	r0, [r2, #0]
 80283e4:	4608      	mov	r0, r1
 80283e6:	7019      	strb	r1, [r3, #0]
 80283e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80283ec:	4770      	bx	lr

080283ee <__sfputs_r>:
 80283ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80283f0:	4606      	mov	r6, r0
 80283f2:	460f      	mov	r7, r1
 80283f4:	4614      	mov	r4, r2
 80283f6:	18d5      	adds	r5, r2, r3
 80283f8:	42ac      	cmp	r4, r5
 80283fa:	d101      	bne.n	8028400 <__sfputs_r+0x12>
 80283fc:	2000      	movs	r0, #0
 80283fe:	e007      	b.n	8028410 <__sfputs_r+0x22>
 8028400:	463a      	mov	r2, r7
 8028402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028406:	4630      	mov	r0, r6
 8028408:	f7ff ffda 	bl	80283c0 <__sfputc_r>
 802840c:	1c43      	adds	r3, r0, #1
 802840e:	d1f3      	bne.n	80283f8 <__sfputs_r+0xa>
 8028410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028414 <_vfiprintf_r>:
 8028414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028418:	460d      	mov	r5, r1
 802841a:	b09d      	sub	sp, #116	; 0x74
 802841c:	4614      	mov	r4, r2
 802841e:	4698      	mov	r8, r3
 8028420:	4606      	mov	r6, r0
 8028422:	b118      	cbz	r0, 802842c <_vfiprintf_r+0x18>
 8028424:	6983      	ldr	r3, [r0, #24]
 8028426:	b90b      	cbnz	r3, 802842c <_vfiprintf_r+0x18>
 8028428:	f000 fe16 	bl	8029058 <__sinit>
 802842c:	4b89      	ldr	r3, [pc, #548]	; (8028654 <_vfiprintf_r+0x240>)
 802842e:	429d      	cmp	r5, r3
 8028430:	d11b      	bne.n	802846a <_vfiprintf_r+0x56>
 8028432:	6875      	ldr	r5, [r6, #4]
 8028434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028436:	07d9      	lsls	r1, r3, #31
 8028438:	d405      	bmi.n	8028446 <_vfiprintf_r+0x32>
 802843a:	89ab      	ldrh	r3, [r5, #12]
 802843c:	059a      	lsls	r2, r3, #22
 802843e:	d402      	bmi.n	8028446 <_vfiprintf_r+0x32>
 8028440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028442:	f000 fea7 	bl	8029194 <__retarget_lock_acquire_recursive>
 8028446:	89ab      	ldrh	r3, [r5, #12]
 8028448:	071b      	lsls	r3, r3, #28
 802844a:	d501      	bpl.n	8028450 <_vfiprintf_r+0x3c>
 802844c:	692b      	ldr	r3, [r5, #16]
 802844e:	b9eb      	cbnz	r3, 802848c <_vfiprintf_r+0x78>
 8028450:	4629      	mov	r1, r5
 8028452:	4630      	mov	r0, r6
 8028454:	f000 fc16 	bl	8028c84 <__swsetup_r>
 8028458:	b1c0      	cbz	r0, 802848c <_vfiprintf_r+0x78>
 802845a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802845c:	07dc      	lsls	r4, r3, #31
 802845e:	d50e      	bpl.n	802847e <_vfiprintf_r+0x6a>
 8028460:	f04f 30ff 	mov.w	r0, #4294967295
 8028464:	b01d      	add	sp, #116	; 0x74
 8028466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802846a:	4b7b      	ldr	r3, [pc, #492]	; (8028658 <_vfiprintf_r+0x244>)
 802846c:	429d      	cmp	r5, r3
 802846e:	d101      	bne.n	8028474 <_vfiprintf_r+0x60>
 8028470:	68b5      	ldr	r5, [r6, #8]
 8028472:	e7df      	b.n	8028434 <_vfiprintf_r+0x20>
 8028474:	4b79      	ldr	r3, [pc, #484]	; (802865c <_vfiprintf_r+0x248>)
 8028476:	429d      	cmp	r5, r3
 8028478:	bf08      	it	eq
 802847a:	68f5      	ldreq	r5, [r6, #12]
 802847c:	e7da      	b.n	8028434 <_vfiprintf_r+0x20>
 802847e:	89ab      	ldrh	r3, [r5, #12]
 8028480:	0598      	lsls	r0, r3, #22
 8028482:	d4ed      	bmi.n	8028460 <_vfiprintf_r+0x4c>
 8028484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028486:	f000 fe87 	bl	8029198 <__retarget_lock_release_recursive>
 802848a:	e7e9      	b.n	8028460 <_vfiprintf_r+0x4c>
 802848c:	2300      	movs	r3, #0
 802848e:	f8cd 800c 	str.w	r8, [sp, #12]
 8028492:	f04f 0901 	mov.w	r9, #1
 8028496:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8028660 <_vfiprintf_r+0x24c>
 802849a:	9309      	str	r3, [sp, #36]	; 0x24
 802849c:	2320      	movs	r3, #32
 802849e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80284a2:	2330      	movs	r3, #48	; 0x30
 80284a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80284a8:	4623      	mov	r3, r4
 80284aa:	469a      	mov	sl, r3
 80284ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80284b0:	b10a      	cbz	r2, 80284b6 <_vfiprintf_r+0xa2>
 80284b2:	2a25      	cmp	r2, #37	; 0x25
 80284b4:	d1f9      	bne.n	80284aa <_vfiprintf_r+0x96>
 80284b6:	ebba 0b04 	subs.w	fp, sl, r4
 80284ba:	d00b      	beq.n	80284d4 <_vfiprintf_r+0xc0>
 80284bc:	465b      	mov	r3, fp
 80284be:	4622      	mov	r2, r4
 80284c0:	4629      	mov	r1, r5
 80284c2:	4630      	mov	r0, r6
 80284c4:	f7ff ff93 	bl	80283ee <__sfputs_r>
 80284c8:	3001      	adds	r0, #1
 80284ca:	f000 80aa 	beq.w	8028622 <_vfiprintf_r+0x20e>
 80284ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80284d0:	445a      	add	r2, fp
 80284d2:	9209      	str	r2, [sp, #36]	; 0x24
 80284d4:	f89a 3000 	ldrb.w	r3, [sl]
 80284d8:	2b00      	cmp	r3, #0
 80284da:	f000 80a2 	beq.w	8028622 <_vfiprintf_r+0x20e>
 80284de:	2300      	movs	r3, #0
 80284e0:	f04f 32ff 	mov.w	r2, #4294967295
 80284e4:	f10a 0a01 	add.w	sl, sl, #1
 80284e8:	9304      	str	r3, [sp, #16]
 80284ea:	9307      	str	r3, [sp, #28]
 80284ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80284f0:	931a      	str	r3, [sp, #104]	; 0x68
 80284f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80284f6:	4654      	mov	r4, sl
 80284f8:	2205      	movs	r2, #5
 80284fa:	4859      	ldr	r0, [pc, #356]	; (8028660 <_vfiprintf_r+0x24c>)
 80284fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028500:	f000 feb0 	bl	8029264 <memchr>
 8028504:	9a04      	ldr	r2, [sp, #16]
 8028506:	b9d8      	cbnz	r0, 8028540 <_vfiprintf_r+0x12c>
 8028508:	06d1      	lsls	r1, r2, #27
 802850a:	bf44      	itt	mi
 802850c:	2320      	movmi	r3, #32
 802850e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028512:	0713      	lsls	r3, r2, #28
 8028514:	bf44      	itt	mi
 8028516:	232b      	movmi	r3, #43	; 0x2b
 8028518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802851c:	f89a 3000 	ldrb.w	r3, [sl]
 8028520:	2b2a      	cmp	r3, #42	; 0x2a
 8028522:	d015      	beq.n	8028550 <_vfiprintf_r+0x13c>
 8028524:	9a07      	ldr	r2, [sp, #28]
 8028526:	4654      	mov	r4, sl
 8028528:	2000      	movs	r0, #0
 802852a:	f04f 0c0a 	mov.w	ip, #10
 802852e:	4621      	mov	r1, r4
 8028530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028534:	3b30      	subs	r3, #48	; 0x30
 8028536:	2b09      	cmp	r3, #9
 8028538:	d94e      	bls.n	80285d8 <_vfiprintf_r+0x1c4>
 802853a:	b1b0      	cbz	r0, 802856a <_vfiprintf_r+0x156>
 802853c:	9207      	str	r2, [sp, #28]
 802853e:	e014      	b.n	802856a <_vfiprintf_r+0x156>
 8028540:	eba0 0308 	sub.w	r3, r0, r8
 8028544:	46a2      	mov	sl, r4
 8028546:	fa09 f303 	lsl.w	r3, r9, r3
 802854a:	4313      	orrs	r3, r2
 802854c:	9304      	str	r3, [sp, #16]
 802854e:	e7d2      	b.n	80284f6 <_vfiprintf_r+0xe2>
 8028550:	9b03      	ldr	r3, [sp, #12]
 8028552:	1d19      	adds	r1, r3, #4
 8028554:	681b      	ldr	r3, [r3, #0]
 8028556:	2b00      	cmp	r3, #0
 8028558:	9103      	str	r1, [sp, #12]
 802855a:	bfbb      	ittet	lt
 802855c:	425b      	neglt	r3, r3
 802855e:	f042 0202 	orrlt.w	r2, r2, #2
 8028562:	9307      	strge	r3, [sp, #28]
 8028564:	9307      	strlt	r3, [sp, #28]
 8028566:	bfb8      	it	lt
 8028568:	9204      	strlt	r2, [sp, #16]
 802856a:	7823      	ldrb	r3, [r4, #0]
 802856c:	2b2e      	cmp	r3, #46	; 0x2e
 802856e:	d10c      	bne.n	802858a <_vfiprintf_r+0x176>
 8028570:	7863      	ldrb	r3, [r4, #1]
 8028572:	2b2a      	cmp	r3, #42	; 0x2a
 8028574:	d135      	bne.n	80285e2 <_vfiprintf_r+0x1ce>
 8028576:	9b03      	ldr	r3, [sp, #12]
 8028578:	3402      	adds	r4, #2
 802857a:	1d1a      	adds	r2, r3, #4
 802857c:	681b      	ldr	r3, [r3, #0]
 802857e:	2b00      	cmp	r3, #0
 8028580:	9203      	str	r2, [sp, #12]
 8028582:	bfb8      	it	lt
 8028584:	f04f 33ff 	movlt.w	r3, #4294967295
 8028588:	9305      	str	r3, [sp, #20]
 802858a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8028670 <_vfiprintf_r+0x25c>
 802858e:	2203      	movs	r2, #3
 8028590:	7821      	ldrb	r1, [r4, #0]
 8028592:	4650      	mov	r0, sl
 8028594:	f000 fe66 	bl	8029264 <memchr>
 8028598:	b140      	cbz	r0, 80285ac <_vfiprintf_r+0x198>
 802859a:	2340      	movs	r3, #64	; 0x40
 802859c:	eba0 000a 	sub.w	r0, r0, sl
 80285a0:	3401      	adds	r4, #1
 80285a2:	fa03 f000 	lsl.w	r0, r3, r0
 80285a6:	9b04      	ldr	r3, [sp, #16]
 80285a8:	4303      	orrs	r3, r0
 80285aa:	9304      	str	r3, [sp, #16]
 80285ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80285b0:	2206      	movs	r2, #6
 80285b2:	482c      	ldr	r0, [pc, #176]	; (8028664 <_vfiprintf_r+0x250>)
 80285b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80285b8:	f000 fe54 	bl	8029264 <memchr>
 80285bc:	2800      	cmp	r0, #0
 80285be:	d03f      	beq.n	8028640 <_vfiprintf_r+0x22c>
 80285c0:	4b29      	ldr	r3, [pc, #164]	; (8028668 <_vfiprintf_r+0x254>)
 80285c2:	bb1b      	cbnz	r3, 802860c <_vfiprintf_r+0x1f8>
 80285c4:	9b03      	ldr	r3, [sp, #12]
 80285c6:	3307      	adds	r3, #7
 80285c8:	f023 0307 	bic.w	r3, r3, #7
 80285cc:	3308      	adds	r3, #8
 80285ce:	9303      	str	r3, [sp, #12]
 80285d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80285d2:	443b      	add	r3, r7
 80285d4:	9309      	str	r3, [sp, #36]	; 0x24
 80285d6:	e767      	b.n	80284a8 <_vfiprintf_r+0x94>
 80285d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80285dc:	460c      	mov	r4, r1
 80285de:	2001      	movs	r0, #1
 80285e0:	e7a5      	b.n	802852e <_vfiprintf_r+0x11a>
 80285e2:	2300      	movs	r3, #0
 80285e4:	3401      	adds	r4, #1
 80285e6:	f04f 0c0a 	mov.w	ip, #10
 80285ea:	4619      	mov	r1, r3
 80285ec:	9305      	str	r3, [sp, #20]
 80285ee:	4620      	mov	r0, r4
 80285f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80285f4:	3a30      	subs	r2, #48	; 0x30
 80285f6:	2a09      	cmp	r2, #9
 80285f8:	d903      	bls.n	8028602 <_vfiprintf_r+0x1ee>
 80285fa:	2b00      	cmp	r3, #0
 80285fc:	d0c5      	beq.n	802858a <_vfiprintf_r+0x176>
 80285fe:	9105      	str	r1, [sp, #20]
 8028600:	e7c3      	b.n	802858a <_vfiprintf_r+0x176>
 8028602:	fb0c 2101 	mla	r1, ip, r1, r2
 8028606:	4604      	mov	r4, r0
 8028608:	2301      	movs	r3, #1
 802860a:	e7f0      	b.n	80285ee <_vfiprintf_r+0x1da>
 802860c:	ab03      	add	r3, sp, #12
 802860e:	462a      	mov	r2, r5
 8028610:	a904      	add	r1, sp, #16
 8028612:	4630      	mov	r0, r6
 8028614:	9300      	str	r3, [sp, #0]
 8028616:	4b15      	ldr	r3, [pc, #84]	; (802866c <_vfiprintf_r+0x258>)
 8028618:	e000      	b.n	802861c <_vfiprintf_r+0x208>
 802861a:	bf00      	nop
 802861c:	4607      	mov	r7, r0
 802861e:	1c78      	adds	r0, r7, #1
 8028620:	d1d6      	bne.n	80285d0 <_vfiprintf_r+0x1bc>
 8028622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028624:	07d9      	lsls	r1, r3, #31
 8028626:	d405      	bmi.n	8028634 <_vfiprintf_r+0x220>
 8028628:	89ab      	ldrh	r3, [r5, #12]
 802862a:	059a      	lsls	r2, r3, #22
 802862c:	d402      	bmi.n	8028634 <_vfiprintf_r+0x220>
 802862e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028630:	f000 fdb2 	bl	8029198 <__retarget_lock_release_recursive>
 8028634:	89ab      	ldrh	r3, [r5, #12]
 8028636:	065b      	lsls	r3, r3, #25
 8028638:	f53f af12 	bmi.w	8028460 <_vfiprintf_r+0x4c>
 802863c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802863e:	e711      	b.n	8028464 <_vfiprintf_r+0x50>
 8028640:	ab03      	add	r3, sp, #12
 8028642:	462a      	mov	r2, r5
 8028644:	a904      	add	r1, sp, #16
 8028646:	4630      	mov	r0, r6
 8028648:	9300      	str	r3, [sp, #0]
 802864a:	4b08      	ldr	r3, [pc, #32]	; (802866c <_vfiprintf_r+0x258>)
 802864c:	f000 f882 	bl	8028754 <_printf_i>
 8028650:	e7e4      	b.n	802861c <_vfiprintf_r+0x208>
 8028652:	bf00      	nop
 8028654:	0802c394 	.word	0x0802c394
 8028658:	0802c3b4 	.word	0x0802c3b4
 802865c:	0802c374 	.word	0x0802c374
 8028660:	0802c2c8 	.word	0x0802c2c8
 8028664:	0802c2d2 	.word	0x0802c2d2
 8028668:	00000000 	.word	0x00000000
 802866c:	080283ef 	.word	0x080283ef
 8028670:	0802c2ce 	.word	0x0802c2ce

08028674 <_printf_common>:
 8028674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028678:	4616      	mov	r6, r2
 802867a:	4699      	mov	r9, r3
 802867c:	688a      	ldr	r2, [r1, #8]
 802867e:	4607      	mov	r7, r0
 8028680:	690b      	ldr	r3, [r1, #16]
 8028682:	460c      	mov	r4, r1
 8028684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8028688:	4293      	cmp	r3, r2
 802868a:	bfb8      	it	lt
 802868c:	4613      	movlt	r3, r2
 802868e:	6033      	str	r3, [r6, #0]
 8028690:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8028694:	b10a      	cbz	r2, 802869a <_printf_common+0x26>
 8028696:	3301      	adds	r3, #1
 8028698:	6033      	str	r3, [r6, #0]
 802869a:	6823      	ldr	r3, [r4, #0]
 802869c:	0699      	lsls	r1, r3, #26
 802869e:	bf42      	ittt	mi
 80286a0:	6833      	ldrmi	r3, [r6, #0]
 80286a2:	3302      	addmi	r3, #2
 80286a4:	6033      	strmi	r3, [r6, #0]
 80286a6:	6825      	ldr	r5, [r4, #0]
 80286a8:	f015 0506 	ands.w	r5, r5, #6
 80286ac:	d106      	bne.n	80286bc <_printf_common+0x48>
 80286ae:	f104 0a19 	add.w	sl, r4, #25
 80286b2:	68e3      	ldr	r3, [r4, #12]
 80286b4:	6832      	ldr	r2, [r6, #0]
 80286b6:	1a9b      	subs	r3, r3, r2
 80286b8:	42ab      	cmp	r3, r5
 80286ba:	dc29      	bgt.n	8028710 <_printf_common+0x9c>
 80286bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80286c0:	1e13      	subs	r3, r2, #0
 80286c2:	6822      	ldr	r2, [r4, #0]
 80286c4:	bf18      	it	ne
 80286c6:	2301      	movne	r3, #1
 80286c8:	0692      	lsls	r2, r2, #26
 80286ca:	d42e      	bmi.n	802872a <_printf_common+0xb6>
 80286cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80286d0:	4649      	mov	r1, r9
 80286d2:	4638      	mov	r0, r7
 80286d4:	47c0      	blx	r8
 80286d6:	3001      	adds	r0, #1
 80286d8:	d021      	beq.n	802871e <_printf_common+0xaa>
 80286da:	6823      	ldr	r3, [r4, #0]
 80286dc:	341a      	adds	r4, #26
 80286de:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 80286e2:	f003 0306 	and.w	r3, r3, #6
 80286e6:	6832      	ldr	r2, [r6, #0]
 80286e8:	2600      	movs	r6, #0
 80286ea:	2b04      	cmp	r3, #4
 80286ec:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80286f0:	bf08      	it	eq
 80286f2:	1aad      	subeq	r5, r5, r2
 80286f4:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80286f8:	bf14      	ite	ne
 80286fa:	2500      	movne	r5, #0
 80286fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8028700:	4293      	cmp	r3, r2
 8028702:	bfc4      	itt	gt
 8028704:	1a9b      	subgt	r3, r3, r2
 8028706:	18ed      	addgt	r5, r5, r3
 8028708:	42b5      	cmp	r5, r6
 802870a:	d11a      	bne.n	8028742 <_printf_common+0xce>
 802870c:	2000      	movs	r0, #0
 802870e:	e008      	b.n	8028722 <_printf_common+0xae>
 8028710:	2301      	movs	r3, #1
 8028712:	4652      	mov	r2, sl
 8028714:	4649      	mov	r1, r9
 8028716:	4638      	mov	r0, r7
 8028718:	47c0      	blx	r8
 802871a:	3001      	adds	r0, #1
 802871c:	d103      	bne.n	8028726 <_printf_common+0xb2>
 802871e:	f04f 30ff 	mov.w	r0, #4294967295
 8028722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028726:	3501      	adds	r5, #1
 8028728:	e7c3      	b.n	80286b2 <_printf_common+0x3e>
 802872a:	18e1      	adds	r1, r4, r3
 802872c:	1c5a      	adds	r2, r3, #1
 802872e:	2030      	movs	r0, #48	; 0x30
 8028730:	3302      	adds	r3, #2
 8028732:	4422      	add	r2, r4
 8028734:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8028738:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802873c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8028740:	e7c4      	b.n	80286cc <_printf_common+0x58>
 8028742:	2301      	movs	r3, #1
 8028744:	4622      	mov	r2, r4
 8028746:	4649      	mov	r1, r9
 8028748:	4638      	mov	r0, r7
 802874a:	47c0      	blx	r8
 802874c:	3001      	adds	r0, #1
 802874e:	d0e6      	beq.n	802871e <_printf_common+0xaa>
 8028750:	3601      	adds	r6, #1
 8028752:	e7d9      	b.n	8028708 <_printf_common+0x94>

08028754 <_printf_i>:
 8028754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028758:	7e0f      	ldrb	r7, [r1, #24]
 802875a:	4691      	mov	r9, r2
 802875c:	4680      	mov	r8, r0
 802875e:	460c      	mov	r4, r1
 8028760:	2f78      	cmp	r7, #120	; 0x78
 8028762:	469a      	mov	sl, r3
 8028764:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028766:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802876a:	d807      	bhi.n	802877c <_printf_i+0x28>
 802876c:	2f62      	cmp	r7, #98	; 0x62
 802876e:	d80a      	bhi.n	8028786 <_printf_i+0x32>
 8028770:	2f00      	cmp	r7, #0
 8028772:	f000 80d8 	beq.w	8028926 <_printf_i+0x1d2>
 8028776:	2f58      	cmp	r7, #88	; 0x58
 8028778:	f000 80a3 	beq.w	80288c2 <_printf_i+0x16e>
 802877c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028780:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8028784:	e03a      	b.n	80287fc <_printf_i+0xa8>
 8028786:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802878a:	2b15      	cmp	r3, #21
 802878c:	d8f6      	bhi.n	802877c <_printf_i+0x28>
 802878e:	a101      	add	r1, pc, #4	; (adr r1, 8028794 <_printf_i+0x40>)
 8028790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8028794:	080287ed 	.word	0x080287ed
 8028798:	08028801 	.word	0x08028801
 802879c:	0802877d 	.word	0x0802877d
 80287a0:	0802877d 	.word	0x0802877d
 80287a4:	0802877d 	.word	0x0802877d
 80287a8:	0802877d 	.word	0x0802877d
 80287ac:	08028801 	.word	0x08028801
 80287b0:	0802877d 	.word	0x0802877d
 80287b4:	0802877d 	.word	0x0802877d
 80287b8:	0802877d 	.word	0x0802877d
 80287bc:	0802877d 	.word	0x0802877d
 80287c0:	0802890d 	.word	0x0802890d
 80287c4:	08028831 	.word	0x08028831
 80287c8:	080288ef 	.word	0x080288ef
 80287cc:	0802877d 	.word	0x0802877d
 80287d0:	0802877d 	.word	0x0802877d
 80287d4:	0802892f 	.word	0x0802892f
 80287d8:	0802877d 	.word	0x0802877d
 80287dc:	08028831 	.word	0x08028831
 80287e0:	0802877d 	.word	0x0802877d
 80287e4:	0802877d 	.word	0x0802877d
 80287e8:	080288f7 	.word	0x080288f7
 80287ec:	682b      	ldr	r3, [r5, #0]
 80287ee:	1d1a      	adds	r2, r3, #4
 80287f0:	681b      	ldr	r3, [r3, #0]
 80287f2:	602a      	str	r2, [r5, #0]
 80287f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80287f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80287fc:	2301      	movs	r3, #1
 80287fe:	e0a3      	b.n	8028948 <_printf_i+0x1f4>
 8028800:	6820      	ldr	r0, [r4, #0]
 8028802:	6829      	ldr	r1, [r5, #0]
 8028804:	0606      	lsls	r6, r0, #24
 8028806:	f101 0304 	add.w	r3, r1, #4
 802880a:	d50a      	bpl.n	8028822 <_printf_i+0xce>
 802880c:	680e      	ldr	r6, [r1, #0]
 802880e:	602b      	str	r3, [r5, #0]
 8028810:	2e00      	cmp	r6, #0
 8028812:	da03      	bge.n	802881c <_printf_i+0xc8>
 8028814:	232d      	movs	r3, #45	; 0x2d
 8028816:	4276      	negs	r6, r6
 8028818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802881c:	485e      	ldr	r0, [pc, #376]	; (8028998 <_printf_i+0x244>)
 802881e:	230a      	movs	r3, #10
 8028820:	e019      	b.n	8028856 <_printf_i+0x102>
 8028822:	680e      	ldr	r6, [r1, #0]
 8028824:	f010 0f40 	tst.w	r0, #64	; 0x40
 8028828:	602b      	str	r3, [r5, #0]
 802882a:	bf18      	it	ne
 802882c:	b236      	sxthne	r6, r6
 802882e:	e7ef      	b.n	8028810 <_printf_i+0xbc>
 8028830:	682b      	ldr	r3, [r5, #0]
 8028832:	6820      	ldr	r0, [r4, #0]
 8028834:	1d19      	adds	r1, r3, #4
 8028836:	6029      	str	r1, [r5, #0]
 8028838:	0601      	lsls	r1, r0, #24
 802883a:	d501      	bpl.n	8028840 <_printf_i+0xec>
 802883c:	681e      	ldr	r6, [r3, #0]
 802883e:	e002      	b.n	8028846 <_printf_i+0xf2>
 8028840:	0646      	lsls	r6, r0, #25
 8028842:	d5fb      	bpl.n	802883c <_printf_i+0xe8>
 8028844:	881e      	ldrh	r6, [r3, #0]
 8028846:	2f6f      	cmp	r7, #111	; 0x6f
 8028848:	4853      	ldr	r0, [pc, #332]	; (8028998 <_printf_i+0x244>)
 802884a:	bf0c      	ite	eq
 802884c:	2308      	moveq	r3, #8
 802884e:	230a      	movne	r3, #10
 8028850:	2100      	movs	r1, #0
 8028852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8028856:	6865      	ldr	r5, [r4, #4]
 8028858:	2d00      	cmp	r5, #0
 802885a:	60a5      	str	r5, [r4, #8]
 802885c:	bfa2      	ittt	ge
 802885e:	6821      	ldrge	r1, [r4, #0]
 8028860:	f021 0104 	bicge.w	r1, r1, #4
 8028864:	6021      	strge	r1, [r4, #0]
 8028866:	b90e      	cbnz	r6, 802886c <_printf_i+0x118>
 8028868:	2d00      	cmp	r5, #0
 802886a:	d04d      	beq.n	8028908 <_printf_i+0x1b4>
 802886c:	4615      	mov	r5, r2
 802886e:	fbb6 f1f3 	udiv	r1, r6, r3
 8028872:	fb03 6711 	mls	r7, r3, r1, r6
 8028876:	5dc7      	ldrb	r7, [r0, r7]
 8028878:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802887c:	4637      	mov	r7, r6
 802887e:	460e      	mov	r6, r1
 8028880:	42bb      	cmp	r3, r7
 8028882:	d9f4      	bls.n	802886e <_printf_i+0x11a>
 8028884:	2b08      	cmp	r3, #8
 8028886:	d10b      	bne.n	80288a0 <_printf_i+0x14c>
 8028888:	6823      	ldr	r3, [r4, #0]
 802888a:	07de      	lsls	r6, r3, #31
 802888c:	d508      	bpl.n	80288a0 <_printf_i+0x14c>
 802888e:	6923      	ldr	r3, [r4, #16]
 8028890:	6861      	ldr	r1, [r4, #4]
 8028892:	4299      	cmp	r1, r3
 8028894:	bfde      	ittt	le
 8028896:	2330      	movle	r3, #48	; 0x30
 8028898:	f805 3c01 	strble.w	r3, [r5, #-1]
 802889c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80288a0:	1b52      	subs	r2, r2, r5
 80288a2:	6122      	str	r2, [r4, #16]
 80288a4:	464b      	mov	r3, r9
 80288a6:	aa03      	add	r2, sp, #12
 80288a8:	4621      	mov	r1, r4
 80288aa:	4640      	mov	r0, r8
 80288ac:	f8cd a000 	str.w	sl, [sp]
 80288b0:	f7ff fee0 	bl	8028674 <_printf_common>
 80288b4:	3001      	adds	r0, #1
 80288b6:	d14c      	bne.n	8028952 <_printf_i+0x1fe>
 80288b8:	f04f 30ff 	mov.w	r0, #4294967295
 80288bc:	b004      	add	sp, #16
 80288be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80288c2:	4835      	ldr	r0, [pc, #212]	; (8028998 <_printf_i+0x244>)
 80288c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80288c8:	6829      	ldr	r1, [r5, #0]
 80288ca:	6823      	ldr	r3, [r4, #0]
 80288cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80288d0:	6029      	str	r1, [r5, #0]
 80288d2:	061d      	lsls	r5, r3, #24
 80288d4:	d514      	bpl.n	8028900 <_printf_i+0x1ac>
 80288d6:	07df      	lsls	r7, r3, #31
 80288d8:	bf44      	itt	mi
 80288da:	f043 0320 	orrmi.w	r3, r3, #32
 80288de:	6023      	strmi	r3, [r4, #0]
 80288e0:	b91e      	cbnz	r6, 80288ea <_printf_i+0x196>
 80288e2:	6823      	ldr	r3, [r4, #0]
 80288e4:	f023 0320 	bic.w	r3, r3, #32
 80288e8:	6023      	str	r3, [r4, #0]
 80288ea:	2310      	movs	r3, #16
 80288ec:	e7b0      	b.n	8028850 <_printf_i+0xfc>
 80288ee:	6823      	ldr	r3, [r4, #0]
 80288f0:	f043 0320 	orr.w	r3, r3, #32
 80288f4:	6023      	str	r3, [r4, #0]
 80288f6:	2378      	movs	r3, #120	; 0x78
 80288f8:	4828      	ldr	r0, [pc, #160]	; (802899c <_printf_i+0x248>)
 80288fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80288fe:	e7e3      	b.n	80288c8 <_printf_i+0x174>
 8028900:	0659      	lsls	r1, r3, #25
 8028902:	bf48      	it	mi
 8028904:	b2b6      	uxthmi	r6, r6
 8028906:	e7e6      	b.n	80288d6 <_printf_i+0x182>
 8028908:	4615      	mov	r5, r2
 802890a:	e7bb      	b.n	8028884 <_printf_i+0x130>
 802890c:	682b      	ldr	r3, [r5, #0]
 802890e:	6826      	ldr	r6, [r4, #0]
 8028910:	1d18      	adds	r0, r3, #4
 8028912:	6961      	ldr	r1, [r4, #20]
 8028914:	6028      	str	r0, [r5, #0]
 8028916:	0635      	lsls	r5, r6, #24
 8028918:	681b      	ldr	r3, [r3, #0]
 802891a:	d501      	bpl.n	8028920 <_printf_i+0x1cc>
 802891c:	6019      	str	r1, [r3, #0]
 802891e:	e002      	b.n	8028926 <_printf_i+0x1d2>
 8028920:	0670      	lsls	r0, r6, #25
 8028922:	d5fb      	bpl.n	802891c <_printf_i+0x1c8>
 8028924:	8019      	strh	r1, [r3, #0]
 8028926:	2300      	movs	r3, #0
 8028928:	4615      	mov	r5, r2
 802892a:	6123      	str	r3, [r4, #16]
 802892c:	e7ba      	b.n	80288a4 <_printf_i+0x150>
 802892e:	682b      	ldr	r3, [r5, #0]
 8028930:	2100      	movs	r1, #0
 8028932:	1d1a      	adds	r2, r3, #4
 8028934:	602a      	str	r2, [r5, #0]
 8028936:	681d      	ldr	r5, [r3, #0]
 8028938:	6862      	ldr	r2, [r4, #4]
 802893a:	4628      	mov	r0, r5
 802893c:	f000 fc92 	bl	8029264 <memchr>
 8028940:	b108      	cbz	r0, 8028946 <_printf_i+0x1f2>
 8028942:	1b40      	subs	r0, r0, r5
 8028944:	6060      	str	r0, [r4, #4]
 8028946:	6863      	ldr	r3, [r4, #4]
 8028948:	6123      	str	r3, [r4, #16]
 802894a:	2300      	movs	r3, #0
 802894c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028950:	e7a8      	b.n	80288a4 <_printf_i+0x150>
 8028952:	6923      	ldr	r3, [r4, #16]
 8028954:	462a      	mov	r2, r5
 8028956:	4649      	mov	r1, r9
 8028958:	4640      	mov	r0, r8
 802895a:	47d0      	blx	sl
 802895c:	3001      	adds	r0, #1
 802895e:	d0ab      	beq.n	80288b8 <_printf_i+0x164>
 8028960:	6823      	ldr	r3, [r4, #0]
 8028962:	079b      	lsls	r3, r3, #30
 8028964:	d413      	bmi.n	802898e <_printf_i+0x23a>
 8028966:	68e0      	ldr	r0, [r4, #12]
 8028968:	9b03      	ldr	r3, [sp, #12]
 802896a:	4298      	cmp	r0, r3
 802896c:	bfb8      	it	lt
 802896e:	4618      	movlt	r0, r3
 8028970:	e7a4      	b.n	80288bc <_printf_i+0x168>
 8028972:	2301      	movs	r3, #1
 8028974:	4632      	mov	r2, r6
 8028976:	4649      	mov	r1, r9
 8028978:	4640      	mov	r0, r8
 802897a:	47d0      	blx	sl
 802897c:	3001      	adds	r0, #1
 802897e:	d09b      	beq.n	80288b8 <_printf_i+0x164>
 8028980:	3501      	adds	r5, #1
 8028982:	68e3      	ldr	r3, [r4, #12]
 8028984:	9903      	ldr	r1, [sp, #12]
 8028986:	1a5b      	subs	r3, r3, r1
 8028988:	42ab      	cmp	r3, r5
 802898a:	dcf2      	bgt.n	8028972 <_printf_i+0x21e>
 802898c:	e7eb      	b.n	8028966 <_printf_i+0x212>
 802898e:	2500      	movs	r5, #0
 8028990:	f104 0619 	add.w	r6, r4, #25
 8028994:	e7f5      	b.n	8028982 <_printf_i+0x22e>
 8028996:	bf00      	nop
 8028998:	0802c2d9 	.word	0x0802c2d9
 802899c:	0802c2ea 	.word	0x0802c2ea

080289a0 <iprintf>:
 80289a0:	b40f      	push	{r0, r1, r2, r3}
 80289a2:	4b0a      	ldr	r3, [pc, #40]	; (80289cc <iprintf+0x2c>)
 80289a4:	b513      	push	{r0, r1, r4, lr}
 80289a6:	681c      	ldr	r4, [r3, #0]
 80289a8:	b124      	cbz	r4, 80289b4 <iprintf+0x14>
 80289aa:	69a3      	ldr	r3, [r4, #24]
 80289ac:	b913      	cbnz	r3, 80289b4 <iprintf+0x14>
 80289ae:	4620      	mov	r0, r4
 80289b0:	f000 fb52 	bl	8029058 <__sinit>
 80289b4:	ab05      	add	r3, sp, #20
 80289b6:	9a04      	ldr	r2, [sp, #16]
 80289b8:	68a1      	ldr	r1, [r4, #8]
 80289ba:	4620      	mov	r0, r4
 80289bc:	9301      	str	r3, [sp, #4]
 80289be:	f7ff fd29 	bl	8028414 <_vfiprintf_r>
 80289c2:	b002      	add	sp, #8
 80289c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80289c8:	b004      	add	sp, #16
 80289ca:	4770      	bx	lr
 80289cc:	200000c4 	.word	0x200000c4

080289d0 <_puts_r>:
 80289d0:	b570      	push	{r4, r5, r6, lr}
 80289d2:	460e      	mov	r6, r1
 80289d4:	4605      	mov	r5, r0
 80289d6:	b118      	cbz	r0, 80289e0 <_puts_r+0x10>
 80289d8:	6983      	ldr	r3, [r0, #24]
 80289da:	b90b      	cbnz	r3, 80289e0 <_puts_r+0x10>
 80289dc:	f000 fb3c 	bl	8029058 <__sinit>
 80289e0:	69ab      	ldr	r3, [r5, #24]
 80289e2:	68ac      	ldr	r4, [r5, #8]
 80289e4:	b913      	cbnz	r3, 80289ec <_puts_r+0x1c>
 80289e6:	4628      	mov	r0, r5
 80289e8:	f000 fb36 	bl	8029058 <__sinit>
 80289ec:	4b2c      	ldr	r3, [pc, #176]	; (8028aa0 <_puts_r+0xd0>)
 80289ee:	429c      	cmp	r4, r3
 80289f0:	d120      	bne.n	8028a34 <_puts_r+0x64>
 80289f2:	686c      	ldr	r4, [r5, #4]
 80289f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80289f6:	07db      	lsls	r3, r3, #31
 80289f8:	d405      	bmi.n	8028a06 <_puts_r+0x36>
 80289fa:	89a3      	ldrh	r3, [r4, #12]
 80289fc:	0598      	lsls	r0, r3, #22
 80289fe:	d402      	bmi.n	8028a06 <_puts_r+0x36>
 8028a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028a02:	f000 fbc7 	bl	8029194 <__retarget_lock_acquire_recursive>
 8028a06:	89a3      	ldrh	r3, [r4, #12]
 8028a08:	0719      	lsls	r1, r3, #28
 8028a0a:	d51d      	bpl.n	8028a48 <_puts_r+0x78>
 8028a0c:	6923      	ldr	r3, [r4, #16]
 8028a0e:	b1db      	cbz	r3, 8028a48 <_puts_r+0x78>
 8028a10:	3e01      	subs	r6, #1
 8028a12:	68a3      	ldr	r3, [r4, #8]
 8028a14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8028a18:	3b01      	subs	r3, #1
 8028a1a:	60a3      	str	r3, [r4, #8]
 8028a1c:	bb39      	cbnz	r1, 8028a6e <_puts_r+0x9e>
 8028a1e:	2b00      	cmp	r3, #0
 8028a20:	da38      	bge.n	8028a94 <_puts_r+0xc4>
 8028a22:	4622      	mov	r2, r4
 8028a24:	210a      	movs	r1, #10
 8028a26:	4628      	mov	r0, r5
 8028a28:	f000 f8da 	bl	8028be0 <__swbuf_r>
 8028a2c:	3001      	adds	r0, #1
 8028a2e:	d011      	beq.n	8028a54 <_puts_r+0x84>
 8028a30:	250a      	movs	r5, #10
 8028a32:	e011      	b.n	8028a58 <_puts_r+0x88>
 8028a34:	4b1b      	ldr	r3, [pc, #108]	; (8028aa4 <_puts_r+0xd4>)
 8028a36:	429c      	cmp	r4, r3
 8028a38:	d101      	bne.n	8028a3e <_puts_r+0x6e>
 8028a3a:	68ac      	ldr	r4, [r5, #8]
 8028a3c:	e7da      	b.n	80289f4 <_puts_r+0x24>
 8028a3e:	4b1a      	ldr	r3, [pc, #104]	; (8028aa8 <_puts_r+0xd8>)
 8028a40:	429c      	cmp	r4, r3
 8028a42:	bf08      	it	eq
 8028a44:	68ec      	ldreq	r4, [r5, #12]
 8028a46:	e7d5      	b.n	80289f4 <_puts_r+0x24>
 8028a48:	4621      	mov	r1, r4
 8028a4a:	4628      	mov	r0, r5
 8028a4c:	f000 f91a 	bl	8028c84 <__swsetup_r>
 8028a50:	2800      	cmp	r0, #0
 8028a52:	d0dd      	beq.n	8028a10 <_puts_r+0x40>
 8028a54:	f04f 35ff 	mov.w	r5, #4294967295
 8028a58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028a5a:	07da      	lsls	r2, r3, #31
 8028a5c:	d405      	bmi.n	8028a6a <_puts_r+0x9a>
 8028a5e:	89a3      	ldrh	r3, [r4, #12]
 8028a60:	059b      	lsls	r3, r3, #22
 8028a62:	d402      	bmi.n	8028a6a <_puts_r+0x9a>
 8028a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028a66:	f000 fb97 	bl	8029198 <__retarget_lock_release_recursive>
 8028a6a:	4628      	mov	r0, r5
 8028a6c:	bd70      	pop	{r4, r5, r6, pc}
 8028a6e:	2b00      	cmp	r3, #0
 8028a70:	da04      	bge.n	8028a7c <_puts_r+0xac>
 8028a72:	69a2      	ldr	r2, [r4, #24]
 8028a74:	429a      	cmp	r2, r3
 8028a76:	dc06      	bgt.n	8028a86 <_puts_r+0xb6>
 8028a78:	290a      	cmp	r1, #10
 8028a7a:	d004      	beq.n	8028a86 <_puts_r+0xb6>
 8028a7c:	6823      	ldr	r3, [r4, #0]
 8028a7e:	1c5a      	adds	r2, r3, #1
 8028a80:	6022      	str	r2, [r4, #0]
 8028a82:	7019      	strb	r1, [r3, #0]
 8028a84:	e7c5      	b.n	8028a12 <_puts_r+0x42>
 8028a86:	4622      	mov	r2, r4
 8028a88:	4628      	mov	r0, r5
 8028a8a:	f000 f8a9 	bl	8028be0 <__swbuf_r>
 8028a8e:	3001      	adds	r0, #1
 8028a90:	d1bf      	bne.n	8028a12 <_puts_r+0x42>
 8028a92:	e7df      	b.n	8028a54 <_puts_r+0x84>
 8028a94:	6823      	ldr	r3, [r4, #0]
 8028a96:	250a      	movs	r5, #10
 8028a98:	1c5a      	adds	r2, r3, #1
 8028a9a:	6022      	str	r2, [r4, #0]
 8028a9c:	701d      	strb	r5, [r3, #0]
 8028a9e:	e7db      	b.n	8028a58 <_puts_r+0x88>
 8028aa0:	0802c394 	.word	0x0802c394
 8028aa4:	0802c3b4 	.word	0x0802c3b4
 8028aa8:	0802c374 	.word	0x0802c374

08028aac <puts>:
 8028aac:	4b02      	ldr	r3, [pc, #8]	; (8028ab8 <puts+0xc>)
 8028aae:	4601      	mov	r1, r0
 8028ab0:	6818      	ldr	r0, [r3, #0]
 8028ab2:	f7ff bf8d 	b.w	80289d0 <_puts_r>
 8028ab6:	bf00      	nop
 8028ab8:	200000c4 	.word	0x200000c4

08028abc <rand>:
 8028abc:	4b16      	ldr	r3, [pc, #88]	; (8028b18 <rand+0x5c>)
 8028abe:	b510      	push	{r4, lr}
 8028ac0:	681c      	ldr	r4, [r3, #0]
 8028ac2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8028ac4:	b9b3      	cbnz	r3, 8028af4 <rand+0x38>
 8028ac6:	2018      	movs	r0, #24
 8028ac8:	f7ff fb74 	bl	80281b4 <malloc>
 8028acc:	63a0      	str	r0, [r4, #56]	; 0x38
 8028ace:	b928      	cbnz	r0, 8028adc <rand+0x20>
 8028ad0:	4602      	mov	r2, r0
 8028ad2:	4b12      	ldr	r3, [pc, #72]	; (8028b1c <rand+0x60>)
 8028ad4:	214e      	movs	r1, #78	; 0x4e
 8028ad6:	4812      	ldr	r0, [pc, #72]	; (8028b20 <rand+0x64>)
 8028ad8:	f7ff fafe 	bl	80280d8 <__assert_func>
 8028adc:	4a11      	ldr	r2, [pc, #68]	; (8028b24 <rand+0x68>)
 8028ade:	4b12      	ldr	r3, [pc, #72]	; (8028b28 <rand+0x6c>)
 8028ae0:	e9c0 2300 	strd	r2, r3, [r0]
 8028ae4:	4b11      	ldr	r3, [pc, #68]	; (8028b2c <rand+0x70>)
 8028ae6:	2201      	movs	r2, #1
 8028ae8:	6083      	str	r3, [r0, #8]
 8028aea:	230b      	movs	r3, #11
 8028aec:	8183      	strh	r3, [r0, #12]
 8028aee:	2300      	movs	r3, #0
 8028af0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8028af4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8028af6:	4a0e      	ldr	r2, [pc, #56]	; (8028b30 <rand+0x74>)
 8028af8:	6920      	ldr	r0, [r4, #16]
 8028afa:	6963      	ldr	r3, [r4, #20]
 8028afc:	490d      	ldr	r1, [pc, #52]	; (8028b34 <rand+0x78>)
 8028afe:	4342      	muls	r2, r0
 8028b00:	fb01 2203 	mla	r2, r1, r3, r2
 8028b04:	fba0 0101 	umull	r0, r1, r0, r1
 8028b08:	1c43      	adds	r3, r0, #1
 8028b0a:	eb42 0001 	adc.w	r0, r2, r1
 8028b0e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8028b12:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8028b16:	bd10      	pop	{r4, pc}
 8028b18:	200000c4 	.word	0x200000c4
 8028b1c:	0802c300 	.word	0x0802c300
 8028b20:	0802c317 	.word	0x0802c317
 8028b24:	abcd330e 	.word	0xabcd330e
 8028b28:	e66d1234 	.word	0xe66d1234
 8028b2c:	0005deec 	.word	0x0005deec
 8028b30:	5851f42d 	.word	0x5851f42d
 8028b34:	4c957f2d 	.word	0x4c957f2d

08028b38 <_sbrk_r>:
 8028b38:	b538      	push	{r3, r4, r5, lr}
 8028b3a:	2300      	movs	r3, #0
 8028b3c:	4d05      	ldr	r5, [pc, #20]	; (8028b54 <_sbrk_r+0x1c>)
 8028b3e:	4604      	mov	r4, r0
 8028b40:	4608      	mov	r0, r1
 8028b42:	602b      	str	r3, [r5, #0]
 8028b44:	f7d8 ffe0 	bl	8001b08 <_sbrk>
 8028b48:	1c43      	adds	r3, r0, #1
 8028b4a:	d102      	bne.n	8028b52 <_sbrk_r+0x1a>
 8028b4c:	682b      	ldr	r3, [r5, #0]
 8028b4e:	b103      	cbz	r3, 8028b52 <_sbrk_r+0x1a>
 8028b50:	6023      	str	r3, [r4, #0]
 8028b52:	bd38      	pop	{r3, r4, r5, pc}
 8028b54:	20198590 	.word	0x20198590

08028b58 <_raise_r>:
 8028b58:	291f      	cmp	r1, #31
 8028b5a:	b538      	push	{r3, r4, r5, lr}
 8028b5c:	4604      	mov	r4, r0
 8028b5e:	460d      	mov	r5, r1
 8028b60:	d904      	bls.n	8028b6c <_raise_r+0x14>
 8028b62:	2316      	movs	r3, #22
 8028b64:	6003      	str	r3, [r0, #0]
 8028b66:	f04f 30ff 	mov.w	r0, #4294967295
 8028b6a:	bd38      	pop	{r3, r4, r5, pc}
 8028b6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8028b6e:	b112      	cbz	r2, 8028b76 <_raise_r+0x1e>
 8028b70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028b74:	b94b      	cbnz	r3, 8028b8a <_raise_r+0x32>
 8028b76:	4620      	mov	r0, r4
 8028b78:	f000 f830 	bl	8028bdc <_getpid_r>
 8028b7c:	462a      	mov	r2, r5
 8028b7e:	4601      	mov	r1, r0
 8028b80:	4620      	mov	r0, r4
 8028b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028b86:	f000 b817 	b.w	8028bb8 <_kill_r>
 8028b8a:	2b01      	cmp	r3, #1
 8028b8c:	d00a      	beq.n	8028ba4 <_raise_r+0x4c>
 8028b8e:	1c59      	adds	r1, r3, #1
 8028b90:	d103      	bne.n	8028b9a <_raise_r+0x42>
 8028b92:	2316      	movs	r3, #22
 8028b94:	6003      	str	r3, [r0, #0]
 8028b96:	2001      	movs	r0, #1
 8028b98:	e7e7      	b.n	8028b6a <_raise_r+0x12>
 8028b9a:	2400      	movs	r4, #0
 8028b9c:	4628      	mov	r0, r5
 8028b9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028ba2:	4798      	blx	r3
 8028ba4:	2000      	movs	r0, #0
 8028ba6:	e7e0      	b.n	8028b6a <_raise_r+0x12>

08028ba8 <raise>:
 8028ba8:	4b02      	ldr	r3, [pc, #8]	; (8028bb4 <raise+0xc>)
 8028baa:	4601      	mov	r1, r0
 8028bac:	6818      	ldr	r0, [r3, #0]
 8028bae:	f7ff bfd3 	b.w	8028b58 <_raise_r>
 8028bb2:	bf00      	nop
 8028bb4:	200000c4 	.word	0x200000c4

08028bb8 <_kill_r>:
 8028bb8:	b538      	push	{r3, r4, r5, lr}
 8028bba:	2300      	movs	r3, #0
 8028bbc:	4d06      	ldr	r5, [pc, #24]	; (8028bd8 <_kill_r+0x20>)
 8028bbe:	4604      	mov	r4, r0
 8028bc0:	4608      	mov	r0, r1
 8028bc2:	4611      	mov	r1, r2
 8028bc4:	602b      	str	r3, [r5, #0]
 8028bc6:	f7d8 ff17 	bl	80019f8 <_kill>
 8028bca:	1c43      	adds	r3, r0, #1
 8028bcc:	d102      	bne.n	8028bd4 <_kill_r+0x1c>
 8028bce:	682b      	ldr	r3, [r5, #0]
 8028bd0:	b103      	cbz	r3, 8028bd4 <_kill_r+0x1c>
 8028bd2:	6023      	str	r3, [r4, #0]
 8028bd4:	bd38      	pop	{r3, r4, r5, pc}
 8028bd6:	bf00      	nop
 8028bd8:	20198590 	.word	0x20198590

08028bdc <_getpid_r>:
 8028bdc:	f7d8 bf04 	b.w	80019e8 <_getpid>

08028be0 <__swbuf_r>:
 8028be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028be2:	460e      	mov	r6, r1
 8028be4:	4614      	mov	r4, r2
 8028be6:	4605      	mov	r5, r0
 8028be8:	b118      	cbz	r0, 8028bf2 <__swbuf_r+0x12>
 8028bea:	6983      	ldr	r3, [r0, #24]
 8028bec:	b90b      	cbnz	r3, 8028bf2 <__swbuf_r+0x12>
 8028bee:	f000 fa33 	bl	8029058 <__sinit>
 8028bf2:	4b21      	ldr	r3, [pc, #132]	; (8028c78 <__swbuf_r+0x98>)
 8028bf4:	429c      	cmp	r4, r3
 8028bf6:	d12b      	bne.n	8028c50 <__swbuf_r+0x70>
 8028bf8:	686c      	ldr	r4, [r5, #4]
 8028bfa:	69a3      	ldr	r3, [r4, #24]
 8028bfc:	60a3      	str	r3, [r4, #8]
 8028bfe:	89a3      	ldrh	r3, [r4, #12]
 8028c00:	071a      	lsls	r2, r3, #28
 8028c02:	d52f      	bpl.n	8028c64 <__swbuf_r+0x84>
 8028c04:	6923      	ldr	r3, [r4, #16]
 8028c06:	b36b      	cbz	r3, 8028c64 <__swbuf_r+0x84>
 8028c08:	6923      	ldr	r3, [r4, #16]
 8028c0a:	b2f6      	uxtb	r6, r6
 8028c0c:	6820      	ldr	r0, [r4, #0]
 8028c0e:	4637      	mov	r7, r6
 8028c10:	1ac0      	subs	r0, r0, r3
 8028c12:	6963      	ldr	r3, [r4, #20]
 8028c14:	4283      	cmp	r3, r0
 8028c16:	dc04      	bgt.n	8028c22 <__swbuf_r+0x42>
 8028c18:	4621      	mov	r1, r4
 8028c1a:	4628      	mov	r0, r5
 8028c1c:	f000 f988 	bl	8028f30 <_fflush_r>
 8028c20:	bb30      	cbnz	r0, 8028c70 <__swbuf_r+0x90>
 8028c22:	68a3      	ldr	r3, [r4, #8]
 8028c24:	3001      	adds	r0, #1
 8028c26:	3b01      	subs	r3, #1
 8028c28:	60a3      	str	r3, [r4, #8]
 8028c2a:	6823      	ldr	r3, [r4, #0]
 8028c2c:	1c5a      	adds	r2, r3, #1
 8028c2e:	6022      	str	r2, [r4, #0]
 8028c30:	701e      	strb	r6, [r3, #0]
 8028c32:	6963      	ldr	r3, [r4, #20]
 8028c34:	4283      	cmp	r3, r0
 8028c36:	d004      	beq.n	8028c42 <__swbuf_r+0x62>
 8028c38:	89a3      	ldrh	r3, [r4, #12]
 8028c3a:	07db      	lsls	r3, r3, #31
 8028c3c:	d506      	bpl.n	8028c4c <__swbuf_r+0x6c>
 8028c3e:	2e0a      	cmp	r6, #10
 8028c40:	d104      	bne.n	8028c4c <__swbuf_r+0x6c>
 8028c42:	4621      	mov	r1, r4
 8028c44:	4628      	mov	r0, r5
 8028c46:	f000 f973 	bl	8028f30 <_fflush_r>
 8028c4a:	b988      	cbnz	r0, 8028c70 <__swbuf_r+0x90>
 8028c4c:	4638      	mov	r0, r7
 8028c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028c50:	4b0a      	ldr	r3, [pc, #40]	; (8028c7c <__swbuf_r+0x9c>)
 8028c52:	429c      	cmp	r4, r3
 8028c54:	d101      	bne.n	8028c5a <__swbuf_r+0x7a>
 8028c56:	68ac      	ldr	r4, [r5, #8]
 8028c58:	e7cf      	b.n	8028bfa <__swbuf_r+0x1a>
 8028c5a:	4b09      	ldr	r3, [pc, #36]	; (8028c80 <__swbuf_r+0xa0>)
 8028c5c:	429c      	cmp	r4, r3
 8028c5e:	bf08      	it	eq
 8028c60:	68ec      	ldreq	r4, [r5, #12]
 8028c62:	e7ca      	b.n	8028bfa <__swbuf_r+0x1a>
 8028c64:	4621      	mov	r1, r4
 8028c66:	4628      	mov	r0, r5
 8028c68:	f000 f80c 	bl	8028c84 <__swsetup_r>
 8028c6c:	2800      	cmp	r0, #0
 8028c6e:	d0cb      	beq.n	8028c08 <__swbuf_r+0x28>
 8028c70:	f04f 37ff 	mov.w	r7, #4294967295
 8028c74:	e7ea      	b.n	8028c4c <__swbuf_r+0x6c>
 8028c76:	bf00      	nop
 8028c78:	0802c394 	.word	0x0802c394
 8028c7c:	0802c3b4 	.word	0x0802c3b4
 8028c80:	0802c374 	.word	0x0802c374

08028c84 <__swsetup_r>:
 8028c84:	4b32      	ldr	r3, [pc, #200]	; (8028d50 <__swsetup_r+0xcc>)
 8028c86:	b570      	push	{r4, r5, r6, lr}
 8028c88:	681d      	ldr	r5, [r3, #0]
 8028c8a:	4606      	mov	r6, r0
 8028c8c:	460c      	mov	r4, r1
 8028c8e:	b125      	cbz	r5, 8028c9a <__swsetup_r+0x16>
 8028c90:	69ab      	ldr	r3, [r5, #24]
 8028c92:	b913      	cbnz	r3, 8028c9a <__swsetup_r+0x16>
 8028c94:	4628      	mov	r0, r5
 8028c96:	f000 f9df 	bl	8029058 <__sinit>
 8028c9a:	4b2e      	ldr	r3, [pc, #184]	; (8028d54 <__swsetup_r+0xd0>)
 8028c9c:	429c      	cmp	r4, r3
 8028c9e:	d10f      	bne.n	8028cc0 <__swsetup_r+0x3c>
 8028ca0:	686c      	ldr	r4, [r5, #4]
 8028ca2:	89a3      	ldrh	r3, [r4, #12]
 8028ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028ca8:	0719      	lsls	r1, r3, #28
 8028caa:	d42c      	bmi.n	8028d06 <__swsetup_r+0x82>
 8028cac:	06dd      	lsls	r5, r3, #27
 8028cae:	d411      	bmi.n	8028cd4 <__swsetup_r+0x50>
 8028cb0:	2309      	movs	r3, #9
 8028cb2:	6033      	str	r3, [r6, #0]
 8028cb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8028cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8028cbc:	81a3      	strh	r3, [r4, #12]
 8028cbe:	e03e      	b.n	8028d3e <__swsetup_r+0xba>
 8028cc0:	4b25      	ldr	r3, [pc, #148]	; (8028d58 <__swsetup_r+0xd4>)
 8028cc2:	429c      	cmp	r4, r3
 8028cc4:	d101      	bne.n	8028cca <__swsetup_r+0x46>
 8028cc6:	68ac      	ldr	r4, [r5, #8]
 8028cc8:	e7eb      	b.n	8028ca2 <__swsetup_r+0x1e>
 8028cca:	4b24      	ldr	r3, [pc, #144]	; (8028d5c <__swsetup_r+0xd8>)
 8028ccc:	429c      	cmp	r4, r3
 8028cce:	bf08      	it	eq
 8028cd0:	68ec      	ldreq	r4, [r5, #12]
 8028cd2:	e7e6      	b.n	8028ca2 <__swsetup_r+0x1e>
 8028cd4:	0758      	lsls	r0, r3, #29
 8028cd6:	d512      	bpl.n	8028cfe <__swsetup_r+0x7a>
 8028cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028cda:	b141      	cbz	r1, 8028cee <__swsetup_r+0x6a>
 8028cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028ce0:	4299      	cmp	r1, r3
 8028ce2:	d002      	beq.n	8028cea <__swsetup_r+0x66>
 8028ce4:	4630      	mov	r0, r6
 8028ce6:	f7ff fa8b 	bl	8028200 <_free_r>
 8028cea:	2300      	movs	r3, #0
 8028cec:	6363      	str	r3, [r4, #52]	; 0x34
 8028cee:	89a3      	ldrh	r3, [r4, #12]
 8028cf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028cf4:	81a3      	strh	r3, [r4, #12]
 8028cf6:	2300      	movs	r3, #0
 8028cf8:	6063      	str	r3, [r4, #4]
 8028cfa:	6923      	ldr	r3, [r4, #16]
 8028cfc:	6023      	str	r3, [r4, #0]
 8028cfe:	89a3      	ldrh	r3, [r4, #12]
 8028d00:	f043 0308 	orr.w	r3, r3, #8
 8028d04:	81a3      	strh	r3, [r4, #12]
 8028d06:	6923      	ldr	r3, [r4, #16]
 8028d08:	b94b      	cbnz	r3, 8028d1e <__swsetup_r+0x9a>
 8028d0a:	89a3      	ldrh	r3, [r4, #12]
 8028d0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8028d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028d14:	d003      	beq.n	8028d1e <__swsetup_r+0x9a>
 8028d16:	4621      	mov	r1, r4
 8028d18:	4630      	mov	r0, r6
 8028d1a:	f000 fa63 	bl	80291e4 <__smakebuf_r>
 8028d1e:	89a0      	ldrh	r0, [r4, #12]
 8028d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028d24:	f010 0301 	ands.w	r3, r0, #1
 8028d28:	d00a      	beq.n	8028d40 <__swsetup_r+0xbc>
 8028d2a:	2300      	movs	r3, #0
 8028d2c:	60a3      	str	r3, [r4, #8]
 8028d2e:	6963      	ldr	r3, [r4, #20]
 8028d30:	425b      	negs	r3, r3
 8028d32:	61a3      	str	r3, [r4, #24]
 8028d34:	6923      	ldr	r3, [r4, #16]
 8028d36:	b943      	cbnz	r3, 8028d4a <__swsetup_r+0xc6>
 8028d38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8028d3c:	d1ba      	bne.n	8028cb4 <__swsetup_r+0x30>
 8028d3e:	bd70      	pop	{r4, r5, r6, pc}
 8028d40:	0781      	lsls	r1, r0, #30
 8028d42:	bf58      	it	pl
 8028d44:	6963      	ldrpl	r3, [r4, #20]
 8028d46:	60a3      	str	r3, [r4, #8]
 8028d48:	e7f4      	b.n	8028d34 <__swsetup_r+0xb0>
 8028d4a:	2000      	movs	r0, #0
 8028d4c:	e7f7      	b.n	8028d3e <__swsetup_r+0xba>
 8028d4e:	bf00      	nop
 8028d50:	200000c4 	.word	0x200000c4
 8028d54:	0802c394 	.word	0x0802c394
 8028d58:	0802c3b4 	.word	0x0802c3b4
 8028d5c:	0802c374 	.word	0x0802c374

08028d60 <__register_exitproc>:
 8028d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028d64:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8028e24 <__register_exitproc+0xc4>
 8028d68:	4606      	mov	r6, r0
 8028d6a:	461f      	mov	r7, r3
 8028d6c:	460d      	mov	r5, r1
 8028d6e:	f8d8 0000 	ldr.w	r0, [r8]
 8028d72:	4691      	mov	r9, r2
 8028d74:	f000 fa0e 	bl	8029194 <__retarget_lock_acquire_recursive>
 8028d78:	4b26      	ldr	r3, [pc, #152]	; (8028e14 <__register_exitproc+0xb4>)
 8028d7a:	681c      	ldr	r4, [r3, #0]
 8028d7c:	b934      	cbnz	r4, 8028d8c <__register_exitproc+0x2c>
 8028d7e:	4c26      	ldr	r4, [pc, #152]	; (8028e18 <__register_exitproc+0xb8>)
 8028d80:	601c      	str	r4, [r3, #0]
 8028d82:	4b26      	ldr	r3, [pc, #152]	; (8028e1c <__register_exitproc+0xbc>)
 8028d84:	b113      	cbz	r3, 8028d8c <__register_exitproc+0x2c>
 8028d86:	681b      	ldr	r3, [r3, #0]
 8028d88:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8028d8c:	6863      	ldr	r3, [r4, #4]
 8028d8e:	2b1f      	cmp	r3, #31
 8028d90:	dd07      	ble.n	8028da2 <__register_exitproc+0x42>
 8028d92:	f8d8 0000 	ldr.w	r0, [r8]
 8028d96:	f000 f9ff 	bl	8029198 <__retarget_lock_release_recursive>
 8028d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8028d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028da2:	b35e      	cbz	r6, 8028dfc <__register_exitproc+0x9c>
 8028da4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8028da8:	b988      	cbnz	r0, 8028dce <__register_exitproc+0x6e>
 8028daa:	4b1d      	ldr	r3, [pc, #116]	; (8028e20 <__register_exitproc+0xc0>)
 8028dac:	b923      	cbnz	r3, 8028db8 <__register_exitproc+0x58>
 8028dae:	f8d8 0000 	ldr.w	r0, [r8]
 8028db2:	f000 f9f0 	bl	8029196 <__retarget_lock_release>
 8028db6:	e7f0      	b.n	8028d9a <__register_exitproc+0x3a>
 8028db8:	f44f 7084 	mov.w	r0, #264	; 0x108
 8028dbc:	f7ff f9fa 	bl	80281b4 <malloc>
 8028dc0:	2800      	cmp	r0, #0
 8028dc2:	d0f4      	beq.n	8028dae <__register_exitproc+0x4e>
 8028dc4:	2300      	movs	r3, #0
 8028dc6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8028dca:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8028dce:	6863      	ldr	r3, [r4, #4]
 8028dd0:	2201      	movs	r2, #1
 8028dd2:	2e02      	cmp	r6, #2
 8028dd4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8028dd8:	fa02 f203 	lsl.w	r2, r2, r3
 8028ddc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8028de0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8028de4:	ea43 0302 	orr.w	r3, r3, r2
 8028de8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8028dec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8028df0:	bf02      	ittt	eq
 8028df2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8028df6:	4313      	orreq	r3, r2
 8028df8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8028dfc:	6863      	ldr	r3, [r4, #4]
 8028dfe:	f8d8 0000 	ldr.w	r0, [r8]
 8028e02:	1c5a      	adds	r2, r3, #1
 8028e04:	3302      	adds	r3, #2
 8028e06:	6062      	str	r2, [r4, #4]
 8028e08:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8028e0c:	f000 f9c4 	bl	8029198 <__retarget_lock_release_recursive>
 8028e10:	2000      	movs	r0, #0
 8028e12:	e7c4      	b.n	8028d9e <__register_exitproc+0x3e>
 8028e14:	20198588 	.word	0x20198588
 8028e18:	201984fc 	.word	0x201984fc
 8028e1c:	0802c2fc 	.word	0x0802c2fc
 8028e20:	080281b5 	.word	0x080281b5
 8028e24:	20000128 	.word	0x20000128

08028e28 <__sflush_r>:
 8028e28:	898a      	ldrh	r2, [r1, #12]
 8028e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028e2e:	4605      	mov	r5, r0
 8028e30:	0710      	lsls	r0, r2, #28
 8028e32:	460c      	mov	r4, r1
 8028e34:	d458      	bmi.n	8028ee8 <__sflush_r+0xc0>
 8028e36:	684b      	ldr	r3, [r1, #4]
 8028e38:	2b00      	cmp	r3, #0
 8028e3a:	dc05      	bgt.n	8028e48 <__sflush_r+0x20>
 8028e3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028e3e:	2b00      	cmp	r3, #0
 8028e40:	dc02      	bgt.n	8028e48 <__sflush_r+0x20>
 8028e42:	2000      	movs	r0, #0
 8028e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028e48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028e4a:	2e00      	cmp	r6, #0
 8028e4c:	d0f9      	beq.n	8028e42 <__sflush_r+0x1a>
 8028e4e:	2300      	movs	r3, #0
 8028e50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028e54:	682f      	ldr	r7, [r5, #0]
 8028e56:	602b      	str	r3, [r5, #0]
 8028e58:	d032      	beq.n	8028ec0 <__sflush_r+0x98>
 8028e5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028e5c:	89a3      	ldrh	r3, [r4, #12]
 8028e5e:	075a      	lsls	r2, r3, #29
 8028e60:	d505      	bpl.n	8028e6e <__sflush_r+0x46>
 8028e62:	6863      	ldr	r3, [r4, #4]
 8028e64:	1ac0      	subs	r0, r0, r3
 8028e66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028e68:	b10b      	cbz	r3, 8028e6e <__sflush_r+0x46>
 8028e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028e6c:	1ac0      	subs	r0, r0, r3
 8028e6e:	2300      	movs	r3, #0
 8028e70:	4602      	mov	r2, r0
 8028e72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028e74:	4628      	mov	r0, r5
 8028e76:	6a21      	ldr	r1, [r4, #32]
 8028e78:	47b0      	blx	r6
 8028e7a:	1c43      	adds	r3, r0, #1
 8028e7c:	89a3      	ldrh	r3, [r4, #12]
 8028e7e:	d106      	bne.n	8028e8e <__sflush_r+0x66>
 8028e80:	6829      	ldr	r1, [r5, #0]
 8028e82:	291d      	cmp	r1, #29
 8028e84:	d82c      	bhi.n	8028ee0 <__sflush_r+0xb8>
 8028e86:	4a29      	ldr	r2, [pc, #164]	; (8028f2c <__sflush_r+0x104>)
 8028e88:	40ca      	lsrs	r2, r1
 8028e8a:	07d6      	lsls	r6, r2, #31
 8028e8c:	d528      	bpl.n	8028ee0 <__sflush_r+0xb8>
 8028e8e:	2200      	movs	r2, #0
 8028e90:	04d9      	lsls	r1, r3, #19
 8028e92:	6062      	str	r2, [r4, #4]
 8028e94:	6922      	ldr	r2, [r4, #16]
 8028e96:	6022      	str	r2, [r4, #0]
 8028e98:	d504      	bpl.n	8028ea4 <__sflush_r+0x7c>
 8028e9a:	1c42      	adds	r2, r0, #1
 8028e9c:	d101      	bne.n	8028ea2 <__sflush_r+0x7a>
 8028e9e:	682b      	ldr	r3, [r5, #0]
 8028ea0:	b903      	cbnz	r3, 8028ea4 <__sflush_r+0x7c>
 8028ea2:	6560      	str	r0, [r4, #84]	; 0x54
 8028ea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028ea6:	602f      	str	r7, [r5, #0]
 8028ea8:	2900      	cmp	r1, #0
 8028eaa:	d0ca      	beq.n	8028e42 <__sflush_r+0x1a>
 8028eac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028eb0:	4299      	cmp	r1, r3
 8028eb2:	d002      	beq.n	8028eba <__sflush_r+0x92>
 8028eb4:	4628      	mov	r0, r5
 8028eb6:	f7ff f9a3 	bl	8028200 <_free_r>
 8028eba:	2000      	movs	r0, #0
 8028ebc:	6360      	str	r0, [r4, #52]	; 0x34
 8028ebe:	e7c1      	b.n	8028e44 <__sflush_r+0x1c>
 8028ec0:	6a21      	ldr	r1, [r4, #32]
 8028ec2:	2301      	movs	r3, #1
 8028ec4:	4628      	mov	r0, r5
 8028ec6:	47b0      	blx	r6
 8028ec8:	1c41      	adds	r1, r0, #1
 8028eca:	d1c7      	bne.n	8028e5c <__sflush_r+0x34>
 8028ecc:	682b      	ldr	r3, [r5, #0]
 8028ece:	2b00      	cmp	r3, #0
 8028ed0:	d0c4      	beq.n	8028e5c <__sflush_r+0x34>
 8028ed2:	2b1d      	cmp	r3, #29
 8028ed4:	d001      	beq.n	8028eda <__sflush_r+0xb2>
 8028ed6:	2b16      	cmp	r3, #22
 8028ed8:	d101      	bne.n	8028ede <__sflush_r+0xb6>
 8028eda:	602f      	str	r7, [r5, #0]
 8028edc:	e7b1      	b.n	8028e42 <__sflush_r+0x1a>
 8028ede:	89a3      	ldrh	r3, [r4, #12]
 8028ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028ee4:	81a3      	strh	r3, [r4, #12]
 8028ee6:	e7ad      	b.n	8028e44 <__sflush_r+0x1c>
 8028ee8:	690f      	ldr	r7, [r1, #16]
 8028eea:	2f00      	cmp	r7, #0
 8028eec:	d0a9      	beq.n	8028e42 <__sflush_r+0x1a>
 8028eee:	0793      	lsls	r3, r2, #30
 8028ef0:	680e      	ldr	r6, [r1, #0]
 8028ef2:	600f      	str	r7, [r1, #0]
 8028ef4:	bf0c      	ite	eq
 8028ef6:	694b      	ldreq	r3, [r1, #20]
 8028ef8:	2300      	movne	r3, #0
 8028efa:	eba6 0807 	sub.w	r8, r6, r7
 8028efe:	608b      	str	r3, [r1, #8]
 8028f00:	f1b8 0f00 	cmp.w	r8, #0
 8028f04:	dd9d      	ble.n	8028e42 <__sflush_r+0x1a>
 8028f06:	4643      	mov	r3, r8
 8028f08:	463a      	mov	r2, r7
 8028f0a:	6a21      	ldr	r1, [r4, #32]
 8028f0c:	4628      	mov	r0, r5
 8028f0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028f10:	47b0      	blx	r6
 8028f12:	2800      	cmp	r0, #0
 8028f14:	dc06      	bgt.n	8028f24 <__sflush_r+0xfc>
 8028f16:	89a3      	ldrh	r3, [r4, #12]
 8028f18:	f04f 30ff 	mov.w	r0, #4294967295
 8028f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028f20:	81a3      	strh	r3, [r4, #12]
 8028f22:	e78f      	b.n	8028e44 <__sflush_r+0x1c>
 8028f24:	4407      	add	r7, r0
 8028f26:	eba8 0800 	sub.w	r8, r8, r0
 8028f2a:	e7e9      	b.n	8028f00 <__sflush_r+0xd8>
 8028f2c:	20400001 	.word	0x20400001

08028f30 <_fflush_r>:
 8028f30:	b538      	push	{r3, r4, r5, lr}
 8028f32:	690b      	ldr	r3, [r1, #16]
 8028f34:	4605      	mov	r5, r0
 8028f36:	460c      	mov	r4, r1
 8028f38:	b913      	cbnz	r3, 8028f40 <_fflush_r+0x10>
 8028f3a:	2500      	movs	r5, #0
 8028f3c:	4628      	mov	r0, r5
 8028f3e:	bd38      	pop	{r3, r4, r5, pc}
 8028f40:	b118      	cbz	r0, 8028f4a <_fflush_r+0x1a>
 8028f42:	6983      	ldr	r3, [r0, #24]
 8028f44:	b90b      	cbnz	r3, 8028f4a <_fflush_r+0x1a>
 8028f46:	f000 f887 	bl	8029058 <__sinit>
 8028f4a:	4b14      	ldr	r3, [pc, #80]	; (8028f9c <_fflush_r+0x6c>)
 8028f4c:	429c      	cmp	r4, r3
 8028f4e:	d11b      	bne.n	8028f88 <_fflush_r+0x58>
 8028f50:	686c      	ldr	r4, [r5, #4]
 8028f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028f56:	2b00      	cmp	r3, #0
 8028f58:	d0ef      	beq.n	8028f3a <_fflush_r+0xa>
 8028f5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8028f5c:	07d0      	lsls	r0, r2, #31
 8028f5e:	d404      	bmi.n	8028f6a <_fflush_r+0x3a>
 8028f60:	0599      	lsls	r1, r3, #22
 8028f62:	d402      	bmi.n	8028f6a <_fflush_r+0x3a>
 8028f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028f66:	f000 f915 	bl	8029194 <__retarget_lock_acquire_recursive>
 8028f6a:	4628      	mov	r0, r5
 8028f6c:	4621      	mov	r1, r4
 8028f6e:	f7ff ff5b 	bl	8028e28 <__sflush_r>
 8028f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028f74:	4605      	mov	r5, r0
 8028f76:	07da      	lsls	r2, r3, #31
 8028f78:	d4e0      	bmi.n	8028f3c <_fflush_r+0xc>
 8028f7a:	89a3      	ldrh	r3, [r4, #12]
 8028f7c:	059b      	lsls	r3, r3, #22
 8028f7e:	d4dd      	bmi.n	8028f3c <_fflush_r+0xc>
 8028f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028f82:	f000 f909 	bl	8029198 <__retarget_lock_release_recursive>
 8028f86:	e7d9      	b.n	8028f3c <_fflush_r+0xc>
 8028f88:	4b05      	ldr	r3, [pc, #20]	; (8028fa0 <_fflush_r+0x70>)
 8028f8a:	429c      	cmp	r4, r3
 8028f8c:	d101      	bne.n	8028f92 <_fflush_r+0x62>
 8028f8e:	68ac      	ldr	r4, [r5, #8]
 8028f90:	e7df      	b.n	8028f52 <_fflush_r+0x22>
 8028f92:	4b04      	ldr	r3, [pc, #16]	; (8028fa4 <_fflush_r+0x74>)
 8028f94:	429c      	cmp	r4, r3
 8028f96:	bf08      	it	eq
 8028f98:	68ec      	ldreq	r4, [r5, #12]
 8028f9a:	e7da      	b.n	8028f52 <_fflush_r+0x22>
 8028f9c:	0802c394 	.word	0x0802c394
 8028fa0:	0802c3b4 	.word	0x0802c3b4
 8028fa4:	0802c374 	.word	0x0802c374

08028fa8 <std>:
 8028fa8:	2300      	movs	r3, #0
 8028faa:	b510      	push	{r4, lr}
 8028fac:	4604      	mov	r4, r0
 8028fae:	6083      	str	r3, [r0, #8]
 8028fb0:	8181      	strh	r1, [r0, #12]
 8028fb2:	4619      	mov	r1, r3
 8028fb4:	6643      	str	r3, [r0, #100]	; 0x64
 8028fb6:	81c2      	strh	r2, [r0, #14]
 8028fb8:	2208      	movs	r2, #8
 8028fba:	6183      	str	r3, [r0, #24]
 8028fbc:	e9c0 3300 	strd	r3, r3, [r0]
 8028fc0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028fc4:	305c      	adds	r0, #92	; 0x5c
 8028fc6:	f7ff f912 	bl	80281ee <memset>
 8028fca:	4b05      	ldr	r3, [pc, #20]	; (8028fe0 <std+0x38>)
 8028fcc:	6224      	str	r4, [r4, #32]
 8028fce:	6263      	str	r3, [r4, #36]	; 0x24
 8028fd0:	4b04      	ldr	r3, [pc, #16]	; (8028fe4 <std+0x3c>)
 8028fd2:	62a3      	str	r3, [r4, #40]	; 0x28
 8028fd4:	4b04      	ldr	r3, [pc, #16]	; (8028fe8 <std+0x40>)
 8028fd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028fd8:	4b04      	ldr	r3, [pc, #16]	; (8028fec <std+0x44>)
 8028fda:	6323      	str	r3, [r4, #48]	; 0x30
 8028fdc:	bd10      	pop	{r4, pc}
 8028fde:	bf00      	nop
 8028fe0:	08029299 	.word	0x08029299
 8028fe4:	080292bb 	.word	0x080292bb
 8028fe8:	080292f3 	.word	0x080292f3
 8028fec:	08029317 	.word	0x08029317

08028ff0 <_cleanup_r>:
 8028ff0:	4901      	ldr	r1, [pc, #4]	; (8028ff8 <_cleanup_r+0x8>)
 8028ff2:	f000 b8af 	b.w	8029154 <_fwalk_reent>
 8028ff6:	bf00      	nop
 8028ff8:	08028f31 	.word	0x08028f31

08028ffc <__sfmoreglue>:
 8028ffc:	b570      	push	{r4, r5, r6, lr}
 8028ffe:	2268      	movs	r2, #104	; 0x68
 8029000:	1e4d      	subs	r5, r1, #1
 8029002:	460e      	mov	r6, r1
 8029004:	4355      	muls	r5, r2
 8029006:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802900a:	f7ff f965 	bl	80282d8 <_malloc_r>
 802900e:	4604      	mov	r4, r0
 8029010:	b140      	cbz	r0, 8029024 <__sfmoreglue+0x28>
 8029012:	2100      	movs	r1, #0
 8029014:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8029018:	e9c0 1600 	strd	r1, r6, [r0]
 802901c:	300c      	adds	r0, #12
 802901e:	60a0      	str	r0, [r4, #8]
 8029020:	f7ff f8e5 	bl	80281ee <memset>
 8029024:	4620      	mov	r0, r4
 8029026:	bd70      	pop	{r4, r5, r6, pc}

08029028 <__sfp_lock_acquire>:
 8029028:	4801      	ldr	r0, [pc, #4]	; (8029030 <__sfp_lock_acquire+0x8>)
 802902a:	f000 b8b3 	b.w	8029194 <__retarget_lock_acquire_recursive>
 802902e:	bf00      	nop
 8029030:	2019858e 	.word	0x2019858e

08029034 <__sfp_lock_release>:
 8029034:	4801      	ldr	r0, [pc, #4]	; (802903c <__sfp_lock_release+0x8>)
 8029036:	f000 b8af 	b.w	8029198 <__retarget_lock_release_recursive>
 802903a:	bf00      	nop
 802903c:	2019858e 	.word	0x2019858e

08029040 <__sinit_lock_acquire>:
 8029040:	4801      	ldr	r0, [pc, #4]	; (8029048 <__sinit_lock_acquire+0x8>)
 8029042:	f000 b8a7 	b.w	8029194 <__retarget_lock_acquire_recursive>
 8029046:	bf00      	nop
 8029048:	2019858f 	.word	0x2019858f

0802904c <__sinit_lock_release>:
 802904c:	4801      	ldr	r0, [pc, #4]	; (8029054 <__sinit_lock_release+0x8>)
 802904e:	f000 b8a3 	b.w	8029198 <__retarget_lock_release_recursive>
 8029052:	bf00      	nop
 8029054:	2019858f 	.word	0x2019858f

08029058 <__sinit>:
 8029058:	b510      	push	{r4, lr}
 802905a:	4604      	mov	r4, r0
 802905c:	f7ff fff0 	bl	8029040 <__sinit_lock_acquire>
 8029060:	69a3      	ldr	r3, [r4, #24]
 8029062:	b11b      	cbz	r3, 802906c <__sinit+0x14>
 8029064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029068:	f7ff bff0 	b.w	802904c <__sinit_lock_release>
 802906c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8029070:	6523      	str	r3, [r4, #80]	; 0x50
 8029072:	4620      	mov	r0, r4
 8029074:	4b12      	ldr	r3, [pc, #72]	; (80290c0 <__sinit+0x68>)
 8029076:	4a13      	ldr	r2, [pc, #76]	; (80290c4 <__sinit+0x6c>)
 8029078:	681b      	ldr	r3, [r3, #0]
 802907a:	62a2      	str	r2, [r4, #40]	; 0x28
 802907c:	42a3      	cmp	r3, r4
 802907e:	bf04      	itt	eq
 8029080:	2301      	moveq	r3, #1
 8029082:	61a3      	streq	r3, [r4, #24]
 8029084:	f000 f820 	bl	80290c8 <__sfp>
 8029088:	6060      	str	r0, [r4, #4]
 802908a:	4620      	mov	r0, r4
 802908c:	f000 f81c 	bl	80290c8 <__sfp>
 8029090:	60a0      	str	r0, [r4, #8]
 8029092:	4620      	mov	r0, r4
 8029094:	f000 f818 	bl	80290c8 <__sfp>
 8029098:	2200      	movs	r2, #0
 802909a:	2104      	movs	r1, #4
 802909c:	60e0      	str	r0, [r4, #12]
 802909e:	6860      	ldr	r0, [r4, #4]
 80290a0:	f7ff ff82 	bl	8028fa8 <std>
 80290a4:	2201      	movs	r2, #1
 80290a6:	2109      	movs	r1, #9
 80290a8:	68a0      	ldr	r0, [r4, #8]
 80290aa:	f7ff ff7d 	bl	8028fa8 <std>
 80290ae:	2202      	movs	r2, #2
 80290b0:	2112      	movs	r1, #18
 80290b2:	68e0      	ldr	r0, [r4, #12]
 80290b4:	f7ff ff78 	bl	8028fa8 <std>
 80290b8:	2301      	movs	r3, #1
 80290ba:	61a3      	str	r3, [r4, #24]
 80290bc:	e7d2      	b.n	8029064 <__sinit+0xc>
 80290be:	bf00      	nop
 80290c0:	0802c2c4 	.word	0x0802c2c4
 80290c4:	08028ff1 	.word	0x08028ff1

080290c8 <__sfp>:
 80290c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80290ca:	4607      	mov	r7, r0
 80290cc:	f7ff ffac 	bl	8029028 <__sfp_lock_acquire>
 80290d0:	4b1e      	ldr	r3, [pc, #120]	; (802914c <__sfp+0x84>)
 80290d2:	681e      	ldr	r6, [r3, #0]
 80290d4:	69b3      	ldr	r3, [r6, #24]
 80290d6:	b913      	cbnz	r3, 80290de <__sfp+0x16>
 80290d8:	4630      	mov	r0, r6
 80290da:	f7ff ffbd 	bl	8029058 <__sinit>
 80290de:	3648      	adds	r6, #72	; 0x48
 80290e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80290e4:	3b01      	subs	r3, #1
 80290e6:	d503      	bpl.n	80290f0 <__sfp+0x28>
 80290e8:	6833      	ldr	r3, [r6, #0]
 80290ea:	b30b      	cbz	r3, 8029130 <__sfp+0x68>
 80290ec:	6836      	ldr	r6, [r6, #0]
 80290ee:	e7f7      	b.n	80290e0 <__sfp+0x18>
 80290f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80290f4:	b9d5      	cbnz	r5, 802912c <__sfp+0x64>
 80290f6:	4b16      	ldr	r3, [pc, #88]	; (8029150 <__sfp+0x88>)
 80290f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80290fc:	6665      	str	r5, [r4, #100]	; 0x64
 80290fe:	60e3      	str	r3, [r4, #12]
 8029100:	f000 f847 	bl	8029192 <__retarget_lock_init_recursive>
 8029104:	f7ff ff96 	bl	8029034 <__sfp_lock_release>
 8029108:	2208      	movs	r2, #8
 802910a:	4629      	mov	r1, r5
 802910c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8029110:	6025      	str	r5, [r4, #0]
 8029112:	61a5      	str	r5, [r4, #24]
 8029114:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8029118:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802911c:	f7ff f867 	bl	80281ee <memset>
 8029120:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8029124:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8029128:	4620      	mov	r0, r4
 802912a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802912c:	3468      	adds	r4, #104	; 0x68
 802912e:	e7d9      	b.n	80290e4 <__sfp+0x1c>
 8029130:	2104      	movs	r1, #4
 8029132:	4638      	mov	r0, r7
 8029134:	f7ff ff62 	bl	8028ffc <__sfmoreglue>
 8029138:	4604      	mov	r4, r0
 802913a:	6030      	str	r0, [r6, #0]
 802913c:	2800      	cmp	r0, #0
 802913e:	d1d5      	bne.n	80290ec <__sfp+0x24>
 8029140:	f7ff ff78 	bl	8029034 <__sfp_lock_release>
 8029144:	230c      	movs	r3, #12
 8029146:	603b      	str	r3, [r7, #0]
 8029148:	e7ee      	b.n	8029128 <__sfp+0x60>
 802914a:	bf00      	nop
 802914c:	0802c2c4 	.word	0x0802c2c4
 8029150:	ffff0001 	.word	0xffff0001

08029154 <_fwalk_reent>:
 8029154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029158:	4606      	mov	r6, r0
 802915a:	4688      	mov	r8, r1
 802915c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8029160:	2700      	movs	r7, #0
 8029162:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8029166:	f1b9 0901 	subs.w	r9, r9, #1
 802916a:	d505      	bpl.n	8029178 <_fwalk_reent+0x24>
 802916c:	6824      	ldr	r4, [r4, #0]
 802916e:	2c00      	cmp	r4, #0
 8029170:	d1f7      	bne.n	8029162 <_fwalk_reent+0xe>
 8029172:	4638      	mov	r0, r7
 8029174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029178:	89ab      	ldrh	r3, [r5, #12]
 802917a:	2b01      	cmp	r3, #1
 802917c:	d907      	bls.n	802918e <_fwalk_reent+0x3a>
 802917e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029182:	3301      	adds	r3, #1
 8029184:	d003      	beq.n	802918e <_fwalk_reent+0x3a>
 8029186:	4629      	mov	r1, r5
 8029188:	4630      	mov	r0, r6
 802918a:	47c0      	blx	r8
 802918c:	4307      	orrs	r7, r0
 802918e:	3568      	adds	r5, #104	; 0x68
 8029190:	e7e9      	b.n	8029166 <_fwalk_reent+0x12>

08029192 <__retarget_lock_init_recursive>:
 8029192:	4770      	bx	lr

08029194 <__retarget_lock_acquire_recursive>:
 8029194:	4770      	bx	lr

08029196 <__retarget_lock_release>:
 8029196:	4770      	bx	lr

08029198 <__retarget_lock_release_recursive>:
 8029198:	4770      	bx	lr

0802919a <__swhatbuf_r>:
 802919a:	b570      	push	{r4, r5, r6, lr}
 802919c:	460e      	mov	r6, r1
 802919e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80291a2:	b096      	sub	sp, #88	; 0x58
 80291a4:	4614      	mov	r4, r2
 80291a6:	2900      	cmp	r1, #0
 80291a8:	461d      	mov	r5, r3
 80291aa:	da08      	bge.n	80291be <__swhatbuf_r+0x24>
 80291ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80291b0:	2200      	movs	r2, #0
 80291b2:	602a      	str	r2, [r5, #0]
 80291b4:	061a      	lsls	r2, r3, #24
 80291b6:	d410      	bmi.n	80291da <__swhatbuf_r+0x40>
 80291b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80291bc:	e00e      	b.n	80291dc <__swhatbuf_r+0x42>
 80291be:	466a      	mov	r2, sp
 80291c0:	f000 f8d0 	bl	8029364 <_fstat_r>
 80291c4:	2800      	cmp	r0, #0
 80291c6:	dbf1      	blt.n	80291ac <__swhatbuf_r+0x12>
 80291c8:	9a01      	ldr	r2, [sp, #4]
 80291ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80291ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80291d2:	425a      	negs	r2, r3
 80291d4:	415a      	adcs	r2, r3
 80291d6:	602a      	str	r2, [r5, #0]
 80291d8:	e7ee      	b.n	80291b8 <__swhatbuf_r+0x1e>
 80291da:	2340      	movs	r3, #64	; 0x40
 80291dc:	2000      	movs	r0, #0
 80291de:	6023      	str	r3, [r4, #0]
 80291e0:	b016      	add	sp, #88	; 0x58
 80291e2:	bd70      	pop	{r4, r5, r6, pc}

080291e4 <__smakebuf_r>:
 80291e4:	898b      	ldrh	r3, [r1, #12]
 80291e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80291e8:	079d      	lsls	r5, r3, #30
 80291ea:	4606      	mov	r6, r0
 80291ec:	460c      	mov	r4, r1
 80291ee:	d507      	bpl.n	8029200 <__smakebuf_r+0x1c>
 80291f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80291f4:	6023      	str	r3, [r4, #0]
 80291f6:	6123      	str	r3, [r4, #16]
 80291f8:	2301      	movs	r3, #1
 80291fa:	6163      	str	r3, [r4, #20]
 80291fc:	b002      	add	sp, #8
 80291fe:	bd70      	pop	{r4, r5, r6, pc}
 8029200:	ab01      	add	r3, sp, #4
 8029202:	466a      	mov	r2, sp
 8029204:	f7ff ffc9 	bl	802919a <__swhatbuf_r>
 8029208:	9900      	ldr	r1, [sp, #0]
 802920a:	4605      	mov	r5, r0
 802920c:	4630      	mov	r0, r6
 802920e:	f7ff f863 	bl	80282d8 <_malloc_r>
 8029212:	b948      	cbnz	r0, 8029228 <__smakebuf_r+0x44>
 8029214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029218:	059a      	lsls	r2, r3, #22
 802921a:	d4ef      	bmi.n	80291fc <__smakebuf_r+0x18>
 802921c:	f023 0303 	bic.w	r3, r3, #3
 8029220:	f043 0302 	orr.w	r3, r3, #2
 8029224:	81a3      	strh	r3, [r4, #12]
 8029226:	e7e3      	b.n	80291f0 <__smakebuf_r+0xc>
 8029228:	4b0d      	ldr	r3, [pc, #52]	; (8029260 <__smakebuf_r+0x7c>)
 802922a:	62b3      	str	r3, [r6, #40]	; 0x28
 802922c:	89a3      	ldrh	r3, [r4, #12]
 802922e:	6020      	str	r0, [r4, #0]
 8029230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029234:	6120      	str	r0, [r4, #16]
 8029236:	81a3      	strh	r3, [r4, #12]
 8029238:	9b00      	ldr	r3, [sp, #0]
 802923a:	6163      	str	r3, [r4, #20]
 802923c:	9b01      	ldr	r3, [sp, #4]
 802923e:	b15b      	cbz	r3, 8029258 <__smakebuf_r+0x74>
 8029240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029244:	4630      	mov	r0, r6
 8029246:	f000 f89f 	bl	8029388 <_isatty_r>
 802924a:	b128      	cbz	r0, 8029258 <__smakebuf_r+0x74>
 802924c:	89a3      	ldrh	r3, [r4, #12]
 802924e:	f023 0303 	bic.w	r3, r3, #3
 8029252:	f043 0301 	orr.w	r3, r3, #1
 8029256:	81a3      	strh	r3, [r4, #12]
 8029258:	89a0      	ldrh	r0, [r4, #12]
 802925a:	4305      	orrs	r5, r0
 802925c:	81a5      	strh	r5, [r4, #12]
 802925e:	e7cd      	b.n	80291fc <__smakebuf_r+0x18>
 8029260:	08028ff1 	.word	0x08028ff1

08029264 <memchr>:
 8029264:	b2c9      	uxtb	r1, r1
 8029266:	4402      	add	r2, r0
 8029268:	b510      	push	{r4, lr}
 802926a:	4290      	cmp	r0, r2
 802926c:	4603      	mov	r3, r0
 802926e:	d101      	bne.n	8029274 <memchr+0x10>
 8029270:	2300      	movs	r3, #0
 8029272:	e003      	b.n	802927c <memchr+0x18>
 8029274:	781c      	ldrb	r4, [r3, #0]
 8029276:	3001      	adds	r0, #1
 8029278:	428c      	cmp	r4, r1
 802927a:	d1f6      	bne.n	802926a <memchr+0x6>
 802927c:	4618      	mov	r0, r3
 802927e:	bd10      	pop	{r4, pc}

08029280 <__malloc_lock>:
 8029280:	4801      	ldr	r0, [pc, #4]	; (8029288 <__malloc_lock+0x8>)
 8029282:	f7ff bf87 	b.w	8029194 <__retarget_lock_acquire_recursive>
 8029286:	bf00      	nop
 8029288:	2019858d 	.word	0x2019858d

0802928c <__malloc_unlock>:
 802928c:	4801      	ldr	r0, [pc, #4]	; (8029294 <__malloc_unlock+0x8>)
 802928e:	f7ff bf83 	b.w	8029198 <__retarget_lock_release_recursive>
 8029292:	bf00      	nop
 8029294:	2019858d 	.word	0x2019858d

08029298 <__sread>:
 8029298:	b510      	push	{r4, lr}
 802929a:	460c      	mov	r4, r1
 802929c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80292a0:	f000 f894 	bl	80293cc <_read_r>
 80292a4:	2800      	cmp	r0, #0
 80292a6:	bfab      	itete	ge
 80292a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80292aa:	89a3      	ldrhlt	r3, [r4, #12]
 80292ac:	181b      	addge	r3, r3, r0
 80292ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80292b2:	bfac      	ite	ge
 80292b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80292b6:	81a3      	strhlt	r3, [r4, #12]
 80292b8:	bd10      	pop	{r4, pc}

080292ba <__swrite>:
 80292ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80292be:	461f      	mov	r7, r3
 80292c0:	898b      	ldrh	r3, [r1, #12]
 80292c2:	4605      	mov	r5, r0
 80292c4:	460c      	mov	r4, r1
 80292c6:	05db      	lsls	r3, r3, #23
 80292c8:	4616      	mov	r6, r2
 80292ca:	d505      	bpl.n	80292d8 <__swrite+0x1e>
 80292cc:	2302      	movs	r3, #2
 80292ce:	2200      	movs	r2, #0
 80292d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80292d4:	f000 f868 	bl	80293a8 <_lseek_r>
 80292d8:	89a3      	ldrh	r3, [r4, #12]
 80292da:	4632      	mov	r2, r6
 80292dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80292e0:	4628      	mov	r0, r5
 80292e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80292e6:	81a3      	strh	r3, [r4, #12]
 80292e8:	463b      	mov	r3, r7
 80292ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80292ee:	f000 b817 	b.w	8029320 <_write_r>

080292f2 <__sseek>:
 80292f2:	b510      	push	{r4, lr}
 80292f4:	460c      	mov	r4, r1
 80292f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80292fa:	f000 f855 	bl	80293a8 <_lseek_r>
 80292fe:	1c43      	adds	r3, r0, #1
 8029300:	89a3      	ldrh	r3, [r4, #12]
 8029302:	bf15      	itete	ne
 8029304:	6560      	strne	r0, [r4, #84]	; 0x54
 8029306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802930a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802930e:	81a3      	strheq	r3, [r4, #12]
 8029310:	bf18      	it	ne
 8029312:	81a3      	strhne	r3, [r4, #12]
 8029314:	bd10      	pop	{r4, pc}

08029316 <__sclose>:
 8029316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802931a:	f000 b813 	b.w	8029344 <_close_r>
	...

08029320 <_write_r>:
 8029320:	b538      	push	{r3, r4, r5, lr}
 8029322:	4604      	mov	r4, r0
 8029324:	4d06      	ldr	r5, [pc, #24]	; (8029340 <_write_r+0x20>)
 8029326:	4608      	mov	r0, r1
 8029328:	4611      	mov	r1, r2
 802932a:	2200      	movs	r2, #0
 802932c:	602a      	str	r2, [r5, #0]
 802932e:	461a      	mov	r2, r3
 8029330:	f7d8 fb99 	bl	8001a66 <_write>
 8029334:	1c43      	adds	r3, r0, #1
 8029336:	d102      	bne.n	802933e <_write_r+0x1e>
 8029338:	682b      	ldr	r3, [r5, #0]
 802933a:	b103      	cbz	r3, 802933e <_write_r+0x1e>
 802933c:	6023      	str	r3, [r4, #0]
 802933e:	bd38      	pop	{r3, r4, r5, pc}
 8029340:	20198590 	.word	0x20198590

08029344 <_close_r>:
 8029344:	b538      	push	{r3, r4, r5, lr}
 8029346:	2300      	movs	r3, #0
 8029348:	4d05      	ldr	r5, [pc, #20]	; (8029360 <_close_r+0x1c>)
 802934a:	4604      	mov	r4, r0
 802934c:	4608      	mov	r0, r1
 802934e:	602b      	str	r3, [r5, #0]
 8029350:	f7d8 fba5 	bl	8001a9e <_close>
 8029354:	1c43      	adds	r3, r0, #1
 8029356:	d102      	bne.n	802935e <_close_r+0x1a>
 8029358:	682b      	ldr	r3, [r5, #0]
 802935a:	b103      	cbz	r3, 802935e <_close_r+0x1a>
 802935c:	6023      	str	r3, [r4, #0]
 802935e:	bd38      	pop	{r3, r4, r5, pc}
 8029360:	20198590 	.word	0x20198590

08029364 <_fstat_r>:
 8029364:	b538      	push	{r3, r4, r5, lr}
 8029366:	2300      	movs	r3, #0
 8029368:	4d06      	ldr	r5, [pc, #24]	; (8029384 <_fstat_r+0x20>)
 802936a:	4604      	mov	r4, r0
 802936c:	4608      	mov	r0, r1
 802936e:	4611      	mov	r1, r2
 8029370:	602b      	str	r3, [r5, #0]
 8029372:	f7d8 fba0 	bl	8001ab6 <_fstat>
 8029376:	1c43      	adds	r3, r0, #1
 8029378:	d102      	bne.n	8029380 <_fstat_r+0x1c>
 802937a:	682b      	ldr	r3, [r5, #0]
 802937c:	b103      	cbz	r3, 8029380 <_fstat_r+0x1c>
 802937e:	6023      	str	r3, [r4, #0]
 8029380:	bd38      	pop	{r3, r4, r5, pc}
 8029382:	bf00      	nop
 8029384:	20198590 	.word	0x20198590

08029388 <_isatty_r>:
 8029388:	b538      	push	{r3, r4, r5, lr}
 802938a:	2300      	movs	r3, #0
 802938c:	4d05      	ldr	r5, [pc, #20]	; (80293a4 <_isatty_r+0x1c>)
 802938e:	4604      	mov	r4, r0
 8029390:	4608      	mov	r0, r1
 8029392:	602b      	str	r3, [r5, #0]
 8029394:	f7d8 fb9f 	bl	8001ad6 <_isatty>
 8029398:	1c43      	adds	r3, r0, #1
 802939a:	d102      	bne.n	80293a2 <_isatty_r+0x1a>
 802939c:	682b      	ldr	r3, [r5, #0]
 802939e:	b103      	cbz	r3, 80293a2 <_isatty_r+0x1a>
 80293a0:	6023      	str	r3, [r4, #0]
 80293a2:	bd38      	pop	{r3, r4, r5, pc}
 80293a4:	20198590 	.word	0x20198590

080293a8 <_lseek_r>:
 80293a8:	b538      	push	{r3, r4, r5, lr}
 80293aa:	4604      	mov	r4, r0
 80293ac:	4d06      	ldr	r5, [pc, #24]	; (80293c8 <_lseek_r+0x20>)
 80293ae:	4608      	mov	r0, r1
 80293b0:	4611      	mov	r1, r2
 80293b2:	2200      	movs	r2, #0
 80293b4:	602a      	str	r2, [r5, #0]
 80293b6:	461a      	mov	r2, r3
 80293b8:	f7d8 fb98 	bl	8001aec <_lseek>
 80293bc:	1c43      	adds	r3, r0, #1
 80293be:	d102      	bne.n	80293c6 <_lseek_r+0x1e>
 80293c0:	682b      	ldr	r3, [r5, #0]
 80293c2:	b103      	cbz	r3, 80293c6 <_lseek_r+0x1e>
 80293c4:	6023      	str	r3, [r4, #0]
 80293c6:	bd38      	pop	{r3, r4, r5, pc}
 80293c8:	20198590 	.word	0x20198590

080293cc <_read_r>:
 80293cc:	b538      	push	{r3, r4, r5, lr}
 80293ce:	4604      	mov	r4, r0
 80293d0:	4d06      	ldr	r5, [pc, #24]	; (80293ec <_read_r+0x20>)
 80293d2:	4608      	mov	r0, r1
 80293d4:	4611      	mov	r1, r2
 80293d6:	2200      	movs	r2, #0
 80293d8:	602a      	str	r2, [r5, #0]
 80293da:	461a      	mov	r2, r3
 80293dc:	f7d8 fb26 	bl	8001a2c <_read>
 80293e0:	1c43      	adds	r3, r0, #1
 80293e2:	d102      	bne.n	80293ea <_read_r+0x1e>
 80293e4:	682b      	ldr	r3, [r5, #0]
 80293e6:	b103      	cbz	r3, 80293ea <_read_r+0x1e>
 80293e8:	6023      	str	r3, [r4, #0]
 80293ea:	bd38      	pop	{r3, r4, r5, pc}
 80293ec:	20198590 	.word	0x20198590

080293f0 <_init>:
 80293f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80293f2:	bf00      	nop
 80293f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80293f6:	bc08      	pop	{r3}
 80293f8:	469e      	mov	lr, r3
 80293fa:	4770      	bx	lr

080293fc <_fini>:
 80293fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80293fe:	bf00      	nop
 8029400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029402:	bc08      	pop	{r3}
 8029404:	469e      	mov	lr, r3
 8029406:	4770      	bx	lr
